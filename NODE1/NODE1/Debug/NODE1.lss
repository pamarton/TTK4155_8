
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  00001f8e  00002022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  00800114  00800114  00002036  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002036  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d8  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d48  00000000  00000000  0000243e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010c9  00000000  00000000  00006186  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e88  00000000  00000000  0000724f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ac8  00000000  00000000  000090d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ce5  00000000  00000000  00009ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002879  00000000  00000000  0000a885  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000003a0  00000000  00000000  0000d0fe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	09 c2       	rjmp	.+1042   	; 0x414 <__ctors_end>
       2:	00 00       	nop
       4:	9e c3       	rjmp	.+1852   	; 0x742 <__vector_1>
       6:	00 00       	nop
       8:	ab c3       	rjmp	.+1878   	; 0x760 <__vector_2>
       a:	00 00       	nop
       c:	31 c2       	rjmp	.+1122   	; 0x470 <__vector_3>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c2       	rjmp	.+1078   	; 0x44c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c2       	rjmp	.+1074   	; 0x44c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c2       	rjmp	.+1070   	; 0x44c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c2       	rjmp	.+1066   	; 0x44c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c2       	rjmp	.+1062   	; 0x44c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c2       	rjmp	.+1058   	; 0x44c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c2       	rjmp	.+1054   	; 0x44c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c2       	rjmp	.+1050   	; 0x44c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c2       	rjmp	.+1046   	; 0x44c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c2       	rjmp	.+1042   	; 0x44c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c2       	rjmp	.+1038   	; 0x44c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <__vector_16>
      44:	03 c2       	rjmp	.+1030   	; 0x44c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c2       	rjmp	.+1026   	; 0x44c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c1       	rjmp	.+1018   	; 0x44c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c1       	rjmp	.+1014   	; 0x44c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c1       	rjmp	.+1010   	; 0x44c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c1       	rjmp	.+1006   	; 0x44c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c1       	rjmp	.+1002   	; 0x44c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c1       	rjmp	.+998    	; 0x44c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c1       	rjmp	.+994    	; 0x44c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c1       	rjmp	.+990    	; 0x44c <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	11 e0       	ldi	r17, 0x01	; 1
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	ee e8       	ldi	r30, 0x8E	; 142
     428:	ff e1       	ldi	r31, 0x1F	; 31
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a4 31       	cpi	r26, 0x14	; 20
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	a4 e1       	ldi	r26, 0x14	; 20
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a3 3a       	cpi	r26, 0xA3	; 163
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	ab d5       	rcall	.+2902   	; 0xf9e <main>
     448:	0c 94 c5 0f 	jmp	0x1f8a	; 0x1f8a <_exit>

0000044c <__bad_interrupt>:
     44c:	d9 cd       	rjmp	.-1102   	; 0x0 <__vectors>

0000044e <CAN_construct_message>:
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
}
     44e:	90 93 16 01 	sts	0x0116, r25
     452:	80 93 15 01 	sts	0x0115, r24
     456:	60 93 17 01 	sts	0x0117, r22
     45a:	66 23       	and	r22, r22
     45c:	41 f0       	breq	.+16     	; 0x46e <CAN_construct_message+0x20>
     45e:	88 e1       	ldi	r24, 0x18	; 24
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	fc 01       	movw	r30, r24
     464:	11 92       	st	Z+, r1
     466:	2e 2f       	mov	r18, r30
     468:	28 1b       	sub	r18, r24
     46a:	26 17       	cp	r18, r22
     46c:	d8 f3       	brcs	.-10     	; 0x464 <CAN_construct_message+0x16>
     46e:	08 95       	ret

00000470 <__vector_3>:
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	8f 93       	push	r24
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 14 01 	sts	0x0114, r24
     482:	8f 91       	pop	r24
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <CAN_interrupt_setup>:
     48e:	f8 94       	cli
     490:	86 b7       	in	r24, 0x36	; 54
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	86 bf       	out	0x36, r24	; 54
     496:	8b b7       	in	r24, 0x3b	; 59
     498:	80 62       	ori	r24, 0x20	; 32
     49a:	8b bf       	out	0x3b, r24	; 59
     49c:	78 94       	sei
     49e:	08 95       	ret

000004a0 <CAN_initialize>:
     4a0:	d0 d0       	rcall	.+416    	; 0x642 <MCP2515_initialize>
     4a2:	68 e0       	ldi	r22, 0x08	; 8
     4a4:	88 e2       	ldi	r24, 0x28	; 40
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	d2 df       	rcall	.-92     	; 0x44e <CAN_construct_message>
     4aa:	4f ef       	ldi	r20, 0xFF	; 255
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	64 e6       	ldi	r22, 0x64	; 100
     4b0:	80 e6       	ldi	r24, 0x60	; 96
     4b2:	ae d0       	rcall	.+348    	; 0x610 <MCP2515_bit_modify>
     4b4:	4f ef       	ldi	r20, 0xFF	; 255
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	64 e6       	ldi	r22, 0x64	; 100
     4ba:	80 e7       	ldi	r24, 0x70	; 112
     4bc:	a9 d0       	rcall	.+338    	; 0x610 <MCP2515_bit_modify>
     4be:	41 e0       	ldi	r20, 0x01	; 1
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	8b e2       	ldi	r24, 0x2B	; 43
     4c6:	a4 d0       	rcall	.+328    	; 0x610 <MCP2515_bit_modify>
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 ee       	ldi	r22, 0xE0	; 224
     4ce:	8f e0       	ldi	r24, 0x0F	; 15
     4d0:	9f d0       	rcall	.+318    	; 0x610 <MCP2515_bit_modify>
     4d2:	dd cf       	rjmp	.-70     	; 0x48e <CAN_interrupt_setup>
     4d4:	08 95       	ret

000004d6 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     4da:	c4 e0       	ldi	r28, 0x04	; 4
     4dc:	d0 e0       	ldi	r29, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <CAN_transmission_complete+0xe>
     4e0:	cc 0f       	add	r28, r28
     4e2:	dd 1f       	adc	r29, r29
     4e4:	8a 95       	dec	r24
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <CAN_transmission_complete+0xa>
     4e8:	8c e2       	ldi	r24, 0x2C	; 44
     4ea:	74 d0       	rcall	.+232    	; 0x5d4 <MCP2515_read>
     4ec:	8c 23       	and	r24, r28
     4ee:	9d 23       	and	r25, r29
     4f0:	89 2b       	or	r24, r25
     4f2:	d1 f3       	breq	.-12     	; 0x4e8 <CAN_transmission_complete+0x12>
	return 1;
}
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
     508:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     50a:	f6 2e       	mov	r15, r22
     50c:	ff 0c       	add	r15, r15
     50e:	ff 0c       	add	r15, r15
     510:	ff 0c       	add	r15, r15
     512:	ff 0c       	add	r15, r15
     514:	28 81       	ld	r18, Y
     516:	39 81       	ldd	r19, Y+1	; 0x01
     518:	b9 01       	movw	r22, r18
     51a:	75 95       	asr	r23
     51c:	67 95       	ror	r22
     51e:	75 95       	asr	r23
     520:	67 95       	ror	r22
     522:	75 95       	asr	r23
     524:	67 95       	ror	r22
     526:	81 e3       	ldi	r24, 0x31	; 49
     528:	8f 0d       	add	r24, r15
     52a:	45 d0       	rcall	.+138    	; 0x5b6 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     52c:	28 81       	ld	r18, Y
     52e:	39 81       	ldd	r19, Y+1	; 0x01
     530:	b9 01       	movw	r22, r18
     532:	66 0f       	add	r22, r22
     534:	77 1f       	adc	r23, r23
     536:	62 95       	swap	r22
     538:	72 95       	swap	r23
     53a:	70 7f       	andi	r23, 0xF0	; 240
     53c:	76 27       	eor	r23, r22
     53e:	60 7f       	andi	r22, 0xF0	; 240
     540:	76 27       	eor	r23, r22
     542:	82 e3       	ldi	r24, 0x32	; 50
     544:	8f 0d       	add	r24, r15
     546:	37 d0       	rcall	.+110    	; 0x5b6 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     548:	6a 81       	ldd	r22, Y+2	; 0x02
     54a:	6f 70       	andi	r22, 0x0F	; 15
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	85 e3       	ldi	r24, 0x35	; 53
     550:	8f 0d       	add	r24, r15
     552:	31 d0       	rcall	.+98     	; 0x5b6 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	88 23       	and	r24, r24
     558:	89 f0       	breq	.+34     	; 0x57c <__stack+0x7d>
     55a:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     55c:	86 e3       	ldi	r24, 0x36	; 54
     55e:	f8 0e       	add	r15, r24
     560:	fe 01       	movw	r30, r28
     562:	e1 0f       	add	r30, r17
     564:	f1 1d       	adc	r31, r1
     566:	63 81       	ldd	r22, Z+3	; 0x03
     568:	77 27       	eor	r23, r23
     56a:	67 fd       	sbrc	r22, 7
     56c:	70 95       	com	r23
     56e:	8f 2d       	mov	r24, r15
     570:	81 0f       	add	r24, r17
     572:	21 d0       	rcall	.+66     	; 0x5b6 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     574:	1f 5f       	subi	r17, 0xFF	; 255
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	18 17       	cp	r17, r24
     57a:	90 f3       	brcs	.-28     	; 0x560 <__stack+0x61>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     57c:	80 2f       	mov	r24, r16
     57e:	38 d0       	rcall	.+112    	; 0x5f0 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     580:	80 2f       	mov	r24, r16
     582:	a9 df       	rcall	.-174    	; 0x4d6 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	08 95       	ret

00000590 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     590:	20 91 17 01 	lds	r18, 0x0117
     594:	22 23       	and	r18, r18
     596:	59 f0       	breq	.+22     	; 0x5ae <CAN_message_send+0x1e>
     598:	38 2f       	mov	r19, r24
     59a:	a8 e1       	ldi	r26, 0x18	; 24
     59c:	b1 e0       	ldi	r27, 0x01	; 1
     59e:	e8 2f       	mov	r30, r24
     5a0:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     5a2:	81 91       	ld	r24, Z+
     5a4:	8d 93       	st	X+, r24
     5a6:	8e 2f       	mov	r24, r30
     5a8:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5aa:	82 17       	cp	r24, r18
     5ac:	d0 f3       	brcs	.-12     	; 0x5a2 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     5ae:	85 e1       	ldi	r24, 0x15	; 21
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	a4 cf       	rjmp	.-184    	; 0x4fc <CAN_send_byte>
     5b4:	08 95       	ret

000005b6 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	d8 2f       	mov	r29, r24
     5bc:	c6 2f       	mov	r28, r22
     5be:	4e d0       	rcall	.+156    	; 0x65c <SPI_select>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	42 d0       	rcall	.+132    	; 0x648 <SPI_send>
     5c4:	8d 2f       	mov	r24, r29
     5c6:	40 d0       	rcall	.+128    	; 0x648 <SPI_send>
     5c8:	8c 2f       	mov	r24, r28
     5ca:	3e d0       	rcall	.+124    	; 0x648 <SPI_send>
     5cc:	49 d0       	rcall	.+146    	; 0x660 <SPI_deselect>
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <MCP2515_read>:
     5d4:	cf 93       	push	r28
     5d6:	c8 2f       	mov	r28, r24
     5d8:	41 d0       	rcall	.+130    	; 0x65c <SPI_select>
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	35 d0       	rcall	.+106    	; 0x648 <SPI_send>
     5de:	8c 2f       	mov	r24, r28
     5e0:	33 d0       	rcall	.+102    	; 0x648 <SPI_send>
     5e2:	36 d0       	rcall	.+108    	; 0x650 <SPI_receive>
     5e4:	c8 2f       	mov	r28, r24
     5e6:	3c d0       	rcall	.+120    	; 0x660 <SPI_deselect>
     5e8:	8c 2f       	mov	r24, r28
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <MCP2515_request_to_send>:
     5f0:	cf 93       	push	r28
     5f2:	c8 2f       	mov	r28, r24
     5f4:	33 d0       	rcall	.+102    	; 0x65c <SPI_select>
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	c9 01       	movw	r24, r18
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <MCP2515_request_to_send+0x12>
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	ca 95       	dec	r28
     604:	e2 f7       	brpl	.-8      	; 0x5fe <MCP2515_request_to_send+0xe>
     606:	80 68       	ori	r24, 0x80	; 128
     608:	1f d0       	rcall	.+62     	; 0x648 <SPI_send>
     60a:	2a d0       	rcall	.+84     	; 0x660 <SPI_deselect>
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	18 2f       	mov	r17, r24
     618:	d6 2f       	mov	r29, r22
     61a:	c4 2f       	mov	r28, r20
	SPI_select();
     61c:	1f d0       	rcall	.+62     	; 0x65c <SPI_select>
	SPI_send(MCP_BITMOD);
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	13 d0       	rcall	.+38     	; 0x648 <SPI_send>
	SPI_send(adr);
     622:	81 2f       	mov	r24, r17
     624:	11 d0       	rcall	.+34     	; 0x648 <SPI_send>
	SPI_send(mask);
     626:	8d 2f       	mov	r24, r29
     628:	0f d0       	rcall	.+30     	; 0x648 <SPI_send>
	SPI_send(data);
     62a:	8c 2f       	mov	r24, r28
     62c:	0d d0       	rcall	.+26     	; 0x648 <SPI_send>
	SPI_deselect();
     62e:	18 d0       	rcall	.+48     	; 0x660 <SPI_deselect>
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     638:	11 d0       	rcall	.+34     	; 0x65c <SPI_select>
	SPI_send(MCP_RESET);
     63a:	80 ec       	ldi	r24, 0xC0	; 192
     63c:	05 d0       	rcall	.+10     	; 0x648 <SPI_send>
	SPI_deselect();
     63e:	10 c0       	rjmp	.+32     	; 0x660 <SPI_deselect>
     640:	08 95       	ret

00000642 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     642:	10 d0       	rcall	.+32     	; 0x664 <SPI_initialize>
	MCP2515_reset();
     644:	f9 cf       	rjmp	.-14     	; 0x638 <MCP2515_reset>
     646:	08 95       	ret

00000648 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     648:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     64a:	77 9b       	sbis	0x0e, 7	; 14
     64c:	fe cf       	rjmp	.-4      	; 0x64a <SPI_send+0x2>

}
     64e:	08 95       	ret

00000650 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	fa df       	rcall	.-12     	; 0x648 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     654:	77 9b       	sbis	0x0e, 7	; 14
     656:	fe cf       	rjmp	.-4      	; 0x654 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     658:	8f b1       	in	r24, 0x0f	; 15
}
     65a:	08 95       	ret

0000065c <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     65c:	c4 98       	cbi	0x18, 4	; 24
     65e:	08 95       	ret

00000660 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     660:	c4 9a       	sbi	0x18, 4	; 24
     662:	08 95       	ret

00000664 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     664:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     666:	87 b3       	in	r24, 0x17	; 23
     668:	80 6b       	ori	r24, 0xB0	; 176
     66a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     66c:	8d b1       	in	r24, 0x0d	; 13
     66e:	80 65       	ori	r24, 0x50	; 80
     670:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     672:	f6 cf       	rjmp	.-20     	; 0x660 <SPI_deselect>
     674:	08 95       	ret

00000676 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     676:	5d 9b       	sbis	0x0b, 5	; 11
     678:	fe cf       	rjmp	.-4      	; 0x676 <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     67a:	8c b9       	out	0x0c, r24	; 12
     67c:	08 95       	ret

0000067e <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     67e:	5f 9b       	sbis	0x0b, 7	; 11
     680:	fe cf       	rjmp	.-4      	; 0x67e <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     682:	8c b1       	in	r24, 0x0c	; 12
}
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	08 95       	ret

00000688 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     688:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     68a:	8f e1       	ldi	r24, 0x1F	; 31
     68c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     68e:	88 e1       	ldi	r24, 0x18	; 24
     690:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     692:	6f e3       	ldi	r22, 0x3F	; 63
     694:	73 e0       	ldi	r23, 0x03	; 3
     696:	8b e3       	ldi	r24, 0x3B	; 59
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <fdevopen>
     69e:	08 95       	ret

000006a0 <readADC>:
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	91 05       	cpc	r25, r1
     6a4:	71 f0       	breq	.+28     	; 0x6c2 <readADC+0x22>
     6a6:	1c f4       	brge	.+6      	; 0x6ae <readADC+0xe>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	39 f0       	breq	.+14     	; 0x6ba <readADC+0x1a>
     6ac:	1c c0       	rjmp	.+56     	; 0x6e6 <readADC+0x46>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	91 05       	cpc	r25, r1
     6b2:	59 f0       	breq	.+22     	; 0x6ca <readADC+0x2a>
     6b4:	04 97       	sbiw	r24, 0x04	; 4
     6b6:	69 f0       	breq	.+26     	; 0x6d2 <readADC+0x32>
     6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <readADC+0x46>
     6ba:	84 e1       	ldi	r24, 0x14	; 20
     6bc:	80 93 00 14 	sts	0x1400, r24
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <readADC+0x38>
     6c2:	85 e1       	ldi	r24, 0x15	; 21
     6c4:	80 93 00 14 	sts	0x1400, r24
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <readADC+0x38>
     6ca:	86 e1       	ldi	r24, 0x16	; 22
     6cc:	80 93 00 14 	sts	0x1400, r24
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <readADC+0x38>
     6d2:	87 e1       	ldi	r24, 0x17	; 23
     6d4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d8:	82 e5       	ldi	r24, 0x52	; 82
     6da:	8a 95       	dec	r24
     6dc:	f1 f7       	brne	.-4      	; 0x6da <readADC+0x3a>
     6de:	80 91 00 14 	lds	r24, 0x1400
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret

000006ec <initalize_interrupts>:
 */ 
#include "button_interrupts.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     6ec:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     6ee:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     6f0:	85 b7       	in	r24, 0x35	; 53
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     6f6:	85 b7       	in	r24, 0x35	; 53
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     6fc:	85 b7       	in	r24, 0x35	; 53
     6fe:	84 60       	ori	r24, 0x04	; 4
     700:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     702:	85 b7       	in	r24, 0x35	; 53
     704:	88 60       	ori	r24, 0x08	; 8
     706:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     708:	8b b7       	in	r24, 0x3b	; 59
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     70e:	8b b7       	in	r24, 0x3b	; 59
     710:	80 68       	ori	r24, 0x80	; 128
     712:	8b bf       	out	0x3b, r24	; 59
	
	flag_right_button = 0;
     714:	10 92 30 01 	sts	0x0130, r1
	flag_left_button = 0;
     718:	10 92 31 01 	sts	0x0131, r1
     71c:	08 95       	ret

0000071e <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     71e:	80 91 31 01 	lds	r24, 0x0131
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	19 f4       	brne	.+6      	; 0x72c <check_flag_left+0xe>
	{
		flag_left_button = 0;
     726:	10 92 31 01 	sts	0x0131, r1
		return 1;
     72a:	08 95       	ret
	}
	return 0;
     72c:	80 e0       	ldi	r24, 0x00	; 0
}
     72e:	08 95       	ret

00000730 <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     730:	80 91 30 01 	lds	r24, 0x0130
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	19 f4       	brne	.+6      	; 0x73e <check_flag_right+0xe>
	{
		flag_right_button = 0;
     738:	10 92 30 01 	sts	0x0130, r1
		return 1;
     73c:	08 95       	ret
	}
	return 0;
     73e:	80 e0       	ldi	r24, 0x00	; 0
}
     740:	08 95       	ret

00000742 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 30 01 	sts	0x0130, r24
}
     754:	8f 91       	pop	r24
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 31 01 	sts	0x0131, r24
}
     772:	8f 91       	pop	r24
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	0f 90       	pop	r0
     77a:	1f 90       	pop	r1
     77c:	18 95       	reti

0000077e <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	c4 e6       	ldi	r28, 0x64	; 100
     788:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     78a:	00 91 2a 01 	lds	r16, 0x012A
     78e:	10 91 2b 01 	lds	r17, 0x012B
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	90 e0       	ldi	r25, 0x00	; 0
     796:	84 df       	rcall	.-248    	; 0x6a0 <readADC>
     798:	01 58       	subi	r16, 0x81	; 129
     79a:	1f 4f       	sbci	r17, 0xFF	; 255
     79c:	08 1b       	sub	r16, r24
     79e:	19 0b       	sbc	r17, r25
     7a0:	10 93 2b 01 	sts	0x012B, r17
     7a4:	00 93 2a 01 	sts	0x012A, r16
		calibrate_y += 127 - readADC(2);
     7a8:	00 91 28 01 	lds	r16, 0x0128
     7ac:	10 91 29 01 	lds	r17, 0x0129
     7b0:	82 e0       	ldi	r24, 0x02	; 2
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	75 df       	rcall	.-278    	; 0x6a0 <readADC>
     7b6:	01 58       	subi	r16, 0x81	; 129
     7b8:	1f 4f       	sbci	r17, 0xFF	; 255
     7ba:	08 1b       	sub	r16, r24
     7bc:	19 0b       	sbc	r17, r25
     7be:	10 93 29 01 	sts	0x0129, r17
     7c2:	00 93 28 01 	sts	0x0128, r16
     7c6:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     7c8:	20 97       	sbiw	r28, 0x00	; 0
     7ca:	f9 f6       	brne	.-66     	; 0x78a <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     7cc:	80 91 2a 01 	lds	r24, 0x012A
     7d0:	90 91 2b 01 	lds	r25, 0x012B
     7d4:	24 e6       	ldi	r18, 0x64	; 100
     7d6:	30 e0       	ldi	r19, 0x00	; 0
     7d8:	b9 01       	movw	r22, r18
     7da:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodhi4>
     7de:	70 93 2b 01 	sts	0x012B, r23
     7e2:	60 93 2a 01 	sts	0x012A, r22
	calibrate_y /= CALIBRATE_READINGS;
     7e6:	80 91 28 01 	lds	r24, 0x0128
     7ea:	90 91 29 01 	lds	r25, 0x0129
     7ee:	b9 01       	movw	r22, r18
     7f0:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <__divmodhi4>
     7f4:	70 93 29 01 	sts	0x0129, r23
     7f8:	60 93 28 01 	sts	0x0128, r22
}
     7fc:	df 91       	pop	r29
     7fe:	cf 91       	pop	r28
     800:	1f 91       	pop	r17
     802:	0f 91       	pop	r16
     804:	08 95       	ret

00000806 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     806:	2f 92       	push	r2
     808:	3f 92       	push	r3
     80a:	4f 92       	push	r4
     80c:	5f 92       	push	r5
     80e:	6f 92       	push	r6
     810:	7f 92       	push	r7
     812:	8f 92       	push	r8
     814:	9f 92       	push	r9
     816:	af 92       	push	r10
     818:	bf 92       	push	r11
     81a:	cf 92       	push	r12
     81c:	df 92       	push	r13
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	00 d0       	rcall	.+0      	; 0x82c <signal_to_range+0x26>
     82c:	00 d0       	rcall	.+0      	; 0x82e <signal_to_range+0x28>
     82e:	00 d0       	rcall	.+0      	; 0x830 <signal_to_range+0x2a>
     830:	cd b7       	in	r28, 0x3d	; 61
     832:	de b7       	in	r29, 0x3e	; 62
     834:	3c 01       	movw	r6, r24
     836:	7a 83       	std	Y+2, r23	; 0x02
     838:	69 83       	std	Y+1, r22	; 0x01
     83a:	5c 83       	std	Y+4, r21	; 0x04
     83c:	4b 83       	std	Y+3, r20	; 0x03
     83e:	3e 83       	std	Y+6, r19	; 0x06
     840:	2d 83       	std	Y+5, r18	; 0x05
     842:	18 01       	movw	r2, r16
     844:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     846:	b9 01       	movw	r22, r18
     848:	88 27       	eor	r24, r24
     84a:	77 fd       	sbrc	r23, 7
     84c:	80 95       	com	r24
     84e:	98 2f       	mov	r25, r24
     850:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__floatsisf>
     854:	4b 01       	movw	r8, r22
     856:	5c 01       	movw	r10, r24
     858:	b3 01       	movw	r22, r6
     85a:	6e 0d       	add	r22, r14
     85c:	7f 1d       	adc	r23, r15
     85e:	29 81       	ldd	r18, Y+1	; 0x01
     860:	3a 81       	ldd	r19, Y+2	; 0x02
     862:	62 1b       	sub	r22, r18
     864:	73 0b       	sbc	r23, r19
     866:	88 27       	eor	r24, r24
     868:	77 fd       	sbrc	r23, 7
     86a:	80 95       	com	r24
     86c:	98 2f       	mov	r25, r24
     86e:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__floatsisf>
     872:	2b 01       	movw	r4, r22
     874:	3c 01       	movw	r6, r24
     876:	b1 01       	movw	r22, r2
     878:	8d 81       	ldd	r24, Y+5	; 0x05
     87a:	9e 81       	ldd	r25, Y+6	; 0x06
     87c:	68 1b       	sub	r22, r24
     87e:	79 0b       	sbc	r23, r25
     880:	88 27       	eor	r24, r24
     882:	77 fd       	sbrc	r23, 7
     884:	80 95       	com	r24
     886:	98 2f       	mov	r25, r24
     888:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__floatsisf>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	c3 01       	movw	r24, r6
     892:	b2 01       	movw	r22, r4
     894:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <__mulsf3>
     898:	2b 01       	movw	r4, r22
     89a:	3c 01       	movw	r6, r24
     89c:	6b 81       	ldd	r22, Y+3	; 0x03
     89e:	7c 81       	ldd	r23, Y+4	; 0x04
     8a0:	e9 81       	ldd	r30, Y+1	; 0x01
     8a2:	fa 81       	ldd	r31, Y+2	; 0x02
     8a4:	6e 1b       	sub	r22, r30
     8a6:	7f 0b       	sbc	r23, r31
     8a8:	88 27       	eor	r24, r24
     8aa:	77 fd       	sbrc	r23, 7
     8ac:	80 95       	com	r24
     8ae:	98 2f       	mov	r25, r24
     8b0:	0e 94 b4 0c 	call	0x1968	; 0x1968 <__floatsisf>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c3 01       	movw	r24, r6
     8ba:	b2 01       	movw	r22, r4
     8bc:	ba d7       	rcall	.+3956   	; 0x1832 <__divsf3>
     8be:	9b 01       	movw	r18, r22
     8c0:	ac 01       	movw	r20, r24
     8c2:	c5 01       	movw	r24, r10
     8c4:	b4 01       	movw	r22, r8
     8c6:	4d d7       	rcall	.+3738   	; 0x1762 <__addsf3>
     8c8:	0e 94 81 0c 	call	0x1902	; 0x1902 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     8cc:	c1 01       	movw	r24, r2
     8ce:	80 1b       	sub	r24, r16
     8d0:	91 0b       	sbc	r25, r17
     8d2:	68 17       	cp	r22, r24
     8d4:	79 07       	cpc	r23, r25
     8d6:	74 f5       	brge	.+92     	; 0x934 <signal_to_range+0x12e>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     8d8:	8d 81       	ldd	r24, Y+5	; 0x05
     8da:	9e 81       	ldd	r25, Y+6	; 0x06
     8dc:	80 0f       	add	r24, r16
     8de:	91 1f       	adc	r25, r17
     8e0:	86 17       	cp	r24, r22
     8e2:	97 07       	cpc	r25, r23
     8e4:	4c f5       	brge	.+82     	; 0x938 <signal_to_range+0x132>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     8e6:	f8 01       	movw	r30, r16
     8e8:	11 23       	and	r17, r17
     8ea:	0c f4       	brge	.+2      	; 0x8ee <signal_to_range+0xe8>
     8ec:	31 96       	adiw	r30, 0x01	; 1
     8ee:	f5 95       	asr	r31
     8f0:	e7 95       	ror	r30
     8f2:	d8 01       	movw	r26, r16
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <signal_to_range+0x114>
     8f6:	8a 0f       	add	r24, r26
     8f8:	9b 1f       	adc	r25, r27
     8fa:	ac 01       	movw	r20, r24
     8fc:	4e 0f       	add	r20, r30
     8fe:	5f 1f       	adc	r21, r31
     900:	64 17       	cp	r22, r20
     902:	75 07       	cpc	r23, r21
     904:	14 f0       	brlt	.+4      	; 0x90a <signal_to_range+0x104>
				reference += step;
     906:	69 01       	movw	r12, r18
     908:	0b c0       	rjmp	.+22     	; 0x920 <signal_to_range+0x11a>
			}
			else if (new_signal <= reference - step/2){
     90a:	c6 01       	movw	r24, r12
     90c:	8e 1b       	sub	r24, r30
     90e:	9f 0b       	sbc	r25, r31
     910:	86 17       	cp	r24, r22
     912:	97 07       	cpc	r25, r23
     914:	14 f0       	brlt	.+4      	; 0x91a <signal_to_range+0x114>
				reference -= step;
     916:	c0 1a       	sub	r12, r16
     918:	d1 0a       	sbc	r13, r17
     91a:	c6 01       	movw	r24, r12
     91c:	80 1b       	sub	r24, r16
     91e:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     920:	96 01       	movw	r18, r12
     922:	20 0f       	add	r18, r16
     924:	31 1f       	adc	r19, r17
     926:	62 17       	cp	r22, r18
     928:	73 07       	cpc	r23, r19
     92a:	2c f7       	brge	.-54     	; 0x8f6 <signal_to_range+0xf0>
     92c:	86 17       	cp	r24, r22
     92e:	97 07       	cpc	r25, r23
     930:	14 f7       	brge	.-60     	; 0x8f6 <signal_to_range+0xf0>
     932:	04 c0       	rjmp	.+8      	; 0x93c <signal_to_range+0x136>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     934:	61 01       	movw	r12, r2
     936:	02 c0       	rjmp	.+4      	; 0x93c <signal_to_range+0x136>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     938:	cd 80       	ldd	r12, Y+5	; 0x05
     93a:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     93c:	c6 01       	movw	r24, r12
     93e:	26 96       	adiw	r28, 0x06	; 6
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	3f 90       	pop	r3
     96c:	2f 90       	pop	r2
     96e:	08 95       	ret

00000970 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     970:	af 92       	push	r10
     972:	bf 92       	push	r11
     974:	cf 92       	push	r12
     976:	df 92       	push	r13
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
	switch(channel){
     980:	82 35       	cpi	r24, 0x52	; 82
     982:	09 f4       	brne	.+2      	; 0x986 <read_control_input+0x16>
     984:	6e c0       	rjmp	.+220    	; 0xa62 <read_control_input+0xf2>
     986:	20 f4       	brcc	.+8      	; 0x990 <read_control_input+0x20>
     988:	8c 34       	cpi	r24, 0x4C	; 76
     98a:	09 f4       	brne	.+2      	; 0x98e <read_control_input+0x1e>
     98c:	4a c0       	rjmp	.+148    	; 0xa22 <read_control_input+0xb2>
     98e:	89 c0       	rjmp	.+274    	; 0xaa2 <read_control_input+0x132>
     990:	88 35       	cpi	r24, 0x58	; 88
     992:	19 f0       	breq	.+6      	; 0x99a <read_control_input+0x2a>
     994:	89 35       	cpi	r24, 0x59	; 89
     996:	19 f1       	breq	.+70     	; 0x9de <read_control_input+0x6e>
     998:	84 c0       	rjmp	.+264    	; 0xaa2 <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     99a:	c0 90 26 01 	lds	r12, 0x0126
     99e:	d0 90 27 01 	lds	r13, 0x0127
     9a2:	e0 90 2a 01 	lds	r14, 0x012A
     9a6:	f0 90 2b 01 	lds	r15, 0x012B
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	78 de       	rcall	.-784    	; 0x6a0 <readADC>
     9b0:	0f 2e       	mov	r0, r31
     9b2:	fa e0       	ldi	r31, 0x0A	; 10
     9b4:	af 2e       	mov	r10, r31
     9b6:	b1 2c       	mov	r11, r1
     9b8:	f0 2d       	mov	r31, r0
     9ba:	04 e6       	ldi	r16, 0x64	; 100
     9bc:	10 e0       	ldi	r17, 0x00	; 0
     9be:	2c e9       	ldi	r18, 0x9C	; 156
     9c0:	3f ef       	ldi	r19, 0xFF	; 255
     9c2:	4f ef       	ldi	r20, 0xFF	; 255
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	1d df       	rcall	.-454    	; 0x806 <signal_to_range>
     9cc:	90 93 27 01 	sts	0x0127, r25
     9d0:	80 93 26 01 	sts	0x0126, r24
			return ref_X;
     9d4:	80 91 26 01 	lds	r24, 0x0126
     9d8:	90 91 27 01 	lds	r25, 0x0127
     9dc:	64 c0       	rjmp	.+200    	; 0xaa6 <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     9de:	c0 90 24 01 	lds	r12, 0x0124
     9e2:	d0 90 25 01 	lds	r13, 0x0125
     9e6:	e0 90 28 01 	lds	r14, 0x0128
     9ea:	f0 90 29 01 	lds	r15, 0x0129
     9ee:	82 e0       	ldi	r24, 0x02	; 2
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	56 de       	rcall	.-852    	; 0x6a0 <readADC>
     9f4:	0f 2e       	mov	r0, r31
     9f6:	fa e0       	ldi	r31, 0x0A	; 10
     9f8:	af 2e       	mov	r10, r31
     9fa:	b1 2c       	mov	r11, r1
     9fc:	f0 2d       	mov	r31, r0
     9fe:	04 e6       	ldi	r16, 0x64	; 100
     a00:	10 e0       	ldi	r17, 0x00	; 0
     a02:	2c e9       	ldi	r18, 0x9C	; 156
     a04:	3f ef       	ldi	r19, 0xFF	; 255
     a06:	4f ef       	ldi	r20, 0xFF	; 255
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e0       	ldi	r23, 0x00	; 0
     a0e:	fb de       	rcall	.-522    	; 0x806 <signal_to_range>
     a10:	90 93 25 01 	sts	0x0125, r25
     a14:	80 93 24 01 	sts	0x0124, r24
			return ref_Y;
     a18:	80 91 24 01 	lds	r24, 0x0124
     a1c:	90 91 25 01 	lds	r25, 0x0125
     a20:	42 c0       	rjmp	.+132    	; 0xaa6 <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     a22:	c0 90 22 01 	lds	r12, 0x0122
     a26:	d0 90 23 01 	lds	r13, 0x0123
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	38 de       	rcall	.-912    	; 0x6a0 <readADC>
     a30:	0f 2e       	mov	r0, r31
     a32:	fa e0       	ldi	r31, 0x0A	; 10
     a34:	af 2e       	mov	r10, r31
     a36:	b1 2c       	mov	r11, r1
     a38:	f0 2d       	mov	r31, r0
     a3a:	e1 2c       	mov	r14, r1
     a3c:	f1 2c       	mov	r15, r1
     a3e:	04 e6       	ldi	r16, 0x64	; 100
     a40:	10 e0       	ldi	r17, 0x00	; 0
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	4f ef       	ldi	r20, 0xFF	; 255
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	60 e0       	ldi	r22, 0x00	; 0
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	db de       	rcall	.-586    	; 0x806 <signal_to_range>
     a50:	90 93 23 01 	sts	0x0123, r25
     a54:	80 93 22 01 	sts	0x0122, r24
		return ref_L;
     a58:	80 91 22 01 	lds	r24, 0x0122
     a5c:	90 91 23 01 	lds	r25, 0x0123
     a60:	22 c0       	rjmp	.+68     	; 0xaa6 <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
     a62:	c0 90 20 01 	lds	r12, 0x0120
     a66:	d0 90 21 01 	lds	r13, 0x0121
     a6a:	84 e0       	ldi	r24, 0x04	; 4
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	18 de       	rcall	.-976    	; 0x6a0 <readADC>
     a70:	0f 2e       	mov	r0, r31
     a72:	fa e0       	ldi	r31, 0x0A	; 10
     a74:	af 2e       	mov	r10, r31
     a76:	b1 2c       	mov	r11, r1
     a78:	f0 2d       	mov	r31, r0
     a7a:	e1 2c       	mov	r14, r1
     a7c:	f1 2c       	mov	r15, r1
     a7e:	04 e6       	ldi	r16, 0x64	; 100
     a80:	10 e0       	ldi	r17, 0x00	; 0
     a82:	20 e0       	ldi	r18, 0x00	; 0
     a84:	30 e0       	ldi	r19, 0x00	; 0
     a86:	4f ef       	ldi	r20, 0xFF	; 255
     a88:	50 e0       	ldi	r21, 0x00	; 0
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	70 e0       	ldi	r23, 0x00	; 0
     a8e:	bb de       	rcall	.-650    	; 0x806 <signal_to_range>
     a90:	90 93 21 01 	sts	0x0121, r25
     a94:	80 93 20 01 	sts	0x0120, r24
			return ref_R;
     a98:	80 91 20 01 	lds	r24, 0x0120
     a9c:	90 91 21 01 	lds	r25, 0x0121
     aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <read_control_input+0x136>
	}
	return 0;
     aa2:	80 e0       	ldi	r24, 0x00	; 0
     aa4:	90 e0       	ldi	r25, 0x00	; 0
}
     aa6:	1f 91       	pop	r17
     aa8:	0f 91       	pop	r16
     aaa:	ff 90       	pop	r15
     aac:	ef 90       	pop	r14
     aae:	df 90       	pop	r13
     ab0:	cf 90       	pop	r12
     ab2:	bf 90       	pop	r11
     ab4:	af 90       	pop	r10
     ab6:	08 95       	ret

00000ab8 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     ab8:	62 de       	rcall	.-828    	; 0x77e <calibrate_joystick>
	ref_X = read_control_input('X');
     aba:	88 e5       	ldi	r24, 0x58	; 88
     abc:	59 df       	rcall	.-334    	; 0x970 <read_control_input>
     abe:	90 93 27 01 	sts	0x0127, r25
     ac2:	80 93 26 01 	sts	0x0126, r24
	ref_Y = read_control_input('Y');
     ac6:	89 e5       	ldi	r24, 0x59	; 89
     ac8:	53 df       	rcall	.-346    	; 0x970 <read_control_input>
     aca:	90 93 25 01 	sts	0x0125, r25
     ace:	80 93 24 01 	sts	0x0124, r24
	ref_L = read_control_input('L');
     ad2:	8c e4       	ldi	r24, 0x4C	; 76
     ad4:	4d df       	rcall	.-358    	; 0x970 <read_control_input>
     ad6:	90 93 23 01 	sts	0x0123, r25
     ada:	80 93 22 01 	sts	0x0122, r24
	ref_R = read_control_input('R');
     ade:	82 e5       	ldi	r24, 0x52	; 82
     ae0:	47 df       	rcall	.-370    	; 0x970 <read_control_input>
     ae2:	90 93 21 01 	sts	0x0121, r25
     ae6:	80 93 20 01 	sts	0x0120, r24
     aea:	08 95       	ret

00000aec <initialize_menu>:
	left_button_flag = 1;
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     aec:	cf 93       	push	r28
     aee:	df 93       	push	r29
     af0:	c2 e8       	ldi	r28, 0x82	; 130
     af2:	d1 e0       	ldi	r29, 0x01	; 1
     af4:	d0 93 69 01 	sts	0x0169, r29
     af8:	c0 93 68 01 	sts	0x0168, r28
     afc:	10 92 6b 01 	sts	0x016B, r1
     b00:	10 92 6a 01 	sts	0x016A, r1
     b04:	10 92 6d 01 	sts	0x016D, r1
     b08:	10 92 6c 01 	sts	0x016C, r1
     b0c:	e4 e6       	ldi	r30, 0x64	; 100
     b0e:	f1 e0       	ldi	r31, 0x01	; 1
     b10:	8a ee       	ldi	r24, 0xEA	; 234
     b12:	90 e0       	ldi	r25, 0x00	; 0
     b14:	91 83       	std	Z+1, r25	; 0x01
     b16:	80 83       	st	Z, r24
     b18:	83 e0       	ldi	r24, 0x03	; 3
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	90 93 67 01 	sts	0x0167, r25
     b20:	80 93 66 01 	sts	0x0166, r24
     b24:	26 e3       	ldi	r18, 0x36	; 54
     b26:	31 e0       	ldi	r19, 0x01	; 1
     b28:	30 93 87 01 	sts	0x0187, r19
     b2c:	20 93 86 01 	sts	0x0186, r18
     b30:	6e e6       	ldi	r22, 0x6E	; 110
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	70 93 89 01 	sts	0x0189, r23
     b38:	60 93 88 01 	sts	0x0188, r22
     b3c:	10 92 8b 01 	sts	0x018B, r1
     b40:	10 92 8a 01 	sts	0x018A, r1
     b44:	44 ee       	ldi	r20, 0xE4	; 228
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	59 83       	std	Y+1, r21	; 0x01
     b4a:	48 83       	st	Y, r20
     b4c:	90 93 85 01 	sts	0x0185, r25
     b50:	80 93 84 01 	sts	0x0184, r24
     b54:	f0 93 3b 01 	sts	0x013B, r31
     b58:	e0 93 3a 01 	sts	0x013A, r30
     b5c:	c0 e5       	ldi	r28, 0x50	; 80
     b5e:	d1 e0       	ldi	r29, 0x01	; 1
     b60:	d0 93 3d 01 	sts	0x013D, r29
     b64:	c0 93 3c 01 	sts	0x013C, r28
     b68:	10 92 3f 01 	sts	0x013F, r1
     b6c:	10 92 3e 01 	sts	0x013E, r1
     b70:	4c ed       	ldi	r20, 0xDC	; 220
     b72:	50 e0       	ldi	r21, 0x00	; 0
     b74:	d9 01       	movw	r26, r18
     b76:	4d 93       	st	X+, r20
     b78:	5c 93       	st	X, r21
     b7a:	90 93 39 01 	sts	0x0139, r25
     b7e:	80 93 38 01 	sts	0x0138, r24
     b82:	2a e5       	ldi	r18, 0x5A	; 90
     b84:	31 e0       	ldi	r19, 0x01	; 1
     b86:	30 93 55 01 	sts	0x0155, r19
     b8a:	20 93 54 01 	sts	0x0154, r18
     b8e:	10 92 57 01 	sts	0x0157, r1
     b92:	10 92 56 01 	sts	0x0156, r1
     b96:	f0 93 59 01 	sts	0x0159, r31
     b9a:	e0 93 58 01 	sts	0x0158, r30
     b9e:	86 ed       	ldi	r24, 0xD6	; 214
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	99 83       	std	Y+1, r25	; 0x01
     ba4:	88 83       	st	Y, r24
     ba6:	82 e0       	ldi	r24, 0x02	; 2
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	90 93 53 01 	sts	0x0153, r25
     bae:	80 93 52 01 	sts	0x0152, r24
     bb2:	d0 93 5f 01 	sts	0x015F, r29
     bb6:	c0 93 5e 01 	sts	0x015E, r28
     bba:	10 92 61 01 	sts	0x0161, r1
     bbe:	10 92 60 01 	sts	0x0160, r1
     bc2:	f0 93 63 01 	sts	0x0163, r31
     bc6:	e0 93 62 01 	sts	0x0162, r30
     bca:	4d ec       	ldi	r20, 0xCD	; 205
     bcc:	50 e0       	ldi	r21, 0x00	; 0
     bce:	d9 01       	movw	r26, r18
     bd0:	4d 93       	st	X+, r20
     bd2:	5c 93       	st	X, r21
     bd4:	90 93 5d 01 	sts	0x015D, r25
     bd8:	80 93 5c 01 	sts	0x015C, r24
     bdc:	c8 e7       	ldi	r28, 0x78	; 120
     bde:	d1 e0       	ldi	r29, 0x01	; 1
     be0:	d0 93 73 01 	sts	0x0173, r29
     be4:	c0 93 72 01 	sts	0x0172, r28
     be8:	10 92 75 01 	sts	0x0175, r1
     bec:	10 92 74 01 	sts	0x0174, r1
     bf0:	f0 93 77 01 	sts	0x0177, r31
     bf4:	e0 93 76 01 	sts	0x0176, r30
     bf8:	22 ec       	ldi	r18, 0xC2	; 194
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	db 01       	movw	r26, r22
     bfe:	2d 93       	st	X+, r18
     c00:	3c 93       	st	X, r19
     c02:	90 93 71 01 	sts	0x0171, r25
     c06:	80 93 70 01 	sts	0x0170, r24
     c0a:	70 93 7d 01 	sts	0x017D, r23
     c0e:	60 93 7c 01 	sts	0x017C, r22
     c12:	10 92 7f 01 	sts	0x017F, r1
     c16:	10 92 7e 01 	sts	0x017E, r1
     c1a:	f0 93 81 01 	sts	0x0181, r31
     c1e:	e0 93 80 01 	sts	0x0180, r30
     c22:	28 eb       	ldi	r18, 0xB8	; 184
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	39 83       	std	Y+1, r19	; 0x01
     c28:	28 83       	st	Y, r18
     c2a:	90 93 7b 01 	sts	0x017B, r25
     c2e:	80 93 7a 01 	sts	0x017A, r24
     c32:	f0 93 33 01 	sts	0x0133, r31
     c36:	e0 93 32 01 	sts	0x0132, r30
     c3a:	f0 93 35 01 	sts	0x0135, r31
     c3e:	e0 93 34 01 	sts	0x0134, r30
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	f6 d1       	rcall	.+1004   	; 0x1038 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
     c4c:	60 ea       	ldi	r22, 0xA0	; 160
     c4e:	70 e0       	ldi	r23, 0x00	; 0
     c50:	80 e4       	ldi	r24, 0x40	; 64
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <strcpy_P>
	sram_write_string(temp);
     c58:	80 e4       	ldi	r24, 0x40	; 64
     c5a:	91 e0       	ldi	r25, 0x01	; 1
     c5c:	eb d2       	rcall	.+1494   	; 0x1234 <sram_write_string>
	sram_clear_line(1);
     c5e:	81 e0       	ldi	r24, 0x01	; 1
     c60:	76 d4       	rcall	.+2284   	; 0x154e <sram_clear_line>
	oled_goto_line(2);
     c62:	82 e0       	ldi	r24, 0x02	; 2
     c64:	e9 d1       	rcall	.+978    	; 0x1038 <oled_goto_line>
	strcpy_P(temp,btn_1);
     c66:	60 eb       	ldi	r22, 0xB0	; 176
     c68:	70 e0       	ldi	r23, 0x00	; 0
     c6a:	80 e4       	ldi	r24, 0x40	; 64
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	f4 d7       	rcall	.+4072   	; 0x1c58 <strcpy_P>
	sram_write_string(temp);
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	df d2       	rcall	.+1470   	; 0x1234 <sram_write_string>
	sram_push();
     c76:	45 d4       	rcall	.+2186   	; 0x1502 <sram_push>
	while (!check_flag_right()){
     c78:	08 c0       	rjmp	.+16     	; 0xc8a <menu_set_contrast+0x42>
		write_c(0x81);
     c7a:	81 e8       	ldi	r24, 0x81	; 129
     c7c:	b0 d1       	rcall	.+864    	; 0xfde <write_c>
		write_c(readADC(3)/2);
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e dd       	rcall	.-1508   	; 0x6a0 <readADC>
     c84:	96 95       	lsr	r25
     c86:	87 95       	ror	r24
     c88:	aa d1       	rcall	.+852    	; 0xfde <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_push();
	while (!check_flag_right()){
     c8a:	52 dd       	rcall	.-1372   	; 0x730 <check_flag_right>
     c8c:	88 23       	and	r24, r24
     c8e:	a9 f3       	breq	.-22     	; 0xc7a <menu_set_contrast+0x32>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	
}
     c90:	08 95       	ret

00000c92 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
     c92:	0f 93       	push	r16
     c94:	1f 93       	push	r17
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
     c9a:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
     c9c:	8c 2f       	mov	r24, r28
     c9e:	57 d4       	rcall	.+2222   	; 0x154e <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
     ca0:	cf 5f       	subi	r28, 0xFF	; 255
     ca2:	c7 30       	cpi	r28, 0x07	; 7
     ca4:	d9 f7       	brne	.-10     	; 0xc9c <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	c7 d1       	rcall	.+910    	; 0x1038 <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
     caa:	69 e9       	ldi	r22, 0x99	; 153
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	80 e4       	ldi	r24, 0x40	; 64
     cb0:	91 e0       	ldi	r25, 0x01	; 1
     cb2:	d2 d7       	rcall	.+4004   	; 0x1c58 <strcpy_P>
	sram_write_string(temp);
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	bd d2       	rcall	.+1402   	; 0x1234 <sram_write_string>
	oled_goto_line(2);
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	bd d1       	rcall	.+890    	; 0x1038 <oled_goto_line>
	strcpy_P(temp,btn_1);
     cbe:	60 eb       	ldi	r22, 0xB0	; 176
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 e4       	ldi	r24, 0x40	; 64
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	c8 d7       	rcall	.+3984   	; 0x1c58 <strcpy_P>
	sram_write_string(temp);
     cc8:	80 e4       	ldi	r24, 0x40	; 64
     cca:	91 e0       	ldi	r25, 0x01	; 1
     ccc:	b3 d2       	rcall	.+1382   	; 0x1234 <sram_write_string>
	sram_push();
     cce:	19 d4       	rcall	.+2098   	; 0x1502 <sram_push>
	while (!check_flag_right()){
     cd0:	2f dd       	rcall	.-1442   	; 0x730 <check_flag_right>
     cd2:	88 23       	and	r24, r24
     cd4:	e9 f3       	breq	.-6      	; 0xcd0 <menu_calibrate_joystick+0x3e>
		
	}
	
	
	oled_clear_line(0);
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	ce d1       	rcall	.+924    	; 0x1076 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
     cda:	6b e8       	ldi	r22, 0x8B	; 139
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 e4       	ldi	r24, 0x40	; 64
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	ba d7       	rcall	.+3956   	; 0x1c58 <strcpy_P>
	sram_write_string(temp);
     ce4:	80 e4       	ldi	r24, 0x40	; 64
     ce6:	91 e0       	ldi	r25, 0x01	; 1
     ce8:	a5 d2       	rcall	.+1354   	; 0x1234 <sram_write_string>
     cea:	c0 e7       	ldi	r28, 0x70	; 112
     cec:	d0 e0       	ldi	r29, 0x00	; 0
     cee:	08 e7       	ldi	r16, 0x78	; 120
     cf0:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	c0 d1       	rcall	.+896    	; 0x1076 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
     cf6:	fe 01       	movw	r30, r28
     cf8:	65 91       	lpm	r22, Z+
     cfa:	74 91       	lpm	r23, Z
     cfc:	80 e4       	ldi	r24, 0x40	; 64
     cfe:	91 e0       	ldi	r25, 0x01	; 1
     d00:	ab d7       	rcall	.+3926   	; 0x1c58 <strcpy_P>
		sram_write_string(temp);
     d02:	80 e4       	ldi	r24, 0x40	; 64
     d04:	91 e0       	ldi	r25, 0x01	; 1
     d06:	96 d2       	rcall	.+1324   	; 0x1234 <sram_write_string>
		sram_push();
     d08:	fc d3       	rcall	.+2040   	; 0x1502 <sram_push>
		while (!check_flag_right()){
     d0a:	12 dd       	rcall	.-1500   	; 0x730 <check_flag_right>
     d0c:	88 23       	and	r24, r24
     d0e:	e9 f3       	breq	.-6      	; 0xd0a <menu_calibrate_joystick+0x78>
     d10:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
     d12:	c0 17       	cp	r28, r16
     d14:	d1 07       	cpc	r29, r17
     d16:	69 f7       	brne	.-38     	; 0xcf2 <menu_calibrate_joystick+0x60>
		while (!check_flag_right()){
			
		}
		
	}
     d18:	df 91       	pop	r29
     d1a:	cf 91       	pop	r28
     d1c:	1f 91       	pop	r17
     d1e:	0f 91       	pop	r16
     d20:	08 95       	ret

00000d22 <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
     d22:	80 91 34 01 	lds	r24, 0x0134
     d26:	90 91 35 01 	lds	r25, 0x0135
     d2a:	21 e0       	ldi	r18, 0x01	; 1
     d2c:	8a 35       	cpi	r24, 0x5A	; 90
     d2e:	92 07       	cpc	r25, r18
     d30:	11 f4       	brne	.+4      	; 0xd36 <menu_function_selected+0x14>
		menu_set_contrast();
     d32:	8a cf       	rjmp	.-236    	; 0xc48 <menu_set_contrast>
     d34:	08 95       	ret
	}else if(current_selected == &debug_1){
     d36:	88 57       	subi	r24, 0x78	; 120
     d38:	91 40       	sbci	r25, 0x01	; 1
     d3a:	09 f4       	brne	.+2      	; 0xd3e <menu_function_selected+0x1c>
		menu_calibrate_joystick();
     d3c:	aa cf       	rjmp	.-172    	; 0xc92 <menu_calibrate_joystick>
     d3e:	08 95       	ret

00000d40 <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
     d40:	89 e5       	ldi	r24, 0x59	; 89
     d42:	16 de       	rcall	.-980    	; 0x970 <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
     d44:	87 34       	cpi	r24, 0x47	; 71
     d46:	91 05       	cpc	r25, r1
     d48:	14 f1       	brlt	.+68     	; 0xd8e <navigate_menu+0x4e>
     d4a:	20 91 2c 01 	lds	r18, 0x012C
     d4e:	24 31       	cpi	r18, 0x14	; 20
     d50:	f4 f0       	brlt	.+60     	; 0xd8e <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
     d52:	e0 91 34 01 	lds	r30, 0x0134
     d56:	f0 91 35 01 	lds	r31, 0x0135
     d5a:	82 81       	ldd	r24, Z+2	; 0x02
     d5c:	93 81       	ldd	r25, Z+3	; 0x03
     d5e:	01 97       	sbiw	r24, 0x01	; 1
     d60:	18 16       	cp	r1, r24
     d62:	19 06       	cpc	r1, r25
     d64:	8c f4       	brge	.+34     	; 0xd88 <navigate_menu+0x48>
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
     d6a:	04 80       	ldd	r0, Z+4	; 0x04
     d6c:	f5 81       	ldd	r31, Z+5	; 0x05
     d6e:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	22 81       	ldd	r18, Z+2	; 0x02
     d74:	33 81       	ldd	r19, Z+3	; 0x03
     d76:	21 50       	subi	r18, 0x01	; 1
     d78:	31 09       	sbc	r19, r1
     d7a:	82 17       	cp	r24, r18
     d7c:	93 07       	cpc	r25, r19
     d7e:	ac f3       	brlt	.-22     	; 0xd6a <navigate_menu+0x2a>
     d80:	f0 93 35 01 	sts	0x0135, r31
     d84:	e0 93 34 01 	sts	0x0134, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
     d88:	10 92 2c 01 	sts	0x012C, r1
     d8c:	1d c0       	rjmp	.+58     	; 0xdc8 <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
     d8e:	8a 3b       	cpi	r24, 0xBA	; 186
     d90:	2f ef       	ldi	r18, 0xFF	; 255
     d92:	92 07       	cpc	r25, r18
     d94:	8c f4       	brge	.+34     	; 0xdb8 <navigate_menu+0x78>
     d96:	20 91 2c 01 	lds	r18, 0x012C
     d9a:	24 31       	cpi	r18, 0x14	; 20
     d9c:	6c f0       	brlt	.+26     	; 0xdb8 <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
     d9e:	e0 91 34 01 	lds	r30, 0x0134
     da2:	f0 91 35 01 	lds	r31, 0x0135
     da6:	84 81       	ldd	r24, Z+4	; 0x04
     da8:	95 81       	ldd	r25, Z+5	; 0x05
     daa:	90 93 35 01 	sts	0x0135, r25
     dae:	80 93 34 01 	sts	0x0134, r24
		navigation_counter = 0;
     db2:	10 92 2c 01 	sts	0x012C, r1
     db6:	08 c0       	rjmp	.+16     	; 0xdc8 <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
     db8:	8b 5b       	subi	r24, 0xBB	; 187
     dba:	9f 4f       	sbci	r25, 0xFF	; 255
     dbc:	8b 38       	cpi	r24, 0x8B	; 139
     dbe:	91 05       	cpc	r25, r1
     dc0:	18 f4       	brcc	.+6      	; 0xdc8 <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
     dc2:	83 e1       	ldi	r24, 0x13	; 19
     dc4:	80 93 2c 01 	sts	0x012C, r24
	}
	if (check_flag_right())
     dc8:	b3 dc       	rcall	.-1690   	; 0x730 <check_flag_right>
     dca:	88 23       	and	r24, r24
     dcc:	99 f0       	breq	.+38     	; 0xdf4 <navigate_menu+0xb4>
	{
		if(current_selected->ptr_child != NULL){
     dce:	e0 91 34 01 	lds	r30, 0x0134
     dd2:	f0 91 35 01 	lds	r31, 0x0135
     dd6:	86 81       	ldd	r24, Z+6	; 0x06
     dd8:	97 81       	ldd	r25, Z+7	; 0x07
     dda:	00 97       	sbiw	r24, 0x00	; 0
     ddc:	49 f0       	breq	.+18     	; 0xdf0 <navigate_menu+0xb0>
			current_head = current_selected->ptr_child;
     dde:	90 93 33 01 	sts	0x0133, r25
     de2:	80 93 32 01 	sts	0x0132, r24
			current_selected = current_selected->ptr_child;
     de6:	90 93 35 01 	sts	0x0135, r25
     dea:	80 93 34 01 	sts	0x0134, r24
     dee:	1b c0       	rjmp	.+54     	; 0xe26 <navigate_menu+0xe6>
		}else{
			menu_function_selected();
     df0:	98 df       	rcall	.-208    	; 0xd22 <menu_function_selected>
     df2:	19 c0       	rjmp	.+50     	; 0xe26 <navigate_menu+0xe6>
		}
	}else if (check_flag_left()){
     df4:	94 dc       	rcall	.-1752   	; 0x71e <check_flag_left>
     df6:	88 23       	and	r24, r24
     df8:	b1 f0       	breq	.+44     	; 0xe26 <navigate_menu+0xe6>
		if (current_selected->ptr_parent != NULL){
     dfa:	e0 91 34 01 	lds	r30, 0x0134
     dfe:	f0 91 35 01 	lds	r31, 0x0135
     e02:	80 85       	ldd	r24, Z+8	; 0x08
     e04:	91 85       	ldd	r25, Z+9	; 0x09
     e06:	00 97       	sbiw	r24, 0x00	; 0
     e08:	71 f0       	breq	.+28     	; 0xe26 <navigate_menu+0xe6>
			current_head = current_head->ptr_parent;
     e0a:	e0 91 32 01 	lds	r30, 0x0132
     e0e:	f0 91 33 01 	lds	r31, 0x0133
     e12:	20 85       	ldd	r18, Z+8	; 0x08
     e14:	31 85       	ldd	r19, Z+9	; 0x09
     e16:	30 93 33 01 	sts	0x0133, r19
     e1a:	20 93 32 01 	sts	0x0132, r18
			current_selected = current_selected->ptr_parent;
     e1e:	90 93 35 01 	sts	0x0135, r25
     e22:	80 93 34 01 	sts	0x0134, r24
		}
	}
	return 0;
	
}
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	08 95       	ret

00000e2c <menu_update>:
	current_selected = &mainmenu_0;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
     e34:	85 df       	rcall	.-246    	; 0xd40 <navigate_menu>
     e36:	89 2b       	or	r24, r25
     e38:	09 f0       	breq	.+2      	; 0xe3c <menu_update+0x10>
     e3a:	43 c0       	rjmp	.+134    	; 0xec2 <menu_update+0x96>
     e3c:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
     e3e:	8c 2f       	mov	r24, r28
     e40:	86 d3       	rcall	.+1804   	; 0x154e <sram_clear_line>
     e42:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
     e44:	c7 30       	cpi	r28, 0x07	; 7
     e46:	d9 f7       	brne	.-10     	; 0xe3e <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
     e48:	e0 91 32 01 	lds	r30, 0x0132
     e4c:	f0 91 33 01 	lds	r31, 0x0133
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	18 16       	cp	r1, r24
     e56:	19 06       	cpc	r1, r25
     e58:	a4 f5       	brge	.+104    	; 0xec2 <menu_update+0x96>
     e5a:	c0 e0       	ldi	r28, 0x00	; 0
     e5c:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
     e5e:	10 e8       	ldi	r17, 0x80	; 128
     e60:	01 e8       	ldi	r16, 0x81	; 129
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
     e62:	8c 2f       	mov	r24, r28
     e64:	e9 d0       	rcall	.+466    	; 0x1038 <oled_goto_line>
			oled_goto_column(0);
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	02 d1       	rcall	.+516    	; 0x106e <oled_goto_column>
			strcpy_P(temp,current_head->title);
     e6a:	e0 91 32 01 	lds	r30, 0x0132
     e6e:	f0 91 33 01 	lds	r31, 0x0133
     e72:	60 81       	ld	r22, Z
     e74:	71 81       	ldd	r23, Z+1	; 0x01
     e76:	80 e4       	ldi	r24, 0x40	; 64
     e78:	91 e0       	ldi	r25, 0x01	; 1
     e7a:	ee d6       	rcall	.+3548   	; 0x1c58 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
     e7c:	20 91 32 01 	lds	r18, 0x0132
     e80:	30 91 33 01 	lds	r19, 0x0133
     e84:	80 91 34 01 	lds	r24, 0x0134
     e88:	90 91 35 01 	lds	r25, 0x0135
     e8c:	28 17       	cp	r18, r24
     e8e:	39 07       	cpc	r19, r25
     e90:	11 f4       	brne	.+4      	; 0xe96 <menu_update+0x6a>
     e92:	80 2f       	mov	r24, r16
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <menu_update+0x6c>
     e96:	81 2f       	mov	r24, r17
     e98:	92 d1       	rcall	.+804    	; 0x11be <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
     e9a:	80 e4       	ldi	r24, 0x40	; 64
     e9c:	91 e0       	ldi	r25, 0x01	; 1
     e9e:	ca d1       	rcall	.+916    	; 0x1234 <sram_write_string>
			current_head = current_head->ptr_sib_down;
     ea0:	e0 91 32 01 	lds	r30, 0x0132
     ea4:	f0 91 33 01 	lds	r31, 0x0133
     ea8:	04 80       	ldd	r0, Z+4	; 0x04
     eaa:	f5 81       	ldd	r31, Z+5	; 0x05
     eac:	e0 2d       	mov	r30, r0
     eae:	f0 93 33 01 	sts	0x0133, r31
     eb2:	e0 93 32 01 	sts	0x0132, r30
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
     eb6:	21 96       	adiw	r28, 0x01	; 1
     eb8:	82 81       	ldd	r24, Z+2	; 0x02
     eba:	93 81       	ldd	r25, Z+3	; 0x03
     ebc:	c8 17       	cp	r28, r24
     ebe:	d9 07       	cpc	r29, r25
     ec0:	84 f2       	brlt	.-96     	; 0xe62 <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
     ec2:	33 d4       	rcall	.+2150   	; 0x172a <timer_check_flag>
     ec4:	88 23       	and	r24, r24
     ec6:	51 f0       	breq	.+20     	; 0xedc <menu_update+0xb0>
		navigation_counter++;
     ec8:	80 91 2c 01 	lds	r24, 0x012C
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 2c 01 	sts	0x012C, r24
		sram_push();
     ed2:	17 d3       	rcall	.+1582   	; 0x1502 <sram_push>
		timer_disable_flag();
     ed4:	33 d4       	rcall	.+2150   	; 0x173c <timer_disable_flag>
		sram_scroll_line(7,1);
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	87 e0       	ldi	r24, 0x07	; 7
     eda:	e1 d3       	rcall	.+1986   	; 0x169e <sram_scroll_line>
	}
}
     edc:	df 91       	pop	r29
     ede:	cf 91       	pop	r28
     ee0:	1f 91       	pop	r17
     ee2:	0f 91       	pop	r16
     ee4:	08 95       	ret

00000ee6 <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
     ee6:	6d e3       	ldi	r22, 0x3D	; 61
     ee8:	89 e0       	ldi	r24, 0x09	; 9
     eea:	ea d3       	rcall	.+2004   	; 0x16c0 <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
     eec:	61 e0       	ldi	r22, 0x01	; 1
     eee:	89 e0       	ldi	r24, 0x09	; 9
     ef0:	d7 d2       	rcall	.+1454   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+15,y-60);
     ef2:	61 e0       	ldi	r22, 0x01	; 1
     ef4:	87 e2       	ldi	r24, 0x27	; 39
     ef6:	d4 d2       	rcall	.+1448   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+15,y-48);
     ef8:	6d e0       	ldi	r22, 0x0D	; 13
     efa:	87 e2       	ldi	r24, 0x27	; 39
     efc:	d1 d2       	rcall	.+1442   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-6,y-48);
     efe:	6d e0       	ldi	r22, 0x0D	; 13
     f00:	82 e1       	ldi	r24, 0x12	; 18
     f02:	ce d2       	rcall	.+1436   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-6,y-12);
     f04:	61 e3       	ldi	r22, 0x31	; 49
     f06:	82 e1       	ldi	r24, 0x12	; 18
     f08:	cb d2       	rcall	.+1430   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+6,y-12);
     f0a:	61 e3       	ldi	r22, 0x31	; 49
     f0c:	8e e1       	ldi	r24, 0x1E	; 30
     f0e:	c8 d2       	rcall	.+1424   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+6,y-36);
     f10:	69 e1       	ldi	r22, 0x19	; 25
     f12:	8e e1       	ldi	r24, 0x1E	; 30
     f14:	c5 d2       	rcall	.+1418   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+15,y-36);
     f16:	69 e1       	ldi	r22, 0x19	; 25
     f18:	87 e2       	ldi	r24, 0x27	; 39
     f1a:	c2 d2       	rcall	.+1412   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+15,y);
     f1c:	6d e3       	ldi	r22, 0x3D	; 61
     f1e:	87 e2       	ldi	r24, 0x27	; 39
     f20:	bf d2       	rcall	.+1406   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
     f22:	6d e3       	ldi	r22, 0x3D	; 61
     f24:	89 e0       	ldi	r24, 0x09	; 9
     f26:	bc d2       	rcall	.+1400   	; 0x14a0 <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
     f28:	21 e0       	ldi	r18, 0x01	; 1
     f2a:	45 e4       	ldi	r20, 0x45	; 69
     f2c:	6d e3       	ldi	r22, 0x3D	; 61
     f2e:	8b e3       	ldi	r24, 0x3B	; 59
     f30:	cc d3       	rcall	.+1944   	; 0x16ca <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
     f32:	61 e0       	ldi	r22, 0x01	; 1
     f34:	87 e7       	ldi	r24, 0x77	; 119
     f36:	c4 d3       	rcall	.+1928   	; 0x16c0 <sram_set_point>
	sram_draw_line(x-15,y-60);
     f38:	61 e0       	ldi	r22, 0x01	; 1
     f3a:	89 e5       	ldi	r24, 0x59	; 89
     f3c:	b1 d2       	rcall	.+1378   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-12,y-48);
     f3e:	6d e0       	ldi	r22, 0x0D	; 13
     f40:	8c e5       	ldi	r24, 0x5C	; 92
     f42:	ae d2       	rcall	.+1372   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+6,y-48);
     f44:	6d e0       	ldi	r22, 0x0D	; 13
     f46:	8e e6       	ldi	r24, 0x6E	; 110
     f48:	ab d2       	rcall	.+1366   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+3,y-36);
     f4a:	69 e1       	ldi	r22, 0x19	; 25
     f4c:	8b e6       	ldi	r24, 0x6B	; 107
     f4e:	a8 d2       	rcall	.+1360   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-9,y-36);
     f50:	69 e1       	ldi	r22, 0x19	; 25
     f52:	8f e5       	ldi	r24, 0x5F	; 95
     f54:	a5 d2       	rcall	.+1354   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-6,y-24);
     f56:	65 e2       	ldi	r22, 0x25	; 37
     f58:	82 e6       	ldi	r24, 0x62	; 98
     f5a:	a2 d2       	rcall	.+1348   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x,y-24);
     f5c:	65 e2       	ldi	r22, 0x25	; 37
     f5e:	88 e6       	ldi	r24, 0x68	; 104
     f60:	9f d2       	rcall	.+1342   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x-3,y-12);
     f62:	61 e3       	ldi	r22, 0x31	; 49
     f64:	85 e6       	ldi	r24, 0x65	; 101
     f66:	9c d2       	rcall	.+1336   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x,y);
     f68:	6d e3       	ldi	r22, 0x3D	; 61
     f6a:	88 e6       	ldi	r24, 0x68	; 104
     f6c:	99 d2       	rcall	.+1330   	; 0x14a0 <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	87 e7       	ldi	r24, 0x77	; 119
     f72:	96 d2       	rcall	.+1324   	; 0x14a0 <sram_draw_line>
	
	
	sram_push();
     f74:	c6 c2       	rjmp	.+1420   	; 0x1502 <sram_push>
     f76:	08 95       	ret

00000f78 <init_all>:
    }
    
}

void init_all(void){
	cli();
     f78:	f8 94       	cli
	init_UART();
     f7a:	86 db       	rcall	.-2292   	; 0x688 <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
     f7c:	85 b7       	in	r24, 0x35	; 53
     f7e:	80 68       	ori	r24, 0x80	; 128
     f80:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
     f82:	80 b7       	in	r24, 0x30	; 48
     f84:	80 62       	ori	r24, 0x20	; 32
     f86:	80 bf       	out	0x30, r24	; 48

	oled_ini();
     f88:	8f d0       	rcall	.+286    	; 0x10a8 <oled_ini>
	sram_init();
     f8a:	c4 d2       	rcall	.+1416   	; 0x1514 <sram_init>
	bootscreen();
     f8c:	ac df       	rcall	.-168    	; 0xee6 <bootscreen>
	initialize_menu();
     f8e:	ae dd       	rcall	.-1188   	; 0xaec <initialize_menu>
	
	initialize_control_input();
     f90:	93 dd       	rcall	.-1242   	; 0xab8 <initialize_control_input>
	
	initalize_interrupts();
     f92:	ac db       	rcall	.-2216   	; 0x6ec <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
     f94:	8c e3       	ldi	r24, 0x3C	; 60
     f96:	b5 d3       	rcall	.+1898   	; 0x1702 <initialize_timer>
	
	CAN_initialize();
     f98:	83 da       	rcall	.-2810   	; 0x4a0 <CAN_initialize>
	
	sei();//enable interrupts
     f9a:	78 94       	sei
     f9c:	08 95       	ret

00000f9e <main>:
void init_all(void);
void bootscreen(void);


int main(void)
{
     f9e:	cf 93       	push	r28
     fa0:	df 93       	push	r29
     fa2:	cd b7       	in	r28, 0x3d	; 61
     fa4:	de b7       	in	r29, 0x3e	; 62
     fa6:	28 97       	sbiw	r28, 0x08	; 8
     fa8:	0f b6       	in	r0, 0x3f	; 63
     faa:	f8 94       	cli
     fac:	de bf       	out	0x3e, r29	; 62
     fae:	0f be       	out	0x3f, r0	; 63
     fb0:	cd bf       	out	0x3d, r28	; 61
	init_all();
     fb2:	e2 df       	rcall	.-60     	; 0xf78 <init_all>
	
	
	//flappy_main();
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
     fb4:	88 e0       	ldi	r24, 0x08	; 8
     fb6:	ec e0       	ldi	r30, 0x0C	; 12
     fb8:	f1 e0       	ldi	r31, 0x01	; 1
     fba:	de 01       	movw	r26, r28
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	01 90       	ld	r0, Z+
     fc0:	0d 92       	st	X+, r0
     fc2:	8a 95       	dec	r24
     fc4:	e1 f7       	brne	.-8      	; 0xfbe <main+0x20>

    uint8_t sendCAN = 1;
	uint8_t controller = 0;
    while(1){
	    if(sendCAN){
			controller = read_control_input('X');
     fc6:	88 e5       	ldi	r24, 0x58	; 88
     fc8:	d3 dc       	rcall	.-1626   	; 0x970 <read_control_input>
			
			
			if(controller != data[0]){
     fca:	99 81       	ldd	r25, Y+1	; 0x01
     fcc:	98 17       	cp	r25, r24
     fce:	29 f0       	breq	.+10     	; 0xfda <main+0x3c>
				data[0] = controller;
     fd0:	89 83       	std	Y+1, r24	; 0x01
				CAN_message_send(data,0);
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	ce 01       	movw	r24, r28
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	db da       	rcall	.-2634   	; 0x590 <CAN_message_send>
			if (CAN_data_receive())
			{
				
			}		    
	    }
		menu_update();
     fda:	28 df       	rcall	.-432    	; 0xe2c <menu_update>
    }
     fdc:	f4 cf       	rjmp	.-24     	; 0xfc6 <main+0x28>

00000fde <write_c>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
     fde:	e0 91 0a 01 	lds	r30, 0x010A
     fe2:	f0 91 0b 01 	lds	r31, 0x010B
     fe6:	80 83       	st	Z, r24
     fe8:	08 95       	ret

00000fea <oled_home>:
     fea:	10 92 2f 01 	sts	0x012F, r1
     fee:	10 92 2e 01 	sts	0x012E, r1
     ff2:	e0 91 0a 01 	lds	r30, 0x010A
     ff6:	f0 91 0b 01 	lds	r31, 0x010B
     ffa:	81 e2       	ldi	r24, 0x21	; 33
     ffc:	80 83       	st	Z, r24
     ffe:	e0 91 0a 01 	lds	r30, 0x010A
    1002:	f0 91 0b 01 	lds	r31, 0x010B
    1006:	10 82       	st	Z, r1
    1008:	e0 91 0a 01 	lds	r30, 0x010A
    100c:	f0 91 0b 01 	lds	r31, 0x010B
    1010:	8f e7       	ldi	r24, 0x7F	; 127
    1012:	80 83       	st	Z, r24
    1014:	e0 91 0a 01 	lds	r30, 0x010A
    1018:	f0 91 0b 01 	lds	r31, 0x010B
    101c:	82 e2       	ldi	r24, 0x22	; 34
    101e:	80 83       	st	Z, r24
    1020:	e0 91 0a 01 	lds	r30, 0x010A
    1024:	f0 91 0b 01 	lds	r31, 0x010B
    1028:	10 82       	st	Z, r1
    102a:	e0 91 0a 01 	lds	r30, 0x010A
    102e:	f0 91 0b 01 	lds	r31, 0x010B
    1032:	87 e0       	ldi	r24, 0x07	; 7
    1034:	80 83       	st	Z, r24
    1036:	08 95       	ret

00001038 <oled_goto_line>:
    1038:	cf 93       	push	r28
    103a:	c8 2f       	mov	r28, r24
    103c:	d6 df       	rcall	.-84     	; 0xfea <oled_home>
    103e:	c0 93 2f 01 	sts	0x012F, r28
    1042:	8c 2f       	mov	r24, r28
    1044:	87 70       	andi	r24, 0x07	; 7
    1046:	89 f0       	breq	.+34     	; 0x106a <oled_goto_line+0x32>
    1048:	e0 91 0a 01 	lds	r30, 0x010A
    104c:	f0 91 0b 01 	lds	r31, 0x010B
    1050:	10 82       	st	Z, r1
    1052:	e0 91 0a 01 	lds	r30, 0x010A
    1056:	f0 91 0b 01 	lds	r31, 0x010B
    105a:	80 e1       	ldi	r24, 0x10	; 16
    105c:	80 83       	st	Z, r24
    105e:	c0 6b       	ori	r28, 0xB0	; 176
    1060:	e0 91 0a 01 	lds	r30, 0x010A
    1064:	f0 91 0b 01 	lds	r31, 0x010B
    1068:	c0 83       	st	Z, r28
    106a:	cf 91       	pop	r28
    106c:	08 95       	ret

0000106e <oled_goto_column>:
    106e:	8f 77       	andi	r24, 0x7F	; 127
    1070:	80 93 2e 01 	sts	0x012E, r24
    1074:	08 95       	ret

00001076 <oled_clear_line>:
    1076:	cf 93       	push	r28
    1078:	c8 2f       	mov	r28, r24
    107a:	de df       	rcall	.-68     	; 0x1038 <oled_goto_line>
    107c:	c8 30       	cpi	r28, 0x08	; 8
    107e:	48 f4       	brcc	.+18     	; 0x1092 <oled_clear_line+0x1c>
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	e0 91 08 01 	lds	r30, 0x0108
    1086:	f0 91 09 01 	lds	r31, 0x0109
    108a:	10 82       	st	Z, r1
    108c:	8f 5f       	subi	r24, 0xFF	; 255
    108e:	80 38       	cpi	r24, 0x80	; 128
    1090:	c1 f7       	brne	.-16     	; 0x1082 <oled_clear_line+0xc>
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <oled_reset>:
    1096:	cf 93       	push	r28
    1098:	c0 e0       	ldi	r28, 0x00	; 0
    109a:	8c 2f       	mov	r24, r28
    109c:	ec df       	rcall	.-40     	; 0x1076 <oled_clear_line>
    109e:	cf 5f       	subi	r28, 0xFF	; 255
    10a0:	c8 30       	cpi	r28, 0x08	; 8
    10a2:	d9 f7       	brne	.-10     	; 0x109a <oled_reset+0x4>
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <oled_ini>:
    10a8:	85 b7       	in	r24, 0x35	; 53
    10aa:	80 68       	ori	r24, 0x80	; 128
    10ac:	85 bf       	out	0x35, r24	; 53
    10ae:	80 b7       	in	r24, 0x30	; 48
    10b0:	80 62       	ori	r24, 0x20	; 32
    10b2:	80 bf       	out	0x30, r24	; 48
    10b4:	e0 91 0a 01 	lds	r30, 0x010A
    10b8:	f0 91 0b 01 	lds	r31, 0x010B
    10bc:	8e ea       	ldi	r24, 0xAE	; 174
    10be:	80 83       	st	Z, r24
    10c0:	e0 91 0a 01 	lds	r30, 0x010A
    10c4:	f0 91 0b 01 	lds	r31, 0x010B
    10c8:	81 ea       	ldi	r24, 0xA1	; 161
    10ca:	80 83       	st	Z, r24
    10cc:	e0 91 0a 01 	lds	r30, 0x010A
    10d0:	f0 91 0b 01 	lds	r31, 0x010B
    10d4:	8a ed       	ldi	r24, 0xDA	; 218
    10d6:	80 83       	st	Z, r24
    10d8:	e0 91 0a 01 	lds	r30, 0x010A
    10dc:	f0 91 0b 01 	lds	r31, 0x010B
    10e0:	82 e1       	ldi	r24, 0x12	; 18
    10e2:	80 83       	st	Z, r24
    10e4:	e0 91 0a 01 	lds	r30, 0x010A
    10e8:	f0 91 0b 01 	lds	r31, 0x010B
    10ec:	88 ec       	ldi	r24, 0xC8	; 200
    10ee:	80 83       	st	Z, r24
    10f0:	e0 91 0a 01 	lds	r30, 0x010A
    10f4:	f0 91 0b 01 	lds	r31, 0x010B
    10f8:	88 ea       	ldi	r24, 0xA8	; 168
    10fa:	80 83       	st	Z, r24
    10fc:	e0 91 0a 01 	lds	r30, 0x010A
    1100:	f0 91 0b 01 	lds	r31, 0x010B
    1104:	8f e3       	ldi	r24, 0x3F	; 63
    1106:	80 83       	st	Z, r24
    1108:	e0 91 0a 01 	lds	r30, 0x010A
    110c:	f0 91 0b 01 	lds	r31, 0x010B
    1110:	85 ed       	ldi	r24, 0xD5	; 213
    1112:	80 83       	st	Z, r24
    1114:	e0 91 0a 01 	lds	r30, 0x010A
    1118:	f0 91 0b 01 	lds	r31, 0x010B
    111c:	80 e8       	ldi	r24, 0x80	; 128
    111e:	80 83       	st	Z, r24
    1120:	e0 91 0a 01 	lds	r30, 0x010A
    1124:	f0 91 0b 01 	lds	r31, 0x010B
    1128:	81 e8       	ldi	r24, 0x81	; 129
    112a:	80 83       	st	Z, r24
    112c:	e0 91 0a 01 	lds	r30, 0x010A
    1130:	f0 91 0b 01 	lds	r31, 0x010B
    1134:	80 e5       	ldi	r24, 0x50	; 80
    1136:	80 83       	st	Z, r24
    1138:	e0 91 0a 01 	lds	r30, 0x010A
    113c:	f0 91 0b 01 	lds	r31, 0x010B
    1140:	89 ed       	ldi	r24, 0xD9	; 217
    1142:	80 83       	st	Z, r24
    1144:	e0 91 0a 01 	lds	r30, 0x010A
    1148:	f0 91 0b 01 	lds	r31, 0x010B
    114c:	81 e2       	ldi	r24, 0x21	; 33
    114e:	80 83       	st	Z, r24
    1150:	e0 91 0a 01 	lds	r30, 0x010A
    1154:	f0 91 0b 01 	lds	r31, 0x010B
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	80 83       	st	Z, r24
    115c:	e0 91 0a 01 	lds	r30, 0x010A
    1160:	f0 91 0b 01 	lds	r31, 0x010B
    1164:	10 82       	st	Z, r1
    1166:	e0 91 0a 01 	lds	r30, 0x010A
    116a:	f0 91 0b 01 	lds	r31, 0x010B
    116e:	8b ed       	ldi	r24, 0xDB	; 219
    1170:	80 83       	st	Z, r24
    1172:	e0 91 0a 01 	lds	r30, 0x010A
    1176:	f0 91 0b 01 	lds	r31, 0x010B
    117a:	80 e3       	ldi	r24, 0x30	; 48
    117c:	80 83       	st	Z, r24
    117e:	e0 91 0a 01 	lds	r30, 0x010A
    1182:	f0 91 0b 01 	lds	r31, 0x010B
    1186:	8d ea       	ldi	r24, 0xAD	; 173
    1188:	80 83       	st	Z, r24
    118a:	e0 91 0a 01 	lds	r30, 0x010A
    118e:	f0 91 0b 01 	lds	r31, 0x010B
    1192:	10 82       	st	Z, r1
    1194:	e0 91 0a 01 	lds	r30, 0x010A
    1198:	f0 91 0b 01 	lds	r31, 0x010B
    119c:	84 ea       	ldi	r24, 0xA4	; 164
    119e:	80 83       	st	Z, r24
    11a0:	e0 91 0a 01 	lds	r30, 0x010A
    11a4:	f0 91 0b 01 	lds	r31, 0x010B
    11a8:	86 ea       	ldi	r24, 0xA6	; 166
    11aa:	80 83       	st	Z, r24
    11ac:	e0 91 0a 01 	lds	r30, 0x010A
    11b0:	f0 91 0b 01 	lds	r31, 0x010B
    11b4:	8f ea       	ldi	r24, 0xAF	; 175
    11b6:	80 83       	st	Z, r24
    11b8:	6e df       	rcall	.-292    	; 0x1096 <oled_reset>
    11ba:	17 cf       	rjmp	.-466    	; 0xfea <oled_home>
    11bc:	08 95       	ret

000011be <sram_write_char>:
    11be:	8a 30       	cpi	r24, 0x0A	; 10
    11c0:	61 f4       	brne	.+24     	; 0x11da <sram_write_char+0x1c>
    11c2:	80 91 2f 01 	lds	r24, 0x012F
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	01 96       	adiw	r24, 0x01	; 1
    11ca:	87 70       	andi	r24, 0x07	; 7
    11cc:	90 78       	andi	r25, 0x80	; 128
    11ce:	80 93 2f 01 	sts	0x012F, r24
    11d2:	10 92 2e 01 	sts	0x012E, r1
    11d6:	81 e0       	ldi	r24, 0x01	; 1
    11d8:	08 95       	ret
    11da:	88 23       	and	r24, r24
    11dc:	39 f1       	breq	.+78     	; 0x122c <sram_write_char+0x6e>
    11de:	e8 2f       	mov	r30, r24
    11e0:	f0 e0       	ldi	r31, 0x00	; 0
    11e2:	ee 0f       	add	r30, r30
    11e4:	ff 1f       	adc	r31, r31
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ec 50       	subi	r30, 0x0C	; 12
    11f0:	f0 40       	sbci	r31, 0x00	; 0
    11f2:	28 e0       	ldi	r18, 0x08	; 8
    11f4:	80 91 2f 01 	lds	r24, 0x012F
    11f8:	a0 91 2e 01 	lds	r26, 0x012E
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	90 e8       	ldi	r25, 0x80	; 128
    1200:	89 9f       	mul	r24, r25
    1202:	a0 0d       	add	r26, r0
    1204:	b1 1d       	adc	r27, r1
    1206:	11 24       	eor	r1, r1
    1208:	80 91 06 01 	lds	r24, 0x0106
    120c:	90 91 07 01 	lds	r25, 0x0107
    1210:	a8 0f       	add	r26, r24
    1212:	b9 1f       	adc	r27, r25
    1214:	84 91       	lpm	r24, Z
    1216:	8c 93       	st	X, r24
    1218:	80 91 2e 01 	lds	r24, 0x012E
    121c:	8f 5f       	subi	r24, 0xFF	; 255
    121e:	80 93 2e 01 	sts	0x012E, r24
    1222:	21 50       	subi	r18, 0x01	; 1
    1224:	31 96       	adiw	r30, 0x01	; 1
    1226:	21 11       	cpse	r18, r1
    1228:	e5 cf       	rjmp	.-54     	; 0x11f4 <sram_write_char+0x36>
    122a:	02 c0       	rjmp	.+4      	; 0x1230 <sram_write_char+0x72>
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	08 95       	ret
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	08 95       	ret

00001234 <sram_write_string>:
    1234:	1f 93       	push	r17
    1236:	cf 93       	push	r28
    1238:	df 93       	push	r29
    123a:	ec 01       	movw	r28, r24
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	11 e0       	ldi	r17, 0x01	; 1
    1240:	18 0f       	add	r17, r24
    1242:	fe 01       	movw	r30, r28
    1244:	e8 0f       	add	r30, r24
    1246:	f1 1d       	adc	r31, r1
    1248:	80 81       	ld	r24, Z
    124a:	b9 df       	rcall	.-142    	; 0x11be <sram_write_char>
    124c:	88 23       	and	r24, r24
    124e:	11 f0       	breq	.+4      	; 0x1254 <sram_write_string+0x20>
    1250:	81 2f       	mov	r24, r17
    1252:	f5 cf       	rjmp	.-22     	; 0x123e <sram_write_string+0xa>
    1254:	df 91       	pop	r29
    1256:	cf 91       	pop	r28
    1258:	1f 91       	pop	r17
    125a:	08 95       	ret

0000125c <sram_write_or>:
    125c:	87 70       	andi	r24, 0x07	; 7
    125e:	6f 77       	andi	r22, 0x7F	; 127
    1260:	e6 2f       	mov	r30, r22
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	90 e8       	ldi	r25, 0x80	; 128
    1266:	89 9f       	mul	r24, r25
    1268:	e0 0d       	add	r30, r0
    126a:	f1 1d       	adc	r31, r1
    126c:	11 24       	eor	r1, r1
    126e:	80 91 06 01 	lds	r24, 0x0106
    1272:	90 91 07 01 	lds	r25, 0x0107
    1276:	e8 0f       	add	r30, r24
    1278:	f9 1f       	adc	r31, r25
    127a:	80 81       	ld	r24, Z
    127c:	48 2b       	or	r20, r24
    127e:	40 83       	st	Z, r20
    1280:	08 95       	ret

00001282 <sram_pixel>:
    1282:	96 2f       	mov	r25, r22
    1284:	88 23       	and	r24, r24
    1286:	ac f0       	brlt	.+42     	; 0x12b2 <sram_pixel+0x30>
    1288:	60 34       	cpi	r22, 0x40	; 64
    128a:	a8 f4       	brcc	.+42     	; 0x12b6 <sram_pixel+0x34>
    128c:	46 2f       	mov	r20, r22
    128e:	47 70       	andi	r20, 0x07	; 7
    1290:	21 e0       	ldi	r18, 0x01	; 1
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	b9 01       	movw	r22, r18
    1296:	02 c0       	rjmp	.+4      	; 0x129c <sram_pixel+0x1a>
    1298:	66 0f       	add	r22, r22
    129a:	77 1f       	adc	r23, r23
    129c:	4a 95       	dec	r20
    129e:	e2 f7       	brpl	.-8      	; 0x1298 <sram_pixel+0x16>
    12a0:	ab 01       	movw	r20, r22
    12a2:	68 2f       	mov	r22, r24
    12a4:	89 2f       	mov	r24, r25
    12a6:	86 95       	lsr	r24
    12a8:	86 95       	lsr	r24
    12aa:	86 95       	lsr	r24
    12ac:	d7 df       	rcall	.-82     	; 0x125c <sram_write_or>
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	08 95       	ret
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	08 95       	ret
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	08 95       	ret

000012ba <sram_draw_new_line>:
    12ba:	2f 92       	push	r2
    12bc:	3f 92       	push	r3
    12be:	4f 92       	push	r4
    12c0:	5f 92       	push	r5
    12c2:	6f 92       	push	r6
    12c4:	7f 92       	push	r7
    12c6:	8f 92       	push	r8
    12c8:	9f 92       	push	r9
    12ca:	af 92       	push	r10
    12cc:	bf 92       	push	r11
    12ce:	cf 92       	push	r12
    12d0:	df 92       	push	r13
    12d2:	ef 92       	push	r14
    12d4:	ff 92       	push	r15
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	cd b7       	in	r28, 0x3d	; 61
    12e0:	de b7       	in	r29, 0x3e	; 62
    12e2:	2c 97       	sbiw	r28, 0x0c	; 12
    12e4:	0f b6       	in	r0, 0x3f	; 63
    12e6:	f8 94       	cli
    12e8:	de bf       	out	0x3e, r29	; 62
    12ea:	0f be       	out	0x3f, r0	; 63
    12ec:	cd bf       	out	0x3d, r28	; 61
    12ee:	38 2e       	mov	r3, r24
    12f0:	26 2e       	mov	r2, r22
    12f2:	04 2f       	mov	r16, r20
    12f4:	12 2f       	mov	r17, r18
    12f6:	48 17       	cp	r20, r24
    12f8:	08 f4       	brcc	.+2      	; 0x12fc <sram_draw_new_line+0x42>
    12fa:	90 c0       	rjmp	.+288    	; 0x141c <sram_draw_new_line+0x162>
    12fc:	84 17       	cp	r24, r20
    12fe:	09 f4       	brne	.+2      	; 0x1302 <sram_draw_new_line+0x48>
    1300:	79 c0       	rjmp	.+242    	; 0x13f4 <sram_draw_new_line+0x13a>
    1302:	86 2e       	mov	r8, r22
    1304:	91 2c       	mov	r9, r1
    1306:	a4 2e       	mov	r10, r20
    1308:	b1 2c       	mov	r11, r1
    130a:	48 2e       	mov	r4, r24
    130c:	51 2c       	mov	r5, r1
    130e:	62 2f       	mov	r22, r18
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	68 19       	sub	r22, r8
    1314:	79 09       	sbc	r23, r9
    1316:	88 27       	eor	r24, r24
    1318:	77 fd       	sbrc	r23, 7
    131a:	80 95       	com	r24
    131c:	98 2f       	mov	r25, r24
    131e:	24 d3       	rcall	.+1608   	; 0x1968 <__floatsisf>
    1320:	6b 01       	movw	r12, r22
    1322:	7c 01       	movw	r14, r24
    1324:	b5 01       	movw	r22, r10
    1326:	64 19       	sub	r22, r4
    1328:	75 09       	sbc	r23, r5
    132a:	88 27       	eor	r24, r24
    132c:	77 fd       	sbrc	r23, 7
    132e:	80 95       	com	r24
    1330:	98 2f       	mov	r25, r24
    1332:	1a d3       	rcall	.+1588   	; 0x1968 <__floatsisf>
    1334:	9b 01       	movw	r18, r22
    1336:	ac 01       	movw	r20, r24
    1338:	c7 01       	movw	r24, r14
    133a:	b6 01       	movw	r22, r12
    133c:	7a d2       	rcall	.+1268   	; 0x1832 <__divsf3>
    133e:	6d 83       	std	Y+5, r22	; 0x05
    1340:	7e 83       	std	Y+6, r23	; 0x06
    1342:	8f 83       	std	Y+7, r24	; 0x07
    1344:	98 87       	std	Y+8, r25	; 0x08
    1346:	63 2d       	mov	r22, r3
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	80 e0       	ldi	r24, 0x00	; 0
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0a d3       	rcall	.+1556   	; 0x1964 <__floatunsisf>
    1350:	6b 01       	movw	r12, r22
    1352:	7c 01       	movw	r14, r24
    1354:	b5 01       	movw	r22, r10
    1356:	88 27       	eor	r24, r24
    1358:	77 fd       	sbrc	r23, 7
    135a:	80 95       	com	r24
    135c:	98 2f       	mov	r25, r24
    135e:	04 d3       	rcall	.+1544   	; 0x1968 <__floatsisf>
    1360:	69 83       	std	Y+1, r22	; 0x01
    1362:	7a 83       	std	Y+2, r23	; 0x02
    1364:	8b 83       	std	Y+3, r24	; 0x03
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	9b 01       	movw	r18, r22
    136a:	ac 01       	movw	r20, r24
    136c:	c7 01       	movw	r24, r14
    136e:	b6 01       	movw	r22, r12
    1370:	5c d2       	rcall	.+1208   	; 0x182a <__cmpsf2>
    1372:	88 23       	and	r24, r24
    1374:	0c f0       	brlt	.+2      	; 0x1378 <sram_draw_new_line+0xbe>
    1376:	3e c0       	rjmp	.+124    	; 0x13f4 <sram_draw_new_line+0x13a>
    1378:	66 24       	eor	r6, r6
    137a:	57 fc       	sbrc	r5, 7
    137c:	60 94       	com	r6
    137e:	76 2c       	mov	r7, r6
    1380:	c4 01       	movw	r24, r8
    1382:	aa 27       	eor	r26, r26
    1384:	97 fd       	sbrc	r25, 7
    1386:	a0 95       	com	r26
    1388:	ba 2f       	mov	r27, r26
    138a:	89 87       	std	Y+9, r24	; 0x09
    138c:	9a 87       	std	Y+10, r25	; 0x0a
    138e:	ab 87       	std	Y+11, r26	; 0x0b
    1390:	bc 87       	std	Y+12, r27	; 0x0c
    1392:	c3 01       	movw	r24, r6
    1394:	b2 01       	movw	r22, r4
    1396:	e8 d2       	rcall	.+1488   	; 0x1968 <__floatsisf>
    1398:	9b 01       	movw	r18, r22
    139a:	ac 01       	movw	r20, r24
    139c:	c7 01       	movw	r24, r14
    139e:	b6 01       	movw	r22, r12
    13a0:	df d1       	rcall	.+958    	; 0x1760 <__subsf3>
    13a2:	2d 81       	ldd	r18, Y+5	; 0x05
    13a4:	3e 81       	ldd	r19, Y+6	; 0x06
    13a6:	4f 81       	ldd	r20, Y+7	; 0x07
    13a8:	58 85       	ldd	r21, Y+8	; 0x08
    13aa:	8e d3       	rcall	.+1820   	; 0x1ac8 <__mulsf3>
    13ac:	4b 01       	movw	r8, r22
    13ae:	5c 01       	movw	r10, r24
    13b0:	69 85       	ldd	r22, Y+9	; 0x09
    13b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    13b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    13b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    13b8:	d7 d2       	rcall	.+1454   	; 0x1968 <__floatsisf>
    13ba:	9b 01       	movw	r18, r22
    13bc:	ac 01       	movw	r20, r24
    13be:	c5 01       	movw	r24, r10
    13c0:	b4 01       	movw	r22, r8
    13c2:	cf d1       	rcall	.+926    	; 0x1762 <__addsf3>
    13c4:	a3 d2       	rcall	.+1350   	; 0x190c <__fixunssfsi>
    13c6:	b6 2e       	mov	r11, r22
    13c8:	c7 01       	movw	r24, r14
    13ca:	b6 01       	movw	r22, r12
    13cc:	9f d2       	rcall	.+1342   	; 0x190c <__fixunssfsi>
    13ce:	86 2f       	mov	r24, r22
    13d0:	6b 2d       	mov	r22, r11
    13d2:	57 df       	rcall	.-338    	; 0x1282 <sram_pixel>
    13d4:	2d ec       	ldi	r18, 0xCD	; 205
    13d6:	3c ec       	ldi	r19, 0xCC	; 204
    13d8:	4c ec       	ldi	r20, 0xCC	; 204
    13da:	5d e3       	ldi	r21, 0x3D	; 61
    13dc:	c7 01       	movw	r24, r14
    13de:	b6 01       	movw	r22, r12
    13e0:	c0 d1       	rcall	.+896    	; 0x1762 <__addsf3>
    13e2:	6b 01       	movw	r12, r22
    13e4:	7c 01       	movw	r14, r24
    13e6:	29 81       	ldd	r18, Y+1	; 0x01
    13e8:	3a 81       	ldd	r19, Y+2	; 0x02
    13ea:	4b 81       	ldd	r20, Y+3	; 0x03
    13ec:	5c 81       	ldd	r21, Y+4	; 0x04
    13ee:	1d d2       	rcall	.+1082   	; 0x182a <__cmpsf2>
    13f0:	88 23       	and	r24, r24
    13f2:	7c f2       	brlt	.-98     	; 0x1392 <sram_draw_new_line+0xd8>
    13f4:	12 15       	cp	r17, r2
    13f6:	c8 f1       	brcs	.+114    	; 0x146a <sram_draw_new_line+0x1b0>
    13f8:	30 12       	cpse	r3, r16
    13fa:	39 c0       	rjmp	.+114    	; 0x146e <sram_draw_new_line+0x1b4>
    13fc:	21 16       	cp	r2, r17
    13fe:	30 f0       	brcs	.+12     	; 0x140c <sram_draw_new_line+0x152>
    1400:	36 c0       	rjmp	.+108    	; 0x146e <sram_draw_new_line+0x1b4>
    1402:	82 2d       	mov	r24, r2
    1404:	21 2e       	mov	r2, r17
    1406:	18 2f       	mov	r17, r24
    1408:	02 2d       	mov	r16, r2
    140a:	01 c0       	rjmp	.+2      	; 0x140e <sram_draw_new_line+0x154>
    140c:	02 2d       	mov	r16, r2
    140e:	60 2f       	mov	r22, r16
    1410:	83 2d       	mov	r24, r3
    1412:	37 df       	rcall	.-402    	; 0x1282 <sram_pixel>
    1414:	0f 5f       	subi	r16, 0xFF	; 255
    1416:	01 17       	cp	r16, r17
    1418:	d0 f3       	brcs	.-12     	; 0x140e <sram_draw_new_line+0x154>
    141a:	29 c0       	rjmp	.+82     	; 0x146e <sram_draw_new_line+0x1b4>
    141c:	82 2e       	mov	r8, r18
    141e:	91 2c       	mov	r9, r1
    1420:	a8 2e       	mov	r10, r24
    1422:	b1 2c       	mov	r11, r1
    1424:	44 2e       	mov	r4, r20
    1426:	51 2c       	mov	r5, r1
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	68 19       	sub	r22, r8
    142c:	79 09       	sbc	r23, r9
    142e:	88 27       	eor	r24, r24
    1430:	77 fd       	sbrc	r23, 7
    1432:	80 95       	com	r24
    1434:	98 2f       	mov	r25, r24
    1436:	98 d2       	rcall	.+1328   	; 0x1968 <__floatsisf>
    1438:	6b 01       	movw	r12, r22
    143a:	7c 01       	movw	r14, r24
    143c:	b5 01       	movw	r22, r10
    143e:	64 19       	sub	r22, r4
    1440:	75 09       	sbc	r23, r5
    1442:	88 27       	eor	r24, r24
    1444:	77 fd       	sbrc	r23, 7
    1446:	80 95       	com	r24
    1448:	98 2f       	mov	r25, r24
    144a:	8e d2       	rcall	.+1308   	; 0x1968 <__floatsisf>
    144c:	9b 01       	movw	r18, r22
    144e:	ac 01       	movw	r20, r24
    1450:	c7 01       	movw	r24, r14
    1452:	b6 01       	movw	r22, r12
    1454:	ee d1       	rcall	.+988    	; 0x1832 <__divsf3>
    1456:	6d 83       	std	Y+5, r22	; 0x05
    1458:	7e 83       	std	Y+6, r23	; 0x06
    145a:	8f 83       	std	Y+7, r24	; 0x07
    145c:	98 87       	std	Y+8, r25	; 0x08
    145e:	82 2d       	mov	r24, r2
    1460:	21 2e       	mov	r2, r17
    1462:	18 2f       	mov	r17, r24
    1464:	30 2e       	mov	r3, r16
    1466:	0a 2d       	mov	r16, r10
    1468:	6e cf       	rjmp	.-292    	; 0x1346 <sram_draw_new_line+0x8c>
    146a:	30 16       	cp	r3, r16
    146c:	51 f2       	breq	.-108    	; 0x1402 <sram_draw_new_line+0x148>
    146e:	2c 96       	adiw	r28, 0x0c	; 12
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	0f 91       	pop	r16
    1482:	ff 90       	pop	r15
    1484:	ef 90       	pop	r14
    1486:	df 90       	pop	r13
    1488:	cf 90       	pop	r12
    148a:	bf 90       	pop	r11
    148c:	af 90       	pop	r10
    148e:	9f 90       	pop	r9
    1490:	8f 90       	pop	r8
    1492:	7f 90       	pop	r7
    1494:	6f 90       	pop	r6
    1496:	5f 90       	pop	r5
    1498:	4f 90       	pop	r4
    149a:	3f 90       	pop	r3
    149c:	2f 90       	pop	r2
    149e:	08 95       	ret

000014a0 <sram_draw_line>:
    14a0:	cf 93       	push	r28
    14a2:	df 93       	push	r29
    14a4:	d8 2f       	mov	r29, r24
    14a6:	c6 2f       	mov	r28, r22
    14a8:	26 2f       	mov	r18, r22
    14aa:	48 2f       	mov	r20, r24
    14ac:	60 91 94 01 	lds	r22, 0x0194
    14b0:	80 91 96 01 	lds	r24, 0x0196
    14b4:	02 df       	rcall	.-508    	; 0x12ba <sram_draw_new_line>
    14b6:	d0 93 96 01 	sts	0x0196, r29
    14ba:	c0 93 94 01 	sts	0x0194, r28
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	08 95       	ret

000014c4 <sram_push_line>:
    14c4:	cf 93       	push	r28
    14c6:	c8 2f       	mov	r28, r24
    14c8:	b7 dd       	rcall	.-1170   	; 0x1038 <oled_goto_line>
    14ca:	80 e8       	ldi	r24, 0x80	; 128
    14cc:	c8 9f       	mul	r28, r24
    14ce:	a0 01       	movw	r20, r0
    14d0:	11 24       	eor	r1, r1
    14d2:	80 e8       	ldi	r24, 0x80	; 128
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	40 58       	subi	r20, 0x80	; 128
    14d8:	5f 4f       	sbci	r21, 0xFF	; 255
    14da:	9a 01       	movw	r18, r20
    14dc:	28 1b       	sub	r18, r24
    14de:	39 0b       	sbc	r19, r25
    14e0:	e0 91 06 01 	lds	r30, 0x0106
    14e4:	f0 91 07 01 	lds	r31, 0x0107
    14e8:	e2 0f       	add	r30, r18
    14ea:	f3 1f       	adc	r31, r19
    14ec:	20 81       	ld	r18, Z
    14ee:	e0 91 08 01 	lds	r30, 0x0108
    14f2:	f0 91 09 01 	lds	r31, 0x0109
    14f6:	20 83       	st	Z, r18
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	71 f7       	brne	.-36     	; 0x14da <sram_push_line+0x16>
    14fe:	cf 91       	pop	r28
    1500:	08 95       	ret

00001502 <sram_push>:
    1502:	cf 93       	push	r28
    1504:	c0 e0       	ldi	r28, 0x00	; 0
    1506:	8c 2f       	mov	r24, r28
    1508:	dd df       	rcall	.-70     	; 0x14c4 <sram_push_line>
    150a:	cf 5f       	subi	r28, 0xFF	; 255
    150c:	c8 30       	cpi	r28, 0x08	; 8
    150e:	d9 f7       	brne	.-10     	; 0x1506 <sram_push+0x4>
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <sram_init>:
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	b0 e8       	ldi	r27, 0x80	; 128
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	11 c0       	rjmp	.+34     	; 0x1540 <sram_init+0x2c>
    151e:	a9 01       	movw	r20, r18
    1520:	48 1b       	sub	r20, r24
    1522:	59 0b       	sbc	r21, r25
    1524:	e0 91 06 01 	lds	r30, 0x0106
    1528:	f0 91 07 01 	lds	r31, 0x0107
    152c:	e4 0f       	add	r30, r20
    152e:	f5 1f       	adc	r31, r21
    1530:	10 82       	st	Z, r1
    1532:	01 97       	sbiw	r24, 0x01	; 1
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	99 f7       	brne	.-26     	; 0x151e <sram_init+0xa>
    1538:	21 15       	cp	r18, r1
    153a:	84 e0       	ldi	r24, 0x04	; 4
    153c:	38 07       	cpc	r19, r24
    153e:	29 f0       	breq	.+10     	; 0x154a <sram_init+0x36>
    1540:	8b 2f       	mov	r24, r27
    1542:	9a 2f       	mov	r25, r26
    1544:	20 58       	subi	r18, 0x80	; 128
    1546:	3f 4f       	sbci	r19, 0xFF	; 255
    1548:	ea cf       	rjmp	.-44     	; 0x151e <sram_init+0xa>
    154a:	db cf       	rjmp	.-74     	; 0x1502 <sram_push>
    154c:	08 95       	ret

0000154e <sram_clear_line>:
    154e:	cf 93       	push	r28
    1550:	c8 2f       	mov	r28, r24
    1552:	72 dd       	rcall	.-1308   	; 0x1038 <oled_goto_line>
    1554:	c8 30       	cpi	r28, 0x08	; 8
    1556:	20 f5       	brcc	.+72     	; 0x15a0 <sram_clear_line+0x52>
    1558:	80 e8       	ldi	r24, 0x80	; 128
    155a:	c8 9f       	mul	r28, r24
    155c:	b0 01       	movw	r22, r0
    155e:	11 24       	eor	r1, r1
    1560:	20 e8       	ldi	r18, 0x80	; 128
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	60 58       	subi	r22, 0x80	; 128
    1566:	7f 4f       	sbci	r23, 0xFF	; 255
    1568:	ab 01       	movw	r20, r22
    156a:	42 1b       	sub	r20, r18
    156c:	53 0b       	sbc	r21, r19
    156e:	e0 91 06 01 	lds	r30, 0x0106
    1572:	f0 91 07 01 	lds	r31, 0x0107
    1576:	e4 0f       	add	r30, r20
    1578:	f5 1f       	adc	r31, r21
    157a:	10 82       	st	Z, r1
    157c:	21 50       	subi	r18, 0x01	; 1
    157e:	31 09       	sbc	r19, r1
    1580:	21 15       	cp	r18, r1
    1582:	31 05       	cpc	r19, r1
    1584:	89 f7       	brne	.-30     	; 0x1568 <sram_clear_line+0x1a>
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	c9 01       	movw	r24, r18
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <sram_clear_line+0x44>
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	ca 95       	dec	r28
    1594:	e2 f7       	brpl	.-8      	; 0x158e <sram_clear_line+0x40>
    1596:	90 91 2d 01 	lds	r25, 0x012D
    159a:	89 2b       	or	r24, r25
    159c:	80 93 2d 01 	sts	0x012D, r24
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <sram_scroll_data>:
    15a4:	ef 92       	push	r14
    15a6:	ff 92       	push	r15
    15a8:	0f 93       	push	r16
    15aa:	1f 93       	push	r17
    15ac:	cf 93       	push	r28
    15ae:	df 93       	push	r29
    15b0:	22 23       	and	r18, r18
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <sram_scroll_data+0x12>
    15b4:	5f c0       	rjmp	.+190    	; 0x1674 <sram_scroll_data+0xd0>
    15b6:	a0 91 06 01 	lds	r26, 0x0106
    15ba:	b0 91 07 01 	lds	r27, 0x0107
    15be:	30 e8       	ldi	r19, 0x80	; 128
    15c0:	83 9f       	mul	r24, r19
    15c2:	a0 0d       	add	r26, r0
    15c4:	b1 1d       	adc	r27, r1
    15c6:	11 24       	eor	r1, r1
    15c8:	4c e8       	ldi	r20, 0x8C	; 140
    15ca:	51 e0       	ldi	r21, 0x01	; 1
    15cc:	fa 01       	movw	r30, r20
    15ce:	9d 91       	ld	r25, X+
    15d0:	91 93       	st	Z+, r25
    15d2:	9e 2f       	mov	r25, r30
    15d4:	94 1b       	sub	r25, r20
    15d6:	92 17       	cp	r25, r18
    15d8:	d0 f3       	brcs	.-12     	; 0x15ce <sram_scroll_data+0x2a>
    15da:	a2 2f       	mov	r26, r18
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	c0 e8       	ldi	r28, 0x80	; 128
    15e0:	d0 e0       	ldi	r29, 0x00	; 0
    15e2:	7e 01       	movw	r14, r28
    15e4:	ea 1a       	sub	r14, r26
    15e6:	fb 0a       	sbc	r15, r27
    15e8:	1e 14       	cp	r1, r14
    15ea:	1f 04       	cpc	r1, r15
    15ec:	0c f4       	brge	.+2      	; 0x15f0 <sram_scroll_data+0x4c>
    15ee:	48 c0       	rjmp	.+144    	; 0x1680 <sram_scroll_data+0xdc>
    15f0:	18 c0       	rjmp	.+48     	; 0x1622 <sram_scroll_data+0x7e>
    15f2:	60 91 06 01 	lds	r22, 0x0106
    15f6:	70 91 07 01 	lds	r23, 0x0107
    15fa:	40 0f       	add	r20, r16
    15fc:	51 1f       	adc	r21, r17
    15fe:	fb 01       	movw	r30, r22
    1600:	e4 0f       	add	r30, r20
    1602:	f5 1f       	adc	r31, r21
    1604:	4a 0f       	add	r20, r26
    1606:	5b 1f       	adc	r21, r27
    1608:	64 0f       	add	r22, r20
    160a:	75 1f       	adc	r23, r21
    160c:	eb 01       	movw	r28, r22
    160e:	38 81       	ld	r19, Y
    1610:	30 83       	st	Z, r19
    1612:	9f 5f       	subi	r25, 0xFF	; 255
    1614:	49 2f       	mov	r20, r25
    1616:	50 e0       	ldi	r21, 0x00	; 0
    1618:	4e 15       	cp	r20, r14
    161a:	5f 05       	cpc	r21, r15
    161c:	54 f3       	brlt	.-44     	; 0x15f2 <sram_scroll_data+0x4e>
    161e:	22 23       	and	r18, r18
    1620:	d1 f0       	breq	.+52     	; 0x1656 <sram_scroll_data+0xb2>
    1622:	d0 e8       	ldi	r29, 0x80	; 128
    1624:	8d 9f       	mul	r24, r29
    1626:	b0 01       	movw	r22, r0
    1628:	11 24       	eor	r1, r1
    162a:	6a 1b       	sub	r22, r26
    162c:	7b 0b       	sbc	r23, r27
    162e:	cc e8       	ldi	r28, 0x8C	; 140
    1630:	d1 e0       	ldi	r29, 0x01	; 1
    1632:	fe 01       	movw	r30, r28
    1634:	6d 50       	subi	r22, 0x0D	; 13
    1636:	71 40       	sbci	r23, 0x01	; 1
    1638:	ab 01       	movw	r20, r22
    163a:	4e 0f       	add	r20, r30
    163c:	5f 1f       	adc	r21, r31
    163e:	a0 91 06 01 	lds	r26, 0x0106
    1642:	b0 91 07 01 	lds	r27, 0x0107
    1646:	a4 0f       	add	r26, r20
    1648:	b5 1f       	adc	r27, r21
    164a:	91 91       	ld	r25, Z+
    164c:	9c 93       	st	X, r25
    164e:	9e 2f       	mov	r25, r30
    1650:	9c 1b       	sub	r25, r28
    1652:	92 17       	cp	r25, r18
    1654:	88 f3       	brcs	.-30     	; 0x1638 <sram_scroll_data+0x94>
    1656:	21 e0       	ldi	r18, 0x01	; 1
    1658:	30 e0       	ldi	r19, 0x00	; 0
    165a:	a9 01       	movw	r20, r18
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <sram_scroll_data+0xbe>
    165e:	44 0f       	add	r20, r20
    1660:	55 1f       	adc	r21, r21
    1662:	8a 95       	dec	r24
    1664:	e2 f7       	brpl	.-8      	; 0x165e <sram_scroll_data+0xba>
    1666:	ca 01       	movw	r24, r20
    1668:	90 91 2d 01 	lds	r25, 0x012D
    166c:	89 2b       	or	r24, r25
    166e:	80 93 2d 01 	sts	0x012D, r24
    1672:	0e c0       	rjmp	.+28     	; 0x1690 <sram_scroll_data+0xec>
    1674:	68 94       	set
    1676:	ee 24       	eor	r14, r14
    1678:	e7 f8       	bld	r14, 7
    167a:	f1 2c       	mov	r15, r1
    167c:	a0 e0       	ldi	r26, 0x00	; 0
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	50 e8       	ldi	r21, 0x80	; 128
    1682:	85 9f       	mul	r24, r21
    1684:	80 01       	movw	r16, r0
    1686:	11 24       	eor	r1, r1
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	50 e0       	ldi	r21, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	b1 cf       	rjmp	.-158    	; 0x15f2 <sram_scroll_data+0x4e>
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
    1694:	1f 91       	pop	r17
    1696:	0f 91       	pop	r16
    1698:	ff 90       	pop	r15
    169a:	ef 90       	pop	r14
    169c:	08 95       	ret

0000169e <sram_scroll_line>:
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	d8 2f       	mov	r29, r24
    16a4:	c6 2f       	mov	r28, r22
    16a6:	69 30       	cpi	r22, 0x09	; 9
    16a8:	18 f0       	brcs	.+6      	; 0x16b0 <sram_scroll_line+0x12>
    16aa:	c8 50       	subi	r28, 0x08	; 8
    16ac:	6c 2f       	mov	r22, r28
    16ae:	f7 df       	rcall	.-18     	; 0x169e <sram_scroll_line>
    16b0:	2c 2f       	mov	r18, r28
    16b2:	4f e7       	ldi	r20, 0x7F	; 127
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	8d 2f       	mov	r24, r29
    16b8:	75 df       	rcall	.-278    	; 0x15a4 <sram_scroll_data>
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	08 95       	ret

000016c0 <sram_set_point>:
    16c0:	80 93 96 01 	sts	0x0196, r24
    16c4:	60 93 94 01 	sts	0x0194, r22
    16c8:	08 95       	ret

000016ca <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	c8 2f       	mov	r28, r24
    16d4:	d6 2f       	mov	r29, r22
    16d6:	14 2f       	mov	r17, r20
    16d8:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    16da:	80 93 96 01 	sts	0x0196, r24
	prev_y = y0;
    16de:	60 93 94 01 	sts	0x0194, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    16e2:	62 2f       	mov	r22, r18
    16e4:	dd de       	rcall	.-582    	; 0x14a0 <sram_draw_line>
	sram_draw_line(x1,y1);
    16e6:	60 2f       	mov	r22, r16
    16e8:	81 2f       	mov	r24, r17
    16ea:	da de       	rcall	.-588    	; 0x14a0 <sram_draw_line>
	sram_draw_line(x1,y0);
    16ec:	6d 2f       	mov	r22, r29
    16ee:	81 2f       	mov	r24, r17
    16f0:	d7 de       	rcall	.-594    	; 0x14a0 <sram_draw_line>
	sram_draw_line(x0,y0);
    16f2:	6d 2f       	mov	r22, r29
    16f4:	8c 2f       	mov	r24, r28
    16f6:	d4 de       	rcall	.-600    	; 0x14a0 <sram_draw_line>
}
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_refresh_screen;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    1702:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    1704:	89 b7       	in	r24, 0x39	; 57
    1706:	81 60       	ori	r24, 0x01	; 1
    1708:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    170a:	83 b7       	in	r24, 0x33	; 51
    170c:	8d 60       	ori	r24, 0x0D	; 13
    170e:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    1710:	30 e0       	ldi	r19, 0x00	; 0
    1712:	40 e0       	ldi	r20, 0x00	; 0
    1714:	50 e0       	ldi	r21, 0x00	; 0
    1716:	60 ec       	ldi	r22, 0xC0	; 192
    1718:	72 e1       	ldi	r23, 0x12	; 18
    171a:	80 e0       	ldi	r24, 0x00	; 0
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	4a d2       	rcall	.+1172   	; 0x1bb4 <__divmodsi4>
    1720:	21 bf       	out	0x31, r18	; 49
	FLAG_refresh_screen = 1;//since we are initializing we want to refresh the page
    1722:	81 e0       	ldi	r24, 0x01	; 1
    1724:	80 93 98 01 	sts	0x0198, r24
    1728:	08 95       	ret

0000172a <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_refresh_screen == 1)
    172a:	80 91 98 01 	lds	r24, 0x0198
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	19 f4       	brne	.+6      	; 0x1738 <timer_check_flag+0xe>
	{
		FLAG_refresh_screen = 0;
    1732:	10 92 98 01 	sts	0x0198, r1
		return 1;
    1736:	08 95       	ret
	}
	return 0;
    1738:	80 e0       	ldi	r24, 0x00	; 0
}
    173a:	08 95       	ret

0000173c <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_refresh_screen = 0;
    173c:	10 92 98 01 	sts	0x0198, r1
    1740:	08 95       	ret

00001742 <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    1742:	1f 92       	push	r1
    1744:	0f 92       	push	r0
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	0f 92       	push	r0
    174a:	11 24       	eor	r1, r1
    174c:	8f 93       	push	r24
	FLAG_refresh_screen = 1;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	80 93 98 01 	sts	0x0198, r24
}
    1754:	8f 91       	pop	r24
    1756:	0f 90       	pop	r0
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	0f 90       	pop	r0
    175c:	1f 90       	pop	r1
    175e:	18 95       	reti

00001760 <__subsf3>:
    1760:	50 58       	subi	r21, 0x80	; 128

00001762 <__addsf3>:
    1762:	bb 27       	eor	r27, r27
    1764:	aa 27       	eor	r26, r26
    1766:	0e d0       	rcall	.+28     	; 0x1784 <__addsf3x>
    1768:	75 c1       	rjmp	.+746    	; 0x1a54 <__fp_round>
    176a:	66 d1       	rcall	.+716    	; 0x1a38 <__fp_pscA>
    176c:	30 f0       	brcs	.+12     	; 0x177a <__addsf3+0x18>
    176e:	6b d1       	rcall	.+726    	; 0x1a46 <__fp_pscB>
    1770:	20 f0       	brcs	.+8      	; 0x177a <__addsf3+0x18>
    1772:	31 f4       	brne	.+12     	; 0x1780 <__addsf3+0x1e>
    1774:	9f 3f       	cpi	r25, 0xFF	; 255
    1776:	11 f4       	brne	.+4      	; 0x177c <__addsf3+0x1a>
    1778:	1e f4       	brtc	.+6      	; 0x1780 <__addsf3+0x1e>
    177a:	5b c1       	rjmp	.+694    	; 0x1a32 <__fp_nan>
    177c:	0e f4       	brtc	.+2      	; 0x1780 <__addsf3+0x1e>
    177e:	e0 95       	com	r30
    1780:	e7 fb       	bst	r30, 7
    1782:	51 c1       	rjmp	.+674    	; 0x1a26 <__fp_inf>

00001784 <__addsf3x>:
    1784:	e9 2f       	mov	r30, r25
    1786:	77 d1       	rcall	.+750    	; 0x1a76 <__fp_split3>
    1788:	80 f3       	brcs	.-32     	; 0x176a <__addsf3+0x8>
    178a:	ba 17       	cp	r27, r26
    178c:	62 07       	cpc	r22, r18
    178e:	73 07       	cpc	r23, r19
    1790:	84 07       	cpc	r24, r20
    1792:	95 07       	cpc	r25, r21
    1794:	18 f0       	brcs	.+6      	; 0x179c <__addsf3x+0x18>
    1796:	71 f4       	brne	.+28     	; 0x17b4 <__addsf3x+0x30>
    1798:	9e f5       	brtc	.+102    	; 0x1800 <__addsf3x+0x7c>
    179a:	8f c1       	rjmp	.+798    	; 0x1aba <__fp_zero>
    179c:	0e f4       	brtc	.+2      	; 0x17a0 <__addsf3x+0x1c>
    179e:	e0 95       	com	r30
    17a0:	0b 2e       	mov	r0, r27
    17a2:	ba 2f       	mov	r27, r26
    17a4:	a0 2d       	mov	r26, r0
    17a6:	0b 01       	movw	r0, r22
    17a8:	b9 01       	movw	r22, r18
    17aa:	90 01       	movw	r18, r0
    17ac:	0c 01       	movw	r0, r24
    17ae:	ca 01       	movw	r24, r20
    17b0:	a0 01       	movw	r20, r0
    17b2:	11 24       	eor	r1, r1
    17b4:	ff 27       	eor	r31, r31
    17b6:	59 1b       	sub	r21, r25
    17b8:	99 f0       	breq	.+38     	; 0x17e0 <__addsf3x+0x5c>
    17ba:	59 3f       	cpi	r21, 0xF9	; 249
    17bc:	50 f4       	brcc	.+20     	; 0x17d2 <__addsf3x+0x4e>
    17be:	50 3e       	cpi	r21, 0xE0	; 224
    17c0:	68 f1       	brcs	.+90     	; 0x181c <__addsf3x+0x98>
    17c2:	1a 16       	cp	r1, r26
    17c4:	f0 40       	sbci	r31, 0x00	; 0
    17c6:	a2 2f       	mov	r26, r18
    17c8:	23 2f       	mov	r18, r19
    17ca:	34 2f       	mov	r19, r20
    17cc:	44 27       	eor	r20, r20
    17ce:	58 5f       	subi	r21, 0xF8	; 248
    17d0:	f3 cf       	rjmp	.-26     	; 0x17b8 <__addsf3x+0x34>
    17d2:	46 95       	lsr	r20
    17d4:	37 95       	ror	r19
    17d6:	27 95       	ror	r18
    17d8:	a7 95       	ror	r26
    17da:	f0 40       	sbci	r31, 0x00	; 0
    17dc:	53 95       	inc	r21
    17de:	c9 f7       	brne	.-14     	; 0x17d2 <__addsf3x+0x4e>
    17e0:	7e f4       	brtc	.+30     	; 0x1800 <__addsf3x+0x7c>
    17e2:	1f 16       	cp	r1, r31
    17e4:	ba 0b       	sbc	r27, r26
    17e6:	62 0b       	sbc	r22, r18
    17e8:	73 0b       	sbc	r23, r19
    17ea:	84 0b       	sbc	r24, r20
    17ec:	ba f0       	brmi	.+46     	; 0x181c <__addsf3x+0x98>
    17ee:	91 50       	subi	r25, 0x01	; 1
    17f0:	a1 f0       	breq	.+40     	; 0x181a <__addsf3x+0x96>
    17f2:	ff 0f       	add	r31, r31
    17f4:	bb 1f       	adc	r27, r27
    17f6:	66 1f       	adc	r22, r22
    17f8:	77 1f       	adc	r23, r23
    17fa:	88 1f       	adc	r24, r24
    17fc:	c2 f7       	brpl	.-16     	; 0x17ee <__addsf3x+0x6a>
    17fe:	0e c0       	rjmp	.+28     	; 0x181c <__addsf3x+0x98>
    1800:	ba 0f       	add	r27, r26
    1802:	62 1f       	adc	r22, r18
    1804:	73 1f       	adc	r23, r19
    1806:	84 1f       	adc	r24, r20
    1808:	48 f4       	brcc	.+18     	; 0x181c <__addsf3x+0x98>
    180a:	87 95       	ror	r24
    180c:	77 95       	ror	r23
    180e:	67 95       	ror	r22
    1810:	b7 95       	ror	r27
    1812:	f7 95       	ror	r31
    1814:	9e 3f       	cpi	r25, 0xFE	; 254
    1816:	08 f0       	brcs	.+2      	; 0x181a <__addsf3x+0x96>
    1818:	b3 cf       	rjmp	.-154    	; 0x1780 <__addsf3+0x1e>
    181a:	93 95       	inc	r25
    181c:	88 0f       	add	r24, r24
    181e:	08 f0       	brcs	.+2      	; 0x1822 <__addsf3x+0x9e>
    1820:	99 27       	eor	r25, r25
    1822:	ee 0f       	add	r30, r30
    1824:	97 95       	ror	r25
    1826:	87 95       	ror	r24
    1828:	08 95       	ret

0000182a <__cmpsf2>:
    182a:	d9 d0       	rcall	.+434    	; 0x19de <__fp_cmp>
    182c:	08 f4       	brcc	.+2      	; 0x1830 <__cmpsf2+0x6>
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	08 95       	ret

00001832 <__divsf3>:
    1832:	0c d0       	rcall	.+24     	; 0x184c <__divsf3x>
    1834:	0f c1       	rjmp	.+542    	; 0x1a54 <__fp_round>
    1836:	07 d1       	rcall	.+526    	; 0x1a46 <__fp_pscB>
    1838:	40 f0       	brcs	.+16     	; 0x184a <__divsf3+0x18>
    183a:	fe d0       	rcall	.+508    	; 0x1a38 <__fp_pscA>
    183c:	30 f0       	brcs	.+12     	; 0x184a <__divsf3+0x18>
    183e:	21 f4       	brne	.+8      	; 0x1848 <__divsf3+0x16>
    1840:	5f 3f       	cpi	r21, 0xFF	; 255
    1842:	19 f0       	breq	.+6      	; 0x184a <__divsf3+0x18>
    1844:	f0 c0       	rjmp	.+480    	; 0x1a26 <__fp_inf>
    1846:	51 11       	cpse	r21, r1
    1848:	39 c1       	rjmp	.+626    	; 0x1abc <__fp_szero>
    184a:	f3 c0       	rjmp	.+486    	; 0x1a32 <__fp_nan>

0000184c <__divsf3x>:
    184c:	14 d1       	rcall	.+552    	; 0x1a76 <__fp_split3>
    184e:	98 f3       	brcs	.-26     	; 0x1836 <__divsf3+0x4>

00001850 <__divsf3_pse>:
    1850:	99 23       	and	r25, r25
    1852:	c9 f3       	breq	.-14     	; 0x1846 <__divsf3+0x14>
    1854:	55 23       	and	r21, r21
    1856:	b1 f3       	breq	.-20     	; 0x1844 <__divsf3+0x12>
    1858:	95 1b       	sub	r25, r21
    185a:	55 0b       	sbc	r21, r21
    185c:	bb 27       	eor	r27, r27
    185e:	aa 27       	eor	r26, r26
    1860:	62 17       	cp	r22, r18
    1862:	73 07       	cpc	r23, r19
    1864:	84 07       	cpc	r24, r20
    1866:	38 f0       	brcs	.+14     	; 0x1876 <__divsf3_pse+0x26>
    1868:	9f 5f       	subi	r25, 0xFF	; 255
    186a:	5f 4f       	sbci	r21, 0xFF	; 255
    186c:	22 0f       	add	r18, r18
    186e:	33 1f       	adc	r19, r19
    1870:	44 1f       	adc	r20, r20
    1872:	aa 1f       	adc	r26, r26
    1874:	a9 f3       	breq	.-22     	; 0x1860 <__divsf3_pse+0x10>
    1876:	33 d0       	rcall	.+102    	; 0x18de <__divsf3_pse+0x8e>
    1878:	0e 2e       	mov	r0, r30
    187a:	3a f0       	brmi	.+14     	; 0x188a <__divsf3_pse+0x3a>
    187c:	e0 e8       	ldi	r30, 0x80	; 128
    187e:	30 d0       	rcall	.+96     	; 0x18e0 <__divsf3_pse+0x90>
    1880:	91 50       	subi	r25, 0x01	; 1
    1882:	50 40       	sbci	r21, 0x00	; 0
    1884:	e6 95       	lsr	r30
    1886:	00 1c       	adc	r0, r0
    1888:	ca f7       	brpl	.-14     	; 0x187c <__divsf3_pse+0x2c>
    188a:	29 d0       	rcall	.+82     	; 0x18de <__divsf3_pse+0x8e>
    188c:	fe 2f       	mov	r31, r30
    188e:	27 d0       	rcall	.+78     	; 0x18de <__divsf3_pse+0x8e>
    1890:	66 0f       	add	r22, r22
    1892:	77 1f       	adc	r23, r23
    1894:	88 1f       	adc	r24, r24
    1896:	bb 1f       	adc	r27, r27
    1898:	26 17       	cp	r18, r22
    189a:	37 07       	cpc	r19, r23
    189c:	48 07       	cpc	r20, r24
    189e:	ab 07       	cpc	r26, r27
    18a0:	b0 e8       	ldi	r27, 0x80	; 128
    18a2:	09 f0       	breq	.+2      	; 0x18a6 <__divsf3_pse+0x56>
    18a4:	bb 0b       	sbc	r27, r27
    18a6:	80 2d       	mov	r24, r0
    18a8:	bf 01       	movw	r22, r30
    18aa:	ff 27       	eor	r31, r31
    18ac:	93 58       	subi	r25, 0x83	; 131
    18ae:	5f 4f       	sbci	r21, 0xFF	; 255
    18b0:	2a f0       	brmi	.+10     	; 0x18bc <__divsf3_pse+0x6c>
    18b2:	9e 3f       	cpi	r25, 0xFE	; 254
    18b4:	51 05       	cpc	r21, r1
    18b6:	68 f0       	brcs	.+26     	; 0x18d2 <__divsf3_pse+0x82>
    18b8:	b6 c0       	rjmp	.+364    	; 0x1a26 <__fp_inf>
    18ba:	00 c1       	rjmp	.+512    	; 0x1abc <__fp_szero>
    18bc:	5f 3f       	cpi	r21, 0xFF	; 255
    18be:	ec f3       	brlt	.-6      	; 0x18ba <__divsf3_pse+0x6a>
    18c0:	98 3e       	cpi	r25, 0xE8	; 232
    18c2:	dc f3       	brlt	.-10     	; 0x18ba <__divsf3_pse+0x6a>
    18c4:	86 95       	lsr	r24
    18c6:	77 95       	ror	r23
    18c8:	67 95       	ror	r22
    18ca:	b7 95       	ror	r27
    18cc:	f7 95       	ror	r31
    18ce:	9f 5f       	subi	r25, 0xFF	; 255
    18d0:	c9 f7       	brne	.-14     	; 0x18c4 <__divsf3_pse+0x74>
    18d2:	88 0f       	add	r24, r24
    18d4:	91 1d       	adc	r25, r1
    18d6:	96 95       	lsr	r25
    18d8:	87 95       	ror	r24
    18da:	97 f9       	bld	r25, 7
    18dc:	08 95       	ret
    18de:	e1 e0       	ldi	r30, 0x01	; 1
    18e0:	66 0f       	add	r22, r22
    18e2:	77 1f       	adc	r23, r23
    18e4:	88 1f       	adc	r24, r24
    18e6:	bb 1f       	adc	r27, r27
    18e8:	62 17       	cp	r22, r18
    18ea:	73 07       	cpc	r23, r19
    18ec:	84 07       	cpc	r24, r20
    18ee:	ba 07       	cpc	r27, r26
    18f0:	20 f0       	brcs	.+8      	; 0x18fa <__divsf3_pse+0xaa>
    18f2:	62 1b       	sub	r22, r18
    18f4:	73 0b       	sbc	r23, r19
    18f6:	84 0b       	sbc	r24, r20
    18f8:	ba 0b       	sbc	r27, r26
    18fa:	ee 1f       	adc	r30, r30
    18fc:	88 f7       	brcc	.-30     	; 0x18e0 <__divsf3_pse+0x90>
    18fe:	e0 95       	com	r30
    1900:	08 95       	ret

00001902 <__fixsfsi>:
    1902:	04 d0       	rcall	.+8      	; 0x190c <__fixunssfsi>
    1904:	68 94       	set
    1906:	b1 11       	cpse	r27, r1
    1908:	d9 c0       	rjmp	.+434    	; 0x1abc <__fp_szero>
    190a:	08 95       	ret

0000190c <__fixunssfsi>:
    190c:	bc d0       	rcall	.+376    	; 0x1a86 <__fp_splitA>
    190e:	88 f0       	brcs	.+34     	; 0x1932 <__fixunssfsi+0x26>
    1910:	9f 57       	subi	r25, 0x7F	; 127
    1912:	90 f0       	brcs	.+36     	; 0x1938 <__fixunssfsi+0x2c>
    1914:	b9 2f       	mov	r27, r25
    1916:	99 27       	eor	r25, r25
    1918:	b7 51       	subi	r27, 0x17	; 23
    191a:	a0 f0       	brcs	.+40     	; 0x1944 <__fixunssfsi+0x38>
    191c:	d1 f0       	breq	.+52     	; 0x1952 <__fixunssfsi+0x46>
    191e:	66 0f       	add	r22, r22
    1920:	77 1f       	adc	r23, r23
    1922:	88 1f       	adc	r24, r24
    1924:	99 1f       	adc	r25, r25
    1926:	1a f0       	brmi	.+6      	; 0x192e <__fixunssfsi+0x22>
    1928:	ba 95       	dec	r27
    192a:	c9 f7       	brne	.-14     	; 0x191e <__fixunssfsi+0x12>
    192c:	12 c0       	rjmp	.+36     	; 0x1952 <__fixunssfsi+0x46>
    192e:	b1 30       	cpi	r27, 0x01	; 1
    1930:	81 f0       	breq	.+32     	; 0x1952 <__fixunssfsi+0x46>
    1932:	c3 d0       	rcall	.+390    	; 0x1aba <__fp_zero>
    1934:	b1 e0       	ldi	r27, 0x01	; 1
    1936:	08 95       	ret
    1938:	c0 c0       	rjmp	.+384    	; 0x1aba <__fp_zero>
    193a:	67 2f       	mov	r22, r23
    193c:	78 2f       	mov	r23, r24
    193e:	88 27       	eor	r24, r24
    1940:	b8 5f       	subi	r27, 0xF8	; 248
    1942:	39 f0       	breq	.+14     	; 0x1952 <__fixunssfsi+0x46>
    1944:	b9 3f       	cpi	r27, 0xF9	; 249
    1946:	cc f3       	brlt	.-14     	; 0x193a <__fixunssfsi+0x2e>
    1948:	86 95       	lsr	r24
    194a:	77 95       	ror	r23
    194c:	67 95       	ror	r22
    194e:	b3 95       	inc	r27
    1950:	d9 f7       	brne	.-10     	; 0x1948 <__fixunssfsi+0x3c>
    1952:	3e f4       	brtc	.+14     	; 0x1962 <__fixunssfsi+0x56>
    1954:	90 95       	com	r25
    1956:	80 95       	com	r24
    1958:	70 95       	com	r23
    195a:	61 95       	neg	r22
    195c:	7f 4f       	sbci	r23, 0xFF	; 255
    195e:	8f 4f       	sbci	r24, 0xFF	; 255
    1960:	9f 4f       	sbci	r25, 0xFF	; 255
    1962:	08 95       	ret

00001964 <__floatunsisf>:
    1964:	e8 94       	clt
    1966:	09 c0       	rjmp	.+18     	; 0x197a <__floatsisf+0x12>

00001968 <__floatsisf>:
    1968:	97 fb       	bst	r25, 7
    196a:	3e f4       	brtc	.+14     	; 0x197a <__floatsisf+0x12>
    196c:	90 95       	com	r25
    196e:	80 95       	com	r24
    1970:	70 95       	com	r23
    1972:	61 95       	neg	r22
    1974:	7f 4f       	sbci	r23, 0xFF	; 255
    1976:	8f 4f       	sbci	r24, 0xFF	; 255
    1978:	9f 4f       	sbci	r25, 0xFF	; 255
    197a:	99 23       	and	r25, r25
    197c:	a9 f0       	breq	.+42     	; 0x19a8 <__floatsisf+0x40>
    197e:	f9 2f       	mov	r31, r25
    1980:	96 e9       	ldi	r25, 0x96	; 150
    1982:	bb 27       	eor	r27, r27
    1984:	93 95       	inc	r25
    1986:	f6 95       	lsr	r31
    1988:	87 95       	ror	r24
    198a:	77 95       	ror	r23
    198c:	67 95       	ror	r22
    198e:	b7 95       	ror	r27
    1990:	f1 11       	cpse	r31, r1
    1992:	f8 cf       	rjmp	.-16     	; 0x1984 <__floatsisf+0x1c>
    1994:	fa f4       	brpl	.+62     	; 0x19d4 <__floatsisf+0x6c>
    1996:	bb 0f       	add	r27, r27
    1998:	11 f4       	brne	.+4      	; 0x199e <__floatsisf+0x36>
    199a:	60 ff       	sbrs	r22, 0
    199c:	1b c0       	rjmp	.+54     	; 0x19d4 <__floatsisf+0x6c>
    199e:	6f 5f       	subi	r22, 0xFF	; 255
    19a0:	7f 4f       	sbci	r23, 0xFF	; 255
    19a2:	8f 4f       	sbci	r24, 0xFF	; 255
    19a4:	9f 4f       	sbci	r25, 0xFF	; 255
    19a6:	16 c0       	rjmp	.+44     	; 0x19d4 <__floatsisf+0x6c>
    19a8:	88 23       	and	r24, r24
    19aa:	11 f0       	breq	.+4      	; 0x19b0 <__floatsisf+0x48>
    19ac:	96 e9       	ldi	r25, 0x96	; 150
    19ae:	11 c0       	rjmp	.+34     	; 0x19d2 <__floatsisf+0x6a>
    19b0:	77 23       	and	r23, r23
    19b2:	21 f0       	breq	.+8      	; 0x19bc <__floatsisf+0x54>
    19b4:	9e e8       	ldi	r25, 0x8E	; 142
    19b6:	87 2f       	mov	r24, r23
    19b8:	76 2f       	mov	r23, r22
    19ba:	05 c0       	rjmp	.+10     	; 0x19c6 <__floatsisf+0x5e>
    19bc:	66 23       	and	r22, r22
    19be:	71 f0       	breq	.+28     	; 0x19dc <__floatsisf+0x74>
    19c0:	96 e8       	ldi	r25, 0x86	; 134
    19c2:	86 2f       	mov	r24, r22
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	2a f0       	brmi	.+10     	; 0x19d4 <__floatsisf+0x6c>
    19ca:	9a 95       	dec	r25
    19cc:	66 0f       	add	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	88 1f       	adc	r24, r24
    19d2:	da f7       	brpl	.-10     	; 0x19ca <__floatsisf+0x62>
    19d4:	88 0f       	add	r24, r24
    19d6:	96 95       	lsr	r25
    19d8:	87 95       	ror	r24
    19da:	97 f9       	bld	r25, 7
    19dc:	08 95       	ret

000019de <__fp_cmp>:
    19de:	99 0f       	add	r25, r25
    19e0:	00 08       	sbc	r0, r0
    19e2:	55 0f       	add	r21, r21
    19e4:	aa 0b       	sbc	r26, r26
    19e6:	e0 e8       	ldi	r30, 0x80	; 128
    19e8:	fe ef       	ldi	r31, 0xFE	; 254
    19ea:	16 16       	cp	r1, r22
    19ec:	17 06       	cpc	r1, r23
    19ee:	e8 07       	cpc	r30, r24
    19f0:	f9 07       	cpc	r31, r25
    19f2:	c0 f0       	brcs	.+48     	; 0x1a24 <__fp_cmp+0x46>
    19f4:	12 16       	cp	r1, r18
    19f6:	13 06       	cpc	r1, r19
    19f8:	e4 07       	cpc	r30, r20
    19fa:	f5 07       	cpc	r31, r21
    19fc:	98 f0       	brcs	.+38     	; 0x1a24 <__fp_cmp+0x46>
    19fe:	62 1b       	sub	r22, r18
    1a00:	73 0b       	sbc	r23, r19
    1a02:	84 0b       	sbc	r24, r20
    1a04:	95 0b       	sbc	r25, r21
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <__fp_cmp+0x38>
    1a08:	0a 26       	eor	r0, r26
    1a0a:	61 f0       	breq	.+24     	; 0x1a24 <__fp_cmp+0x46>
    1a0c:	23 2b       	or	r18, r19
    1a0e:	24 2b       	or	r18, r20
    1a10:	25 2b       	or	r18, r21
    1a12:	21 f4       	brne	.+8      	; 0x1a1c <__fp_cmp+0x3e>
    1a14:	08 95       	ret
    1a16:	0a 26       	eor	r0, r26
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <__fp_cmp+0x3e>
    1a1a:	a1 40       	sbci	r26, 0x01	; 1
    1a1c:	a6 95       	lsr	r26
    1a1e:	8f ef       	ldi	r24, 0xFF	; 255
    1a20:	81 1d       	adc	r24, r1
    1a22:	81 1d       	adc	r24, r1
    1a24:	08 95       	ret

00001a26 <__fp_inf>:
    1a26:	97 f9       	bld	r25, 7
    1a28:	9f 67       	ori	r25, 0x7F	; 127
    1a2a:	80 e8       	ldi	r24, 0x80	; 128
    1a2c:	70 e0       	ldi	r23, 0x00	; 0
    1a2e:	60 e0       	ldi	r22, 0x00	; 0
    1a30:	08 95       	ret

00001a32 <__fp_nan>:
    1a32:	9f ef       	ldi	r25, 0xFF	; 255
    1a34:	80 ec       	ldi	r24, 0xC0	; 192
    1a36:	08 95       	ret

00001a38 <__fp_pscA>:
    1a38:	00 24       	eor	r0, r0
    1a3a:	0a 94       	dec	r0
    1a3c:	16 16       	cp	r1, r22
    1a3e:	17 06       	cpc	r1, r23
    1a40:	18 06       	cpc	r1, r24
    1a42:	09 06       	cpc	r0, r25
    1a44:	08 95       	ret

00001a46 <__fp_pscB>:
    1a46:	00 24       	eor	r0, r0
    1a48:	0a 94       	dec	r0
    1a4a:	12 16       	cp	r1, r18
    1a4c:	13 06       	cpc	r1, r19
    1a4e:	14 06       	cpc	r1, r20
    1a50:	05 06       	cpc	r0, r21
    1a52:	08 95       	ret

00001a54 <__fp_round>:
    1a54:	09 2e       	mov	r0, r25
    1a56:	03 94       	inc	r0
    1a58:	00 0c       	add	r0, r0
    1a5a:	11 f4       	brne	.+4      	; 0x1a60 <__fp_round+0xc>
    1a5c:	88 23       	and	r24, r24
    1a5e:	52 f0       	brmi	.+20     	; 0x1a74 <__fp_round+0x20>
    1a60:	bb 0f       	add	r27, r27
    1a62:	40 f4       	brcc	.+16     	; 0x1a74 <__fp_round+0x20>
    1a64:	bf 2b       	or	r27, r31
    1a66:	11 f4       	brne	.+4      	; 0x1a6c <__fp_round+0x18>
    1a68:	60 ff       	sbrs	r22, 0
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <__fp_round+0x20>
    1a6c:	6f 5f       	subi	r22, 0xFF	; 255
    1a6e:	7f 4f       	sbci	r23, 0xFF	; 255
    1a70:	8f 4f       	sbci	r24, 0xFF	; 255
    1a72:	9f 4f       	sbci	r25, 0xFF	; 255
    1a74:	08 95       	ret

00001a76 <__fp_split3>:
    1a76:	57 fd       	sbrc	r21, 7
    1a78:	90 58       	subi	r25, 0x80	; 128
    1a7a:	44 0f       	add	r20, r20
    1a7c:	55 1f       	adc	r21, r21
    1a7e:	59 f0       	breq	.+22     	; 0x1a96 <__fp_splitA+0x10>
    1a80:	5f 3f       	cpi	r21, 0xFF	; 255
    1a82:	71 f0       	breq	.+28     	; 0x1aa0 <__fp_splitA+0x1a>
    1a84:	47 95       	ror	r20

00001a86 <__fp_splitA>:
    1a86:	88 0f       	add	r24, r24
    1a88:	97 fb       	bst	r25, 7
    1a8a:	99 1f       	adc	r25, r25
    1a8c:	61 f0       	breq	.+24     	; 0x1aa6 <__fp_splitA+0x20>
    1a8e:	9f 3f       	cpi	r25, 0xFF	; 255
    1a90:	79 f0       	breq	.+30     	; 0x1ab0 <__fp_splitA+0x2a>
    1a92:	87 95       	ror	r24
    1a94:	08 95       	ret
    1a96:	12 16       	cp	r1, r18
    1a98:	13 06       	cpc	r1, r19
    1a9a:	14 06       	cpc	r1, r20
    1a9c:	55 1f       	adc	r21, r21
    1a9e:	f2 cf       	rjmp	.-28     	; 0x1a84 <__fp_split3+0xe>
    1aa0:	46 95       	lsr	r20
    1aa2:	f1 df       	rcall	.-30     	; 0x1a86 <__fp_splitA>
    1aa4:	08 c0       	rjmp	.+16     	; 0x1ab6 <__fp_splitA+0x30>
    1aa6:	16 16       	cp	r1, r22
    1aa8:	17 06       	cpc	r1, r23
    1aaa:	18 06       	cpc	r1, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	f1 cf       	rjmp	.-30     	; 0x1a92 <__fp_splitA+0xc>
    1ab0:	86 95       	lsr	r24
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	61 05       	cpc	r22, r1
    1ab6:	08 94       	sec
    1ab8:	08 95       	ret

00001aba <__fp_zero>:
    1aba:	e8 94       	clt

00001abc <__fp_szero>:
    1abc:	bb 27       	eor	r27, r27
    1abe:	66 27       	eor	r22, r22
    1ac0:	77 27       	eor	r23, r23
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	97 f9       	bld	r25, 7
    1ac6:	08 95       	ret

00001ac8 <__mulsf3>:
    1ac8:	0b d0       	rcall	.+22     	; 0x1ae0 <__mulsf3x>
    1aca:	c4 cf       	rjmp	.-120    	; 0x1a54 <__fp_round>
    1acc:	b5 df       	rcall	.-150    	; 0x1a38 <__fp_pscA>
    1ace:	28 f0       	brcs	.+10     	; 0x1ada <__mulsf3+0x12>
    1ad0:	ba df       	rcall	.-140    	; 0x1a46 <__fp_pscB>
    1ad2:	18 f0       	brcs	.+6      	; 0x1ada <__mulsf3+0x12>
    1ad4:	95 23       	and	r25, r21
    1ad6:	09 f0       	breq	.+2      	; 0x1ada <__mulsf3+0x12>
    1ad8:	a6 cf       	rjmp	.-180    	; 0x1a26 <__fp_inf>
    1ada:	ab cf       	rjmp	.-170    	; 0x1a32 <__fp_nan>
    1adc:	11 24       	eor	r1, r1
    1ade:	ee cf       	rjmp	.-36     	; 0x1abc <__fp_szero>

00001ae0 <__mulsf3x>:
    1ae0:	ca df       	rcall	.-108    	; 0x1a76 <__fp_split3>
    1ae2:	a0 f3       	brcs	.-24     	; 0x1acc <__mulsf3+0x4>

00001ae4 <__mulsf3_pse>:
    1ae4:	95 9f       	mul	r25, r21
    1ae6:	d1 f3       	breq	.-12     	; 0x1adc <__mulsf3+0x14>
    1ae8:	95 0f       	add	r25, r21
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	55 1f       	adc	r21, r21
    1aee:	62 9f       	mul	r22, r18
    1af0:	f0 01       	movw	r30, r0
    1af2:	72 9f       	mul	r23, r18
    1af4:	bb 27       	eor	r27, r27
    1af6:	f0 0d       	add	r31, r0
    1af8:	b1 1d       	adc	r27, r1
    1afa:	63 9f       	mul	r22, r19
    1afc:	aa 27       	eor	r26, r26
    1afe:	f0 0d       	add	r31, r0
    1b00:	b1 1d       	adc	r27, r1
    1b02:	aa 1f       	adc	r26, r26
    1b04:	64 9f       	mul	r22, r20
    1b06:	66 27       	eor	r22, r22
    1b08:	b0 0d       	add	r27, r0
    1b0a:	a1 1d       	adc	r26, r1
    1b0c:	66 1f       	adc	r22, r22
    1b0e:	82 9f       	mul	r24, r18
    1b10:	22 27       	eor	r18, r18
    1b12:	b0 0d       	add	r27, r0
    1b14:	a1 1d       	adc	r26, r1
    1b16:	62 1f       	adc	r22, r18
    1b18:	73 9f       	mul	r23, r19
    1b1a:	b0 0d       	add	r27, r0
    1b1c:	a1 1d       	adc	r26, r1
    1b1e:	62 1f       	adc	r22, r18
    1b20:	83 9f       	mul	r24, r19
    1b22:	a0 0d       	add	r26, r0
    1b24:	61 1d       	adc	r22, r1
    1b26:	22 1f       	adc	r18, r18
    1b28:	74 9f       	mul	r23, r20
    1b2a:	33 27       	eor	r19, r19
    1b2c:	a0 0d       	add	r26, r0
    1b2e:	61 1d       	adc	r22, r1
    1b30:	23 1f       	adc	r18, r19
    1b32:	84 9f       	mul	r24, r20
    1b34:	60 0d       	add	r22, r0
    1b36:	21 1d       	adc	r18, r1
    1b38:	82 2f       	mov	r24, r18
    1b3a:	76 2f       	mov	r23, r22
    1b3c:	6a 2f       	mov	r22, r26
    1b3e:	11 24       	eor	r1, r1
    1b40:	9f 57       	subi	r25, 0x7F	; 127
    1b42:	50 40       	sbci	r21, 0x00	; 0
    1b44:	8a f0       	brmi	.+34     	; 0x1b68 <__mulsf3_pse+0x84>
    1b46:	e1 f0       	breq	.+56     	; 0x1b80 <__mulsf3_pse+0x9c>
    1b48:	88 23       	and	r24, r24
    1b4a:	4a f0       	brmi	.+18     	; 0x1b5e <__mulsf3_pse+0x7a>
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	bb 1f       	adc	r27, r27
    1b52:	66 1f       	adc	r22, r22
    1b54:	77 1f       	adc	r23, r23
    1b56:	88 1f       	adc	r24, r24
    1b58:	91 50       	subi	r25, 0x01	; 1
    1b5a:	50 40       	sbci	r21, 0x00	; 0
    1b5c:	a9 f7       	brne	.-22     	; 0x1b48 <__mulsf3_pse+0x64>
    1b5e:	9e 3f       	cpi	r25, 0xFE	; 254
    1b60:	51 05       	cpc	r21, r1
    1b62:	70 f0       	brcs	.+28     	; 0x1b80 <__mulsf3_pse+0x9c>
    1b64:	60 cf       	rjmp	.-320    	; 0x1a26 <__fp_inf>
    1b66:	aa cf       	rjmp	.-172    	; 0x1abc <__fp_szero>
    1b68:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6a:	ec f3       	brlt	.-6      	; 0x1b66 <__mulsf3_pse+0x82>
    1b6c:	98 3e       	cpi	r25, 0xE8	; 232
    1b6e:	dc f3       	brlt	.-10     	; 0x1b66 <__mulsf3_pse+0x82>
    1b70:	86 95       	lsr	r24
    1b72:	77 95       	ror	r23
    1b74:	67 95       	ror	r22
    1b76:	b7 95       	ror	r27
    1b78:	f7 95       	ror	r31
    1b7a:	e7 95       	ror	r30
    1b7c:	9f 5f       	subi	r25, 0xFF	; 255
    1b7e:	c1 f7       	brne	.-16     	; 0x1b70 <__mulsf3_pse+0x8c>
    1b80:	fe 2b       	or	r31, r30
    1b82:	88 0f       	add	r24, r24
    1b84:	91 1d       	adc	r25, r1
    1b86:	96 95       	lsr	r25
    1b88:	87 95       	ror	r24
    1b8a:	97 f9       	bld	r25, 7
    1b8c:	08 95       	ret

00001b8e <__divmodhi4>:
    1b8e:	97 fb       	bst	r25, 7
    1b90:	07 2e       	mov	r0, r23
    1b92:	16 f4       	brtc	.+4      	; 0x1b98 <__divmodhi4+0xa>
    1b94:	00 94       	com	r0
    1b96:	06 d0       	rcall	.+12     	; 0x1ba4 <__divmodhi4_neg1>
    1b98:	77 fd       	sbrc	r23, 7
    1b9a:	08 d0       	rcall	.+16     	; 0x1bac <__divmodhi4_neg2>
    1b9c:	27 d0       	rcall	.+78     	; 0x1bec <__udivmodhi4>
    1b9e:	07 fc       	sbrc	r0, 7
    1ba0:	05 d0       	rcall	.+10     	; 0x1bac <__divmodhi4_neg2>
    1ba2:	3e f4       	brtc	.+14     	; 0x1bb2 <__divmodhi4_exit>

00001ba4 <__divmodhi4_neg1>:
    1ba4:	90 95       	com	r25
    1ba6:	81 95       	neg	r24
    1ba8:	9f 4f       	sbci	r25, 0xFF	; 255
    1baa:	08 95       	ret

00001bac <__divmodhi4_neg2>:
    1bac:	70 95       	com	r23
    1bae:	61 95       	neg	r22
    1bb0:	7f 4f       	sbci	r23, 0xFF	; 255

00001bb2 <__divmodhi4_exit>:
    1bb2:	08 95       	ret

00001bb4 <__divmodsi4>:
    1bb4:	05 2e       	mov	r0, r21
    1bb6:	97 fb       	bst	r25, 7
    1bb8:	16 f4       	brtc	.+4      	; 0x1bbe <__divmodsi4+0xa>
    1bba:	00 94       	com	r0
    1bbc:	0f d0       	rcall	.+30     	; 0x1bdc <__negsi2>
    1bbe:	57 fd       	sbrc	r21, 7
    1bc0:	05 d0       	rcall	.+10     	; 0x1bcc <__divmodsi4_neg2>
    1bc2:	28 d0       	rcall	.+80     	; 0x1c14 <__udivmodsi4>
    1bc4:	07 fc       	sbrc	r0, 7
    1bc6:	02 d0       	rcall	.+4      	; 0x1bcc <__divmodsi4_neg2>
    1bc8:	46 f4       	brtc	.+16     	; 0x1bda <__divmodsi4_exit>
    1bca:	08 c0       	rjmp	.+16     	; 0x1bdc <__negsi2>

00001bcc <__divmodsi4_neg2>:
    1bcc:	50 95       	com	r21
    1bce:	40 95       	com	r20
    1bd0:	30 95       	com	r19
    1bd2:	21 95       	neg	r18
    1bd4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bd6:	4f 4f       	sbci	r20, 0xFF	; 255
    1bd8:	5f 4f       	sbci	r21, 0xFF	; 255

00001bda <__divmodsi4_exit>:
    1bda:	08 95       	ret

00001bdc <__negsi2>:
    1bdc:	90 95       	com	r25
    1bde:	80 95       	com	r24
    1be0:	70 95       	com	r23
    1be2:	61 95       	neg	r22
    1be4:	7f 4f       	sbci	r23, 0xFF	; 255
    1be6:	8f 4f       	sbci	r24, 0xFF	; 255
    1be8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bea:	08 95       	ret

00001bec <__udivmodhi4>:
    1bec:	aa 1b       	sub	r26, r26
    1bee:	bb 1b       	sub	r27, r27
    1bf0:	51 e1       	ldi	r21, 0x11	; 17
    1bf2:	07 c0       	rjmp	.+14     	; 0x1c02 <__udivmodhi4_ep>

00001bf4 <__udivmodhi4_loop>:
    1bf4:	aa 1f       	adc	r26, r26
    1bf6:	bb 1f       	adc	r27, r27
    1bf8:	a6 17       	cp	r26, r22
    1bfa:	b7 07       	cpc	r27, r23
    1bfc:	10 f0       	brcs	.+4      	; 0x1c02 <__udivmodhi4_ep>
    1bfe:	a6 1b       	sub	r26, r22
    1c00:	b7 0b       	sbc	r27, r23

00001c02 <__udivmodhi4_ep>:
    1c02:	88 1f       	adc	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	5a 95       	dec	r21
    1c08:	a9 f7       	brne	.-22     	; 0x1bf4 <__udivmodhi4_loop>
    1c0a:	80 95       	com	r24
    1c0c:	90 95       	com	r25
    1c0e:	bc 01       	movw	r22, r24
    1c10:	cd 01       	movw	r24, r26
    1c12:	08 95       	ret

00001c14 <__udivmodsi4>:
    1c14:	a1 e2       	ldi	r26, 0x21	; 33
    1c16:	1a 2e       	mov	r1, r26
    1c18:	aa 1b       	sub	r26, r26
    1c1a:	bb 1b       	sub	r27, r27
    1c1c:	fd 01       	movw	r30, r26
    1c1e:	0d c0       	rjmp	.+26     	; 0x1c3a <__udivmodsi4_ep>

00001c20 <__udivmodsi4_loop>:
    1c20:	aa 1f       	adc	r26, r26
    1c22:	bb 1f       	adc	r27, r27
    1c24:	ee 1f       	adc	r30, r30
    1c26:	ff 1f       	adc	r31, r31
    1c28:	a2 17       	cp	r26, r18
    1c2a:	b3 07       	cpc	r27, r19
    1c2c:	e4 07       	cpc	r30, r20
    1c2e:	f5 07       	cpc	r31, r21
    1c30:	20 f0       	brcs	.+8      	; 0x1c3a <__udivmodsi4_ep>
    1c32:	a2 1b       	sub	r26, r18
    1c34:	b3 0b       	sbc	r27, r19
    1c36:	e4 0b       	sbc	r30, r20
    1c38:	f5 0b       	sbc	r31, r21

00001c3a <__udivmodsi4_ep>:
    1c3a:	66 1f       	adc	r22, r22
    1c3c:	77 1f       	adc	r23, r23
    1c3e:	88 1f       	adc	r24, r24
    1c40:	99 1f       	adc	r25, r25
    1c42:	1a 94       	dec	r1
    1c44:	69 f7       	brne	.-38     	; 0x1c20 <__udivmodsi4_loop>
    1c46:	60 95       	com	r22
    1c48:	70 95       	com	r23
    1c4a:	80 95       	com	r24
    1c4c:	90 95       	com	r25
    1c4e:	9b 01       	movw	r18, r22
    1c50:	ac 01       	movw	r20, r24
    1c52:	bd 01       	movw	r22, r26
    1c54:	cf 01       	movw	r24, r30
    1c56:	08 95       	ret

00001c58 <strcpy_P>:
    1c58:	fb 01       	movw	r30, r22
    1c5a:	dc 01       	movw	r26, r24
    1c5c:	05 90       	lpm	r0, Z+
    1c5e:	0d 92       	st	X+, r0
    1c60:	00 20       	and	r0, r0
    1c62:	e1 f7       	brne	.-8      	; 0x1c5c <strcpy_P+0x4>
    1c64:	08 95       	ret

00001c66 <fdevopen>:
    1c66:	0f 93       	push	r16
    1c68:	1f 93       	push	r17
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	ec 01       	movw	r28, r24
    1c70:	8b 01       	movw	r16, r22
    1c72:	00 97       	sbiw	r24, 0x00	; 0
    1c74:	31 f4       	brne	.+12     	; 0x1c82 <fdevopen+0x1c>
    1c76:	61 15       	cp	r22, r1
    1c78:	71 05       	cpc	r23, r1
    1c7a:	19 f4       	brne	.+6      	; 0x1c82 <fdevopen+0x1c>
    1c7c:	80 e0       	ldi	r24, 0x00	; 0
    1c7e:	90 e0       	ldi	r25, 0x00	; 0
    1c80:	37 c0       	rjmp	.+110    	; 0x1cf0 <fdevopen+0x8a>
    1c82:	6e e0       	ldi	r22, 0x0E	; 14
    1c84:	70 e0       	ldi	r23, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	37 d0       	rcall	.+110    	; 0x1cfa <calloc>
    1c8c:	fc 01       	movw	r30, r24
    1c8e:	00 97       	sbiw	r24, 0x00	; 0
    1c90:	a9 f3       	breq	.-22     	; 0x1c7c <fdevopen+0x16>
    1c92:	80 e8       	ldi	r24, 0x80	; 128
    1c94:	83 83       	std	Z+3, r24	; 0x03
    1c96:	01 15       	cp	r16, r1
    1c98:	11 05       	cpc	r17, r1
    1c9a:	71 f0       	breq	.+28     	; 0x1cb8 <fdevopen+0x52>
    1c9c:	13 87       	std	Z+11, r17	; 0x0b
    1c9e:	02 87       	std	Z+10, r16	; 0x0a
    1ca0:	81 e8       	ldi	r24, 0x81	; 129
    1ca2:	83 83       	std	Z+3, r24	; 0x03
    1ca4:	80 91 99 01 	lds	r24, 0x0199
    1ca8:	90 91 9a 01 	lds	r25, 0x019A
    1cac:	89 2b       	or	r24, r25
    1cae:	21 f4       	brne	.+8      	; 0x1cb8 <fdevopen+0x52>
    1cb0:	f0 93 9a 01 	sts	0x019A, r31
    1cb4:	e0 93 99 01 	sts	0x0199, r30
    1cb8:	20 97       	sbiw	r28, 0x00	; 0
    1cba:	c9 f0       	breq	.+50     	; 0x1cee <fdevopen+0x88>
    1cbc:	d1 87       	std	Z+9, r29	; 0x09
    1cbe:	c0 87       	std	Z+8, r28	; 0x08
    1cc0:	83 81       	ldd	r24, Z+3	; 0x03
    1cc2:	82 60       	ori	r24, 0x02	; 2
    1cc4:	83 83       	std	Z+3, r24	; 0x03
    1cc6:	80 91 9b 01 	lds	r24, 0x019B
    1cca:	90 91 9c 01 	lds	r25, 0x019C
    1cce:	89 2b       	or	r24, r25
    1cd0:	71 f4       	brne	.+28     	; 0x1cee <fdevopen+0x88>
    1cd2:	f0 93 9c 01 	sts	0x019C, r31
    1cd6:	e0 93 9b 01 	sts	0x019B, r30
    1cda:	80 91 9d 01 	lds	r24, 0x019D
    1cde:	90 91 9e 01 	lds	r25, 0x019E
    1ce2:	89 2b       	or	r24, r25
    1ce4:	21 f4       	brne	.+8      	; 0x1cee <fdevopen+0x88>
    1ce6:	f0 93 9e 01 	sts	0x019E, r31
    1cea:	e0 93 9d 01 	sts	0x019D, r30
    1cee:	cf 01       	movw	r24, r30
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	08 95       	ret

00001cfa <calloc>:
    1cfa:	0f 93       	push	r16
    1cfc:	1f 93       	push	r17
    1cfe:	cf 93       	push	r28
    1d00:	df 93       	push	r29
    1d02:	86 9f       	mul	r24, r22
    1d04:	80 01       	movw	r16, r0
    1d06:	87 9f       	mul	r24, r23
    1d08:	10 0d       	add	r17, r0
    1d0a:	96 9f       	mul	r25, r22
    1d0c:	10 0d       	add	r17, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	c8 01       	movw	r24, r16
    1d12:	0d d0       	rcall	.+26     	; 0x1d2e <malloc>
    1d14:	ec 01       	movw	r28, r24
    1d16:	00 97       	sbiw	r24, 0x00	; 0
    1d18:	21 f0       	breq	.+8      	; 0x1d22 <calloc+0x28>
    1d1a:	a8 01       	movw	r20, r16
    1d1c:	60 e0       	ldi	r22, 0x00	; 0
    1d1e:	70 e0       	ldi	r23, 0x00	; 0
    1d20:	2d d1       	rcall	.+602    	; 0x1f7c <memset>
    1d22:	ce 01       	movw	r24, r28
    1d24:	df 91       	pop	r29
    1d26:	cf 91       	pop	r28
    1d28:	1f 91       	pop	r17
    1d2a:	0f 91       	pop	r16
    1d2c:	08 95       	ret

00001d2e <malloc>:
    1d2e:	cf 93       	push	r28
    1d30:	df 93       	push	r29
    1d32:	82 30       	cpi	r24, 0x02	; 2
    1d34:	91 05       	cpc	r25, r1
    1d36:	10 f4       	brcc	.+4      	; 0x1d3c <malloc+0xe>
    1d38:	82 e0       	ldi	r24, 0x02	; 2
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	e0 91 a1 01 	lds	r30, 0x01A1
    1d40:	f0 91 a2 01 	lds	r31, 0x01A2
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	a0 e0       	ldi	r26, 0x00	; 0
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	30 97       	sbiw	r30, 0x00	; 0
    1d4e:	39 f1       	breq	.+78     	; 0x1d9e <malloc+0x70>
    1d50:	40 81       	ld	r20, Z
    1d52:	51 81       	ldd	r21, Z+1	; 0x01
    1d54:	48 17       	cp	r20, r24
    1d56:	59 07       	cpc	r21, r25
    1d58:	b8 f0       	brcs	.+46     	; 0x1d88 <malloc+0x5a>
    1d5a:	48 17       	cp	r20, r24
    1d5c:	59 07       	cpc	r21, r25
    1d5e:	71 f4       	brne	.+28     	; 0x1d7c <malloc+0x4e>
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	93 81       	ldd	r25, Z+3	; 0x03
    1d64:	10 97       	sbiw	r26, 0x00	; 0
    1d66:	29 f0       	breq	.+10     	; 0x1d72 <malloc+0x44>
    1d68:	13 96       	adiw	r26, 0x03	; 3
    1d6a:	9c 93       	st	X, r25
    1d6c:	8e 93       	st	-X, r24
    1d6e:	12 97       	sbiw	r26, 0x02	; 2
    1d70:	2c c0       	rjmp	.+88     	; 0x1dca <malloc+0x9c>
    1d72:	90 93 a2 01 	sts	0x01A2, r25
    1d76:	80 93 a1 01 	sts	0x01A1, r24
    1d7a:	27 c0       	rjmp	.+78     	; 0x1dca <malloc+0x9c>
    1d7c:	21 15       	cp	r18, r1
    1d7e:	31 05       	cpc	r19, r1
    1d80:	31 f0       	breq	.+12     	; 0x1d8e <malloc+0x60>
    1d82:	42 17       	cp	r20, r18
    1d84:	53 07       	cpc	r21, r19
    1d86:	18 f0       	brcs	.+6      	; 0x1d8e <malloc+0x60>
    1d88:	a9 01       	movw	r20, r18
    1d8a:	db 01       	movw	r26, r22
    1d8c:	01 c0       	rjmp	.+2      	; 0x1d90 <malloc+0x62>
    1d8e:	ef 01       	movw	r28, r30
    1d90:	9a 01       	movw	r18, r20
    1d92:	bd 01       	movw	r22, r26
    1d94:	df 01       	movw	r26, r30
    1d96:	02 80       	ldd	r0, Z+2	; 0x02
    1d98:	f3 81       	ldd	r31, Z+3	; 0x03
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	d7 cf       	rjmp	.-82     	; 0x1d4c <malloc+0x1e>
    1d9e:	21 15       	cp	r18, r1
    1da0:	31 05       	cpc	r19, r1
    1da2:	f9 f0       	breq	.+62     	; 0x1de2 <malloc+0xb4>
    1da4:	28 1b       	sub	r18, r24
    1da6:	39 0b       	sbc	r19, r25
    1da8:	24 30       	cpi	r18, 0x04	; 4
    1daa:	31 05       	cpc	r19, r1
    1dac:	80 f4       	brcc	.+32     	; 0x1dce <malloc+0xa0>
    1dae:	8a 81       	ldd	r24, Y+2	; 0x02
    1db0:	9b 81       	ldd	r25, Y+3	; 0x03
    1db2:	61 15       	cp	r22, r1
    1db4:	71 05       	cpc	r23, r1
    1db6:	21 f0       	breq	.+8      	; 0x1dc0 <malloc+0x92>
    1db8:	fb 01       	movw	r30, r22
    1dba:	93 83       	std	Z+3, r25	; 0x03
    1dbc:	82 83       	std	Z+2, r24	; 0x02
    1dbe:	04 c0       	rjmp	.+8      	; 0x1dc8 <malloc+0x9a>
    1dc0:	90 93 a2 01 	sts	0x01A2, r25
    1dc4:	80 93 a1 01 	sts	0x01A1, r24
    1dc8:	fe 01       	movw	r30, r28
    1dca:	32 96       	adiw	r30, 0x02	; 2
    1dcc:	44 c0       	rjmp	.+136    	; 0x1e56 <malloc+0x128>
    1dce:	fe 01       	movw	r30, r28
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	81 93       	st	Z+, r24
    1dd6:	91 93       	st	Z+, r25
    1dd8:	22 50       	subi	r18, 0x02	; 2
    1dda:	31 09       	sbc	r19, r1
    1ddc:	39 83       	std	Y+1, r19	; 0x01
    1dde:	28 83       	st	Y, r18
    1de0:	3a c0       	rjmp	.+116    	; 0x1e56 <malloc+0x128>
    1de2:	20 91 9f 01 	lds	r18, 0x019F
    1de6:	30 91 a0 01 	lds	r19, 0x01A0
    1dea:	23 2b       	or	r18, r19
    1dec:	41 f4       	brne	.+16     	; 0x1dfe <malloc+0xd0>
    1dee:	20 91 02 01 	lds	r18, 0x0102
    1df2:	30 91 03 01 	lds	r19, 0x0103
    1df6:	30 93 a0 01 	sts	0x01A0, r19
    1dfa:	20 93 9f 01 	sts	0x019F, r18
    1dfe:	20 91 00 01 	lds	r18, 0x0100
    1e02:	30 91 01 01 	lds	r19, 0x0101
    1e06:	21 15       	cp	r18, r1
    1e08:	31 05       	cpc	r19, r1
    1e0a:	41 f4       	brne	.+16     	; 0x1e1c <malloc+0xee>
    1e0c:	2d b7       	in	r18, 0x3d	; 61
    1e0e:	3e b7       	in	r19, 0x3e	; 62
    1e10:	40 91 04 01 	lds	r20, 0x0104
    1e14:	50 91 05 01 	lds	r21, 0x0105
    1e18:	24 1b       	sub	r18, r20
    1e1a:	35 0b       	sbc	r19, r21
    1e1c:	e0 91 9f 01 	lds	r30, 0x019F
    1e20:	f0 91 a0 01 	lds	r31, 0x01A0
    1e24:	e2 17       	cp	r30, r18
    1e26:	f3 07       	cpc	r31, r19
    1e28:	a0 f4       	brcc	.+40     	; 0x1e52 <malloc+0x124>
    1e2a:	2e 1b       	sub	r18, r30
    1e2c:	3f 0b       	sbc	r19, r31
    1e2e:	28 17       	cp	r18, r24
    1e30:	39 07       	cpc	r19, r25
    1e32:	78 f0       	brcs	.+30     	; 0x1e52 <malloc+0x124>
    1e34:	ac 01       	movw	r20, r24
    1e36:	4e 5f       	subi	r20, 0xFE	; 254
    1e38:	5f 4f       	sbci	r21, 0xFF	; 255
    1e3a:	24 17       	cp	r18, r20
    1e3c:	35 07       	cpc	r19, r21
    1e3e:	48 f0       	brcs	.+18     	; 0x1e52 <malloc+0x124>
    1e40:	4e 0f       	add	r20, r30
    1e42:	5f 1f       	adc	r21, r31
    1e44:	50 93 a0 01 	sts	0x01A0, r21
    1e48:	40 93 9f 01 	sts	0x019F, r20
    1e4c:	81 93       	st	Z+, r24
    1e4e:	91 93       	st	Z+, r25
    1e50:	02 c0       	rjmp	.+4      	; 0x1e56 <malloc+0x128>
    1e52:	e0 e0       	ldi	r30, 0x00	; 0
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	cf 01       	movw	r24, r30
    1e58:	df 91       	pop	r29
    1e5a:	cf 91       	pop	r28
    1e5c:	08 95       	ret

00001e5e <free>:
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <free+0xa>
    1e66:	87 c0       	rjmp	.+270    	; 0x1f76 <free+0x118>
    1e68:	fc 01       	movw	r30, r24
    1e6a:	32 97       	sbiw	r30, 0x02	; 2
    1e6c:	13 82       	std	Z+3, r1	; 0x03
    1e6e:	12 82       	std	Z+2, r1	; 0x02
    1e70:	c0 91 a1 01 	lds	r28, 0x01A1
    1e74:	d0 91 a2 01 	lds	r29, 0x01A2
    1e78:	20 97       	sbiw	r28, 0x00	; 0
    1e7a:	81 f4       	brne	.+32     	; 0x1e9c <free+0x3e>
    1e7c:	20 81       	ld	r18, Z
    1e7e:	31 81       	ldd	r19, Z+1	; 0x01
    1e80:	28 0f       	add	r18, r24
    1e82:	39 1f       	adc	r19, r25
    1e84:	80 91 9f 01 	lds	r24, 0x019F
    1e88:	90 91 a0 01 	lds	r25, 0x01A0
    1e8c:	82 17       	cp	r24, r18
    1e8e:	93 07       	cpc	r25, r19
    1e90:	79 f5       	brne	.+94     	; 0x1ef0 <free+0x92>
    1e92:	f0 93 a0 01 	sts	0x01A0, r31
    1e96:	e0 93 9f 01 	sts	0x019F, r30
    1e9a:	6d c0       	rjmp	.+218    	; 0x1f76 <free+0x118>
    1e9c:	de 01       	movw	r26, r28
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	ae 17       	cp	r26, r30
    1ea4:	bf 07       	cpc	r27, r31
    1ea6:	50 f4       	brcc	.+20     	; 0x1ebc <free+0x5e>
    1ea8:	12 96       	adiw	r26, 0x02	; 2
    1eaa:	4d 91       	ld	r20, X+
    1eac:	5c 91       	ld	r21, X
    1eae:	13 97       	sbiw	r26, 0x03	; 3
    1eb0:	9d 01       	movw	r18, r26
    1eb2:	41 15       	cp	r20, r1
    1eb4:	51 05       	cpc	r21, r1
    1eb6:	09 f1       	breq	.+66     	; 0x1efa <free+0x9c>
    1eb8:	da 01       	movw	r26, r20
    1eba:	f3 cf       	rjmp	.-26     	; 0x1ea2 <free+0x44>
    1ebc:	b3 83       	std	Z+3, r27	; 0x03
    1ebe:	a2 83       	std	Z+2, r26	; 0x02
    1ec0:	40 81       	ld	r20, Z
    1ec2:	51 81       	ldd	r21, Z+1	; 0x01
    1ec4:	84 0f       	add	r24, r20
    1ec6:	95 1f       	adc	r25, r21
    1ec8:	8a 17       	cp	r24, r26
    1eca:	9b 07       	cpc	r25, r27
    1ecc:	71 f4       	brne	.+28     	; 0x1eea <free+0x8c>
    1ece:	8d 91       	ld	r24, X+
    1ed0:	9c 91       	ld	r25, X
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	84 0f       	add	r24, r20
    1ed6:	95 1f       	adc	r25, r21
    1ed8:	02 96       	adiw	r24, 0x02	; 2
    1eda:	91 83       	std	Z+1, r25	; 0x01
    1edc:	80 83       	st	Z, r24
    1ede:	12 96       	adiw	r26, 0x02	; 2
    1ee0:	8d 91       	ld	r24, X+
    1ee2:	9c 91       	ld	r25, X
    1ee4:	13 97       	sbiw	r26, 0x03	; 3
    1ee6:	93 83       	std	Z+3, r25	; 0x03
    1ee8:	82 83       	std	Z+2, r24	; 0x02
    1eea:	21 15       	cp	r18, r1
    1eec:	31 05       	cpc	r19, r1
    1eee:	29 f4       	brne	.+10     	; 0x1efa <free+0x9c>
    1ef0:	f0 93 a2 01 	sts	0x01A2, r31
    1ef4:	e0 93 a1 01 	sts	0x01A1, r30
    1ef8:	3e c0       	rjmp	.+124    	; 0x1f76 <free+0x118>
    1efa:	d9 01       	movw	r26, r18
    1efc:	13 96       	adiw	r26, 0x03	; 3
    1efe:	fc 93       	st	X, r31
    1f00:	ee 93       	st	-X, r30
    1f02:	12 97       	sbiw	r26, 0x02	; 2
    1f04:	4d 91       	ld	r20, X+
    1f06:	5d 91       	ld	r21, X+
    1f08:	a4 0f       	add	r26, r20
    1f0a:	b5 1f       	adc	r27, r21
    1f0c:	ea 17       	cp	r30, r26
    1f0e:	fb 07       	cpc	r31, r27
    1f10:	79 f4       	brne	.+30     	; 0x1f30 <free+0xd2>
    1f12:	80 81       	ld	r24, Z
    1f14:	91 81       	ldd	r25, Z+1	; 0x01
    1f16:	84 0f       	add	r24, r20
    1f18:	95 1f       	adc	r25, r21
    1f1a:	02 96       	adiw	r24, 0x02	; 2
    1f1c:	d9 01       	movw	r26, r18
    1f1e:	11 96       	adiw	r26, 0x01	; 1
    1f20:	9c 93       	st	X, r25
    1f22:	8e 93       	st	-X, r24
    1f24:	82 81       	ldd	r24, Z+2	; 0x02
    1f26:	93 81       	ldd	r25, Z+3	; 0x03
    1f28:	13 96       	adiw	r26, 0x03	; 3
    1f2a:	9c 93       	st	X, r25
    1f2c:	8e 93       	st	-X, r24
    1f2e:	12 97       	sbiw	r26, 0x02	; 2
    1f30:	e0 e0       	ldi	r30, 0x00	; 0
    1f32:	f0 e0       	ldi	r31, 0x00	; 0
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	9b 81       	ldd	r25, Y+3	; 0x03
    1f38:	00 97       	sbiw	r24, 0x00	; 0
    1f3a:	19 f0       	breq	.+6      	; 0x1f42 <free+0xe4>
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ec 01       	movw	r28, r24
    1f40:	f9 cf       	rjmp	.-14     	; 0x1f34 <free+0xd6>
    1f42:	ce 01       	movw	r24, r28
    1f44:	02 96       	adiw	r24, 0x02	; 2
    1f46:	28 81       	ld	r18, Y
    1f48:	39 81       	ldd	r19, Y+1	; 0x01
    1f4a:	82 0f       	add	r24, r18
    1f4c:	93 1f       	adc	r25, r19
    1f4e:	20 91 9f 01 	lds	r18, 0x019F
    1f52:	30 91 a0 01 	lds	r19, 0x01A0
    1f56:	28 17       	cp	r18, r24
    1f58:	39 07       	cpc	r19, r25
    1f5a:	69 f4       	brne	.+26     	; 0x1f76 <free+0x118>
    1f5c:	30 97       	sbiw	r30, 0x00	; 0
    1f5e:	29 f4       	brne	.+10     	; 0x1f6a <free+0x10c>
    1f60:	10 92 a2 01 	sts	0x01A2, r1
    1f64:	10 92 a1 01 	sts	0x01A1, r1
    1f68:	02 c0       	rjmp	.+4      	; 0x1f6e <free+0x110>
    1f6a:	13 82       	std	Z+3, r1	; 0x03
    1f6c:	12 82       	std	Z+2, r1	; 0x02
    1f6e:	d0 93 a0 01 	sts	0x01A0, r29
    1f72:	c0 93 9f 01 	sts	0x019F, r28
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <memset>:
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	01 c0       	rjmp	.+2      	; 0x1f82 <memset+0x6>
    1f80:	6d 93       	st	X+, r22
    1f82:	41 50       	subi	r20, 0x01	; 1
    1f84:	50 40       	sbci	r21, 0x00	; 0
    1f86:	e0 f7       	brcc	.-8      	; 0x1f80 <memset+0x4>
    1f88:	08 95       	ret

00001f8a <_exit>:
    1f8a:	f8 94       	cli

00001f8c <__stop_program>:
    1f8c:	ff cf       	rjmp	.-2      	; 0x1f8c <__stop_program>
