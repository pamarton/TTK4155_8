
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000194  00800100  00002f8e  00003022  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002f8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  00800294  00800294  000031b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000031b6  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000470  00000000  00000000  00003212  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004ae0  00000000  00000000  00003682  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000141c  00000000  00000000  00008162  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025b1  00000000  00000000  0000957e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d0c  00000000  00000000  0000bb30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f81  00000000  00000000  0000c83c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003a8f  00000000  00000000  0000d7bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000490  00000000  00000000  0001124c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	18 c2       	rjmp	.+1072   	; 0x432 <__ctors_end>
       2:	00 00       	nop
       4:	ae c3       	rjmp	.+1884   	; 0x762 <__vector_1>
       6:	00 00       	nop
       8:	bb c3       	rjmp	.+1910   	; 0x780 <__vector_2>
       a:	00 00       	nop
       c:	41 c2       	rjmp	.+1154   	; 0x490 <__vector_3>
       e:	00 00       	nop
      10:	2d c2       	rjmp	.+1114   	; 0x46c <__bad_interrupt>
      12:	00 00       	nop
      14:	2b c2       	rjmp	.+1110   	; 0x46c <__bad_interrupt>
      16:	00 00       	nop
      18:	29 c2       	rjmp	.+1106   	; 0x46c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	27 c2       	rjmp	.+1102   	; 0x46c <__bad_interrupt>
      1e:	00 00       	nop
      20:	25 c2       	rjmp	.+1098   	; 0x46c <__bad_interrupt>
      22:	00 00       	nop
      24:	23 c2       	rjmp	.+1094   	; 0x46c <__bad_interrupt>
      26:	00 00       	nop
      28:	21 c2       	rjmp	.+1090   	; 0x46c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1f c2       	rjmp	.+1086   	; 0x46c <__bad_interrupt>
      2e:	00 00       	nop
      30:	1d c2       	rjmp	.+1082   	; 0x46c <__bad_interrupt>
      32:	00 00       	nop
      34:	1b c2       	rjmp	.+1078   	; 0x46c <__bad_interrupt>
      36:	00 00       	nop
      38:	19 c2       	rjmp	.+1074   	; 0x46c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	17 c2       	rjmp	.+1070   	; 0x46c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_16>
      44:	13 c2       	rjmp	.+1062   	; 0x46c <__bad_interrupt>
      46:	00 00       	nop
      48:	11 c2       	rjmp	.+1058   	; 0x46c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0f c2       	rjmp	.+1054   	; 0x46c <__bad_interrupt>
      4e:	00 00       	nop
      50:	0d c2       	rjmp	.+1050   	; 0x46c <__bad_interrupt>
      52:	00 00       	nop
      54:	0b c2       	rjmp	.+1046   	; 0x46c <__bad_interrupt>
      56:	00 00       	nop
      58:	09 c2       	rjmp	.+1042   	; 0x46c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	07 c2       	rjmp	.+1038   	; 0x46c <__bad_interrupt>
      5e:	00 00       	nop
      60:	05 c2       	rjmp	.+1034   	; 0x46c <__bad_interrupt>
      62:	00 00       	nop
      64:	03 c2       	rjmp	.+1030   	; 0x46c <__bad_interrupt>
      66:	00 00       	nop
      68:	01 c2       	rjmp	.+1026   	; 0x46c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ff c1       	rjmp	.+1022   	; 0x46c <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_options>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_debug>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_start>:
      ea:	53 74 61 72 74 00                                   Start.

000000f0 <game_entry_1>:
      f0:	32 30 34 38 00                                      2048.

000000f5 <game_entry_0>:
      f5:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

00000102 <mainmenu_entry_games>:
     102:	47 61 6d 65 73 00                                   Games.

00000108 <mainmenu_entry_highscore>:
     108:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

00000112 <font>:
	...
     11a:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     12a:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     13a:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     14a:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     15a:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     16a:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     17a:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     18a:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     19a:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     1aa:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     1ba:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ca:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1da:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1ea:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1fa:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     20a:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     21a:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     22a:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     23a:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     24a:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     25a:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     26a:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     27a:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     28a:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     29a:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     2aa:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     2ba:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ca:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2da:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2ea:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2fa:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     30a:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     31a:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     32a:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     33a:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     34a:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     35a:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     36a:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     37a:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     38a:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     39a:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     3aa:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     3ba:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ca:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3da:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3ea:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3fa:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     40a:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     41a:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     42a:	01 01 01 01 01 01 01 ff                             ........

00000432 <__ctors_end>:
     432:	11 24       	eor	r1, r1
     434:	1f be       	out	0x3f, r1	; 63
     436:	cf ef       	ldi	r28, 0xFF	; 255
     438:	d4 e0       	ldi	r29, 0x04	; 4
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	cd bf       	out	0x3d, r28	; 61

0000043e <__do_copy_data>:
     43e:	12 e0       	ldi	r17, 0x02	; 2
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	ee e8       	ldi	r30, 0x8E	; 142
     446:	ff e2       	ldi	r31, 0x2F	; 47
     448:	02 c0       	rjmp	.+4      	; 0x44e <__do_copy_data+0x10>
     44a:	05 90       	lpm	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	a4 39       	cpi	r26, 0x94	; 148
     450:	b1 07       	cpc	r27, r17
     452:	d9 f7       	brne	.-10     	; 0x44a <__do_copy_data+0xc>

00000454 <__do_clear_bss>:
     454:	23 e0       	ldi	r18, 0x03	; 3
     456:	a4 e9       	ldi	r26, 0x94	; 148
     458:	b2 e0       	ldi	r27, 0x02	; 2
     45a:	01 c0       	rjmp	.+2      	; 0x45e <.do_clear_bss_start>

0000045c <.do_clear_bss_loop>:
     45c:	1d 92       	st	X+, r1

0000045e <.do_clear_bss_start>:
     45e:	a1 36       	cpi	r26, 0x61	; 97
     460:	b2 07       	cpc	r27, r18
     462:	e1 f7       	brne	.-8      	; 0x45c <.do_clear_bss_loop>
     464:	0e 94 1a 0b 	call	0x1634	; 0x1634 <main>
     468:	0c 94 c5 17 	jmp	0x2f8a	; 0x2f8a <_exit>

0000046c <__bad_interrupt>:
     46c:	c9 cd       	rjmp	.-1134   	; 0x0 <__vectors>

0000046e <CAN_construct_message>:
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
}
     46e:	90 93 96 02 	sts	0x0296, r25
     472:	80 93 95 02 	sts	0x0295, r24
     476:	60 93 97 02 	sts	0x0297, r22
     47a:	66 23       	and	r22, r22
     47c:	41 f0       	breq	.+16     	; 0x48e <CAN_construct_message+0x20>
     47e:	88 e9       	ldi	r24, 0x98	; 152
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	fc 01       	movw	r30, r24
     484:	11 92       	st	Z+, r1
     486:	2e 2f       	mov	r18, r30
     488:	28 1b       	sub	r18, r24
     48a:	26 17       	cp	r18, r22
     48c:	d8 f3       	brcs	.-10     	; 0x484 <CAN_construct_message+0x16>
     48e:	08 95       	ret

00000490 <__vector_3>:
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	8f 93       	push	r24
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 94 02 	sts	0x0294, r24
     4a2:	8f 91       	pop	r24
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <CAN_interrupt_setup>:
     4ae:	f8 94       	cli
     4b0:	86 b7       	in	r24, 0x36	; 54
     4b2:	8e 7f       	andi	r24, 0xFE	; 254
     4b4:	86 bf       	out	0x36, r24	; 54
     4b6:	8b b7       	in	r24, 0x3b	; 59
     4b8:	80 62       	ori	r24, 0x20	; 32
     4ba:	8b bf       	out	0x3b, r24	; 59
     4bc:	78 94       	sei
     4be:	08 95       	ret

000004c0 <CAN_initialize>:
     4c0:	d0 d0       	rcall	.+416    	; 0x662 <MCP2515_initialize>
     4c2:	68 e0       	ldi	r22, 0x08	; 8
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	d2 df       	rcall	.-92     	; 0x46e <CAN_construct_message>
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	64 e6       	ldi	r22, 0x64	; 100
     4d0:	80 e6       	ldi	r24, 0x60	; 96
     4d2:	ae d0       	rcall	.+348    	; 0x630 <MCP2515_bit_modify>
     4d4:	4f ef       	ldi	r20, 0xFF	; 255
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	64 e6       	ldi	r22, 0x64	; 100
     4da:	80 e7       	ldi	r24, 0x70	; 112
     4dc:	a9 d0       	rcall	.+338    	; 0x630 <MCP2515_bit_modify>
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	8b e2       	ldi	r24, 0x2B	; 43
     4e6:	a4 d0       	rcall	.+328    	; 0x630 <MCP2515_bit_modify>
     4e8:	40 e0       	ldi	r20, 0x00	; 0
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	60 ee       	ldi	r22, 0xE0	; 224
     4ee:	8f e0       	ldi	r24, 0x0F	; 15
     4f0:	9f d0       	rcall	.+318    	; 0x630 <MCP2515_bit_modify>
     4f2:	dd cf       	rjmp	.-70     	; 0x4ae <CAN_interrupt_setup>
     4f4:	08 95       	ret

000004f6 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     4fa:	c4 e0       	ldi	r28, 0x04	; 4
     4fc:	d0 e0       	ldi	r29, 0x00	; 0
     4fe:	02 c0       	rjmp	.+4      	; 0x504 <__stack+0x5>
     500:	cc 0f       	add	r28, r28
     502:	dd 1f       	adc	r29, r29
     504:	8a 95       	dec	r24
     506:	e2 f7       	brpl	.-8      	; 0x500 <__stack+0x1>
     508:	8c e2       	ldi	r24, 0x2C	; 44
     50a:	74 d0       	rcall	.+232    	; 0x5f4 <MCP2515_read>
     50c:	8c 23       	and	r24, r28
     50e:	9d 23       	and	r25, r29
     510:	89 2b       	or	r24, r25
     512:	d1 f3       	breq	.-12     	; 0x508 <__stack+0x9>
	return 1;
}
     514:	81 e0       	ldi	r24, 0x01	; 1
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	08 95       	ret

0000051c <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     51c:	ff 92       	push	r15
     51e:	0f 93       	push	r16
     520:	1f 93       	push	r17
     522:	cf 93       	push	r28
     524:	df 93       	push	r29
     526:	ec 01       	movw	r28, r24
     528:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     52a:	f6 2e       	mov	r15, r22
     52c:	ff 0c       	add	r15, r15
     52e:	ff 0c       	add	r15, r15
     530:	ff 0c       	add	r15, r15
     532:	ff 0c       	add	r15, r15
     534:	28 81       	ld	r18, Y
     536:	39 81       	ldd	r19, Y+1	; 0x01
     538:	b9 01       	movw	r22, r18
     53a:	75 95       	asr	r23
     53c:	67 95       	ror	r22
     53e:	75 95       	asr	r23
     540:	67 95       	ror	r22
     542:	75 95       	asr	r23
     544:	67 95       	ror	r22
     546:	81 e3       	ldi	r24, 0x31	; 49
     548:	8f 0d       	add	r24, r15
     54a:	45 d0       	rcall	.+138    	; 0x5d6 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     54c:	28 81       	ld	r18, Y
     54e:	39 81       	ldd	r19, Y+1	; 0x01
     550:	b9 01       	movw	r22, r18
     552:	66 0f       	add	r22, r22
     554:	77 1f       	adc	r23, r23
     556:	62 95       	swap	r22
     558:	72 95       	swap	r23
     55a:	70 7f       	andi	r23, 0xF0	; 240
     55c:	76 27       	eor	r23, r22
     55e:	60 7f       	andi	r22, 0xF0	; 240
     560:	76 27       	eor	r23, r22
     562:	82 e3       	ldi	r24, 0x32	; 50
     564:	8f 0d       	add	r24, r15
     566:	37 d0       	rcall	.+110    	; 0x5d6 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     568:	6a 81       	ldd	r22, Y+2	; 0x02
     56a:	6f 70       	andi	r22, 0x0F	; 15
     56c:	70 e0       	ldi	r23, 0x00	; 0
     56e:	85 e3       	ldi	r24, 0x35	; 53
     570:	8f 0d       	add	r24, r15
     572:	31 d0       	rcall	.+98     	; 0x5d6 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	88 23       	and	r24, r24
     578:	89 f0       	breq	.+34     	; 0x59c <CAN_send_byte+0x80>
     57a:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     57c:	86 e3       	ldi	r24, 0x36	; 54
     57e:	f8 0e       	add	r15, r24
     580:	fe 01       	movw	r30, r28
     582:	e1 0f       	add	r30, r17
     584:	f1 1d       	adc	r31, r1
     586:	63 81       	ldd	r22, Z+3	; 0x03
     588:	77 27       	eor	r23, r23
     58a:	67 fd       	sbrc	r22, 7
     58c:	70 95       	com	r23
     58e:	8f 2d       	mov	r24, r15
     590:	81 0f       	add	r24, r17
     592:	21 d0       	rcall	.+66     	; 0x5d6 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     594:	1f 5f       	subi	r17, 0xFF	; 255
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	18 17       	cp	r17, r24
     59a:	90 f3       	brcs	.-28     	; 0x580 <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     59c:	80 2f       	mov	r24, r16
     59e:	38 d0       	rcall	.+112    	; 0x610 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     5a0:	80 2f       	mov	r24, r16
     5a2:	a9 df       	rcall	.-174    	; 0x4f6 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     5a4:	df 91       	pop	r29
     5a6:	cf 91       	pop	r28
     5a8:	1f 91       	pop	r17
     5aa:	0f 91       	pop	r16
     5ac:	ff 90       	pop	r15
     5ae:	08 95       	ret

000005b0 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5b0:	20 91 97 02 	lds	r18, 0x0297
     5b4:	22 23       	and	r18, r18
     5b6:	59 f0       	breq	.+22     	; 0x5ce <CAN_message_send+0x1e>
     5b8:	38 2f       	mov	r19, r24
     5ba:	a8 e9       	ldi	r26, 0x98	; 152
     5bc:	b2 e0       	ldi	r27, 0x02	; 2
     5be:	e8 2f       	mov	r30, r24
     5c0:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     5c2:	81 91       	ld	r24, Z+
     5c4:	8d 93       	st	X+, r24
     5c6:	8e 2f       	mov	r24, r30
     5c8:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5ca:	82 17       	cp	r24, r18
     5cc:	d0 f3       	brcs	.-12     	; 0x5c2 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     5ce:	85 e9       	ldi	r24, 0x95	; 149
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	a4 cf       	rjmp	.-184    	; 0x51c <CAN_send_byte>
     5d4:	08 95       	ret

000005d6 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     5d6:	cf 93       	push	r28
     5d8:	df 93       	push	r29
     5da:	d8 2f       	mov	r29, r24
     5dc:	c6 2f       	mov	r28, r22
     5de:	4e d0       	rcall	.+156    	; 0x67c <SPI_select>
     5e0:	82 e0       	ldi	r24, 0x02	; 2
     5e2:	42 d0       	rcall	.+132    	; 0x668 <SPI_send>
     5e4:	8d 2f       	mov	r24, r29
     5e6:	40 d0       	rcall	.+128    	; 0x668 <SPI_send>
     5e8:	8c 2f       	mov	r24, r28
     5ea:	3e d0       	rcall	.+124    	; 0x668 <SPI_send>
     5ec:	49 d0       	rcall	.+146    	; 0x680 <SPI_deselect>
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	08 95       	ret

000005f4 <MCP2515_read>:
     5f4:	cf 93       	push	r28
     5f6:	c8 2f       	mov	r28, r24
     5f8:	41 d0       	rcall	.+130    	; 0x67c <SPI_select>
     5fa:	83 e0       	ldi	r24, 0x03	; 3
     5fc:	35 d0       	rcall	.+106    	; 0x668 <SPI_send>
     5fe:	8c 2f       	mov	r24, r28
     600:	33 d0       	rcall	.+102    	; 0x668 <SPI_send>
     602:	36 d0       	rcall	.+108    	; 0x670 <SPI_receive>
     604:	c8 2f       	mov	r28, r24
     606:	3c d0       	rcall	.+120    	; 0x680 <SPI_deselect>
     608:	8c 2f       	mov	r24, r28
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <MCP2515_request_to_send>:
     610:	cf 93       	push	r28
     612:	c8 2f       	mov	r28, r24
     614:	33 d0       	rcall	.+102    	; 0x67c <SPI_select>
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	c9 01       	movw	r24, r18
     61c:	02 c0       	rjmp	.+4      	; 0x622 <MCP2515_request_to_send+0x12>
     61e:	88 0f       	add	r24, r24
     620:	99 1f       	adc	r25, r25
     622:	ca 95       	dec	r28
     624:	e2 f7       	brpl	.-8      	; 0x61e <MCP2515_request_to_send+0xe>
     626:	80 68       	ori	r24, 0x80	; 128
     628:	1f d0       	rcall	.+62     	; 0x668 <SPI_send>
     62a:	2a d0       	rcall	.+84     	; 0x680 <SPI_deselect>
     62c:	cf 91       	pop	r28
     62e:	08 95       	ret

00000630 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     630:	1f 93       	push	r17
     632:	cf 93       	push	r28
     634:	df 93       	push	r29
     636:	18 2f       	mov	r17, r24
     638:	d6 2f       	mov	r29, r22
     63a:	c4 2f       	mov	r28, r20
	SPI_select();
     63c:	1f d0       	rcall	.+62     	; 0x67c <SPI_select>
	SPI_send(MCP_BITMOD);
     63e:	85 e0       	ldi	r24, 0x05	; 5
     640:	13 d0       	rcall	.+38     	; 0x668 <SPI_send>
	SPI_send(adr);
     642:	81 2f       	mov	r24, r17
     644:	11 d0       	rcall	.+34     	; 0x668 <SPI_send>
	SPI_send(mask);
     646:	8d 2f       	mov	r24, r29
     648:	0f d0       	rcall	.+30     	; 0x668 <SPI_send>
	SPI_send(data);
     64a:	8c 2f       	mov	r24, r28
     64c:	0d d0       	rcall	.+26     	; 0x668 <SPI_send>
	SPI_deselect();
     64e:	18 d0       	rcall	.+48     	; 0x680 <SPI_deselect>
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	08 95       	ret

00000658 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     658:	11 d0       	rcall	.+34     	; 0x67c <SPI_select>
	SPI_send(MCP_RESET);
     65a:	80 ec       	ldi	r24, 0xC0	; 192
     65c:	05 d0       	rcall	.+10     	; 0x668 <SPI_send>
	SPI_deselect();
     65e:	10 c0       	rjmp	.+32     	; 0x680 <SPI_deselect>
     660:	08 95       	ret

00000662 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     662:	10 d0       	rcall	.+32     	; 0x684 <SPI_initialize>
	MCP2515_reset();
     664:	f9 cf       	rjmp	.-14     	; 0x658 <MCP2515_reset>
     666:	08 95       	ret

00000668 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     668:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <SPI_send+0x2>

}
     66e:	08 95       	ret

00000670 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	fa df       	rcall	.-12     	; 0x668 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     674:	77 9b       	sbis	0x0e, 7	; 14
     676:	fe cf       	rjmp	.-4      	; 0x674 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     678:	8f b1       	in	r24, 0x0f	; 15
}
     67a:	08 95       	ret

0000067c <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     67c:	c4 98       	cbi	0x18, 4	; 24
     67e:	08 95       	ret

00000680 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     680:	c4 9a       	sbi	0x18, 4	; 24
     682:	08 95       	ret

00000684 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     684:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     686:	87 b3       	in	r24, 0x17	; 23
     688:	80 6b       	ori	r24, 0xB0	; 176
     68a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     68c:	8d b1       	in	r24, 0x0d	; 13
     68e:	80 65       	ori	r24, 0x50	; 80
     690:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     692:	f6 cf       	rjmp	.-20     	; 0x680 <SPI_deselect>
     694:	08 95       	ret

00000696 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     696:	5d 9b       	sbis	0x0b, 5	; 11
     698:	fe cf       	rjmp	.-4      	; 0x696 <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     69a:	8c b9       	out	0x0c, r24	; 12
     69c:	08 95       	ret

0000069e <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     69e:	5f 9b       	sbis	0x0b, 7	; 11
     6a0:	fe cf       	rjmp	.-4      	; 0x69e <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     6a2:	8c b1       	in	r24, 0x0c	; 12
}
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	08 95       	ret

000006a8 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     6a8:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     6aa:	8f e1       	ldi	r24, 0x1F	; 31
     6ac:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     6ae:	88 e1       	ldi	r24, 0x18	; 24
     6b0:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     6b2:	6f e4       	ldi	r22, 0x4F	; 79
     6b4:	73 e0       	ldi	r23, 0x03	; 3
     6b6:	8b e4       	ldi	r24, 0x4B	; 75
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <fdevopen>
     6be:	08 95       	ret

000006c0 <readADC>:
     6c0:	82 30       	cpi	r24, 0x02	; 2
     6c2:	91 05       	cpc	r25, r1
     6c4:	71 f0       	breq	.+28     	; 0x6e2 <readADC+0x22>
     6c6:	1c f4       	brge	.+6      	; 0x6ce <readADC+0xe>
     6c8:	01 97       	sbiw	r24, 0x01	; 1
     6ca:	39 f0       	breq	.+14     	; 0x6da <readADC+0x1a>
     6cc:	1c c0       	rjmp	.+56     	; 0x706 <readADC+0x46>
     6ce:	83 30       	cpi	r24, 0x03	; 3
     6d0:	91 05       	cpc	r25, r1
     6d2:	59 f0       	breq	.+22     	; 0x6ea <readADC+0x2a>
     6d4:	04 97       	sbiw	r24, 0x04	; 4
     6d6:	69 f0       	breq	.+26     	; 0x6f2 <readADC+0x32>
     6d8:	16 c0       	rjmp	.+44     	; 0x706 <readADC+0x46>
     6da:	84 e1       	ldi	r24, 0x14	; 20
     6dc:	80 93 00 14 	sts	0x1400, r24
     6e0:	0b c0       	rjmp	.+22     	; 0x6f8 <readADC+0x38>
     6e2:	85 e1       	ldi	r24, 0x15	; 21
     6e4:	80 93 00 14 	sts	0x1400, r24
     6e8:	07 c0       	rjmp	.+14     	; 0x6f8 <readADC+0x38>
     6ea:	86 e1       	ldi	r24, 0x16	; 22
     6ec:	80 93 00 14 	sts	0x1400, r24
     6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <readADC+0x38>
     6f2:	87 e1       	ldi	r24, 0x17	; 23
     6f4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6f8:	82 e5       	ldi	r24, 0x52	; 82
     6fa:	8a 95       	dec	r24
     6fc:	f1 f7       	brne	.-4      	; 0x6fa <readADC+0x3a>
     6fe:	80 91 00 14 	lds	r24, 0x1400
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	08 95       	ret
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	08 95       	ret

0000070c <initalize_interrupts>:
 */ 
#include "button_interrupts.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     70c:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     70e:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     710:	85 b7       	in	r24, 0x35	; 53
     712:	81 60       	ori	r24, 0x01	; 1
     714:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     716:	85 b7       	in	r24, 0x35	; 53
     718:	82 60       	ori	r24, 0x02	; 2
     71a:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     71c:	85 b7       	in	r24, 0x35	; 53
     71e:	84 60       	ori	r24, 0x04	; 4
     720:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     722:	85 b7       	in	r24, 0x35	; 53
     724:	88 60       	ori	r24, 0x08	; 8
     726:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     728:	8b b7       	in	r24, 0x3b	; 59
     72a:	80 64       	ori	r24, 0x40	; 64
     72c:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     72e:	8b b7       	in	r24, 0x3b	; 59
     730:	80 68       	ori	r24, 0x80	; 128
     732:	8b bf       	out	0x3b, r24	; 59
	
	flag_right_button = 0;
     734:	10 92 c6 02 	sts	0x02C6, r1
	flag_left_button = 0;
     738:	10 92 c7 02 	sts	0x02C7, r1
     73c:	08 95       	ret

0000073e <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     73e:	80 91 c7 02 	lds	r24, 0x02C7
     742:	81 30       	cpi	r24, 0x01	; 1
     744:	19 f4       	brne	.+6      	; 0x74c <check_flag_left+0xe>
	{
		flag_left_button = 0;
     746:	10 92 c7 02 	sts	0x02C7, r1
		return 1;
     74a:	08 95       	ret
	}
	return 0;
     74c:	80 e0       	ldi	r24, 0x00	; 0
}
     74e:	08 95       	ret

00000750 <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     750:	80 91 c6 02 	lds	r24, 0x02C6
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	19 f4       	brne	.+6      	; 0x75e <check_flag_right+0xe>
	{
		flag_right_button = 0;
     758:	10 92 c6 02 	sts	0x02C6, r1
		return 1;
     75c:	08 95       	ret
	}
	return 0;
     75e:	80 e0       	ldi	r24, 0x00	; 0
}
     760:	08 95       	ret

00000762 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     76e:	81 e0       	ldi	r24, 0x01	; 1
     770:	80 93 c6 02 	sts	0x02C6, r24
}
     774:	8f 91       	pop	r24
     776:	0f 90       	pop	r0
     778:	0f be       	out	0x3f, r0	; 63
     77a:	0f 90       	pop	r0
     77c:	1f 90       	pop	r1
     77e:	18 95       	reti

00000780 <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 c7 02 	sts	0x02C7, r24
}
     792:	8f 91       	pop	r24
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <flappy_restart>:
	
	flappy_restart();
}

void flappy_restart(void){
	sram_goto_line(7);
     79e:	87 e0       	ldi	r24, 0x07	; 7
     7a0:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <sram_goto_line>
	sram_write_string("BACK        PLAY");
     7a4:	8e e5       	ldi	r24, 0x5E	; 94
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	0e 94 82 0c 	call	0x1904	; 0x1904 <sram_write_string>
	sram_update_oled();
     7ac:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
	quit = 0;
     7b0:	10 92 aa 02 	sts	0x02AA, r1
	while (!(quit | check_flag_right()))
     7b4:	03 c0       	rjmp	.+6      	; 0x7bc <flappy_restart+0x1e>
	{
		quit = check_flag_left();
     7b6:	c3 df       	rcall	.-122    	; 0x73e <check_flag_left>
     7b8:	80 93 aa 02 	sts	0x02AA, r24
void flappy_restart(void){
	sram_goto_line(7);
	sram_write_string("BACK        PLAY");
	sram_update_oled();
	quit = 0;
	while (!(quit | check_flag_right()))
     7bc:	c9 df       	rcall	.-110    	; 0x750 <check_flag_right>
     7be:	90 91 aa 02 	lds	r25, 0x02AA
     7c2:	89 2b       	or	r24, r25
     7c4:	c1 f3       	breq	.-16     	; 0x7b6 <flappy_restart+0x18>
	{
		quit = check_flag_left();
	}
	sram_init();
     7c6:	0c 94 27 0e 	jmp	0x1c4e	; 0x1c4e <sram_init>
     7ca:	08 95       	ret

000007cc <flappy_loading_screen>:
	}
	
	return 0;
}

void flappy_loading_screen(void){
     7cc:	0f 93       	push	r16
     7ce:	1f 93       	push	r17
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
	sram_init();
     7d4:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <sram_init>
	sram_goto_line(0);
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <sram_goto_line>
	sram_write_string("  FLAPPY BIRD");
     7de:	8f e6       	ldi	r24, 0x6F	; 111
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	0e 94 82 0c 	call	0x1904	; 0x1904 <sram_write_string>
	sram_update_oled();
     7e6:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
	
	timer_delay(1000);
     7ea:	88 ee       	ldi	r24, 0xE8	; 232
     7ec:	93 e0       	ldi	r25, 0x03	; 3
     7ee:	0e 94 2e 10 	call	0x205c	; 0x205c <timer_delay>
	
	sram_draw_new_line(8*FONT_WIDTH+4,8,13*FONT_WIDTH+4,0);
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	4c e6       	ldi	r20, 0x6C	; 108
     7f6:	68 e0       	ldi	r22, 0x08	; 8
     7f8:	84 e4       	ldi	r24, 0x44	; 68
     7fa:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <sram_draw_new_line>
	sram_draw_new_line(8*FONT_WIDTH+4,0,13*FONT_WIDTH+4,8);
     7fe:	28 e0       	ldi	r18, 0x08	; 8
     800:	4c e6       	ldi	r20, 0x6C	; 108
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	84 e4       	ldi	r24, 0x44	; 68
     806:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <sram_draw_new_line>
	sram_update_oled();
     80a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
	
	timer_delay(1000);
     80e:	88 ee       	ldi	r24, 0xE8	; 232
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	0e 94 2e 10 	call	0x205c	; 0x205c <timer_delay>
	
	sram_goto_line(2);
     816:	82 e0       	ldi	r24, 0x02	; 2
     818:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*8+4);
     81c:	84 e4       	ldi	r24, 0x44	; 68
     81e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <sram_goto_column>
	sram_write_string("PIXEL");
     822:	8d e7       	ldi	r24, 0x7D	; 125
     824:	91 e0       	ldi	r25, 0x01	; 1
     826:	0e 94 82 0c 	call	0x1904	; 0x1904 <sram_write_string>
	sram_update_oled();
     82a:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
	
	timer_delay(500);
     82e:	84 ef       	ldi	r24, 0xF4	; 244
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	0e 94 2e 10 	call	0x205c	; 0x205c <timer_delay>
     836:	d0 e1       	ldi	r29, 0x10	; 16
	}
	
	return 0;
}

void flappy_loading_screen(void){
     838:	10 e1       	ldi	r17, 0x10	; 16
     83a:	12 c0       	rjmp	.+36     	; 0x860 <flappy_loading_screen+0x94>
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
     83c:	00 e0       	ldi	r16, 0x00	; 0
     83e:	21 e0       	ldi	r18, 0x01	; 1
     840:	48 e1       	ldi	r20, 0x18	; 24
     842:	60 e0       	ldi	r22, 0x00	; 0
     844:	8c 2f       	mov	r24, r28
     846:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <sram_scroll_vertically>
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
     84a:	cf 5f       	subi	r28, 0xFF	; 255
     84c:	c0 34       	cpi	r28, 0x40	; 64
     84e:	b1 f7       	brne	.-20     	; 0x83c <flappy_loading_screen+0x70>
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
		}
		timer_delay(30);
     850:	8e e1       	ldi	r24, 0x1E	; 30
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	0e 94 2e 10 	call	0x205c	; 0x205c <timer_delay>
		sram_update_oled();
     858:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
     85c:	d1 50       	subi	r29, 0x01	; 1
	sram_write_string("PIXEL");
	sram_update_oled();
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
     85e:	11 f0       	breq	.+4      	; 0x864 <flappy_loading_screen+0x98>
	}
	
	return 0;
}

void flappy_loading_screen(void){
     860:	c1 2f       	mov	r28, r17
     862:	ec cf       	rjmp	.-40     	; 0x83c <flappy_loading_screen+0x70>
		sram_update_oled();
	}
	
	//sram
	
	flappy_restart();
     864:	9c df       	rcall	.-200    	; 0x79e <flappy_restart>
}
     866:	df 91       	pop	r29
     868:	cf 91       	pop	r28
     86a:	1f 91       	pop	r17
     86c:	0f 91       	pop	r16
     86e:	08 95       	ret

00000870 <flappy_render_wall>:
	sram_write_string("SCORE: ");
	sram_write_int(score);
	sram_update_oled();
}

void flappy_render_wall(uint8_t selected_wall, uint8_t pos){
     870:	cf 93       	push	r28
     872:	df 93       	push	r29
     874:	d8 2f       	mov	r29, r24
     876:	c6 2f       	mov	r28, r22
	if (selected_wall > SCREEN_HEIGHT-1 -WALL_HOLE){
     878:	8c 32       	cpi	r24, 0x2C	; 44
     87a:	38 f0       	brcs	.+14     	; 0x88a <flappy_render_wall+0x1a>
		sram_draw_new_line(pos, 0, pos, SCREEN_HEIGHT-1 -WALL_HOLE);
     87c:	2b e2       	ldi	r18, 0x2B	; 43
     87e:	46 2f       	mov	r20, r22
     880:	60 e0       	ldi	r22, 0x00	; 0
     882:	8c 2f       	mov	r24, r28
     884:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <sram_draw_new_line>
     888:	17 c0       	rjmp	.+46     	; 0x8b8 <flappy_render_wall+0x48>
	}else if(selected_wall < WALL_HOLE){ 
     88a:	84 31       	cpi	r24, 0x14	; 20
     88c:	38 f4       	brcc	.+14     	; 0x89c <flappy_render_wall+0x2c>
		sram_draw_new_line(pos, WALL_HOLE, pos , SCREEN_HEIGHT-1);
     88e:	2f e3       	ldi	r18, 0x3F	; 63
     890:	46 2f       	mov	r20, r22
     892:	64 e1       	ldi	r22, 0x14	; 20
     894:	8c 2f       	mov	r24, r28
     896:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <sram_draw_new_line>
     89a:	0e c0       	rjmp	.+28     	; 0x8b8 <flappy_render_wall+0x48>
	}else{
		sram_draw_new_line(pos, 0, pos, selected_wall-WALL_HOLE/2);
     89c:	26 ef       	ldi	r18, 0xF6	; 246
     89e:	28 0f       	add	r18, r24
     8a0:	46 2f       	mov	r20, r22
     8a2:	60 e0       	ldi	r22, 0x00	; 0
     8a4:	8c 2f       	mov	r24, r28
     8a6:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <sram_draw_new_line>
		sram_draw_new_line(pos, selected_wall + WALL_HOLE/2, pos , SCREEN_HEIGHT-1);
     8aa:	6a e0       	ldi	r22, 0x0A	; 10
     8ac:	6d 0f       	add	r22, r29
     8ae:	2f e3       	ldi	r18, 0x3F	; 63
     8b0:	4c 2f       	mov	r20, r28
     8b2:	8c 2f       	mov	r24, r28
     8b4:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <sram_draw_new_line>
	}
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <flappy_controll>:

void flappy_controll(void){
     8be:	cf 92       	push	r12
     8c0:	df 92       	push	r13
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
	velocity += acceleration;
     8c6:	20 91 14 01 	lds	r18, 0x0114
     8ca:	30 91 15 01 	lds	r19, 0x0115
     8ce:	40 91 16 01 	lds	r20, 0x0116
     8d2:	50 91 17 01 	lds	r21, 0x0117
     8d6:	60 91 a4 02 	lds	r22, 0x02A4
     8da:	70 91 a5 02 	lds	r23, 0x02A5
     8de:	80 91 a6 02 	lds	r24, 0x02A6
     8e2:	90 91 a7 02 	lds	r25, 0x02A7
     8e6:	0e 94 4f 10 	call	0x209e	; 0x209e <__addsf3>
     8ea:	60 93 a4 02 	sts	0x02A4, r22
     8ee:	70 93 a5 02 	sts	0x02A5, r23
     8f2:	80 93 a6 02 	sts	0x02A6, r24
     8f6:	90 93 a7 02 	sts	0x02A7, r25
	if(check_flag_left() | check_flag_right()){
     8fa:	21 df       	rcall	.-446    	; 0x73e <check_flag_left>
     8fc:	f8 2e       	mov	r15, r24
     8fe:	28 df       	rcall	.-432    	; 0x750 <check_flag_right>
     900:	8f 29       	or	r24, r15
     902:	b1 f0       	breq	.+44     	; 0x930 <flappy_controll+0x72>
		velocity -= 1;
     904:	20 e0       	ldi	r18, 0x00	; 0
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	40 e8       	ldi	r20, 0x80	; 128
     90a:	5f e3       	ldi	r21, 0x3F	; 63
     90c:	60 91 a4 02 	lds	r22, 0x02A4
     910:	70 91 a5 02 	lds	r23, 0x02A5
     914:	80 91 a6 02 	lds	r24, 0x02A6
     918:	90 91 a7 02 	lds	r25, 0x02A7
     91c:	0e 94 4e 10 	call	0x209c	; 0x209c <__subsf3>
     920:	60 93 a4 02 	sts	0x02A4, r22
     924:	70 93 a5 02 	sts	0x02A5, r23
     928:	80 93 a6 02 	sts	0x02A6, r24
     92c:	90 93 a7 02 	sts	0x02A7, r25
	}
	if(velocity > 1){
     930:	c0 90 a4 02 	lds	r12, 0x02A4
     934:	d0 90 a5 02 	lds	r13, 0x02A5
     938:	e0 90 a6 02 	lds	r14, 0x02A6
     93c:	f0 90 a7 02 	lds	r15, 0x02A7
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	30 e0       	ldi	r19, 0x00	; 0
     944:	40 e8       	ldi	r20, 0x80	; 128
     946:	5f e3       	ldi	r21, 0x3F	; 63
     948:	c7 01       	movw	r24, r14
     94a:	b6 01       	movw	r22, r12
     94c:	0e 94 02 12 	call	0x2404	; 0x2404 <__gesf2>
     950:	18 16       	cp	r1, r24
     952:	6c f4       	brge	.+26     	; 0x96e <flappy_controll+0xb0>
		velocity = 1;
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	a0 e8       	ldi	r26, 0x80	; 128
     95a:	bf e3       	ldi	r27, 0x3F	; 63
     95c:	80 93 a4 02 	sts	0x02A4, r24
     960:	90 93 a5 02 	sts	0x02A5, r25
     964:	a0 93 a6 02 	sts	0x02A6, r26
     968:	b0 93 a7 02 	sts	0x02A7, r27
     96c:	16 c0       	rjmp	.+44     	; 0x99a <flappy_controll+0xdc>
	}else if(velocity < -1){
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	5f eb       	ldi	r21, 0xBF	; 191
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 b3 10 	call	0x2166	; 0x2166 <__cmpsf2>
     97e:	88 23       	and	r24, r24
     980:	64 f4       	brge	.+24     	; 0x99a <flappy_controll+0xdc>
		velocity = -1;
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e8       	ldi	r26, 0x80	; 128
     988:	bf eb       	ldi	r27, 0xBF	; 191
     98a:	80 93 a4 02 	sts	0x02A4, r24
     98e:	90 93 a5 02 	sts	0x02A5, r25
     992:	a0 93 a6 02 	sts	0x02A6, r26
     996:	b0 93 a7 02 	sts	0x02A7, r27
	}
	player_height_accurate += velocity;
     99a:	20 91 a4 02 	lds	r18, 0x02A4
     99e:	30 91 a5 02 	lds	r19, 0x02A5
     9a2:	40 91 a6 02 	lds	r20, 0x02A6
     9a6:	50 91 a7 02 	lds	r21, 0x02A7
     9aa:	60 91 a0 02 	lds	r22, 0x02A0
     9ae:	70 91 a1 02 	lds	r23, 0x02A1
     9b2:	80 91 a2 02 	lds	r24, 0x02A2
     9b6:	90 91 a3 02 	lds	r25, 0x02A3
     9ba:	0e 94 4f 10 	call	0x209e	; 0x209e <__addsf3>
     9be:	6b 01       	movw	r12, r22
     9c0:	7c 01       	movw	r14, r24
     9c2:	60 93 a0 02 	sts	0x02A0, r22
     9c6:	70 93 a1 02 	sts	0x02A1, r23
     9ca:	80 93 a2 02 	sts	0x02A2, r24
     9ce:	90 93 a3 02 	sts	0x02A3, r25
	if(player_height_accurate >= SCREEN_HEIGHT-1){
     9d2:	20 e0       	ldi	r18, 0x00	; 0
     9d4:	30 e0       	ldi	r19, 0x00	; 0
     9d6:	4c e7       	ldi	r20, 0x7C	; 124
     9d8:	52 e4       	ldi	r21, 0x42	; 66
     9da:	0e 94 02 12 	call	0x2404	; 0x2404 <__gesf2>
     9de:	88 23       	and	r24, r24
     9e0:	24 f0       	brlt	.+8      	; 0x9ea <flappy_controll+0x12c>
		game_over = 1;
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	80 93 a8 02 	sts	0x02A8, r24
     9e8:	0c c0       	rjmp	.+24     	; 0xa02 <flappy_controll+0x144>
	}else if(player_height_accurate<= 0){
     9ea:	20 e0       	ldi	r18, 0x00	; 0
     9ec:	30 e0       	ldi	r19, 0x00	; 0
     9ee:	a9 01       	movw	r20, r18
     9f0:	c7 01       	movw	r24, r14
     9f2:	b6 01       	movw	r22, r12
     9f4:	0e 94 b3 10 	call	0x2166	; 0x2166 <__cmpsf2>
     9f8:	18 16       	cp	r1, r24
     9fa:	1c f0       	brlt	.+6      	; 0xa02 <flappy_controll+0x144>
		game_over = 1;
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	80 93 a8 02 	sts	0x02A8, r24
	}
	player_height = (int)player_height_accurate;
     a02:	c7 01       	movw	r24, r14
     a04:	b6 01       	movw	r22, r12
     a06:	0e 94 1f 11 	call	0x223e	; 0x223e <__fixsfsi>
     a0a:	60 93 a9 02 	sts	0x02A9, r22
}
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	08 95       	ret

00000a18 <flappy_pixel_collision>:

uint8_t flappy_pixel_collision(void){
	if (ext_ram_adress[PLAYER_POS+((player_height-player_height%8)/8)*128] & (1<<player_height%8)){
     a18:	80 91 a9 02 	lds	r24, 0x02A9
     a1c:	e8 2f       	mov	r30, r24
     a1e:	f0 e0       	ldi	r31, 0x00	; 0
     a20:	f5 95       	asr	r31
     a22:	e7 95       	ror	r30
     a24:	f5 95       	asr	r31
     a26:	e7 95       	ror	r30
     a28:	f5 95       	asr	r31
     a2a:	e7 95       	ror	r30
     a2c:	f6 95       	lsr	r31
     a2e:	fe 2f       	mov	r31, r30
     a30:	ee 27       	eor	r30, r30
     a32:	f7 95       	ror	r31
     a34:	e7 95       	ror	r30
     a36:	3a 96       	adiw	r30, 0x0a	; 10
     a38:	20 91 18 01 	lds	r18, 0x0118
     a3c:	30 91 19 01 	lds	r19, 0x0119
     a40:	e2 0f       	add	r30, r18
     a42:	f3 1f       	adc	r31, r19
     a44:	20 81       	ld	r18, Z
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	87 70       	andi	r24, 0x07	; 7
     a4a:	a9 01       	movw	r20, r18
     a4c:	02 c0       	rjmp	.+4      	; 0xa52 <flappy_pixel_collision+0x3a>
     a4e:	55 95       	asr	r21
     a50:	47 95       	ror	r20
     a52:	8a 95       	dec	r24
     a54:	e2 f7       	brpl	.-8      	; 0xa4e <flappy_pixel_collision+0x36>
     a56:	ca 01       	movw	r24, r20
		return 1;
	}
	return 0;
}
     a58:	81 70       	andi	r24, 0x01	; 1
     a5a:	08 95       	ret

00000a5c <flappy_scroll_wall>:

void flappy_scroll_wall(void){
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
     a64:	e0 91 18 01 	lds	r30, 0x0118
     a68:	f0 91 19 01 	lds	r31, 0x0119
     a6c:	e8 0f       	add	r30, r24
     a6e:	f9 1f       	adc	r31, r25
     a70:	10 82       	st	Z, r1
     a72:	80 58       	subi	r24, 0x80	; 128
     a74:	9f 4f       	sbci	r25, 0xFF	; 255
	return 0;
}

void flappy_scroll_wall(void){
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
     a76:	81 15       	cp	r24, r1
     a78:	24 e0       	ldi	r18, 0x04	; 4
     a7a:	92 07       	cpc	r25, r18
     a7c:	99 f7       	brne	.-26     	; 0xa64 <flappy_scroll_wall+0x8>
     a7e:	60 e0       	ldi	r22, 0x00	; 0
     a80:	70 e0       	ldi	r23, 0x00	; 0
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     a82:	b8 e0       	ldi	r27, 0x08	; 8
     a84:	19 c0       	rjmp	.+50     	; 0xab8 <flappy_scroll_wall+0x5c>
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
     a86:	20 91 18 01 	lds	r18, 0x0118
     a8a:	30 91 19 01 	lds	r19, 0x0119
     a8e:	f9 01       	movw	r30, r18
     a90:	e8 0f       	add	r30, r24
     a92:	f9 1f       	adc	r31, r25
     a94:	ac 01       	movw	r20, r24
     a96:	4f 5f       	subi	r20, 0xFF	; 255
     a98:	5f 4f       	sbci	r21, 0xFF	; 255
     a9a:	e9 01       	movw	r28, r18
     a9c:	c4 0f       	add	r28, r20
     a9e:	d5 1f       	adc	r29, r21
     aa0:	28 81       	ld	r18, Y
     aa2:	20 83       	st	Z, r18
     aa4:	a1 50       	subi	r26, 0x01	; 1
     aa6:	80 58       	subi	r24, 0x80	; 128
     aa8:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     aaa:	a1 11       	cpse	r26, r1
     aac:	ec cf       	rjmp	.-40     	; 0xa86 <flappy_scroll_wall+0x2a>
     aae:	6f 5f       	subi	r22, 0xFF	; 255
     ab0:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     ab2:	6f 37       	cpi	r22, 0x7F	; 127
     ab4:	71 05       	cpc	r23, r1
     ab6:	19 f0       	breq	.+6      	; 0xabe <flappy_scroll_wall+0x62>
     ab8:	cb 01       	movw	r24, r22
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     aba:	ab 2f       	mov	r26, r27
     abc:	e4 cf       	rjmp	.-56     	; 0xa86 <flappy_scroll_wall+0x2a>
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     abe:	8f e7       	ldi	r24, 0x7F	; 127
     ac0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
     ac2:	e0 91 18 01 	lds	r30, 0x0118
     ac6:	f0 91 19 01 	lds	r31, 0x0119
     aca:	e8 0f       	add	r30, r24
     acc:	f9 1f       	adc	r31, r25
     ace:	10 82       	st	Z, r1
     ad0:	80 58       	subi	r24, 0x80	; 128
     ad2:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     ad4:	8f 37       	cpi	r24, 0x7F	; 127
     ad6:	24 e0       	ldi	r18, 0x04	; 4
     ad8:	92 07       	cpc	r25, r18
     ada:	99 f7       	brne	.-26     	; 0xac2 <flappy_scroll_wall+0x66>
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
	}
	if(new_wall >= difficulity){//if a wall has been removed a new one must be made
     adc:	80 91 12 01 	lds	r24, 0x0112
     ae0:	90 91 13 01 	lds	r25, 0x0113
     ae4:	89 17       	cp	r24, r25
     ae6:	a8 f0       	brcs	.+42     	; 0xb12 <flappy_scroll_wall+0xb6>
		flappy_render_wall(rand()%(SCREEN_HEIGHT-WALL_HOLE/2)+WALL_HOLE/4,127);
     ae8:	0e 94 4e 13 	call	0x269c	; 0x269c <rand>
     aec:	66 e3       	ldi	r22, 0x36	; 54
     aee:	70 e0       	ldi	r23, 0x00	; 0
     af0:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__divmodhi4>
     af4:	6f e7       	ldi	r22, 0x7F	; 127
     af6:	8b 5f       	subi	r24, 0xFB	; 251
     af8:	bb de       	rcall	.-650    	; 0x870 <flappy_render_wall>
		new_wall = 0;
     afa:	10 92 12 01 	sts	0x0112, r1
		score++;
     afe:	80 91 ab 02 	lds	r24, 0x02AB
     b02:	90 91 ac 02 	lds	r25, 0x02AC
     b06:	01 96       	adiw	r24, 0x01	; 1
     b08:	90 93 ac 02 	sts	0x02AC, r25
     b0c:	80 93 ab 02 	sts	0x02AB, r24
     b10:	03 c0       	rjmp	.+6      	; 0xb18 <flappy_scroll_wall+0xbc>
	}else{
		new_wall++;
     b12:	8f 5f       	subi	r24, 0xFF	; 255
     b14:	80 93 12 01 	sts	0x0112, r24
	}
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	08 95       	ret

00000b1e <flappy_game>:
		quit = check_flag_left();
	}
	sram_init();
}

void flappy_game(void){
     b1e:	cf 92       	push	r12
     b20:	df 92       	push	r13
     b22:	ef 92       	push	r14
     b24:	ff 92       	push	r15
     b26:	0f 93       	push	r16
     b28:	1f 93       	push	r17
     b2a:	cf 93       	push	r28
     b2c:	df 93       	push	r29
	sram_update_oled();
     b2e:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
		if(check_flag_left()){//PAUSE
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			for (uint8_t i = 5; i > 1; i--)
     b32:	0f 2e       	mov	r0, r31
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	cf 2e       	mov	r12, r31
     b38:	f0 2d       	mov	r31, r0
			{
				sram_goto_line(i);
				sram_goto_column(0);
				if(tempscore != 0){
					sram_write_char('0'+(tempscore%10));
     b3a:	0a e0       	ldi	r16, 0x0A	; 10
     b3c:	10 e0       	ldi	r17, 0x00	; 0
	sram_init();
}

void flappy_game(void){
	sram_update_oled();
	while (!flappy_pixel_collision() && !game_over)
     b3e:	40 c0       	rjmp	.+128    	; 0xbc0 <flappy_game+0xa2>
	
	{
		if(timer_check_flag()){
     b40:	0e 94 13 10 	call	0x2026	; 0x2026 <timer_check_flag>
     b44:	88 23       	and	r24, r24
     b46:	41 f0       	breq	.+16     	; 0xb58 <flappy_game+0x3a>
			flappy_controll();
     b48:	ba de       	rcall	.-652    	; 0x8be <flappy_controll>
			sram_pixel(PLAYER_POS,player_height);
     b4a:	60 91 a9 02 	lds	r22, 0x02A9
     b4e:	8a e0       	ldi	r24, 0x0A	; 10
     b50:	33 d7       	rcall	.+3686   	; 0x19b8 <sram_pixel>
			flappy_scroll_wall();
     b52:	84 df       	rcall	.-248    	; 0xa5c <flappy_scroll_wall>
			sram_update_oled();
     b54:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
		}
		if(check_flag_left()){//PAUSE
     b58:	f2 dd       	rcall	.-1052   	; 0x73e <check_flag_left>
     b5a:	88 23       	and	r24, r24
     b5c:	89 f1       	breq	.+98     	; 0xbc0 <flappy_game+0xa2>
			sram_goto_line(0);
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	c3 d6       	rcall	.+3462   	; 0x18e8 <sram_goto_line>
			sram_goto_column(0);
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	c8 d6       	rcall	.+3472   	; 0x18f6 <sram_goto_column>
			sram_write_char('S');
     b66:	83 e5       	ldi	r24, 0x53	; 83
     b68:	84 d6       	rcall	.+3336   	; 0x1872 <sram_write_char>
			int tempscore = score;
     b6a:	c0 91 ab 02 	lds	r28, 0x02AB
     b6e:	d0 91 ac 02 	lds	r29, 0x02AC
			for (uint8_t i = 5; i > 1; i--)
     b72:	dc 2c       	mov	r13, r12
			{
				sram_goto_line(i);
     b74:	8d 2d       	mov	r24, r13
     b76:	b8 d6       	rcall	.+3440   	; 0x18e8 <sram_goto_line>
				sram_goto_column(0);
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	bd d6       	rcall	.+3450   	; 0x18f6 <sram_goto_column>
				if(tempscore != 0){
     b7c:	20 97       	sbiw	r28, 0x00	; 0
     b7e:	79 f0       	breq	.+30     	; 0xb9e <flappy_game+0x80>
					sram_write_char('0'+(tempscore%10));
     b80:	ce 01       	movw	r24, r28
     b82:	b8 01       	movw	r22, r16
     b84:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__divmodhi4>
     b88:	7c 01       	movw	r14, r24
     b8a:	80 e3       	ldi	r24, 0x30	; 48
     b8c:	8e 0d       	add	r24, r14
     b8e:	71 d6       	rcall	.+3298   	; 0x1872 <sram_write_char>
					tempscore -= tempscore%10;
     b90:	ce 01       	movw	r24, r28
     b92:	8e 19       	sub	r24, r14
     b94:	9f 09       	sbc	r25, r15
					tempscore /= 10;
     b96:	b8 01       	movw	r22, r16
     b98:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__divmodhi4>
     b9c:	eb 01       	movw	r28, r22
		if(check_flag_left()){//PAUSE
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			for (uint8_t i = 5; i > 1; i--)
     b9e:	da 94       	dec	r13
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	d8 12       	cpse	r13, r24
     ba4:	e7 cf       	rjmp	.-50     	; 0xb74 <flappy_game+0x56>
					tempscore -= tempscore%10;
					tempscore /= 10;
				}
				
			}
			sram_goto_line(7);
     ba6:	87 e0       	ldi	r24, 0x07	; 7
     ba8:	9f d6       	rcall	.+3390   	; 0x18e8 <sram_goto_line>
			sram_goto_column(0);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	a4 d6       	rcall	.+3400   	; 0x18f6 <sram_goto_column>
			sram_write_char('P');
     bae:	80 e5       	ldi	r24, 0x50	; 80
     bb0:	60 d6       	rcall	.+3264   	; 0x1872 <sram_write_char>
			sram_update_oled();
     bb2:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
			while(!(check_flag_left() | check_flag_right())){
     bb6:	c3 dd       	rcall	.-1146   	; 0x73e <check_flag_left>
     bb8:	c8 2f       	mov	r28, r24
     bba:	ca dd       	rcall	.-1132   	; 0x750 <check_flag_right>
     bbc:	8c 2b       	or	r24, r28
     bbe:	d9 f3       	breq	.-10     	; 0xbb6 <flappy_game+0x98>
	sram_init();
}

void flappy_game(void){
	sram_update_oled();
	while (!flappy_pixel_collision() && !game_over)
     bc0:	2b df       	rcall	.-426    	; 0xa18 <flappy_pixel_collision>
     bc2:	81 11       	cpse	r24, r1
     bc4:	05 c0       	rjmp	.+10     	; 0xbd0 <flappy_game+0xb2>
     bc6:	80 91 a8 02 	lds	r24, 0x02A8
     bca:	88 23       	and	r24, r24
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <flappy_game+0xb2>
     bce:	b8 cf       	rjmp	.-144    	; 0xb40 <flappy_game+0x22>
			while(!(check_flag_left() | check_flag_right())){
				
			}
		}
	}
	can_data[0] = 1;
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	80 93 0a 01 	sts	0x010A, r24
	CAN_message_send(can_data,0);
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	8a e0       	ldi	r24, 0x0A	; 10
     bda:	91 e0       	ldi	r25, 0x01	; 1
     bdc:	e9 dc       	rcall	.-1582   	; 0x5b0 <CAN_message_send>
	timer_delay(1000);
     bde:	88 ee       	ldi	r24, 0xE8	; 232
     be0:	93 e0       	ldi	r25, 0x03	; 3
     be2:	0e 94 2e 10 	call	0x205c	; 0x205c <timer_delay>
	sram_init();
     be6:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <sram_init>
	sram_goto_line(0);
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	7d d6       	rcall	.+3322   	; 0x18e8 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*3);
     bee:	88 e1       	ldi	r24, 0x18	; 24
     bf0:	82 d6       	rcall	.+3332   	; 0x18f6 <sram_goto_column>
	sram_write_string("GAME  OVER");
     bf2:	83 e8       	ldi	r24, 0x83	; 131
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	86 d6       	rcall	.+3340   	; 0x1904 <sram_write_string>
	sram_goto_line(1);
     bf8:	81 e0       	ldi	r24, 0x01	; 1
     bfa:	76 d6       	rcall	.+3308   	; 0x18e8 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*4);
     bfc:	80 e2       	ldi	r24, 0x20	; 32
     bfe:	7b d6       	rcall	.+3318   	; 0x18f6 <sram_goto_column>
	sram_write_string("SCORE: ");
     c00:	8e e8       	ldi	r24, 0x8E	; 142
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	7f d6       	rcall	.+3326   	; 0x1904 <sram_write_string>
	sram_write_int(score);
     c06:	80 91 ab 02 	lds	r24, 0x02AB
     c0a:	90 91 ac 02 	lds	r25, 0x02AC
     c0e:	8e d6       	rcall	.+3356   	; 0x192c <sram_write_int>
	sram_update_oled();
     c10:	0e 94 1e 0e 	call	0x1c3c	; 0x1c3c <sram_update_oled>
}
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	1f 91       	pop	r17
     c1a:	0f 91       	pop	r16
     c1c:	ff 90       	pop	r15
     c1e:	ef 90       	pop	r14
     c20:	df 90       	pop	r13
     c22:	cf 90       	pop	r12
     c24:	08 95       	ret

00000c26 <flappy_main>:
double player_height_accurate = 0;
uint8_t difficulity = 100;
uint8_t new_wall = 100;

uint8_t can_data[8] = {20,2,0,0,0,0,0,0};
int flappy_main(void){
     c26:	cf 92       	push	r12
     c28:	df 92       	push	r13
     c2a:	ef 92       	push	r14
     c2c:	ff 92       	push	r15
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
     c32:	82 b7       	in	r24, 0x32	; 50
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 51 13 	call	0x26a2	; 0x26a2 <srand>
	quit = 0;
     c3a:	10 92 aa 02 	sts	0x02AA, r1
	CAN_construct_message(50,8);
     c3e:	68 e0       	ldi	r22, 0x08	; 8
     c40:	82 e3       	ldi	r24, 0x32	; 50
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	14 dc       	rcall	.-2008   	; 0x46e <CAN_construct_message>
	CAN_message_send(can_data,0);
     c46:	60 e0       	ldi	r22, 0x00	; 0
     c48:	8a e0       	ldi	r24, 0x0A	; 10
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	b1 dc       	rcall	.-1694   	; 0x5b0 <CAN_message_send>
	flappy_loading_screen();
     c4e:	be dd       	rcall	.-1156   	; 0x7cc <flappy_loading_screen>

	while (quit != 1){
     c50:	80 91 aa 02 	lds	r24, 0x02AA
     c54:	81 30       	cpi	r24, 0x01	; 1
     c56:	79 f1       	breq	.+94     	; 0xcb6 <flappy_main+0x90>
		game_over = 0;
		
		player_height_accurate = 1;
     c58:	0f 2e       	mov	r0, r31
     c5a:	c1 2c       	mov	r12, r1
     c5c:	d1 2c       	mov	r13, r1
     c5e:	f0 e8       	ldi	r31, 0x80	; 128
     c60:	ef 2e       	mov	r14, r31
     c62:	ff e3       	ldi	r31, 0x3F	; 63
     c64:	ff 2e       	mov	r15, r31
     c66:	f0 2d       	mov	r31, r0
		player_height = 1;
     c68:	d1 e0       	ldi	r29, 0x01	; 1
		velocity = 0;
		difficulity = 100;
     c6a:	c4 e6       	ldi	r28, 0x64	; 100
	CAN_construct_message(50,8);
	CAN_message_send(can_data,0);
	flappy_loading_screen();

	while (quit != 1){
		game_over = 0;
     c6c:	10 92 a8 02 	sts	0x02A8, r1
		
		player_height_accurate = 1;
     c70:	c0 92 a0 02 	sts	0x02A0, r12
     c74:	d0 92 a1 02 	sts	0x02A1, r13
     c78:	e0 92 a2 02 	sts	0x02A2, r14
     c7c:	f0 92 a3 02 	sts	0x02A3, r15
		player_height = 1;
     c80:	d0 93 a9 02 	sts	0x02A9, r29
		velocity = 0;
     c84:	10 92 a4 02 	sts	0x02A4, r1
     c88:	10 92 a5 02 	sts	0x02A5, r1
     c8c:	10 92 a6 02 	sts	0x02A6, r1
     c90:	10 92 a7 02 	sts	0x02A7, r1
		difficulity = 100;
     c94:	c0 93 13 01 	sts	0x0113, r28
		score = 0;
     c98:	10 92 ac 02 	sts	0x02AC, r1
     c9c:	10 92 ab 02 	sts	0x02AB, r1
		flappy_game();
     ca0:	3e df       	rcall	.-388    	; 0xb1e <flappy_game>
		sram_goto_line(6);
     ca2:	86 e0       	ldi	r24, 0x06	; 6
     ca4:	21 d6       	rcall	.+3138   	; 0x18e8 <sram_goto_line>
		sram_write_string("   TRY AGAIN?");
     ca6:	86 e9       	ldi	r24, 0x96	; 150
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	2c d6       	rcall	.+3160   	; 0x1904 <sram_write_string>
		flappy_restart();
     cac:	78 dd       	rcall	.-1296   	; 0x79e <flappy_restart>
	quit = 0;
	CAN_construct_message(50,8);
	CAN_message_send(can_data,0);
	flappy_loading_screen();

	while (quit != 1){
     cae:	80 91 aa 02 	lds	r24, 0x02AA
     cb2:	81 30       	cpi	r24, 0x01	; 1
     cb4:	d9 f6       	brne	.-74     	; 0xc6c <flappy_main+0x46>
		sram_write_string("   TRY AGAIN?");
		flappy_restart();
	}
	
	return 0;
}
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	df 91       	pop	r29
     cbc:	cf 91       	pop	r28
     cbe:	ff 90       	pop	r15
     cc0:	ef 90       	pop	r14
     cc2:	df 90       	pop	r13
     cc4:	cf 90       	pop	r12
     cc6:	08 95       	ret

00000cc8 <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
     cc8:	0f 93       	push	r16
     cca:	1f 93       	push	r17
     ccc:	cf 93       	push	r28
     cce:	df 93       	push	r29
     cd0:	c4 e6       	ldi	r28, 0x64	; 100
     cd2:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     cd4:	00 91 b7 02 	lds	r16, 0x02B7
     cd8:	10 91 b8 02 	lds	r17, 0x02B8
     cdc:	81 e0       	ldi	r24, 0x01	; 1
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	ef dc       	rcall	.-1570   	; 0x6c0 <readADC>
     ce2:	01 58       	subi	r16, 0x81	; 129
     ce4:	1f 4f       	sbci	r17, 0xFF	; 255
     ce6:	08 1b       	sub	r16, r24
     ce8:	19 0b       	sbc	r17, r25
     cea:	10 93 b8 02 	sts	0x02B8, r17
     cee:	00 93 b7 02 	sts	0x02B7, r16
		calibrate_y += 127 - readADC(2);
     cf2:	00 91 b5 02 	lds	r16, 0x02B5
     cf6:	10 91 b6 02 	lds	r17, 0x02B6
     cfa:	82 e0       	ldi	r24, 0x02	; 2
     cfc:	90 e0       	ldi	r25, 0x00	; 0
     cfe:	e0 dc       	rcall	.-1600   	; 0x6c0 <readADC>
     d00:	01 58       	subi	r16, 0x81	; 129
     d02:	1f 4f       	sbci	r17, 0xFF	; 255
     d04:	08 1b       	sub	r16, r24
     d06:	19 0b       	sbc	r17, r25
     d08:	10 93 b6 02 	sts	0x02B6, r17
     d0c:	00 93 b5 02 	sts	0x02B5, r16
     d10:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     d12:	20 97       	sbiw	r28, 0x00	; 0
     d14:	f9 f6       	brne	.-66     	; 0xcd4 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     d16:	80 91 b7 02 	lds	r24, 0x02B7
     d1a:	90 91 b8 02 	lds	r25, 0x02B8
     d1e:	24 e6       	ldi	r18, 0x64	; 100
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	b9 01       	movw	r22, r18
     d24:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__divmodhi4>
     d28:	70 93 b8 02 	sts	0x02B8, r23
     d2c:	60 93 b7 02 	sts	0x02B7, r22
	calibrate_y /= CALIBRATE_READINGS;
     d30:	80 91 b5 02 	lds	r24, 0x02B5
     d34:	90 91 b6 02 	lds	r25, 0x02B6
     d38:	b9 01       	movw	r22, r18
     d3a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__divmodhi4>
     d3e:	70 93 b6 02 	sts	0x02B6, r23
     d42:	60 93 b5 02 	sts	0x02B5, r22
}
     d46:	df 91       	pop	r29
     d48:	cf 91       	pop	r28
     d4a:	1f 91       	pop	r17
     d4c:	0f 91       	pop	r16
     d4e:	08 95       	ret

00000d50 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     d50:	2f 92       	push	r2
     d52:	3f 92       	push	r3
     d54:	4f 92       	push	r4
     d56:	5f 92       	push	r5
     d58:	6f 92       	push	r6
     d5a:	7f 92       	push	r7
     d5c:	8f 92       	push	r8
     d5e:	9f 92       	push	r9
     d60:	af 92       	push	r10
     d62:	bf 92       	push	r11
     d64:	cf 92       	push	r12
     d66:	df 92       	push	r13
     d68:	ef 92       	push	r14
     d6a:	ff 92       	push	r15
     d6c:	0f 93       	push	r16
     d6e:	1f 93       	push	r17
     d70:	cf 93       	push	r28
     d72:	df 93       	push	r29
     d74:	00 d0       	rcall	.+0      	; 0xd76 <signal_to_range+0x26>
     d76:	00 d0       	rcall	.+0      	; 0xd78 <signal_to_range+0x28>
     d78:	00 d0       	rcall	.+0      	; 0xd7a <signal_to_range+0x2a>
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	3c 01       	movw	r6, r24
     d80:	7a 83       	std	Y+2, r23	; 0x02
     d82:	69 83       	std	Y+1, r22	; 0x01
     d84:	5c 83       	std	Y+4, r21	; 0x04
     d86:	4b 83       	std	Y+3, r20	; 0x03
     d88:	3e 83       	std	Y+6, r19	; 0x06
     d8a:	2d 83       	std	Y+5, r18	; 0x05
     d8c:	18 01       	movw	r2, r16
     d8e:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     d90:	b9 01       	movw	r22, r18
     d92:	88 27       	eor	r24, r24
     d94:	77 fd       	sbrc	r23, 7
     d96:	80 95       	com	r24
     d98:	98 2f       	mov	r25, r24
     d9a:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__floatsisf>
     d9e:	4b 01       	movw	r8, r22
     da0:	5c 01       	movw	r10, r24
     da2:	b3 01       	movw	r22, r6
     da4:	6e 0d       	add	r22, r14
     da6:	7f 1d       	adc	r23, r15
     da8:	29 81       	ldd	r18, Y+1	; 0x01
     daa:	3a 81       	ldd	r19, Y+2	; 0x02
     dac:	62 1b       	sub	r22, r18
     dae:	73 0b       	sbc	r23, r19
     db0:	88 27       	eor	r24, r24
     db2:	77 fd       	sbrc	r23, 7
     db4:	80 95       	com	r24
     db6:	98 2f       	mov	r25, r24
     db8:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__floatsisf>
     dbc:	2b 01       	movw	r4, r22
     dbe:	3c 01       	movw	r6, r24
     dc0:	b1 01       	movw	r22, r2
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	68 1b       	sub	r22, r24
     dc8:	79 0b       	sbc	r23, r25
     dca:	88 27       	eor	r24, r24
     dcc:	77 fd       	sbrc	r23, 7
     dce:	80 95       	com	r24
     dd0:	98 2f       	mov	r25, r24
     dd2:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__floatsisf>
     dd6:	9b 01       	movw	r18, r22
     dd8:	ac 01       	movw	r20, r24
     dda:	c3 01       	movw	r24, r6
     ddc:	b2 01       	movw	r22, r4
     dde:	0e 94 06 12 	call	0x240c	; 0x240c <__mulsf3>
     de2:	2b 01       	movw	r4, r22
     de4:	3c 01       	movw	r6, r24
     de6:	6b 81       	ldd	r22, Y+3	; 0x03
     de8:	7c 81       	ldd	r23, Y+4	; 0x04
     dea:	e9 81       	ldd	r30, Y+1	; 0x01
     dec:	fa 81       	ldd	r31, Y+2	; 0x02
     dee:	6e 1b       	sub	r22, r30
     df0:	7f 0b       	sbc	r23, r31
     df2:	88 27       	eor	r24, r24
     df4:	77 fd       	sbrc	r23, 7
     df6:	80 95       	com	r24
     df8:	98 2f       	mov	r25, r24
     dfa:	0e 94 52 11 	call	0x22a4	; 0x22a4 <__floatsisf>
     dfe:	9b 01       	movw	r18, r22
     e00:	ac 01       	movw	r20, r24
     e02:	c3 01       	movw	r24, r6
     e04:	b2 01       	movw	r22, r4
     e06:	0e 94 b7 10 	call	0x216e	; 0x216e <__divsf3>
     e0a:	9b 01       	movw	r18, r22
     e0c:	ac 01       	movw	r20, r24
     e0e:	c5 01       	movw	r24, r10
     e10:	b4 01       	movw	r22, r8
     e12:	0e 94 4f 10 	call	0x209e	; 0x209e <__addsf3>
     e16:	0e 94 1f 11 	call	0x223e	; 0x223e <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     e1a:	c1 01       	movw	r24, r2
     e1c:	80 1b       	sub	r24, r16
     e1e:	91 0b       	sbc	r25, r17
     e20:	68 17       	cp	r22, r24
     e22:	79 07       	cpc	r23, r25
     e24:	74 f5       	brge	.+92     	; 0xe82 <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     e26:	8d 81       	ldd	r24, Y+5	; 0x05
     e28:	9e 81       	ldd	r25, Y+6	; 0x06
     e2a:	80 0f       	add	r24, r16
     e2c:	91 1f       	adc	r25, r17
     e2e:	86 17       	cp	r24, r22
     e30:	97 07       	cpc	r25, r23
     e32:	4c f5       	brge	.+82     	; 0xe86 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     e34:	f8 01       	movw	r30, r16
     e36:	11 23       	and	r17, r17
     e38:	0c f4       	brge	.+2      	; 0xe3c <signal_to_range+0xec>
     e3a:	31 96       	adiw	r30, 0x01	; 1
     e3c:	f5 95       	asr	r31
     e3e:	e7 95       	ror	r30
     e40:	d8 01       	movw	r26, r16
     e42:	12 c0       	rjmp	.+36     	; 0xe68 <signal_to_range+0x118>
     e44:	8a 0f       	add	r24, r26
     e46:	9b 1f       	adc	r25, r27
     e48:	ac 01       	movw	r20, r24
     e4a:	4e 0f       	add	r20, r30
     e4c:	5f 1f       	adc	r21, r31
     e4e:	64 17       	cp	r22, r20
     e50:	75 07       	cpc	r23, r21
     e52:	14 f0       	brlt	.+4      	; 0xe58 <signal_to_range+0x108>
				reference += step;
     e54:	69 01       	movw	r12, r18
     e56:	0b c0       	rjmp	.+22     	; 0xe6e <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     e58:	c6 01       	movw	r24, r12
     e5a:	8e 1b       	sub	r24, r30
     e5c:	9f 0b       	sbc	r25, r31
     e5e:	86 17       	cp	r24, r22
     e60:	97 07       	cpc	r25, r23
     e62:	14 f0       	brlt	.+4      	; 0xe68 <signal_to_range+0x118>
				reference -= step;
     e64:	c0 1a       	sub	r12, r16
     e66:	d1 0a       	sbc	r13, r17
     e68:	c6 01       	movw	r24, r12
     e6a:	80 1b       	sub	r24, r16
     e6c:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     e6e:	96 01       	movw	r18, r12
     e70:	20 0f       	add	r18, r16
     e72:	31 1f       	adc	r19, r17
     e74:	62 17       	cp	r22, r18
     e76:	73 07       	cpc	r23, r19
     e78:	2c f7       	brge	.-54     	; 0xe44 <signal_to_range+0xf4>
     e7a:	86 17       	cp	r24, r22
     e7c:	97 07       	cpc	r25, r23
     e7e:	14 f7       	brge	.-60     	; 0xe44 <signal_to_range+0xf4>
     e80:	04 c0       	rjmp	.+8      	; 0xe8a <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     e82:	61 01       	movw	r12, r2
     e84:	02 c0       	rjmp	.+4      	; 0xe8a <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     e86:	cd 80       	ldd	r12, Y+5	; 0x05
     e88:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     e8a:	c6 01       	movw	r24, r12
     e8c:	26 96       	adiw	r28, 0x06	; 6
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	de bf       	out	0x3e, r29	; 62
     e94:	0f be       	out	0x3f, r0	; 63
     e96:	cd bf       	out	0x3d, r28	; 61
     e98:	df 91       	pop	r29
     e9a:	cf 91       	pop	r28
     e9c:	1f 91       	pop	r17
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	df 90       	pop	r13
     ea6:	cf 90       	pop	r12
     ea8:	bf 90       	pop	r11
     eaa:	af 90       	pop	r10
     eac:	9f 90       	pop	r9
     eae:	8f 90       	pop	r8
     eb0:	7f 90       	pop	r7
     eb2:	6f 90       	pop	r6
     eb4:	5f 90       	pop	r5
     eb6:	4f 90       	pop	r4
     eb8:	3f 90       	pop	r3
     eba:	2f 90       	pop	r2
     ebc:	08 95       	ret

00000ebe <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     ebe:	af 92       	push	r10
     ec0:	bf 92       	push	r11
     ec2:	cf 92       	push	r12
     ec4:	df 92       	push	r13
     ec6:	ef 92       	push	r14
     ec8:	ff 92       	push	r15
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
	switch(channel){
     ece:	82 35       	cpi	r24, 0x52	; 82
     ed0:	09 f4       	brne	.+2      	; 0xed4 <read_control_input+0x16>
     ed2:	6e c0       	rjmp	.+220    	; 0xfb0 <read_control_input+0xf2>
     ed4:	20 f4       	brcc	.+8      	; 0xede <read_control_input+0x20>
     ed6:	8c 34       	cpi	r24, 0x4C	; 76
     ed8:	09 f4       	brne	.+2      	; 0xedc <read_control_input+0x1e>
     eda:	4a c0       	rjmp	.+148    	; 0xf70 <read_control_input+0xb2>
     edc:	89 c0       	rjmp	.+274    	; 0xff0 <read_control_input+0x132>
     ede:	88 35       	cpi	r24, 0x58	; 88
     ee0:	19 f0       	breq	.+6      	; 0xee8 <read_control_input+0x2a>
     ee2:	89 35       	cpi	r24, 0x59	; 89
     ee4:	19 f1       	breq	.+70     	; 0xf2c <read_control_input+0x6e>
     ee6:	84 c0       	rjmp	.+264    	; 0xff0 <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     ee8:	c0 90 b3 02 	lds	r12, 0x02B3
     eec:	d0 90 b4 02 	lds	r13, 0x02B4
     ef0:	e0 90 b7 02 	lds	r14, 0x02B7
     ef4:	f0 90 b8 02 	lds	r15, 0x02B8
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	e1 db       	rcall	.-2110   	; 0x6c0 <readADC>
     efe:	0f 2e       	mov	r0, r31
     f00:	fa e0       	ldi	r31, 0x0A	; 10
     f02:	af 2e       	mov	r10, r31
     f04:	b1 2c       	mov	r11, r1
     f06:	f0 2d       	mov	r31, r0
     f08:	04 e6       	ldi	r16, 0x64	; 100
     f0a:	10 e0       	ldi	r17, 0x00	; 0
     f0c:	2c e9       	ldi	r18, 0x9C	; 156
     f0e:	3f ef       	ldi	r19, 0xFF	; 255
     f10:	4f ef       	ldi	r20, 0xFF	; 255
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	60 e0       	ldi	r22, 0x00	; 0
     f16:	70 e0       	ldi	r23, 0x00	; 0
     f18:	1b df       	rcall	.-458    	; 0xd50 <signal_to_range>
     f1a:	90 93 b4 02 	sts	0x02B4, r25
     f1e:	80 93 b3 02 	sts	0x02B3, r24
			return ref_X;
     f22:	80 91 b3 02 	lds	r24, 0x02B3
     f26:	90 91 b4 02 	lds	r25, 0x02B4
     f2a:	64 c0       	rjmp	.+200    	; 0xff4 <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     f2c:	c0 90 b1 02 	lds	r12, 0x02B1
     f30:	d0 90 b2 02 	lds	r13, 0x02B2
     f34:	e0 90 b5 02 	lds	r14, 0x02B5
     f38:	f0 90 b6 02 	lds	r15, 0x02B6
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	bf db       	rcall	.-2178   	; 0x6c0 <readADC>
     f42:	0f 2e       	mov	r0, r31
     f44:	fa e0       	ldi	r31, 0x0A	; 10
     f46:	af 2e       	mov	r10, r31
     f48:	b1 2c       	mov	r11, r1
     f4a:	f0 2d       	mov	r31, r0
     f4c:	04 e6       	ldi	r16, 0x64	; 100
     f4e:	10 e0       	ldi	r17, 0x00	; 0
     f50:	2c e9       	ldi	r18, 0x9C	; 156
     f52:	3f ef       	ldi	r19, 0xFF	; 255
     f54:	4f ef       	ldi	r20, 0xFF	; 255
     f56:	50 e0       	ldi	r21, 0x00	; 0
     f58:	60 e0       	ldi	r22, 0x00	; 0
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	f9 de       	rcall	.-526    	; 0xd50 <signal_to_range>
     f5e:	90 93 b2 02 	sts	0x02B2, r25
     f62:	80 93 b1 02 	sts	0x02B1, r24
			return ref_Y;
     f66:	80 91 b1 02 	lds	r24, 0x02B1
     f6a:	90 91 b2 02 	lds	r25, 0x02B2
     f6e:	42 c0       	rjmp	.+132    	; 0xff4 <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     f70:	c0 90 af 02 	lds	r12, 0x02AF
     f74:	d0 90 b0 02 	lds	r13, 0x02B0
     f78:	83 e0       	ldi	r24, 0x03	; 3
     f7a:	90 e0       	ldi	r25, 0x00	; 0
     f7c:	a1 db       	rcall	.-2238   	; 0x6c0 <readADC>
     f7e:	0f 2e       	mov	r0, r31
     f80:	fa e0       	ldi	r31, 0x0A	; 10
     f82:	af 2e       	mov	r10, r31
     f84:	b1 2c       	mov	r11, r1
     f86:	f0 2d       	mov	r31, r0
     f88:	e1 2c       	mov	r14, r1
     f8a:	f1 2c       	mov	r15, r1
     f8c:	04 e6       	ldi	r16, 0x64	; 100
     f8e:	10 e0       	ldi	r17, 0x00	; 0
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	4f ef       	ldi	r20, 0xFF	; 255
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	70 e0       	ldi	r23, 0x00	; 0
     f9c:	d9 de       	rcall	.-590    	; 0xd50 <signal_to_range>
     f9e:	90 93 b0 02 	sts	0x02B0, r25
     fa2:	80 93 af 02 	sts	0x02AF, r24
		return ref_L;
     fa6:	80 91 af 02 	lds	r24, 0x02AF
     faa:	90 91 b0 02 	lds	r25, 0x02B0
     fae:	22 c0       	rjmp	.+68     	; 0xff4 <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
     fb0:	c0 90 ad 02 	lds	r12, 0x02AD
     fb4:	d0 90 ae 02 	lds	r13, 0x02AE
     fb8:	84 e0       	ldi	r24, 0x04	; 4
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	81 db       	rcall	.-2302   	; 0x6c0 <readADC>
     fbe:	0f 2e       	mov	r0, r31
     fc0:	fa e0       	ldi	r31, 0x0A	; 10
     fc2:	af 2e       	mov	r10, r31
     fc4:	b1 2c       	mov	r11, r1
     fc6:	f0 2d       	mov	r31, r0
     fc8:	e1 2c       	mov	r14, r1
     fca:	f1 2c       	mov	r15, r1
     fcc:	04 e6       	ldi	r16, 0x64	; 100
     fce:	10 e0       	ldi	r17, 0x00	; 0
     fd0:	20 e0       	ldi	r18, 0x00	; 0
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	4f ef       	ldi	r20, 0xFF	; 255
     fd6:	50 e0       	ldi	r21, 0x00	; 0
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	b9 de       	rcall	.-654    	; 0xd50 <signal_to_range>
     fde:	90 93 ae 02 	sts	0x02AE, r25
     fe2:	80 93 ad 02 	sts	0x02AD, r24
			return ref_R;
     fe6:	80 91 ad 02 	lds	r24, 0x02AD
     fea:	90 91 ae 02 	lds	r25, 0x02AE
     fee:	02 c0       	rjmp	.+4      	; 0xff4 <read_control_input+0x136>
	}
	return 0;
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	90 e0       	ldi	r25, 0x00	; 0
}
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	08 95       	ret

00001006 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
    1006:	60 de       	rcall	.-832    	; 0xcc8 <calibrate_joystick>
	ref_X = read_control_input('X');
    1008:	88 e5       	ldi	r24, 0x58	; 88
    100a:	59 df       	rcall	.-334    	; 0xebe <read_control_input>
    100c:	90 93 b4 02 	sts	0x02B4, r25
    1010:	80 93 b3 02 	sts	0x02B3, r24
	ref_Y = read_control_input('Y');
    1014:	89 e5       	ldi	r24, 0x59	; 89
    1016:	53 df       	rcall	.-346    	; 0xebe <read_control_input>
    1018:	90 93 b2 02 	sts	0x02B2, r25
    101c:	80 93 b1 02 	sts	0x02B1, r24
	ref_L = read_control_input('L');
    1020:	8c e4       	ldi	r24, 0x4C	; 76
    1022:	4d df       	rcall	.-358    	; 0xebe <read_control_input>
    1024:	90 93 b0 02 	sts	0x02B0, r25
    1028:	80 93 af 02 	sts	0x02AF, r24
	ref_R = read_control_input('R');
    102c:	82 e5       	ldi	r24, 0x52	; 82
    102e:	47 df       	rcall	.-370    	; 0xebe <read_control_input>
    1030:	90 93 ae 02 	sts	0x02AE, r25
    1034:	80 93 ad 02 	sts	0x02AD, r24
    1038:	08 95       	ret

0000103a <initialize_menu>:
	&debug_0
};

char temp[16];

void initialize_menu(void){
    103a:	8f 92       	push	r8
    103c:	9f 92       	push	r9
    103e:	af 92       	push	r10
    1040:	bf 92       	push	r11
    1042:	cf 92       	push	r12
    1044:	df 92       	push	r13
    1046:	ef 92       	push	r14
    1048:	ff 92       	push	r15
    104a:	0f 93       	push	r16
    104c:	1f 93       	push	r17
    104e:	cf 93       	push	r28
    1050:	df 93       	push	r29
    1052:	0f 2e       	mov	r0, r31
    1054:	f4 e2       	ldi	r31, 0x24	; 36
    1056:	cf 2e       	mov	r12, r31
    1058:	f1 e0       	ldi	r31, 0x01	; 1
    105a:	df 2e       	mov	r13, r31
    105c:	f0 2d       	mov	r31, r0
    105e:	0f 2e       	mov	r0, r31
    1060:	fa e1       	ldi	r31, 0x1A	; 26
    1062:	ef 2e       	mov	r14, r31
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	ff 2e       	mov	r15, r31
    1068:	f0 2d       	mov	r31, r0
    106a:	0e e2       	ldi	r16, 0x2E	; 46
    106c:	11 e0       	ldi	r17, 0x01	; 1
    106e:	21 e0       	ldi	r18, 0x01	; 1
    1070:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
    1072:	c5 e0       	ldi	r28, 0x05	; 5
    1074:	d0 e0       	ldi	r29, 0x00	; 0
    1076:	d6 01       	movw	r26, r12
    1078:	ad 90       	ld	r10, X+
    107a:	bd 90       	ld	r11, X+
    107c:	6d 01       	movw	r12, r26
    107e:	f7 01       	movw	r30, r14
    1080:	81 90       	ld	r8, Z+
    1082:	91 90       	ld	r9, Z+
    1084:	7f 01       	movw	r14, r30
    1086:	c9 01       	movw	r24, r18
    1088:	be 01       	movw	r22, r28
    108a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <__divmodhi4>
    108e:	fc 01       	movw	r30, r24
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	e2 5d       	subi	r30, 0xD2	; 210
    1096:	fe 4f       	sbci	r31, 0xFE	; 254
    1098:	80 81       	ld	r24, Z
    109a:	91 81       	ldd	r25, Z+1	; 0x01
    109c:	d8 01       	movw	r26, r16
    109e:	ed 91       	ld	r30, X+
    10a0:	fd 91       	ld	r31, X+
    10a2:	8d 01       	movw	r16, r26
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    10a4:	95 83       	std	Z+5, r25	; 0x05
    10a6:	84 83       	std	Z+4, r24	; 0x04
	new_menu->ptr_child = ptr_child;
    10a8:	97 82       	std	Z+7, r9	; 0x07
    10aa:	86 82       	std	Z+6, r8	; 0x06
	new_menu->ptr_parent = ptr_parent;
    10ac:	11 86       	std	Z+9, r1	; 0x09
    10ae:	10 86       	std	Z+8, r1	; 0x08
	
	new_menu->title = title;
    10b0:	b1 82       	std	Z+1, r11	; 0x01
    10b2:	a0 82       	st	Z, r10
	new_menu->n_sib = n_sib;
    10b4:	d3 83       	std	Z+3, r29	; 0x03
    10b6:	c2 83       	std	Z+2, r28	; 0x02
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
};

char temp[16];

void initialize_menu(void){
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
    10bc:	26 30       	cpi	r18, 0x06	; 6
    10be:	31 05       	cpc	r19, r1
    10c0:	d1 f6       	brne	.-76     	; 0x1076 <initialize_menu+0x3c>
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    10c2:	80 91 40 01 	lds	r24, 0x0140
    10c6:	90 91 41 01 	lds	r25, 0x0141
    10ca:	60 91 be 02 	lds	r22, 0x02BE
    10ce:	70 91 bf 02 	lds	r23, 0x02BF
    10d2:	ee e2       	ldi	r30, 0x2E	; 46
    10d4:	f1 e0       	ldi	r31, 0x01	; 1
    10d6:	40 81       	ld	r20, Z
    10d8:	51 81       	ldd	r21, Z+1	; 0x01
    10da:	0f 2e       	mov	r0, r31
    10dc:	f4 e4       	ldi	r31, 0x44	; 68
    10de:	ef 2e       	mov	r14, r31
    10e0:	f1 e0       	ldi	r31, 0x01	; 1
    10e2:	ff 2e       	mov	r15, r31
    10e4:	f0 2d       	mov	r31, r0
    10e6:	e7 01       	movw	r28, r14
    10e8:	a8 81       	ld	r26, Y
    10ea:	b9 81       	ldd	r27, Y+1	; 0x01
    10ec:	26 e4       	ldi	r18, 0x46	; 70
    10ee:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    10f0:	e9 01       	movw	r28, r18
    10f2:	08 81       	ld	r16, Y
    10f4:	19 81       	ldd	r17, Y+1	; 0x01
    10f6:	15 96       	adiw	r26, 0x05	; 5
    10f8:	1c 93       	st	X, r17
    10fa:	0e 93       	st	-X, r16
    10fc:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    10fe:	17 96       	adiw	r26, 0x07	; 7
    1100:	7c 93       	st	X, r23
    1102:	6e 93       	st	-X, r22
    1104:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1106:	19 96       	adiw	r26, 0x09	; 9
    1108:	5c 93       	st	X, r21
    110a:	4e 93       	st	-X, r20
    110c:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    110e:	11 96       	adiw	r26, 0x01	; 1
    1110:	9c 93       	st	X, r25
    1112:	8e 93       	st	-X, r24
	new_menu->n_sib = n_sib;
    1114:	82 e0       	ldi	r24, 0x02	; 2
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	13 96       	adiw	r26, 0x03	; 3
    111a:	9c 93       	st	X, r25
    111c:	8e 93       	st	-X, r24
    111e:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    1120:	40 91 42 01 	lds	r20, 0x0142
    1124:	50 91 43 01 	lds	r21, 0x0143
    1128:	00 91 c0 02 	lds	r16, 0x02C0
    112c:	10 91 c1 02 	lds	r17, 0x02C1
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	a8 81       	ld	r26, Y
    1136:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1138:	e7 01       	movw	r28, r14
    113a:	28 81       	ld	r18, Y
    113c:	39 81       	ldd	r19, Y+1	; 0x01
    113e:	15 96       	adiw	r26, 0x05	; 5
    1140:	3c 93       	st	X, r19
    1142:	2e 93       	st	-X, r18
    1144:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1146:	17 96       	adiw	r26, 0x07	; 7
    1148:	1c 93       	st	X, r17
    114a:	0e 93       	st	-X, r16
    114c:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    114e:	19 96       	adiw	r26, 0x09	; 9
    1150:	7c 93       	st	X, r23
    1152:	6e 93       	st	-X, r22
    1154:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1156:	11 96       	adiw	r26, 0x01	; 1
    1158:	5c 93       	st	X, r21
    115a:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    115c:	13 96       	adiw	r26, 0x03	; 3
    115e:	9c 93       	st	X, r25
    1160:	8e 93       	st	-X, r24
    1162:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    1164:	40 91 48 01 	lds	r20, 0x0148
    1168:	50 91 49 01 	lds	r21, 0x0149
    116c:	00 91 c2 02 	lds	r16, 0x02C2
    1170:	10 91 c3 02 	lds	r17, 0x02C3
    1174:	60 81       	ld	r22, Z
    1176:	71 81       	ldd	r23, Z+1	; 0x01
    1178:	0f 2e       	mov	r0, r31
    117a:	fc e4       	ldi	r31, 0x4C	; 76
    117c:	cf 2e       	mov	r12, r31
    117e:	f1 e0       	ldi	r31, 0x01	; 1
    1180:	df 2e       	mov	r13, r31
    1182:	f0 2d       	mov	r31, r0
    1184:	e6 01       	movw	r28, r12
    1186:	a8 81       	ld	r26, Y
    1188:	b9 81       	ldd	r27, Y+1	; 0x01
    118a:	2e e4       	ldi	r18, 0x4E	; 78
    118c:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    118e:	e9 01       	movw	r28, r18
    1190:	e8 80       	ld	r14, Y
    1192:	f9 80       	ldd	r15, Y+1	; 0x01
    1194:	15 96       	adiw	r26, 0x05	; 5
    1196:	fc 92       	st	X, r15
    1198:	ee 92       	st	-X, r14
    119a:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    119c:	17 96       	adiw	r26, 0x07	; 7
    119e:	1c 93       	st	X, r17
    11a0:	0e 93       	st	-X, r16
    11a2:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    11a4:	19 96       	adiw	r26, 0x09	; 9
    11a6:	7c 93       	st	X, r23
    11a8:	6e 93       	st	-X, r22
    11aa:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    11ac:	11 96       	adiw	r26, 0x01	; 1
    11ae:	5c 93       	st	X, r21
    11b0:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    11b2:	13 96       	adiw	r26, 0x03	; 3
    11b4:	9c 93       	st	X, r25
    11b6:	8e 93       	st	-X, r24
    11b8:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    11ba:	40 91 4a 01 	lds	r20, 0x014A
    11be:	50 91 4b 01 	lds	r21, 0x014B
    11c2:	00 91 c4 02 	lds	r16, 0x02C4
    11c6:	10 91 c5 02 	lds	r17, 0x02C5
    11ca:	60 81       	ld	r22, Z
    11cc:	71 81       	ldd	r23, Z+1	; 0x01
    11ce:	a8 81       	ld	r26, Y
    11d0:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    11d2:	e6 01       	movw	r28, r12
    11d4:	28 81       	ld	r18, Y
    11d6:	39 81       	ldd	r19, Y+1	; 0x01
    11d8:	15 96       	adiw	r26, 0x05	; 5
    11da:	3c 93       	st	X, r19
    11dc:	2e 93       	st	-X, r18
    11de:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    11e0:	17 96       	adiw	r26, 0x07	; 7
    11e2:	1c 93       	st	X, r17
    11e4:	0e 93       	st	-X, r16
    11e6:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    11e8:	19 96       	adiw	r26, 0x09	; 9
    11ea:	7c 93       	st	X, r23
    11ec:	6e 93       	st	-X, r22
    11ee:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	5c 93       	st	X, r21
    11f4:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    11f6:	13 96       	adiw	r26, 0x03	; 3
    11f8:	9c 93       	st	X, r25
    11fa:	8e 93       	st	-X, r24
    11fc:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    11fe:	40 91 38 01 	lds	r20, 0x0138
    1202:	50 91 39 01 	lds	r21, 0x0139
    1206:	00 91 ba 02 	lds	r16, 0x02BA
    120a:	10 91 bb 02 	lds	r17, 0x02BB
    120e:	60 81       	ld	r22, Z
    1210:	71 81       	ldd	r23, Z+1	; 0x01
    1212:	0f 2e       	mov	r0, r31
    1214:	fc e3       	ldi	r31, 0x3C	; 60
    1216:	cf 2e       	mov	r12, r31
    1218:	f1 e0       	ldi	r31, 0x01	; 1
    121a:	df 2e       	mov	r13, r31
    121c:	f0 2d       	mov	r31, r0
    121e:	e6 01       	movw	r28, r12
    1220:	a8 81       	ld	r26, Y
    1222:	b9 81       	ldd	r27, Y+1	; 0x01
    1224:	2e e3       	ldi	r18, 0x3E	; 62
    1226:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1228:	e9 01       	movw	r28, r18
    122a:	e8 80       	ld	r14, Y
    122c:	f9 80       	ldd	r15, Y+1	; 0x01
    122e:	15 96       	adiw	r26, 0x05	; 5
    1230:	fc 92       	st	X, r15
    1232:	ee 92       	st	-X, r14
    1234:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1236:	17 96       	adiw	r26, 0x07	; 7
    1238:	1c 93       	st	X, r17
    123a:	0e 93       	st	-X, r16
    123c:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    123e:	19 96       	adiw	r26, 0x09	; 9
    1240:	7c 93       	st	X, r23
    1242:	6e 93       	st	-X, r22
    1244:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1246:	11 96       	adiw	r26, 0x01	; 1
    1248:	5c 93       	st	X, r21
    124a:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    124c:	13 96       	adiw	r26, 0x03	; 3
    124e:	9c 93       	st	X, r25
    1250:	8e 93       	st	-X, r24
    1252:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    1254:	40 91 3a 01 	lds	r20, 0x013A
    1258:	50 91 3b 01 	lds	r21, 0x013B
    125c:	a0 91 bc 02 	lds	r26, 0x02BC
    1260:	b0 91 bd 02 	lds	r27, 0x02BD
    1264:	60 81       	ld	r22, Z
    1266:	71 81       	ldd	r23, Z+1	; 0x01
    1268:	e8 81       	ld	r30, Y
    126a:	f9 81       	ldd	r31, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    126c:	e6 01       	movw	r28, r12
    126e:	28 81       	ld	r18, Y
    1270:	39 81       	ldd	r19, Y+1	; 0x01
    1272:	35 83       	std	Z+5, r19	; 0x05
    1274:	24 83       	std	Z+4, r18	; 0x04
	new_menu->ptr_child = ptr_child;
    1276:	b7 83       	std	Z+7, r27	; 0x07
    1278:	a6 83       	std	Z+6, r26	; 0x06
	new_menu->ptr_parent = ptr_parent;
    127a:	71 87       	std	Z+9, r23	; 0x09
    127c:	60 87       	std	Z+8, r22	; 0x08
	
	new_menu->title = title;
    127e:	51 83       	std	Z+1, r21	; 0x01
    1280:	40 83       	st	Z, r20
	new_menu->n_sib = n_sib;
    1282:	93 83       	std	Z+3, r25	; 0x03
    1284:	82 83       	std	Z+2, r24	; 0x02
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
	}
	#endif
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_start;
    1286:	80 e4       	ldi	r24, 0x40	; 64
    1288:	93 e0       	ldi	r25, 0x03	; 3
    128a:	90 93 c9 02 	sts	0x02C9, r25
    128e:	80 93 c8 02 	sts	0x02C8, r24
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_start;
    1292:	90 93 cb 02 	sts	0x02CB, r25
    1296:	80 93 ca 02 	sts	0x02CA, r24
	
}
    129a:	df 91       	pop	r29
    129c:	cf 91       	pop	r28
    129e:	1f 91       	pop	r17
    12a0:	0f 91       	pop	r16
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	bf 90       	pop	r11
    12ac:	af 90       	pop	r10
    12ae:	9f 90       	pop	r9
    12b0:	8f 90       	pop	r8
    12b2:	08 95       	ret

000012b4 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	1a d2       	rcall	.+1076   	; 0x16ec <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
    12b8:	60 ea       	ldi	r22, 0xA0	; 160
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	8a ee       	ldi	r24, 0xEA	; 234
    12be:	92 e0       	ldi	r25, 0x02	; 2
    12c0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
	sram_write_string(temp);
    12c4:	8a ee       	ldi	r24, 0xEA	; 234
    12c6:	92 e0       	ldi	r25, 0x02	; 2
    12c8:	1d d3       	rcall	.+1594   	; 0x1904 <sram_write_string>
	sram_clear_line(1);
    12ca:	81 e0       	ldi	r24, 0x01	; 1
    12cc:	e1 d4       	rcall	.+2498   	; 0x1c90 <sram_clear_line>
	oled_goto_line(2);
    12ce:	82 e0       	ldi	r24, 0x02	; 2
    12d0:	0d d2       	rcall	.+1050   	; 0x16ec <oled_goto_line>
	strcpy_P(temp,btn_1);
    12d2:	60 eb       	ldi	r22, 0xB0	; 176
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	8a ee       	ldi	r24, 0xEA	; 234
    12d8:	92 e0       	ldi	r25, 0x02	; 2
    12da:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
	sram_write_string(temp);
    12de:	8a ee       	ldi	r24, 0xEA	; 234
    12e0:	92 e0       	ldi	r25, 0x02	; 2
    12e2:	10 d3       	rcall	.+1568   	; 0x1904 <sram_write_string>
	sram_update_oled();
    12e4:	ab d4       	rcall	.+2390   	; 0x1c3c <sram_update_oled>
	while (!check_flag_right()){
    12e6:	08 c0       	rjmp	.+16     	; 0x12f8 <menu_set_contrast+0x44>
		write_c(0x81);
    12e8:	81 e8       	ldi	r24, 0x81	; 129
    12ea:	cd d1       	rcall	.+922    	; 0x1686 <write_c>
		write_c(readADC(3)/2);
    12ec:	83 e0       	ldi	r24, 0x03	; 3
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	e7 d9       	rcall	.-3122   	; 0x6c0 <readADC>
    12f2:	96 95       	lsr	r25
    12f4:	87 95       	ror	r24
    12f6:	c7 d1       	rcall	.+910    	; 0x1686 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_update_oled();
	while (!check_flag_right()){
    12f8:	2b da       	rcall	.-2986   	; 0x750 <check_flag_right>
    12fa:	88 23       	and	r24, r24
    12fc:	a9 f3       	breq	.-22     	; 0x12e8 <menu_set_contrast+0x34>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	
}
    12fe:	08 95       	ret

00001300 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
    1308:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
    130a:	8c 2f       	mov	r24, r28
    130c:	c1 d4       	rcall	.+2434   	; 0x1c90 <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
    130e:	cf 5f       	subi	r28, 0xFF	; 255
    1310:	c7 30       	cpi	r28, 0x07	; 7
    1312:	d9 f7       	brne	.-10     	; 0x130a <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	ea d1       	rcall	.+980    	; 0x16ec <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
    1318:	69 e9       	ldi	r22, 0x99	; 153
    131a:	70 e0       	ldi	r23, 0x00	; 0
    131c:	8a ee       	ldi	r24, 0xEA	; 234
    131e:	92 e0       	ldi	r25, 0x02	; 2
    1320:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
	sram_write_string(temp);
    1324:	8a ee       	ldi	r24, 0xEA	; 234
    1326:	92 e0       	ldi	r25, 0x02	; 2
    1328:	ed d2       	rcall	.+1498   	; 0x1904 <sram_write_string>
	oled_goto_line(2);
    132a:	82 e0       	ldi	r24, 0x02	; 2
    132c:	df d1       	rcall	.+958    	; 0x16ec <oled_goto_line>
	strcpy_P(temp,btn_1);
    132e:	60 eb       	ldi	r22, 0xB0	; 176
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	8a ee       	ldi	r24, 0xEA	; 234
    1334:	92 e0       	ldi	r25, 0x02	; 2
    1336:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
	sram_write_string(temp);
    133a:	8a ee       	ldi	r24, 0xEA	; 234
    133c:	92 e0       	ldi	r25, 0x02	; 2
    133e:	e2 d2       	rcall	.+1476   	; 0x1904 <sram_write_string>
	sram_update_oled();
    1340:	7d d4       	rcall	.+2298   	; 0x1c3c <sram_update_oled>
	while (!check_flag_right()){
    1342:	06 da       	rcall	.-3060   	; 0x750 <check_flag_right>
    1344:	88 23       	and	r24, r24
    1346:	e9 f3       	breq	.-6      	; 0x1342 <menu_calibrate_joystick+0x42>
		
	}
	
	
	oled_clear_line(0);
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	ef d1       	rcall	.+990    	; 0x172a <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
    134c:	6b e8       	ldi	r22, 0x8B	; 139
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	8a ee       	ldi	r24, 0xEA	; 234
    1352:	92 e0       	ldi	r25, 0x02	; 2
    1354:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
	sram_write_string(temp);
    1358:	8a ee       	ldi	r24, 0xEA	; 234
    135a:	92 e0       	ldi	r25, 0x02	; 2
    135c:	d3 d2       	rcall	.+1446   	; 0x1904 <sram_write_string>
    135e:	c0 e7       	ldi	r28, 0x70	; 112
    1360:	d0 e0       	ldi	r29, 0x00	; 0
    1362:	08 e7       	ldi	r16, 0x78	; 120
    1364:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	e0 d1       	rcall	.+960    	; 0x172a <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
    136a:	fe 01       	movw	r30, r28
    136c:	65 91       	lpm	r22, Z+
    136e:	74 91       	lpm	r23, Z
    1370:	8a ee       	ldi	r24, 0xEA	; 234
    1372:	92 e0       	ldi	r25, 0x02	; 2
    1374:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
		sram_write_string(temp);
    1378:	8a ee       	ldi	r24, 0xEA	; 234
    137a:	92 e0       	ldi	r25, 0x02	; 2
    137c:	c3 d2       	rcall	.+1414   	; 0x1904 <sram_write_string>
		sram_update_oled();
    137e:	5e d4       	rcall	.+2236   	; 0x1c3c <sram_update_oled>
		while (!check_flag_right()){
    1380:	e7 d9       	rcall	.-3122   	; 0x750 <check_flag_right>
    1382:	88 23       	and	r24, r24
    1384:	e9 f3       	breq	.-6      	; 0x1380 <menu_calibrate_joystick+0x80>
    1386:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
    1388:	c0 17       	cp	r28, r16
    138a:	d1 07       	cpc	r29, r17
    138c:	61 f7       	brne	.-40     	; 0x1366 <menu_calibrate_joystick+0x66>
		while (!check_flag_right()){
			
		}
		
	}
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	08 95       	ret

00001398 <menu_function_selected>:
	return 0;
	
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    1398:	80 91 ca 02 	lds	r24, 0x02CA
    139c:	90 91 cb 02 	lds	r25, 0x02CB
    13a0:	23 e0       	ldi	r18, 0x03	; 3
    13a2:	84 30       	cpi	r24, 0x04	; 4
    13a4:	92 07       	cpc	r25, r18
    13a6:	11 f4       	brne	.+4      	; 0x13ac <menu_function_selected+0x14>
		menu_set_contrast();
    13a8:	85 cf       	rjmp	.-246    	; 0x12b4 <menu_set_contrast>
    13aa:	08 95       	ret
	}else if(current_selected == &debug_1){
    13ac:	23 e0       	ldi	r18, 0x03	; 3
    13ae:	86 33       	cpi	r24, 0x36	; 54
    13b0:	92 07       	cpc	r25, r18
    13b2:	11 f4       	brne	.+4      	; 0x13b8 <menu_function_selected+0x20>
		menu_calibrate_joystick();
    13b4:	a5 cf       	rjmp	.-182    	; 0x1300 <menu_calibrate_joystick>
    13b6:	08 95       	ret
	}
	#if FLAPPY == 1
	else if(current_selected == &game_0){
    13b8:	8c 52       	subi	r24, 0x2C	; 44
    13ba:	93 40       	sbci	r25, 0x03	; 3
    13bc:	49 f4       	brne	.+18     	; 0x13d0 <menu_function_selected+0x38>
		flappy_main();
    13be:	33 dc       	rcall	.-1946   	; 0xc26 <flappy_main>
		printf("FLAPPYT");
    13c0:	84 ea       	ldi	r24, 0xA4	; 164
    13c2:	91 e0       	ldi	r25, 0x01	; 1
    13c4:	9f 93       	push	r25
    13c6:	8f 93       	push	r24
    13c8:	0e 94 ad 13 	call	0x275a	; 0x275a <printf>
    13cc:	0f 90       	pop	r0
    13ce:	0f 90       	pop	r0
    13d0:	08 95       	ret

000013d2 <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
    13d2:	89 e5       	ldi	r24, 0x59	; 89
    13d4:	74 dd       	rcall	.-1304   	; 0xebe <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
    13d6:	87 34       	cpi	r24, 0x47	; 71
    13d8:	91 05       	cpc	r25, r1
    13da:	14 f1       	brlt	.+68     	; 0x1420 <navigate_menu+0x4e>
    13dc:	20 91 b9 02 	lds	r18, 0x02B9
    13e0:	24 31       	cpi	r18, 0x14	; 20
    13e2:	f4 f0       	brlt	.+60     	; 0x1420 <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    13e4:	e0 91 ca 02 	lds	r30, 0x02CA
    13e8:	f0 91 cb 02 	lds	r31, 0x02CB
    13ec:	82 81       	ldd	r24, Z+2	; 0x02
    13ee:	93 81       	ldd	r25, Z+3	; 0x03
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	18 16       	cp	r1, r24
    13f4:	19 06       	cpc	r1, r25
    13f6:	8c f4       	brge	.+34     	; 0x141a <navigate_menu+0x48>
    13f8:	80 e0       	ldi	r24, 0x00	; 0
    13fa:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    13fc:	04 80       	ldd	r0, Z+4	; 0x04
    13fe:	f5 81       	ldd	r31, Z+5	; 0x05
    1400:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1402:	01 96       	adiw	r24, 0x01	; 1
    1404:	22 81       	ldd	r18, Z+2	; 0x02
    1406:	33 81       	ldd	r19, Z+3	; 0x03
    1408:	21 50       	subi	r18, 0x01	; 1
    140a:	31 09       	sbc	r19, r1
    140c:	82 17       	cp	r24, r18
    140e:	93 07       	cpc	r25, r19
    1410:	ac f3       	brlt	.-22     	; 0x13fc <navigate_menu+0x2a>
    1412:	f0 93 cb 02 	sts	0x02CB, r31
    1416:	e0 93 ca 02 	sts	0x02CA, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
    141a:	10 92 b9 02 	sts	0x02B9, r1
    141e:	1d c0       	rjmp	.+58     	; 0x145a <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
    1420:	8a 3b       	cpi	r24, 0xBA	; 186
    1422:	2f ef       	ldi	r18, 0xFF	; 255
    1424:	92 07       	cpc	r25, r18
    1426:	8c f4       	brge	.+34     	; 0x144a <navigate_menu+0x78>
    1428:	20 91 b9 02 	lds	r18, 0x02B9
    142c:	24 31       	cpi	r18, 0x14	; 20
    142e:	6c f0       	brlt	.+26     	; 0x144a <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
    1430:	e0 91 ca 02 	lds	r30, 0x02CA
    1434:	f0 91 cb 02 	lds	r31, 0x02CB
    1438:	84 81       	ldd	r24, Z+4	; 0x04
    143a:	95 81       	ldd	r25, Z+5	; 0x05
    143c:	90 93 cb 02 	sts	0x02CB, r25
    1440:	80 93 ca 02 	sts	0x02CA, r24
		navigation_counter = 0;
    1444:	10 92 b9 02 	sts	0x02B9, r1
    1448:	08 c0       	rjmp	.+16     	; 0x145a <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    144a:	8b 5b       	subi	r24, 0xBB	; 187
    144c:	9f 4f       	sbci	r25, 0xFF	; 255
    144e:	8b 38       	cpi	r24, 0x8B	; 139
    1450:	91 05       	cpc	r25, r1
    1452:	18 f4       	brcc	.+6      	; 0x145a <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
    1454:	83 e1       	ldi	r24, 0x13	; 19
    1456:	80 93 b9 02 	sts	0x02B9, r24
	}
	if (check_flag_right())
    145a:	7a d9       	rcall	.-3340   	; 0x750 <check_flag_right>
    145c:	88 23       	and	r24, r24
    145e:	99 f0       	breq	.+38     	; 0x1486 <navigate_menu+0xb4>
	{
		if(current_selected->ptr_child != NULL){
    1460:	e0 91 ca 02 	lds	r30, 0x02CA
    1464:	f0 91 cb 02 	lds	r31, 0x02CB
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	97 81       	ldd	r25, Z+7	; 0x07
    146c:	00 97       	sbiw	r24, 0x00	; 0
    146e:	49 f0       	breq	.+18     	; 0x1482 <navigate_menu+0xb0>
			current_head = current_selected->ptr_child;
    1470:	90 93 c9 02 	sts	0x02C9, r25
    1474:	80 93 c8 02 	sts	0x02C8, r24
			current_selected = current_selected->ptr_child;
    1478:	90 93 cb 02 	sts	0x02CB, r25
    147c:	80 93 ca 02 	sts	0x02CA, r24
    1480:	1b c0       	rjmp	.+54     	; 0x14b8 <navigate_menu+0xe6>
		}else{
			menu_function_selected();
    1482:	8a df       	rcall	.-236    	; 0x1398 <menu_function_selected>
    1484:	19 c0       	rjmp	.+50     	; 0x14b8 <navigate_menu+0xe6>
		}
	}else if (check_flag_left()){
    1486:	5b d9       	rcall	.-3402   	; 0x73e <check_flag_left>
    1488:	88 23       	and	r24, r24
    148a:	b1 f0       	breq	.+44     	; 0x14b8 <navigate_menu+0xe6>
		if (current_selected->ptr_parent != NULL){
    148c:	e0 91 ca 02 	lds	r30, 0x02CA
    1490:	f0 91 cb 02 	lds	r31, 0x02CB
    1494:	80 85       	ldd	r24, Z+8	; 0x08
    1496:	91 85       	ldd	r25, Z+9	; 0x09
    1498:	00 97       	sbiw	r24, 0x00	; 0
    149a:	71 f0       	breq	.+28     	; 0x14b8 <navigate_menu+0xe6>
			current_head = current_head->ptr_parent;
    149c:	e0 91 c8 02 	lds	r30, 0x02C8
    14a0:	f0 91 c9 02 	lds	r31, 0x02C9
    14a4:	20 85       	ldd	r18, Z+8	; 0x08
    14a6:	31 85       	ldd	r19, Z+9	; 0x09
    14a8:	30 93 c9 02 	sts	0x02C9, r19
    14ac:	20 93 c8 02 	sts	0x02C8, r18
			current_selected = current_selected->ptr_parent;
    14b0:	90 93 cb 02 	sts	0x02CB, r25
    14b4:	80 93 ca 02 	sts	0x02CA, r24
		}
	}
	return 0;
	
}
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	08 95       	ret

000014be <menu_update>:
	current_selected = &mainmenu_start;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
    14be:	0f 93       	push	r16
    14c0:	1f 93       	push	r17
    14c2:	cf 93       	push	r28
    14c4:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    14c6:	85 df       	rcall	.-246    	; 0x13d2 <navigate_menu>
    14c8:	89 2b       	or	r24, r25
    14ca:	09 f0       	breq	.+2      	; 0x14ce <menu_update+0x10>
    14cc:	44 c0       	rjmp	.+136    	; 0x1556 <menu_update+0x98>
    14ce:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    14d0:	8c 2f       	mov	r24, r28
    14d2:	de d3       	rcall	.+1980   	; 0x1c90 <sram_clear_line>
    14d4:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    14d6:	c7 30       	cpi	r28, 0x07	; 7
    14d8:	d9 f7       	brne	.-10     	; 0x14d0 <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    14da:	e0 91 c8 02 	lds	r30, 0x02C8
    14de:	f0 91 c9 02 	lds	r31, 0x02C9
    14e2:	82 81       	ldd	r24, Z+2	; 0x02
    14e4:	93 81       	ldd	r25, Z+3	; 0x03
    14e6:	18 16       	cp	r1, r24
    14e8:	19 06       	cpc	r1, r25
    14ea:	ac f5       	brge	.+106    	; 0x1556 <menu_update+0x98>
    14ec:	c0 e0       	ldi	r28, 0x00	; 0
    14ee:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    14f0:	10 e8       	ldi	r17, 0x80	; 128
    14f2:	01 e8       	ldi	r16, 0x81	; 129
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    14f4:	8c 2f       	mov	r24, r28
    14f6:	fa d0       	rcall	.+500    	; 0x16ec <oled_goto_line>
			oled_goto_column(0);
    14f8:	80 e0       	ldi	r24, 0x00	; 0
    14fa:	13 d1       	rcall	.+550    	; 0x1722 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    14fc:	e0 91 c8 02 	lds	r30, 0x02C8
    1500:	f0 91 c9 02 	lds	r31, 0x02C9
    1504:	60 81       	ld	r22, Z
    1506:	71 81       	ldd	r23, Z+1	; 0x01
    1508:	8a ee       	ldi	r24, 0xEA	; 234
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1510:	20 91 c8 02 	lds	r18, 0x02C8
    1514:	30 91 c9 02 	lds	r19, 0x02C9
    1518:	80 91 ca 02 	lds	r24, 0x02CA
    151c:	90 91 cb 02 	lds	r25, 0x02CB
    1520:	28 17       	cp	r18, r24
    1522:	39 07       	cpc	r19, r25
    1524:	11 f4       	brne	.+4      	; 0x152a <menu_update+0x6c>
    1526:	80 2f       	mov	r24, r16
    1528:	01 c0       	rjmp	.+2      	; 0x152c <menu_update+0x6e>
    152a:	81 2f       	mov	r24, r17
    152c:	a2 d1       	rcall	.+836    	; 0x1872 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    152e:	8a ee       	ldi	r24, 0xEA	; 234
    1530:	92 e0       	ldi	r25, 0x02	; 2
    1532:	e8 d1       	rcall	.+976    	; 0x1904 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    1534:	e0 91 c8 02 	lds	r30, 0x02C8
    1538:	f0 91 c9 02 	lds	r31, 0x02C9
    153c:	04 80       	ldd	r0, Z+4	; 0x04
    153e:	f5 81       	ldd	r31, Z+5	; 0x05
    1540:	e0 2d       	mov	r30, r0
    1542:	f0 93 c9 02 	sts	0x02C9, r31
    1546:	e0 93 c8 02 	sts	0x02C8, r30
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    154a:	21 96       	adiw	r28, 0x01	; 1
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	c8 17       	cp	r28, r24
    1552:	d9 07       	cpc	r29, r25
    1554:	7c f2       	brlt	.-98     	; 0x14f4 <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    1556:	67 d5       	rcall	.+2766   	; 0x2026 <timer_check_flag>
    1558:	88 23       	and	r24, r24
    155a:	51 f0       	breq	.+20     	; 0x1570 <menu_update+0xb2>
		navigation_counter++;
    155c:	80 91 b9 02 	lds	r24, 0x02B9
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	80 93 b9 02 	sts	0x02B9, r24
		sram_update_oled();
    1566:	6a d3       	rcall	.+1748   	; 0x1c3c <sram_update_oled>
		timer_disable_flag();
    1568:	67 d5       	rcall	.+2766   	; 0x2038 <timer_disable_flag>
		sram_scroll_line(7,1);
    156a:	61 e0       	ldi	r22, 0x01	; 1
    156c:	87 e0       	ldi	r24, 0x07	; 7
    156e:	1c d4       	rcall	.+2104   	; 0x1da8 <sram_scroll_line>
	}
}
    1570:	df 91       	pop	r29
    1572:	cf 91       	pop	r28
    1574:	1f 91       	pop	r17
    1576:	0f 91       	pop	r16
    1578:	08 95       	ret

0000157a <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
    157a:	6d e3       	ldi	r22, 0x3D	; 61
    157c:	89 e0       	ldi	r24, 0x09	; 9
    157e:	1e d5       	rcall	.+2620   	; 0x1fbc <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
    1580:	61 e0       	ldi	r22, 0x01	; 1
    1582:	89 e0       	ldi	r24, 0x09	; 9
    1584:	28 d3       	rcall	.+1616   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+15,y-60);
    1586:	61 e0       	ldi	r22, 0x01	; 1
    1588:	87 e2       	ldi	r24, 0x27	; 39
    158a:	25 d3       	rcall	.+1610   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+15,y-48);
    158c:	6d e0       	ldi	r22, 0x0D	; 13
    158e:	87 e2       	ldi	r24, 0x27	; 39
    1590:	22 d3       	rcall	.+1604   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-6,y-48);
    1592:	6d e0       	ldi	r22, 0x0D	; 13
    1594:	82 e1       	ldi	r24, 0x12	; 18
    1596:	1f d3       	rcall	.+1598   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-6,y-12);
    1598:	61 e3       	ldi	r22, 0x31	; 49
    159a:	82 e1       	ldi	r24, 0x12	; 18
    159c:	1c d3       	rcall	.+1592   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+6,y-12);
    159e:	61 e3       	ldi	r22, 0x31	; 49
    15a0:	8e e1       	ldi	r24, 0x1E	; 30
    15a2:	19 d3       	rcall	.+1586   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+6,y-36);
    15a4:	69 e1       	ldi	r22, 0x19	; 25
    15a6:	8e e1       	ldi	r24, 0x1E	; 30
    15a8:	16 d3       	rcall	.+1580   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+15,y-36);
    15aa:	69 e1       	ldi	r22, 0x19	; 25
    15ac:	87 e2       	ldi	r24, 0x27	; 39
    15ae:	13 d3       	rcall	.+1574   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+15,y);
    15b0:	6d e3       	ldi	r22, 0x3D	; 61
    15b2:	87 e2       	ldi	r24, 0x27	; 39
    15b4:	10 d3       	rcall	.+1568   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
    15b6:	6d e3       	ldi	r22, 0x3D	; 61
    15b8:	89 e0       	ldi	r24, 0x09	; 9
    15ba:	0d d3       	rcall	.+1562   	; 0x1bd6 <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    15bc:	21 e0       	ldi	r18, 0x01	; 1
    15be:	45 e4       	ldi	r20, 0x45	; 69
    15c0:	6d e3       	ldi	r22, 0x3D	; 61
    15c2:	8b e3       	ldi	r24, 0x3B	; 59
    15c4:	00 d5       	rcall	.+2560   	; 0x1fc6 <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	87 e7       	ldi	r24, 0x77	; 119
    15ca:	f8 d4       	rcall	.+2544   	; 0x1fbc <sram_set_point>
	sram_draw_line(x-15,y-60);
    15cc:	61 e0       	ldi	r22, 0x01	; 1
    15ce:	89 e5       	ldi	r24, 0x59	; 89
    15d0:	02 d3       	rcall	.+1540   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-12,y-48);
    15d2:	6d e0       	ldi	r22, 0x0D	; 13
    15d4:	8c e5       	ldi	r24, 0x5C	; 92
    15d6:	ff d2       	rcall	.+1534   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+6,y-48);
    15d8:	6d e0       	ldi	r22, 0x0D	; 13
    15da:	8e e6       	ldi	r24, 0x6E	; 110
    15dc:	fc d2       	rcall	.+1528   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+3,y-36);
    15de:	69 e1       	ldi	r22, 0x19	; 25
    15e0:	8b e6       	ldi	r24, 0x6B	; 107
    15e2:	f9 d2       	rcall	.+1522   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-9,y-36);
    15e4:	69 e1       	ldi	r22, 0x19	; 25
    15e6:	8f e5       	ldi	r24, 0x5F	; 95
    15e8:	f6 d2       	rcall	.+1516   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-6,y-24);
    15ea:	65 e2       	ldi	r22, 0x25	; 37
    15ec:	82 e6       	ldi	r24, 0x62	; 98
    15ee:	f3 d2       	rcall	.+1510   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x,y-24);
    15f0:	65 e2       	ldi	r22, 0x25	; 37
    15f2:	88 e6       	ldi	r24, 0x68	; 104
    15f4:	f0 d2       	rcall	.+1504   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x-3,y-12);
    15f6:	61 e3       	ldi	r22, 0x31	; 49
    15f8:	85 e6       	ldi	r24, 0x65	; 101
    15fa:	ed d2       	rcall	.+1498   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x,y);
    15fc:	6d e3       	ldi	r22, 0x3D	; 61
    15fe:	88 e6       	ldi	r24, 0x68	; 104
    1600:	ea d2       	rcall	.+1492   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
    1602:	61 e0       	ldi	r22, 0x01	; 1
    1604:	87 e7       	ldi	r24, 0x77	; 119
    1606:	e7 d2       	rcall	.+1486   	; 0x1bd6 <sram_draw_line>
	
	sram_update_oled();
    1608:	19 c3       	rjmp	.+1586   	; 0x1c3c <sram_update_oled>
    160a:	08 95       	ret

0000160c <init_all>:
    }
    
}

void init_all(void){
	cli();
    160c:	f8 94       	cli
	init_UART();
    160e:	4c d8       	rcall	.-3944   	; 0x6a8 <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
    1610:	85 b7       	in	r24, 0x35	; 53
    1612:	80 68       	ori	r24, 0x80	; 128
    1614:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
    1616:	80 b7       	in	r24, 0x30	; 48
    1618:	80 62       	ori	r24, 0x20	; 32
    161a:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    161c:	9f d0       	rcall	.+318    	; 0x175c <oled_ini>
	sram_init();
    161e:	17 d3       	rcall	.+1582   	; 0x1c4e <sram_init>
	bootscreen();
    1620:	ac df       	rcall	.-168    	; 0x157a <bootscreen>
	initialize_menu();
    1622:	0b dd       	rcall	.-1514   	; 0x103a <initialize_menu>
	
	initialize_control_input();
    1624:	f0 dc       	rcall	.-1568   	; 0x1006 <initialize_control_input>
	
	initalize_interrupts();
    1626:	72 d8       	rcall	.-3868   	; 0x70c <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    1628:	8c e3       	ldi	r24, 0x3C	; 60
    162a:	e9 d4       	rcall	.+2514   	; 0x1ffe <initialize_timer>
	
	CAN_initialize();
    162c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <CAN_initialize>
	
	sei();//enable interrupts
    1630:	78 94       	sei
    1632:	08 95       	ret

00001634 <main>:
#include "scoreboard.h"


#include "../../common_library/uart.h"
int main(void)
{
    1634:	cf 93       	push	r28
    1636:	df 93       	push	r29
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	28 97       	sbiw	r28, 0x08	; 8
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
	//scoreboard_init();
	init_all();
    1648:	e1 df       	rcall	.-62     	; 0x160c <init_all>
	//http: //www.dreamdealer.nl/tutorials/connecting_a_1602a_lcd_display_and_a_light_sensor_to_arduino_uno.html
	//sram_update_oled();
	
	//scoreboard_command(1);
	//_delay_ms(1000);
	printf("UART");
    164a:	8f e8       	ldi	r24, 0x8F	; 143
    164c:	92 e0       	ldi	r25, 0x02	; 2
    164e:	9f 93       	push	r25
    1650:	8f 93       	push	r24
    1652:	0e 94 ad 13 	call	0x275a	; 0x275a <printf>
	
	//sram_init();
	//main_2048();
	
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
    1656:	88 e0       	ldi	r24, 0x08	; 8
    1658:	e6 e5       	ldi	r30, 0x56	; 86
    165a:	f1 e0       	ldi	r31, 0x01	; 1
    165c:	de 01       	movw	r26, r28
    165e:	11 96       	adiw	r26, 0x01	; 1
    1660:	01 90       	ld	r0, Z+
    1662:	0d 92       	st	X+, r0
    1664:	8a 95       	dec	r24
    1666:	e1 f7       	brne	.-8      	; 0x1660 <main+0x2c>
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
	
    uint8_t sendCAN = 1;
	uint8_t controller = 0;
    while(1){
	    if(sendCAN){
			controller = read_control_input('X');
    166c:	88 e5       	ldi	r24, 0x58	; 88
    166e:	27 dc       	rcall	.-1970   	; 0xebe <read_control_input>
			
			if(controller != data[0]){
    1670:	99 81       	ldd	r25, Y+1	; 0x01
    1672:	98 17       	cp	r25, r24
    1674:	31 f0       	breq	.+12     	; 0x1682 <main+0x4e>
				data[0] = controller;
    1676:	89 83       	std	Y+1, r24	; 0x01
				CAN_message_send(data,0);
    1678:	60 e0       	ldi	r22, 0x00	; 0
    167a:	ce 01       	movw	r24, r28
    167c:	01 96       	adiw	r24, 0x01	; 1
    167e:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <CAN_message_send>
			//if (CAN_data_receive())
			//{
			//	
			//}		    
	    }
		menu_update();
    1682:	1d df       	rcall	.-454    	; 0x14be <menu_update>
    }
    1684:	f3 cf       	rjmp	.-26     	; 0x166c <main+0x38>

00001686 <write_c>:
void oled_goto_column(uint8_t column){
	col = column%128;
}
void oled_pos(uint8_t row,uint8_t column){
	oled_goto_column(column);
	oled_goto_line(row);
    1686:	e0 91 52 01 	lds	r30, 0x0152
    168a:	f0 91 53 01 	lds	r31, 0x0153
    168e:	80 83       	st	Z, r24
    1690:	08 95       	ret

00001692 <write_d>:
    1692:	e0 91 50 01 	lds	r30, 0x0150
    1696:	f0 91 51 01 	lds	r31, 0x0151
    169a:	80 83       	st	Z, r24
    169c:	08 95       	ret

0000169e <oled_home>:
    169e:	10 92 4b 03 	sts	0x034B, r1
    16a2:	10 92 4a 03 	sts	0x034A, r1
    16a6:	e0 91 52 01 	lds	r30, 0x0152
    16aa:	f0 91 53 01 	lds	r31, 0x0153
    16ae:	81 e2       	ldi	r24, 0x21	; 33
    16b0:	80 83       	st	Z, r24
    16b2:	e0 91 52 01 	lds	r30, 0x0152
    16b6:	f0 91 53 01 	lds	r31, 0x0153
    16ba:	10 82       	st	Z, r1
    16bc:	e0 91 52 01 	lds	r30, 0x0152
    16c0:	f0 91 53 01 	lds	r31, 0x0153
    16c4:	8f e7       	ldi	r24, 0x7F	; 127
    16c6:	80 83       	st	Z, r24
    16c8:	e0 91 52 01 	lds	r30, 0x0152
    16cc:	f0 91 53 01 	lds	r31, 0x0153
    16d0:	82 e2       	ldi	r24, 0x22	; 34
    16d2:	80 83       	st	Z, r24
    16d4:	e0 91 52 01 	lds	r30, 0x0152
    16d8:	f0 91 53 01 	lds	r31, 0x0153
    16dc:	10 82       	st	Z, r1
    16de:	e0 91 52 01 	lds	r30, 0x0152
    16e2:	f0 91 53 01 	lds	r31, 0x0153
    16e6:	87 e0       	ldi	r24, 0x07	; 7
    16e8:	80 83       	st	Z, r24
    16ea:	08 95       	ret

000016ec <oled_goto_line>:
    16ec:	cf 93       	push	r28
    16ee:	c8 2f       	mov	r28, r24
    16f0:	d6 df       	rcall	.-84     	; 0x169e <oled_home>
    16f2:	c0 93 4b 03 	sts	0x034B, r28
    16f6:	8c 2f       	mov	r24, r28
    16f8:	87 70       	andi	r24, 0x07	; 7
    16fa:	89 f0       	breq	.+34     	; 0x171e <oled_goto_line+0x32>
    16fc:	e0 91 52 01 	lds	r30, 0x0152
    1700:	f0 91 53 01 	lds	r31, 0x0153
    1704:	10 82       	st	Z, r1
    1706:	e0 91 52 01 	lds	r30, 0x0152
    170a:	f0 91 53 01 	lds	r31, 0x0153
    170e:	80 e1       	ldi	r24, 0x10	; 16
    1710:	80 83       	st	Z, r24
    1712:	c0 6b       	ori	r28, 0xB0	; 176
    1714:	e0 91 52 01 	lds	r30, 0x0152
    1718:	f0 91 53 01 	lds	r31, 0x0153
    171c:	c0 83       	st	Z, r28
    171e:	cf 91       	pop	r28
    1720:	08 95       	ret

00001722 <oled_goto_column>:
    1722:	8f 77       	andi	r24, 0x7F	; 127
    1724:	80 93 4a 03 	sts	0x034A, r24
    1728:	08 95       	ret

0000172a <oled_clear_line>:
}

void oled_clear_line(uint8_t line){
    172a:	cf 93       	push	r28
    172c:	c8 2f       	mov	r28, r24
	oled_goto_line(line);
    172e:	de df       	rcall	.-68     	; 0x16ec <oled_goto_line>
	if(line < 8){
    1730:	c8 30       	cpi	r28, 0x08	; 8
    1732:	48 f4       	brcc	.+18     	; 0x1746 <oled_clear_line+0x1c>
    1734:	80 e0       	ldi	r24, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    1736:	e0 91 50 01 	lds	r30, 0x0150
    173a:	f0 91 51 01 	lds	r31, 0x0151
    173e:	10 82       	st	Z, r1
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	if(line < 8){
		for(uint8_t i = 0; i < 128; i++){
    1740:	8f 5f       	subi	r24, 0xFF	; 255
    1742:	80 38       	cpi	r24, 0x80	; 128
    1744:	c1 f7       	brne	.-16     	; 0x1736 <oled_clear_line+0xc>
			write_d(0b00000000);
		}
	}
    1746:	cf 91       	pop	r28
    1748:	08 95       	ret

0000174a <oled_reset>:
	oled_home();
}


void oled_reset(void)
{		
    174a:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8;i++){
    174c:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(i);
    174e:	8c 2f       	mov	r24, r28
    1750:	ec df       	rcall	.-40     	; 0x172a <oled_clear_line>
}


void oled_reset(void)
{		
	for(uint8_t i = 0; i < 8;i++){
    1752:	cf 5f       	subi	r28, 0xFF	; 255
    1754:	c8 30       	cpi	r28, 0x08	; 8
    1756:	d9 f7       	brne	.-10     	; 0x174e <oled_reset+0x4>
		oled_clear_line(i);
	}
}
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <oled_ini>:
	
}
void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    175c:	85 b7       	in	r24, 0x35	; 53
    175e:	80 68       	ori	r24, 0x80	; 128
    1760:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1762:	80 b7       	in	r24, 0x30	; 48
    1764:	80 62       	ori	r24, 0x20	; 32
    1766:	80 bf       	out	0x30, r24	; 48

uint8_t page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1768:	e0 91 52 01 	lds	r30, 0x0152
    176c:	f0 91 53 01 	lds	r31, 0x0153
    1770:	8e ea       	ldi	r24, 0xAE	; 174
    1772:	80 83       	st	Z, r24
    1774:	e0 91 52 01 	lds	r30, 0x0152
    1778:	f0 91 53 01 	lds	r31, 0x0153
    177c:	81 ea       	ldi	r24, 0xA1	; 161
    177e:	80 83       	st	Z, r24
    1780:	e0 91 52 01 	lds	r30, 0x0152
    1784:	f0 91 53 01 	lds	r31, 0x0153
    1788:	8a ed       	ldi	r24, 0xDA	; 218
    178a:	80 83       	st	Z, r24
    178c:	e0 91 52 01 	lds	r30, 0x0152
    1790:	f0 91 53 01 	lds	r31, 0x0153
    1794:	82 e1       	ldi	r24, 0x12	; 18
    1796:	80 83       	st	Z, r24
    1798:	e0 91 52 01 	lds	r30, 0x0152
    179c:	f0 91 53 01 	lds	r31, 0x0153
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	80 83       	st	Z, r24
    17a4:	e0 91 52 01 	lds	r30, 0x0152
    17a8:	f0 91 53 01 	lds	r31, 0x0153
    17ac:	88 ea       	ldi	r24, 0xA8	; 168
    17ae:	80 83       	st	Z, r24
    17b0:	e0 91 52 01 	lds	r30, 0x0152
    17b4:	f0 91 53 01 	lds	r31, 0x0153
    17b8:	8f e3       	ldi	r24, 0x3F	; 63
    17ba:	80 83       	st	Z, r24
    17bc:	e0 91 52 01 	lds	r30, 0x0152
    17c0:	f0 91 53 01 	lds	r31, 0x0153
    17c4:	85 ed       	ldi	r24, 0xD5	; 213
    17c6:	80 83       	st	Z, r24
    17c8:	e0 91 52 01 	lds	r30, 0x0152
    17cc:	f0 91 53 01 	lds	r31, 0x0153
    17d0:	80 e8       	ldi	r24, 0x80	; 128
    17d2:	80 83       	st	Z, r24
    17d4:	e0 91 52 01 	lds	r30, 0x0152
    17d8:	f0 91 53 01 	lds	r31, 0x0153
    17dc:	81 e8       	ldi	r24, 0x81	; 129
    17de:	80 83       	st	Z, r24
    17e0:	e0 91 52 01 	lds	r30, 0x0152
    17e4:	f0 91 53 01 	lds	r31, 0x0153
    17e8:	80 e5       	ldi	r24, 0x50	; 80
    17ea:	80 83       	st	Z, r24
    17ec:	e0 91 52 01 	lds	r30, 0x0152
    17f0:	f0 91 53 01 	lds	r31, 0x0153
    17f4:	89 ed       	ldi	r24, 0xD9	; 217
    17f6:	80 83       	st	Z, r24
    17f8:	e0 91 52 01 	lds	r30, 0x0152
    17fc:	f0 91 53 01 	lds	r31, 0x0153
    1800:	81 e2       	ldi	r24, 0x21	; 33
    1802:	80 83       	st	Z, r24
    1804:	e0 91 52 01 	lds	r30, 0x0152
    1808:	f0 91 53 01 	lds	r31, 0x0153
    180c:	80 e2       	ldi	r24, 0x20	; 32
    180e:	80 83       	st	Z, r24
    1810:	e0 91 52 01 	lds	r30, 0x0152
    1814:	f0 91 53 01 	lds	r31, 0x0153
    1818:	10 82       	st	Z, r1
    181a:	e0 91 52 01 	lds	r30, 0x0152
    181e:	f0 91 53 01 	lds	r31, 0x0153
    1822:	8b ed       	ldi	r24, 0xDB	; 219
    1824:	80 83       	st	Z, r24
    1826:	e0 91 52 01 	lds	r30, 0x0152
    182a:	f0 91 53 01 	lds	r31, 0x0153
    182e:	80 e3       	ldi	r24, 0x30	; 48
    1830:	80 83       	st	Z, r24
    1832:	e0 91 52 01 	lds	r30, 0x0152
    1836:	f0 91 53 01 	lds	r31, 0x0153
    183a:	8d ea       	ldi	r24, 0xAD	; 173
    183c:	80 83       	st	Z, r24
    183e:	e0 91 52 01 	lds	r30, 0x0152
    1842:	f0 91 53 01 	lds	r31, 0x0153
    1846:	10 82       	st	Z, r1
    1848:	e0 91 52 01 	lds	r30, 0x0152
    184c:	f0 91 53 01 	lds	r31, 0x0153
    1850:	84 ea       	ldi	r24, 0xA4	; 164
    1852:	80 83       	st	Z, r24
    1854:	e0 91 52 01 	lds	r30, 0x0152
    1858:	f0 91 53 01 	lds	r31, 0x0153
    185c:	86 ea       	ldi	r24, 0xA6	; 166
    185e:	80 83       	st	Z, r24
    1860:	e0 91 52 01 	lds	r30, 0x0152
    1864:	f0 91 53 01 	lds	r31, 0x0153
    1868:	8f ea       	ldi	r24, 0xAF	; 175
    186a:	80 83       	st	Z, r24
	write_c(0x00);
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	oled_reset();
    186c:	6e df       	rcall	.-292    	; 0x174a <oled_reset>
	oled_home();
    186e:	17 cf       	rjmp	.-466    	; 0x169e <oled_home>
    1870:	08 95       	ret

00001872 <sram_write_char>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
    1872:	8a 30       	cpi	r24, 0x0A	; 10
    1874:	61 f4       	brne	.+24     	; 0x188e <sram_write_char+0x1c>
    1876:	80 91 4b 03 	lds	r24, 0x034B
    187a:	90 e0       	ldi	r25, 0x00	; 0
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	87 70       	andi	r24, 0x07	; 7
    1880:	90 78       	andi	r25, 0x80	; 128
    1882:	80 93 4b 03 	sts	0x034B, r24
    1886:	10 92 4a 03 	sts	0x034A, r1
    188a:	81 e0       	ldi	r24, 0x01	; 1
    188c:	08 95       	ret
    188e:	88 23       	and	r24, r24
    1890:	39 f1       	breq	.+78     	; 0x18e0 <sram_write_char+0x6e>
    1892:	e8 2f       	mov	r30, r24
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	ee 0f       	add	r30, r30
    1898:	ff 1f       	adc	r31, r31
    189a:	ee 0f       	add	r30, r30
    189c:	ff 1f       	adc	r31, r31
    189e:	ee 0f       	add	r30, r30
    18a0:	ff 1f       	adc	r31, r31
    18a2:	ee 5e       	subi	r30, 0xEE	; 238
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	28 e0       	ldi	r18, 0x08	; 8
    18a8:	80 91 4b 03 	lds	r24, 0x034B
    18ac:	a0 91 4a 03 	lds	r26, 0x034A
    18b0:	b0 e0       	ldi	r27, 0x00	; 0
    18b2:	90 e8       	ldi	r25, 0x80	; 128
    18b4:	89 9f       	mul	r24, r25
    18b6:	a0 0d       	add	r26, r0
    18b8:	b1 1d       	adc	r27, r1
    18ba:	11 24       	eor	r1, r1
    18bc:	80 91 54 01 	lds	r24, 0x0154
    18c0:	90 91 55 01 	lds	r25, 0x0155
    18c4:	a8 0f       	add	r26, r24
    18c6:	b9 1f       	adc	r27, r25
    18c8:	84 91       	lpm	r24, Z
    18ca:	8c 93       	st	X, r24
    18cc:	80 91 4a 03 	lds	r24, 0x034A
    18d0:	8f 5f       	subi	r24, 0xFF	; 255
    18d2:	80 93 4a 03 	sts	0x034A, r24
    18d6:	21 50       	subi	r18, 0x01	; 1
    18d8:	31 96       	adiw	r30, 0x01	; 1
    18da:	21 11       	cpse	r18, r1
    18dc:	e5 cf       	rjmp	.-54     	; 0x18a8 <sram_write_char+0x36>
    18de:	02 c0       	rjmp	.+4      	; 0x18e4 <sram_write_char+0x72>
    18e0:	80 e0       	ldi	r24, 0x00	; 0
    18e2:	08 95       	ret
    18e4:	81 e0       	ldi	r24, 0x01	; 1
    18e6:	08 95       	ret

000018e8 <sram_goto_line>:
    18e8:	cf 93       	push	r28
    18ea:	c8 2f       	mov	r28, r24
    18ec:	ff de       	rcall	.-514    	; 0x16ec <oled_goto_line>
    18ee:	c0 93 4b 03 	sts	0x034B, r28
    18f2:	cf 91       	pop	r28
    18f4:	08 95       	ret

000018f6 <sram_goto_column>:
    18f6:	cf 93       	push	r28
    18f8:	c8 2f       	mov	r28, r24
    18fa:	13 df       	rcall	.-474    	; 0x1722 <oled_goto_column>
    18fc:	c0 93 4a 03 	sts	0x034A, r28
    1900:	cf 91       	pop	r28
    1902:	08 95       	ret

00001904 <sram_write_string>:
    1904:	1f 93       	push	r17
    1906:	cf 93       	push	r28
    1908:	df 93       	push	r29
    190a:	ec 01       	movw	r28, r24
    190c:	80 e0       	ldi	r24, 0x00	; 0
    190e:	11 e0       	ldi	r17, 0x01	; 1
    1910:	18 0f       	add	r17, r24
    1912:	fe 01       	movw	r30, r28
    1914:	e8 0f       	add	r30, r24
    1916:	f1 1d       	adc	r31, r1
    1918:	80 81       	ld	r24, Z
    191a:	ab df       	rcall	.-170    	; 0x1872 <sram_write_char>
    191c:	88 23       	and	r24, r24
    191e:	11 f0       	breq	.+4      	; 0x1924 <sram_write_string+0x20>
    1920:	81 2f       	mov	r24, r17
    1922:	f5 cf       	rjmp	.-22     	; 0x190e <sram_write_string+0xa>
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	08 95       	ret

0000192c <sram_write_int>:
    192c:	cf 93       	push	r28
    192e:	18 16       	cp	r1, r24
    1930:	19 06       	cpc	r1, r25
    1932:	4c f4       	brge	.+18     	; 0x1946 <sram_write_int+0x1a>
    1934:	6a e0       	ldi	r22, 0x0A	; 10
    1936:	70 e0       	ldi	r23, 0x00	; 0
    1938:	cc d5       	rcall	.+2968   	; 0x24d2 <__divmodhi4>
    193a:	c8 2f       	mov	r28, r24
    193c:	cb 01       	movw	r24, r22
    193e:	f6 df       	rcall	.-20     	; 0x192c <sram_write_int>
    1940:	80 e3       	ldi	r24, 0x30	; 48
    1942:	8c 0f       	add	r24, r28
    1944:	96 df       	rcall	.-212    	; 0x1872 <sram_write_char>
    1946:	cf 91       	pop	r28
    1948:	08 95       	ret

0000194a <sram_read>:
    194a:	87 70       	andi	r24, 0x07	; 7
    194c:	6f 77       	andi	r22, 0x7F	; 127
    194e:	e6 2f       	mov	r30, r22
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	90 e8       	ldi	r25, 0x80	; 128
    1954:	89 9f       	mul	r24, r25
    1956:	e0 0d       	add	r30, r0
    1958:	f1 1d       	adc	r31, r1
    195a:	11 24       	eor	r1, r1
    195c:	80 91 54 01 	lds	r24, 0x0154
    1960:	90 91 55 01 	lds	r25, 0x0155
    1964:	e8 0f       	add	r30, r24
    1966:	f9 1f       	adc	r31, r25
    1968:	80 81       	ld	r24, Z
    196a:	08 95       	ret

0000196c <sram_write_and>:
    196c:	87 70       	andi	r24, 0x07	; 7
    196e:	6f 77       	andi	r22, 0x7F	; 127
    1970:	e6 2f       	mov	r30, r22
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	90 e8       	ldi	r25, 0x80	; 128
    1976:	89 9f       	mul	r24, r25
    1978:	e0 0d       	add	r30, r0
    197a:	f1 1d       	adc	r31, r1
    197c:	11 24       	eor	r1, r1
    197e:	80 91 54 01 	lds	r24, 0x0154
    1982:	90 91 55 01 	lds	r25, 0x0155
    1986:	e8 0f       	add	r30, r24
    1988:	f9 1f       	adc	r31, r25
    198a:	80 81       	ld	r24, Z
    198c:	48 23       	and	r20, r24
    198e:	40 83       	st	Z, r20
    1990:	08 95       	ret

00001992 <sram_write_or>:
    1992:	87 70       	andi	r24, 0x07	; 7
    1994:	6f 77       	andi	r22, 0x7F	; 127
    1996:	e6 2f       	mov	r30, r22
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	90 e8       	ldi	r25, 0x80	; 128
    199c:	89 9f       	mul	r24, r25
    199e:	e0 0d       	add	r30, r0
    19a0:	f1 1d       	adc	r31, r1
    19a2:	11 24       	eor	r1, r1
    19a4:	80 91 54 01 	lds	r24, 0x0154
    19a8:	90 91 55 01 	lds	r25, 0x0155
    19ac:	e8 0f       	add	r30, r24
    19ae:	f9 1f       	adc	r31, r25
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2b       	or	r20, r24
    19b4:	40 83       	st	Z, r20
    19b6:	08 95       	ret

000019b8 <sram_pixel>:
    19b8:	96 2f       	mov	r25, r22
    19ba:	88 23       	and	r24, r24
    19bc:	ac f0       	brlt	.+42     	; 0x19e8 <sram_pixel+0x30>
    19be:	60 34       	cpi	r22, 0x40	; 64
    19c0:	a8 f4       	brcc	.+42     	; 0x19ec <sram_pixel+0x34>
    19c2:	46 2f       	mov	r20, r22
    19c4:	47 70       	andi	r20, 0x07	; 7
    19c6:	21 e0       	ldi	r18, 0x01	; 1
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	b9 01       	movw	r22, r18
    19cc:	02 c0       	rjmp	.+4      	; 0x19d2 <sram_pixel+0x1a>
    19ce:	66 0f       	add	r22, r22
    19d0:	77 1f       	adc	r23, r23
    19d2:	4a 95       	dec	r20
    19d4:	e2 f7       	brpl	.-8      	; 0x19ce <sram_pixel+0x16>
    19d6:	ab 01       	movw	r20, r22
    19d8:	68 2f       	mov	r22, r24
    19da:	89 2f       	mov	r24, r25
    19dc:	86 95       	lsr	r24
    19de:	86 95       	lsr	r24
    19e0:	86 95       	lsr	r24
    19e2:	d7 df       	rcall	.-82     	; 0x1992 <sram_write_or>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	08 95       	ret
    19e8:	80 e0       	ldi	r24, 0x00	; 0
    19ea:	08 95       	ret
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	08 95       	ret

000019f0 <sram_draw_new_line>:
    19f0:	2f 92       	push	r2
    19f2:	3f 92       	push	r3
    19f4:	4f 92       	push	r4
    19f6:	5f 92       	push	r5
    19f8:	6f 92       	push	r6
    19fa:	7f 92       	push	r7
    19fc:	8f 92       	push	r8
    19fe:	9f 92       	push	r9
    1a00:	af 92       	push	r10
    1a02:	bf 92       	push	r11
    1a04:	cf 92       	push	r12
    1a06:	df 92       	push	r13
    1a08:	ef 92       	push	r14
    1a0a:	ff 92       	push	r15
    1a0c:	0f 93       	push	r16
    1a0e:	1f 93       	push	r17
    1a10:	cf 93       	push	r28
    1a12:	df 93       	push	r29
    1a14:	cd b7       	in	r28, 0x3d	; 61
    1a16:	de b7       	in	r29, 0x3e	; 62
    1a18:	2c 97       	sbiw	r28, 0x0c	; 12
    1a1a:	0f b6       	in	r0, 0x3f	; 63
    1a1c:	f8 94       	cli
    1a1e:	de bf       	out	0x3e, r29	; 62
    1a20:	0f be       	out	0x3f, r0	; 63
    1a22:	cd bf       	out	0x3d, r28	; 61
    1a24:	38 2e       	mov	r3, r24
    1a26:	26 2e       	mov	r2, r22
    1a28:	04 2f       	mov	r16, r20
    1a2a:	12 2f       	mov	r17, r18
    1a2c:	48 17       	cp	r20, r24
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <sram_draw_new_line+0x42>
    1a30:	90 c0       	rjmp	.+288    	; 0x1b52 <sram_draw_new_line+0x162>
    1a32:	84 17       	cp	r24, r20
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <sram_draw_new_line+0x48>
    1a36:	79 c0       	rjmp	.+242    	; 0x1b2a <sram_draw_new_line+0x13a>
    1a38:	86 2e       	mov	r8, r22
    1a3a:	91 2c       	mov	r9, r1
    1a3c:	a4 2e       	mov	r10, r20
    1a3e:	b1 2c       	mov	r11, r1
    1a40:	48 2e       	mov	r4, r24
    1a42:	51 2c       	mov	r5, r1
    1a44:	62 2f       	mov	r22, r18
    1a46:	70 e0       	ldi	r23, 0x00	; 0
    1a48:	68 19       	sub	r22, r8
    1a4a:	79 09       	sbc	r23, r9
    1a4c:	88 27       	eor	r24, r24
    1a4e:	77 fd       	sbrc	r23, 7
    1a50:	80 95       	com	r24
    1a52:	98 2f       	mov	r25, r24
    1a54:	27 d4       	rcall	.+2126   	; 0x22a4 <__floatsisf>
    1a56:	6b 01       	movw	r12, r22
    1a58:	7c 01       	movw	r14, r24
    1a5a:	b5 01       	movw	r22, r10
    1a5c:	64 19       	sub	r22, r4
    1a5e:	75 09       	sbc	r23, r5
    1a60:	88 27       	eor	r24, r24
    1a62:	77 fd       	sbrc	r23, 7
    1a64:	80 95       	com	r24
    1a66:	98 2f       	mov	r25, r24
    1a68:	1d d4       	rcall	.+2106   	; 0x22a4 <__floatsisf>
    1a6a:	9b 01       	movw	r18, r22
    1a6c:	ac 01       	movw	r20, r24
    1a6e:	c7 01       	movw	r24, r14
    1a70:	b6 01       	movw	r22, r12
    1a72:	7d d3       	rcall	.+1786   	; 0x216e <__divsf3>
    1a74:	6d 83       	std	Y+5, r22	; 0x05
    1a76:	7e 83       	std	Y+6, r23	; 0x06
    1a78:	8f 83       	std	Y+7, r24	; 0x07
    1a7a:	98 87       	std	Y+8, r25	; 0x08
    1a7c:	63 2d       	mov	r22, r3
    1a7e:	70 e0       	ldi	r23, 0x00	; 0
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	0d d4       	rcall	.+2074   	; 0x22a0 <__floatunsisf>
    1a86:	6b 01       	movw	r12, r22
    1a88:	7c 01       	movw	r14, r24
    1a8a:	b5 01       	movw	r22, r10
    1a8c:	88 27       	eor	r24, r24
    1a8e:	77 fd       	sbrc	r23, 7
    1a90:	80 95       	com	r24
    1a92:	98 2f       	mov	r25, r24
    1a94:	07 d4       	rcall	.+2062   	; 0x22a4 <__floatsisf>
    1a96:	69 83       	std	Y+1, r22	; 0x01
    1a98:	7a 83       	std	Y+2, r23	; 0x02
    1a9a:	8b 83       	std	Y+3, r24	; 0x03
    1a9c:	9c 83       	std	Y+4, r25	; 0x04
    1a9e:	9b 01       	movw	r18, r22
    1aa0:	ac 01       	movw	r20, r24
    1aa2:	c7 01       	movw	r24, r14
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	5f d3       	rcall	.+1726   	; 0x2166 <__cmpsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	0c f0       	brlt	.+2      	; 0x1aae <sram_draw_new_line+0xbe>
    1aac:	3e c0       	rjmp	.+124    	; 0x1b2a <sram_draw_new_line+0x13a>
    1aae:	66 24       	eor	r6, r6
    1ab0:	57 fc       	sbrc	r5, 7
    1ab2:	60 94       	com	r6
    1ab4:	76 2c       	mov	r7, r6
    1ab6:	c4 01       	movw	r24, r8
    1ab8:	aa 27       	eor	r26, r26
    1aba:	97 fd       	sbrc	r25, 7
    1abc:	a0 95       	com	r26
    1abe:	ba 2f       	mov	r27, r26
    1ac0:	89 87       	std	Y+9, r24	; 0x09
    1ac2:	9a 87       	std	Y+10, r25	; 0x0a
    1ac4:	ab 87       	std	Y+11, r26	; 0x0b
    1ac6:	bc 87       	std	Y+12, r27	; 0x0c
    1ac8:	c3 01       	movw	r24, r6
    1aca:	b2 01       	movw	r22, r4
    1acc:	eb d3       	rcall	.+2006   	; 0x22a4 <__floatsisf>
    1ace:	9b 01       	movw	r18, r22
    1ad0:	ac 01       	movw	r20, r24
    1ad2:	c7 01       	movw	r24, r14
    1ad4:	b6 01       	movw	r22, r12
    1ad6:	e2 d2       	rcall	.+1476   	; 0x209c <__subsf3>
    1ad8:	2d 81       	ldd	r18, Y+5	; 0x05
    1ada:	3e 81       	ldd	r19, Y+6	; 0x06
    1adc:	4f 81       	ldd	r20, Y+7	; 0x07
    1ade:	58 85       	ldd	r21, Y+8	; 0x08
    1ae0:	95 d4       	rcall	.+2346   	; 0x240c <__mulsf3>
    1ae2:	4b 01       	movw	r8, r22
    1ae4:	5c 01       	movw	r10, r24
    1ae6:	69 85       	ldd	r22, Y+9	; 0x09
    1ae8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1aea:	8b 85       	ldd	r24, Y+11	; 0x0b
    1aec:	9c 85       	ldd	r25, Y+12	; 0x0c
    1aee:	da d3       	rcall	.+1972   	; 0x22a4 <__floatsisf>
    1af0:	9b 01       	movw	r18, r22
    1af2:	ac 01       	movw	r20, r24
    1af4:	c5 01       	movw	r24, r10
    1af6:	b4 01       	movw	r22, r8
    1af8:	d2 d2       	rcall	.+1444   	; 0x209e <__addsf3>
    1afa:	a6 d3       	rcall	.+1868   	; 0x2248 <__fixunssfsi>
    1afc:	b6 2e       	mov	r11, r22
    1afe:	c7 01       	movw	r24, r14
    1b00:	b6 01       	movw	r22, r12
    1b02:	a2 d3       	rcall	.+1860   	; 0x2248 <__fixunssfsi>
    1b04:	86 2f       	mov	r24, r22
    1b06:	6b 2d       	mov	r22, r11
    1b08:	57 df       	rcall	.-338    	; 0x19b8 <sram_pixel>
    1b0a:	2d ec       	ldi	r18, 0xCD	; 205
    1b0c:	3c ec       	ldi	r19, 0xCC	; 204
    1b0e:	4c ec       	ldi	r20, 0xCC	; 204
    1b10:	5d e3       	ldi	r21, 0x3D	; 61
    1b12:	c7 01       	movw	r24, r14
    1b14:	b6 01       	movw	r22, r12
    1b16:	c3 d2       	rcall	.+1414   	; 0x209e <__addsf3>
    1b18:	6b 01       	movw	r12, r22
    1b1a:	7c 01       	movw	r14, r24
    1b1c:	29 81       	ldd	r18, Y+1	; 0x01
    1b1e:	3a 81       	ldd	r19, Y+2	; 0x02
    1b20:	4b 81       	ldd	r20, Y+3	; 0x03
    1b22:	5c 81       	ldd	r21, Y+4	; 0x04
    1b24:	20 d3       	rcall	.+1600   	; 0x2166 <__cmpsf2>
    1b26:	88 23       	and	r24, r24
    1b28:	7c f2       	brlt	.-98     	; 0x1ac8 <sram_draw_new_line+0xd8>
    1b2a:	12 15       	cp	r17, r2
    1b2c:	c8 f1       	brcs	.+114    	; 0x1ba0 <sram_draw_new_line+0x1b0>
    1b2e:	30 12       	cpse	r3, r16
    1b30:	39 c0       	rjmp	.+114    	; 0x1ba4 <sram_draw_new_line+0x1b4>
    1b32:	21 16       	cp	r2, r17
    1b34:	30 f0       	brcs	.+12     	; 0x1b42 <sram_draw_new_line+0x152>
    1b36:	36 c0       	rjmp	.+108    	; 0x1ba4 <sram_draw_new_line+0x1b4>
    1b38:	82 2d       	mov	r24, r2
    1b3a:	21 2e       	mov	r2, r17
    1b3c:	18 2f       	mov	r17, r24
    1b3e:	02 2d       	mov	r16, r2
    1b40:	01 c0       	rjmp	.+2      	; 0x1b44 <sram_draw_new_line+0x154>
    1b42:	02 2d       	mov	r16, r2
    1b44:	60 2f       	mov	r22, r16
    1b46:	83 2d       	mov	r24, r3
    1b48:	37 df       	rcall	.-402    	; 0x19b8 <sram_pixel>
    1b4a:	0f 5f       	subi	r16, 0xFF	; 255
    1b4c:	01 17       	cp	r16, r17
    1b4e:	d0 f3       	brcs	.-12     	; 0x1b44 <sram_draw_new_line+0x154>
    1b50:	29 c0       	rjmp	.+82     	; 0x1ba4 <sram_draw_new_line+0x1b4>
    1b52:	82 2e       	mov	r8, r18
    1b54:	91 2c       	mov	r9, r1
    1b56:	a8 2e       	mov	r10, r24
    1b58:	b1 2c       	mov	r11, r1
    1b5a:	44 2e       	mov	r4, r20
    1b5c:	51 2c       	mov	r5, r1
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	68 19       	sub	r22, r8
    1b62:	79 09       	sbc	r23, r9
    1b64:	88 27       	eor	r24, r24
    1b66:	77 fd       	sbrc	r23, 7
    1b68:	80 95       	com	r24
    1b6a:	98 2f       	mov	r25, r24
    1b6c:	9b d3       	rcall	.+1846   	; 0x22a4 <__floatsisf>
    1b6e:	6b 01       	movw	r12, r22
    1b70:	7c 01       	movw	r14, r24
    1b72:	b5 01       	movw	r22, r10
    1b74:	64 19       	sub	r22, r4
    1b76:	75 09       	sbc	r23, r5
    1b78:	88 27       	eor	r24, r24
    1b7a:	77 fd       	sbrc	r23, 7
    1b7c:	80 95       	com	r24
    1b7e:	98 2f       	mov	r25, r24
    1b80:	91 d3       	rcall	.+1826   	; 0x22a4 <__floatsisf>
    1b82:	9b 01       	movw	r18, r22
    1b84:	ac 01       	movw	r20, r24
    1b86:	c7 01       	movw	r24, r14
    1b88:	b6 01       	movw	r22, r12
    1b8a:	f1 d2       	rcall	.+1506   	; 0x216e <__divsf3>
    1b8c:	6d 83       	std	Y+5, r22	; 0x05
    1b8e:	7e 83       	std	Y+6, r23	; 0x06
    1b90:	8f 83       	std	Y+7, r24	; 0x07
    1b92:	98 87       	std	Y+8, r25	; 0x08
    1b94:	82 2d       	mov	r24, r2
    1b96:	21 2e       	mov	r2, r17
    1b98:	18 2f       	mov	r17, r24
    1b9a:	30 2e       	mov	r3, r16
    1b9c:	0a 2d       	mov	r16, r10
    1b9e:	6e cf       	rjmp	.-292    	; 0x1a7c <sram_draw_new_line+0x8c>
    1ba0:	30 16       	cp	r3, r16
    1ba2:	51 f2       	breq	.-108    	; 0x1b38 <sram_draw_new_line+0x148>
    1ba4:	2c 96       	adiw	r28, 0x0c	; 12
    1ba6:	0f b6       	in	r0, 0x3f	; 63
    1ba8:	f8 94       	cli
    1baa:	de bf       	out	0x3e, r29	; 62
    1bac:	0f be       	out	0x3f, r0	; 63
    1bae:	cd bf       	out	0x3d, r28	; 61
    1bb0:	df 91       	pop	r29
    1bb2:	cf 91       	pop	r28
    1bb4:	1f 91       	pop	r17
    1bb6:	0f 91       	pop	r16
    1bb8:	ff 90       	pop	r15
    1bba:	ef 90       	pop	r14
    1bbc:	df 90       	pop	r13
    1bbe:	cf 90       	pop	r12
    1bc0:	bf 90       	pop	r11
    1bc2:	af 90       	pop	r10
    1bc4:	9f 90       	pop	r9
    1bc6:	8f 90       	pop	r8
    1bc8:	7f 90       	pop	r7
    1bca:	6f 90       	pop	r6
    1bcc:	5f 90       	pop	r5
    1bce:	4f 90       	pop	r4
    1bd0:	3f 90       	pop	r3
    1bd2:	2f 90       	pop	r2
    1bd4:	08 95       	ret

00001bd6 <sram_draw_line>:
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	d8 2f       	mov	r29, r24
    1bdc:	c6 2f       	mov	r28, r22
    1bde:	26 2f       	mov	r18, r22
    1be0:	48 2f       	mov	r20, r24
    1be2:	60 91 54 03 	lds	r22, 0x0354
    1be6:	80 91 55 03 	lds	r24, 0x0355
    1bea:	02 df       	rcall	.-508    	; 0x19f0 <sram_draw_new_line>
    1bec:	d0 93 55 03 	sts	0x0355, r29
    1bf0:	c0 93 54 03 	sts	0x0354, r28
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <sram_push_line>:
    1bfa:	0f 93       	push	r16
    1bfc:	1f 93       	push	r17
    1bfe:	cf 93       	push	r28
    1c00:	df 93       	push	r29
    1c02:	08 2f       	mov	r16, r24
    1c04:	71 de       	rcall	.-798    	; 0x18e8 <sram_goto_line>
    1c06:	80 e8       	ldi	r24, 0x80	; 128
    1c08:	08 9f       	mul	r16, r24
    1c0a:	80 01       	movw	r16, r0
    1c0c:	11 24       	eor	r1, r1
    1c0e:	c0 e8       	ldi	r28, 0x80	; 128
    1c10:	d0 e0       	ldi	r29, 0x00	; 0
    1c12:	00 58       	subi	r16, 0x80	; 128
    1c14:	1f 4f       	sbci	r17, 0xFF	; 255
    1c16:	c8 01       	movw	r24, r16
    1c18:	8c 1b       	sub	r24, r28
    1c1a:	9d 0b       	sbc	r25, r29
    1c1c:	e0 91 54 01 	lds	r30, 0x0154
    1c20:	f0 91 55 01 	lds	r31, 0x0155
    1c24:	e8 0f       	add	r30, r24
    1c26:	f9 1f       	adc	r31, r25
    1c28:	80 81       	ld	r24, Z
    1c2a:	33 dd       	rcall	.-1434   	; 0x1692 <write_d>
    1c2c:	21 97       	sbiw	r28, 0x01	; 1
    1c2e:	20 97       	sbiw	r28, 0x00	; 0
    1c30:	91 f7       	brne	.-28     	; 0x1c16 <sram_push_line+0x1c>
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	1f 91       	pop	r17
    1c38:	0f 91       	pop	r16
    1c3a:	08 95       	ret

00001c3c <sram_update_oled>:
    1c3c:	cf 93       	push	r28
    1c3e:	c0 e0       	ldi	r28, 0x00	; 0
    1c40:	8c 2f       	mov	r24, r28
    1c42:	db df       	rcall	.-74     	; 0x1bfa <sram_push_line>
    1c44:	cf 5f       	subi	r28, 0xFF	; 255
    1c46:	c8 30       	cpi	r28, 0x08	; 8
    1c48:	d9 f7       	brne	.-10     	; 0x1c40 <sram_update_oled+0x4>
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <sram_init>:
    1c4e:	20 e0       	ldi	r18, 0x00	; 0
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	b0 e8       	ldi	r27, 0x80	; 128
    1c54:	a0 e0       	ldi	r26, 0x00	; 0
    1c56:	11 c0       	rjmp	.+34     	; 0x1c7a <sram_init+0x2c>
    1c58:	a9 01       	movw	r20, r18
    1c5a:	48 1b       	sub	r20, r24
    1c5c:	59 0b       	sbc	r21, r25
    1c5e:	e0 91 54 01 	lds	r30, 0x0154
    1c62:	f0 91 55 01 	lds	r31, 0x0155
    1c66:	e4 0f       	add	r30, r20
    1c68:	f5 1f       	adc	r31, r21
    1c6a:	10 82       	st	Z, r1
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	99 f7       	brne	.-26     	; 0x1c58 <sram_init+0xa>
    1c72:	21 15       	cp	r18, r1
    1c74:	84 e0       	ldi	r24, 0x04	; 4
    1c76:	38 07       	cpc	r19, r24
    1c78:	29 f0       	breq	.+10     	; 0x1c84 <sram_init+0x36>
    1c7a:	8b 2f       	mov	r24, r27
    1c7c:	9a 2f       	mov	r25, r26
    1c7e:	20 58       	subi	r18, 0x80	; 128
    1c80:	3f 4f       	sbci	r19, 0xFF	; 255
    1c82:	ea cf       	rjmp	.-44     	; 0x1c58 <sram_init+0xa>
    1c84:	10 92 4b 03 	sts	0x034B, r1
    1c88:	10 92 4a 03 	sts	0x034A, r1
    1c8c:	d7 cf       	rjmp	.-82     	; 0x1c3c <sram_update_oled>
    1c8e:	08 95       	ret

00001c90 <sram_clear_line>:
    1c90:	cf 93       	push	r28
    1c92:	c8 2f       	mov	r28, r24
    1c94:	2b dd       	rcall	.-1450   	; 0x16ec <oled_goto_line>
    1c96:	c8 30       	cpi	r28, 0x08	; 8
    1c98:	b8 f4       	brcc	.+46     	; 0x1cc8 <sram_clear_line+0x38>
    1c9a:	20 e8       	ldi	r18, 0x80	; 128
    1c9c:	c2 9f       	mul	r28, r18
    1c9e:	c0 01       	movw	r24, r0
    1ca0:	11 24       	eor	r1, r1
    1ca2:	20 e8       	ldi	r18, 0x80	; 128
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	80 58       	subi	r24, 0x80	; 128
    1ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    1caa:	ac 01       	movw	r20, r24
    1cac:	42 1b       	sub	r20, r18
    1cae:	53 0b       	sbc	r21, r19
    1cb0:	e0 91 54 01 	lds	r30, 0x0154
    1cb4:	f0 91 55 01 	lds	r31, 0x0155
    1cb8:	e4 0f       	add	r30, r20
    1cba:	f5 1f       	adc	r31, r21
    1cbc:	10 82       	st	Z, r1
    1cbe:	21 50       	subi	r18, 0x01	; 1
    1cc0:	31 09       	sbc	r19, r1
    1cc2:	21 15       	cp	r18, r1
    1cc4:	31 05       	cpc	r19, r1
    1cc6:	89 f7       	brne	.-30     	; 0x1caa <sram_clear_line+0x1a>
    1cc8:	cf 91       	pop	r28
    1cca:	08 95       	ret

00001ccc <sram_scroll_horizontally>:
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	22 23       	and	r18, r18
    1cda:	09 f4       	brne	.+2      	; 0x1cde <sram_scroll_horizontally+0x12>
    1cdc:	50 c0       	rjmp	.+160    	; 0x1d7e <sram_scroll_horizontally+0xb2>
    1cde:	a0 91 54 01 	lds	r26, 0x0154
    1ce2:	b0 91 55 01 	lds	r27, 0x0155
    1ce6:	90 e8       	ldi	r25, 0x80	; 128
    1ce8:	89 9f       	mul	r24, r25
    1cea:	a0 0d       	add	r26, r0
    1cec:	b1 1d       	adc	r27, r1
    1cee:	11 24       	eor	r1, r1
    1cf0:	6c e4       	ldi	r22, 0x4C	; 76
    1cf2:	73 e0       	ldi	r23, 0x03	; 3
    1cf4:	fb 01       	movw	r30, r22
    1cf6:	9d 91       	ld	r25, X+
    1cf8:	91 93       	st	Z+, r25
    1cfa:	9e 2f       	mov	r25, r30
    1cfc:	96 1b       	sub	r25, r22
    1cfe:	92 17       	cp	r25, r18
    1d00:	d0 f3       	brcs	.-12     	; 0x1cf6 <sram_scroll_horizontally+0x2a>
    1d02:	a2 2f       	mov	r26, r18
    1d04:	b0 e0       	ldi	r27, 0x00	; 0
    1d06:	c0 e8       	ldi	r28, 0x80	; 128
    1d08:	d0 e0       	ldi	r29, 0x00	; 0
    1d0a:	7e 01       	movw	r14, r28
    1d0c:	ea 1a       	sub	r14, r26
    1d0e:	fb 0a       	sbc	r15, r27
    1d10:	1e 14       	cp	r1, r14
    1d12:	1f 04       	cpc	r1, r15
    1d14:	d4 f1       	brlt	.+116    	; 0x1d8a <sram_scroll_horizontally+0xbe>
    1d16:	18 c0       	rjmp	.+48     	; 0x1d48 <sram_scroll_horizontally+0x7c>
    1d18:	60 91 54 01 	lds	r22, 0x0154
    1d1c:	70 91 55 01 	lds	r23, 0x0155
    1d20:	40 0f       	add	r20, r16
    1d22:	51 1f       	adc	r21, r17
    1d24:	fb 01       	movw	r30, r22
    1d26:	e4 0f       	add	r30, r20
    1d28:	f5 1f       	adc	r31, r21
    1d2a:	4a 0f       	add	r20, r26
    1d2c:	5b 1f       	adc	r21, r27
    1d2e:	64 0f       	add	r22, r20
    1d30:	75 1f       	adc	r23, r21
    1d32:	eb 01       	movw	r28, r22
    1d34:	38 81       	ld	r19, Y
    1d36:	30 83       	st	Z, r19
    1d38:	9f 5f       	subi	r25, 0xFF	; 255
    1d3a:	49 2f       	mov	r20, r25
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	4e 15       	cp	r20, r14
    1d40:	5f 05       	cpc	r21, r15
    1d42:	54 f3       	brlt	.-44     	; 0x1d18 <sram_scroll_horizontally+0x4c>
    1d44:	22 23       	and	r18, r18
    1d46:	49 f1       	breq	.+82     	; 0x1d9a <sram_scroll_horizontally+0xce>
    1d48:	d0 e8       	ldi	r29, 0x80	; 128
    1d4a:	8d 9f       	mul	r24, r29
    1d4c:	a0 01       	movw	r20, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	4a 1b       	sub	r20, r26
    1d52:	5b 0b       	sbc	r21, r27
    1d54:	6c e4       	ldi	r22, 0x4C	; 76
    1d56:	73 e0       	ldi	r23, 0x03	; 3
    1d58:	fb 01       	movw	r30, r22
    1d5a:	4d 5c       	subi	r20, 0xCD	; 205
    1d5c:	52 40       	sbci	r21, 0x02	; 2
    1d5e:	ca 01       	movw	r24, r20
    1d60:	8e 0f       	add	r24, r30
    1d62:	9f 1f       	adc	r25, r31
    1d64:	a0 91 54 01 	lds	r26, 0x0154
    1d68:	b0 91 55 01 	lds	r27, 0x0155
    1d6c:	a8 0f       	add	r26, r24
    1d6e:	b9 1f       	adc	r27, r25
    1d70:	81 91       	ld	r24, Z+
    1d72:	8c 93       	st	X, r24
    1d74:	8e 2f       	mov	r24, r30
    1d76:	86 1b       	sub	r24, r22
    1d78:	82 17       	cp	r24, r18
    1d7a:	88 f3       	brcs	.-30     	; 0x1d5e <sram_scroll_horizontally+0x92>
    1d7c:	0e c0       	rjmp	.+28     	; 0x1d9a <sram_scroll_horizontally+0xce>
    1d7e:	68 94       	set
    1d80:	ee 24       	eor	r14, r14
    1d82:	e7 f8       	bld	r14, 7
    1d84:	f1 2c       	mov	r15, r1
    1d86:	a0 e0       	ldi	r26, 0x00	; 0
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	90 e8       	ldi	r25, 0x80	; 128
    1d8c:	89 9f       	mul	r24, r25
    1d8e:	80 01       	movw	r16, r0
    1d90:	11 24       	eor	r1, r1
    1d92:	40 e0       	ldi	r20, 0x00	; 0
    1d94:	50 e0       	ldi	r21, 0x00	; 0
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	bf cf       	rjmp	.-130    	; 0x1d18 <sram_scroll_horizontally+0x4c>
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	ff 90       	pop	r15
    1da4:	ef 90       	pop	r14
    1da6:	08 95       	ret

00001da8 <sram_scroll_line>:
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	d8 2f       	mov	r29, r24
    1dae:	c6 2f       	mov	r28, r22
    1db0:	69 30       	cpi	r22, 0x09	; 9
    1db2:	18 f0       	brcs	.+6      	; 0x1dba <sram_scroll_line+0x12>
    1db4:	c8 50       	subi	r28, 0x08	; 8
    1db6:	6c 2f       	mov	r22, r28
    1db8:	f7 df       	rcall	.-18     	; 0x1da8 <sram_scroll_line>
    1dba:	2c 2f       	mov	r18, r28
    1dbc:	4f e7       	ldi	r20, 0x7F	; 127
    1dbe:	60 e0       	ldi	r22, 0x00	; 0
    1dc0:	8d 2f       	mov	r24, r29
    1dc2:	84 df       	rcall	.-248    	; 0x1ccc <sram_scroll_horizontally>
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <sram_scroll_vertically>:
    1dca:	2f 92       	push	r2
    1dcc:	3f 92       	push	r3
    1dce:	4f 92       	push	r4
    1dd0:	5f 92       	push	r5
    1dd2:	6f 92       	push	r6
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <sram_scroll_vertically+0x26>
    1df0:	00 d0       	rcall	.+0      	; 0x1df2 <sram_scroll_vertically+0x28>
    1df2:	1f 92       	push	r1
    1df4:	cd b7       	in	r28, 0x3d	; 61
    1df6:	de b7       	in	r29, 0x3e	; 62
    1df8:	c8 2e       	mov	r12, r24
    1dfa:	f6 2e       	mov	r15, r22
    1dfc:	24 2e       	mov	r2, r20
    1dfe:	29 83       	std	Y+1, r18	; 0x01
    1e00:	40 2e       	mov	r4, r16
    1e02:	0f 2e       	mov	r0, r31
    1e04:	f7 e0       	ldi	r31, 0x07	; 7
    1e06:	af 2e       	mov	r10, r31
    1e08:	f0 2d       	mov	r31, r0
    1e0a:	51 2c       	mov	r5, r1
    1e0c:	61 2c       	mov	r6, r1
    1e0e:	71 2c       	mov	r7, r1
    1e10:	81 2c       	mov	r8, r1
    1e12:	10 e0       	ldi	r17, 0x00	; 0
    1e14:	1a 82       	std	Y+2, r1	; 0x02
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	a0 e0       	ldi	r26, 0x00	; 0
    1e1a:	25 2d       	mov	r18, r5
    1e1c:	36 2d       	mov	r19, r6
    1e1e:	47 2d       	mov	r20, r7
    1e20:	58 2d       	mov	r21, r8
    1e22:	61 2f       	mov	r22, r17
    1e24:	7a 81       	ldd	r23, Y+2	; 0x02
    1e26:	8b 2f       	mov	r24, r27
    1e28:	9a 2f       	mov	r25, r26
    1e2a:	08 e0       	ldi	r16, 0x08	; 8
    1e2c:	81 d3       	rcall	.+1794   	; 0x2530 <__ashldi3>
    1e2e:	52 2e       	mov	r5, r18
    1e30:	63 2e       	mov	r6, r19
    1e32:	74 2e       	mov	r7, r20
    1e34:	85 2e       	mov	r8, r21
    1e36:	16 2f       	mov	r17, r22
    1e38:	b7 2e       	mov	r11, r23
    1e3a:	d8 2e       	mov	r13, r24
    1e3c:	e9 2e       	mov	r14, r25
    1e3e:	6c 2d       	mov	r22, r12
    1e40:	8a 2d       	mov	r24, r10
    1e42:	83 dd       	rcall	.-1274   	; 0x194a <sram_read>
    1e44:	58 2a       	or	r5, r24
    1e46:	ba 82       	std	Y+2, r11	; 0x02
    1e48:	bd 2d       	mov	r27, r13
    1e4a:	ae 2d       	mov	r26, r14
    1e4c:	aa 94       	dec	r10
    1e4e:	8f ef       	ldi	r24, 0xFF	; 255
    1e50:	a8 12       	cpse	r10, r24
    1e52:	e3 cf       	rjmp	.-58     	; 0x1e1a <sram_scroll_vertically+0x50>
    1e54:	31 2c       	mov	r3, r1
    1e56:	ef e3       	ldi	r30, 0x3F	; 63
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	e2 19       	sub	r30, r2
    1e5c:	f3 09       	sbc	r31, r3
    1e5e:	2f ef       	ldi	r18, 0xFF	; 255
    1e60:	3f ef       	ldi	r19, 0xFF	; 255
    1e62:	4f ef       	ldi	r20, 0xFF	; 255
    1e64:	5f ef       	ldi	r21, 0xFF	; 255
    1e66:	6f ef       	ldi	r22, 0xFF	; 255
    1e68:	7f ef       	ldi	r23, 0xFF	; 255
    1e6a:	9f ef       	ldi	r25, 0xFF	; 255
    1e6c:	0e 2f       	mov	r16, r30
    1e6e:	60 d3       	rcall	.+1728   	; 0x2530 <__ashldi3>
    1e70:	ef 0d       	add	r30, r15
    1e72:	f1 1d       	adc	r31, r1
    1e74:	0e 2f       	mov	r16, r30
    1e76:	77 d3       	rcall	.+1774   	; 0x2566 <__lshrdi3>
    1e78:	0f 2d       	mov	r16, r15
    1e7a:	5a d3       	rcall	.+1716   	; 0x2530 <__ashldi3>
    1e7c:	e2 2f       	mov	r30, r18
    1e7e:	93 2e       	mov	r9, r19
    1e80:	a4 2e       	mov	r10, r20
    1e82:	b5 2e       	mov	r11, r21
    1e84:	6b 83       	std	Y+3, r22	; 0x03
    1e86:	d7 2e       	mov	r13, r23
    1e88:	e8 2e       	mov	r14, r24
    1e8a:	f9 2f       	mov	r31, r25
    1e8c:	44 20       	and	r4, r4
    1e8e:	d9 f0       	breq	.+54     	; 0x1ec6 <sram_scroll_vertically+0xfc>
    1e90:	89 81       	ldd	r24, Y+1	; 0x01
    1e92:	28 1a       	sub	r2, r24
    1e94:	31 08       	sbc	r3, r1
    1e96:	87 fd       	sbrc	r24, 7
    1e98:	33 94       	inc	r3
    1e9a:	25 2d       	mov	r18, r5
    1e9c:	36 2d       	mov	r19, r6
    1e9e:	47 2d       	mov	r20, r7
    1ea0:	58 2d       	mov	r21, r8
    1ea2:	61 2f       	mov	r22, r17
    1ea4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea6:	8b 2f       	mov	r24, r27
    1ea8:	9a 2f       	mov	r25, r26
    1eaa:	02 2d       	mov	r16, r2
    1eac:	5c d3       	rcall	.+1720   	; 0x2566 <__lshrdi3>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	09 80       	ldd	r0, Y+1	; 0x01
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <sram_scroll_vertically+0xf0>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <sram_scroll_vertically+0xec>
    1ebe:	44 24       	eor	r4, r4
    1ec0:	4a 94       	dec	r4
    1ec2:	48 0e       	add	r4, r24
    1ec4:	42 22       	and	r4, r18
    1ec6:	25 2d       	mov	r18, r5
    1ec8:	2e 23       	and	r18, r30
    1eca:	36 2d       	mov	r19, r6
    1ecc:	39 21       	and	r19, r9
    1ece:	47 2d       	mov	r20, r7
    1ed0:	4a 21       	and	r20, r10
    1ed2:	58 2d       	mov	r21, r8
    1ed4:	5b 21       	and	r21, r11
    1ed6:	6b 81       	ldd	r22, Y+3	; 0x03
    1ed8:	61 23       	and	r22, r17
    1eda:	7a 81       	ldd	r23, Y+2	; 0x02
    1edc:	7d 21       	and	r23, r13
    1ede:	8b 2f       	mov	r24, r27
    1ee0:	8e 21       	and	r24, r14
    1ee2:	9f 2f       	mov	r25, r31
    1ee4:	9a 23       	and	r25, r26
    1ee6:	09 81       	ldd	r16, Y+1	; 0x01
    1ee8:	23 d3       	rcall	.+1606   	; 0x2530 <__ashldi3>
    1eea:	0f 2d       	mov	r16, r15
    1eec:	3c d3       	rcall	.+1656   	; 0x2566 <__lshrdi3>
    1eee:	24 29       	or	r18, r4
    1ef0:	1f d3       	rcall	.+1598   	; 0x2530 <__ashldi3>
    1ef2:	12 2f       	mov	r17, r18
    1ef4:	1e 23       	and	r17, r30
    1ef6:	23 2e       	mov	r2, r19
    1ef8:	29 20       	and	r2, r9
    1efa:	34 2e       	mov	r3, r20
    1efc:	3a 20       	and	r3, r10
    1efe:	45 2e       	mov	r4, r21
    1f00:	4b 20       	and	r4, r11
    1f02:	5b 80       	ldd	r5, Y+3	; 0x03
    1f04:	56 22       	and	r5, r22
    1f06:	67 2e       	mov	r6, r23
    1f08:	6d 20       	and	r6, r13
    1f0a:	78 2e       	mov	r7, r24
    1f0c:	7e 20       	and	r7, r14
    1f0e:	8f 2e       	mov	r8, r31
    1f10:	89 22       	and	r8, r25
    1f12:	e0 95       	com	r30
    1f14:	ed 83       	std	Y+5, r30	; 0x05
    1f16:	90 94       	com	r9
    1f18:	a0 94       	com	r10
    1f1a:	b0 94       	com	r11
    1f1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1f1e:	e0 95       	com	r30
    1f20:	e9 83       	std	Y+1, r30	; 0x01
    1f22:	d0 94       	com	r13
    1f24:	e0 94       	com	r14
    1f26:	ff 2e       	mov	r15, r31
    1f28:	f0 94       	com	r15
    1f2a:	1a 82       	std	Y+2, r1	; 0x02
    1f2c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f2e:	6c 2d       	mov	r22, r12
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	1c dd       	rcall	.-1480   	; 0x196c <sram_write_and>
    1f34:	2d 81       	ldd	r18, Y+5	; 0x05
    1f36:	39 2d       	mov	r19, r9
    1f38:	4a 2d       	mov	r20, r10
    1f3a:	5b 2d       	mov	r21, r11
    1f3c:	69 81       	ldd	r22, Y+1	; 0x01
    1f3e:	7d 2d       	mov	r23, r13
    1f40:	8e 2d       	mov	r24, r14
    1f42:	9f 2d       	mov	r25, r15
    1f44:	08 e0       	ldi	r16, 0x08	; 8
    1f46:	0f d3       	rcall	.+1566   	; 0x2566 <__lshrdi3>
    1f48:	2d 83       	std	Y+5, r18	; 0x05
    1f4a:	93 2e       	mov	r9, r19
    1f4c:	a4 2e       	mov	r10, r20
    1f4e:	b5 2e       	mov	r11, r21
    1f50:	69 83       	std	Y+1, r22	; 0x01
    1f52:	d7 2e       	mov	r13, r23
    1f54:	e8 2e       	mov	r14, r24
    1f56:	f9 2e       	mov	r15, r25
    1f58:	41 2f       	mov	r20, r17
    1f5a:	6c 2d       	mov	r22, r12
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	19 dd       	rcall	.-1486   	; 0x1992 <sram_write_or>
    1f60:	21 2f       	mov	r18, r17
    1f62:	32 2d       	mov	r19, r2
    1f64:	43 2d       	mov	r20, r3
    1f66:	54 2d       	mov	r21, r4
    1f68:	65 2d       	mov	r22, r5
    1f6a:	76 2d       	mov	r23, r6
    1f6c:	87 2d       	mov	r24, r7
    1f6e:	98 2d       	mov	r25, r8
    1f70:	fa d2       	rcall	.+1524   	; 0x2566 <__lshrdi3>
    1f72:	12 2f       	mov	r17, r18
    1f74:	23 2e       	mov	r2, r19
    1f76:	34 2e       	mov	r3, r20
    1f78:	45 2e       	mov	r4, r21
    1f7a:	56 2e       	mov	r5, r22
    1f7c:	67 2e       	mov	r6, r23
    1f7e:	78 2e       	mov	r7, r24
    1f80:	89 2e       	mov	r8, r25
    1f82:	fa 81       	ldd	r31, Y+2	; 0x02
    1f84:	ff 5f       	subi	r31, 0xFF	; 255
    1f86:	fa 83       	std	Y+2, r31	; 0x02
    1f88:	f8 30       	cpi	r31, 0x08	; 8
    1f8a:	81 f6       	brne	.-96     	; 0x1f2c <sram_scroll_vertically+0x162>
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	1f 91       	pop	r17
    1f9c:	0f 91       	pop	r16
    1f9e:	ff 90       	pop	r15
    1fa0:	ef 90       	pop	r14
    1fa2:	df 90       	pop	r13
    1fa4:	cf 90       	pop	r12
    1fa6:	bf 90       	pop	r11
    1fa8:	af 90       	pop	r10
    1faa:	9f 90       	pop	r9
    1fac:	8f 90       	pop	r8
    1fae:	7f 90       	pop	r7
    1fb0:	6f 90       	pop	r6
    1fb2:	5f 90       	pop	r5
    1fb4:	4f 90       	pop	r4
    1fb6:	3f 90       	pop	r3
    1fb8:	2f 90       	pop	r2
    1fba:	08 95       	ret

00001fbc <sram_set_point>:
    1fbc:	80 93 55 03 	sts	0x0355, r24
    1fc0:	60 93 54 03 	sts	0x0354, r22
    1fc4:	08 95       	ret

00001fc6 <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	c8 2f       	mov	r28, r24
    1fd0:	d6 2f       	mov	r29, r22
    1fd2:	14 2f       	mov	r17, r20
    1fd4:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    1fd6:	80 93 55 03 	sts	0x0355, r24
	prev_y = y0;
    1fda:	60 93 54 03 	sts	0x0354, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    1fde:	62 2f       	mov	r22, r18
    1fe0:	fa dd       	rcall	.-1036   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x1,y1);
    1fe2:	60 2f       	mov	r22, r16
    1fe4:	81 2f       	mov	r24, r17
    1fe6:	f7 dd       	rcall	.-1042   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x1,y0);
    1fe8:	6d 2f       	mov	r22, r29
    1fea:	81 2f       	mov	r24, r17
    1fec:	f4 dd       	rcall	.-1048   	; 0x1bd6 <sram_draw_line>
	sram_draw_line(x0,y0);
    1fee:	6d 2f       	mov	r22, r29
    1ff0:	8c 2f       	mov	r24, r28
    1ff2:	f1 dd       	rcall	.-1054   	; 0x1bd6 <sram_draw_line>
}
    1ff4:	df 91       	pop	r29
    1ff6:	cf 91       	pop	r28
    1ff8:	1f 91       	pop	r17
    1ffa:	0f 91       	pop	r16
    1ffc:	08 95       	ret

00001ffe <initialize_timer>:

#include "timer.h"

uint8_t FLAG_timer_1_complete;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    1ffe:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    2000:	89 b7       	in	r24, 0x39	; 57
    2002:	81 60       	ori	r24, 0x01	; 1
    2004:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    2006:	83 b7       	in	r24, 0x33	; 51
    2008:	8d 60       	ori	r24, 0x0D	; 13
    200a:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e0       	ldi	r20, 0x00	; 0
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	60 ec       	ldi	r22, 0xC0	; 192
    2014:	72 e1       	ldi	r23, 0x12	; 18
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	6e d2       	rcall	.+1244   	; 0x24f8 <__divmodsi4>
    201c:	21 bf       	out	0x31, r18	; 49
	FLAG_timer_1_complete = 1;//since we are initializing we want to refresh the page
    201e:	81 e0       	ldi	r24, 0x01	; 1
    2020:	80 93 56 03 	sts	0x0356, r24
    2024:	08 95       	ret

00002026 <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_timer_1_complete == 1)
    2026:	80 91 56 03 	lds	r24, 0x0356
    202a:	81 30       	cpi	r24, 0x01	; 1
    202c:	19 f4       	brne	.+6      	; 0x2034 <timer_check_flag+0xe>
	{
		FLAG_timer_1_complete = 0;
    202e:	10 92 56 03 	sts	0x0356, r1
		return 1;
    2032:	08 95       	ret
	}
	return 0;
    2034:	80 e0       	ldi	r24, 0x00	; 0
}
    2036:	08 95       	ret

00002038 <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_timer_1_complete = 0;
    2038:	10 92 56 03 	sts	0x0356, r1
    203c:	08 95       	ret

0000203e <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	8f 93       	push	r24
	FLAG_timer_1_complete = 1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	80 93 56 03 	sts	0x0356, r24
}
    2050:	8f 91       	pop	r24
    2052:	0f 90       	pop	r0
    2054:	0f be       	out	0x3f, r0	; 63
    2056:	0f 90       	pop	r0
    2058:	1f 90       	pop	r1
    205a:	18 95       	reti

0000205c <timer_delay>:

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
    205c:	cf 93       	push	r28
    205e:	df 93       	push	r29
	timer_ms = (FPS*((double)timer_ms/1000));
    2060:	bc 01       	movw	r22, r24
    2062:	88 27       	eor	r24, r24
    2064:	77 fd       	sbrc	r23, 7
    2066:	80 95       	com	r24
    2068:	98 2f       	mov	r25, r24
    206a:	1c d1       	rcall	.+568    	; 0x22a4 <__floatsisf>
    206c:	20 e0       	ldi	r18, 0x00	; 0
    206e:	30 e0       	ldi	r19, 0x00	; 0
    2070:	4a e7       	ldi	r20, 0x7A	; 122
    2072:	54 e4       	ldi	r21, 0x44	; 68
    2074:	7c d0       	rcall	.+248    	; 0x216e <__divsf3>
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e7       	ldi	r20, 0x70	; 112
    207c:	52 e4       	ldi	r21, 0x42	; 66
    207e:	c6 d1       	rcall	.+908    	; 0x240c <__mulsf3>
    2080:	de d0       	rcall	.+444    	; 0x223e <__fixsfsi>
    2082:	eb 01       	movw	r28, r22
	while(timer_ms>0){
    2084:	1c 16       	cp	r1, r28
    2086:	1d 06       	cpc	r1, r29
    2088:	34 f4       	brge	.+12     	; 0x2096 <timer_delay+0x3a>
		if (timer_check_flag())
    208a:	cd df       	rcall	.-102    	; 0x2026 <timer_check_flag>
    208c:	81 11       	cpse	r24, r1
		{
			timer_ms--;
    208e:	21 97       	sbiw	r28, 0x01	; 1
	FLAG_timer_1_complete = 1;
}

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
	timer_ms = (FPS*((double)timer_ms/1000));
	while(timer_ms>0){
    2090:	1c 16       	cp	r1, r28
    2092:	1d 06       	cpc	r1, r29
    2094:	d4 f3       	brlt	.-12     	; 0x208a <timer_delay+0x2e>
		if (timer_check_flag())
		{
			timer_ms--;
		}
	}
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	08 95       	ret

0000209c <__subsf3>:
    209c:	50 58       	subi	r21, 0x80	; 128

0000209e <__addsf3>:
    209e:	bb 27       	eor	r27, r27
    20a0:	aa 27       	eor	r26, r26
    20a2:	0e d0       	rcall	.+28     	; 0x20c0 <__addsf3x>
    20a4:	75 c1       	rjmp	.+746    	; 0x2390 <__fp_round>
    20a6:	66 d1       	rcall	.+716    	; 0x2374 <__fp_pscA>
    20a8:	30 f0       	brcs	.+12     	; 0x20b6 <__addsf3+0x18>
    20aa:	6b d1       	rcall	.+726    	; 0x2382 <__fp_pscB>
    20ac:	20 f0       	brcs	.+8      	; 0x20b6 <__addsf3+0x18>
    20ae:	31 f4       	brne	.+12     	; 0x20bc <__addsf3+0x1e>
    20b0:	9f 3f       	cpi	r25, 0xFF	; 255
    20b2:	11 f4       	brne	.+4      	; 0x20b8 <__addsf3+0x1a>
    20b4:	1e f4       	brtc	.+6      	; 0x20bc <__addsf3+0x1e>
    20b6:	5b c1       	rjmp	.+694    	; 0x236e <__fp_nan>
    20b8:	0e f4       	brtc	.+2      	; 0x20bc <__addsf3+0x1e>
    20ba:	e0 95       	com	r30
    20bc:	e7 fb       	bst	r30, 7
    20be:	51 c1       	rjmp	.+674    	; 0x2362 <__fp_inf>

000020c0 <__addsf3x>:
    20c0:	e9 2f       	mov	r30, r25
    20c2:	77 d1       	rcall	.+750    	; 0x23b2 <__fp_split3>
    20c4:	80 f3       	brcs	.-32     	; 0x20a6 <__addsf3+0x8>
    20c6:	ba 17       	cp	r27, r26
    20c8:	62 07       	cpc	r22, r18
    20ca:	73 07       	cpc	r23, r19
    20cc:	84 07       	cpc	r24, r20
    20ce:	95 07       	cpc	r25, r21
    20d0:	18 f0       	brcs	.+6      	; 0x20d8 <__addsf3x+0x18>
    20d2:	71 f4       	brne	.+28     	; 0x20f0 <__addsf3x+0x30>
    20d4:	9e f5       	brtc	.+102    	; 0x213c <__addsf3x+0x7c>
    20d6:	8f c1       	rjmp	.+798    	; 0x23f6 <__fp_zero>
    20d8:	0e f4       	brtc	.+2      	; 0x20dc <__addsf3x+0x1c>
    20da:	e0 95       	com	r30
    20dc:	0b 2e       	mov	r0, r27
    20de:	ba 2f       	mov	r27, r26
    20e0:	a0 2d       	mov	r26, r0
    20e2:	0b 01       	movw	r0, r22
    20e4:	b9 01       	movw	r22, r18
    20e6:	90 01       	movw	r18, r0
    20e8:	0c 01       	movw	r0, r24
    20ea:	ca 01       	movw	r24, r20
    20ec:	a0 01       	movw	r20, r0
    20ee:	11 24       	eor	r1, r1
    20f0:	ff 27       	eor	r31, r31
    20f2:	59 1b       	sub	r21, r25
    20f4:	99 f0       	breq	.+38     	; 0x211c <__addsf3x+0x5c>
    20f6:	59 3f       	cpi	r21, 0xF9	; 249
    20f8:	50 f4       	brcc	.+20     	; 0x210e <__addsf3x+0x4e>
    20fa:	50 3e       	cpi	r21, 0xE0	; 224
    20fc:	68 f1       	brcs	.+90     	; 0x2158 <__addsf3x+0x98>
    20fe:	1a 16       	cp	r1, r26
    2100:	f0 40       	sbci	r31, 0x00	; 0
    2102:	a2 2f       	mov	r26, r18
    2104:	23 2f       	mov	r18, r19
    2106:	34 2f       	mov	r19, r20
    2108:	44 27       	eor	r20, r20
    210a:	58 5f       	subi	r21, 0xF8	; 248
    210c:	f3 cf       	rjmp	.-26     	; 0x20f4 <__addsf3x+0x34>
    210e:	46 95       	lsr	r20
    2110:	37 95       	ror	r19
    2112:	27 95       	ror	r18
    2114:	a7 95       	ror	r26
    2116:	f0 40       	sbci	r31, 0x00	; 0
    2118:	53 95       	inc	r21
    211a:	c9 f7       	brne	.-14     	; 0x210e <__addsf3x+0x4e>
    211c:	7e f4       	brtc	.+30     	; 0x213c <__addsf3x+0x7c>
    211e:	1f 16       	cp	r1, r31
    2120:	ba 0b       	sbc	r27, r26
    2122:	62 0b       	sbc	r22, r18
    2124:	73 0b       	sbc	r23, r19
    2126:	84 0b       	sbc	r24, r20
    2128:	ba f0       	brmi	.+46     	; 0x2158 <__addsf3x+0x98>
    212a:	91 50       	subi	r25, 0x01	; 1
    212c:	a1 f0       	breq	.+40     	; 0x2156 <__addsf3x+0x96>
    212e:	ff 0f       	add	r31, r31
    2130:	bb 1f       	adc	r27, r27
    2132:	66 1f       	adc	r22, r22
    2134:	77 1f       	adc	r23, r23
    2136:	88 1f       	adc	r24, r24
    2138:	c2 f7       	brpl	.-16     	; 0x212a <__addsf3x+0x6a>
    213a:	0e c0       	rjmp	.+28     	; 0x2158 <__addsf3x+0x98>
    213c:	ba 0f       	add	r27, r26
    213e:	62 1f       	adc	r22, r18
    2140:	73 1f       	adc	r23, r19
    2142:	84 1f       	adc	r24, r20
    2144:	48 f4       	brcc	.+18     	; 0x2158 <__addsf3x+0x98>
    2146:	87 95       	ror	r24
    2148:	77 95       	ror	r23
    214a:	67 95       	ror	r22
    214c:	b7 95       	ror	r27
    214e:	f7 95       	ror	r31
    2150:	9e 3f       	cpi	r25, 0xFE	; 254
    2152:	08 f0       	brcs	.+2      	; 0x2156 <__addsf3x+0x96>
    2154:	b3 cf       	rjmp	.-154    	; 0x20bc <__addsf3+0x1e>
    2156:	93 95       	inc	r25
    2158:	88 0f       	add	r24, r24
    215a:	08 f0       	brcs	.+2      	; 0x215e <__addsf3x+0x9e>
    215c:	99 27       	eor	r25, r25
    215e:	ee 0f       	add	r30, r30
    2160:	97 95       	ror	r25
    2162:	87 95       	ror	r24
    2164:	08 95       	ret

00002166 <__cmpsf2>:
    2166:	d9 d0       	rcall	.+434    	; 0x231a <__fp_cmp>
    2168:	08 f4       	brcc	.+2      	; 0x216c <__cmpsf2+0x6>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	08 95       	ret

0000216e <__divsf3>:
    216e:	0c d0       	rcall	.+24     	; 0x2188 <__divsf3x>
    2170:	0f c1       	rjmp	.+542    	; 0x2390 <__fp_round>
    2172:	07 d1       	rcall	.+526    	; 0x2382 <__fp_pscB>
    2174:	40 f0       	brcs	.+16     	; 0x2186 <__divsf3+0x18>
    2176:	fe d0       	rcall	.+508    	; 0x2374 <__fp_pscA>
    2178:	30 f0       	brcs	.+12     	; 0x2186 <__divsf3+0x18>
    217a:	21 f4       	brne	.+8      	; 0x2184 <__divsf3+0x16>
    217c:	5f 3f       	cpi	r21, 0xFF	; 255
    217e:	19 f0       	breq	.+6      	; 0x2186 <__divsf3+0x18>
    2180:	f0 c0       	rjmp	.+480    	; 0x2362 <__fp_inf>
    2182:	51 11       	cpse	r21, r1
    2184:	39 c1       	rjmp	.+626    	; 0x23f8 <__fp_szero>
    2186:	f3 c0       	rjmp	.+486    	; 0x236e <__fp_nan>

00002188 <__divsf3x>:
    2188:	14 d1       	rcall	.+552    	; 0x23b2 <__fp_split3>
    218a:	98 f3       	brcs	.-26     	; 0x2172 <__divsf3+0x4>

0000218c <__divsf3_pse>:
    218c:	99 23       	and	r25, r25
    218e:	c9 f3       	breq	.-14     	; 0x2182 <__divsf3+0x14>
    2190:	55 23       	and	r21, r21
    2192:	b1 f3       	breq	.-20     	; 0x2180 <__divsf3+0x12>
    2194:	95 1b       	sub	r25, r21
    2196:	55 0b       	sbc	r21, r21
    2198:	bb 27       	eor	r27, r27
    219a:	aa 27       	eor	r26, r26
    219c:	62 17       	cp	r22, r18
    219e:	73 07       	cpc	r23, r19
    21a0:	84 07       	cpc	r24, r20
    21a2:	38 f0       	brcs	.+14     	; 0x21b2 <__divsf3_pse+0x26>
    21a4:	9f 5f       	subi	r25, 0xFF	; 255
    21a6:	5f 4f       	sbci	r21, 0xFF	; 255
    21a8:	22 0f       	add	r18, r18
    21aa:	33 1f       	adc	r19, r19
    21ac:	44 1f       	adc	r20, r20
    21ae:	aa 1f       	adc	r26, r26
    21b0:	a9 f3       	breq	.-22     	; 0x219c <__divsf3_pse+0x10>
    21b2:	33 d0       	rcall	.+102    	; 0x221a <__divsf3_pse+0x8e>
    21b4:	0e 2e       	mov	r0, r30
    21b6:	3a f0       	brmi	.+14     	; 0x21c6 <__divsf3_pse+0x3a>
    21b8:	e0 e8       	ldi	r30, 0x80	; 128
    21ba:	30 d0       	rcall	.+96     	; 0x221c <__divsf3_pse+0x90>
    21bc:	91 50       	subi	r25, 0x01	; 1
    21be:	50 40       	sbci	r21, 0x00	; 0
    21c0:	e6 95       	lsr	r30
    21c2:	00 1c       	adc	r0, r0
    21c4:	ca f7       	brpl	.-14     	; 0x21b8 <__divsf3_pse+0x2c>
    21c6:	29 d0       	rcall	.+82     	; 0x221a <__divsf3_pse+0x8e>
    21c8:	fe 2f       	mov	r31, r30
    21ca:	27 d0       	rcall	.+78     	; 0x221a <__divsf3_pse+0x8e>
    21cc:	66 0f       	add	r22, r22
    21ce:	77 1f       	adc	r23, r23
    21d0:	88 1f       	adc	r24, r24
    21d2:	bb 1f       	adc	r27, r27
    21d4:	26 17       	cp	r18, r22
    21d6:	37 07       	cpc	r19, r23
    21d8:	48 07       	cpc	r20, r24
    21da:	ab 07       	cpc	r26, r27
    21dc:	b0 e8       	ldi	r27, 0x80	; 128
    21de:	09 f0       	breq	.+2      	; 0x21e2 <__divsf3_pse+0x56>
    21e0:	bb 0b       	sbc	r27, r27
    21e2:	80 2d       	mov	r24, r0
    21e4:	bf 01       	movw	r22, r30
    21e6:	ff 27       	eor	r31, r31
    21e8:	93 58       	subi	r25, 0x83	; 131
    21ea:	5f 4f       	sbci	r21, 0xFF	; 255
    21ec:	2a f0       	brmi	.+10     	; 0x21f8 <__divsf3_pse+0x6c>
    21ee:	9e 3f       	cpi	r25, 0xFE	; 254
    21f0:	51 05       	cpc	r21, r1
    21f2:	68 f0       	brcs	.+26     	; 0x220e <__divsf3_pse+0x82>
    21f4:	b6 c0       	rjmp	.+364    	; 0x2362 <__fp_inf>
    21f6:	00 c1       	rjmp	.+512    	; 0x23f8 <__fp_szero>
    21f8:	5f 3f       	cpi	r21, 0xFF	; 255
    21fa:	ec f3       	brlt	.-6      	; 0x21f6 <__divsf3_pse+0x6a>
    21fc:	98 3e       	cpi	r25, 0xE8	; 232
    21fe:	dc f3       	brlt	.-10     	; 0x21f6 <__divsf3_pse+0x6a>
    2200:	86 95       	lsr	r24
    2202:	77 95       	ror	r23
    2204:	67 95       	ror	r22
    2206:	b7 95       	ror	r27
    2208:	f7 95       	ror	r31
    220a:	9f 5f       	subi	r25, 0xFF	; 255
    220c:	c9 f7       	brne	.-14     	; 0x2200 <__divsf3_pse+0x74>
    220e:	88 0f       	add	r24, r24
    2210:	91 1d       	adc	r25, r1
    2212:	96 95       	lsr	r25
    2214:	87 95       	ror	r24
    2216:	97 f9       	bld	r25, 7
    2218:	08 95       	ret
    221a:	e1 e0       	ldi	r30, 0x01	; 1
    221c:	66 0f       	add	r22, r22
    221e:	77 1f       	adc	r23, r23
    2220:	88 1f       	adc	r24, r24
    2222:	bb 1f       	adc	r27, r27
    2224:	62 17       	cp	r22, r18
    2226:	73 07       	cpc	r23, r19
    2228:	84 07       	cpc	r24, r20
    222a:	ba 07       	cpc	r27, r26
    222c:	20 f0       	brcs	.+8      	; 0x2236 <__divsf3_pse+0xaa>
    222e:	62 1b       	sub	r22, r18
    2230:	73 0b       	sbc	r23, r19
    2232:	84 0b       	sbc	r24, r20
    2234:	ba 0b       	sbc	r27, r26
    2236:	ee 1f       	adc	r30, r30
    2238:	88 f7       	brcc	.-30     	; 0x221c <__divsf3_pse+0x90>
    223a:	e0 95       	com	r30
    223c:	08 95       	ret

0000223e <__fixsfsi>:
    223e:	04 d0       	rcall	.+8      	; 0x2248 <__fixunssfsi>
    2240:	68 94       	set
    2242:	b1 11       	cpse	r27, r1
    2244:	d9 c0       	rjmp	.+434    	; 0x23f8 <__fp_szero>
    2246:	08 95       	ret

00002248 <__fixunssfsi>:
    2248:	bc d0       	rcall	.+376    	; 0x23c2 <__fp_splitA>
    224a:	88 f0       	brcs	.+34     	; 0x226e <__fixunssfsi+0x26>
    224c:	9f 57       	subi	r25, 0x7F	; 127
    224e:	90 f0       	brcs	.+36     	; 0x2274 <__fixunssfsi+0x2c>
    2250:	b9 2f       	mov	r27, r25
    2252:	99 27       	eor	r25, r25
    2254:	b7 51       	subi	r27, 0x17	; 23
    2256:	a0 f0       	brcs	.+40     	; 0x2280 <__fixunssfsi+0x38>
    2258:	d1 f0       	breq	.+52     	; 0x228e <__fixunssfsi+0x46>
    225a:	66 0f       	add	r22, r22
    225c:	77 1f       	adc	r23, r23
    225e:	88 1f       	adc	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	1a f0       	brmi	.+6      	; 0x226a <__fixunssfsi+0x22>
    2264:	ba 95       	dec	r27
    2266:	c9 f7       	brne	.-14     	; 0x225a <__fixunssfsi+0x12>
    2268:	12 c0       	rjmp	.+36     	; 0x228e <__fixunssfsi+0x46>
    226a:	b1 30       	cpi	r27, 0x01	; 1
    226c:	81 f0       	breq	.+32     	; 0x228e <__fixunssfsi+0x46>
    226e:	c3 d0       	rcall	.+390    	; 0x23f6 <__fp_zero>
    2270:	b1 e0       	ldi	r27, 0x01	; 1
    2272:	08 95       	ret
    2274:	c0 c0       	rjmp	.+384    	; 0x23f6 <__fp_zero>
    2276:	67 2f       	mov	r22, r23
    2278:	78 2f       	mov	r23, r24
    227a:	88 27       	eor	r24, r24
    227c:	b8 5f       	subi	r27, 0xF8	; 248
    227e:	39 f0       	breq	.+14     	; 0x228e <__fixunssfsi+0x46>
    2280:	b9 3f       	cpi	r27, 0xF9	; 249
    2282:	cc f3       	brlt	.-14     	; 0x2276 <__fixunssfsi+0x2e>
    2284:	86 95       	lsr	r24
    2286:	77 95       	ror	r23
    2288:	67 95       	ror	r22
    228a:	b3 95       	inc	r27
    228c:	d9 f7       	brne	.-10     	; 0x2284 <__fixunssfsi+0x3c>
    228e:	3e f4       	brtc	.+14     	; 0x229e <__fixunssfsi+0x56>
    2290:	90 95       	com	r25
    2292:	80 95       	com	r24
    2294:	70 95       	com	r23
    2296:	61 95       	neg	r22
    2298:	7f 4f       	sbci	r23, 0xFF	; 255
    229a:	8f 4f       	sbci	r24, 0xFF	; 255
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	08 95       	ret

000022a0 <__floatunsisf>:
    22a0:	e8 94       	clt
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__floatsisf+0x12>

000022a4 <__floatsisf>:
    22a4:	97 fb       	bst	r25, 7
    22a6:	3e f4       	brtc	.+14     	; 0x22b6 <__floatsisf+0x12>
    22a8:	90 95       	com	r25
    22aa:	80 95       	com	r24
    22ac:	70 95       	com	r23
    22ae:	61 95       	neg	r22
    22b0:	7f 4f       	sbci	r23, 0xFF	; 255
    22b2:	8f 4f       	sbci	r24, 0xFF	; 255
    22b4:	9f 4f       	sbci	r25, 0xFF	; 255
    22b6:	99 23       	and	r25, r25
    22b8:	a9 f0       	breq	.+42     	; 0x22e4 <__floatsisf+0x40>
    22ba:	f9 2f       	mov	r31, r25
    22bc:	96 e9       	ldi	r25, 0x96	; 150
    22be:	bb 27       	eor	r27, r27
    22c0:	93 95       	inc	r25
    22c2:	f6 95       	lsr	r31
    22c4:	87 95       	ror	r24
    22c6:	77 95       	ror	r23
    22c8:	67 95       	ror	r22
    22ca:	b7 95       	ror	r27
    22cc:	f1 11       	cpse	r31, r1
    22ce:	f8 cf       	rjmp	.-16     	; 0x22c0 <__floatsisf+0x1c>
    22d0:	fa f4       	brpl	.+62     	; 0x2310 <__floatsisf+0x6c>
    22d2:	bb 0f       	add	r27, r27
    22d4:	11 f4       	brne	.+4      	; 0x22da <__floatsisf+0x36>
    22d6:	60 ff       	sbrs	r22, 0
    22d8:	1b c0       	rjmp	.+54     	; 0x2310 <__floatsisf+0x6c>
    22da:	6f 5f       	subi	r22, 0xFF	; 255
    22dc:	7f 4f       	sbci	r23, 0xFF	; 255
    22de:	8f 4f       	sbci	r24, 0xFF	; 255
    22e0:	9f 4f       	sbci	r25, 0xFF	; 255
    22e2:	16 c0       	rjmp	.+44     	; 0x2310 <__floatsisf+0x6c>
    22e4:	88 23       	and	r24, r24
    22e6:	11 f0       	breq	.+4      	; 0x22ec <__floatsisf+0x48>
    22e8:	96 e9       	ldi	r25, 0x96	; 150
    22ea:	11 c0       	rjmp	.+34     	; 0x230e <__floatsisf+0x6a>
    22ec:	77 23       	and	r23, r23
    22ee:	21 f0       	breq	.+8      	; 0x22f8 <__floatsisf+0x54>
    22f0:	9e e8       	ldi	r25, 0x8E	; 142
    22f2:	87 2f       	mov	r24, r23
    22f4:	76 2f       	mov	r23, r22
    22f6:	05 c0       	rjmp	.+10     	; 0x2302 <__floatsisf+0x5e>
    22f8:	66 23       	and	r22, r22
    22fa:	71 f0       	breq	.+28     	; 0x2318 <__floatsisf+0x74>
    22fc:	96 e8       	ldi	r25, 0x86	; 134
    22fe:	86 2f       	mov	r24, r22
    2300:	70 e0       	ldi	r23, 0x00	; 0
    2302:	60 e0       	ldi	r22, 0x00	; 0
    2304:	2a f0       	brmi	.+10     	; 0x2310 <__floatsisf+0x6c>
    2306:	9a 95       	dec	r25
    2308:	66 0f       	add	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	da f7       	brpl	.-10     	; 0x2306 <__floatsisf+0x62>
    2310:	88 0f       	add	r24, r24
    2312:	96 95       	lsr	r25
    2314:	87 95       	ror	r24
    2316:	97 f9       	bld	r25, 7
    2318:	08 95       	ret

0000231a <__fp_cmp>:
    231a:	99 0f       	add	r25, r25
    231c:	00 08       	sbc	r0, r0
    231e:	55 0f       	add	r21, r21
    2320:	aa 0b       	sbc	r26, r26
    2322:	e0 e8       	ldi	r30, 0x80	; 128
    2324:	fe ef       	ldi	r31, 0xFE	; 254
    2326:	16 16       	cp	r1, r22
    2328:	17 06       	cpc	r1, r23
    232a:	e8 07       	cpc	r30, r24
    232c:	f9 07       	cpc	r31, r25
    232e:	c0 f0       	brcs	.+48     	; 0x2360 <__fp_cmp+0x46>
    2330:	12 16       	cp	r1, r18
    2332:	13 06       	cpc	r1, r19
    2334:	e4 07       	cpc	r30, r20
    2336:	f5 07       	cpc	r31, r21
    2338:	98 f0       	brcs	.+38     	; 0x2360 <__fp_cmp+0x46>
    233a:	62 1b       	sub	r22, r18
    233c:	73 0b       	sbc	r23, r19
    233e:	84 0b       	sbc	r24, r20
    2340:	95 0b       	sbc	r25, r21
    2342:	39 f4       	brne	.+14     	; 0x2352 <__fp_cmp+0x38>
    2344:	0a 26       	eor	r0, r26
    2346:	61 f0       	breq	.+24     	; 0x2360 <__fp_cmp+0x46>
    2348:	23 2b       	or	r18, r19
    234a:	24 2b       	or	r18, r20
    234c:	25 2b       	or	r18, r21
    234e:	21 f4       	brne	.+8      	; 0x2358 <__fp_cmp+0x3e>
    2350:	08 95       	ret
    2352:	0a 26       	eor	r0, r26
    2354:	09 f4       	brne	.+2      	; 0x2358 <__fp_cmp+0x3e>
    2356:	a1 40       	sbci	r26, 0x01	; 1
    2358:	a6 95       	lsr	r26
    235a:	8f ef       	ldi	r24, 0xFF	; 255
    235c:	81 1d       	adc	r24, r1
    235e:	81 1d       	adc	r24, r1
    2360:	08 95       	ret

00002362 <__fp_inf>:
    2362:	97 f9       	bld	r25, 7
    2364:	9f 67       	ori	r25, 0x7F	; 127
    2366:	80 e8       	ldi	r24, 0x80	; 128
    2368:	70 e0       	ldi	r23, 0x00	; 0
    236a:	60 e0       	ldi	r22, 0x00	; 0
    236c:	08 95       	ret

0000236e <__fp_nan>:
    236e:	9f ef       	ldi	r25, 0xFF	; 255
    2370:	80 ec       	ldi	r24, 0xC0	; 192
    2372:	08 95       	ret

00002374 <__fp_pscA>:
    2374:	00 24       	eor	r0, r0
    2376:	0a 94       	dec	r0
    2378:	16 16       	cp	r1, r22
    237a:	17 06       	cpc	r1, r23
    237c:	18 06       	cpc	r1, r24
    237e:	09 06       	cpc	r0, r25
    2380:	08 95       	ret

00002382 <__fp_pscB>:
    2382:	00 24       	eor	r0, r0
    2384:	0a 94       	dec	r0
    2386:	12 16       	cp	r1, r18
    2388:	13 06       	cpc	r1, r19
    238a:	14 06       	cpc	r1, r20
    238c:	05 06       	cpc	r0, r21
    238e:	08 95       	ret

00002390 <__fp_round>:
    2390:	09 2e       	mov	r0, r25
    2392:	03 94       	inc	r0
    2394:	00 0c       	add	r0, r0
    2396:	11 f4       	brne	.+4      	; 0x239c <__fp_round+0xc>
    2398:	88 23       	and	r24, r24
    239a:	52 f0       	brmi	.+20     	; 0x23b0 <__fp_round+0x20>
    239c:	bb 0f       	add	r27, r27
    239e:	40 f4       	brcc	.+16     	; 0x23b0 <__fp_round+0x20>
    23a0:	bf 2b       	or	r27, r31
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <__fp_round+0x18>
    23a4:	60 ff       	sbrs	r22, 0
    23a6:	04 c0       	rjmp	.+8      	; 0x23b0 <__fp_round+0x20>
    23a8:	6f 5f       	subi	r22, 0xFF	; 255
    23aa:	7f 4f       	sbci	r23, 0xFF	; 255
    23ac:	8f 4f       	sbci	r24, 0xFF	; 255
    23ae:	9f 4f       	sbci	r25, 0xFF	; 255
    23b0:	08 95       	ret

000023b2 <__fp_split3>:
    23b2:	57 fd       	sbrc	r21, 7
    23b4:	90 58       	subi	r25, 0x80	; 128
    23b6:	44 0f       	add	r20, r20
    23b8:	55 1f       	adc	r21, r21
    23ba:	59 f0       	breq	.+22     	; 0x23d2 <__fp_splitA+0x10>
    23bc:	5f 3f       	cpi	r21, 0xFF	; 255
    23be:	71 f0       	breq	.+28     	; 0x23dc <__fp_splitA+0x1a>
    23c0:	47 95       	ror	r20

000023c2 <__fp_splitA>:
    23c2:	88 0f       	add	r24, r24
    23c4:	97 fb       	bst	r25, 7
    23c6:	99 1f       	adc	r25, r25
    23c8:	61 f0       	breq	.+24     	; 0x23e2 <__fp_splitA+0x20>
    23ca:	9f 3f       	cpi	r25, 0xFF	; 255
    23cc:	79 f0       	breq	.+30     	; 0x23ec <__fp_splitA+0x2a>
    23ce:	87 95       	ror	r24
    23d0:	08 95       	ret
    23d2:	12 16       	cp	r1, r18
    23d4:	13 06       	cpc	r1, r19
    23d6:	14 06       	cpc	r1, r20
    23d8:	55 1f       	adc	r21, r21
    23da:	f2 cf       	rjmp	.-28     	; 0x23c0 <__fp_split3+0xe>
    23dc:	46 95       	lsr	r20
    23de:	f1 df       	rcall	.-30     	; 0x23c2 <__fp_splitA>
    23e0:	08 c0       	rjmp	.+16     	; 0x23f2 <__fp_splitA+0x30>
    23e2:	16 16       	cp	r1, r22
    23e4:	17 06       	cpc	r1, r23
    23e6:	18 06       	cpc	r1, r24
    23e8:	99 1f       	adc	r25, r25
    23ea:	f1 cf       	rjmp	.-30     	; 0x23ce <__fp_splitA+0xc>
    23ec:	86 95       	lsr	r24
    23ee:	71 05       	cpc	r23, r1
    23f0:	61 05       	cpc	r22, r1
    23f2:	08 94       	sec
    23f4:	08 95       	ret

000023f6 <__fp_zero>:
    23f6:	e8 94       	clt

000023f8 <__fp_szero>:
    23f8:	bb 27       	eor	r27, r27
    23fa:	66 27       	eor	r22, r22
    23fc:	77 27       	eor	r23, r23
    23fe:	cb 01       	movw	r24, r22
    2400:	97 f9       	bld	r25, 7
    2402:	08 95       	ret

00002404 <__gesf2>:
    2404:	8a df       	rcall	.-236    	; 0x231a <__fp_cmp>
    2406:	08 f4       	brcc	.+2      	; 0x240a <__gesf2+0x6>
    2408:	8f ef       	ldi	r24, 0xFF	; 255
    240a:	08 95       	ret

0000240c <__mulsf3>:
    240c:	0b d0       	rcall	.+22     	; 0x2424 <__mulsf3x>
    240e:	c0 cf       	rjmp	.-128    	; 0x2390 <__fp_round>
    2410:	b1 df       	rcall	.-158    	; 0x2374 <__fp_pscA>
    2412:	28 f0       	brcs	.+10     	; 0x241e <__mulsf3+0x12>
    2414:	b6 df       	rcall	.-148    	; 0x2382 <__fp_pscB>
    2416:	18 f0       	brcs	.+6      	; 0x241e <__mulsf3+0x12>
    2418:	95 23       	and	r25, r21
    241a:	09 f0       	breq	.+2      	; 0x241e <__mulsf3+0x12>
    241c:	a2 cf       	rjmp	.-188    	; 0x2362 <__fp_inf>
    241e:	a7 cf       	rjmp	.-178    	; 0x236e <__fp_nan>
    2420:	11 24       	eor	r1, r1
    2422:	ea cf       	rjmp	.-44     	; 0x23f8 <__fp_szero>

00002424 <__mulsf3x>:
    2424:	c6 df       	rcall	.-116    	; 0x23b2 <__fp_split3>
    2426:	a0 f3       	brcs	.-24     	; 0x2410 <__mulsf3+0x4>

00002428 <__mulsf3_pse>:
    2428:	95 9f       	mul	r25, r21
    242a:	d1 f3       	breq	.-12     	; 0x2420 <__mulsf3+0x14>
    242c:	95 0f       	add	r25, r21
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	55 1f       	adc	r21, r21
    2432:	62 9f       	mul	r22, r18
    2434:	f0 01       	movw	r30, r0
    2436:	72 9f       	mul	r23, r18
    2438:	bb 27       	eor	r27, r27
    243a:	f0 0d       	add	r31, r0
    243c:	b1 1d       	adc	r27, r1
    243e:	63 9f       	mul	r22, r19
    2440:	aa 27       	eor	r26, r26
    2442:	f0 0d       	add	r31, r0
    2444:	b1 1d       	adc	r27, r1
    2446:	aa 1f       	adc	r26, r26
    2448:	64 9f       	mul	r22, r20
    244a:	66 27       	eor	r22, r22
    244c:	b0 0d       	add	r27, r0
    244e:	a1 1d       	adc	r26, r1
    2450:	66 1f       	adc	r22, r22
    2452:	82 9f       	mul	r24, r18
    2454:	22 27       	eor	r18, r18
    2456:	b0 0d       	add	r27, r0
    2458:	a1 1d       	adc	r26, r1
    245a:	62 1f       	adc	r22, r18
    245c:	73 9f       	mul	r23, r19
    245e:	b0 0d       	add	r27, r0
    2460:	a1 1d       	adc	r26, r1
    2462:	62 1f       	adc	r22, r18
    2464:	83 9f       	mul	r24, r19
    2466:	a0 0d       	add	r26, r0
    2468:	61 1d       	adc	r22, r1
    246a:	22 1f       	adc	r18, r18
    246c:	74 9f       	mul	r23, r20
    246e:	33 27       	eor	r19, r19
    2470:	a0 0d       	add	r26, r0
    2472:	61 1d       	adc	r22, r1
    2474:	23 1f       	adc	r18, r19
    2476:	84 9f       	mul	r24, r20
    2478:	60 0d       	add	r22, r0
    247a:	21 1d       	adc	r18, r1
    247c:	82 2f       	mov	r24, r18
    247e:	76 2f       	mov	r23, r22
    2480:	6a 2f       	mov	r22, r26
    2482:	11 24       	eor	r1, r1
    2484:	9f 57       	subi	r25, 0x7F	; 127
    2486:	50 40       	sbci	r21, 0x00	; 0
    2488:	8a f0       	brmi	.+34     	; 0x24ac <__mulsf3_pse+0x84>
    248a:	e1 f0       	breq	.+56     	; 0x24c4 <__mulsf3_pse+0x9c>
    248c:	88 23       	and	r24, r24
    248e:	4a f0       	brmi	.+18     	; 0x24a2 <__mulsf3_pse+0x7a>
    2490:	ee 0f       	add	r30, r30
    2492:	ff 1f       	adc	r31, r31
    2494:	bb 1f       	adc	r27, r27
    2496:	66 1f       	adc	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	88 1f       	adc	r24, r24
    249c:	91 50       	subi	r25, 0x01	; 1
    249e:	50 40       	sbci	r21, 0x00	; 0
    24a0:	a9 f7       	brne	.-22     	; 0x248c <__mulsf3_pse+0x64>
    24a2:	9e 3f       	cpi	r25, 0xFE	; 254
    24a4:	51 05       	cpc	r21, r1
    24a6:	70 f0       	brcs	.+28     	; 0x24c4 <__mulsf3_pse+0x9c>
    24a8:	5c cf       	rjmp	.-328    	; 0x2362 <__fp_inf>
    24aa:	a6 cf       	rjmp	.-180    	; 0x23f8 <__fp_szero>
    24ac:	5f 3f       	cpi	r21, 0xFF	; 255
    24ae:	ec f3       	brlt	.-6      	; 0x24aa <__mulsf3_pse+0x82>
    24b0:	98 3e       	cpi	r25, 0xE8	; 232
    24b2:	dc f3       	brlt	.-10     	; 0x24aa <__mulsf3_pse+0x82>
    24b4:	86 95       	lsr	r24
    24b6:	77 95       	ror	r23
    24b8:	67 95       	ror	r22
    24ba:	b7 95       	ror	r27
    24bc:	f7 95       	ror	r31
    24be:	e7 95       	ror	r30
    24c0:	9f 5f       	subi	r25, 0xFF	; 255
    24c2:	c1 f7       	brne	.-16     	; 0x24b4 <__mulsf3_pse+0x8c>
    24c4:	fe 2b       	or	r31, r30
    24c6:	88 0f       	add	r24, r24
    24c8:	91 1d       	adc	r25, r1
    24ca:	96 95       	lsr	r25
    24cc:	87 95       	ror	r24
    24ce:	97 f9       	bld	r25, 7
    24d0:	08 95       	ret

000024d2 <__divmodhi4>:
    24d2:	97 fb       	bst	r25, 7
    24d4:	07 2e       	mov	r0, r23
    24d6:	16 f4       	brtc	.+4      	; 0x24dc <__divmodhi4+0xa>
    24d8:	00 94       	com	r0
    24da:	06 d0       	rcall	.+12     	; 0x24e8 <__divmodhi4_neg1>
    24dc:	77 fd       	sbrc	r23, 7
    24de:	08 d0       	rcall	.+16     	; 0x24f0 <__divmodhi4_neg2>
    24e0:	5e d0       	rcall	.+188    	; 0x259e <__udivmodhi4>
    24e2:	07 fc       	sbrc	r0, 7
    24e4:	05 d0       	rcall	.+10     	; 0x24f0 <__divmodhi4_neg2>
    24e6:	3e f4       	brtc	.+14     	; 0x24f6 <__divmodhi4_exit>

000024e8 <__divmodhi4_neg1>:
    24e8:	90 95       	com	r25
    24ea:	81 95       	neg	r24
    24ec:	9f 4f       	sbci	r25, 0xFF	; 255
    24ee:	08 95       	ret

000024f0 <__divmodhi4_neg2>:
    24f0:	70 95       	com	r23
    24f2:	61 95       	neg	r22
    24f4:	7f 4f       	sbci	r23, 0xFF	; 255

000024f6 <__divmodhi4_exit>:
    24f6:	08 95       	ret

000024f8 <__divmodsi4>:
    24f8:	05 2e       	mov	r0, r21
    24fa:	97 fb       	bst	r25, 7
    24fc:	16 f4       	brtc	.+4      	; 0x2502 <__divmodsi4+0xa>
    24fe:	00 94       	com	r0
    2500:	0f d0       	rcall	.+30     	; 0x2520 <__negsi2>
    2502:	57 fd       	sbrc	r21, 7
    2504:	05 d0       	rcall	.+10     	; 0x2510 <__divmodsi4_neg2>
    2506:	5f d0       	rcall	.+190    	; 0x25c6 <__udivmodsi4>
    2508:	07 fc       	sbrc	r0, 7
    250a:	02 d0       	rcall	.+4      	; 0x2510 <__divmodsi4_neg2>
    250c:	46 f4       	brtc	.+16     	; 0x251e <__divmodsi4_exit>
    250e:	08 c0       	rjmp	.+16     	; 0x2520 <__negsi2>

00002510 <__divmodsi4_neg2>:
    2510:	50 95       	com	r21
    2512:	40 95       	com	r20
    2514:	30 95       	com	r19
    2516:	21 95       	neg	r18
    2518:	3f 4f       	sbci	r19, 0xFF	; 255
    251a:	4f 4f       	sbci	r20, 0xFF	; 255
    251c:	5f 4f       	sbci	r21, 0xFF	; 255

0000251e <__divmodsi4_exit>:
    251e:	08 95       	ret

00002520 <__negsi2>:
    2520:	90 95       	com	r25
    2522:	80 95       	com	r24
    2524:	70 95       	com	r23
    2526:	61 95       	neg	r22
    2528:	7f 4f       	sbci	r23, 0xFF	; 255
    252a:	8f 4f       	sbci	r24, 0xFF	; 255
    252c:	9f 4f       	sbci	r25, 0xFF	; 255
    252e:	08 95       	ret

00002530 <__ashldi3>:
    2530:	0f 93       	push	r16
    2532:	08 30       	cpi	r16, 0x08	; 8
    2534:	90 f0       	brcs	.+36     	; 0x255a <__ashldi3+0x2a>
    2536:	98 2f       	mov	r25, r24
    2538:	87 2f       	mov	r24, r23
    253a:	76 2f       	mov	r23, r22
    253c:	65 2f       	mov	r22, r21
    253e:	54 2f       	mov	r21, r20
    2540:	43 2f       	mov	r20, r19
    2542:	32 2f       	mov	r19, r18
    2544:	22 27       	eor	r18, r18
    2546:	08 50       	subi	r16, 0x08	; 8
    2548:	f4 cf       	rjmp	.-24     	; 0x2532 <__ashldi3+0x2>
    254a:	22 0f       	add	r18, r18
    254c:	33 1f       	adc	r19, r19
    254e:	44 1f       	adc	r20, r20
    2550:	55 1f       	adc	r21, r21
    2552:	66 1f       	adc	r22, r22
    2554:	77 1f       	adc	r23, r23
    2556:	88 1f       	adc	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	0a 95       	dec	r16
    255c:	b2 f7       	brpl	.-20     	; 0x254a <__ashldi3+0x1a>
    255e:	0f 91       	pop	r16
    2560:	08 95       	ret

00002562 <__ashrdi3>:
    2562:	97 fb       	bst	r25, 7
    2564:	10 f8       	bld	r1, 0

00002566 <__lshrdi3>:
    2566:	16 94       	lsr	r1
    2568:	00 08       	sbc	r0, r0
    256a:	0f 93       	push	r16
    256c:	08 30       	cpi	r16, 0x08	; 8
    256e:	98 f0       	brcs	.+38     	; 0x2596 <__lshrdi3+0x30>
    2570:	08 50       	subi	r16, 0x08	; 8
    2572:	23 2f       	mov	r18, r19
    2574:	34 2f       	mov	r19, r20
    2576:	45 2f       	mov	r20, r21
    2578:	56 2f       	mov	r21, r22
    257a:	67 2f       	mov	r22, r23
    257c:	78 2f       	mov	r23, r24
    257e:	89 2f       	mov	r24, r25
    2580:	90 2d       	mov	r25, r0
    2582:	f4 cf       	rjmp	.-24     	; 0x256c <__lshrdi3+0x6>
    2584:	05 94       	asr	r0
    2586:	97 95       	ror	r25
    2588:	87 95       	ror	r24
    258a:	77 95       	ror	r23
    258c:	67 95       	ror	r22
    258e:	57 95       	ror	r21
    2590:	47 95       	ror	r20
    2592:	37 95       	ror	r19
    2594:	27 95       	ror	r18
    2596:	0a 95       	dec	r16
    2598:	aa f7       	brpl	.-22     	; 0x2584 <__lshrdi3+0x1e>
    259a:	0f 91       	pop	r16
    259c:	08 95       	ret

0000259e <__udivmodhi4>:
    259e:	aa 1b       	sub	r26, r26
    25a0:	bb 1b       	sub	r27, r27
    25a2:	51 e1       	ldi	r21, 0x11	; 17
    25a4:	07 c0       	rjmp	.+14     	; 0x25b4 <__udivmodhi4_ep>

000025a6 <__udivmodhi4_loop>:
    25a6:	aa 1f       	adc	r26, r26
    25a8:	bb 1f       	adc	r27, r27
    25aa:	a6 17       	cp	r26, r22
    25ac:	b7 07       	cpc	r27, r23
    25ae:	10 f0       	brcs	.+4      	; 0x25b4 <__udivmodhi4_ep>
    25b0:	a6 1b       	sub	r26, r22
    25b2:	b7 0b       	sbc	r27, r23

000025b4 <__udivmodhi4_ep>:
    25b4:	88 1f       	adc	r24, r24
    25b6:	99 1f       	adc	r25, r25
    25b8:	5a 95       	dec	r21
    25ba:	a9 f7       	brne	.-22     	; 0x25a6 <__udivmodhi4_loop>
    25bc:	80 95       	com	r24
    25be:	90 95       	com	r25
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	08 95       	ret

000025c6 <__udivmodsi4>:
    25c6:	a1 e2       	ldi	r26, 0x21	; 33
    25c8:	1a 2e       	mov	r1, r26
    25ca:	aa 1b       	sub	r26, r26
    25cc:	bb 1b       	sub	r27, r27
    25ce:	fd 01       	movw	r30, r26
    25d0:	0d c0       	rjmp	.+26     	; 0x25ec <__udivmodsi4_ep>

000025d2 <__udivmodsi4_loop>:
    25d2:	aa 1f       	adc	r26, r26
    25d4:	bb 1f       	adc	r27, r27
    25d6:	ee 1f       	adc	r30, r30
    25d8:	ff 1f       	adc	r31, r31
    25da:	a2 17       	cp	r26, r18
    25dc:	b3 07       	cpc	r27, r19
    25de:	e4 07       	cpc	r30, r20
    25e0:	f5 07       	cpc	r31, r21
    25e2:	20 f0       	brcs	.+8      	; 0x25ec <__udivmodsi4_ep>
    25e4:	a2 1b       	sub	r26, r18
    25e6:	b3 0b       	sbc	r27, r19
    25e8:	e4 0b       	sbc	r30, r20
    25ea:	f5 0b       	sbc	r31, r21

000025ec <__udivmodsi4_ep>:
    25ec:	66 1f       	adc	r22, r22
    25ee:	77 1f       	adc	r23, r23
    25f0:	88 1f       	adc	r24, r24
    25f2:	99 1f       	adc	r25, r25
    25f4:	1a 94       	dec	r1
    25f6:	69 f7       	brne	.-38     	; 0x25d2 <__udivmodsi4_loop>
    25f8:	60 95       	com	r22
    25fa:	70 95       	com	r23
    25fc:	80 95       	com	r24
    25fe:	90 95       	com	r25
    2600:	9b 01       	movw	r18, r22
    2602:	ac 01       	movw	r20, r24
    2604:	bd 01       	movw	r22, r26
    2606:	cf 01       	movw	r24, r30
    2608:	08 95       	ret

0000260a <do_rand>:
    260a:	8f 92       	push	r8
    260c:	9f 92       	push	r9
    260e:	af 92       	push	r10
    2610:	bf 92       	push	r11
    2612:	cf 92       	push	r12
    2614:	df 92       	push	r13
    2616:	ef 92       	push	r14
    2618:	ff 92       	push	r15
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	ec 01       	movw	r28, r24
    2620:	68 81       	ld	r22, Y
    2622:	79 81       	ldd	r23, Y+1	; 0x01
    2624:	8a 81       	ldd	r24, Y+2	; 0x02
    2626:	9b 81       	ldd	r25, Y+3	; 0x03
    2628:	61 15       	cp	r22, r1
    262a:	71 05       	cpc	r23, r1
    262c:	81 05       	cpc	r24, r1
    262e:	91 05       	cpc	r25, r1
    2630:	21 f4       	brne	.+8      	; 0x263a <do_rand+0x30>
    2632:	64 e2       	ldi	r22, 0x24	; 36
    2634:	79 ed       	ldi	r23, 0xD9	; 217
    2636:	8b e5       	ldi	r24, 0x5B	; 91
    2638:	97 e0       	ldi	r25, 0x07	; 7
    263a:	2d e1       	ldi	r18, 0x1D	; 29
    263c:	33 ef       	ldi	r19, 0xF3	; 243
    263e:	41 e0       	ldi	r20, 0x01	; 1
    2640:	50 e0       	ldi	r21, 0x00	; 0
    2642:	5a df       	rcall	.-332    	; 0x24f8 <__divmodsi4>
    2644:	49 01       	movw	r8, r18
    2646:	5a 01       	movw	r10, r20
    2648:	9b 01       	movw	r18, r22
    264a:	ac 01       	movw	r20, r24
    264c:	a7 ea       	ldi	r26, 0xA7	; 167
    264e:	b1 e4       	ldi	r27, 0x41	; 65
    2650:	46 d4       	rcall	.+2188   	; 0x2ede <__muluhisi3>
    2652:	6b 01       	movw	r12, r22
    2654:	7c 01       	movw	r14, r24
    2656:	ac ee       	ldi	r26, 0xEC	; 236
    2658:	b4 ef       	ldi	r27, 0xF4	; 244
    265a:	a5 01       	movw	r20, r10
    265c:	94 01       	movw	r18, r8
    265e:	4b d4       	rcall	.+2198   	; 0x2ef6 <__mulohisi3>
    2660:	c6 0e       	add	r12, r22
    2662:	d7 1e       	adc	r13, r23
    2664:	e8 1e       	adc	r14, r24
    2666:	f9 1e       	adc	r15, r25
    2668:	f7 fe       	sbrs	r15, 7
    266a:	06 c0       	rjmp	.+12     	; 0x2678 <do_rand+0x6e>
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	c8 1a       	sub	r12, r24
    2670:	d1 08       	sbc	r13, r1
    2672:	e1 08       	sbc	r14, r1
    2674:	80 e8       	ldi	r24, 0x80	; 128
    2676:	f8 0a       	sbc	r15, r24
    2678:	c8 82       	st	Y, r12
    267a:	d9 82       	std	Y+1, r13	; 0x01
    267c:	ea 82       	std	Y+2, r14	; 0x02
    267e:	fb 82       	std	Y+3, r15	; 0x03
    2680:	c6 01       	movw	r24, r12
    2682:	9f 77       	andi	r25, 0x7F	; 127
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	9f 90       	pop	r9
    2696:	8f 90       	pop	r8
    2698:	08 95       	ret

0000269a <rand_r>:
    269a:	b7 cf       	rjmp	.-146    	; 0x260a <do_rand>

0000269c <rand>:
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	91 e0       	ldi	r25, 0x01	; 1
    26a0:	b4 cf       	rjmp	.-152    	; 0x260a <do_rand>

000026a2 <srand>:
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	80 93 00 01 	sts	0x0100, r24
    26aa:	90 93 01 01 	sts	0x0101, r25
    26ae:	a0 93 02 01 	sts	0x0102, r26
    26b2:	b0 93 03 01 	sts	0x0103, r27
    26b6:	08 95       	ret

000026b8 <strcpy_P>:
    26b8:	fb 01       	movw	r30, r22
    26ba:	dc 01       	movw	r26, r24
    26bc:	05 90       	lpm	r0, Z+
    26be:	0d 92       	st	X+, r0
    26c0:	00 20       	and	r0, r0
    26c2:	e1 f7       	brne	.-8      	; 0x26bc <strcpy_P+0x4>
    26c4:	08 95       	ret

000026c6 <fdevopen>:
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	cf 93       	push	r28
    26cc:	df 93       	push	r29
    26ce:	ec 01       	movw	r28, r24
    26d0:	8b 01       	movw	r16, r22
    26d2:	00 97       	sbiw	r24, 0x00	; 0
    26d4:	31 f4       	brne	.+12     	; 0x26e2 <fdevopen+0x1c>
    26d6:	61 15       	cp	r22, r1
    26d8:	71 05       	cpc	r23, r1
    26da:	19 f4       	brne	.+6      	; 0x26e2 <fdevopen+0x1c>
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	37 c0       	rjmp	.+110    	; 0x2750 <fdevopen+0x8a>
    26e2:	6e e0       	ldi	r22, 0x0E	; 14
    26e4:	70 e0       	ldi	r23, 0x00	; 0
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0b d2       	rcall	.+1046   	; 0x2b02 <calloc>
    26ec:	fc 01       	movw	r30, r24
    26ee:	00 97       	sbiw	r24, 0x00	; 0
    26f0:	a9 f3       	breq	.-22     	; 0x26dc <fdevopen+0x16>
    26f2:	80 e8       	ldi	r24, 0x80	; 128
    26f4:	83 83       	std	Z+3, r24	; 0x03
    26f6:	01 15       	cp	r16, r1
    26f8:	11 05       	cpc	r17, r1
    26fa:	71 f0       	breq	.+28     	; 0x2718 <fdevopen+0x52>
    26fc:	13 87       	std	Z+11, r17	; 0x0b
    26fe:	02 87       	std	Z+10, r16	; 0x0a
    2700:	81 e8       	ldi	r24, 0x81	; 129
    2702:	83 83       	std	Z+3, r24	; 0x03
    2704:	80 91 57 03 	lds	r24, 0x0357
    2708:	90 91 58 03 	lds	r25, 0x0358
    270c:	89 2b       	or	r24, r25
    270e:	21 f4       	brne	.+8      	; 0x2718 <fdevopen+0x52>
    2710:	f0 93 58 03 	sts	0x0358, r31
    2714:	e0 93 57 03 	sts	0x0357, r30
    2718:	20 97       	sbiw	r28, 0x00	; 0
    271a:	c9 f0       	breq	.+50     	; 0x274e <fdevopen+0x88>
    271c:	d1 87       	std	Z+9, r29	; 0x09
    271e:	c0 87       	std	Z+8, r28	; 0x08
    2720:	83 81       	ldd	r24, Z+3	; 0x03
    2722:	82 60       	ori	r24, 0x02	; 2
    2724:	83 83       	std	Z+3, r24	; 0x03
    2726:	80 91 59 03 	lds	r24, 0x0359
    272a:	90 91 5a 03 	lds	r25, 0x035A
    272e:	89 2b       	or	r24, r25
    2730:	71 f4       	brne	.+28     	; 0x274e <fdevopen+0x88>
    2732:	f0 93 5a 03 	sts	0x035A, r31
    2736:	e0 93 59 03 	sts	0x0359, r30
    273a:	80 91 5b 03 	lds	r24, 0x035B
    273e:	90 91 5c 03 	lds	r25, 0x035C
    2742:	89 2b       	or	r24, r25
    2744:	21 f4       	brne	.+8      	; 0x274e <fdevopen+0x88>
    2746:	f0 93 5c 03 	sts	0x035C, r31
    274a:	e0 93 5b 03 	sts	0x035B, r30
    274e:	cf 01       	movw	r24, r30
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	08 95       	ret

0000275a <printf>:
    275a:	a0 e0       	ldi	r26, 0x00	; 0
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	e2 eb       	ldi	r30, 0xB2	; 178
    2760:	f3 e1       	ldi	r31, 0x13	; 19
    2762:	dd c3       	rjmp	.+1978   	; 0x2f1e <__prologue_saves__+0x20>
    2764:	fe 01       	movw	r30, r28
    2766:	35 96       	adiw	r30, 0x05	; 5
    2768:	61 91       	ld	r22, Z+
    276a:	71 91       	ld	r23, Z+
    276c:	af 01       	movw	r20, r30
    276e:	80 91 59 03 	lds	r24, 0x0359
    2772:	90 91 5a 03 	lds	r25, 0x035A
    2776:	02 d0       	rcall	.+4      	; 0x277c <vfprintf>
    2778:	e2 e0       	ldi	r30, 0x02	; 2
    277a:	ed c3       	rjmp	.+2010   	; 0x2f56 <__epilogue_restores__+0x20>

0000277c <vfprintf>:
    277c:	ac e0       	ldi	r26, 0x0C	; 12
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e3 ec       	ldi	r30, 0xC3	; 195
    2782:	f3 e1       	ldi	r31, 0x13	; 19
    2784:	bc c3       	rjmp	.+1912   	; 0x2efe <__prologue_saves__>
    2786:	7c 01       	movw	r14, r24
    2788:	6b 01       	movw	r12, r22
    278a:	8a 01       	movw	r16, r20
    278c:	fc 01       	movw	r30, r24
    278e:	17 82       	std	Z+7, r1	; 0x07
    2790:	16 82       	std	Z+6, r1	; 0x06
    2792:	83 81       	ldd	r24, Z+3	; 0x03
    2794:	81 ff       	sbrs	r24, 1
    2796:	b0 c1       	rjmp	.+864    	; 0x2af8 <vfprintf+0x37c>
    2798:	ce 01       	movw	r24, r28
    279a:	01 96       	adiw	r24, 0x01	; 1
    279c:	4c 01       	movw	r8, r24
    279e:	f7 01       	movw	r30, r14
    27a0:	93 81       	ldd	r25, Z+3	; 0x03
    27a2:	f6 01       	movw	r30, r12
    27a4:	93 fd       	sbrc	r25, 3
    27a6:	85 91       	lpm	r24, Z+
    27a8:	93 ff       	sbrs	r25, 3
    27aa:	81 91       	ld	r24, Z+
    27ac:	6f 01       	movw	r12, r30
    27ae:	88 23       	and	r24, r24
    27b0:	09 f4       	brne	.+2      	; 0x27b4 <vfprintf+0x38>
    27b2:	9e c1       	rjmp	.+828    	; 0x2af0 <vfprintf+0x374>
    27b4:	85 32       	cpi	r24, 0x25	; 37
    27b6:	39 f4       	brne	.+14     	; 0x27c6 <vfprintf+0x4a>
    27b8:	93 fd       	sbrc	r25, 3
    27ba:	85 91       	lpm	r24, Z+
    27bc:	93 ff       	sbrs	r25, 3
    27be:	81 91       	ld	r24, Z+
    27c0:	6f 01       	movw	r12, r30
    27c2:	85 32       	cpi	r24, 0x25	; 37
    27c4:	21 f4       	brne	.+8      	; 0x27ce <vfprintf+0x52>
    27c6:	b7 01       	movw	r22, r14
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	f9 d2       	rcall	.+1522   	; 0x2dbe <fputc>
    27cc:	e8 cf       	rjmp	.-48     	; 0x279e <vfprintf+0x22>
    27ce:	51 2c       	mov	r5, r1
    27d0:	31 2c       	mov	r3, r1
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	20 32       	cpi	r18, 0x20	; 32
    27d6:	a0 f4       	brcc	.+40     	; 0x2800 <vfprintf+0x84>
    27d8:	8b 32       	cpi	r24, 0x2B	; 43
    27da:	69 f0       	breq	.+26     	; 0x27f6 <vfprintf+0x7a>
    27dc:	30 f4       	brcc	.+12     	; 0x27ea <vfprintf+0x6e>
    27de:	80 32       	cpi	r24, 0x20	; 32
    27e0:	59 f0       	breq	.+22     	; 0x27f8 <vfprintf+0x7c>
    27e2:	83 32       	cpi	r24, 0x23	; 35
    27e4:	69 f4       	brne	.+26     	; 0x2800 <vfprintf+0x84>
    27e6:	20 61       	ori	r18, 0x10	; 16
    27e8:	2c c0       	rjmp	.+88     	; 0x2842 <vfprintf+0xc6>
    27ea:	8d 32       	cpi	r24, 0x2D	; 45
    27ec:	39 f0       	breq	.+14     	; 0x27fc <vfprintf+0x80>
    27ee:	80 33       	cpi	r24, 0x30	; 48
    27f0:	39 f4       	brne	.+14     	; 0x2800 <vfprintf+0x84>
    27f2:	21 60       	ori	r18, 0x01	; 1
    27f4:	26 c0       	rjmp	.+76     	; 0x2842 <vfprintf+0xc6>
    27f6:	22 60       	ori	r18, 0x02	; 2
    27f8:	24 60       	ori	r18, 0x04	; 4
    27fa:	23 c0       	rjmp	.+70     	; 0x2842 <vfprintf+0xc6>
    27fc:	28 60       	ori	r18, 0x08	; 8
    27fe:	21 c0       	rjmp	.+66     	; 0x2842 <vfprintf+0xc6>
    2800:	27 fd       	sbrc	r18, 7
    2802:	27 c0       	rjmp	.+78     	; 0x2852 <vfprintf+0xd6>
    2804:	30 ed       	ldi	r19, 0xD0	; 208
    2806:	38 0f       	add	r19, r24
    2808:	3a 30       	cpi	r19, 0x0A	; 10
    280a:	78 f4       	brcc	.+30     	; 0x282a <vfprintf+0xae>
    280c:	26 ff       	sbrs	r18, 6
    280e:	06 c0       	rjmp	.+12     	; 0x281c <vfprintf+0xa0>
    2810:	fa e0       	ldi	r31, 0x0A	; 10
    2812:	5f 9e       	mul	r5, r31
    2814:	30 0d       	add	r19, r0
    2816:	11 24       	eor	r1, r1
    2818:	53 2e       	mov	r5, r19
    281a:	13 c0       	rjmp	.+38     	; 0x2842 <vfprintf+0xc6>
    281c:	8a e0       	ldi	r24, 0x0A	; 10
    281e:	38 9e       	mul	r3, r24
    2820:	30 0d       	add	r19, r0
    2822:	11 24       	eor	r1, r1
    2824:	33 2e       	mov	r3, r19
    2826:	20 62       	ori	r18, 0x20	; 32
    2828:	0c c0       	rjmp	.+24     	; 0x2842 <vfprintf+0xc6>
    282a:	8e 32       	cpi	r24, 0x2E	; 46
    282c:	21 f4       	brne	.+8      	; 0x2836 <vfprintf+0xba>
    282e:	26 fd       	sbrc	r18, 6
    2830:	5f c1       	rjmp	.+702    	; 0x2af0 <vfprintf+0x374>
    2832:	20 64       	ori	r18, 0x40	; 64
    2834:	06 c0       	rjmp	.+12     	; 0x2842 <vfprintf+0xc6>
    2836:	8c 36       	cpi	r24, 0x6C	; 108
    2838:	11 f4       	brne	.+4      	; 0x283e <vfprintf+0xc2>
    283a:	20 68       	ori	r18, 0x80	; 128
    283c:	02 c0       	rjmp	.+4      	; 0x2842 <vfprintf+0xc6>
    283e:	88 36       	cpi	r24, 0x68	; 104
    2840:	41 f4       	brne	.+16     	; 0x2852 <vfprintf+0xd6>
    2842:	f6 01       	movw	r30, r12
    2844:	93 fd       	sbrc	r25, 3
    2846:	85 91       	lpm	r24, Z+
    2848:	93 ff       	sbrs	r25, 3
    284a:	81 91       	ld	r24, Z+
    284c:	6f 01       	movw	r12, r30
    284e:	81 11       	cpse	r24, r1
    2850:	c1 cf       	rjmp	.-126    	; 0x27d4 <vfprintf+0x58>
    2852:	98 2f       	mov	r25, r24
    2854:	9f 7d       	andi	r25, 0xDF	; 223
    2856:	95 54       	subi	r25, 0x45	; 69
    2858:	93 30       	cpi	r25, 0x03	; 3
    285a:	28 f4       	brcc	.+10     	; 0x2866 <vfprintf+0xea>
    285c:	0c 5f       	subi	r16, 0xFC	; 252
    285e:	1f 4f       	sbci	r17, 0xFF	; 255
    2860:	ff e3       	ldi	r31, 0x3F	; 63
    2862:	f9 83       	std	Y+1, r31	; 0x01
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <vfprintf+0x104>
    2866:	83 36       	cpi	r24, 0x63	; 99
    2868:	31 f0       	breq	.+12     	; 0x2876 <vfprintf+0xfa>
    286a:	83 37       	cpi	r24, 0x73	; 115
    286c:	71 f0       	breq	.+28     	; 0x288a <vfprintf+0x10e>
    286e:	83 35       	cpi	r24, 0x53	; 83
    2870:	09 f0       	breq	.+2      	; 0x2874 <vfprintf+0xf8>
    2872:	57 c0       	rjmp	.+174    	; 0x2922 <vfprintf+0x1a6>
    2874:	21 c0       	rjmp	.+66     	; 0x28b8 <vfprintf+0x13c>
    2876:	f8 01       	movw	r30, r16
    2878:	80 81       	ld	r24, Z
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	0e 5f       	subi	r16, 0xFE	; 254
    287e:	1f 4f       	sbci	r17, 0xFF	; 255
    2880:	44 24       	eor	r4, r4
    2882:	43 94       	inc	r4
    2884:	51 2c       	mov	r5, r1
    2886:	54 01       	movw	r10, r8
    2888:	14 c0       	rjmp	.+40     	; 0x28b2 <vfprintf+0x136>
    288a:	38 01       	movw	r6, r16
    288c:	f2 e0       	ldi	r31, 0x02	; 2
    288e:	6f 0e       	add	r6, r31
    2890:	71 1c       	adc	r7, r1
    2892:	f8 01       	movw	r30, r16
    2894:	a0 80       	ld	r10, Z
    2896:	b1 80       	ldd	r11, Z+1	; 0x01
    2898:	26 ff       	sbrs	r18, 6
    289a:	03 c0       	rjmp	.+6      	; 0x28a2 <vfprintf+0x126>
    289c:	65 2d       	mov	r22, r5
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	02 c0       	rjmp	.+4      	; 0x28a6 <vfprintf+0x12a>
    28a2:	6f ef       	ldi	r22, 0xFF	; 255
    28a4:	7f ef       	ldi	r23, 0xFF	; 255
    28a6:	c5 01       	movw	r24, r10
    28a8:	2c 87       	std	Y+12, r18	; 0x0c
    28aa:	7e d2       	rcall	.+1276   	; 0x2da8 <strnlen>
    28ac:	2c 01       	movw	r4, r24
    28ae:	83 01       	movw	r16, r6
    28b0:	2c 85       	ldd	r18, Y+12	; 0x0c
    28b2:	2f 77       	andi	r18, 0x7F	; 127
    28b4:	22 2e       	mov	r2, r18
    28b6:	16 c0       	rjmp	.+44     	; 0x28e4 <vfprintf+0x168>
    28b8:	38 01       	movw	r6, r16
    28ba:	f2 e0       	ldi	r31, 0x02	; 2
    28bc:	6f 0e       	add	r6, r31
    28be:	71 1c       	adc	r7, r1
    28c0:	f8 01       	movw	r30, r16
    28c2:	a0 80       	ld	r10, Z
    28c4:	b1 80       	ldd	r11, Z+1	; 0x01
    28c6:	26 ff       	sbrs	r18, 6
    28c8:	03 c0       	rjmp	.+6      	; 0x28d0 <vfprintf+0x154>
    28ca:	65 2d       	mov	r22, r5
    28cc:	70 e0       	ldi	r23, 0x00	; 0
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <vfprintf+0x158>
    28d0:	6f ef       	ldi	r22, 0xFF	; 255
    28d2:	7f ef       	ldi	r23, 0xFF	; 255
    28d4:	c5 01       	movw	r24, r10
    28d6:	2c 87       	std	Y+12, r18	; 0x0c
    28d8:	55 d2       	rcall	.+1194   	; 0x2d84 <strnlen_P>
    28da:	2c 01       	movw	r4, r24
    28dc:	2c 85       	ldd	r18, Y+12	; 0x0c
    28de:	20 68       	ori	r18, 0x80	; 128
    28e0:	22 2e       	mov	r2, r18
    28e2:	83 01       	movw	r16, r6
    28e4:	23 fc       	sbrc	r2, 3
    28e6:	19 c0       	rjmp	.+50     	; 0x291a <vfprintf+0x19e>
    28e8:	83 2d       	mov	r24, r3
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	48 16       	cp	r4, r24
    28ee:	59 06       	cpc	r5, r25
    28f0:	a0 f4       	brcc	.+40     	; 0x291a <vfprintf+0x19e>
    28f2:	b7 01       	movw	r22, r14
    28f4:	80 e2       	ldi	r24, 0x20	; 32
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	62 d2       	rcall	.+1220   	; 0x2dbe <fputc>
    28fa:	3a 94       	dec	r3
    28fc:	f5 cf       	rjmp	.-22     	; 0x28e8 <vfprintf+0x16c>
    28fe:	f5 01       	movw	r30, r10
    2900:	27 fc       	sbrc	r2, 7
    2902:	85 91       	lpm	r24, Z+
    2904:	27 fe       	sbrs	r2, 7
    2906:	81 91       	ld	r24, Z+
    2908:	5f 01       	movw	r10, r30
    290a:	b7 01       	movw	r22, r14
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	57 d2       	rcall	.+1198   	; 0x2dbe <fputc>
    2910:	31 10       	cpse	r3, r1
    2912:	3a 94       	dec	r3
    2914:	f1 e0       	ldi	r31, 0x01	; 1
    2916:	4f 1a       	sub	r4, r31
    2918:	51 08       	sbc	r5, r1
    291a:	41 14       	cp	r4, r1
    291c:	51 04       	cpc	r5, r1
    291e:	79 f7       	brne	.-34     	; 0x28fe <vfprintf+0x182>
    2920:	de c0       	rjmp	.+444    	; 0x2ade <vfprintf+0x362>
    2922:	84 36       	cpi	r24, 0x64	; 100
    2924:	11 f0       	breq	.+4      	; 0x292a <vfprintf+0x1ae>
    2926:	89 36       	cpi	r24, 0x69	; 105
    2928:	31 f5       	brne	.+76     	; 0x2976 <vfprintf+0x1fa>
    292a:	f8 01       	movw	r30, r16
    292c:	27 ff       	sbrs	r18, 7
    292e:	07 c0       	rjmp	.+14     	; 0x293e <vfprintf+0x1c2>
    2930:	60 81       	ld	r22, Z
    2932:	71 81       	ldd	r23, Z+1	; 0x01
    2934:	82 81       	ldd	r24, Z+2	; 0x02
    2936:	93 81       	ldd	r25, Z+3	; 0x03
    2938:	0c 5f       	subi	r16, 0xFC	; 252
    293a:	1f 4f       	sbci	r17, 0xFF	; 255
    293c:	08 c0       	rjmp	.+16     	; 0x294e <vfprintf+0x1d2>
    293e:	60 81       	ld	r22, Z
    2940:	71 81       	ldd	r23, Z+1	; 0x01
    2942:	88 27       	eor	r24, r24
    2944:	77 fd       	sbrc	r23, 7
    2946:	80 95       	com	r24
    2948:	98 2f       	mov	r25, r24
    294a:	0e 5f       	subi	r16, 0xFE	; 254
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	2f 76       	andi	r18, 0x6F	; 111
    2950:	b2 2e       	mov	r11, r18
    2952:	97 ff       	sbrs	r25, 7
    2954:	09 c0       	rjmp	.+18     	; 0x2968 <vfprintf+0x1ec>
    2956:	90 95       	com	r25
    2958:	80 95       	com	r24
    295a:	70 95       	com	r23
    295c:	61 95       	neg	r22
    295e:	7f 4f       	sbci	r23, 0xFF	; 255
    2960:	8f 4f       	sbci	r24, 0xFF	; 255
    2962:	9f 4f       	sbci	r25, 0xFF	; 255
    2964:	20 68       	ori	r18, 0x80	; 128
    2966:	b2 2e       	mov	r11, r18
    2968:	2a e0       	ldi	r18, 0x0A	; 10
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	a4 01       	movw	r20, r8
    296e:	59 d2       	rcall	.+1202   	; 0x2e22 <__ultoa_invert>
    2970:	a8 2e       	mov	r10, r24
    2972:	a8 18       	sub	r10, r8
    2974:	43 c0       	rjmp	.+134    	; 0x29fc <vfprintf+0x280>
    2976:	85 37       	cpi	r24, 0x75	; 117
    2978:	29 f4       	brne	.+10     	; 0x2984 <vfprintf+0x208>
    297a:	2f 7e       	andi	r18, 0xEF	; 239
    297c:	b2 2e       	mov	r11, r18
    297e:	2a e0       	ldi	r18, 0x0A	; 10
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	25 c0       	rjmp	.+74     	; 0x29ce <vfprintf+0x252>
    2984:	f2 2f       	mov	r31, r18
    2986:	f9 7f       	andi	r31, 0xF9	; 249
    2988:	bf 2e       	mov	r11, r31
    298a:	8f 36       	cpi	r24, 0x6F	; 111
    298c:	c1 f0       	breq	.+48     	; 0x29be <vfprintf+0x242>
    298e:	18 f4       	brcc	.+6      	; 0x2996 <vfprintf+0x21a>
    2990:	88 35       	cpi	r24, 0x58	; 88
    2992:	79 f0       	breq	.+30     	; 0x29b2 <vfprintf+0x236>
    2994:	ad c0       	rjmp	.+346    	; 0x2af0 <vfprintf+0x374>
    2996:	80 37       	cpi	r24, 0x70	; 112
    2998:	19 f0       	breq	.+6      	; 0x29a0 <vfprintf+0x224>
    299a:	88 37       	cpi	r24, 0x78	; 120
    299c:	21 f0       	breq	.+8      	; 0x29a6 <vfprintf+0x22a>
    299e:	a8 c0       	rjmp	.+336    	; 0x2af0 <vfprintf+0x374>
    29a0:	2f 2f       	mov	r18, r31
    29a2:	20 61       	ori	r18, 0x10	; 16
    29a4:	b2 2e       	mov	r11, r18
    29a6:	b4 fe       	sbrs	r11, 4
    29a8:	0d c0       	rjmp	.+26     	; 0x29c4 <vfprintf+0x248>
    29aa:	8b 2d       	mov	r24, r11
    29ac:	84 60       	ori	r24, 0x04	; 4
    29ae:	b8 2e       	mov	r11, r24
    29b0:	09 c0       	rjmp	.+18     	; 0x29c4 <vfprintf+0x248>
    29b2:	24 ff       	sbrs	r18, 4
    29b4:	0a c0       	rjmp	.+20     	; 0x29ca <vfprintf+0x24e>
    29b6:	9f 2f       	mov	r25, r31
    29b8:	96 60       	ori	r25, 0x06	; 6
    29ba:	b9 2e       	mov	r11, r25
    29bc:	06 c0       	rjmp	.+12     	; 0x29ca <vfprintf+0x24e>
    29be:	28 e0       	ldi	r18, 0x08	; 8
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	05 c0       	rjmp	.+10     	; 0x29ce <vfprintf+0x252>
    29c4:	20 e1       	ldi	r18, 0x10	; 16
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	02 c0       	rjmp	.+4      	; 0x29ce <vfprintf+0x252>
    29ca:	20 e1       	ldi	r18, 0x10	; 16
    29cc:	32 e0       	ldi	r19, 0x02	; 2
    29ce:	f8 01       	movw	r30, r16
    29d0:	b7 fe       	sbrs	r11, 7
    29d2:	07 c0       	rjmp	.+14     	; 0x29e2 <vfprintf+0x266>
    29d4:	60 81       	ld	r22, Z
    29d6:	71 81       	ldd	r23, Z+1	; 0x01
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	0c 5f       	subi	r16, 0xFC	; 252
    29de:	1f 4f       	sbci	r17, 0xFF	; 255
    29e0:	06 c0       	rjmp	.+12     	; 0x29ee <vfprintf+0x272>
    29e2:	60 81       	ld	r22, Z
    29e4:	71 81       	ldd	r23, Z+1	; 0x01
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 5f       	subi	r16, 0xFE	; 254
    29ec:	1f 4f       	sbci	r17, 0xFF	; 255
    29ee:	a4 01       	movw	r20, r8
    29f0:	18 d2       	rcall	.+1072   	; 0x2e22 <__ultoa_invert>
    29f2:	a8 2e       	mov	r10, r24
    29f4:	a8 18       	sub	r10, r8
    29f6:	fb 2d       	mov	r31, r11
    29f8:	ff 77       	andi	r31, 0x7F	; 127
    29fa:	bf 2e       	mov	r11, r31
    29fc:	b6 fe       	sbrs	r11, 6
    29fe:	0b c0       	rjmp	.+22     	; 0x2a16 <vfprintf+0x29a>
    2a00:	2b 2d       	mov	r18, r11
    2a02:	2e 7f       	andi	r18, 0xFE	; 254
    2a04:	a5 14       	cp	r10, r5
    2a06:	50 f4       	brcc	.+20     	; 0x2a1c <vfprintf+0x2a0>
    2a08:	b4 fe       	sbrs	r11, 4
    2a0a:	0a c0       	rjmp	.+20     	; 0x2a20 <vfprintf+0x2a4>
    2a0c:	b2 fc       	sbrc	r11, 2
    2a0e:	08 c0       	rjmp	.+16     	; 0x2a20 <vfprintf+0x2a4>
    2a10:	2b 2d       	mov	r18, r11
    2a12:	2e 7e       	andi	r18, 0xEE	; 238
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <vfprintf+0x2a4>
    2a16:	7a 2c       	mov	r7, r10
    2a18:	2b 2d       	mov	r18, r11
    2a1a:	03 c0       	rjmp	.+6      	; 0x2a22 <vfprintf+0x2a6>
    2a1c:	7a 2c       	mov	r7, r10
    2a1e:	01 c0       	rjmp	.+2      	; 0x2a22 <vfprintf+0x2a6>
    2a20:	75 2c       	mov	r7, r5
    2a22:	24 ff       	sbrs	r18, 4
    2a24:	0d c0       	rjmp	.+26     	; 0x2a40 <vfprintf+0x2c4>
    2a26:	fe 01       	movw	r30, r28
    2a28:	ea 0d       	add	r30, r10
    2a2a:	f1 1d       	adc	r31, r1
    2a2c:	80 81       	ld	r24, Z
    2a2e:	80 33       	cpi	r24, 0x30	; 48
    2a30:	11 f4       	brne	.+4      	; 0x2a36 <vfprintf+0x2ba>
    2a32:	29 7e       	andi	r18, 0xE9	; 233
    2a34:	09 c0       	rjmp	.+18     	; 0x2a48 <vfprintf+0x2cc>
    2a36:	22 ff       	sbrs	r18, 2
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <vfprintf+0x2ca>
    2a3a:	73 94       	inc	r7
    2a3c:	73 94       	inc	r7
    2a3e:	04 c0       	rjmp	.+8      	; 0x2a48 <vfprintf+0x2cc>
    2a40:	82 2f       	mov	r24, r18
    2a42:	86 78       	andi	r24, 0x86	; 134
    2a44:	09 f0       	breq	.+2      	; 0x2a48 <vfprintf+0x2cc>
    2a46:	73 94       	inc	r7
    2a48:	23 fd       	sbrc	r18, 3
    2a4a:	12 c0       	rjmp	.+36     	; 0x2a70 <vfprintf+0x2f4>
    2a4c:	20 ff       	sbrs	r18, 0
    2a4e:	06 c0       	rjmp	.+12     	; 0x2a5c <vfprintf+0x2e0>
    2a50:	5a 2c       	mov	r5, r10
    2a52:	73 14       	cp	r7, r3
    2a54:	18 f4       	brcc	.+6      	; 0x2a5c <vfprintf+0x2e0>
    2a56:	53 0c       	add	r5, r3
    2a58:	57 18       	sub	r5, r7
    2a5a:	73 2c       	mov	r7, r3
    2a5c:	73 14       	cp	r7, r3
    2a5e:	60 f4       	brcc	.+24     	; 0x2a78 <vfprintf+0x2fc>
    2a60:	b7 01       	movw	r22, r14
    2a62:	80 e2       	ldi	r24, 0x20	; 32
    2a64:	90 e0       	ldi	r25, 0x00	; 0
    2a66:	2c 87       	std	Y+12, r18	; 0x0c
    2a68:	aa d1       	rcall	.+852    	; 0x2dbe <fputc>
    2a6a:	73 94       	inc	r7
    2a6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a6e:	f6 cf       	rjmp	.-20     	; 0x2a5c <vfprintf+0x2e0>
    2a70:	73 14       	cp	r7, r3
    2a72:	10 f4       	brcc	.+4      	; 0x2a78 <vfprintf+0x2fc>
    2a74:	37 18       	sub	r3, r7
    2a76:	01 c0       	rjmp	.+2      	; 0x2a7a <vfprintf+0x2fe>
    2a78:	31 2c       	mov	r3, r1
    2a7a:	24 ff       	sbrs	r18, 4
    2a7c:	11 c0       	rjmp	.+34     	; 0x2aa0 <vfprintf+0x324>
    2a7e:	b7 01       	movw	r22, r14
    2a80:	80 e3       	ldi	r24, 0x30	; 48
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	2c 87       	std	Y+12, r18	; 0x0c
    2a86:	9b d1       	rcall	.+822    	; 0x2dbe <fputc>
    2a88:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a8a:	22 ff       	sbrs	r18, 2
    2a8c:	16 c0       	rjmp	.+44     	; 0x2aba <vfprintf+0x33e>
    2a8e:	21 ff       	sbrs	r18, 1
    2a90:	03 c0       	rjmp	.+6      	; 0x2a98 <vfprintf+0x31c>
    2a92:	88 e5       	ldi	r24, 0x58	; 88
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	02 c0       	rjmp	.+4      	; 0x2a9c <vfprintf+0x320>
    2a98:	88 e7       	ldi	r24, 0x78	; 120
    2a9a:	90 e0       	ldi	r25, 0x00	; 0
    2a9c:	b7 01       	movw	r22, r14
    2a9e:	0c c0       	rjmp	.+24     	; 0x2ab8 <vfprintf+0x33c>
    2aa0:	82 2f       	mov	r24, r18
    2aa2:	86 78       	andi	r24, 0x86	; 134
    2aa4:	51 f0       	breq	.+20     	; 0x2aba <vfprintf+0x33e>
    2aa6:	21 fd       	sbrc	r18, 1
    2aa8:	02 c0       	rjmp	.+4      	; 0x2aae <vfprintf+0x332>
    2aaa:	80 e2       	ldi	r24, 0x20	; 32
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <vfprintf+0x334>
    2aae:	8b e2       	ldi	r24, 0x2B	; 43
    2ab0:	27 fd       	sbrc	r18, 7
    2ab2:	8d e2       	ldi	r24, 0x2D	; 45
    2ab4:	b7 01       	movw	r22, r14
    2ab6:	90 e0       	ldi	r25, 0x00	; 0
    2ab8:	82 d1       	rcall	.+772    	; 0x2dbe <fputc>
    2aba:	a5 14       	cp	r10, r5
    2abc:	30 f4       	brcc	.+12     	; 0x2aca <vfprintf+0x34e>
    2abe:	b7 01       	movw	r22, r14
    2ac0:	80 e3       	ldi	r24, 0x30	; 48
    2ac2:	90 e0       	ldi	r25, 0x00	; 0
    2ac4:	7c d1       	rcall	.+760    	; 0x2dbe <fputc>
    2ac6:	5a 94       	dec	r5
    2ac8:	f8 cf       	rjmp	.-16     	; 0x2aba <vfprintf+0x33e>
    2aca:	aa 94       	dec	r10
    2acc:	f4 01       	movw	r30, r8
    2ace:	ea 0d       	add	r30, r10
    2ad0:	f1 1d       	adc	r31, r1
    2ad2:	80 81       	ld	r24, Z
    2ad4:	b7 01       	movw	r22, r14
    2ad6:	90 e0       	ldi	r25, 0x00	; 0
    2ad8:	72 d1       	rcall	.+740    	; 0x2dbe <fputc>
    2ada:	a1 10       	cpse	r10, r1
    2adc:	f6 cf       	rjmp	.-20     	; 0x2aca <vfprintf+0x34e>
    2ade:	33 20       	and	r3, r3
    2ae0:	09 f4       	brne	.+2      	; 0x2ae4 <vfprintf+0x368>
    2ae2:	5d ce       	rjmp	.-838    	; 0x279e <vfprintf+0x22>
    2ae4:	b7 01       	movw	r22, r14
    2ae6:	80 e2       	ldi	r24, 0x20	; 32
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	69 d1       	rcall	.+722    	; 0x2dbe <fputc>
    2aec:	3a 94       	dec	r3
    2aee:	f7 cf       	rjmp	.-18     	; 0x2ade <vfprintf+0x362>
    2af0:	f7 01       	movw	r30, r14
    2af2:	86 81       	ldd	r24, Z+6	; 0x06
    2af4:	97 81       	ldd	r25, Z+7	; 0x07
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <vfprintf+0x380>
    2af8:	8f ef       	ldi	r24, 0xFF	; 255
    2afa:	9f ef       	ldi	r25, 0xFF	; 255
    2afc:	2c 96       	adiw	r28, 0x0c	; 12
    2afe:	e2 e1       	ldi	r30, 0x12	; 18
    2b00:	1a c2       	rjmp	.+1076   	; 0x2f36 <__epilogue_restores__>

00002b02 <calloc>:
    2b02:	0f 93       	push	r16
    2b04:	1f 93       	push	r17
    2b06:	cf 93       	push	r28
    2b08:	df 93       	push	r29
    2b0a:	86 9f       	mul	r24, r22
    2b0c:	80 01       	movw	r16, r0
    2b0e:	87 9f       	mul	r24, r23
    2b10:	10 0d       	add	r17, r0
    2b12:	96 9f       	mul	r25, r22
    2b14:	10 0d       	add	r17, r0
    2b16:	11 24       	eor	r1, r1
    2b18:	c8 01       	movw	r24, r16
    2b1a:	0d d0       	rcall	.+26     	; 0x2b36 <malloc>
    2b1c:	ec 01       	movw	r28, r24
    2b1e:	00 97       	sbiw	r24, 0x00	; 0
    2b20:	21 f0       	breq	.+8      	; 0x2b2a <calloc+0x28>
    2b22:	a8 01       	movw	r20, r16
    2b24:	60 e0       	ldi	r22, 0x00	; 0
    2b26:	70 e0       	ldi	r23, 0x00	; 0
    2b28:	38 d1       	rcall	.+624    	; 0x2d9a <memset>
    2b2a:	ce 01       	movw	r24, r28
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	1f 91       	pop	r17
    2b32:	0f 91       	pop	r16
    2b34:	08 95       	ret

00002b36 <malloc>:
    2b36:	cf 93       	push	r28
    2b38:	df 93       	push	r29
    2b3a:	82 30       	cpi	r24, 0x02	; 2
    2b3c:	91 05       	cpc	r25, r1
    2b3e:	10 f4       	brcc	.+4      	; 0x2b44 <malloc+0xe>
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	e0 91 5f 03 	lds	r30, 0x035F
    2b48:	f0 91 60 03 	lds	r31, 0x0360
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	a0 e0       	ldi	r26, 0x00	; 0
    2b52:	b0 e0       	ldi	r27, 0x00	; 0
    2b54:	30 97       	sbiw	r30, 0x00	; 0
    2b56:	39 f1       	breq	.+78     	; 0x2ba6 <malloc+0x70>
    2b58:	40 81       	ld	r20, Z
    2b5a:	51 81       	ldd	r21, Z+1	; 0x01
    2b5c:	48 17       	cp	r20, r24
    2b5e:	59 07       	cpc	r21, r25
    2b60:	b8 f0       	brcs	.+46     	; 0x2b90 <malloc+0x5a>
    2b62:	48 17       	cp	r20, r24
    2b64:	59 07       	cpc	r21, r25
    2b66:	71 f4       	brne	.+28     	; 0x2b84 <malloc+0x4e>
    2b68:	82 81       	ldd	r24, Z+2	; 0x02
    2b6a:	93 81       	ldd	r25, Z+3	; 0x03
    2b6c:	10 97       	sbiw	r26, 0x00	; 0
    2b6e:	29 f0       	breq	.+10     	; 0x2b7a <malloc+0x44>
    2b70:	13 96       	adiw	r26, 0x03	; 3
    2b72:	9c 93       	st	X, r25
    2b74:	8e 93       	st	-X, r24
    2b76:	12 97       	sbiw	r26, 0x02	; 2
    2b78:	2c c0       	rjmp	.+88     	; 0x2bd2 <malloc+0x9c>
    2b7a:	90 93 60 03 	sts	0x0360, r25
    2b7e:	80 93 5f 03 	sts	0x035F, r24
    2b82:	27 c0       	rjmp	.+78     	; 0x2bd2 <malloc+0x9c>
    2b84:	21 15       	cp	r18, r1
    2b86:	31 05       	cpc	r19, r1
    2b88:	31 f0       	breq	.+12     	; 0x2b96 <malloc+0x60>
    2b8a:	42 17       	cp	r20, r18
    2b8c:	53 07       	cpc	r21, r19
    2b8e:	18 f0       	brcs	.+6      	; 0x2b96 <malloc+0x60>
    2b90:	a9 01       	movw	r20, r18
    2b92:	db 01       	movw	r26, r22
    2b94:	01 c0       	rjmp	.+2      	; 0x2b98 <malloc+0x62>
    2b96:	ef 01       	movw	r28, r30
    2b98:	9a 01       	movw	r18, r20
    2b9a:	bd 01       	movw	r22, r26
    2b9c:	df 01       	movw	r26, r30
    2b9e:	02 80       	ldd	r0, Z+2	; 0x02
    2ba0:	f3 81       	ldd	r31, Z+3	; 0x03
    2ba2:	e0 2d       	mov	r30, r0
    2ba4:	d7 cf       	rjmp	.-82     	; 0x2b54 <malloc+0x1e>
    2ba6:	21 15       	cp	r18, r1
    2ba8:	31 05       	cpc	r19, r1
    2baa:	f9 f0       	breq	.+62     	; 0x2bea <malloc+0xb4>
    2bac:	28 1b       	sub	r18, r24
    2bae:	39 0b       	sbc	r19, r25
    2bb0:	24 30       	cpi	r18, 0x04	; 4
    2bb2:	31 05       	cpc	r19, r1
    2bb4:	80 f4       	brcc	.+32     	; 0x2bd6 <malloc+0xa0>
    2bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bba:	61 15       	cp	r22, r1
    2bbc:	71 05       	cpc	r23, r1
    2bbe:	21 f0       	breq	.+8      	; 0x2bc8 <malloc+0x92>
    2bc0:	fb 01       	movw	r30, r22
    2bc2:	93 83       	std	Z+3, r25	; 0x03
    2bc4:	82 83       	std	Z+2, r24	; 0x02
    2bc6:	04 c0       	rjmp	.+8      	; 0x2bd0 <malloc+0x9a>
    2bc8:	90 93 60 03 	sts	0x0360, r25
    2bcc:	80 93 5f 03 	sts	0x035F, r24
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	32 96       	adiw	r30, 0x02	; 2
    2bd4:	44 c0       	rjmp	.+136    	; 0x2c5e <malloc+0x128>
    2bd6:	fe 01       	movw	r30, r28
    2bd8:	e2 0f       	add	r30, r18
    2bda:	f3 1f       	adc	r31, r19
    2bdc:	81 93       	st	Z+, r24
    2bde:	91 93       	st	Z+, r25
    2be0:	22 50       	subi	r18, 0x02	; 2
    2be2:	31 09       	sbc	r19, r1
    2be4:	39 83       	std	Y+1, r19	; 0x01
    2be6:	28 83       	st	Y, r18
    2be8:	3a c0       	rjmp	.+116    	; 0x2c5e <malloc+0x128>
    2bea:	20 91 5d 03 	lds	r18, 0x035D
    2bee:	30 91 5e 03 	lds	r19, 0x035E
    2bf2:	23 2b       	or	r18, r19
    2bf4:	41 f4       	brne	.+16     	; 0x2c06 <malloc+0xd0>
    2bf6:	20 91 06 01 	lds	r18, 0x0106
    2bfa:	30 91 07 01 	lds	r19, 0x0107
    2bfe:	30 93 5e 03 	sts	0x035E, r19
    2c02:	20 93 5d 03 	sts	0x035D, r18
    2c06:	20 91 04 01 	lds	r18, 0x0104
    2c0a:	30 91 05 01 	lds	r19, 0x0105
    2c0e:	21 15       	cp	r18, r1
    2c10:	31 05       	cpc	r19, r1
    2c12:	41 f4       	brne	.+16     	; 0x2c24 <malloc+0xee>
    2c14:	2d b7       	in	r18, 0x3d	; 61
    2c16:	3e b7       	in	r19, 0x3e	; 62
    2c18:	40 91 08 01 	lds	r20, 0x0108
    2c1c:	50 91 09 01 	lds	r21, 0x0109
    2c20:	24 1b       	sub	r18, r20
    2c22:	35 0b       	sbc	r19, r21
    2c24:	e0 91 5d 03 	lds	r30, 0x035D
    2c28:	f0 91 5e 03 	lds	r31, 0x035E
    2c2c:	e2 17       	cp	r30, r18
    2c2e:	f3 07       	cpc	r31, r19
    2c30:	a0 f4       	brcc	.+40     	; 0x2c5a <malloc+0x124>
    2c32:	2e 1b       	sub	r18, r30
    2c34:	3f 0b       	sbc	r19, r31
    2c36:	28 17       	cp	r18, r24
    2c38:	39 07       	cpc	r19, r25
    2c3a:	78 f0       	brcs	.+30     	; 0x2c5a <malloc+0x124>
    2c3c:	ac 01       	movw	r20, r24
    2c3e:	4e 5f       	subi	r20, 0xFE	; 254
    2c40:	5f 4f       	sbci	r21, 0xFF	; 255
    2c42:	24 17       	cp	r18, r20
    2c44:	35 07       	cpc	r19, r21
    2c46:	48 f0       	brcs	.+18     	; 0x2c5a <malloc+0x124>
    2c48:	4e 0f       	add	r20, r30
    2c4a:	5f 1f       	adc	r21, r31
    2c4c:	50 93 5e 03 	sts	0x035E, r21
    2c50:	40 93 5d 03 	sts	0x035D, r20
    2c54:	81 93       	st	Z+, r24
    2c56:	91 93       	st	Z+, r25
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <malloc+0x128>
    2c5a:	e0 e0       	ldi	r30, 0x00	; 0
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	cf 01       	movw	r24, r30
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	08 95       	ret

00002c66 <free>:
    2c66:	cf 93       	push	r28
    2c68:	df 93       	push	r29
    2c6a:	00 97       	sbiw	r24, 0x00	; 0
    2c6c:	09 f4       	brne	.+2      	; 0x2c70 <free+0xa>
    2c6e:	87 c0       	rjmp	.+270    	; 0x2d7e <free+0x118>
    2c70:	fc 01       	movw	r30, r24
    2c72:	32 97       	sbiw	r30, 0x02	; 2
    2c74:	13 82       	std	Z+3, r1	; 0x03
    2c76:	12 82       	std	Z+2, r1	; 0x02
    2c78:	c0 91 5f 03 	lds	r28, 0x035F
    2c7c:	d0 91 60 03 	lds	r29, 0x0360
    2c80:	20 97       	sbiw	r28, 0x00	; 0
    2c82:	81 f4       	brne	.+32     	; 0x2ca4 <free+0x3e>
    2c84:	20 81       	ld	r18, Z
    2c86:	31 81       	ldd	r19, Z+1	; 0x01
    2c88:	28 0f       	add	r18, r24
    2c8a:	39 1f       	adc	r19, r25
    2c8c:	80 91 5d 03 	lds	r24, 0x035D
    2c90:	90 91 5e 03 	lds	r25, 0x035E
    2c94:	82 17       	cp	r24, r18
    2c96:	93 07       	cpc	r25, r19
    2c98:	79 f5       	brne	.+94     	; 0x2cf8 <free+0x92>
    2c9a:	f0 93 5e 03 	sts	0x035E, r31
    2c9e:	e0 93 5d 03 	sts	0x035D, r30
    2ca2:	6d c0       	rjmp	.+218    	; 0x2d7e <free+0x118>
    2ca4:	de 01       	movw	r26, r28
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
    2caa:	ae 17       	cp	r26, r30
    2cac:	bf 07       	cpc	r27, r31
    2cae:	50 f4       	brcc	.+20     	; 0x2cc4 <free+0x5e>
    2cb0:	12 96       	adiw	r26, 0x02	; 2
    2cb2:	4d 91       	ld	r20, X+
    2cb4:	5c 91       	ld	r21, X
    2cb6:	13 97       	sbiw	r26, 0x03	; 3
    2cb8:	9d 01       	movw	r18, r26
    2cba:	41 15       	cp	r20, r1
    2cbc:	51 05       	cpc	r21, r1
    2cbe:	09 f1       	breq	.+66     	; 0x2d02 <free+0x9c>
    2cc0:	da 01       	movw	r26, r20
    2cc2:	f3 cf       	rjmp	.-26     	; 0x2caa <free+0x44>
    2cc4:	b3 83       	std	Z+3, r27	; 0x03
    2cc6:	a2 83       	std	Z+2, r26	; 0x02
    2cc8:	40 81       	ld	r20, Z
    2cca:	51 81       	ldd	r21, Z+1	; 0x01
    2ccc:	84 0f       	add	r24, r20
    2cce:	95 1f       	adc	r25, r21
    2cd0:	8a 17       	cp	r24, r26
    2cd2:	9b 07       	cpc	r25, r27
    2cd4:	71 f4       	brne	.+28     	; 0x2cf2 <free+0x8c>
    2cd6:	8d 91       	ld	r24, X+
    2cd8:	9c 91       	ld	r25, X
    2cda:	11 97       	sbiw	r26, 0x01	; 1
    2cdc:	84 0f       	add	r24, r20
    2cde:	95 1f       	adc	r25, r21
    2ce0:	02 96       	adiw	r24, 0x02	; 2
    2ce2:	91 83       	std	Z+1, r25	; 0x01
    2ce4:	80 83       	st	Z, r24
    2ce6:	12 96       	adiw	r26, 0x02	; 2
    2ce8:	8d 91       	ld	r24, X+
    2cea:	9c 91       	ld	r25, X
    2cec:	13 97       	sbiw	r26, 0x03	; 3
    2cee:	93 83       	std	Z+3, r25	; 0x03
    2cf0:	82 83       	std	Z+2, r24	; 0x02
    2cf2:	21 15       	cp	r18, r1
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	29 f4       	brne	.+10     	; 0x2d02 <free+0x9c>
    2cf8:	f0 93 60 03 	sts	0x0360, r31
    2cfc:	e0 93 5f 03 	sts	0x035F, r30
    2d00:	3e c0       	rjmp	.+124    	; 0x2d7e <free+0x118>
    2d02:	d9 01       	movw	r26, r18
    2d04:	13 96       	adiw	r26, 0x03	; 3
    2d06:	fc 93       	st	X, r31
    2d08:	ee 93       	st	-X, r30
    2d0a:	12 97       	sbiw	r26, 0x02	; 2
    2d0c:	4d 91       	ld	r20, X+
    2d0e:	5d 91       	ld	r21, X+
    2d10:	a4 0f       	add	r26, r20
    2d12:	b5 1f       	adc	r27, r21
    2d14:	ea 17       	cp	r30, r26
    2d16:	fb 07       	cpc	r31, r27
    2d18:	79 f4       	brne	.+30     	; 0x2d38 <free+0xd2>
    2d1a:	80 81       	ld	r24, Z
    2d1c:	91 81       	ldd	r25, Z+1	; 0x01
    2d1e:	84 0f       	add	r24, r20
    2d20:	95 1f       	adc	r25, r21
    2d22:	02 96       	adiw	r24, 0x02	; 2
    2d24:	d9 01       	movw	r26, r18
    2d26:	11 96       	adiw	r26, 0x01	; 1
    2d28:	9c 93       	st	X, r25
    2d2a:	8e 93       	st	-X, r24
    2d2c:	82 81       	ldd	r24, Z+2	; 0x02
    2d2e:	93 81       	ldd	r25, Z+3	; 0x03
    2d30:	13 96       	adiw	r26, 0x03	; 3
    2d32:	9c 93       	st	X, r25
    2d34:	8e 93       	st	-X, r24
    2d36:	12 97       	sbiw	r26, 0x02	; 2
    2d38:	e0 e0       	ldi	r30, 0x00	; 0
    2d3a:	f0 e0       	ldi	r31, 0x00	; 0
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	00 97       	sbiw	r24, 0x00	; 0
    2d42:	19 f0       	breq	.+6      	; 0x2d4a <free+0xe4>
    2d44:	fe 01       	movw	r30, r28
    2d46:	ec 01       	movw	r28, r24
    2d48:	f9 cf       	rjmp	.-14     	; 0x2d3c <free+0xd6>
    2d4a:	ce 01       	movw	r24, r28
    2d4c:	02 96       	adiw	r24, 0x02	; 2
    2d4e:	28 81       	ld	r18, Y
    2d50:	39 81       	ldd	r19, Y+1	; 0x01
    2d52:	82 0f       	add	r24, r18
    2d54:	93 1f       	adc	r25, r19
    2d56:	20 91 5d 03 	lds	r18, 0x035D
    2d5a:	30 91 5e 03 	lds	r19, 0x035E
    2d5e:	28 17       	cp	r18, r24
    2d60:	39 07       	cpc	r19, r25
    2d62:	69 f4       	brne	.+26     	; 0x2d7e <free+0x118>
    2d64:	30 97       	sbiw	r30, 0x00	; 0
    2d66:	29 f4       	brne	.+10     	; 0x2d72 <free+0x10c>
    2d68:	10 92 60 03 	sts	0x0360, r1
    2d6c:	10 92 5f 03 	sts	0x035F, r1
    2d70:	02 c0       	rjmp	.+4      	; 0x2d76 <free+0x110>
    2d72:	13 82       	std	Z+3, r1	; 0x03
    2d74:	12 82       	std	Z+2, r1	; 0x02
    2d76:	d0 93 5e 03 	sts	0x035E, r29
    2d7a:	c0 93 5d 03 	sts	0x035D, r28
    2d7e:	df 91       	pop	r29
    2d80:	cf 91       	pop	r28
    2d82:	08 95       	ret

00002d84 <strnlen_P>:
    2d84:	fc 01       	movw	r30, r24
    2d86:	05 90       	lpm	r0, Z+
    2d88:	61 50       	subi	r22, 0x01	; 1
    2d8a:	70 40       	sbci	r23, 0x00	; 0
    2d8c:	01 10       	cpse	r0, r1
    2d8e:	d8 f7       	brcc	.-10     	; 0x2d86 <strnlen_P+0x2>
    2d90:	80 95       	com	r24
    2d92:	90 95       	com	r25
    2d94:	8e 0f       	add	r24, r30
    2d96:	9f 1f       	adc	r25, r31
    2d98:	08 95       	ret

00002d9a <memset>:
    2d9a:	dc 01       	movw	r26, r24
    2d9c:	01 c0       	rjmp	.+2      	; 0x2da0 <memset+0x6>
    2d9e:	6d 93       	st	X+, r22
    2da0:	41 50       	subi	r20, 0x01	; 1
    2da2:	50 40       	sbci	r21, 0x00	; 0
    2da4:	e0 f7       	brcc	.-8      	; 0x2d9e <memset+0x4>
    2da6:	08 95       	ret

00002da8 <strnlen>:
    2da8:	fc 01       	movw	r30, r24
    2daa:	61 50       	subi	r22, 0x01	; 1
    2dac:	70 40       	sbci	r23, 0x00	; 0
    2dae:	01 90       	ld	r0, Z+
    2db0:	01 10       	cpse	r0, r1
    2db2:	d8 f7       	brcc	.-10     	; 0x2daa <strnlen+0x2>
    2db4:	80 95       	com	r24
    2db6:	90 95       	com	r25
    2db8:	8e 0f       	add	r24, r30
    2dba:	9f 1f       	adc	r25, r31
    2dbc:	08 95       	ret

00002dbe <fputc>:
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	18 2f       	mov	r17, r24
    2dc8:	09 2f       	mov	r16, r25
    2dca:	eb 01       	movw	r28, r22
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	81 fd       	sbrc	r24, 1
    2dd0:	03 c0       	rjmp	.+6      	; 0x2dd8 <fputc+0x1a>
    2dd2:	8f ef       	ldi	r24, 0xFF	; 255
    2dd4:	9f ef       	ldi	r25, 0xFF	; 255
    2dd6:	20 c0       	rjmp	.+64     	; 0x2e18 <fputc+0x5a>
    2dd8:	82 ff       	sbrs	r24, 2
    2dda:	10 c0       	rjmp	.+32     	; 0x2dfc <fputc+0x3e>
    2ddc:	4e 81       	ldd	r20, Y+6	; 0x06
    2dde:	5f 81       	ldd	r21, Y+7	; 0x07
    2de0:	2c 81       	ldd	r18, Y+4	; 0x04
    2de2:	3d 81       	ldd	r19, Y+5	; 0x05
    2de4:	42 17       	cp	r20, r18
    2de6:	53 07       	cpc	r21, r19
    2de8:	7c f4       	brge	.+30     	; 0x2e08 <fputc+0x4a>
    2dea:	e8 81       	ld	r30, Y
    2dec:	f9 81       	ldd	r31, Y+1	; 0x01
    2dee:	9f 01       	movw	r18, r30
    2df0:	2f 5f       	subi	r18, 0xFF	; 255
    2df2:	3f 4f       	sbci	r19, 0xFF	; 255
    2df4:	39 83       	std	Y+1, r19	; 0x01
    2df6:	28 83       	st	Y, r18
    2df8:	10 83       	st	Z, r17
    2dfa:	06 c0       	rjmp	.+12     	; 0x2e08 <fputc+0x4a>
    2dfc:	e8 85       	ldd	r30, Y+8	; 0x08
    2dfe:	f9 85       	ldd	r31, Y+9	; 0x09
    2e00:	81 2f       	mov	r24, r17
    2e02:	09 95       	icall
    2e04:	89 2b       	or	r24, r25
    2e06:	29 f7       	brne	.-54     	; 0x2dd2 <fputc+0x14>
    2e08:	2e 81       	ldd	r18, Y+6	; 0x06
    2e0a:	3f 81       	ldd	r19, Y+7	; 0x07
    2e0c:	2f 5f       	subi	r18, 0xFF	; 255
    2e0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e10:	3f 83       	std	Y+7, r19	; 0x07
    2e12:	2e 83       	std	Y+6, r18	; 0x06
    2e14:	81 2f       	mov	r24, r17
    2e16:	90 2f       	mov	r25, r16
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	08 95       	ret

00002e22 <__ultoa_invert>:
    2e22:	fa 01       	movw	r30, r20
    2e24:	aa 27       	eor	r26, r26
    2e26:	28 30       	cpi	r18, 0x08	; 8
    2e28:	51 f1       	breq	.+84     	; 0x2e7e <__ultoa_invert+0x5c>
    2e2a:	20 31       	cpi	r18, 0x10	; 16
    2e2c:	81 f1       	breq	.+96     	; 0x2e8e <__ultoa_invert+0x6c>
    2e2e:	e8 94       	clt
    2e30:	6f 93       	push	r22
    2e32:	6e 7f       	andi	r22, 0xFE	; 254
    2e34:	6e 5f       	subi	r22, 0xFE	; 254
    2e36:	7f 4f       	sbci	r23, 0xFF	; 255
    2e38:	8f 4f       	sbci	r24, 0xFF	; 255
    2e3a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e3c:	af 4f       	sbci	r26, 0xFF	; 255
    2e3e:	b1 e0       	ldi	r27, 0x01	; 1
    2e40:	3e d0       	rcall	.+124    	; 0x2ebe <__ultoa_invert+0x9c>
    2e42:	b4 e0       	ldi	r27, 0x04	; 4
    2e44:	3c d0       	rcall	.+120    	; 0x2ebe <__ultoa_invert+0x9c>
    2e46:	67 0f       	add	r22, r23
    2e48:	78 1f       	adc	r23, r24
    2e4a:	89 1f       	adc	r24, r25
    2e4c:	9a 1f       	adc	r25, r26
    2e4e:	a1 1d       	adc	r26, r1
    2e50:	68 0f       	add	r22, r24
    2e52:	79 1f       	adc	r23, r25
    2e54:	8a 1f       	adc	r24, r26
    2e56:	91 1d       	adc	r25, r1
    2e58:	a1 1d       	adc	r26, r1
    2e5a:	6a 0f       	add	r22, r26
    2e5c:	71 1d       	adc	r23, r1
    2e5e:	81 1d       	adc	r24, r1
    2e60:	91 1d       	adc	r25, r1
    2e62:	a1 1d       	adc	r26, r1
    2e64:	20 d0       	rcall	.+64     	; 0x2ea6 <__ultoa_invert+0x84>
    2e66:	09 f4       	brne	.+2      	; 0x2e6a <__ultoa_invert+0x48>
    2e68:	68 94       	set
    2e6a:	3f 91       	pop	r19
    2e6c:	2a e0       	ldi	r18, 0x0A	; 10
    2e6e:	26 9f       	mul	r18, r22
    2e70:	11 24       	eor	r1, r1
    2e72:	30 19       	sub	r19, r0
    2e74:	30 5d       	subi	r19, 0xD0	; 208
    2e76:	31 93       	st	Z+, r19
    2e78:	de f6       	brtc	.-74     	; 0x2e30 <__ultoa_invert+0xe>
    2e7a:	cf 01       	movw	r24, r30
    2e7c:	08 95       	ret
    2e7e:	46 2f       	mov	r20, r22
    2e80:	47 70       	andi	r20, 0x07	; 7
    2e82:	40 5d       	subi	r20, 0xD0	; 208
    2e84:	41 93       	st	Z+, r20
    2e86:	b3 e0       	ldi	r27, 0x03	; 3
    2e88:	0f d0       	rcall	.+30     	; 0x2ea8 <__ultoa_invert+0x86>
    2e8a:	c9 f7       	brne	.-14     	; 0x2e7e <__ultoa_invert+0x5c>
    2e8c:	f6 cf       	rjmp	.-20     	; 0x2e7a <__ultoa_invert+0x58>
    2e8e:	46 2f       	mov	r20, r22
    2e90:	4f 70       	andi	r20, 0x0F	; 15
    2e92:	40 5d       	subi	r20, 0xD0	; 208
    2e94:	4a 33       	cpi	r20, 0x3A	; 58
    2e96:	18 f0       	brcs	.+6      	; 0x2e9e <__ultoa_invert+0x7c>
    2e98:	49 5d       	subi	r20, 0xD9	; 217
    2e9a:	31 fd       	sbrc	r19, 1
    2e9c:	40 52       	subi	r20, 0x20	; 32
    2e9e:	41 93       	st	Z+, r20
    2ea0:	02 d0       	rcall	.+4      	; 0x2ea6 <__ultoa_invert+0x84>
    2ea2:	a9 f7       	brne	.-22     	; 0x2e8e <__ultoa_invert+0x6c>
    2ea4:	ea cf       	rjmp	.-44     	; 0x2e7a <__ultoa_invert+0x58>
    2ea6:	b4 e0       	ldi	r27, 0x04	; 4
    2ea8:	a6 95       	lsr	r26
    2eaa:	97 95       	ror	r25
    2eac:	87 95       	ror	r24
    2eae:	77 95       	ror	r23
    2eb0:	67 95       	ror	r22
    2eb2:	ba 95       	dec	r27
    2eb4:	c9 f7       	brne	.-14     	; 0x2ea8 <__ultoa_invert+0x86>
    2eb6:	00 97       	sbiw	r24, 0x00	; 0
    2eb8:	61 05       	cpc	r22, r1
    2eba:	71 05       	cpc	r23, r1
    2ebc:	08 95       	ret
    2ebe:	9b 01       	movw	r18, r22
    2ec0:	ac 01       	movw	r20, r24
    2ec2:	0a 2e       	mov	r0, r26
    2ec4:	06 94       	lsr	r0
    2ec6:	57 95       	ror	r21
    2ec8:	47 95       	ror	r20
    2eca:	37 95       	ror	r19
    2ecc:	27 95       	ror	r18
    2ece:	ba 95       	dec	r27
    2ed0:	c9 f7       	brne	.-14     	; 0x2ec4 <__ultoa_invert+0xa2>
    2ed2:	62 0f       	add	r22, r18
    2ed4:	73 1f       	adc	r23, r19
    2ed6:	84 1f       	adc	r24, r20
    2ed8:	95 1f       	adc	r25, r21
    2eda:	a0 1d       	adc	r26, r0
    2edc:	08 95       	ret

00002ede <__muluhisi3>:
    2ede:	46 d0       	rcall	.+140    	; 0x2f6c <__umulhisi3>
    2ee0:	a5 9f       	mul	r26, r21
    2ee2:	90 0d       	add	r25, r0
    2ee4:	b4 9f       	mul	r27, r20
    2ee6:	90 0d       	add	r25, r0
    2ee8:	a4 9f       	mul	r26, r20
    2eea:	80 0d       	add	r24, r0
    2eec:	91 1d       	adc	r25, r1
    2eee:	11 24       	eor	r1, r1
    2ef0:	08 95       	ret

00002ef2 <__mulshisi3>:
    2ef2:	b7 ff       	sbrs	r27, 7
    2ef4:	f4 cf       	rjmp	.-24     	; 0x2ede <__muluhisi3>

00002ef6 <__mulohisi3>:
    2ef6:	f3 df       	rcall	.-26     	; 0x2ede <__muluhisi3>
    2ef8:	82 1b       	sub	r24, r18
    2efa:	93 0b       	sbc	r25, r19
    2efc:	08 95       	ret

00002efe <__prologue_saves__>:
    2efe:	2f 92       	push	r2
    2f00:	3f 92       	push	r3
    2f02:	4f 92       	push	r4
    2f04:	5f 92       	push	r5
    2f06:	6f 92       	push	r6
    2f08:	7f 92       	push	r7
    2f0a:	8f 92       	push	r8
    2f0c:	9f 92       	push	r9
    2f0e:	af 92       	push	r10
    2f10:	bf 92       	push	r11
    2f12:	cf 92       	push	r12
    2f14:	df 92       	push	r13
    2f16:	ef 92       	push	r14
    2f18:	ff 92       	push	r15
    2f1a:	0f 93       	push	r16
    2f1c:	1f 93       	push	r17
    2f1e:	cf 93       	push	r28
    2f20:	df 93       	push	r29
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	ca 1b       	sub	r28, r26
    2f28:	db 0b       	sbc	r29, r27
    2f2a:	0f b6       	in	r0, 0x3f	; 63
    2f2c:	f8 94       	cli
    2f2e:	de bf       	out	0x3e, r29	; 62
    2f30:	0f be       	out	0x3f, r0	; 63
    2f32:	cd bf       	out	0x3d, r28	; 61
    2f34:	09 94       	ijmp

00002f36 <__epilogue_restores__>:
    2f36:	2a 88       	ldd	r2, Y+18	; 0x12
    2f38:	39 88       	ldd	r3, Y+17	; 0x11
    2f3a:	48 88       	ldd	r4, Y+16	; 0x10
    2f3c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f3e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f40:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f42:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f44:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f46:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f48:	b9 84       	ldd	r11, Y+9	; 0x09
    2f4a:	c8 84       	ldd	r12, Y+8	; 0x08
    2f4c:	df 80       	ldd	r13, Y+7	; 0x07
    2f4e:	ee 80       	ldd	r14, Y+6	; 0x06
    2f50:	fd 80       	ldd	r15, Y+5	; 0x05
    2f52:	0c 81       	ldd	r16, Y+4	; 0x04
    2f54:	1b 81       	ldd	r17, Y+3	; 0x03
    2f56:	aa 81       	ldd	r26, Y+2	; 0x02
    2f58:	b9 81       	ldd	r27, Y+1	; 0x01
    2f5a:	ce 0f       	add	r28, r30
    2f5c:	d1 1d       	adc	r29, r1
    2f5e:	0f b6       	in	r0, 0x3f	; 63
    2f60:	f8 94       	cli
    2f62:	de bf       	out	0x3e, r29	; 62
    2f64:	0f be       	out	0x3f, r0	; 63
    2f66:	cd bf       	out	0x3d, r28	; 61
    2f68:	ed 01       	movw	r28, r26
    2f6a:	08 95       	ret

00002f6c <__umulhisi3>:
    2f6c:	a2 9f       	mul	r26, r18
    2f6e:	b0 01       	movw	r22, r0
    2f70:	b3 9f       	mul	r27, r19
    2f72:	c0 01       	movw	r24, r0
    2f74:	a3 9f       	mul	r26, r19
    2f76:	70 0d       	add	r23, r0
    2f78:	81 1d       	adc	r24, r1
    2f7a:	11 24       	eor	r1, r1
    2f7c:	91 1d       	adc	r25, r1
    2f7e:	b2 9f       	mul	r27, r18
    2f80:	70 0d       	add	r23, r0
    2f82:	81 1d       	adc	r24, r1
    2f84:	11 24       	eor	r1, r1
    2f86:	91 1d       	adc	r25, r1
    2f88:	08 95       	ret

00002f8a <_exit>:
    2f8a:	f8 94       	cli

00002f8c <__stop_program>:
    2f8c:	ff cf       	rjmp	.-2      	; 0x2f8c <__stop_program>
