
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800100  0000341e  000034b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000341e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d8  00800202  00800202  000035b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000035b4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000510  00000000  00000000  00003610  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005867  00000000  00000000  00003b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017c9  00000000  00000000  00009387  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002dac  00000000  00000000  0000ab50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ee8  00000000  00000000  0000d8fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000107e  00000000  00000000  0000e7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000041cc  00000000  00000000  0000f862  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000558  00000000  00000000  00013a2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	ff c1       	rjmp	.+1022   	; 0x400 <__ctors_end>
       2:	00 00       	nop
       4:	06 c4       	rjmp	.+2060   	; 0x812 <__vector_1>
       6:	00 00       	nop
       8:	13 c4       	rjmp	.+2086   	; 0x830 <__vector_2>
       a:	00 00       	nop
       c:	2b c2       	rjmp	.+1110   	; 0x464 <__vector_3>
       e:	00 00       	nop
      10:	14 c2       	rjmp	.+1064   	; 0x43a <__bad_interrupt>
      12:	00 00       	nop
      14:	12 c2       	rjmp	.+1060   	; 0x43a <__bad_interrupt>
      16:	00 00       	nop
      18:	10 c2       	rjmp	.+1056   	; 0x43a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0e c2       	rjmp	.+1052   	; 0x43a <__bad_interrupt>
      1e:	00 00       	nop
      20:	0c c2       	rjmp	.+1048   	; 0x43a <__bad_interrupt>
      22:	00 00       	nop
      24:	0a c2       	rjmp	.+1044   	; 0x43a <__bad_interrupt>
      26:	00 00       	nop
      28:	08 c2       	rjmp	.+1040   	; 0x43a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	06 c2       	rjmp	.+1036   	; 0x43a <__bad_interrupt>
      2e:	00 00       	nop
      30:	04 c2       	rjmp	.+1032   	; 0x43a <__bad_interrupt>
      32:	00 00       	nop
      34:	02 c2       	rjmp	.+1028   	; 0x43a <__bad_interrupt>
      36:	00 00       	nop
      38:	00 c2       	rjmp	.+1024   	; 0x43a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	fe c1       	rjmp	.+1020   	; 0x43a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 a1 11 	jmp	0x2342	; 0x2342 <__vector_16>
      44:	fa c1       	rjmp	.+1012   	; 0x43a <__bad_interrupt>
      46:	00 00       	nop
      48:	f8 c1       	rjmp	.+1008   	; 0x43a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f6 c1       	rjmp	.+1004   	; 0x43a <__bad_interrupt>
      4e:	00 00       	nop
      50:	f4 c1       	rjmp	.+1000   	; 0x43a <__bad_interrupt>
      52:	00 00       	nop
      54:	f2 c1       	rjmp	.+996    	; 0x43a <__bad_interrupt>
      56:	00 00       	nop
      58:	f0 c1       	rjmp	.+992    	; 0x43a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	ee c1       	rjmp	.+988    	; 0x43a <__bad_interrupt>
      5e:	00 00       	nop
      60:	ec c1       	rjmp	.+984    	; 0x43a <__bad_interrupt>
      62:	00 00       	nop
      64:	ea c1       	rjmp	.+980    	; 0x43a <__bad_interrupt>
      66:	00 00       	nop
      68:	e8 c1       	rjmp	.+976    	; 0x43a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e6 c1       	rjmp	.+972    	; 0x43a <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	55 73       	andi	r21, 0x35	; 53
      72:	65 20       	and	r6, r5
      74:	6c 65       	ori	r22, 0x5C	; 92
      76:	66 74       	andi	r22, 0x46	; 70
      78:	20 73       	andi	r18, 0x30	; 48
      7a:	6c 69       	ori	r22, 0x9C	; 156
      7c:	64 65       	ori	r22, 0x54	; 84
      7e:	72 00       	.word	0x0072	; ????

00000080 <btn_1>:
      80:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

00000088 <option_entry_1>:
      88:	43 6f 6e 74 72 61 73 74 00                          Contrast.

00000091 <option_entry_0>:
      91:	4d 75 73 69 63 00                                   Music.

00000097 <mainmenu_entry_options>:
      97:	4f 70 74 69 6f 6e 73 00                             Options.

0000009f <game_entry_1>:
      9f:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

000000ac <game_entry_0>:
      ac:	53 71 75 61 73 68 2d 73 69 6d 00                    Squash-sim.

000000b7 <mainmenu_entry_games>:
      b7:	47 61 6d 65 73 00                                   Games.

000000bd <highscore_entry_1>:
      bd:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

000000ca <highscore_entry_0>:
      ca:	53 71 75 61 73 68 2d 73 69 6d 00                    Squash-sim.

000000d5 <mainmenu_entry_highscore>:
      d5:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000df <font>:
	...
      e7:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
      f7:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     107:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     117:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     127:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     137:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     147:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     157:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     167:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     177:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     187:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     197:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1a7:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1b7:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1c7:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1d7:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1e7:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     1f7:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     207:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     217:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     227:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     237:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     247:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     257:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     267:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     277:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     287:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     297:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2a7:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2b7:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2c7:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2d7:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2e7:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     2f7:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     307:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     317:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     327:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     337:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     347:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     357:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     367:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     377:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     387:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     397:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3a7:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3b7:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3c7:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3d7:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3e7:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     3f7:	01 01 01 01 01 01 01 ff 00                          .........

00000400 <__ctors_end>:
     400:	11 24       	eor	r1, r1
     402:	1f be       	out	0x3f, r1	; 63
     404:	cf ef       	ldi	r28, 0xFF	; 255
     406:	d4 e0       	ldi	r29, 0x04	; 4
     408:	de bf       	out	0x3e, r29	; 62
     40a:	cd bf       	out	0x3d, r28	; 61

0000040c <__do_copy_data>:
     40c:	12 e0       	ldi	r17, 0x02	; 2
     40e:	a0 e0       	ldi	r26, 0x00	; 0
     410:	b1 e0       	ldi	r27, 0x01	; 1
     412:	ee e1       	ldi	r30, 0x1E	; 30
     414:	f4 e3       	ldi	r31, 0x34	; 52
     416:	02 c0       	rjmp	.+4      	; 0x41c <__do_copy_data+0x10>
     418:	05 90       	lpm	r0, Z+
     41a:	0d 92       	st	X+, r0
     41c:	a2 30       	cpi	r26, 0x02	; 2
     41e:	b1 07       	cpc	r27, r17
     420:	d9 f7       	brne	.-10     	; 0x418 <__do_copy_data+0xc>

00000422 <__do_clear_bss>:
     422:	22 e0       	ldi	r18, 0x02	; 2
     424:	a2 e0       	ldi	r26, 0x02	; 2
     426:	b2 e0       	ldi	r27, 0x02	; 2
     428:	01 c0       	rjmp	.+2      	; 0x42c <.do_clear_bss_start>

0000042a <.do_clear_bss_loop>:
     42a:	1d 92       	st	X+, r1

0000042c <.do_clear_bss_start>:
     42c:	aa 3d       	cpi	r26, 0xDA	; 218
     42e:	b2 07       	cpc	r27, r18
     430:	e1 f7       	brne	.-8      	; 0x42a <.do_clear_bss_loop>
     432:	0e 94 c2 0c 	call	0x1984	; 0x1984 <main>
     436:	0c 94 0d 1a 	jmp	0x341a	; 0x341a <_exit>

0000043a <__bad_interrupt>:
     43a:	e2 cd       	rjmp	.-1084   	; 0x0 <__vectors>

0000043c <CAN_message_receive>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
     43c:	8e e0       	ldi	r24, 0x0E	; 14
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	08 95       	ret

00000442 <CAN_construct_message>:
     442:	90 93 04 02 	sts	0x0204, r25
     446:	80 93 03 02 	sts	0x0203, r24
     44a:	60 93 05 02 	sts	0x0205, r22
     44e:	66 23       	and	r22, r22
     450:	41 f0       	breq	.+16     	; 0x462 <CAN_construct_message+0x20>
     452:	86 e0       	ldi	r24, 0x06	; 6
     454:	92 e0       	ldi	r25, 0x02	; 2
     456:	fc 01       	movw	r30, r24
     458:	11 92       	st	Z+, r1
     45a:	2e 2f       	mov	r18, r30
     45c:	28 1b       	sub	r18, r24
     45e:	26 17       	cp	r18, r22
     460:	d8 f3       	brcs	.-10     	; 0x458 <CAN_construct_message+0x16>
     462:	08 95       	ret

00000464 <__vector_3>:

#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
     464:	1f 92       	push	r1
     466:	0f 92       	push	r0
     468:	0f b6       	in	r0, 0x3f	; 63
     46a:	0f 92       	push	r0
     46c:	11 24       	eor	r1, r1
     46e:	8f 93       	push	r24
	receive_flag = 1;
     470:	81 e0       	ldi	r24, 0x01	; 1
     472:	80 93 02 02 	sts	0x0202, r24
}
     476:	8f 91       	pop	r24
     478:	0f 90       	pop	r0
     47a:	0f be       	out	0x3f, r0	; 63
     47c:	0f 90       	pop	r0
     47e:	1f 90       	pop	r1
     480:	18 95       	reti

00000482 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	//Disable global interrupt.
	cli();
     482:	f8 94       	cli
	#if NODE == 1
		//Extended MCU Control Register bit 0 ....turned off?
		EMCUCR &= ~(1<<ISC2);
     484:	86 b7       	in	r24, 0x36	; 54
     486:	8e 7f       	andi	r24, 0xFE	; 254
     488:	86 bf       	out	0x36, r24	; 54
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
     48a:	8b b7       	in	r24, 0x3b	; 59
     48c:	80 62       	ori	r24, 0x20	; 32
     48e:	8b bf       	out	0x3b, r24	; 59
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
		
	#endif
	//Enable global interrupt.
	sei();
     490:	78 94       	sei
     492:	08 95       	ret

00000494 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     494:	3c d1       	rcall	.+632    	; 0x70e <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     496:	68 e0       	ldi	r22, 0x08	; 8
     498:	84 e1       	ldi	r24, 0x14	; 20
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	d2 df       	rcall	.-92     	; 0x442 <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     49e:	4f ef       	ldi	r20, 0xFF	; 255
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	64 e6       	ldi	r22, 0x64	; 100
     4a4:	80 e6       	ldi	r24, 0x60	; 96
     4a6:	1a d1       	rcall	.+564    	; 0x6dc <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     4a8:	4f ef       	ldi	r20, 0xFF	; 255
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	64 e6       	ldi	r22, 0x64	; 100
     4ae:	80 e7       	ldi	r24, 0x70	; 112
     4b0:	15 d1       	rcall	.+554    	; 0x6dc <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	61 e0       	ldi	r22, 0x01	; 1
     4b8:	8b e2       	ldi	r24, 0x2B	; 43
     4ba:	10 d1       	rcall	.+544    	; 0x6dc <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
     4bc:	41 e0       	ldi	r20, 0x01	; 1
     4be:	50 e0       	ldi	r21, 0x00	; 0
     4c0:	62 e0       	ldi	r22, 0x02	; 2
     4c2:	8b e2       	ldi	r24, 0x2B	; 43
     4c4:	0b d1       	rcall	.+534    	; 0x6dc <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     4c6:	40 e0       	ldi	r20, 0x00	; 0
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	60 ee       	ldi	r22, 0xE0	; 224
     4cc:	8f e0       	ldi	r24, 0x0F	; 15
     4ce:	06 d1       	rcall	.+524    	; 0x6dc <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     4d0:	d8 cf       	rjmp	.-80     	; 0x482 <CAN_interrupt_setup>
     4d2:	08 95       	ret

000004d4 <CAN_reception_complete>:

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <CAN_reception_complete+0xa>
		printf("CAN_reception_complete is stuck\n");
     4d6:	8b e5       	ldi	r24, 0x5B	; 91
     4d8:	91 e0       	ldi	r25, 0x01	; 1
     4da:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <puts>

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     4de:	8c e2       	ldi	r24, 0x2C	; 44
     4e0:	df d0       	rcall	.+446    	; 0x6a0 <MCP2515_read>
     4e2:	80 fd       	sbrc	r24, 0
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <CAN_reception_complete+0x1a>
     4e6:	8c e2       	ldi	r24, 0x2C	; 44
     4e8:	db d0       	rcall	.+438    	; 0x6a0 <MCP2515_read>
     4ea:	81 ff       	sbrs	r24, 1
     4ec:	f4 cf       	rjmp	.-24     	; 0x4d6 <CAN_reception_complete+0x2>
		};
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     4ee:	8c e2       	ldi	r24, 0x2C	; 44
     4f0:	d7 d0       	rcall	.+430    	; 0x6a0 <MCP2515_read>
     4f2:	80 ff       	sbrs	r24, 0
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <__stack+0x5>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     4f6:	40 e0       	ldi	r20, 0x00	; 0
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	8c e2       	ldi	r24, 0x2C	; 44
     4fe:	ee d0       	rcall	.+476    	; 0x6dc <MCP2515_bit_modify>
		return 0;
     500:	80 e0       	ldi	r24, 0x00	; 0
     502:	08 95       	ret
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     504:	8c e2       	ldi	r24, 0x2C	; 44
     506:	cc d0       	rcall	.+408    	; 0x6a0 <MCP2515_read>
     508:	81 ff       	sbrs	r24, 1
     50a:	07 c0       	rjmp	.+14     	; 0x51a <__stack+0x1b>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     50c:	40 e0       	ldi	r20, 0x00	; 0
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	62 e0       	ldi	r22, 0x02	; 2
     512:	8c e2       	ldi	r24, 0x2C	; 44
     514:	e3 d0       	rcall	.+454    	; 0x6dc <MCP2515_bit_modify>
		return 1;
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	08 95       	ret
	}
	return -1;
     51a:	8f ef       	ldi	r24, 0xFF	; 255
}
     51c:	08 95       	ret

0000051e <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     51e:	1f 93       	push	r17
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
	if(receive_flag){
     524:	80 91 02 02 	lds	r24, 0x0202
     528:	88 23       	and	r24, r24
     52a:	a1 f1       	breq	.+104    	; 0x594 <CAN_data_receive+0x76>
		receive_flag = 0;
     52c:	10 92 02 02 	sts	0x0202, r1
		uint8_t n = CAN_reception_complete();
     530:	d1 df       	rcall	.-94     	; 0x4d4 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     532:	18 2f       	mov	r17, r24
     534:	12 95       	swap	r17
     536:	10 7f       	andi	r17, 0xF0	; 240
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     538:	81 e6       	ldi	r24, 0x61	; 97
     53a:	81 0f       	add	r24, r17
     53c:	b1 d0       	rcall	.+354    	; 0x6a0 <MCP2515_read>
     53e:	ec 01       	movw	r28, r24
     540:	82 e6       	ldi	r24, 0x62	; 98
     542:	81 0f       	add	r24, r17
     544:	ad d0       	rcall	.+346    	; 0x6a0 <MCP2515_read>
uint8_t CAN_data_receive(void) {
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     546:	82 95       	swap	r24
     548:	86 95       	lsr	r24
     54a:	87 70       	andi	r24, 0x07	; 7
     54c:	dd 27       	eor	r29, r29
     54e:	cc 0f       	add	r28, r28
     550:	dd 1f       	adc	r29, r29
     552:	cc 0f       	add	r28, r28
     554:	dd 1f       	adc	r29, r29
     556:	cc 0f       	add	r28, r28
     558:	dd 1f       	adc	r29, r29
     55a:	c8 2b       	or	r28, r24
     55c:	d0 93 0f 02 	sts	0x020F, r29
     560:	c0 93 0e 02 	sts	0x020E, r28
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     564:	85 e6       	ldi	r24, 0x65	; 101
     566:	81 0f       	add	r24, r17
     568:	9b d0       	rcall	.+310    	; 0x6a0 <MCP2515_read>
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     56a:	8f 70       	andi	r24, 0x0F	; 15
     56c:	80 93 10 02 	sts	0x0210, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     570:	88 23       	and	r24, r24
     572:	91 f0       	breq	.+36     	; 0x598 <CAN_data_receive+0x7a>
     574:	10 e0       	ldi	r17, 0x00	; 0
     576:	c0 e1       	ldi	r28, 0x10	; 16
     578:	d2 e0       	ldi	r29, 0x02	; 2
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     57a:	86 e6       	ldi	r24, 0x66	; 102
     57c:	81 0f       	add	r24, r17
     57e:	90 d0       	rcall	.+288    	; 0x6a0 <MCP2515_read>
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     580:	e1 2f       	mov	r30, r17
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	e2 5f       	subi	r30, 0xF2	; 242
     586:	fd 4f       	sbci	r31, 0xFD	; 253
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     588:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     58a:	1f 5f       	subi	r17, 0xFF	; 255
     58c:	88 81       	ld	r24, Y
     58e:	18 17       	cp	r17, r24
     590:	a0 f3       	brcs	.-24     	; 0x57a <CAN_data_receive+0x5c>
     592:	04 c0       	rjmp	.+8      	; 0x59c <CAN_data_receive+0x7e>
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	03 c0       	rjmp	.+6      	; 0x59e <CAN_data_receive+0x80>
		}
		#if UART_ENABLE
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
     598:	81 e0       	ldi	r24, 0x01	; 1
     59a:	01 c0       	rjmp	.+2      	; 0x59e <CAN_data_receive+0x80>
     59c:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     59e:	df 91       	pop	r29
     5a0:	cf 91       	pop	r28
     5a2:	1f 91       	pop	r17
     5a4:	08 95       	ret

000005a6 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     5aa:	c4 e0       	ldi	r28, 0x04	; 4
     5ac:	d0 e0       	ldi	r29, 0x00	; 0
     5ae:	02 c0       	rjmp	.+4      	; 0x5b4 <CAN_transmission_complete+0xe>
     5b0:	cc 0f       	add	r28, r28
     5b2:	dd 1f       	adc	r29, r29
     5b4:	8a 95       	dec	r24
     5b6:	e2 f7       	brpl	.-8      	; 0x5b0 <CAN_transmission_complete+0xa>
     5b8:	8c e2       	ldi	r24, 0x2C	; 44
     5ba:	72 d0       	rcall	.+228    	; 0x6a0 <MCP2515_read>
     5bc:	8c 23       	and	r24, r28
     5be:	9d 23       	and	r25, r29
     5c0:	89 2b       	or	r24, r25
     5c2:	d1 f3       	breq	.-12     	; 0x5b8 <CAN_transmission_complete+0x12>
	return 1;
}
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	df 91       	pop	r29
     5c8:	cf 91       	pop	r28
     5ca:	08 95       	ret

000005cc <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     5cc:	ff 92       	push	r15
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
     5d8:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);					//8 most significant bits of the message ID
     5da:	f6 2e       	mov	r15, r22
     5dc:	ff 0c       	add	r15, r15
     5de:	ff 0c       	add	r15, r15
     5e0:	ff 0c       	add	r15, r15
     5e2:	ff 0c       	add	r15, r15
     5e4:	28 81       	ld	r18, Y
     5e6:	39 81       	ldd	r19, Y+1	; 0x01
     5e8:	b9 01       	movw	r22, r18
     5ea:	75 95       	asr	r23
     5ec:	67 95       	ror	r22
     5ee:	75 95       	asr	r23
     5f0:	67 95       	ror	r22
     5f2:	75 95       	asr	r23
     5f4:	67 95       	ror	r22
     5f6:	81 e3       	ldi	r24, 0x31	; 49
     5f8:	8f 0d       	add	r24, r15
     5fa:	43 d0       	rcall	.+134    	; 0x682 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);					//3 least significant bits of the message ID
     5fc:	28 81       	ld	r18, Y
     5fe:	39 81       	ldd	r19, Y+1	; 0x01
     600:	b9 01       	movw	r22, r18
     602:	66 0f       	add	r22, r22
     604:	77 1f       	adc	r23, r23
     606:	62 95       	swap	r22
     608:	72 95       	swap	r23
     60a:	70 7f       	andi	r23, 0xF0	; 240
     60c:	76 27       	eor	r23, r22
     60e:	60 7f       	andi	r22, 0xF0	; 240
     610:	76 27       	eor	r23, r22
     612:	82 e3       	ldi	r24, 0x32	; 50
     614:	8f 0d       	add	r24, r15
     616:	35 d0       	rcall	.+106    	; 0x682 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     618:	6a 81       	ldd	r22, Y+2	; 0x02
     61a:	6f 70       	andi	r22, 0x0F	; 15
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	85 e3       	ldi	r24, 0x35	; 53
     620:	8f 0d       	add	r24, r15
     622:	2f d0       	rcall	.+94     	; 0x682 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	88 23       	and	r24, r24
     628:	79 f0       	breq	.+30     	; 0x648 <CAN_send_byte+0x7c>
     62a:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     62c:	86 e3       	ldi	r24, 0x36	; 54
     62e:	f8 0e       	add	r15, r24
     630:	fe 01       	movw	r30, r28
     632:	e1 0f       	add	r30, r17
     634:	f1 1d       	adc	r31, r1
     636:	63 81       	ldd	r22, Z+3	; 0x03
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	8f 2d       	mov	r24, r15
     63c:	81 0f       	add	r24, r17
     63e:	21 d0       	rcall	.+66     	; 0x682 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);					//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);					//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     640:	1f 5f       	subi	r17, 0xFF	; 255
     642:	8a 81       	ldd	r24, Y+2	; 0x02
     644:	18 17       	cp	r17, r24
     646:	a0 f3       	brcs	.-24     	; 0x630 <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     648:	80 2f       	mov	r24, r16
     64a:	38 d0       	rcall	.+112    	; 0x6bc <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     64c:	80 2f       	mov	r24, r16
     64e:	ab df       	rcall	.-170    	; 0x5a6 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     650:	df 91       	pop	r29
     652:	cf 91       	pop	r28
     654:	1f 91       	pop	r17
     656:	0f 91       	pop	r16
     658:	ff 90       	pop	r15
     65a:	08 95       	ret

0000065c <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     65c:	20 91 05 02 	lds	r18, 0x0205
     660:	22 23       	and	r18, r18
     662:	59 f0       	breq	.+22     	; 0x67a <CAN_message_send+0x1e>
     664:	38 2f       	mov	r19, r24
     666:	a6 e0       	ldi	r26, 0x06	; 6
     668:	b2 e0       	ldi	r27, 0x02	; 2
     66a:	e8 2f       	mov	r30, r24
     66c:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     66e:	81 91       	ld	r24, Z+
     670:	8d 93       	st	X+, r24
     672:	8e 2f       	mov	r24, r30
     674:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     676:	82 17       	cp	r24, r18
     678:	d0 f3       	brcs	.-12     	; 0x66e <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     67a:	83 e0       	ldi	r24, 0x03	; 3
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	a6 cf       	rjmp	.-180    	; 0x5cc <CAN_send_byte>
     680:	08 95       	ret

00000682 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	d8 2f       	mov	r29, r24
     688:	c6 2f       	mov	r28, r22
     68a:	4e d0       	rcall	.+156    	; 0x728 <SPI_select>
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	42 d0       	rcall	.+132    	; 0x714 <SPI_send>
     690:	8d 2f       	mov	r24, r29
     692:	40 d0       	rcall	.+128    	; 0x714 <SPI_send>
     694:	8c 2f       	mov	r24, r28
     696:	3e d0       	rcall	.+124    	; 0x714 <SPI_send>
     698:	49 d0       	rcall	.+146    	; 0x72c <SPI_deselect>
     69a:	df 91       	pop	r29
     69c:	cf 91       	pop	r28
     69e:	08 95       	ret

000006a0 <MCP2515_read>:
     6a0:	cf 93       	push	r28
     6a2:	c8 2f       	mov	r28, r24
     6a4:	41 d0       	rcall	.+130    	; 0x728 <SPI_select>
     6a6:	83 e0       	ldi	r24, 0x03	; 3
     6a8:	35 d0       	rcall	.+106    	; 0x714 <SPI_send>
     6aa:	8c 2f       	mov	r24, r28
     6ac:	33 d0       	rcall	.+102    	; 0x714 <SPI_send>
     6ae:	36 d0       	rcall	.+108    	; 0x71c <SPI_receive>
     6b0:	c8 2f       	mov	r28, r24
     6b2:	3c d0       	rcall	.+120    	; 0x72c <SPI_deselect>
     6b4:	8c 2f       	mov	r24, r28
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	cf 91       	pop	r28
     6ba:	08 95       	ret

000006bc <MCP2515_request_to_send>:
     6bc:	cf 93       	push	r28
     6be:	c8 2f       	mov	r28, r24
     6c0:	33 d0       	rcall	.+102    	; 0x728 <SPI_select>
     6c2:	21 e0       	ldi	r18, 0x01	; 1
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	c9 01       	movw	r24, r18
     6c8:	02 c0       	rjmp	.+4      	; 0x6ce <MCP2515_request_to_send+0x12>
     6ca:	88 0f       	add	r24, r24
     6cc:	99 1f       	adc	r25, r25
     6ce:	ca 95       	dec	r28
     6d0:	e2 f7       	brpl	.-8      	; 0x6ca <MCP2515_request_to_send+0xe>
     6d2:	80 68       	ori	r24, 0x80	; 128
     6d4:	1f d0       	rcall	.+62     	; 0x714 <SPI_send>
     6d6:	2a d0       	rcall	.+84     	; 0x72c <SPI_deselect>
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	18 2f       	mov	r17, r24
     6e4:	d6 2f       	mov	r29, r22
     6e6:	c4 2f       	mov	r28, r20
	SPI_select();
     6e8:	1f d0       	rcall	.+62     	; 0x728 <SPI_select>
	SPI_send(MCP_BITMOD);
     6ea:	85 e0       	ldi	r24, 0x05	; 5
     6ec:	13 d0       	rcall	.+38     	; 0x714 <SPI_send>
	SPI_send(adr);
     6ee:	81 2f       	mov	r24, r17
     6f0:	11 d0       	rcall	.+34     	; 0x714 <SPI_send>
	SPI_send(mask);
     6f2:	8d 2f       	mov	r24, r29
     6f4:	0f d0       	rcall	.+30     	; 0x714 <SPI_send>
	SPI_send(data);
     6f6:	8c 2f       	mov	r24, r28
     6f8:	0d d0       	rcall	.+26     	; 0x714 <SPI_send>
	SPI_deselect();
     6fa:	18 d0       	rcall	.+48     	; 0x72c <SPI_deselect>
}
     6fc:	df 91       	pop	r29
     6fe:	cf 91       	pop	r28
     700:	1f 91       	pop	r17
     702:	08 95       	ret

00000704 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     704:	11 d0       	rcall	.+34     	; 0x728 <SPI_select>
	SPI_send(MCP_RESET);
     706:	80 ec       	ldi	r24, 0xC0	; 192
     708:	05 d0       	rcall	.+10     	; 0x714 <SPI_send>
	SPI_deselect();
     70a:	10 c0       	rjmp	.+32     	; 0x72c <SPI_deselect>
     70c:	08 95       	ret

0000070e <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     70e:	10 d0       	rcall	.+32     	; 0x730 <SPI_initialize>
	MCP2515_reset();
     710:	f9 cf       	rjmp	.-14     	; 0x704 <MCP2515_reset>
     712:	08 95       	ret

00000714 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     714:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     716:	77 9b       	sbis	0x0e, 7	; 14
     718:	fe cf       	rjmp	.-4      	; 0x716 <SPI_send+0x2>

}
     71a:	08 95       	ret

0000071c <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	fa df       	rcall	.-12     	; 0x714 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     720:	77 9b       	sbis	0x0e, 7	; 14
     722:	fe cf       	rjmp	.-4      	; 0x720 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     724:	8f b1       	in	r24, 0x0f	; 15
}
     726:	08 95       	ret

00000728 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     728:	c4 98       	cbi	0x18, 4	; 24
     72a:	08 95       	ret

0000072c <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     72c:	c4 9a       	sbi	0x18, 4	; 24
     72e:	08 95       	ret

00000730 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     730:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     732:	87 b3       	in	r24, 0x17	; 23
     734:	80 6b       	ori	r24, 0xB0	; 176
     736:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     738:	8d b1       	in	r24, 0x0d	; 13
     73a:	80 65       	ori	r24, 0x50	; 80
     73c:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     73e:	f6 cf       	rjmp	.-20     	; 0x72c <SPI_deselect>
     740:	08 95       	ret

00000742 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     742:	5d 9b       	sbis	0x0b, 5	; 11
     744:	fe cf       	rjmp	.-4      	; 0x742 <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     746:	8c b9       	out	0x0c, r24	; 12
     748:	08 95       	ret

0000074a <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     74a:	5f 9b       	sbis	0x0b, 7	; 11
     74c:	fe cf       	rjmp	.-4      	; 0x74a <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     74e:	8c b1       	in	r24, 0x0c	; 12
}
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	08 95       	ret

00000754 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     754:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     756:	8f e1       	ldi	r24, 0x1F	; 31
     758:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     75a:	88 e1       	ldi	r24, 0x18	; 24
     75c:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     75e:	65 ea       	ldi	r22, 0xA5	; 165
     760:	73 e0       	ldi	r23, 0x03	; 3
     762:	81 ea       	ldi	r24, 0xA1	; 161
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	0c 94 79 15 	jmp	0x2af2	; 0x2af2 <fdevopen>
     76a:	08 95       	ret

0000076c <readADC>:
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	91 05       	cpc	r25, r1
     770:	71 f0       	breq	.+28     	; 0x78e <readADC+0x22>
     772:	1c f4       	brge	.+6      	; 0x77a <readADC+0xe>
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	39 f0       	breq	.+14     	; 0x786 <readADC+0x1a>
     778:	1c c0       	rjmp	.+56     	; 0x7b2 <readADC+0x46>
     77a:	83 30       	cpi	r24, 0x03	; 3
     77c:	91 05       	cpc	r25, r1
     77e:	59 f0       	breq	.+22     	; 0x796 <readADC+0x2a>
     780:	04 97       	sbiw	r24, 0x04	; 4
     782:	69 f0       	breq	.+26     	; 0x79e <readADC+0x32>
     784:	16 c0       	rjmp	.+44     	; 0x7b2 <readADC+0x46>
     786:	84 e1       	ldi	r24, 0x14	; 20
     788:	80 93 00 14 	sts	0x1400, r24
     78c:	0b c0       	rjmp	.+22     	; 0x7a4 <readADC+0x38>
     78e:	85 e1       	ldi	r24, 0x15	; 21
     790:	80 93 00 14 	sts	0x1400, r24
     794:	07 c0       	rjmp	.+14     	; 0x7a4 <readADC+0x38>
     796:	86 e1       	ldi	r24, 0x16	; 22
     798:	80 93 00 14 	sts	0x1400, r24
     79c:	03 c0       	rjmp	.+6      	; 0x7a4 <readADC+0x38>
     79e:	87 e1       	ldi	r24, 0x17	; 23
     7a0:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7a4:	82 e5       	ldi	r24, 0x52	; 82
     7a6:	8a 95       	dec	r24
     7a8:	f1 f7       	brne	.-4      	; 0x7a6 <readADC+0x3a>
     7aa:	80 91 00 14 	lds	r24, 0x1400
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	08 95       	ret
     7b2:	80 e0       	ldi	r24, 0x00	; 0
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	08 95       	ret

000007b8 <initalize_interrupts>:
 */ 
#include "buttons.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     7b8:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     7ba:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     7bc:	85 b7       	in	r24, 0x35	; 53
     7be:	81 60       	ori	r24, 0x01	; 1
     7c0:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     7c2:	85 b7       	in	r24, 0x35	; 53
     7c4:	82 60       	ori	r24, 0x02	; 2
     7c6:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     7c8:	85 b7       	in	r24, 0x35	; 53
     7ca:	84 60       	ori	r24, 0x04	; 4
     7cc:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     7ce:	85 b7       	in	r24, 0x35	; 53
     7d0:	88 60       	ori	r24, 0x08	; 8
     7d2:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     7d4:	8b b7       	in	r24, 0x3b	; 59
     7d6:	80 64       	ori	r24, 0x40	; 64
     7d8:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     7da:	8b b7       	in	r24, 0x3b	; 59
     7dc:	80 68       	ori	r24, 0x80	; 128
     7de:	8b bf       	out	0x3b, r24	; 59
	
	BIT_ON(PORTB,PB1);//enabling the pins for the joystick reading
     7e0:	c1 9a       	sbi	0x18, 1	; 24
	BIT_OFF(DDRB,PB1);
     7e2:	b9 98       	cbi	0x17, 1	; 23
	
	//BIT_ON(SFIOR,PUD);//internal pull-ups enabled
	
	flag_right_button = 0;
     7e4:	10 92 49 02 	sts	0x0249, r1
	flag_left_button = 0;
     7e8:	10 92 4a 02 	sts	0x024A, r1
     7ec:	08 95       	ret

000007ee <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     7ee:	80 91 4a 02 	lds	r24, 0x024A
     7f2:	81 30       	cpi	r24, 0x01	; 1
     7f4:	19 f4       	brne	.+6      	; 0x7fc <check_flag_left+0xe>
	{
		flag_left_button = 0;
     7f6:	10 92 4a 02 	sts	0x024A, r1
		return 1;
     7fa:	08 95       	ret
	}
	return 0;
     7fc:	80 e0       	ldi	r24, 0x00	; 0
}
     7fe:	08 95       	ret

00000800 <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     800:	80 91 49 02 	lds	r24, 0x0249
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	19 f4       	brne	.+6      	; 0x80e <check_flag_right+0xe>
	{
		flag_right_button = 0;
     808:	10 92 49 02 	sts	0x0249, r1
		return 1;
     80c:	08 95       	ret
	}
	return 0;
     80e:	80 e0       	ldi	r24, 0x00	; 0
}
     810:	08 95       	ret

00000812 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     81e:	81 e0       	ldi	r24, 0x01	; 1
     820:	80 93 49 02 	sts	0x0249, r24
}
     824:	8f 91       	pop	r24
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     830:	1f 92       	push	r1
     832:	0f 92       	push	r0
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	0f 92       	push	r0
     838:	11 24       	eor	r1, r1
     83a:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 93 4a 02 	sts	0x024A, r24
}
     842:	8f 91       	pop	r24
     844:	0f 90       	pop	r0
     846:	0f be       	out	0x3f, r0	; 63
     848:	0f 90       	pop	r0
     84a:	1f 90       	pop	r1
     84c:	18 95       	reti

0000084e <joystick_pressed>:

uint8_t joystick_pressed(void){
	return !(PINB & (1<<PINB1));//return 0 if the joystick is not pressed, return 1 if the joystic is pressed
     84e:	86 b3       	in	r24, 0x16	; 22
     850:	86 95       	lsr	r24
     852:	81 70       	andi	r24, 0x01	; 1
}
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	89 27       	eor	r24, r25
     858:	08 95       	ret

0000085a <button_pressed>:

uint8_t button_pressed(void){
	return (joystick_pressed() || check_flag_left() || check_flag_right());
     85a:	f9 df       	rcall	.-14     	; 0x84e <joystick_pressed>
     85c:	81 11       	cpse	r24, r1
     85e:	0a c0       	rjmp	.+20     	; 0x874 <button_pressed+0x1a>
     860:	c6 df       	rcall	.-116    	; 0x7ee <check_flag_left>
     862:	81 11       	cpse	r24, r1
     864:	09 c0       	rjmp	.+18     	; 0x878 <button_pressed+0x1e>
     866:	cc df       	rcall	.-104    	; 0x800 <check_flag_right>
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	81 11       	cpse	r24, r1
     86c:	01 c0       	rjmp	.+2      	; 0x870 <button_pressed+0x16>
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	89 2f       	mov	r24, r25
     872:	08 95       	ret
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	08 95       	ret
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	08 95       	ret

0000087c <flappy_restart>:
	
	flappy_restart();
}

void flappy_restart(void){
	sram_goto_line(7);
     87c:	87 e0       	ldi	r24, 0x07	; 7
     87e:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sram_goto_line>
	sram_write_string("BACK        PLAY");
     882:	8b e7       	ldi	r24, 0x7B	; 123
     884:	91 e0       	ldi	r25, 0x01	; 1
     886:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <sram_write_string>
	sram_update_oled();
     88a:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
	quit = 0;
     88e:	10 92 23 02 	sts	0x0223, r1
	printf("MP");
     892:	8c e8       	ldi	r24, 0x8C	; 140
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	9f 93       	push	r25
     898:	8f 93       	push	r24
     89a:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <printf>
	while (!(quit | check_flag_right()))
     89e:	0f 90       	pop	r0
     8a0:	0f 90       	pop	r0
     8a2:	03 c0       	rjmp	.+6      	; 0x8aa <flappy_restart+0x2e>
	{
		quit = check_flag_left();
     8a4:	a4 df       	rcall	.-184    	; 0x7ee <check_flag_left>
     8a6:	80 93 23 02 	sts	0x0223, r24
	sram_goto_line(7);
	sram_write_string("BACK        PLAY");
	sram_update_oled();
	quit = 0;
	printf("MP");
	while (!(quit | check_flag_right()))
     8aa:	aa df       	rcall	.-172    	; 0x800 <check_flag_right>
     8ac:	90 91 23 02 	lds	r25, 0x0223
     8b0:	89 2b       	or	r24, r25
     8b2:	c1 f3       	breq	.-16     	; 0x8a4 <flappy_restart+0x28>
	{
		quit = check_flag_left();
	}
	
	sram_init();
     8b4:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <sram_init>
     8b8:	08 95       	ret

000008ba <flappy_loading_screen>:
	}
	
	return 0;
}

void flappy_loading_screen(void){
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	cf 93       	push	r28
     8c0:	df 93       	push	r29
	sram_init();
     8c2:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <sram_init>
	sram_goto_line(0);
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sram_goto_line>
	sram_write_string("  FLAPPY BIRD");
     8cc:	8f e8       	ldi	r24, 0x8F	; 143
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <sram_write_string>
	sram_update_oled();
     8d4:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
	
	timer_delay(1000);
     8d8:	88 ee       	ldi	r24, 0xE8	; 232
     8da:	93 e0       	ldi	r25, 0x03	; 3
     8dc:	0e 94 b0 11 	call	0x2360	; 0x2360 <timer_delay>
	
	sram_draw_new_line(8*FONT_WIDTH+4,8,13*FONT_WIDTH+4,0);
     8e0:	20 e0       	ldi	r18, 0x00	; 0
     8e2:	4c e6       	ldi	r20, 0x6C	; 108
     8e4:	68 e0       	ldi	r22, 0x08	; 8
     8e6:	84 e4       	ldi	r24, 0x44	; 68
     8e8:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <sram_draw_new_line>
	sram_draw_new_line(8*FONT_WIDTH+4,0,13*FONT_WIDTH+4,8);
     8ec:	28 e0       	ldi	r18, 0x08	; 8
     8ee:	4c e6       	ldi	r20, 0x6C	; 108
     8f0:	60 e0       	ldi	r22, 0x00	; 0
     8f2:	84 e4       	ldi	r24, 0x44	; 68
     8f4:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <sram_draw_new_line>
	sram_update_oled();
     8f8:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
	
	timer_delay(1000);
     8fc:	88 ee       	ldi	r24, 0xE8	; 232
     8fe:	93 e0       	ldi	r25, 0x03	; 3
     900:	0e 94 b0 11 	call	0x2360	; 0x2360 <timer_delay>
	
	sram_goto_line(2);
     904:	82 e0       	ldi	r24, 0x02	; 2
     906:	0e 94 f6 0d 	call	0x1bec	; 0x1bec <sram_goto_line>
	sram_goto_column(FONT_WIDTH*8+4);
     90a:	84 e4       	ldi	r24, 0x44	; 68
     90c:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <sram_goto_column>
	sram_write_string("PIXEL");
     910:	8d e9       	ldi	r24, 0x9D	; 157
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	0e 94 04 0e 	call	0x1c08	; 0x1c08 <sram_write_string>
	sram_update_oled();
     918:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
	
	timer_delay(500);
     91c:	84 ef       	ldi	r24, 0xF4	; 244
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	0e 94 b0 11 	call	0x2360	; 0x2360 <timer_delay>
     924:	d0 e1       	ldi	r29, 0x10	; 16
	}
	
	return 0;
}

void flappy_loading_screen(void){
     926:	10 e1       	ldi	r17, 0x10	; 16
     928:	12 c0       	rjmp	.+36     	; 0x94e <flappy_loading_screen+0x94>
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
     92a:	00 e0       	ldi	r16, 0x00	; 0
     92c:	21 e0       	ldi	r18, 0x01	; 1
     92e:	48 e1       	ldi	r20, 0x18	; 24
     930:	60 e0       	ldi	r22, 0x00	; 0
     932:	8c 2f       	mov	r24, r28
     934:	0e 94 67 10 	call	0x20ce	; 0x20ce <sram_scroll_vertically>
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
     938:	cf 5f       	subi	r28, 0xFF	; 255
     93a:	c0 34       	cpi	r28, 0x40	; 64
     93c:	b1 f7       	brne	.-20     	; 0x92a <flappy_loading_screen+0x70>
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
		}
		timer_delay(30);
     93e:	8e e1       	ldi	r24, 0x1E	; 30
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	0e 94 b0 11 	call	0x2360	; 0x2360 <timer_delay>
		sram_update_oled();
     946:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
     94a:	d1 50       	subi	r29, 0x01	; 1
	sram_write_string("PIXEL");
	sram_update_oled();
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
     94c:	11 f0       	breq	.+4      	; 0x952 <flappy_loading_screen+0x98>
	}
	
	return 0;
}

void flappy_loading_screen(void){
     94e:	c1 2f       	mov	r28, r17
     950:	ec cf       	rjmp	.-40     	; 0x92a <flappy_loading_screen+0x70>
		sram_update_oled();
	}
	
	//sram
	
	flappy_restart();
     952:	94 df       	rcall	.-216    	; 0x87c <flappy_restart>
}
     954:	df 91       	pop	r29
     956:	cf 91       	pop	r28
     958:	1f 91       	pop	r17
     95a:	0f 91       	pop	r16
     95c:	08 95       	ret

0000095e <flappy_render_wall>:
	sram_write_string("SCORE: ");
	sram_write_int(score);
	sram_update_oled();
}

void flappy_render_wall(uint8_t selected_wall, uint8_t pos){
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	d8 2f       	mov	r29, r24
     964:	c6 2f       	mov	r28, r22
	if (selected_wall > SCREEN_HEIGHT-1 -WALL_HOLE){
     966:	8c 32       	cpi	r24, 0x2C	; 44
     968:	38 f0       	brcs	.+14     	; 0x978 <flappy_render_wall+0x1a>
		sram_draw_new_line(pos, 0, pos, SCREEN_HEIGHT-1 -WALL_HOLE);
     96a:	2b e2       	ldi	r18, 0x2B	; 43
     96c:	46 2f       	mov	r20, r22
     96e:	60 e0       	ldi	r22, 0x00	; 0
     970:	8c 2f       	mov	r24, r28
     972:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <sram_draw_new_line>
     976:	17 c0       	rjmp	.+46     	; 0x9a6 <flappy_render_wall+0x48>
	}else if(selected_wall < WALL_HOLE){ 
     978:	84 31       	cpi	r24, 0x14	; 20
     97a:	38 f4       	brcc	.+14     	; 0x98a <flappy_render_wall+0x2c>
		sram_draw_new_line(pos, WALL_HOLE, pos , SCREEN_HEIGHT-1);
     97c:	2f e3       	ldi	r18, 0x3F	; 63
     97e:	46 2f       	mov	r20, r22
     980:	64 e1       	ldi	r22, 0x14	; 20
     982:	8c 2f       	mov	r24, r28
     984:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <sram_draw_new_line>
     988:	0e c0       	rjmp	.+28     	; 0x9a6 <flappy_render_wall+0x48>
	}else{
		sram_draw_new_line(pos, 0, pos, selected_wall-WALL_HOLE/2);
     98a:	26 ef       	ldi	r18, 0xF6	; 246
     98c:	28 0f       	add	r18, r24
     98e:	46 2f       	mov	r20, r22
     990:	60 e0       	ldi	r22, 0x00	; 0
     992:	8c 2f       	mov	r24, r28
     994:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <sram_draw_new_line>
		sram_draw_new_line(pos, selected_wall + WALL_HOLE/2, pos , SCREEN_HEIGHT-1);
     998:	6a e0       	ldi	r22, 0x0A	; 10
     99a:	6d 0f       	add	r22, r29
     99c:	2f e3       	ldi	r18, 0x3F	; 63
     99e:	4c 2f       	mov	r20, r28
     9a0:	8c 2f       	mov	r24, r28
     9a2:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <sram_draw_new_line>
	}
}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <flappy_controll>:

void flappy_controll(void){
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
	velocity += acceleration;
     9b4:	20 91 0c 01 	lds	r18, 0x010C
     9b8:	30 91 0d 01 	lds	r19, 0x010D
     9bc:	40 91 0e 01 	lds	r20, 0x010E
     9c0:	50 91 0f 01 	lds	r21, 0x010F
     9c4:	60 91 1d 02 	lds	r22, 0x021D
     9c8:	70 91 1e 02 	lds	r23, 0x021E
     9cc:	80 91 1f 02 	lds	r24, 0x021F
     9d0:	90 91 20 02 	lds	r25, 0x0220
     9d4:	0e 94 65 12 	call	0x24ca	; 0x24ca <__addsf3>
     9d8:	60 93 1d 02 	sts	0x021D, r22
     9dc:	70 93 1e 02 	sts	0x021E, r23
     9e0:	80 93 1f 02 	sts	0x021F, r24
     9e4:	90 93 20 02 	sts	0x0220, r25
	if(check_flag_left() | check_flag_right()){
     9e8:	02 df       	rcall	.-508    	; 0x7ee <check_flag_left>
     9ea:	f8 2e       	mov	r15, r24
     9ec:	09 df       	rcall	.-494    	; 0x800 <check_flag_right>
     9ee:	8f 29       	or	r24, r15
     9f0:	b1 f0       	breq	.+44     	; 0xa1e <flappy_controll+0x72>
		velocity -= 1;
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	40 e8       	ldi	r20, 0x80	; 128
     9f8:	5f e3       	ldi	r21, 0x3F	; 63
     9fa:	60 91 1d 02 	lds	r22, 0x021D
     9fe:	70 91 1e 02 	lds	r23, 0x021E
     a02:	80 91 1f 02 	lds	r24, 0x021F
     a06:	90 91 20 02 	lds	r25, 0x0220
     a0a:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__subsf3>
     a0e:	60 93 1d 02 	sts	0x021D, r22
     a12:	70 93 1e 02 	sts	0x021E, r23
     a16:	80 93 1f 02 	sts	0x021F, r24
     a1a:	90 93 20 02 	sts	0x0220, r25
	}
	if(velocity > 1){
     a1e:	c0 90 1d 02 	lds	r12, 0x021D
     a22:	d0 90 1e 02 	lds	r13, 0x021E
     a26:	e0 90 1f 02 	lds	r14, 0x021F
     a2a:	f0 90 20 02 	lds	r15, 0x0220
     a2e:	20 e0       	ldi	r18, 0x00	; 0
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	40 e8       	ldi	r20, 0x80	; 128
     a34:	5f e3       	ldi	r21, 0x3F	; 63
     a36:	c7 01       	movw	r24, r14
     a38:	b6 01       	movw	r22, r12
     a3a:	0e 94 18 14 	call	0x2830	; 0x2830 <__gesf2>
     a3e:	18 16       	cp	r1, r24
     a40:	6c f4       	brge	.+26     	; 0xa5c <flappy_controll+0xb0>
		velocity = 1;
     a42:	80 e0       	ldi	r24, 0x00	; 0
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	a0 e8       	ldi	r26, 0x80	; 128
     a48:	bf e3       	ldi	r27, 0x3F	; 63
     a4a:	80 93 1d 02 	sts	0x021D, r24
     a4e:	90 93 1e 02 	sts	0x021E, r25
     a52:	a0 93 1f 02 	sts	0x021F, r26
     a56:	b0 93 20 02 	sts	0x0220, r27
     a5a:	16 c0       	rjmp	.+44     	; 0xa88 <flappy_controll+0xdc>
	}else if(velocity < -1){
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f eb       	ldi	r21, 0xBF	; 191
     a64:	c7 01       	movw	r24, r14
     a66:	b6 01       	movw	r22, r12
     a68:	0e 94 c9 12 	call	0x2592	; 0x2592 <__cmpsf2>
     a6c:	88 23       	and	r24, r24
     a6e:	64 f4       	brge	.+24     	; 0xa88 <flappy_controll+0xdc>
		velocity = -1;
     a70:	80 e0       	ldi	r24, 0x00	; 0
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e8       	ldi	r26, 0x80	; 128
     a76:	bf eb       	ldi	r27, 0xBF	; 191
     a78:	80 93 1d 02 	sts	0x021D, r24
     a7c:	90 93 1e 02 	sts	0x021E, r25
     a80:	a0 93 1f 02 	sts	0x021F, r26
     a84:	b0 93 20 02 	sts	0x0220, r27
	}
	player_height_accurate += velocity;
     a88:	20 91 1d 02 	lds	r18, 0x021D
     a8c:	30 91 1e 02 	lds	r19, 0x021E
     a90:	40 91 1f 02 	lds	r20, 0x021F
     a94:	50 91 20 02 	lds	r21, 0x0220
     a98:	60 91 19 02 	lds	r22, 0x0219
     a9c:	70 91 1a 02 	lds	r23, 0x021A
     aa0:	80 91 1b 02 	lds	r24, 0x021B
     aa4:	90 91 1c 02 	lds	r25, 0x021C
     aa8:	0e 94 65 12 	call	0x24ca	; 0x24ca <__addsf3>
     aac:	6b 01       	movw	r12, r22
     aae:	7c 01       	movw	r14, r24
     ab0:	60 93 19 02 	sts	0x0219, r22
     ab4:	70 93 1a 02 	sts	0x021A, r23
     ab8:	80 93 1b 02 	sts	0x021B, r24
     abc:	90 93 1c 02 	sts	0x021C, r25
	if(player_height_accurate >= SCREEN_HEIGHT-1){
     ac0:	20 e0       	ldi	r18, 0x00	; 0
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	4c e7       	ldi	r20, 0x7C	; 124
     ac6:	52 e4       	ldi	r21, 0x42	; 66
     ac8:	0e 94 18 14 	call	0x2830	; 0x2830 <__gesf2>
     acc:	88 23       	and	r24, r24
     ace:	24 f0       	brlt	.+8      	; 0xad8 <flappy_controll+0x12c>
		game_over = 1;
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	80 93 21 02 	sts	0x0221, r24
     ad6:	0c c0       	rjmp	.+24     	; 0xaf0 <flappy_controll+0x144>
	}else if(player_height_accurate<= 0){
     ad8:	20 e0       	ldi	r18, 0x00	; 0
     ada:	30 e0       	ldi	r19, 0x00	; 0
     adc:	a9 01       	movw	r20, r18
     ade:	c7 01       	movw	r24, r14
     ae0:	b6 01       	movw	r22, r12
     ae2:	0e 94 c9 12 	call	0x2592	; 0x2592 <__cmpsf2>
     ae6:	18 16       	cp	r1, r24
     ae8:	1c f0       	brlt	.+6      	; 0xaf0 <flappy_controll+0x144>
		game_over = 1;
     aea:	81 e0       	ldi	r24, 0x01	; 1
     aec:	80 93 21 02 	sts	0x0221, r24
	}
	player_height = (int)player_height_accurate;
     af0:	c7 01       	movw	r24, r14
     af2:	b6 01       	movw	r22, r12
     af4:	0e 94 35 13 	call	0x266a	; 0x266a <__fixsfsi>
     af8:	60 93 22 02 	sts	0x0222, r22
}
     afc:	ff 90       	pop	r15
     afe:	ef 90       	pop	r14
     b00:	df 90       	pop	r13
     b02:	cf 90       	pop	r12
     b04:	08 95       	ret

00000b06 <flappy_pixel_collision>:

uint8_t flappy_pixel_collision(void){
	if (ext_ram_adress[PLAYER_POS+((player_height-player_height%8)/8)*128] & (1<<player_height%8)){
     b06:	80 91 22 02 	lds	r24, 0x0222
     b0a:	e8 2f       	mov	r30, r24
     b0c:	f0 e0       	ldi	r31, 0x00	; 0
     b0e:	f5 95       	asr	r31
     b10:	e7 95       	ror	r30
     b12:	f5 95       	asr	r31
     b14:	e7 95       	ror	r30
     b16:	f5 95       	asr	r31
     b18:	e7 95       	ror	r30
     b1a:	f6 95       	lsr	r31
     b1c:	fe 2f       	mov	r31, r30
     b1e:	ee 27       	eor	r30, r30
     b20:	f7 95       	ror	r31
     b22:	e7 95       	ror	r30
     b24:	3a 96       	adiw	r30, 0x0a	; 10
     b26:	20 91 10 01 	lds	r18, 0x0110
     b2a:	30 91 11 01 	lds	r19, 0x0111
     b2e:	e2 0f       	add	r30, r18
     b30:	f3 1f       	adc	r31, r19
     b32:	20 81       	ld	r18, Z
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	87 70       	andi	r24, 0x07	; 7
     b38:	a9 01       	movw	r20, r18
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <flappy_pixel_collision+0x3a>
     b3c:	55 95       	asr	r21
     b3e:	47 95       	ror	r20
     b40:	8a 95       	dec	r24
     b42:	e2 f7       	brpl	.-8      	; 0xb3c <flappy_pixel_collision+0x36>
     b44:	ca 01       	movw	r24, r20
		return 1;
	}
	return 0;
}
     b46:	81 70       	andi	r24, 0x01	; 1
     b48:	08 95       	ret

00000b4a <flappy_scroll_wall>:

void flappy_scroll_wall(void){
     b4a:	cf 93       	push	r28
     b4c:	df 93       	push	r29
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
     b52:	e0 91 10 01 	lds	r30, 0x0110
     b56:	f0 91 11 01 	lds	r31, 0x0111
     b5a:	e8 0f       	add	r30, r24
     b5c:	f9 1f       	adc	r31, r25
     b5e:	10 82       	st	Z, r1
     b60:	80 58       	subi	r24, 0x80	; 128
     b62:	9f 4f       	sbci	r25, 0xFF	; 255
	return 0;
}

void flappy_scroll_wall(void){
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
     b64:	81 15       	cp	r24, r1
     b66:	24 e0       	ldi	r18, 0x04	; 4
     b68:	92 07       	cpc	r25, r18
     b6a:	99 f7       	brne	.-26     	; 0xb52 <flappy_scroll_wall+0x8>
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	70 e0       	ldi	r23, 0x00	; 0
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     b70:	b8 e0       	ldi	r27, 0x08	; 8
     b72:	19 c0       	rjmp	.+50     	; 0xba6 <flappy_scroll_wall+0x5c>
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
     b74:	20 91 10 01 	lds	r18, 0x0110
     b78:	30 91 11 01 	lds	r19, 0x0111
     b7c:	f9 01       	movw	r30, r18
     b7e:	e8 0f       	add	r30, r24
     b80:	f9 1f       	adc	r31, r25
     b82:	ac 01       	movw	r20, r24
     b84:	4f 5f       	subi	r20, 0xFF	; 255
     b86:	5f 4f       	sbci	r21, 0xFF	; 255
     b88:	e9 01       	movw	r28, r18
     b8a:	c4 0f       	add	r28, r20
     b8c:	d5 1f       	adc	r29, r21
     b8e:	28 81       	ld	r18, Y
     b90:	20 83       	st	Z, r18
     b92:	a1 50       	subi	r26, 0x01	; 1
     b94:	80 58       	subi	r24, 0x80	; 128
     b96:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     b98:	a1 11       	cpse	r26, r1
     b9a:	ec cf       	rjmp	.-40     	; 0xb74 <flappy_scroll_wall+0x2a>
     b9c:	6f 5f       	subi	r22, 0xFF	; 255
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     ba0:	6f 37       	cpi	r22, 0x7F	; 127
     ba2:	71 05       	cpc	r23, r1
     ba4:	19 f0       	breq	.+6      	; 0xbac <flappy_scroll_wall+0x62>
     ba6:	cb 01       	movw	r24, r22
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     ba8:	ab 2f       	mov	r26, r27
     baa:	e4 cf       	rjmp	.-56     	; 0xb74 <flappy_scroll_wall+0x2a>
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     bac:	8f e7       	ldi	r24, 0x7F	; 127
     bae:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
     bb0:	e0 91 10 01 	lds	r30, 0x0110
     bb4:	f0 91 11 01 	lds	r31, 0x0111
     bb8:	e8 0f       	add	r30, r24
     bba:	f9 1f       	adc	r31, r25
     bbc:	10 82       	st	Z, r1
     bbe:	80 58       	subi	r24, 0x80	; 128
     bc0:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     bc2:	8f 37       	cpi	r24, 0x7F	; 127
     bc4:	24 e0       	ldi	r18, 0x04	; 4
     bc6:	92 07       	cpc	r25, r18
     bc8:	99 f7       	brne	.-26     	; 0xbb0 <flappy_scroll_wall+0x66>
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
	}
	if(new_wall >= difficulity){//if a wall has been removed a new one must be made
     bca:	80 91 0a 01 	lds	r24, 0x010A
     bce:	90 91 0b 01 	lds	r25, 0x010B
     bd2:	89 17       	cp	r24, r25
     bd4:	a8 f0       	brcs	.+42     	; 0xc00 <flappy_scroll_wall+0xb6>
		flappy_render_wall(rand()%(SCREEN_HEIGHT-WALL_HOLE/2)+WALL_HOLE/4,127);
     bd6:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <rand>
     bda:	66 e3       	ldi	r22, 0x36	; 54
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
     be2:	6f e7       	ldi	r22, 0x7F	; 127
     be4:	8b 5f       	subi	r24, 0xFB	; 251
     be6:	bb de       	rcall	.-650    	; 0x95e <flappy_render_wall>
		new_wall = 0;
     be8:	10 92 0a 01 	sts	0x010A, r1
		score++;
     bec:	80 91 24 02 	lds	r24, 0x0224
     bf0:	90 91 25 02 	lds	r25, 0x0225
     bf4:	01 96       	adiw	r24, 0x01	; 1
     bf6:	90 93 25 02 	sts	0x0225, r25
     bfa:	80 93 24 02 	sts	0x0224, r24
     bfe:	03 c0       	rjmp	.+6      	; 0xc06 <flappy_scroll_wall+0xbc>
	}else{
		new_wall++;
     c00:	8f 5f       	subi	r24, 0xFF	; 255
     c02:	80 93 0a 01 	sts	0x010A, r24
	}
     c06:	df 91       	pop	r29
     c08:	cf 91       	pop	r28
     c0a:	08 95       	ret

00000c0c <flappy_game>:
	}
	
	sram_init();
}

void flappy_game(void){
     c0c:	8f 92       	push	r8
     c0e:	9f 92       	push	r9
     c10:	af 92       	push	r10
     c12:	bf 92       	push	r11
     c14:	cf 92       	push	r12
     c16:	df 92       	push	r13
     c18:	ef 92       	push	r14
     c1a:	ff 92       	push	r15
     c1c:	0f 93       	push	r16
     c1e:	1f 93       	push	r17
     c20:	cf 93       	push	r28
     c22:	df 93       	push	r29
	sram_update_oled();
     c24:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
	printf("M1");
     c28:	83 ea       	ldi	r24, 0xA3	; 163
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	9f 93       	push	r25
     c2e:	8f 93       	push	r24
     c30:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <printf>
	while (!flappy_pixel_collision() && !game_over)
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
		if(check_flag_left()){//PAUSE
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
     c38:	0f 2e       	mov	r0, r31
     c3a:	fc e8       	ldi	r31, 0x8C	; 140
     c3c:	cf 2e       	mov	r12, r31
     c3e:	f1 e0       	ldi	r31, 0x01	; 1
     c40:	df 2e       	mov	r13, r31
     c42:	f0 2d       	mov	r31, r0
			for (uint8_t i = 5; i > 1; i--)
     c44:	0f 2e       	mov	r0, r31
     c46:	f5 e0       	ldi	r31, 0x05	; 5
     c48:	8f 2e       	mov	r8, r31
     c4a:	f0 2d       	mov	r31, r0
			{
				sram_goto_line(i);
				sram_goto_column(0);
				if(tempscore != 0){
					sram_write_char('0'+(tempscore%10));
     c4c:	0a e0       	ldi	r16, 0x0A	; 10
     c4e:	10 e0       	ldi	r17, 0x00	; 0
			sram_write_char('P');
			sram_update_oled();
			while(!(check_flag_left() | check_flag_right())){
				
			}
			printf("MR");
     c50:	0f 2e       	mov	r0, r31
     c52:	f6 ea       	ldi	r31, 0xA6	; 166
     c54:	ef 2e       	mov	r14, r31
     c56:	f1 e0       	ldi	r31, 0x01	; 1
     c58:	ff 2e       	mov	r15, r31
     c5a:	f0 2d       	mov	r31, r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     c5c:	4e c0       	rjmp	.+156    	; 0xcfa <flappy_game+0xee>
	
	{
		if(timer_check_flag()){
     c5e:	0e 94 95 11 	call	0x232a	; 0x232a <timer_check_flag>
     c62:	88 23       	and	r24, r24
     c64:	49 f0       	breq	.+18     	; 0xc78 <flappy_game+0x6c>
			flappy_controll();
     c66:	a2 de       	rcall	.-700    	; 0x9ac <flappy_controll>
			sram_pixel(PLAYER_POS,player_height);
     c68:	60 91 22 02 	lds	r22, 0x0222
     c6c:	8a e0       	ldi	r24, 0x0A	; 10
     c6e:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <sram_pixel>
			flappy_scroll_wall();
     c72:	6b df       	rcall	.-298    	; 0xb4a <flappy_scroll_wall>
			sram_update_oled();
     c74:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
		}
		if(check_flag_left()){//PAUSE
     c78:	ba dd       	rcall	.-1164   	; 0x7ee <check_flag_left>
     c7a:	88 23       	and	r24, r24
     c7c:	09 f4       	brne	.+2      	; 0xc80 <flappy_game+0x74>
     c7e:	3d c0       	rjmp	.+122    	; 0xcfa <flappy_game+0xee>
			sram_goto_line(0);
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	b4 d7       	rcall	.+3944   	; 0x1bec <sram_goto_line>
			sram_goto_column(0);
     c84:	80 e0       	ldi	r24, 0x00	; 0
     c86:	b9 d7       	rcall	.+3954   	; 0x1bfa <sram_goto_column>
			sram_write_char('S');
     c88:	83 e5       	ldi	r24, 0x53	; 83
     c8a:	75 d7       	rcall	.+3818   	; 0x1b76 <sram_write_char>
			int tempscore = score;
     c8c:	c0 91 24 02 	lds	r28, 0x0224
     c90:	d0 91 25 02 	lds	r29, 0x0225
			printf("MP");
     c94:	df 92       	push	r13
     c96:	cf 92       	push	r12
     c98:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <printf>
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
			for (uint8_t i = 5; i > 1; i--)
     ca0:	98 2c       	mov	r9, r8
			{
				sram_goto_line(i);
     ca2:	89 2d       	mov	r24, r9
     ca4:	a3 d7       	rcall	.+3910   	; 0x1bec <sram_goto_line>
				sram_goto_column(0);
     ca6:	80 e0       	ldi	r24, 0x00	; 0
     ca8:	a8 d7       	rcall	.+3920   	; 0x1bfa <sram_goto_column>
				if(tempscore != 0){
     caa:	20 97       	sbiw	r28, 0x00	; 0
     cac:	79 f0       	breq	.+30     	; 0xccc <flappy_game+0xc0>
					sram_write_char('0'+(tempscore%10));
     cae:	ce 01       	movw	r24, r28
     cb0:	b8 01       	movw	r22, r16
     cb2:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
     cb6:	5c 01       	movw	r10, r24
     cb8:	80 e3       	ldi	r24, 0x30	; 48
     cba:	8a 0d       	add	r24, r10
     cbc:	5c d7       	rcall	.+3768   	; 0x1b76 <sram_write_char>
					tempscore -= tempscore%10;
     cbe:	ce 01       	movw	r24, r28
     cc0:	8a 19       	sub	r24, r10
     cc2:	9b 09       	sbc	r25, r11
					tempscore /= 10;
     cc4:	b8 01       	movw	r22, r16
     cc6:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
     cca:	eb 01       	movw	r28, r22
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
			for (uint8_t i = 5; i > 1; i--)
     ccc:	9a 94       	dec	r9
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	98 12       	cpse	r9, r24
     cd2:	e7 cf       	rjmp	.-50     	; 0xca2 <flappy_game+0x96>
					tempscore -= tempscore%10;
					tempscore /= 10;
				}
				
			}
			sram_goto_line(7);
     cd4:	87 e0       	ldi	r24, 0x07	; 7
     cd6:	8a d7       	rcall	.+3860   	; 0x1bec <sram_goto_line>
			sram_goto_column(0);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	8f d7       	rcall	.+3870   	; 0x1bfa <sram_goto_column>
			sram_write_char('P');
     cdc:	80 e5       	ldi	r24, 0x50	; 80
     cde:	4b d7       	rcall	.+3734   	; 0x1b76 <sram_write_char>
			sram_update_oled();
     ce0:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
			while(!(check_flag_left() | check_flag_right())){
     ce4:	84 dd       	rcall	.-1272   	; 0x7ee <check_flag_left>
     ce6:	c8 2f       	mov	r28, r24
     ce8:	8b dd       	rcall	.-1258   	; 0x800 <check_flag_right>
     cea:	8c 2b       	or	r24, r28
     cec:	d9 f3       	breq	.-10     	; 0xce4 <flappy_game+0xd8>
				
			}
			printf("MR");
     cee:	ff 92       	push	r15
     cf0:	ef 92       	push	r14
     cf2:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <printf>
     cf6:	0f 90       	pop	r0
     cf8:	0f 90       	pop	r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     cfa:	05 df       	rcall	.-502    	; 0xb06 <flappy_pixel_collision>
     cfc:	81 11       	cpse	r24, r1
     cfe:	05 c0       	rjmp	.+10     	; 0xd0a <flappy_game+0xfe>
     d00:	80 91 21 02 	lds	r24, 0x0221
     d04:	88 23       	and	r24, r24
     d06:	09 f4       	brne	.+2      	; 0xd0a <flappy_game+0xfe>
     d08:	aa cf       	rjmp	.-172    	; 0xc5e <flappy_game+0x52>
				
			}
			printf("MR");
		}
	}
	printf("M2");
     d0a:	89 ea       	ldi	r24, 0xA9	; 169
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	9f 93       	push	r25
     d10:	8f 93       	push	r24
     d12:	0e 94 c3 15 	call	0x2b86	; 0x2b86 <printf>
	timer_delay(1000);
     d16:	88 ee       	ldi	r24, 0xE8	; 232
     d18:	93 e0       	ldi	r25, 0x03	; 3
     d1a:	0e 94 b0 11 	call	0x2360	; 0x2360 <timer_delay>
	sram_init();
     d1e:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <sram_init>
	sram_goto_line(0);
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	63 d7       	rcall	.+3782   	; 0x1bec <sram_goto_line>
	sram_goto_column(FONT_WIDTH*3);
     d26:	88 e1       	ldi	r24, 0x18	; 24
     d28:	68 d7       	rcall	.+3792   	; 0x1bfa <sram_goto_column>
	sram_write_string("GAME  OVER");
     d2a:	8c ea       	ldi	r24, 0xAC	; 172
     d2c:	91 e0       	ldi	r25, 0x01	; 1
     d2e:	6c d7       	rcall	.+3800   	; 0x1c08 <sram_write_string>
	sram_goto_line(1);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	5c d7       	rcall	.+3768   	; 0x1bec <sram_goto_line>
	sram_goto_column(FONT_WIDTH*4);
     d34:	80 e2       	ldi	r24, 0x20	; 32
     d36:	61 d7       	rcall	.+3778   	; 0x1bfa <sram_goto_column>
	sram_write_string("SCORE: ");
     d38:	87 eb       	ldi	r24, 0xB7	; 183
     d3a:	91 e0       	ldi	r25, 0x01	; 1
     d3c:	65 d7       	rcall	.+3786   	; 0x1c08 <sram_write_string>
	sram_write_int(score);
     d3e:	80 91 24 02 	lds	r24, 0x0224
     d42:	90 91 25 02 	lds	r25, 0x0225
     d46:	74 d7       	rcall	.+3816   	; 0x1c30 <sram_write_int>
	sram_update_oled();
     d48:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
     d4c:	0f 90       	pop	r0
     d4e:	0f 90       	pop	r0
}
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	1f 91       	pop	r17
     d56:	0f 91       	pop	r16
     d58:	ff 90       	pop	r15
     d5a:	ef 90       	pop	r14
     d5c:	df 90       	pop	r13
     d5e:	cf 90       	pop	r12
     d60:	bf 90       	pop	r11
     d62:	af 90       	pop	r10
     d64:	9f 90       	pop	r9
     d66:	8f 90       	pop	r8
     d68:	08 95       	ret

00000d6a <flappy_main>:
double acceleration = 0.03;
double player_height_accurate = 0;
uint8_t difficulity = 100;
uint8_t new_wall = 100;

int flappy_main(void){
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
     d76:	82 b7       	in	r24, 0x32	; 50
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	0e 94 67 15 	call	0x2ace	; 0x2ace <srand>
	quit = 0;
     d7e:	10 92 23 02 	sts	0x0223, r1
	flappy_loading_screen();
     d82:	9b dd       	rcall	.-1226   	; 0x8ba <flappy_loading_screen>

	while (quit != 1){
     d84:	80 91 23 02 	lds	r24, 0x0223
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	79 f1       	breq	.+94     	; 0xdea <flappy_main+0x80>
		game_over = 0;
		
		player_height_accurate = 1;
     d8c:	0f 2e       	mov	r0, r31
     d8e:	c1 2c       	mov	r12, r1
     d90:	d1 2c       	mov	r13, r1
     d92:	f0 e8       	ldi	r31, 0x80	; 128
     d94:	ef 2e       	mov	r14, r31
     d96:	ff e3       	ldi	r31, 0x3F	; 63
     d98:	ff 2e       	mov	r15, r31
     d9a:	f0 2d       	mov	r31, r0
		player_height = 1;
     d9c:	d1 e0       	ldi	r29, 0x01	; 1
		velocity = 0;
		difficulity = 100;
     d9e:	c4 e6       	ldi	r28, 0x64	; 100
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
		game_over = 0;
     da0:	10 92 21 02 	sts	0x0221, r1
		
		player_height_accurate = 1;
     da4:	c0 92 19 02 	sts	0x0219, r12
     da8:	d0 92 1a 02 	sts	0x021A, r13
     dac:	e0 92 1b 02 	sts	0x021B, r14
     db0:	f0 92 1c 02 	sts	0x021C, r15
		player_height = 1;
     db4:	d0 93 22 02 	sts	0x0222, r29
		velocity = 0;
     db8:	10 92 1d 02 	sts	0x021D, r1
     dbc:	10 92 1e 02 	sts	0x021E, r1
     dc0:	10 92 1f 02 	sts	0x021F, r1
     dc4:	10 92 20 02 	sts	0x0220, r1
		difficulity = 100;
     dc8:	c0 93 0b 01 	sts	0x010B, r28
		score = 0;
     dcc:	10 92 25 02 	sts	0x0225, r1
     dd0:	10 92 24 02 	sts	0x0224, r1
		flappy_game();
     dd4:	1b df       	rcall	.-458    	; 0xc0c <flappy_game>
		sram_goto_line(6);
     dd6:	86 e0       	ldi	r24, 0x06	; 6
     dd8:	09 d7       	rcall	.+3602   	; 0x1bec <sram_goto_line>
		sram_write_string("   TRY AGAIN?");
     dda:	8f eb       	ldi	r24, 0xBF	; 191
     ddc:	91 e0       	ldi	r25, 0x01	; 1
     dde:	14 d7       	rcall	.+3624   	; 0x1c08 <sram_write_string>
		flappy_restart();
     de0:	4d dd       	rcall	.-1382   	; 0x87c <flappy_restart>
int flappy_main(void){
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
     de2:	80 91 23 02 	lds	r24, 0x0223
     de6:	81 30       	cpi	r24, 0x01	; 1
     de8:	d9 f6       	brne	.-74     	; 0xda0 <flappy_main+0x36>
		sram_write_string("   TRY AGAIN?");
		flappy_restart();
	}
	
	return 0;
}
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	08 95       	ret

00000dfc <update_score>:
	while (!button_pressed())//wait for button to be pressed to show the score
	{
		
	}
}
void update_score(void){
     dfc:	cf 93       	push	r28
     dfe:	df 93       	push	r29
	if(CAN_data_receive()){
     e00:	8e db       	rcall	.-2276   	; 0x51e <CAN_data_receive>
     e02:	88 23       	and	r24, r24
     e04:	31 f1       	breq	.+76     	; 0xe52 <update_score+0x56>
		if(CAN_message_receive()->id == CAN_GAME_SCORE_ID){
     e06:	1a db       	rcall	.-2508   	; 0x43c <CAN_message_receive>
     e08:	fc 01       	movw	r30, r24
     e0a:	80 81       	ld	r24, Z
     e0c:	91 81       	ldd	r25, Z+1	; 0x01
     e0e:	4e 97       	sbiw	r24, 0x1e	; 30
     e10:	01 f5       	brne	.+64     	; 0xe52 <update_score+0x56>
			sram_init();
     e12:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <sram_init>
			sram_goto_line(0);
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	e9 d6       	rcall	.+3538   	; 0x1bec <sram_goto_line>
			sram_write_string("SQUASH SIMULATOR");
     e1a:	8d ec       	ldi	r24, 0xCD	; 205
     e1c:	91 e0       	ldi	r25, 0x01	; 1
     e1e:	f4 d6       	rcall	.+3560   	; 0x1c08 <sram_write_string>
			sram_update_oled();
     e20:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
			sram_goto_line(3);
     e24:	83 e0       	ldi	r24, 0x03	; 3
     e26:	e2 d6       	rcall	.+3524   	; 0x1bec <sram_goto_line>
			sram_write_string("SCORE: ");
     e28:	87 eb       	ldi	r24, 0xB7	; 183
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	ed d6       	rcall	.+3546   	; 0x1c08 <sram_write_string>
			sram_write_int(((CAN_message_receive()->data[0]<<8)|CAN_message_receive()->data[1]));
     e2e:	06 db       	rcall	.-2548   	; 0x43c <CAN_message_receive>
     e30:	fc 01       	movw	r30, r24
     e32:	c3 81       	ldd	r28, Z+3	; 0x03
     e34:	d0 e0       	ldi	r29, 0x00	; 0
     e36:	dc 2f       	mov	r29, r28
     e38:	cc 27       	eor	r28, r28
     e3a:	00 db       	rcall	.-2560   	; 0x43c <CAN_message_receive>
     e3c:	fc 01       	movw	r30, r24
     e3e:	84 81       	ldd	r24, Z+4	; 0x04
     e40:	9e 01       	movw	r18, r28
     e42:	28 2b       	or	r18, r24
     e44:	c9 01       	movw	r24, r18
     e46:	f4 d6       	rcall	.+3560   	; 0x1c30 <sram_write_int>
			sram_update_oled();
     e48:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <sram_update_oled>
			Game_Over = 1;
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	80 93 29 02 	sts	0x0229, r24
		}
	}
}
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <game_send_data>:


void game_send_data(void){//sends a can message if there is an update
	send_can = 0;
     e58:	10 92 12 01 	sts	0x0112, r1
	temp_reading = read_control_input('X');
     e5c:	88 e5       	ldi	r24, 0x58	; 88
     e5e:	04 d2       	rcall	.+1032   	; 0x1268 <read_control_input>
     e60:	90 93 54 02 	sts	0x0254, r25
     e64:	80 93 53 02 	sts	0x0253, r24
	if (temp_reading != X_reading)
     e68:	20 91 2d 02 	lds	r18, 0x022D
     e6c:	33 27       	eor	r19, r19
     e6e:	27 fd       	sbrc	r18, 7
     e70:	30 95       	com	r19
     e72:	82 17       	cp	r24, r18
     e74:	93 07       	cpc	r25, r19
     e76:	39 f0       	breq	.+14     	; 0xe86 <game_send_data+0x2e>
	{
		X_reading = temp_reading;
     e78:	80 93 2d 02 	sts	0x022D, r24
		data_to_send[0] = temp_reading;
     e7c:	80 93 4b 02 	sts	0x024B, r24
		send_can = 1;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = read_control_input('Y');
     e86:	89 e5       	ldi	r24, 0x59	; 89
     e88:	ef d1       	rcall	.+990    	; 0x1268 <read_control_input>
     e8a:	90 93 54 02 	sts	0x0254, r25
     e8e:	80 93 53 02 	sts	0x0253, r24
	if (temp_reading != Y_reading)
     e92:	20 91 2c 02 	lds	r18, 0x022C
     e96:	33 27       	eor	r19, r19
     e98:	27 fd       	sbrc	r18, 7
     e9a:	30 95       	com	r19
     e9c:	82 17       	cp	r24, r18
     e9e:	93 07       	cpc	r25, r19
     ea0:	39 f0       	breq	.+14     	; 0xeb0 <game_send_data+0x58>
	{
		Y_reading = temp_reading;
     ea2:	80 93 2c 02 	sts	0x022C, r24
		data_to_send[1] = temp_reading;		
     ea6:	80 93 4c 02 	sts	0x024C, r24
		send_can = 1;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = joystick_pressed();
     eb0:	ce dc       	rcall	.-1636   	; 0x84e <joystick_pressed>
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	30 93 54 02 	sts	0x0254, r19
     eba:	20 93 53 02 	sts	0x0253, r18
	if (temp_reading != J_btn)
     ebe:	40 91 28 02 	lds	r20, 0x0228
     ec2:	50 e0       	ldi	r21, 0x00	; 0
     ec4:	24 17       	cp	r18, r20
     ec6:	35 07       	cpc	r19, r21
     ec8:	39 f0       	breq	.+14     	; 0xed8 <game_send_data+0x80>
	{
		J_btn = temp_reading;
     eca:	80 93 28 02 	sts	0x0228, r24
		data_to_send[2] = temp_reading;
     ece:	80 93 4d 02 	sts	0x024D, r24
		send_can = 1;
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = check_flag_left();
     ed8:	8a dc       	rcall	.-1772   	; 0x7ee <check_flag_left>
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	30 93 54 02 	sts	0x0254, r19
     ee2:	20 93 53 02 	sts	0x0253, r18
	if (temp_reading != L_btn)
     ee6:	40 91 27 02 	lds	r20, 0x0227
     eea:	50 e0       	ldi	r21, 0x00	; 0
     eec:	24 17       	cp	r18, r20
     eee:	35 07       	cpc	r19, r21
     ef0:	39 f0       	breq	.+14     	; 0xf00 <game_send_data+0xa8>
	{
		L_btn = temp_reading;
     ef2:	80 93 27 02 	sts	0x0227, r24
		data_to_send[3] = temp_reading;
     ef6:	80 93 4e 02 	sts	0x024E, r24
		send_can = 1;
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = check_flag_right();
     f00:	7f dc       	rcall	.-1794   	; 0x800 <check_flag_right>
     f02:	28 2f       	mov	r18, r24
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	30 93 54 02 	sts	0x0254, r19
     f0a:	20 93 53 02 	sts	0x0253, r18
	if (temp_reading != R_btn)
     f0e:	40 91 26 02 	lds	r20, 0x0226
     f12:	50 e0       	ldi	r21, 0x00	; 0
     f14:	24 17       	cp	r18, r20
     f16:	35 07       	cpc	r19, r21
     f18:	39 f0       	breq	.+14     	; 0xf28 <game_send_data+0xd0>
	{
		R_btn = temp_reading;
     f1a:	80 93 26 02 	sts	0x0226, r24
		data_to_send[4] = temp_reading;
     f1e:	80 93 4f 02 	sts	0x024F, r24
		send_can = 1;
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = read_control_input('L');
     f28:	8c e4       	ldi	r24, 0x4C	; 76
     f2a:	9e d1       	rcall	.+828    	; 0x1268 <read_control_input>
     f2c:	90 93 54 02 	sts	0x0254, r25
     f30:	80 93 53 02 	sts	0x0253, r24
	if (temp_reading != L_slider)
     f34:	20 91 2b 02 	lds	r18, 0x022B
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	82 17       	cp	r24, r18
     f3c:	93 07       	cpc	r25, r19
     f3e:	39 f0       	breq	.+14     	; 0xf4e <game_send_data+0xf6>
	{
		L_slider = temp_reading;
     f40:	80 93 2b 02 	sts	0x022B, r24
		data_to_send[5] = temp_reading;
     f44:	80 93 50 02 	sts	0x0250, r24
		send_can = 1;
     f48:	81 e0       	ldi	r24, 0x01	; 1
     f4a:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = SLIDER_MAX - read_control_input('R');
     f4e:	82 e5       	ldi	r24, 0x52	; 82
     f50:	8b d1       	rcall	.+790    	; 0x1268 <read_control_input>
     f52:	24 e6       	ldi	r18, 0x64	; 100
     f54:	30 e0       	ldi	r19, 0x00	; 0
     f56:	a9 01       	movw	r20, r18
     f58:	48 1b       	sub	r20, r24
     f5a:	59 0b       	sbc	r21, r25
     f5c:	50 93 54 02 	sts	0x0254, r21
     f60:	40 93 53 02 	sts	0x0253, r20
	if (temp_reading != R_slider)
     f64:	20 91 2a 02 	lds	r18, 0x022A
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	42 17       	cp	r20, r18
     f6c:	53 07       	cpc	r21, r19
     f6e:	41 f0       	breq	.+16     	; 0xf80 <game_send_data+0x128>
	{
		R_slider = temp_reading;
     f70:	40 93 2a 02 	sts	0x022A, r20
		data_to_send[6] = temp_reading;
     f74:	40 93 51 02 	sts	0x0251, r20
		send_can = 1;
     f78:	81 e0       	ldi	r24, 0x01	; 1
     f7a:	80 93 12 01 	sts	0x0112, r24
     f7e:	04 c0       	rjmp	.+8      	; 0xf88 <game_send_data+0x130>
	}
	if (send_can)
     f80:	80 91 12 01 	lds	r24, 0x0112
     f84:	88 23       	and	r24, r24
     f86:	41 f0       	breq	.+16     	; 0xf98 <game_send_data+0x140>
	{
		CAN_construct_message(CAN_GAME_CONTROL_ID,8);
     f88:	68 e0       	ldi	r22, 0x08	; 8
     f8a:	84 e1       	ldi	r24, 0x14	; 20
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	59 da       	rcall	.-2894   	; 0x442 <CAN_construct_message>
		CAN_message_send(data_to_send,0);
     f90:	60 e0       	ldi	r22, 0x00	; 0
     f92:	8b e4       	ldi	r24, 0x4B	; 75
     f94:	92 e0       	ldi	r25, 0x02	; 2
     f96:	62 cb       	rjmp	.-2364   	; 0x65c <CAN_message_send>
     f98:	08 95       	ret

00000f9a <game_init>:





void game_init(uint8_t controller_type, uint16_t sensitivity){
     f9a:	cf 93       	push	r28
	data_to_send[0] = (uint8_t)JOYSTICK_MIN;
     f9c:	9c e9       	ldi	r25, 0x9C	; 156
     f9e:	90 93 4b 02 	sts	0x024B, r25
	data_to_send[1] = (uint8_t)JOYSTICK_MAX;
     fa2:	c4 e6       	ldi	r28, 0x64	; 100
     fa4:	c0 93 4c 02 	sts	0x024C, r28
	data_to_send[2] = (uint8_t)(sensitivity >> 8);
     fa8:	70 93 4d 02 	sts	0x024D, r23
	data_to_send[3] = (uint8_t)sensitivity;
     fac:	60 93 4e 02 	sts	0x024E, r22
	data_to_send[4] = (uint8_t)SLIDER_MIN;
     fb0:	10 92 4f 02 	sts	0x024F, r1
	data_to_send[5] = (uint8_t)SLIDER_MAX;
     fb4:	c0 93 50 02 	sts	0x0250, r28
	data_to_send[6] = (uint8_t)controller_type;
     fb8:	80 93 51 02 	sts	0x0251, r24
	
	
	X_reading = read_control_input('X');
     fbc:	88 e5       	ldi	r24, 0x58	; 88
     fbe:	54 d1       	rcall	.+680    	; 0x1268 <read_control_input>
     fc0:	80 93 2d 02 	sts	0x022D, r24
	Y_reading = read_control_input('Y');
     fc4:	89 e5       	ldi	r24, 0x59	; 89
     fc6:	50 d1       	rcall	.+672    	; 0x1268 <read_control_input>
     fc8:	80 93 2c 02 	sts	0x022C, r24
	L_slider = read_control_input('L');
     fcc:	8c e4       	ldi	r24, 0x4C	; 76
     fce:	4c d1       	rcall	.+664    	; 0x1268 <read_control_input>
     fd0:	80 93 2b 02 	sts	0x022B, r24
	R_slider = SLIDER_MAX - read_control_input('R');
     fd4:	82 e5       	ldi	r24, 0x52	; 82
     fd6:	48 d1       	rcall	.+656    	; 0x1268 <read_control_input>
     fd8:	c8 1b       	sub	r28, r24
     fda:	c0 93 2a 02 	sts	0x022A, r28
	
	J_btn = joystick_pressed();
     fde:	37 dc       	rcall	.-1938   	; 0x84e <joystick_pressed>
     fe0:	80 93 28 02 	sts	0x0228, r24
	L_btn = check_flag_left();
     fe4:	04 dc       	rcall	.-2040   	; 0x7ee <check_flag_left>
     fe6:	80 93 27 02 	sts	0x0227, r24
	R_btn = check_flag_right();
     fea:	0a dc       	rcall	.-2028   	; 0x800 <check_flag_right>
     fec:	80 93 26 02 	sts	0x0226, r24
		
	Game_Over = 0;
     ff0:	10 92 29 02 	sts	0x0229, r1
	
	CAN_construct_message(CAN_GAME_PARAMS_ID,CAN_GAME_PARAMS_LENGTH);
     ff4:	67 e0       	ldi	r22, 0x07	; 7
     ff6:	8a e0       	ldi	r24, 0x0A	; 10
     ff8:	90 e0       	ldi	r25, 0x00	; 0
     ffa:	23 da       	rcall	.-3002   	; 0x442 <CAN_construct_message>
	CAN_message_send(data_to_send,0);
     ffc:	60 e0       	ldi	r22, 0x00	; 0
     ffe:	8b e4       	ldi	r24, 0x4B	; 75
    1000:	92 e0       	ldi	r25, 0x02	; 2
    1002:	2c db       	rcall	.-2472   	; 0x65c <CAN_message_send>
    1004:	cf 91       	pop	r28
    1006:	08 95       	ret

00001008 <play_game>:
uint8_t send_can = 1;

int16_t temp_reading;

void play_game(void){
	game_init(CONTROLLER_TYPE_SLIDER,10);
    1008:	6a e0       	ldi	r22, 0x0A	; 10
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	c5 df       	rcall	.-118    	; 0xf9a <game_init>
	Game_Over = 0;
    1010:	10 92 29 02 	sts	0x0229, r1
	sram_init();
    1014:	9e d7       	rcall	.+3900   	; 0x1f52 <sram_init>
	sram_goto_line(0);
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	e9 d5       	rcall	.+3026   	; 0x1bec <sram_goto_line>
	sram_write_string("SQUASH SIMULATOR");
    101a:	8d ec       	ldi	r24, 0xCD	; 205
    101c:	91 e0       	ldi	r25, 0x01	; 1
    101e:	f4 d5       	rcall	.+3048   	; 0x1c08 <sram_write_string>
	sram_update_oled();
    1020:	8f d7       	rcall	.+3870   	; 0x1f40 <sram_update_oled>
	sram_goto_line(3);
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	e3 d5       	rcall	.+3014   	; 0x1bec <sram_goto_line>
	sram_write_string("SCORE: ");
    1026:	87 eb       	ldi	r24, 0xB7	; 183
    1028:	91 e0       	ldi	r25, 0x01	; 1
    102a:	ee d5       	rcall	.+3036   	; 0x1c08 <sram_write_string>
	sram_write_int(gamescore);
    102c:	80 91 2e 02 	lds	r24, 0x022E
    1030:	90 91 2f 02 	lds	r25, 0x022F
    1034:	fd d5       	rcall	.+3066   	; 0x1c30 <sram_write_int>
    1036:	eb e4       	ldi	r30, 0x4B	; 75
    1038:	f2 e0       	ldi	r31, 0x02	; 2
    103a:	83 e5       	ldi	r24, 0x53	; 83
    103c:	92 e0       	ldi	r25, 0x02	; 2
	
	
	for (int8_t i = 0; i < 8;  i++)//send all zeros to 
	{
		data_to_send[i] = 0;
    103e:	11 92       	st	Z+, r1
	sram_goto_line(3);
	sram_write_string("SCORE: ");
	sram_write_int(gamescore);
	
	
	for (int8_t i = 0; i < 8;  i++)//send all zeros to 
    1040:	e8 17       	cp	r30, r24
    1042:	f9 07       	cpc	r31, r25
    1044:	e1 f7       	brne	.-8      	; 0x103e <play_game+0x36>
	{
		data_to_send[i] = 0;
	}
	CAN_construct_message(CAN_GAME_CONTROL_ID,8);
    1046:	68 e0       	ldi	r22, 0x08	; 8
    1048:	84 e1       	ldi	r24, 0x14	; 20
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	fa d9       	rcall	.-3084   	; 0x442 <CAN_construct_message>
	CAN_message_send(data_to_send,0);
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	8b e4       	ldi	r24, 0x4B	; 75
    1052:	92 e0       	ldi	r25, 0x02	; 2
    1054:	03 db       	rcall	.-2554   	; 0x65c <CAN_message_send>
	
	
	while(!Game_Over){
    1056:	80 91 29 02 	lds	r24, 0x0229
    105a:	81 11       	cpse	r24, r1
    105c:	06 c0       	rjmp	.+12     	; 0x106a <play_game+0x62>
		game_send_data();//send data_to_send if it is updated
    105e:	fc de       	rcall	.-520    	; 0xe58 <game_send_data>
		
		update_score();//check if the game is over
    1060:	cd de       	rcall	.-614    	; 0xdfc <update_score>
	}
	CAN_construct_message(CAN_GAME_CONTROL_ID,8);
	CAN_message_send(data_to_send,0);
	
	
	while(!Game_Over){
    1062:	80 91 29 02 	lds	r24, 0x0229
    1066:	88 23       	and	r24, r24
    1068:	d1 f3       	breq	.-12     	; 0x105e <play_game+0x56>
		game_send_data();//send data_to_send if it is updated
		
		update_score();//check if the game is over
	}
	while (!button_pressed())//wait for button to be pressed to show the score
    106a:	f7 db       	rcall	.-2066   	; 0x85a <button_pressed>
    106c:	88 23       	and	r24, r24
    106e:	e9 f3       	breq	.-6      	; 0x106a <play_game+0x62>
	{
		
	}
}
    1070:	08 95       	ret

00001072 <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
    1072:	0f 93       	push	r16
    1074:	1f 93       	push	r17
    1076:	cf 93       	push	r28
    1078:	df 93       	push	r29
    107a:	c4 e6       	ldi	r28, 0x64	; 100
    107c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
    107e:	00 91 3a 02 	lds	r16, 0x023A
    1082:	10 91 3b 02 	lds	r17, 0x023B
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	70 db       	rcall	.-2336   	; 0x76c <readADC>
    108c:	01 58       	subi	r16, 0x81	; 129
    108e:	1f 4f       	sbci	r17, 0xFF	; 255
    1090:	08 1b       	sub	r16, r24
    1092:	19 0b       	sbc	r17, r25
    1094:	10 93 3b 02 	sts	0x023B, r17
    1098:	00 93 3a 02 	sts	0x023A, r16
		calibrate_y += 127 - readADC(2);
    109c:	00 91 38 02 	lds	r16, 0x0238
    10a0:	10 91 39 02 	lds	r17, 0x0239
    10a4:	82 e0       	ldi	r24, 0x02	; 2
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	61 db       	rcall	.-2366   	; 0x76c <readADC>
    10aa:	01 58       	subi	r16, 0x81	; 129
    10ac:	1f 4f       	sbci	r17, 0xFF	; 255
    10ae:	08 1b       	sub	r16, r24
    10b0:	19 0b       	sbc	r17, r25
    10b2:	10 93 39 02 	sts	0x0239, r17
    10b6:	00 93 38 02 	sts	0x0238, r16
    10ba:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
    10bc:	20 97       	sbiw	r28, 0x00	; 0
    10be:	f9 f6       	brne	.-66     	; 0x107e <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
    10c0:	80 91 3a 02 	lds	r24, 0x023A
    10c4:	90 91 3b 02 	lds	r25, 0x023B
    10c8:	24 e6       	ldi	r18, 0x64	; 100
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	b9 01       	movw	r22, r18
    10ce:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
    10d2:	70 93 3b 02 	sts	0x023B, r23
    10d6:	60 93 3a 02 	sts	0x023A, r22
	calibrate_y /= CALIBRATE_READINGS;
    10da:	80 91 38 02 	lds	r24, 0x0238
    10de:	90 91 39 02 	lds	r25, 0x0239
    10e2:	b9 01       	movw	r22, r18
    10e4:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
    10e8:	70 93 39 02 	sts	0x0239, r23
    10ec:	60 93 38 02 	sts	0x0238, r22
}
    10f0:	df 91       	pop	r29
    10f2:	cf 91       	pop	r28
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	08 95       	ret

000010fa <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
    10fa:	2f 92       	push	r2
    10fc:	3f 92       	push	r3
    10fe:	4f 92       	push	r4
    1100:	5f 92       	push	r5
    1102:	6f 92       	push	r6
    1104:	7f 92       	push	r7
    1106:	8f 92       	push	r8
    1108:	9f 92       	push	r9
    110a:	af 92       	push	r10
    110c:	bf 92       	push	r11
    110e:	cf 92       	push	r12
    1110:	df 92       	push	r13
    1112:	ef 92       	push	r14
    1114:	ff 92       	push	r15
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	00 d0       	rcall	.+0      	; 0x1120 <signal_to_range+0x26>
    1120:	00 d0       	rcall	.+0      	; 0x1122 <signal_to_range+0x28>
    1122:	00 d0       	rcall	.+0      	; 0x1124 <signal_to_range+0x2a>
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	3c 01       	movw	r6, r24
    112a:	7a 83       	std	Y+2, r23	; 0x02
    112c:	69 83       	std	Y+1, r22	; 0x01
    112e:	5c 83       	std	Y+4, r21	; 0x04
    1130:	4b 83       	std	Y+3, r20	; 0x03
    1132:	3e 83       	std	Y+6, r19	; 0x06
    1134:	2d 83       	std	Y+5, r18	; 0x05
    1136:	18 01       	movw	r2, r16
    1138:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
    113a:	b9 01       	movw	r22, r18
    113c:	88 27       	eor	r24, r24
    113e:	77 fd       	sbrc	r23, 7
    1140:	80 95       	com	r24
    1142:	98 2f       	mov	r25, r24
    1144:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__floatsisf>
    1148:	4b 01       	movw	r8, r22
    114a:	5c 01       	movw	r10, r24
    114c:	b3 01       	movw	r22, r6
    114e:	6e 0d       	add	r22, r14
    1150:	7f 1d       	adc	r23, r15
    1152:	29 81       	ldd	r18, Y+1	; 0x01
    1154:	3a 81       	ldd	r19, Y+2	; 0x02
    1156:	62 1b       	sub	r22, r18
    1158:	73 0b       	sbc	r23, r19
    115a:	88 27       	eor	r24, r24
    115c:	77 fd       	sbrc	r23, 7
    115e:	80 95       	com	r24
    1160:	98 2f       	mov	r25, r24
    1162:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__floatsisf>
    1166:	2b 01       	movw	r4, r22
    1168:	3c 01       	movw	r6, r24
    116a:	b1 01       	movw	r22, r2
    116c:	8d 81       	ldd	r24, Y+5	; 0x05
    116e:	9e 81       	ldd	r25, Y+6	; 0x06
    1170:	68 1b       	sub	r22, r24
    1172:	79 0b       	sbc	r23, r25
    1174:	88 27       	eor	r24, r24
    1176:	77 fd       	sbrc	r23, 7
    1178:	80 95       	com	r24
    117a:	98 2f       	mov	r25, r24
    117c:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__floatsisf>
    1180:	9b 01       	movw	r18, r22
    1182:	ac 01       	movw	r20, r24
    1184:	c3 01       	movw	r24, r6
    1186:	b2 01       	movw	r22, r4
    1188:	0e 94 1c 14 	call	0x2838	; 0x2838 <__mulsf3>
    118c:	2b 01       	movw	r4, r22
    118e:	3c 01       	movw	r6, r24
    1190:	6b 81       	ldd	r22, Y+3	; 0x03
    1192:	7c 81       	ldd	r23, Y+4	; 0x04
    1194:	e9 81       	ldd	r30, Y+1	; 0x01
    1196:	fa 81       	ldd	r31, Y+2	; 0x02
    1198:	6e 1b       	sub	r22, r30
    119a:	7f 0b       	sbc	r23, r31
    119c:	88 27       	eor	r24, r24
    119e:	77 fd       	sbrc	r23, 7
    11a0:	80 95       	com	r24
    11a2:	98 2f       	mov	r25, r24
    11a4:	0e 94 68 13 	call	0x26d0	; 0x26d0 <__floatsisf>
    11a8:	9b 01       	movw	r18, r22
    11aa:	ac 01       	movw	r20, r24
    11ac:	c3 01       	movw	r24, r6
    11ae:	b2 01       	movw	r22, r4
    11b0:	0e 94 cd 12 	call	0x259a	; 0x259a <__divsf3>
    11b4:	9b 01       	movw	r18, r22
    11b6:	ac 01       	movw	r20, r24
    11b8:	c5 01       	movw	r24, r10
    11ba:	b4 01       	movw	r22, r8
    11bc:	0e 94 65 12 	call	0x24ca	; 0x24ca <__addsf3>
    11c0:	0e 94 35 13 	call	0x266a	; 0x266a <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
    11c4:	c1 01       	movw	r24, r2
    11c6:	80 1b       	sub	r24, r16
    11c8:	91 0b       	sbc	r25, r17
    11ca:	68 17       	cp	r22, r24
    11cc:	79 07       	cpc	r23, r25
    11ce:	74 f5       	brge	.+92     	; 0x122c <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
    11d0:	8d 81       	ldd	r24, Y+5	; 0x05
    11d2:	9e 81       	ldd	r25, Y+6	; 0x06
    11d4:	80 0f       	add	r24, r16
    11d6:	91 1f       	adc	r25, r17
    11d8:	86 17       	cp	r24, r22
    11da:	97 07       	cpc	r25, r23
    11dc:	4c f5       	brge	.+82     	; 0x1230 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
    11de:	f8 01       	movw	r30, r16
    11e0:	11 23       	and	r17, r17
    11e2:	0c f4       	brge	.+2      	; 0x11e6 <signal_to_range+0xec>
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	f5 95       	asr	r31
    11e8:	e7 95       	ror	r30
    11ea:	d8 01       	movw	r26, r16
    11ec:	12 c0       	rjmp	.+36     	; 0x1212 <signal_to_range+0x118>
    11ee:	8a 0f       	add	r24, r26
    11f0:	9b 1f       	adc	r25, r27
    11f2:	ac 01       	movw	r20, r24
    11f4:	4e 0f       	add	r20, r30
    11f6:	5f 1f       	adc	r21, r31
    11f8:	64 17       	cp	r22, r20
    11fa:	75 07       	cpc	r23, r21
    11fc:	14 f0       	brlt	.+4      	; 0x1202 <signal_to_range+0x108>
				reference += step;
    11fe:	69 01       	movw	r12, r18
    1200:	0b c0       	rjmp	.+22     	; 0x1218 <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
    1202:	c6 01       	movw	r24, r12
    1204:	8e 1b       	sub	r24, r30
    1206:	9f 0b       	sbc	r25, r31
    1208:	86 17       	cp	r24, r22
    120a:	97 07       	cpc	r25, r23
    120c:	14 f0       	brlt	.+4      	; 0x1212 <signal_to_range+0x118>
				reference -= step;
    120e:	c0 1a       	sub	r12, r16
    1210:	d1 0a       	sbc	r13, r17
    1212:	c6 01       	movw	r24, r12
    1214:	80 1b       	sub	r24, r16
    1216:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
    1218:	96 01       	movw	r18, r12
    121a:	20 0f       	add	r18, r16
    121c:	31 1f       	adc	r19, r17
    121e:	62 17       	cp	r22, r18
    1220:	73 07       	cpc	r23, r19
    1222:	2c f7       	brge	.-54     	; 0x11ee <signal_to_range+0xf4>
    1224:	86 17       	cp	r24, r22
    1226:	97 07       	cpc	r25, r23
    1228:	14 f7       	brge	.-60     	; 0x11ee <signal_to_range+0xf4>
    122a:	04 c0       	rjmp	.+8      	; 0x1234 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
    122c:	61 01       	movw	r12, r2
    122e:	02 c0       	rjmp	.+4      	; 0x1234 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
    1230:	cd 80       	ldd	r12, Y+5	; 0x05
    1232:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
    1234:	c6 01       	movw	r24, r12
    1236:	26 96       	adiw	r28, 0x06	; 6
    1238:	0f b6       	in	r0, 0x3f	; 63
    123a:	f8 94       	cli
    123c:	de bf       	out	0x3e, r29	; 62
    123e:	0f be       	out	0x3f, r0	; 63
    1240:	cd bf       	out	0x3d, r28	; 61
    1242:	df 91       	pop	r29
    1244:	cf 91       	pop	r28
    1246:	1f 91       	pop	r17
    1248:	0f 91       	pop	r16
    124a:	ff 90       	pop	r15
    124c:	ef 90       	pop	r14
    124e:	df 90       	pop	r13
    1250:	cf 90       	pop	r12
    1252:	bf 90       	pop	r11
    1254:	af 90       	pop	r10
    1256:	9f 90       	pop	r9
    1258:	8f 90       	pop	r8
    125a:	7f 90       	pop	r7
    125c:	6f 90       	pop	r6
    125e:	5f 90       	pop	r5
    1260:	4f 90       	pop	r4
    1262:	3f 90       	pop	r3
    1264:	2f 90       	pop	r2
    1266:	08 95       	ret

00001268 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
    1268:	af 92       	push	r10
    126a:	bf 92       	push	r11
    126c:	cf 92       	push	r12
    126e:	df 92       	push	r13
    1270:	ef 92       	push	r14
    1272:	ff 92       	push	r15
    1274:	0f 93       	push	r16
    1276:	1f 93       	push	r17
	switch(channel){
    1278:	82 35       	cpi	r24, 0x52	; 82
    127a:	09 f4       	brne	.+2      	; 0x127e <read_control_input+0x16>
    127c:	6e c0       	rjmp	.+220    	; 0x135a <read_control_input+0xf2>
    127e:	20 f4       	brcc	.+8      	; 0x1288 <read_control_input+0x20>
    1280:	8c 34       	cpi	r24, 0x4C	; 76
    1282:	09 f4       	brne	.+2      	; 0x1286 <read_control_input+0x1e>
    1284:	4a c0       	rjmp	.+148    	; 0x131a <read_control_input+0xb2>
    1286:	89 c0       	rjmp	.+274    	; 0x139a <read_control_input+0x132>
    1288:	88 35       	cpi	r24, 0x58	; 88
    128a:	19 f0       	breq	.+6      	; 0x1292 <read_control_input+0x2a>
    128c:	89 35       	cpi	r24, 0x59	; 89
    128e:	19 f1       	breq	.+70     	; 0x12d6 <read_control_input+0x6e>
    1290:	84 c0       	rjmp	.+264    	; 0x139a <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(ADC_CHANNEL_X), SIGNAL_MIN, SIGNAL_MAX, JOYSTICK_MIN, JOYSTICK_MAX, calibrate_x, ref_X, RESOLUTION); 
    1292:	c0 90 36 02 	lds	r12, 0x0236
    1296:	d0 90 37 02 	lds	r13, 0x0237
    129a:	e0 90 3a 02 	lds	r14, 0x023A
    129e:	f0 90 3b 02 	lds	r15, 0x023B
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	90 e0       	ldi	r25, 0x00	; 0
    12a6:	62 da       	rcall	.-2876   	; 0x76c <readADC>
    12a8:	0f 2e       	mov	r0, r31
    12aa:	fa e0       	ldi	r31, 0x0A	; 10
    12ac:	af 2e       	mov	r10, r31
    12ae:	b1 2c       	mov	r11, r1
    12b0:	f0 2d       	mov	r31, r0
    12b2:	04 e6       	ldi	r16, 0x64	; 100
    12b4:	10 e0       	ldi	r17, 0x00	; 0
    12b6:	2c e9       	ldi	r18, 0x9C	; 156
    12b8:	3f ef       	ldi	r19, 0xFF	; 255
    12ba:	4f ef       	ldi	r20, 0xFF	; 255
    12bc:	50 e0       	ldi	r21, 0x00	; 0
    12be:	60 e0       	ldi	r22, 0x00	; 0
    12c0:	70 e0       	ldi	r23, 0x00	; 0
    12c2:	1b df       	rcall	.-458    	; 0x10fa <signal_to_range>
    12c4:	90 93 37 02 	sts	0x0237, r25
    12c8:	80 93 36 02 	sts	0x0236, r24
			return ref_X;
    12cc:	80 91 36 02 	lds	r24, 0x0236
    12d0:	90 91 37 02 	lds	r25, 0x0237
    12d4:	64 c0       	rjmp	.+200    	; 0x139e <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(ADC_CHANNEL_Y), SIGNAL_MIN, SIGNAL_MAX, JOYSTICK_MIN, JOYSTICK_MAX, calibrate_y, ref_Y, RESOLUTION);
    12d6:	c0 90 34 02 	lds	r12, 0x0234
    12da:	d0 90 35 02 	lds	r13, 0x0235
    12de:	e0 90 38 02 	lds	r14, 0x0238
    12e2:	f0 90 39 02 	lds	r15, 0x0239
    12e6:	82 e0       	ldi	r24, 0x02	; 2
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	40 da       	rcall	.-2944   	; 0x76c <readADC>
    12ec:	0f 2e       	mov	r0, r31
    12ee:	fa e0       	ldi	r31, 0x0A	; 10
    12f0:	af 2e       	mov	r10, r31
    12f2:	b1 2c       	mov	r11, r1
    12f4:	f0 2d       	mov	r31, r0
    12f6:	04 e6       	ldi	r16, 0x64	; 100
    12f8:	10 e0       	ldi	r17, 0x00	; 0
    12fa:	2c e9       	ldi	r18, 0x9C	; 156
    12fc:	3f ef       	ldi	r19, 0xFF	; 255
    12fe:	4f ef       	ldi	r20, 0xFF	; 255
    1300:	50 e0       	ldi	r21, 0x00	; 0
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	f9 de       	rcall	.-526    	; 0x10fa <signal_to_range>
    1308:	90 93 35 02 	sts	0x0235, r25
    130c:	80 93 34 02 	sts	0x0234, r24
			return ref_Y;
    1310:	80 91 34 02 	lds	r24, 0x0234
    1314:	90 91 35 02 	lds	r25, 0x0235
    1318:	42 c0       	rjmp	.+132    	; 0x139e <read_control_input+0x136>
		case 'L':
			ref_L = signal_to_range(readADC(ADC_CHANNEL_L), SIGNAL_MIN, SIGNAL_MAX, SLIDER_MIN, SLIDER_MAX, 0, ref_L, RESOLUTION);
    131a:	c0 90 32 02 	lds	r12, 0x0232
    131e:	d0 90 33 02 	lds	r13, 0x0233
    1322:	83 e0       	ldi	r24, 0x03	; 3
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	22 da       	rcall	.-3004   	; 0x76c <readADC>
    1328:	0f 2e       	mov	r0, r31
    132a:	fa e0       	ldi	r31, 0x0A	; 10
    132c:	af 2e       	mov	r10, r31
    132e:	b1 2c       	mov	r11, r1
    1330:	f0 2d       	mov	r31, r0
    1332:	e1 2c       	mov	r14, r1
    1334:	f1 2c       	mov	r15, r1
    1336:	04 e6       	ldi	r16, 0x64	; 100
    1338:	10 e0       	ldi	r17, 0x00	; 0
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4f ef       	ldi	r20, 0xFF	; 255
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	60 e0       	ldi	r22, 0x00	; 0
    1344:	70 e0       	ldi	r23, 0x00	; 0
    1346:	d9 de       	rcall	.-590    	; 0x10fa <signal_to_range>
    1348:	90 93 33 02 	sts	0x0233, r25
    134c:	80 93 32 02 	sts	0x0232, r24
			return ref_L;
    1350:	80 91 32 02 	lds	r24, 0x0232
    1354:	90 91 33 02 	lds	r25, 0x0233
    1358:	22 c0       	rjmp	.+68     	; 0x139e <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(ADC_CHANNEL_R), SIGNAL_MIN, SIGNAL_MAX, SLIDER_MIN, SLIDER_MAX, 0, ref_R, RESOLUTION);
    135a:	c0 90 30 02 	lds	r12, 0x0230
    135e:	d0 90 31 02 	lds	r13, 0x0231
    1362:	84 e0       	ldi	r24, 0x04	; 4
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 da       	rcall	.-3068   	; 0x76c <readADC>
    1368:	0f 2e       	mov	r0, r31
    136a:	fa e0       	ldi	r31, 0x0A	; 10
    136c:	af 2e       	mov	r10, r31
    136e:	b1 2c       	mov	r11, r1
    1370:	f0 2d       	mov	r31, r0
    1372:	e1 2c       	mov	r14, r1
    1374:	f1 2c       	mov	r15, r1
    1376:	04 e6       	ldi	r16, 0x64	; 100
    1378:	10 e0       	ldi	r17, 0x00	; 0
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	4f ef       	ldi	r20, 0xFF	; 255
    1380:	50 e0       	ldi	r21, 0x00	; 0
    1382:	60 e0       	ldi	r22, 0x00	; 0
    1384:	70 e0       	ldi	r23, 0x00	; 0
    1386:	b9 de       	rcall	.-654    	; 0x10fa <signal_to_range>
    1388:	90 93 31 02 	sts	0x0231, r25
    138c:	80 93 30 02 	sts	0x0230, r24
			return ref_R;
    1390:	80 91 30 02 	lds	r24, 0x0230
    1394:	90 91 31 02 	lds	r25, 0x0231
    1398:	02 c0       	rjmp	.+4      	; 0x139e <read_control_input+0x136>
	}
	return 0;
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	90 e0       	ldi	r25, 0x00	; 0
}
    139e:	1f 91       	pop	r17
    13a0:	0f 91       	pop	r16
    13a2:	ff 90       	pop	r15
    13a4:	ef 90       	pop	r14
    13a6:	df 90       	pop	r13
    13a8:	cf 90       	pop	r12
    13aa:	bf 90       	pop	r11
    13ac:	af 90       	pop	r10
    13ae:	08 95       	ret

000013b0 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
    13b0:	60 de       	rcall	.-832    	; 0x1072 <calibrate_joystick>
	ref_X = read_control_input('X');
    13b2:	88 e5       	ldi	r24, 0x58	; 88
    13b4:	59 df       	rcall	.-334    	; 0x1268 <read_control_input>
    13b6:	90 93 37 02 	sts	0x0237, r25
    13ba:	80 93 36 02 	sts	0x0236, r24
	ref_Y = read_control_input('Y');
    13be:	89 e5       	ldi	r24, 0x59	; 89
    13c0:	53 df       	rcall	.-346    	; 0x1268 <read_control_input>
    13c2:	90 93 35 02 	sts	0x0235, r25
    13c6:	80 93 34 02 	sts	0x0234, r24
	ref_L = read_control_input('L');
    13ca:	8c e4       	ldi	r24, 0x4C	; 76
    13cc:	4d df       	rcall	.-358    	; 0x1268 <read_control_input>
    13ce:	90 93 33 02 	sts	0x0233, r25
    13d2:	80 93 32 02 	sts	0x0232, r24
	ref_R = read_control_input('R');
    13d6:	82 e5       	ldi	r24, 0x52	; 82
    13d8:	47 df       	rcall	.-370    	; 0x1268 <read_control_input>
    13da:	90 93 31 02 	sts	0x0231, r25
    13de:	80 93 30 02 	sts	0x0230, r24
    13e2:	08 95       	ret

000013e4 <initialize_menu>:
	#endif
};

char temp[16];

void initialize_menu(void){
    13e4:	8f 92       	push	r8
    13e6:	9f 92       	push	r9
    13e8:	af 92       	push	r10
    13ea:	bf 92       	push	r11
    13ec:	cf 92       	push	r12
    13ee:	df 92       	push	r13
    13f0:	ef 92       	push	r14
    13f2:	ff 92       	push	r15
    13f4:	0f 93       	push	r16
    13f6:	1f 93       	push	r17
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	0f 2e       	mov	r0, r31
    13fe:	f9 e1       	ldi	r31, 0x19	; 25
    1400:	cf 2e       	mov	r12, r31
    1402:	f1 e0       	ldi	r31, 0x01	; 1
    1404:	df 2e       	mov	r13, r31
    1406:	f0 2d       	mov	r31, r0
    1408:	0f 2e       	mov	r0, r31
    140a:	f3 e1       	ldi	r31, 0x13	; 19
    140c:	ef 2e       	mov	r14, r31
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	ff 2e       	mov	r15, r31
    1412:	f0 2d       	mov	r31, r0
    1414:	0f e1       	ldi	r16, 0x1F	; 31
    1416:	11 e0       	ldi	r17, 0x01	; 1
    1418:	21 e0       	ldi	r18, 0x01	; 1
    141a:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
    141c:	c3 e0       	ldi	r28, 0x03	; 3
    141e:	d0 e0       	ldi	r29, 0x00	; 0
    1420:	d6 01       	movw	r26, r12
    1422:	ad 90       	ld	r10, X+
    1424:	bd 90       	ld	r11, X+
    1426:	6d 01       	movw	r12, r26
    1428:	f7 01       	movw	r30, r14
    142a:	81 90       	ld	r8, Z+
    142c:	91 90       	ld	r9, Z+
    142e:	7f 01       	movw	r14, r30
    1430:	c9 01       	movw	r24, r18
    1432:	be 01       	movw	r22, r28
    1434:	0e 94 7f 14 	call	0x28fe	; 0x28fe <__divmodhi4>
    1438:	fc 01       	movw	r30, r24
    143a:	ee 0f       	add	r30, r30
    143c:	ff 1f       	adc	r31, r31
    143e:	e1 5e       	subi	r30, 0xE1	; 225
    1440:	fe 4f       	sbci	r31, 0xFE	; 254
    1442:	80 81       	ld	r24, Z
    1444:	91 81       	ldd	r25, Z+1	; 0x01
    1446:	d8 01       	movw	r26, r16
    1448:	ed 91       	ld	r30, X+
    144a:	fd 91       	ld	r31, X+
    144c:	8d 01       	movw	r16, r26

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    144e:	95 83       	std	Z+5, r25	; 0x05
    1450:	84 83       	std	Z+4, r24	; 0x04
	new_menu->ptr_child = ptr_child;
    1452:	97 82       	std	Z+7, r9	; 0x07
    1454:	86 82       	std	Z+6, r8	; 0x06
	new_menu->ptr_parent = ptr_parent;
    1456:	11 86       	std	Z+9, r1	; 0x09
    1458:	10 86       	std	Z+8, r1	; 0x08
	new_menu->title = title;
    145a:	b1 82       	std	Z+1, r11	; 0x01
    145c:	a0 82       	st	Z, r10
	new_menu->n_sib = n_sib;
    145e:	d3 83       	std	Z+3, r29	; 0x03
    1460:	c2 83       	std	Z+2, r28	; 0x02
    1462:	2f 5f       	subi	r18, 0xFF	; 255
    1464:	3f 4f       	sbci	r19, 0xFF	; 255
};

char temp[16];

void initialize_menu(void){
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
    1466:	24 30       	cpi	r18, 0x04	; 4
    1468:	31 05       	cpc	r19, r1
    146a:	d1 f6       	brne	.-76     	; 0x1420 <initialize_menu+0x3c>
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	#if OPTION_ENABLE
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    146c:	80 91 35 01 	lds	r24, 0x0135
    1470:	90 91 36 01 	lds	r25, 0x0136
    1474:	60 91 45 02 	lds	r22, 0x0245
    1478:	70 91 46 02 	lds	r23, 0x0246
    147c:	ef e1       	ldi	r30, 0x1F	; 31
    147e:	f1 e0       	ldi	r31, 0x01	; 1
    1480:	40 81       	ld	r20, Z
    1482:	51 81       	ldd	r21, Z+1	; 0x01
    1484:	0f 2e       	mov	r0, r31
    1486:	f9 e3       	ldi	r31, 0x39	; 57
    1488:	ef 2e       	mov	r14, r31
    148a:	f1 e0       	ldi	r31, 0x01	; 1
    148c:	ff 2e       	mov	r15, r31
    148e:	f0 2d       	mov	r31, r0
    1490:	e7 01       	movw	r28, r14
    1492:	a8 81       	ld	r26, Y
    1494:	b9 81       	ldd	r27, Y+1	; 0x01
    1496:	2b e3       	ldi	r18, 0x3B	; 59
    1498:	31 e0       	ldi	r19, 0x01	; 1

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    149a:	e9 01       	movw	r28, r18
    149c:	08 81       	ld	r16, Y
    149e:	19 81       	ldd	r17, Y+1	; 0x01
    14a0:	15 96       	adiw	r26, 0x05	; 5
    14a2:	1c 93       	st	X, r17
    14a4:	0e 93       	st	-X, r16
    14a6:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    14a8:	17 96       	adiw	r26, 0x07	; 7
    14aa:	7c 93       	st	X, r23
    14ac:	6e 93       	st	-X, r22
    14ae:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    14b0:	19 96       	adiw	r26, 0x09	; 9
    14b2:	5c 93       	st	X, r21
    14b4:	4e 93       	st	-X, r20
    14b6:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->title = title;
    14b8:	11 96       	adiw	r26, 0x01	; 1
    14ba:	9c 93       	st	X, r25
    14bc:	8e 93       	st	-X, r24
	new_menu->n_sib = n_sib;
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	90 e0       	ldi	r25, 0x00	; 0
    14c2:	13 96       	adiw	r26, 0x03	; 3
    14c4:	9c 93       	st	X, r25
    14c6:	8e 93       	st	-X, r24
    14c8:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	#if OPTION_ENABLE
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    14ca:	40 91 37 01 	lds	r20, 0x0137
    14ce:	50 91 38 01 	lds	r21, 0x0138
    14d2:	00 91 47 02 	lds	r16, 0x0247
    14d6:	10 91 48 02 	lds	r17, 0x0248
    14da:	60 81       	ld	r22, Z
    14dc:	71 81       	ldd	r23, Z+1	; 0x01
    14de:	a8 81       	ld	r26, Y
    14e0:	b9 81       	ldd	r27, Y+1	; 0x01

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    14e2:	e7 01       	movw	r28, r14
    14e4:	28 81       	ld	r18, Y
    14e6:	39 81       	ldd	r19, Y+1	; 0x01
    14e8:	15 96       	adiw	r26, 0x05	; 5
    14ea:	3c 93       	st	X, r19
    14ec:	2e 93       	st	-X, r18
    14ee:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    14f0:	17 96       	adiw	r26, 0x07	; 7
    14f2:	1c 93       	st	X, r17
    14f4:	0e 93       	st	-X, r16
    14f6:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    14f8:	19 96       	adiw	r26, 0x09	; 9
    14fa:	7c 93       	st	X, r23
    14fc:	6e 93       	st	-X, r22
    14fe:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->title = title;
    1500:	11 96       	adiw	r26, 0x01	; 1
    1502:	5c 93       	st	X, r21
    1504:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1506:	13 96       	adiw	r26, 0x03	; 3
    1508:	9c 93       	st	X, r25
    150a:	8e 93       	st	-X, r24
    150c:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    150e:	40 91 2d 01 	lds	r20, 0x012D
    1512:	50 91 2e 01 	lds	r21, 0x012E
    1516:	00 91 41 02 	lds	r16, 0x0241
    151a:	10 91 42 02 	lds	r17, 0x0242
    151e:	60 81       	ld	r22, Z
    1520:	71 81       	ldd	r23, Z+1	; 0x01
    1522:	0f 2e       	mov	r0, r31
    1524:	f1 e3       	ldi	r31, 0x31	; 49
    1526:	cf 2e       	mov	r12, r31
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	df 2e       	mov	r13, r31
    152c:	f0 2d       	mov	r31, r0
    152e:	e6 01       	movw	r28, r12
    1530:	a8 81       	ld	r26, Y
    1532:	b9 81       	ldd	r27, Y+1	; 0x01
    1534:	23 e3       	ldi	r18, 0x33	; 51
    1536:	31 e0       	ldi	r19, 0x01	; 1

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    1538:	e9 01       	movw	r28, r18
    153a:	e8 80       	ld	r14, Y
    153c:	f9 80       	ldd	r15, Y+1	; 0x01
    153e:	15 96       	adiw	r26, 0x05	; 5
    1540:	fc 92       	st	X, r15
    1542:	ee 92       	st	-X, r14
    1544:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1546:	17 96       	adiw	r26, 0x07	; 7
    1548:	1c 93       	st	X, r17
    154a:	0e 93       	st	-X, r16
    154c:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    154e:	19 96       	adiw	r26, 0x09	; 9
    1550:	7c 93       	st	X, r23
    1552:	6e 93       	st	-X, r22
    1554:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->title = title;
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	5c 93       	st	X, r21
    155a:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    155c:	13 96       	adiw	r26, 0x03	; 3
    155e:	9c 93       	st	X, r25
    1560:	8e 93       	st	-X, r24
    1562:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    1564:	40 91 2f 01 	lds	r20, 0x012F
    1568:	50 91 30 01 	lds	r21, 0x0130
    156c:	00 91 43 02 	lds	r16, 0x0243
    1570:	10 91 44 02 	lds	r17, 0x0244
    1574:	60 81       	ld	r22, Z
    1576:	71 81       	ldd	r23, Z+1	; 0x01
    1578:	a8 81       	ld	r26, Y
    157a:	b9 81       	ldd	r27, Y+1	; 0x01

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    157c:	e6 01       	movw	r28, r12
    157e:	28 81       	ld	r18, Y
    1580:	39 81       	ldd	r19, Y+1	; 0x01
    1582:	15 96       	adiw	r26, 0x05	; 5
    1584:	3c 93       	st	X, r19
    1586:	2e 93       	st	-X, r18
    1588:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    158a:	17 96       	adiw	r26, 0x07	; 7
    158c:	1c 93       	st	X, r17
    158e:	0e 93       	st	-X, r16
    1590:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1592:	19 96       	adiw	r26, 0x09	; 9
    1594:	7c 93       	st	X, r23
    1596:	6e 93       	st	-X, r22
    1598:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->title = title;
    159a:	11 96       	adiw	r26, 0x01	; 1
    159c:	5c 93       	st	X, r21
    159e:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    15a0:	13 96       	adiw	r26, 0x03	; 3
    15a2:	9c 93       	st	X, r25
    15a4:	8e 93       	st	-X, r24
    15a6:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if HIGHSCORE_ENABLE
	for (uint8_t h = 0; h < TOTAL_HIGHSCORE; h++)
	{
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_HIGHSCORE],mainmenu_list[0],highscore_ptr_list[h],TOTAL_HIGHSCORE,highscore_entry_list[h]);
    15a8:	40 91 25 01 	lds	r20, 0x0125
    15ac:	50 91 26 01 	lds	r21, 0x0126
    15b0:	00 91 3d 02 	lds	r16, 0x023D
    15b4:	10 91 3e 02 	lds	r17, 0x023E
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	0f 2e       	mov	r0, r31
    15be:	f9 e2       	ldi	r31, 0x29	; 41
    15c0:	cf 2e       	mov	r12, r31
    15c2:	f1 e0       	ldi	r31, 0x01	; 1
    15c4:	df 2e       	mov	r13, r31
    15c6:	f0 2d       	mov	r31, r0
    15c8:	e6 01       	movw	r28, r12
    15ca:	a8 81       	ld	r26, Y
    15cc:	b9 81       	ldd	r27, Y+1	; 0x01
    15ce:	2b e2       	ldi	r18, 0x2B	; 43
    15d0:	31 e0       	ldi	r19, 0x01	; 1

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    15d2:	e9 01       	movw	r28, r18
    15d4:	e8 80       	ld	r14, Y
    15d6:	f9 80       	ldd	r15, Y+1	; 0x01
    15d8:	15 96       	adiw	r26, 0x05	; 5
    15da:	fc 92       	st	X, r15
    15dc:	ee 92       	st	-X, r14
    15de:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    15e0:	17 96       	adiw	r26, 0x07	; 7
    15e2:	1c 93       	st	X, r17
    15e4:	0e 93       	st	-X, r16
    15e6:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    15e8:	19 96       	adiw	r26, 0x09	; 9
    15ea:	7c 93       	st	X, r23
    15ec:	6e 93       	st	-X, r22
    15ee:	18 97       	sbiw	r26, 0x08	; 8
	new_menu->title = title;
    15f0:	11 96       	adiw	r26, 0x01	; 1
    15f2:	5c 93       	st	X, r21
    15f4:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    15f6:	13 96       	adiw	r26, 0x03	; 3
    15f8:	9c 93       	st	X, r25
    15fa:	8e 93       	st	-X, r24
    15fc:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if HIGHSCORE_ENABLE
	for (uint8_t h = 0; h < TOTAL_HIGHSCORE; h++)
	{
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_HIGHSCORE],mainmenu_list[0],highscore_ptr_list[h],TOTAL_HIGHSCORE,highscore_entry_list[h]);
    15fe:	40 91 27 01 	lds	r20, 0x0127
    1602:	50 91 28 01 	lds	r21, 0x0128
    1606:	a0 91 3f 02 	lds	r26, 0x023F
    160a:	b0 91 40 02 	lds	r27, 0x0240
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	e8 81       	ld	r30, Y
    1614:	f9 81       	ldd	r31, Y+1	; 0x01

menu* current_head;
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	new_menu->ptr_sib_down = ptr_sib_down;
    1616:	e6 01       	movw	r28, r12
    1618:	28 81       	ld	r18, Y
    161a:	39 81       	ldd	r19, Y+1	; 0x01
    161c:	35 83       	std	Z+5, r19	; 0x05
    161e:	24 83       	std	Z+4, r18	; 0x04
	new_menu->ptr_child = ptr_child;
    1620:	b7 83       	std	Z+7, r27	; 0x07
    1622:	a6 83       	std	Z+6, r26	; 0x06
	new_menu->ptr_parent = ptr_parent;
    1624:	71 87       	std	Z+9, r23	; 0x09
    1626:	60 87       	std	Z+8, r22	; 0x08
	new_menu->title = title;
    1628:	51 83       	std	Z+1, r21	; 0x01
    162a:	40 83       	st	Z, r20
	new_menu->n_sib = n_sib;
    162c:	93 83       	std	Z+3, r25	; 0x03
    162e:	82 83       	std	Z+2, r24	; 0x02
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_HIGHSCORE],mainmenu_list[0],highscore_ptr_list[h],TOTAL_HIGHSCORE,highscore_entry_list[h]);
	}
	#endif
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_games;
    1630:	83 e6       	ldi	r24, 0x63	; 99
    1632:	92 e0       	ldi	r25, 0x02	; 2
    1634:	90 93 56 02 	sts	0x0256, r25
    1638:	80 93 55 02 	sts	0x0255, r24
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_games;
    163c:	90 93 58 02 	sts	0x0258, r25
    1640:	80 93 57 02 	sts	0x0257, r24
	
}
    1644:	df 91       	pop	r29
    1646:	cf 91       	pop	r28
    1648:	1f 91       	pop	r17
    164a:	0f 91       	pop	r16
    164c:	ff 90       	pop	r15
    164e:	ef 90       	pop	r14
    1650:	df 90       	pop	r13
    1652:	cf 90       	pop	r12
    1654:	bf 90       	pop	r11
    1656:	af 90       	pop	r10
    1658:	9f 90       	pop	r9
    165a:	8f 90       	pop	r8
    165c:	08 95       	ret

0000165e <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	c7 d1       	rcall	.+910    	; 0x19f0 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
    1662:	60 e7       	ldi	r22, 0x70	; 112
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	87 e7       	ldi	r24, 0x77	; 119
    1668:	92 e0       	ldi	r25, 0x02	; 2
    166a:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strcpy_P>
	sram_write_string(temp);
    166e:	87 e7       	ldi	r24, 0x77	; 119
    1670:	92 e0       	ldi	r25, 0x02	; 2
    1672:	ca d2       	rcall	.+1428   	; 0x1c08 <sram_write_string>
	sram_clear_line(1);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	8e d4       	rcall	.+2332   	; 0x1f94 <sram_clear_line>
	oled_goto_line(2);
    1678:	82 e0       	ldi	r24, 0x02	; 2
    167a:	ba d1       	rcall	.+884    	; 0x19f0 <oled_goto_line>
	strcpy_P(temp,btn_1);
    167c:	60 e8       	ldi	r22, 0x80	; 128
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	87 e7       	ldi	r24, 0x77	; 119
    1682:	92 e0       	ldi	r25, 0x02	; 2
    1684:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strcpy_P>
	sram_write_string(temp);
    1688:	87 e7       	ldi	r24, 0x77	; 119
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	bd d2       	rcall	.+1402   	; 0x1c08 <sram_write_string>
	sram_update_oled();
    168e:	58 d4       	rcall	.+2224   	; 0x1f40 <sram_update_oled>
	while (!check_flag_right()){
    1690:	08 c0       	rjmp	.+16     	; 0x16a2 <menu_set_contrast+0x44>
		write_c(0x81);
    1692:	81 e8       	ldi	r24, 0x81	; 129
    1694:	7a d1       	rcall	.+756    	; 0x198a <write_c>
		write_c(readADC(3)/2);
    1696:	83 e0       	ldi	r24, 0x03	; 3
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	68 d8       	rcall	.-3888   	; 0x76c <readADC>
    169c:	96 95       	lsr	r25
    169e:	87 95       	ror	r24
    16a0:	74 d1       	rcall	.+744    	; 0x198a <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_update_oled();
	while (!check_flag_right()){
    16a2:	ae d8       	rcall	.-3748   	; 0x800 <check_flag_right>
    16a4:	88 23       	and	r24, r24
    16a6:	a9 f3       	breq	.-22     	; 0x1692 <menu_set_contrast+0x34>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
}
    16a8:	08 95       	ret

000016aa <menu_function_selected>:
	return 0;
	
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    16aa:	80 91 57 02 	lds	r24, 0x0257
    16ae:	90 91 58 02 	lds	r25, 0x0258
    16b2:	22 e0       	ldi	r18, 0x02	; 2
    16b4:	81 39       	cpi	r24, 0x91	; 145
    16b6:	92 07       	cpc	r25, r18
    16b8:	11 f4       	brne	.+4      	; 0x16be <menu_function_selected+0x14>
		menu_set_contrast();
    16ba:	d1 cf       	rjmp	.-94     	; 0x165e <menu_set_contrast>
    16bc:	08 95       	ret
	else if(current_selected == &debug_1){
		menu_calibrate_joystick();
	}
	#endif
	#if FLAPPY == 1
	else if(current_selected == &game_1){
    16be:	22 e0       	ldi	r18, 0x02	; 2
    16c0:	8d 36       	cpi	r24, 0x6D	; 109
    16c2:	92 07       	cpc	r25, r18
    16c4:	11 f4       	brne	.+4      	; 0x16ca <menu_function_selected+0x20>
		flappy_main();
    16c6:	51 cb       	rjmp	.-2398   	; 0xd6a <flappy_main>
    16c8:	08 95       	ret
	}
	#endif
	
	#if SQUASH_SIM == 1
	else if(current_selected == &game_0){
    16ca:	22 e0       	ldi	r18, 0x02	; 2
    16cc:	85 3a       	cpi	r24, 0xA5	; 165
    16ce:	92 07       	cpc	r25, r18
    16d0:	11 f4       	brne	.+4      	; 0x16d6 <menu_function_selected+0x2c>
		play_game();
    16d2:	9a cc       	rjmp	.-1740   	; 0x1008 <play_game>
    16d4:	08 95       	ret
	}
	#endif
	
	#if HIGHSCORE_ENABLE
	else if(current_selected == &highscore_0){
    16d6:	22 e0       	ldi	r18, 0x02	; 2
    16d8:	89 3b       	cpi	r24, 0xB9	; 185
    16da:	92 07       	cpc	r25, r18
    16dc:	49 f4       	brne	.+18     	; 0x16f0 <menu_function_selected+0x46>
		print_highscore(SCOREBOARD_MAIN_GAME);
    16de:	88 e0       	ldi	r24, 0x08	; 8
    16e0:	65 d6       	rcall	.+3274   	; 0x23ac <print_highscore>
		while (!(check_flag_left()||check_flag_right()))
    16e2:	85 d8       	rcall	.-3830   	; 0x7ee <check_flag_left>
    16e4:	81 11       	cpse	r24, r1
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <menu_function_selected+0x5c>
    16e8:	8b d8       	rcall	.-3818   	; 0x800 <check_flag_right>
    16ea:	88 23       	and	r24, r24
    16ec:	d1 f3       	breq	.-12     	; 0x16e2 <menu_function_selected+0x38>
    16ee:	08 95       	ret
		{
			
		}
	}
	
	else if(current_selected == &highscore_1){
    16f0:	8f 5a       	subi	r24, 0xAF	; 175
    16f2:	92 40       	sbci	r25, 0x02	; 2
    16f4:	41 f4       	brne	.+16     	; 0x1706 <menu_function_selected+0x5c>
		print_highscore(SCOREBOARD_FLAPPY_BIRD);
    16f6:	80 e0       	ldi	r24, 0x00	; 0
    16f8:	59 d6       	rcall	.+3250   	; 0x23ac <print_highscore>
		while (!(check_flag_left()||check_flag_right()))
    16fa:	79 d8       	rcall	.-3854   	; 0x7ee <check_flag_left>
    16fc:	81 11       	cpse	r24, r1
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <menu_function_selected+0x5c>
    1700:	7f d8       	rcall	.-3842   	; 0x800 <check_flag_right>
    1702:	88 23       	and	r24, r24
    1704:	d1 f3       	breq	.-12     	; 0x16fa <menu_function_selected+0x50>
    1706:	08 95       	ret

00001708 <navigate_menu>:
}



int navigate_menu(void){
	int joystick_reading = read_control_input('Y');
    1708:	89 e5       	ldi	r24, 0x59	; 89
    170a:	ae dd       	rcall	.-1188   	; 0x1268 <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
    170c:	87 34       	cpi	r24, 0x47	; 71
    170e:	91 05       	cpc	r25, r1
    1710:	14 f1       	brlt	.+68     	; 0x1756 <navigate_menu+0x4e>
    1712:	20 91 3c 02 	lds	r18, 0x023C
    1716:	24 31       	cpi	r18, 0x14	; 20
    1718:	f4 f0       	brlt	.+60     	; 0x1756 <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    171a:	e0 91 57 02 	lds	r30, 0x0257
    171e:	f0 91 58 02 	lds	r31, 0x0258
    1722:	82 81       	ldd	r24, Z+2	; 0x02
    1724:	93 81       	ldd	r25, Z+3	; 0x03
    1726:	01 97       	sbiw	r24, 0x01	; 1
    1728:	18 16       	cp	r1, r24
    172a:	19 06       	cpc	r1, r25
    172c:	8c f4       	brge	.+34     	; 0x1750 <navigate_menu+0x48>
    172e:	80 e0       	ldi	r24, 0x00	; 0
    1730:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    1732:	04 80       	ldd	r0, Z+4	; 0x04
    1734:	f5 81       	ldd	r31, Z+5	; 0x05
    1736:	e0 2d       	mov	r30, r0
int navigate_menu(void){
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1738:	01 96       	adiw	r24, 0x01	; 1
    173a:	22 81       	ldd	r18, Z+2	; 0x02
    173c:	33 81       	ldd	r19, Z+3	; 0x03
    173e:	21 50       	subi	r18, 0x01	; 1
    1740:	31 09       	sbc	r19, r1
    1742:	82 17       	cp	r24, r18
    1744:	93 07       	cpc	r25, r19
    1746:	ac f3       	brlt	.-22     	; 0x1732 <navigate_menu+0x2a>
    1748:	f0 93 58 02 	sts	0x0258, r31
    174c:	e0 93 57 02 	sts	0x0257, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
    1750:	10 92 3c 02 	sts	0x023C, r1
    1754:	1d c0       	rjmp	.+58     	; 0x1790 <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
    1756:	8a 3b       	cpi	r24, 0xBA	; 186
    1758:	2f ef       	ldi	r18, 0xFF	; 255
    175a:	92 07       	cpc	r25, r18
    175c:	8c f4       	brge	.+34     	; 0x1780 <navigate_menu+0x78>
    175e:	20 91 3c 02 	lds	r18, 0x023C
    1762:	24 31       	cpi	r18, 0x14	; 20
    1764:	6c f0       	brlt	.+26     	; 0x1780 <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
    1766:	e0 91 57 02 	lds	r30, 0x0257
    176a:	f0 91 58 02 	lds	r31, 0x0258
    176e:	84 81       	ldd	r24, Z+4	; 0x04
    1770:	95 81       	ldd	r25, Z+5	; 0x05
    1772:	90 93 58 02 	sts	0x0258, r25
    1776:	80 93 57 02 	sts	0x0257, r24
		navigation_counter = 0;
    177a:	10 92 3c 02 	sts	0x023C, r1
    177e:	08 c0       	rjmp	.+16     	; 0x1790 <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    1780:	8b 5b       	subi	r24, 0xBB	; 187
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	8b 38       	cpi	r24, 0x8B	; 139
    1786:	91 05       	cpc	r25, r1
    1788:	18 f4       	brcc	.+6      	; 0x1790 <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
    178a:	83 e1       	ldi	r24, 0x13	; 19
    178c:	80 93 3c 02 	sts	0x023C, r24
	}
	if (check_flag_right())
    1790:	37 d8       	rcall	.-3986   	; 0x800 <check_flag_right>
    1792:	88 23       	and	r24, r24
    1794:	99 f0       	breq	.+38     	; 0x17bc <navigate_menu+0xb4>
	{
		if(current_selected->ptr_child != NULL){
    1796:	e0 91 57 02 	lds	r30, 0x0257
    179a:	f0 91 58 02 	lds	r31, 0x0258
    179e:	86 81       	ldd	r24, Z+6	; 0x06
    17a0:	97 81       	ldd	r25, Z+7	; 0x07
    17a2:	00 97       	sbiw	r24, 0x00	; 0
    17a4:	49 f0       	breq	.+18     	; 0x17b8 <navigate_menu+0xb0>
			current_head = current_selected->ptr_child;
    17a6:	90 93 56 02 	sts	0x0256, r25
    17aa:	80 93 55 02 	sts	0x0255, r24
			current_selected = current_selected->ptr_child;
    17ae:	90 93 58 02 	sts	0x0258, r25
    17b2:	80 93 57 02 	sts	0x0257, r24
    17b6:	1b c0       	rjmp	.+54     	; 0x17ee <navigate_menu+0xe6>
		}else{
			menu_function_selected();
    17b8:	78 df       	rcall	.-272    	; 0x16aa <menu_function_selected>
    17ba:	19 c0       	rjmp	.+50     	; 0x17ee <navigate_menu+0xe6>
		}
	}else if (check_flag_left()){
    17bc:	18 d8       	rcall	.-4048   	; 0x7ee <check_flag_left>
    17be:	88 23       	and	r24, r24
    17c0:	b1 f0       	breq	.+44     	; 0x17ee <navigate_menu+0xe6>
		if (current_selected->ptr_parent != NULL){
    17c2:	e0 91 57 02 	lds	r30, 0x0257
    17c6:	f0 91 58 02 	lds	r31, 0x0258
    17ca:	80 85       	ldd	r24, Z+8	; 0x08
    17cc:	91 85       	ldd	r25, Z+9	; 0x09
    17ce:	00 97       	sbiw	r24, 0x00	; 0
    17d0:	71 f0       	breq	.+28     	; 0x17ee <navigate_menu+0xe6>
			current_head = current_head->ptr_parent;
    17d2:	e0 91 55 02 	lds	r30, 0x0255
    17d6:	f0 91 56 02 	lds	r31, 0x0256
    17da:	20 85       	ldd	r18, Z+8	; 0x08
    17dc:	31 85       	ldd	r19, Z+9	; 0x09
    17de:	30 93 56 02 	sts	0x0256, r19
    17e2:	20 93 55 02 	sts	0x0255, r18
			current_selected = current_selected->ptr_parent;
    17e6:	90 93 58 02 	sts	0x0258, r25
    17ea:	80 93 57 02 	sts	0x0257, r24
		}
	}
	return 0;
	
}
    17ee:	80 e0       	ldi	r24, 0x00	; 0
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	08 95       	ret

000017f4 <menu_update>:
	current_selected = &mainmenu_games;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
    17f4:	0f 93       	push	r16
    17f6:	1f 93       	push	r17
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    17fc:	85 df       	rcall	.-246    	; 0x1708 <navigate_menu>
    17fe:	89 2b       	or	r24, r25
    1800:	09 f0       	breq	.+2      	; 0x1804 <menu_update+0x10>
    1802:	44 c0       	rjmp	.+136    	; 0x188c <menu_update+0x98>
    1804:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    1806:	8c 2f       	mov	r24, r28
    1808:	c5 d3       	rcall	.+1930   	; 0x1f94 <sram_clear_line>
    180a:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    180c:	c7 30       	cpi	r28, 0x07	; 7
    180e:	d9 f7       	brne	.-10     	; 0x1806 <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    1810:	e0 91 55 02 	lds	r30, 0x0255
    1814:	f0 91 56 02 	lds	r31, 0x0256
    1818:	82 81       	ldd	r24, Z+2	; 0x02
    181a:	93 81       	ldd	r25, Z+3	; 0x03
    181c:	18 16       	cp	r1, r24
    181e:	19 06       	cpc	r1, r25
    1820:	ac f5       	brge	.+106    	; 0x188c <menu_update+0x98>
    1822:	c0 e0       	ldi	r28, 0x00	; 0
    1824:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1826:	10 e8       	ldi	r17, 0x80	; 128
    1828:	01 e8       	ldi	r16, 0x81	; 129
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    182a:	8c 2f       	mov	r24, r28
    182c:	e1 d0       	rcall	.+450    	; 0x19f0 <oled_goto_line>
			oled_goto_column(0);
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	fa d0       	rcall	.+500    	; 0x1a26 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    1832:	e0 91 55 02 	lds	r30, 0x0255
    1836:	f0 91 56 02 	lds	r31, 0x0256
    183a:	60 81       	ld	r22, Z
    183c:	71 81       	ldd	r23, Z+1	; 0x01
    183e:	87 e7       	ldi	r24, 0x77	; 119
    1840:	92 e0       	ldi	r25, 0x02	; 2
    1842:	0e 94 72 15 	call	0x2ae4	; 0x2ae4 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1846:	20 91 55 02 	lds	r18, 0x0255
    184a:	30 91 56 02 	lds	r19, 0x0256
    184e:	80 91 57 02 	lds	r24, 0x0257
    1852:	90 91 58 02 	lds	r25, 0x0258
    1856:	28 17       	cp	r18, r24
    1858:	39 07       	cpc	r19, r25
    185a:	11 f4       	brne	.+4      	; 0x1860 <menu_update+0x6c>
    185c:	80 2f       	mov	r24, r16
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <menu_update+0x6e>
    1860:	81 2f       	mov	r24, r17
    1862:	89 d1       	rcall	.+786    	; 0x1b76 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    1864:	87 e7       	ldi	r24, 0x77	; 119
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	cf d1       	rcall	.+926    	; 0x1c08 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    186a:	e0 91 55 02 	lds	r30, 0x0255
    186e:	f0 91 56 02 	lds	r31, 0x0256
    1872:	04 80       	ldd	r0, Z+4	; 0x04
    1874:	f5 81       	ldd	r31, Z+5	; 0x05
    1876:	e0 2d       	mov	r30, r0
    1878:	f0 93 56 02 	sts	0x0256, r31
    187c:	e0 93 55 02 	sts	0x0255, r30
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    1880:	21 96       	adiw	r28, 0x01	; 1
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	c8 17       	cp	r28, r24
    1888:	d9 07       	cpc	r29, r25
    188a:	7c f2       	brlt	.-98     	; 0x182a <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    188c:	4e d5       	rcall	.+2716   	; 0x232a <timer_check_flag>
    188e:	88 23       	and	r24, r24
    1890:	51 f0       	breq	.+20     	; 0x18a6 <menu_update+0xb2>
		navigation_counter++;
    1892:	80 91 3c 02 	lds	r24, 0x023C
    1896:	8f 5f       	subi	r24, 0xFF	; 255
    1898:	80 93 3c 02 	sts	0x023C, r24
		sram_update_oled();
    189c:	51 d3       	rcall	.+1698   	; 0x1f40 <sram_update_oled>
		timer_disable_flag();
    189e:	4e d5       	rcall	.+2716   	; 0x233c <timer_disable_flag>
		sram_scroll_line(7,1);
    18a0:	61 e0       	ldi	r22, 0x01	; 1
    18a2:	87 e0       	ldi	r24, 0x07	; 7
    18a4:	03 d4       	rcall	.+2054   	; 0x20ac <sram_scroll_line>
	}
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	08 95       	ret

000018b0 <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
    18b0:	6d e3       	ldi	r22, 0x3D	; 61
    18b2:	89 e0       	ldi	r24, 0x09	; 9
    18b4:	05 d5       	rcall	.+2570   	; 0x22c0 <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	89 e0       	ldi	r24, 0x09	; 9
    18ba:	0f d3       	rcall	.+1566   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+15,y-60);
    18bc:	61 e0       	ldi	r22, 0x01	; 1
    18be:	87 e2       	ldi	r24, 0x27	; 39
    18c0:	0c d3       	rcall	.+1560   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+15,y-48);
    18c2:	6d e0       	ldi	r22, 0x0D	; 13
    18c4:	87 e2       	ldi	r24, 0x27	; 39
    18c6:	09 d3       	rcall	.+1554   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-6,y-48);
    18c8:	6d e0       	ldi	r22, 0x0D	; 13
    18ca:	82 e1       	ldi	r24, 0x12	; 18
    18cc:	06 d3       	rcall	.+1548   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-6,y-12);
    18ce:	61 e3       	ldi	r22, 0x31	; 49
    18d0:	82 e1       	ldi	r24, 0x12	; 18
    18d2:	03 d3       	rcall	.+1542   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+6,y-12);
    18d4:	61 e3       	ldi	r22, 0x31	; 49
    18d6:	8e e1       	ldi	r24, 0x1E	; 30
    18d8:	00 d3       	rcall	.+1536   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+6,y-36);
    18da:	69 e1       	ldi	r22, 0x19	; 25
    18dc:	8e e1       	ldi	r24, 0x1E	; 30
    18de:	fd d2       	rcall	.+1530   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+15,y-36);
    18e0:	69 e1       	ldi	r22, 0x19	; 25
    18e2:	87 e2       	ldi	r24, 0x27	; 39
    18e4:	fa d2       	rcall	.+1524   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+15,y);
    18e6:	6d e3       	ldi	r22, 0x3D	; 61
    18e8:	87 e2       	ldi	r24, 0x27	; 39
    18ea:	f7 d2       	rcall	.+1518   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
    18ec:	6d e3       	ldi	r22, 0x3D	; 61
    18ee:	89 e0       	ldi	r24, 0x09	; 9
    18f0:	f4 d2       	rcall	.+1512   	; 0x1eda <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    18f2:	21 e0       	ldi	r18, 0x01	; 1
    18f4:	45 e4       	ldi	r20, 0x45	; 69
    18f6:	6d e3       	ldi	r22, 0x3D	; 61
    18f8:	8b e3       	ldi	r24, 0x3B	; 59
    18fa:	e7 d4       	rcall	.+2510   	; 0x22ca <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
    18fc:	61 e0       	ldi	r22, 0x01	; 1
    18fe:	87 e7       	ldi	r24, 0x77	; 119
    1900:	df d4       	rcall	.+2494   	; 0x22c0 <sram_set_point>
	sram_draw_line(x-15,y-60);
    1902:	61 e0       	ldi	r22, 0x01	; 1
    1904:	89 e5       	ldi	r24, 0x59	; 89
    1906:	e9 d2       	rcall	.+1490   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-12,y-48);
    1908:	6d e0       	ldi	r22, 0x0D	; 13
    190a:	8c e5       	ldi	r24, 0x5C	; 92
    190c:	e6 d2       	rcall	.+1484   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+6,y-48);
    190e:	6d e0       	ldi	r22, 0x0D	; 13
    1910:	8e e6       	ldi	r24, 0x6E	; 110
    1912:	e3 d2       	rcall	.+1478   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+3,y-36);
    1914:	69 e1       	ldi	r22, 0x19	; 25
    1916:	8b e6       	ldi	r24, 0x6B	; 107
    1918:	e0 d2       	rcall	.+1472   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-9,y-36);
    191a:	69 e1       	ldi	r22, 0x19	; 25
    191c:	8f e5       	ldi	r24, 0x5F	; 95
    191e:	dd d2       	rcall	.+1466   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-6,y-24);
    1920:	65 e2       	ldi	r22, 0x25	; 37
    1922:	82 e6       	ldi	r24, 0x62	; 98
    1924:	da d2       	rcall	.+1460   	; 0x1eda <sram_draw_line>
	sram_draw_line(x,y-24);
    1926:	65 e2       	ldi	r22, 0x25	; 37
    1928:	88 e6       	ldi	r24, 0x68	; 104
    192a:	d7 d2       	rcall	.+1454   	; 0x1eda <sram_draw_line>
	sram_draw_line(x-3,y-12);
    192c:	61 e3       	ldi	r22, 0x31	; 49
    192e:	85 e6       	ldi	r24, 0x65	; 101
    1930:	d4 d2       	rcall	.+1448   	; 0x1eda <sram_draw_line>
	sram_draw_line(x,y);
    1932:	6d e3       	ldi	r22, 0x3D	; 61
    1934:	88 e6       	ldi	r24, 0x68	; 104
    1936:	d1 d2       	rcall	.+1442   	; 0x1eda <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
    1938:	61 e0       	ldi	r22, 0x01	; 1
    193a:	87 e7       	ldi	r24, 0x77	; 119
    193c:	ce d2       	rcall	.+1436   	; 0x1eda <sram_draw_line>
	
	sram_update_oled();
    193e:	00 d3       	rcall	.+1536   	; 0x1f40 <sram_update_oled>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1940:	2f ef       	ldi	r18, 0xFF	; 255
    1942:	8f ef       	ldi	r24, 0xFF	; 255
    1944:	9e e0       	ldi	r25, 0x0E	; 14
    1946:	21 50       	subi	r18, 0x01	; 1
    1948:	80 40       	sbci	r24, 0x00	; 0
    194a:	90 40       	sbci	r25, 0x00	; 0
    194c:	e1 f7       	brne	.-8      	; 0x1946 <bootscreen+0x96>
    194e:	00 c0       	rjmp	.+0      	; 0x1950 <bootscreen+0xa0>
    1950:	00 00       	nop
	_delay_ms(1000);
	sram_init();
    1952:	ff d2       	rcall	.+1534   	; 0x1f52 <sram_init>
	sram_update_oled();
    1954:	f5 c2       	rjmp	.+1514   	; 0x1f40 <sram_update_oled>
    1956:	08 95       	ret

00001958 <init_all>:
    }
    
}

void init_all(void){
	cli();
    1958:	f8 94       	cli
	init_UART();
    195a:	0e 94 aa 03 	call	0x754	; 0x754 <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE);
    195e:	85 b7       	in	r24, 0x35	; 53
    1960:	80 68       	ori	r24, 0x80	; 128
    1962:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);
    1964:	80 b7       	in	r24, 0x30	; 48
    1966:	80 62       	ori	r24, 0x20	; 32
    1968:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    196a:	7a d0       	rcall	.+244    	; 0x1a60 <oled_ini>
	sram_init();
    196c:	f2 d2       	rcall	.+1508   	; 0x1f52 <sram_init>
	bootscreen();
    196e:	a0 df       	rcall	.-192    	; 0x18b0 <bootscreen>
	
	initialize_menu();
    1970:	39 dd       	rcall	.-1422   	; 0x13e4 <initialize_menu>
	
	initialize_control_input();
    1972:	1e dd       	rcall	.-1476   	; 0x13b0 <initialize_control_input>
	
	initalize_interrupts();
    1974:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    1978:	8c e3       	ldi	r24, 0x3C	; 60
    197a:	c3 d4       	rcall	.+2438   	; 0x2302 <initialize_timer>
	
	CAN_initialize();
    197c:	0e 94 4a 02 	call	0x494	; 0x494 <CAN_initialize>
	
	sei();//enable interrupts
    1980:	78 94       	sei
    1982:	08 95       	ret

00001984 <main>:


#include "../../common_library/uart.h" //remove
int main(void)
{
	init_all();
    1984:	e9 df       	rcall	.-46     	; 0x1958 <init_all>
	while(1){
		menu_update();
    1986:	36 df       	rcall	.-404    	; 0x17f4 <menu_update>
    1988:	fe cf       	rjmp	.-4      	; 0x1986 <main+0x2>

0000198a <write_c>:
void oled_goto_column(uint8_t column){
	col = column%128;
}
void oled_pos(uint8_t row,uint8_t column){
	oled_goto_column(column);
	oled_goto_line(row);
    198a:	e0 91 3f 01 	lds	r30, 0x013F
    198e:	f0 91 40 01 	lds	r31, 0x0140
    1992:	80 83       	st	Z, r24
    1994:	08 95       	ret

00001996 <write_d>:
    1996:	e0 91 3d 01 	lds	r30, 0x013D
    199a:	f0 91 3e 01 	lds	r31, 0x013E
    199e:	80 83       	st	Z, r24
    19a0:	08 95       	ret

000019a2 <oled_home>:
    19a2:	10 92 c4 02 	sts	0x02C4, r1
    19a6:	10 92 c3 02 	sts	0x02C3, r1
    19aa:	e0 91 3f 01 	lds	r30, 0x013F
    19ae:	f0 91 40 01 	lds	r31, 0x0140
    19b2:	81 e2       	ldi	r24, 0x21	; 33
    19b4:	80 83       	st	Z, r24
    19b6:	e0 91 3f 01 	lds	r30, 0x013F
    19ba:	f0 91 40 01 	lds	r31, 0x0140
    19be:	10 82       	st	Z, r1
    19c0:	e0 91 3f 01 	lds	r30, 0x013F
    19c4:	f0 91 40 01 	lds	r31, 0x0140
    19c8:	8f e7       	ldi	r24, 0x7F	; 127
    19ca:	80 83       	st	Z, r24
    19cc:	e0 91 3f 01 	lds	r30, 0x013F
    19d0:	f0 91 40 01 	lds	r31, 0x0140
    19d4:	82 e2       	ldi	r24, 0x22	; 34
    19d6:	80 83       	st	Z, r24
    19d8:	e0 91 3f 01 	lds	r30, 0x013F
    19dc:	f0 91 40 01 	lds	r31, 0x0140
    19e0:	10 82       	st	Z, r1
    19e2:	e0 91 3f 01 	lds	r30, 0x013F
    19e6:	f0 91 40 01 	lds	r31, 0x0140
    19ea:	87 e0       	ldi	r24, 0x07	; 7
    19ec:	80 83       	st	Z, r24
    19ee:	08 95       	ret

000019f0 <oled_goto_line>:
    19f0:	cf 93       	push	r28
    19f2:	c8 2f       	mov	r28, r24
    19f4:	d6 df       	rcall	.-84     	; 0x19a2 <oled_home>
    19f6:	c0 93 c4 02 	sts	0x02C4, r28
    19fa:	8c 2f       	mov	r24, r28
    19fc:	87 70       	andi	r24, 0x07	; 7
    19fe:	89 f0       	breq	.+34     	; 0x1a22 <oled_goto_line+0x32>
    1a00:	e0 91 3f 01 	lds	r30, 0x013F
    1a04:	f0 91 40 01 	lds	r31, 0x0140
    1a08:	10 82       	st	Z, r1
    1a0a:	e0 91 3f 01 	lds	r30, 0x013F
    1a0e:	f0 91 40 01 	lds	r31, 0x0140
    1a12:	80 e1       	ldi	r24, 0x10	; 16
    1a14:	80 83       	st	Z, r24
    1a16:	c0 6b       	ori	r28, 0xB0	; 176
    1a18:	e0 91 3f 01 	lds	r30, 0x013F
    1a1c:	f0 91 40 01 	lds	r31, 0x0140
    1a20:	c0 83       	st	Z, r28
    1a22:	cf 91       	pop	r28
    1a24:	08 95       	ret

00001a26 <oled_goto_column>:
    1a26:	8f 77       	andi	r24, 0x7F	; 127
    1a28:	80 93 c3 02 	sts	0x02C3, r24
    1a2c:	08 95       	ret

00001a2e <oled_clear_line>:
}

void oled_clear_line(uint8_t line){
    1a2e:	cf 93       	push	r28
    1a30:	c8 2f       	mov	r28, r24
	oled_goto_line(line);
    1a32:	de df       	rcall	.-68     	; 0x19f0 <oled_goto_line>
	if(line < 8){
    1a34:	c8 30       	cpi	r28, 0x08	; 8
    1a36:	48 f4       	brcc	.+18     	; 0x1a4a <oled_clear_line+0x1c>
    1a38:	80 e0       	ldi	r24, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    1a3a:	e0 91 3d 01 	lds	r30, 0x013D
    1a3e:	f0 91 3e 01 	lds	r31, 0x013E
    1a42:	10 82       	st	Z, r1
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	if(line < 8){
		for(uint8_t i = 0; i < 128; i++){
    1a44:	8f 5f       	subi	r24, 0xFF	; 255
    1a46:	80 38       	cpi	r24, 0x80	; 128
    1a48:	c1 f7       	brne	.-16     	; 0x1a3a <oled_clear_line+0xc>
			write_d(0b00000000);
		}
	}
    1a4a:	cf 91       	pop	r28
    1a4c:	08 95       	ret

00001a4e <oled_reset>:
	oled_home();
}


void oled_reset(void)
{		
    1a4e:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8;i++){
    1a50:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(i);
    1a52:	8c 2f       	mov	r24, r28
    1a54:	ec df       	rcall	.-40     	; 0x1a2e <oled_clear_line>
}


void oled_reset(void)
{		
	for(uint8_t i = 0; i < 8;i++){
    1a56:	cf 5f       	subi	r28, 0xFF	; 255
    1a58:	c8 30       	cpi	r28, 0x08	; 8
    1a5a:	d9 f7       	brne	.-10     	; 0x1a52 <oled_reset+0x4>
		oled_clear_line(i);
	}
}
    1a5c:	cf 91       	pop	r28
    1a5e:	08 95       	ret

00001a60 <oled_ini>:
	
}
void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    1a60:	85 b7       	in	r24, 0x35	; 53
    1a62:	80 68       	ori	r24, 0x80	; 128
    1a64:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1a66:	80 b7       	in	r24, 0x30	; 48
    1a68:	80 62       	ori	r24, 0x20	; 32
    1a6a:	80 bf       	out	0x30, r24	; 48

uint8_t page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1a6c:	e0 91 3f 01 	lds	r30, 0x013F
    1a70:	f0 91 40 01 	lds	r31, 0x0140
    1a74:	8e ea       	ldi	r24, 0xAE	; 174
    1a76:	80 83       	st	Z, r24
    1a78:	e0 91 3f 01 	lds	r30, 0x013F
    1a7c:	f0 91 40 01 	lds	r31, 0x0140
    1a80:	81 ea       	ldi	r24, 0xA1	; 161
    1a82:	80 83       	st	Z, r24
    1a84:	e0 91 3f 01 	lds	r30, 0x013F
    1a88:	f0 91 40 01 	lds	r31, 0x0140
    1a8c:	8a ed       	ldi	r24, 0xDA	; 218
    1a8e:	80 83       	st	Z, r24
    1a90:	e0 91 3f 01 	lds	r30, 0x013F
    1a94:	f0 91 40 01 	lds	r31, 0x0140
    1a98:	82 e1       	ldi	r24, 0x12	; 18
    1a9a:	80 83       	st	Z, r24
    1a9c:	e0 91 3f 01 	lds	r30, 0x013F
    1aa0:	f0 91 40 01 	lds	r31, 0x0140
    1aa4:	88 ec       	ldi	r24, 0xC8	; 200
    1aa6:	80 83       	st	Z, r24
    1aa8:	e0 91 3f 01 	lds	r30, 0x013F
    1aac:	f0 91 40 01 	lds	r31, 0x0140
    1ab0:	88 ea       	ldi	r24, 0xA8	; 168
    1ab2:	80 83       	st	Z, r24
    1ab4:	e0 91 3f 01 	lds	r30, 0x013F
    1ab8:	f0 91 40 01 	lds	r31, 0x0140
    1abc:	8f e3       	ldi	r24, 0x3F	; 63
    1abe:	80 83       	st	Z, r24
    1ac0:	e0 91 3f 01 	lds	r30, 0x013F
    1ac4:	f0 91 40 01 	lds	r31, 0x0140
    1ac8:	85 ed       	ldi	r24, 0xD5	; 213
    1aca:	80 83       	st	Z, r24
    1acc:	e0 91 3f 01 	lds	r30, 0x013F
    1ad0:	f0 91 40 01 	lds	r31, 0x0140
    1ad4:	80 e8       	ldi	r24, 0x80	; 128
    1ad6:	80 83       	st	Z, r24
    1ad8:	e0 91 3f 01 	lds	r30, 0x013F
    1adc:	f0 91 40 01 	lds	r31, 0x0140
    1ae0:	81 e8       	ldi	r24, 0x81	; 129
    1ae2:	80 83       	st	Z, r24
    1ae4:	e0 91 3f 01 	lds	r30, 0x013F
    1ae8:	f0 91 40 01 	lds	r31, 0x0140
    1aec:	80 e5       	ldi	r24, 0x50	; 80
    1aee:	80 83       	st	Z, r24
    1af0:	e0 91 3f 01 	lds	r30, 0x013F
    1af4:	f0 91 40 01 	lds	r31, 0x0140
    1af8:	89 ed       	ldi	r24, 0xD9	; 217
    1afa:	80 83       	st	Z, r24
    1afc:	e0 91 3f 01 	lds	r30, 0x013F
    1b00:	f0 91 40 01 	lds	r31, 0x0140
    1b04:	81 e2       	ldi	r24, 0x21	; 33
    1b06:	80 83       	st	Z, r24
    1b08:	e0 91 3f 01 	lds	r30, 0x013F
    1b0c:	f0 91 40 01 	lds	r31, 0x0140
    1b10:	80 e2       	ldi	r24, 0x20	; 32
    1b12:	80 83       	st	Z, r24
    1b14:	e0 91 3f 01 	lds	r30, 0x013F
    1b18:	f0 91 40 01 	lds	r31, 0x0140
    1b1c:	10 82       	st	Z, r1
    1b1e:	e0 91 3f 01 	lds	r30, 0x013F
    1b22:	f0 91 40 01 	lds	r31, 0x0140
    1b26:	8b ed       	ldi	r24, 0xDB	; 219
    1b28:	80 83       	st	Z, r24
    1b2a:	e0 91 3f 01 	lds	r30, 0x013F
    1b2e:	f0 91 40 01 	lds	r31, 0x0140
    1b32:	80 e3       	ldi	r24, 0x30	; 48
    1b34:	80 83       	st	Z, r24
    1b36:	e0 91 3f 01 	lds	r30, 0x013F
    1b3a:	f0 91 40 01 	lds	r31, 0x0140
    1b3e:	8d ea       	ldi	r24, 0xAD	; 173
    1b40:	80 83       	st	Z, r24
    1b42:	e0 91 3f 01 	lds	r30, 0x013F
    1b46:	f0 91 40 01 	lds	r31, 0x0140
    1b4a:	10 82       	st	Z, r1
    1b4c:	e0 91 3f 01 	lds	r30, 0x013F
    1b50:	f0 91 40 01 	lds	r31, 0x0140
    1b54:	84 ea       	ldi	r24, 0xA4	; 164
    1b56:	80 83       	st	Z, r24
    1b58:	e0 91 3f 01 	lds	r30, 0x013F
    1b5c:	f0 91 40 01 	lds	r31, 0x0140
    1b60:	86 ea       	ldi	r24, 0xA6	; 166
    1b62:	80 83       	st	Z, r24
    1b64:	e0 91 3f 01 	lds	r30, 0x013F
    1b68:	f0 91 40 01 	lds	r31, 0x0140
    1b6c:	8f ea       	ldi	r24, 0xAF	; 175
    1b6e:	80 83       	st	Z, r24
	write_c(0x00);
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	oled_reset();
    1b70:	6e df       	rcall	.-292    	; 0x1a4e <oled_reset>
	oled_home();
    1b72:	17 cf       	rjmp	.-466    	; 0x19a2 <oled_home>
    1b74:	08 95       	ret

00001b76 <sram_write_char>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
    1b76:	8a 30       	cpi	r24, 0x0A	; 10
    1b78:	61 f4       	brne	.+24     	; 0x1b92 <sram_write_char+0x1c>
    1b7a:	80 91 c4 02 	lds	r24, 0x02C4
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	01 96       	adiw	r24, 0x01	; 1
    1b82:	87 70       	andi	r24, 0x07	; 7
    1b84:	90 78       	andi	r25, 0x80	; 128
    1b86:	80 93 c4 02 	sts	0x02C4, r24
    1b8a:	10 92 c3 02 	sts	0x02C3, r1
    1b8e:	81 e0       	ldi	r24, 0x01	; 1
    1b90:	08 95       	ret
    1b92:	88 23       	and	r24, r24
    1b94:	39 f1       	breq	.+78     	; 0x1be4 <sram_write_char+0x6e>
    1b96:	e8 2f       	mov	r30, r24
    1b98:	f0 e0       	ldi	r31, 0x00	; 0
    1b9a:	ee 0f       	add	r30, r30
    1b9c:	ff 1f       	adc	r31, r31
    1b9e:	ee 0f       	add	r30, r30
    1ba0:	ff 1f       	adc	r31, r31
    1ba2:	ee 0f       	add	r30, r30
    1ba4:	ff 1f       	adc	r31, r31
    1ba6:	e1 52       	subi	r30, 0x21	; 33
    1ba8:	f0 40       	sbci	r31, 0x00	; 0
    1baa:	28 e0       	ldi	r18, 0x08	; 8
    1bac:	80 91 c4 02 	lds	r24, 0x02C4
    1bb0:	a0 91 c3 02 	lds	r26, 0x02C3
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	90 e8       	ldi	r25, 0x80	; 128
    1bb8:	89 9f       	mul	r24, r25
    1bba:	a0 0d       	add	r26, r0
    1bbc:	b1 1d       	adc	r27, r1
    1bbe:	11 24       	eor	r1, r1
    1bc0:	80 91 41 01 	lds	r24, 0x0141
    1bc4:	90 91 42 01 	lds	r25, 0x0142
    1bc8:	a8 0f       	add	r26, r24
    1bca:	b9 1f       	adc	r27, r25
    1bcc:	84 91       	lpm	r24, Z
    1bce:	8c 93       	st	X, r24
    1bd0:	80 91 c3 02 	lds	r24, 0x02C3
    1bd4:	8f 5f       	subi	r24, 0xFF	; 255
    1bd6:	80 93 c3 02 	sts	0x02C3, r24
    1bda:	21 50       	subi	r18, 0x01	; 1
    1bdc:	31 96       	adiw	r30, 0x01	; 1
    1bde:	21 11       	cpse	r18, r1
    1be0:	e5 cf       	rjmp	.-54     	; 0x1bac <sram_write_char+0x36>
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <sram_write_char+0x72>
    1be4:	80 e0       	ldi	r24, 0x00	; 0
    1be6:	08 95       	ret
    1be8:	81 e0       	ldi	r24, 0x01	; 1
    1bea:	08 95       	ret

00001bec <sram_goto_line>:
    1bec:	cf 93       	push	r28
    1bee:	c8 2f       	mov	r28, r24
    1bf0:	ff de       	rcall	.-514    	; 0x19f0 <oled_goto_line>
    1bf2:	c0 93 c4 02 	sts	0x02C4, r28
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <sram_goto_column>:
    1bfa:	cf 93       	push	r28
    1bfc:	c8 2f       	mov	r28, r24
    1bfe:	13 df       	rcall	.-474    	; 0x1a26 <oled_goto_column>
    1c00:	c0 93 c3 02 	sts	0x02C3, r28
    1c04:	cf 91       	pop	r28
    1c06:	08 95       	ret

00001c08 <sram_write_string>:
    1c08:	1f 93       	push	r17
    1c0a:	cf 93       	push	r28
    1c0c:	df 93       	push	r29
    1c0e:	ec 01       	movw	r28, r24
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	11 e0       	ldi	r17, 0x01	; 1
    1c14:	18 0f       	add	r17, r24
    1c16:	fe 01       	movw	r30, r28
    1c18:	e8 0f       	add	r30, r24
    1c1a:	f1 1d       	adc	r31, r1
    1c1c:	80 81       	ld	r24, Z
    1c1e:	ab df       	rcall	.-170    	; 0x1b76 <sram_write_char>
    1c20:	88 23       	and	r24, r24
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <sram_write_string+0x20>
    1c24:	81 2f       	mov	r24, r17
    1c26:	f5 cf       	rjmp	.-22     	; 0x1c12 <sram_write_string+0xa>
    1c28:	df 91       	pop	r29
    1c2a:	cf 91       	pop	r28
    1c2c:	1f 91       	pop	r17
    1c2e:	08 95       	ret

00001c30 <sram_write_int>:
    1c30:	cf 93       	push	r28
    1c32:	18 16       	cp	r1, r24
    1c34:	19 06       	cpc	r1, r25
    1c36:	4c f4       	brge	.+18     	; 0x1c4a <sram_write_int+0x1a>
    1c38:	6a e0       	ldi	r22, 0x0A	; 10
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	60 d6       	rcall	.+3264   	; 0x28fe <__divmodhi4>
    1c3e:	c8 2f       	mov	r28, r24
    1c40:	cb 01       	movw	r24, r22
    1c42:	f6 df       	rcall	.-20     	; 0x1c30 <sram_write_int>
    1c44:	80 e3       	ldi	r24, 0x30	; 48
    1c46:	8c 0f       	add	r24, r28
    1c48:	96 df       	rcall	.-212    	; 0x1b76 <sram_write_char>
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret

00001c4e <sram_read>:
    1c4e:	87 70       	andi	r24, 0x07	; 7
    1c50:	6f 77       	andi	r22, 0x7F	; 127
    1c52:	e6 2f       	mov	r30, r22
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	90 e8       	ldi	r25, 0x80	; 128
    1c58:	89 9f       	mul	r24, r25
    1c5a:	e0 0d       	add	r30, r0
    1c5c:	f1 1d       	adc	r31, r1
    1c5e:	11 24       	eor	r1, r1
    1c60:	80 91 41 01 	lds	r24, 0x0141
    1c64:	90 91 42 01 	lds	r25, 0x0142
    1c68:	e8 0f       	add	r30, r24
    1c6a:	f9 1f       	adc	r31, r25
    1c6c:	80 81       	ld	r24, Z
    1c6e:	08 95       	ret

00001c70 <sram_write_and>:
    1c70:	87 70       	andi	r24, 0x07	; 7
    1c72:	6f 77       	andi	r22, 0x7F	; 127
    1c74:	e6 2f       	mov	r30, r22
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	90 e8       	ldi	r25, 0x80	; 128
    1c7a:	89 9f       	mul	r24, r25
    1c7c:	e0 0d       	add	r30, r0
    1c7e:	f1 1d       	adc	r31, r1
    1c80:	11 24       	eor	r1, r1
    1c82:	80 91 41 01 	lds	r24, 0x0141
    1c86:	90 91 42 01 	lds	r25, 0x0142
    1c8a:	e8 0f       	add	r30, r24
    1c8c:	f9 1f       	adc	r31, r25
    1c8e:	80 81       	ld	r24, Z
    1c90:	48 23       	and	r20, r24
    1c92:	40 83       	st	Z, r20
    1c94:	08 95       	ret

00001c96 <sram_write_or>:
    1c96:	87 70       	andi	r24, 0x07	; 7
    1c98:	6f 77       	andi	r22, 0x7F	; 127
    1c9a:	e6 2f       	mov	r30, r22
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	90 e8       	ldi	r25, 0x80	; 128
    1ca0:	89 9f       	mul	r24, r25
    1ca2:	e0 0d       	add	r30, r0
    1ca4:	f1 1d       	adc	r31, r1
    1ca6:	11 24       	eor	r1, r1
    1ca8:	80 91 41 01 	lds	r24, 0x0141
    1cac:	90 91 42 01 	lds	r25, 0x0142
    1cb0:	e8 0f       	add	r30, r24
    1cb2:	f9 1f       	adc	r31, r25
    1cb4:	80 81       	ld	r24, Z
    1cb6:	48 2b       	or	r20, r24
    1cb8:	40 83       	st	Z, r20
    1cba:	08 95       	ret

00001cbc <sram_pixel>:
    1cbc:	96 2f       	mov	r25, r22
    1cbe:	88 23       	and	r24, r24
    1cc0:	ac f0       	brlt	.+42     	; 0x1cec <sram_pixel+0x30>
    1cc2:	60 34       	cpi	r22, 0x40	; 64
    1cc4:	a8 f4       	brcc	.+42     	; 0x1cf0 <sram_pixel+0x34>
    1cc6:	46 2f       	mov	r20, r22
    1cc8:	47 70       	andi	r20, 0x07	; 7
    1cca:	21 e0       	ldi	r18, 0x01	; 1
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	b9 01       	movw	r22, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <sram_pixel+0x1a>
    1cd2:	66 0f       	add	r22, r22
    1cd4:	77 1f       	adc	r23, r23
    1cd6:	4a 95       	dec	r20
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <sram_pixel+0x16>
    1cda:	ab 01       	movw	r20, r22
    1cdc:	68 2f       	mov	r22, r24
    1cde:	89 2f       	mov	r24, r25
    1ce0:	86 95       	lsr	r24
    1ce2:	86 95       	lsr	r24
    1ce4:	86 95       	lsr	r24
    1ce6:	d7 df       	rcall	.-82     	; 0x1c96 <sram_write_or>
    1ce8:	81 e0       	ldi	r24, 0x01	; 1
    1cea:	08 95       	ret
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	08 95       	ret
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	08 95       	ret

00001cf4 <sram_draw_new_line>:
    1cf4:	2f 92       	push	r2
    1cf6:	3f 92       	push	r3
    1cf8:	4f 92       	push	r4
    1cfa:	5f 92       	push	r5
    1cfc:	6f 92       	push	r6
    1cfe:	7f 92       	push	r7
    1d00:	8f 92       	push	r8
    1d02:	9f 92       	push	r9
    1d04:	af 92       	push	r10
    1d06:	bf 92       	push	r11
    1d08:	cf 92       	push	r12
    1d0a:	df 92       	push	r13
    1d0c:	ef 92       	push	r14
    1d0e:	ff 92       	push	r15
    1d10:	0f 93       	push	r16
    1d12:	1f 93       	push	r17
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
    1d28:	38 2e       	mov	r3, r24
    1d2a:	26 2e       	mov	r2, r22
    1d2c:	04 2f       	mov	r16, r20
    1d2e:	12 2f       	mov	r17, r18
    1d30:	48 17       	cp	r20, r24
    1d32:	08 f4       	brcc	.+2      	; 0x1d36 <sram_draw_new_line+0x42>
    1d34:	90 c0       	rjmp	.+288    	; 0x1e56 <sram_draw_new_line+0x162>
    1d36:	84 17       	cp	r24, r20
    1d38:	09 f4       	brne	.+2      	; 0x1d3c <sram_draw_new_line+0x48>
    1d3a:	79 c0       	rjmp	.+242    	; 0x1e2e <sram_draw_new_line+0x13a>
    1d3c:	86 2e       	mov	r8, r22
    1d3e:	91 2c       	mov	r9, r1
    1d40:	a4 2e       	mov	r10, r20
    1d42:	b1 2c       	mov	r11, r1
    1d44:	48 2e       	mov	r4, r24
    1d46:	51 2c       	mov	r5, r1
    1d48:	62 2f       	mov	r22, r18
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	68 19       	sub	r22, r8
    1d4e:	79 09       	sbc	r23, r9
    1d50:	88 27       	eor	r24, r24
    1d52:	77 fd       	sbrc	r23, 7
    1d54:	80 95       	com	r24
    1d56:	98 2f       	mov	r25, r24
    1d58:	bb d4       	rcall	.+2422   	; 0x26d0 <__floatsisf>
    1d5a:	6b 01       	movw	r12, r22
    1d5c:	7c 01       	movw	r14, r24
    1d5e:	b5 01       	movw	r22, r10
    1d60:	64 19       	sub	r22, r4
    1d62:	75 09       	sbc	r23, r5
    1d64:	88 27       	eor	r24, r24
    1d66:	77 fd       	sbrc	r23, 7
    1d68:	80 95       	com	r24
    1d6a:	98 2f       	mov	r25, r24
    1d6c:	b1 d4       	rcall	.+2402   	; 0x26d0 <__floatsisf>
    1d6e:	9b 01       	movw	r18, r22
    1d70:	ac 01       	movw	r20, r24
    1d72:	c7 01       	movw	r24, r14
    1d74:	b6 01       	movw	r22, r12
    1d76:	11 d4       	rcall	.+2082   	; 0x259a <__divsf3>
    1d78:	6d 83       	std	Y+5, r22	; 0x05
    1d7a:	7e 83       	std	Y+6, r23	; 0x06
    1d7c:	8f 83       	std	Y+7, r24	; 0x07
    1d7e:	98 87       	std	Y+8, r25	; 0x08
    1d80:	63 2d       	mov	r22, r3
    1d82:	70 e0       	ldi	r23, 0x00	; 0
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	a1 d4       	rcall	.+2370   	; 0x26cc <__floatunsisf>
    1d8a:	6b 01       	movw	r12, r22
    1d8c:	7c 01       	movw	r14, r24
    1d8e:	b5 01       	movw	r22, r10
    1d90:	88 27       	eor	r24, r24
    1d92:	77 fd       	sbrc	r23, 7
    1d94:	80 95       	com	r24
    1d96:	98 2f       	mov	r25, r24
    1d98:	9b d4       	rcall	.+2358   	; 0x26d0 <__floatsisf>
    1d9a:	69 83       	std	Y+1, r22	; 0x01
    1d9c:	7a 83       	std	Y+2, r23	; 0x02
    1d9e:	8b 83       	std	Y+3, r24	; 0x03
    1da0:	9c 83       	std	Y+4, r25	; 0x04
    1da2:	9b 01       	movw	r18, r22
    1da4:	ac 01       	movw	r20, r24
    1da6:	c7 01       	movw	r24, r14
    1da8:	b6 01       	movw	r22, r12
    1daa:	f3 d3       	rcall	.+2022   	; 0x2592 <__cmpsf2>
    1dac:	88 23       	and	r24, r24
    1dae:	0c f0       	brlt	.+2      	; 0x1db2 <sram_draw_new_line+0xbe>
    1db0:	3e c0       	rjmp	.+124    	; 0x1e2e <sram_draw_new_line+0x13a>
    1db2:	66 24       	eor	r6, r6
    1db4:	57 fc       	sbrc	r5, 7
    1db6:	60 94       	com	r6
    1db8:	76 2c       	mov	r7, r6
    1dba:	c4 01       	movw	r24, r8
    1dbc:	aa 27       	eor	r26, r26
    1dbe:	97 fd       	sbrc	r25, 7
    1dc0:	a0 95       	com	r26
    1dc2:	ba 2f       	mov	r27, r26
    1dc4:	89 87       	std	Y+9, r24	; 0x09
    1dc6:	9a 87       	std	Y+10, r25	; 0x0a
    1dc8:	ab 87       	std	Y+11, r26	; 0x0b
    1dca:	bc 87       	std	Y+12, r27	; 0x0c
    1dcc:	c3 01       	movw	r24, r6
    1dce:	b2 01       	movw	r22, r4
    1dd0:	7f d4       	rcall	.+2302   	; 0x26d0 <__floatsisf>
    1dd2:	9b 01       	movw	r18, r22
    1dd4:	ac 01       	movw	r20, r24
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	b6 01       	movw	r22, r12
    1dda:	76 d3       	rcall	.+1772   	; 0x24c8 <__subsf3>
    1ddc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dde:	3e 81       	ldd	r19, Y+6	; 0x06
    1de0:	4f 81       	ldd	r20, Y+7	; 0x07
    1de2:	58 85       	ldd	r21, Y+8	; 0x08
    1de4:	29 d5       	rcall	.+2642   	; 0x2838 <__mulsf3>
    1de6:	4b 01       	movw	r8, r22
    1de8:	5c 01       	movw	r10, r24
    1dea:	69 85       	ldd	r22, Y+9	; 0x09
    1dec:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dee:	8b 85       	ldd	r24, Y+11	; 0x0b
    1df0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1df2:	6e d4       	rcall	.+2268   	; 0x26d0 <__floatsisf>
    1df4:	9b 01       	movw	r18, r22
    1df6:	ac 01       	movw	r20, r24
    1df8:	c5 01       	movw	r24, r10
    1dfa:	b4 01       	movw	r22, r8
    1dfc:	66 d3       	rcall	.+1740   	; 0x24ca <__addsf3>
    1dfe:	3a d4       	rcall	.+2164   	; 0x2674 <__fixunssfsi>
    1e00:	b6 2e       	mov	r11, r22
    1e02:	c7 01       	movw	r24, r14
    1e04:	b6 01       	movw	r22, r12
    1e06:	36 d4       	rcall	.+2156   	; 0x2674 <__fixunssfsi>
    1e08:	86 2f       	mov	r24, r22
    1e0a:	6b 2d       	mov	r22, r11
    1e0c:	57 df       	rcall	.-338    	; 0x1cbc <sram_pixel>
    1e0e:	2d ec       	ldi	r18, 0xCD	; 205
    1e10:	3c ec       	ldi	r19, 0xCC	; 204
    1e12:	4c ec       	ldi	r20, 0xCC	; 204
    1e14:	5d e3       	ldi	r21, 0x3D	; 61
    1e16:	c7 01       	movw	r24, r14
    1e18:	b6 01       	movw	r22, r12
    1e1a:	57 d3       	rcall	.+1710   	; 0x24ca <__addsf3>
    1e1c:	6b 01       	movw	r12, r22
    1e1e:	7c 01       	movw	r14, r24
    1e20:	29 81       	ldd	r18, Y+1	; 0x01
    1e22:	3a 81       	ldd	r19, Y+2	; 0x02
    1e24:	4b 81       	ldd	r20, Y+3	; 0x03
    1e26:	5c 81       	ldd	r21, Y+4	; 0x04
    1e28:	b4 d3       	rcall	.+1896   	; 0x2592 <__cmpsf2>
    1e2a:	88 23       	and	r24, r24
    1e2c:	7c f2       	brlt	.-98     	; 0x1dcc <sram_draw_new_line+0xd8>
    1e2e:	12 15       	cp	r17, r2
    1e30:	c8 f1       	brcs	.+114    	; 0x1ea4 <sram_draw_new_line+0x1b0>
    1e32:	30 12       	cpse	r3, r16
    1e34:	39 c0       	rjmp	.+114    	; 0x1ea8 <sram_draw_new_line+0x1b4>
    1e36:	21 16       	cp	r2, r17
    1e38:	30 f0       	brcs	.+12     	; 0x1e46 <sram_draw_new_line+0x152>
    1e3a:	36 c0       	rjmp	.+108    	; 0x1ea8 <sram_draw_new_line+0x1b4>
    1e3c:	82 2d       	mov	r24, r2
    1e3e:	21 2e       	mov	r2, r17
    1e40:	18 2f       	mov	r17, r24
    1e42:	02 2d       	mov	r16, r2
    1e44:	01 c0       	rjmp	.+2      	; 0x1e48 <sram_draw_new_line+0x154>
    1e46:	02 2d       	mov	r16, r2
    1e48:	60 2f       	mov	r22, r16
    1e4a:	83 2d       	mov	r24, r3
    1e4c:	37 df       	rcall	.-402    	; 0x1cbc <sram_pixel>
    1e4e:	0f 5f       	subi	r16, 0xFF	; 255
    1e50:	01 17       	cp	r16, r17
    1e52:	d0 f3       	brcs	.-12     	; 0x1e48 <sram_draw_new_line+0x154>
    1e54:	29 c0       	rjmp	.+82     	; 0x1ea8 <sram_draw_new_line+0x1b4>
    1e56:	82 2e       	mov	r8, r18
    1e58:	91 2c       	mov	r9, r1
    1e5a:	a8 2e       	mov	r10, r24
    1e5c:	b1 2c       	mov	r11, r1
    1e5e:	44 2e       	mov	r4, r20
    1e60:	51 2c       	mov	r5, r1
    1e62:	70 e0       	ldi	r23, 0x00	; 0
    1e64:	68 19       	sub	r22, r8
    1e66:	79 09       	sbc	r23, r9
    1e68:	88 27       	eor	r24, r24
    1e6a:	77 fd       	sbrc	r23, 7
    1e6c:	80 95       	com	r24
    1e6e:	98 2f       	mov	r25, r24
    1e70:	2f d4       	rcall	.+2142   	; 0x26d0 <__floatsisf>
    1e72:	6b 01       	movw	r12, r22
    1e74:	7c 01       	movw	r14, r24
    1e76:	b5 01       	movw	r22, r10
    1e78:	64 19       	sub	r22, r4
    1e7a:	75 09       	sbc	r23, r5
    1e7c:	88 27       	eor	r24, r24
    1e7e:	77 fd       	sbrc	r23, 7
    1e80:	80 95       	com	r24
    1e82:	98 2f       	mov	r25, r24
    1e84:	25 d4       	rcall	.+2122   	; 0x26d0 <__floatsisf>
    1e86:	9b 01       	movw	r18, r22
    1e88:	ac 01       	movw	r20, r24
    1e8a:	c7 01       	movw	r24, r14
    1e8c:	b6 01       	movw	r22, r12
    1e8e:	85 d3       	rcall	.+1802   	; 0x259a <__divsf3>
    1e90:	6d 83       	std	Y+5, r22	; 0x05
    1e92:	7e 83       	std	Y+6, r23	; 0x06
    1e94:	8f 83       	std	Y+7, r24	; 0x07
    1e96:	98 87       	std	Y+8, r25	; 0x08
    1e98:	82 2d       	mov	r24, r2
    1e9a:	21 2e       	mov	r2, r17
    1e9c:	18 2f       	mov	r17, r24
    1e9e:	30 2e       	mov	r3, r16
    1ea0:	0a 2d       	mov	r16, r10
    1ea2:	6e cf       	rjmp	.-292    	; 0x1d80 <sram_draw_new_line+0x8c>
    1ea4:	30 16       	cp	r3, r16
    1ea6:	51 f2       	breq	.-108    	; 0x1e3c <sram_draw_new_line+0x148>
    1ea8:	2c 96       	adiw	r28, 0x0c	; 12
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	df 91       	pop	r29
    1eb6:	cf 91       	pop	r28
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	3f 90       	pop	r3
    1ed6:	2f 90       	pop	r2
    1ed8:	08 95       	ret

00001eda <sram_draw_line>:
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	d8 2f       	mov	r29, r24
    1ee0:	c6 2f       	mov	r28, r22
    1ee2:	26 2f       	mov	r18, r22
    1ee4:	48 2f       	mov	r20, r24
    1ee6:	60 91 cd 02 	lds	r22, 0x02CD
    1eea:	80 91 ce 02 	lds	r24, 0x02CE
    1eee:	02 df       	rcall	.-508    	; 0x1cf4 <sram_draw_new_line>
    1ef0:	d0 93 ce 02 	sts	0x02CE, r29
    1ef4:	c0 93 cd 02 	sts	0x02CD, r28
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    1efc:	08 95       	ret

00001efe <sram_push_line>:
    1efe:	0f 93       	push	r16
    1f00:	1f 93       	push	r17
    1f02:	cf 93       	push	r28
    1f04:	df 93       	push	r29
    1f06:	08 2f       	mov	r16, r24
    1f08:	71 de       	rcall	.-798    	; 0x1bec <sram_goto_line>
    1f0a:	80 e8       	ldi	r24, 0x80	; 128
    1f0c:	08 9f       	mul	r16, r24
    1f0e:	80 01       	movw	r16, r0
    1f10:	11 24       	eor	r1, r1
    1f12:	c0 e8       	ldi	r28, 0x80	; 128
    1f14:	d0 e0       	ldi	r29, 0x00	; 0
    1f16:	00 58       	subi	r16, 0x80	; 128
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	c8 01       	movw	r24, r16
    1f1c:	8c 1b       	sub	r24, r28
    1f1e:	9d 0b       	sbc	r25, r29
    1f20:	e0 91 41 01 	lds	r30, 0x0141
    1f24:	f0 91 42 01 	lds	r31, 0x0142
    1f28:	e8 0f       	add	r30, r24
    1f2a:	f9 1f       	adc	r31, r25
    1f2c:	80 81       	ld	r24, Z
    1f2e:	33 dd       	rcall	.-1434   	; 0x1996 <write_d>
    1f30:	21 97       	sbiw	r28, 0x01	; 1
    1f32:	20 97       	sbiw	r28, 0x00	; 0
    1f34:	91 f7       	brne	.-28     	; 0x1f1a <sram_push_line+0x1c>
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	1f 91       	pop	r17
    1f3c:	0f 91       	pop	r16
    1f3e:	08 95       	ret

00001f40 <sram_update_oled>:
    1f40:	cf 93       	push	r28
    1f42:	c0 e0       	ldi	r28, 0x00	; 0
    1f44:	8c 2f       	mov	r24, r28
    1f46:	db df       	rcall	.-74     	; 0x1efe <sram_push_line>
    1f48:	cf 5f       	subi	r28, 0xFF	; 255
    1f4a:	c8 30       	cpi	r28, 0x08	; 8
    1f4c:	d9 f7       	brne	.-10     	; 0x1f44 <sram_update_oled+0x4>
    1f4e:	cf 91       	pop	r28
    1f50:	08 95       	ret

00001f52 <sram_init>:
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	b0 e8       	ldi	r27, 0x80	; 128
    1f58:	a0 e0       	ldi	r26, 0x00	; 0
    1f5a:	11 c0       	rjmp	.+34     	; 0x1f7e <sram_init+0x2c>
    1f5c:	a9 01       	movw	r20, r18
    1f5e:	48 1b       	sub	r20, r24
    1f60:	59 0b       	sbc	r21, r25
    1f62:	e0 91 41 01 	lds	r30, 0x0141
    1f66:	f0 91 42 01 	lds	r31, 0x0142
    1f6a:	e4 0f       	add	r30, r20
    1f6c:	f5 1f       	adc	r31, r21
    1f6e:	10 82       	st	Z, r1
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	99 f7       	brne	.-26     	; 0x1f5c <sram_init+0xa>
    1f76:	21 15       	cp	r18, r1
    1f78:	84 e0       	ldi	r24, 0x04	; 4
    1f7a:	38 07       	cpc	r19, r24
    1f7c:	29 f0       	breq	.+10     	; 0x1f88 <sram_init+0x36>
    1f7e:	8b 2f       	mov	r24, r27
    1f80:	9a 2f       	mov	r25, r26
    1f82:	20 58       	subi	r18, 0x80	; 128
    1f84:	3f 4f       	sbci	r19, 0xFF	; 255
    1f86:	ea cf       	rjmp	.-44     	; 0x1f5c <sram_init+0xa>
    1f88:	10 92 c4 02 	sts	0x02C4, r1
    1f8c:	10 92 c3 02 	sts	0x02C3, r1
    1f90:	d7 cf       	rjmp	.-82     	; 0x1f40 <sram_update_oled>
    1f92:	08 95       	ret

00001f94 <sram_clear_line>:
    1f94:	cf 93       	push	r28
    1f96:	c8 2f       	mov	r28, r24
    1f98:	2b dd       	rcall	.-1450   	; 0x19f0 <oled_goto_line>
    1f9a:	c8 30       	cpi	r28, 0x08	; 8
    1f9c:	b8 f4       	brcc	.+46     	; 0x1fcc <sram_clear_line+0x38>
    1f9e:	20 e8       	ldi	r18, 0x80	; 128
    1fa0:	c2 9f       	mul	r28, r18
    1fa2:	c0 01       	movw	r24, r0
    1fa4:	11 24       	eor	r1, r1
    1fa6:	20 e8       	ldi	r18, 0x80	; 128
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	80 58       	subi	r24, 0x80	; 128
    1fac:	9f 4f       	sbci	r25, 0xFF	; 255
    1fae:	ac 01       	movw	r20, r24
    1fb0:	42 1b       	sub	r20, r18
    1fb2:	53 0b       	sbc	r21, r19
    1fb4:	e0 91 41 01 	lds	r30, 0x0141
    1fb8:	f0 91 42 01 	lds	r31, 0x0142
    1fbc:	e4 0f       	add	r30, r20
    1fbe:	f5 1f       	adc	r31, r21
    1fc0:	10 82       	st	Z, r1
    1fc2:	21 50       	subi	r18, 0x01	; 1
    1fc4:	31 09       	sbc	r19, r1
    1fc6:	21 15       	cp	r18, r1
    1fc8:	31 05       	cpc	r19, r1
    1fca:	89 f7       	brne	.-30     	; 0x1fae <sram_clear_line+0x1a>
    1fcc:	cf 91       	pop	r28
    1fce:	08 95       	ret

00001fd0 <sram_scroll_horizontally>:
    1fd0:	ef 92       	push	r14
    1fd2:	ff 92       	push	r15
    1fd4:	0f 93       	push	r16
    1fd6:	1f 93       	push	r17
    1fd8:	cf 93       	push	r28
    1fda:	df 93       	push	r29
    1fdc:	22 23       	and	r18, r18
    1fde:	09 f4       	brne	.+2      	; 0x1fe2 <sram_scroll_horizontally+0x12>
    1fe0:	50 c0       	rjmp	.+160    	; 0x2082 <sram_scroll_horizontally+0xb2>
    1fe2:	a0 91 41 01 	lds	r26, 0x0141
    1fe6:	b0 91 42 01 	lds	r27, 0x0142
    1fea:	90 e8       	ldi	r25, 0x80	; 128
    1fec:	89 9f       	mul	r24, r25
    1fee:	a0 0d       	add	r26, r0
    1ff0:	b1 1d       	adc	r27, r1
    1ff2:	11 24       	eor	r1, r1
    1ff4:	65 ec       	ldi	r22, 0xC5	; 197
    1ff6:	72 e0       	ldi	r23, 0x02	; 2
    1ff8:	fb 01       	movw	r30, r22
    1ffa:	9d 91       	ld	r25, X+
    1ffc:	91 93       	st	Z+, r25
    1ffe:	9e 2f       	mov	r25, r30
    2000:	96 1b       	sub	r25, r22
    2002:	92 17       	cp	r25, r18
    2004:	d0 f3       	brcs	.-12     	; 0x1ffa <sram_scroll_horizontally+0x2a>
    2006:	a2 2f       	mov	r26, r18
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	c0 e8       	ldi	r28, 0x80	; 128
    200c:	d0 e0       	ldi	r29, 0x00	; 0
    200e:	7e 01       	movw	r14, r28
    2010:	ea 1a       	sub	r14, r26
    2012:	fb 0a       	sbc	r15, r27
    2014:	1e 14       	cp	r1, r14
    2016:	1f 04       	cpc	r1, r15
    2018:	d4 f1       	brlt	.+116    	; 0x208e <sram_scroll_horizontally+0xbe>
    201a:	18 c0       	rjmp	.+48     	; 0x204c <sram_scroll_horizontally+0x7c>
    201c:	60 91 41 01 	lds	r22, 0x0141
    2020:	70 91 42 01 	lds	r23, 0x0142
    2024:	40 0f       	add	r20, r16
    2026:	51 1f       	adc	r21, r17
    2028:	fb 01       	movw	r30, r22
    202a:	e4 0f       	add	r30, r20
    202c:	f5 1f       	adc	r31, r21
    202e:	4a 0f       	add	r20, r26
    2030:	5b 1f       	adc	r21, r27
    2032:	64 0f       	add	r22, r20
    2034:	75 1f       	adc	r23, r21
    2036:	eb 01       	movw	r28, r22
    2038:	38 81       	ld	r19, Y
    203a:	30 83       	st	Z, r19
    203c:	9f 5f       	subi	r25, 0xFF	; 255
    203e:	49 2f       	mov	r20, r25
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	4e 15       	cp	r20, r14
    2044:	5f 05       	cpc	r21, r15
    2046:	54 f3       	brlt	.-44     	; 0x201c <sram_scroll_horizontally+0x4c>
    2048:	22 23       	and	r18, r18
    204a:	49 f1       	breq	.+82     	; 0x209e <sram_scroll_horizontally+0xce>
    204c:	d0 e8       	ldi	r29, 0x80	; 128
    204e:	8d 9f       	mul	r24, r29
    2050:	a0 01       	movw	r20, r0
    2052:	11 24       	eor	r1, r1
    2054:	4a 1b       	sub	r20, r26
    2056:	5b 0b       	sbc	r21, r27
    2058:	65 ec       	ldi	r22, 0xC5	; 197
    205a:	72 e0       	ldi	r23, 0x02	; 2
    205c:	fb 01       	movw	r30, r22
    205e:	46 54       	subi	r20, 0x46	; 70
    2060:	52 40       	sbci	r21, 0x02	; 2
    2062:	ca 01       	movw	r24, r20
    2064:	8e 0f       	add	r24, r30
    2066:	9f 1f       	adc	r25, r31
    2068:	a0 91 41 01 	lds	r26, 0x0141
    206c:	b0 91 42 01 	lds	r27, 0x0142
    2070:	a8 0f       	add	r26, r24
    2072:	b9 1f       	adc	r27, r25
    2074:	81 91       	ld	r24, Z+
    2076:	8c 93       	st	X, r24
    2078:	8e 2f       	mov	r24, r30
    207a:	86 1b       	sub	r24, r22
    207c:	82 17       	cp	r24, r18
    207e:	88 f3       	brcs	.-30     	; 0x2062 <sram_scroll_horizontally+0x92>
    2080:	0e c0       	rjmp	.+28     	; 0x209e <sram_scroll_horizontally+0xce>
    2082:	68 94       	set
    2084:	ee 24       	eor	r14, r14
    2086:	e7 f8       	bld	r14, 7
    2088:	f1 2c       	mov	r15, r1
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	90 e8       	ldi	r25, 0x80	; 128
    2090:	89 9f       	mul	r24, r25
    2092:	80 01       	movw	r16, r0
    2094:	11 24       	eor	r1, r1
    2096:	40 e0       	ldi	r20, 0x00	; 0
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	bf cf       	rjmp	.-130    	; 0x201c <sram_scroll_horizontally+0x4c>
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	ff 90       	pop	r15
    20a8:	ef 90       	pop	r14
    20aa:	08 95       	ret

000020ac <sram_scroll_line>:
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	d8 2f       	mov	r29, r24
    20b2:	c6 2f       	mov	r28, r22
    20b4:	69 30       	cpi	r22, 0x09	; 9
    20b6:	18 f0       	brcs	.+6      	; 0x20be <sram_scroll_line+0x12>
    20b8:	c8 50       	subi	r28, 0x08	; 8
    20ba:	6c 2f       	mov	r22, r28
    20bc:	f7 df       	rcall	.-18     	; 0x20ac <sram_scroll_line>
    20be:	2c 2f       	mov	r18, r28
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	8d 2f       	mov	r24, r29
    20c6:	84 df       	rcall	.-248    	; 0x1fd0 <sram_scroll_horizontally>
    20c8:	df 91       	pop	r29
    20ca:	cf 91       	pop	r28
    20cc:	08 95       	ret

000020ce <sram_scroll_vertically>:
    20ce:	2f 92       	push	r2
    20d0:	3f 92       	push	r3
    20d2:	4f 92       	push	r4
    20d4:	5f 92       	push	r5
    20d6:	6f 92       	push	r6
    20d8:	7f 92       	push	r7
    20da:	8f 92       	push	r8
    20dc:	9f 92       	push	r9
    20de:	af 92       	push	r10
    20e0:	bf 92       	push	r11
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	00 d0       	rcall	.+0      	; 0x20f4 <sram_scroll_vertically+0x26>
    20f4:	00 d0       	rcall	.+0      	; 0x20f6 <sram_scroll_vertically+0x28>
    20f6:	1f 92       	push	r1
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
    20fc:	c8 2e       	mov	r12, r24
    20fe:	f6 2e       	mov	r15, r22
    2100:	24 2e       	mov	r2, r20
    2102:	29 83       	std	Y+1, r18	; 0x01
    2104:	40 2e       	mov	r4, r16
    2106:	0f 2e       	mov	r0, r31
    2108:	f7 e0       	ldi	r31, 0x07	; 7
    210a:	af 2e       	mov	r10, r31
    210c:	f0 2d       	mov	r31, r0
    210e:	51 2c       	mov	r5, r1
    2110:	61 2c       	mov	r6, r1
    2112:	71 2c       	mov	r7, r1
    2114:	81 2c       	mov	r8, r1
    2116:	10 e0       	ldi	r17, 0x00	; 0
    2118:	1a 82       	std	Y+2, r1	; 0x02
    211a:	b0 e0       	ldi	r27, 0x00	; 0
    211c:	a0 e0       	ldi	r26, 0x00	; 0
    211e:	25 2d       	mov	r18, r5
    2120:	36 2d       	mov	r19, r6
    2122:	47 2d       	mov	r20, r7
    2124:	58 2d       	mov	r21, r8
    2126:	61 2f       	mov	r22, r17
    2128:	7a 81       	ldd	r23, Y+2	; 0x02
    212a:	8b 2f       	mov	r24, r27
    212c:	9a 2f       	mov	r25, r26
    212e:	08 e0       	ldi	r16, 0x08	; 8
    2130:	15 d4       	rcall	.+2090   	; 0x295c <__ashldi3>
    2132:	52 2e       	mov	r5, r18
    2134:	63 2e       	mov	r6, r19
    2136:	74 2e       	mov	r7, r20
    2138:	85 2e       	mov	r8, r21
    213a:	16 2f       	mov	r17, r22
    213c:	b7 2e       	mov	r11, r23
    213e:	d8 2e       	mov	r13, r24
    2140:	e9 2e       	mov	r14, r25
    2142:	6c 2d       	mov	r22, r12
    2144:	8a 2d       	mov	r24, r10
    2146:	83 dd       	rcall	.-1274   	; 0x1c4e <sram_read>
    2148:	58 2a       	or	r5, r24
    214a:	ba 82       	std	Y+2, r11	; 0x02
    214c:	bd 2d       	mov	r27, r13
    214e:	ae 2d       	mov	r26, r14
    2150:	aa 94       	dec	r10
    2152:	8f ef       	ldi	r24, 0xFF	; 255
    2154:	a8 12       	cpse	r10, r24
    2156:	e3 cf       	rjmp	.-58     	; 0x211e <sram_scroll_vertically+0x50>
    2158:	31 2c       	mov	r3, r1
    215a:	ef e3       	ldi	r30, 0x3F	; 63
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	e2 19       	sub	r30, r2
    2160:	f3 09       	sbc	r31, r3
    2162:	2f ef       	ldi	r18, 0xFF	; 255
    2164:	3f ef       	ldi	r19, 0xFF	; 255
    2166:	4f ef       	ldi	r20, 0xFF	; 255
    2168:	5f ef       	ldi	r21, 0xFF	; 255
    216a:	6f ef       	ldi	r22, 0xFF	; 255
    216c:	7f ef       	ldi	r23, 0xFF	; 255
    216e:	9f ef       	ldi	r25, 0xFF	; 255
    2170:	0e 2f       	mov	r16, r30
    2172:	f4 d3       	rcall	.+2024   	; 0x295c <__ashldi3>
    2174:	ef 0d       	add	r30, r15
    2176:	f1 1d       	adc	r31, r1
    2178:	0e 2f       	mov	r16, r30
    217a:	0b d4       	rcall	.+2070   	; 0x2992 <__lshrdi3>
    217c:	0f 2d       	mov	r16, r15
    217e:	ee d3       	rcall	.+2012   	; 0x295c <__ashldi3>
    2180:	e2 2f       	mov	r30, r18
    2182:	93 2e       	mov	r9, r19
    2184:	a4 2e       	mov	r10, r20
    2186:	b5 2e       	mov	r11, r21
    2188:	6b 83       	std	Y+3, r22	; 0x03
    218a:	d7 2e       	mov	r13, r23
    218c:	e8 2e       	mov	r14, r24
    218e:	f9 2f       	mov	r31, r25
    2190:	44 20       	and	r4, r4
    2192:	d9 f0       	breq	.+54     	; 0x21ca <sram_scroll_vertically+0xfc>
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	28 1a       	sub	r2, r24
    2198:	31 08       	sbc	r3, r1
    219a:	87 fd       	sbrc	r24, 7
    219c:	33 94       	inc	r3
    219e:	25 2d       	mov	r18, r5
    21a0:	36 2d       	mov	r19, r6
    21a2:	47 2d       	mov	r20, r7
    21a4:	58 2d       	mov	r21, r8
    21a6:	61 2f       	mov	r22, r17
    21a8:	7a 81       	ldd	r23, Y+2	; 0x02
    21aa:	8b 2f       	mov	r24, r27
    21ac:	9a 2f       	mov	r25, r26
    21ae:	02 2d       	mov	r16, r2
    21b0:	f0 d3       	rcall	.+2016   	; 0x2992 <__lshrdi3>
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	09 80       	ldd	r0, Y+1	; 0x01
    21b8:	02 c0       	rjmp	.+4      	; 0x21be <sram_scroll_vertically+0xf0>
    21ba:	88 0f       	add	r24, r24
    21bc:	99 1f       	adc	r25, r25
    21be:	0a 94       	dec	r0
    21c0:	e2 f7       	brpl	.-8      	; 0x21ba <sram_scroll_vertically+0xec>
    21c2:	44 24       	eor	r4, r4
    21c4:	4a 94       	dec	r4
    21c6:	48 0e       	add	r4, r24
    21c8:	42 22       	and	r4, r18
    21ca:	25 2d       	mov	r18, r5
    21cc:	2e 23       	and	r18, r30
    21ce:	36 2d       	mov	r19, r6
    21d0:	39 21       	and	r19, r9
    21d2:	47 2d       	mov	r20, r7
    21d4:	4a 21       	and	r20, r10
    21d6:	58 2d       	mov	r21, r8
    21d8:	5b 21       	and	r21, r11
    21da:	6b 81       	ldd	r22, Y+3	; 0x03
    21dc:	61 23       	and	r22, r17
    21de:	7a 81       	ldd	r23, Y+2	; 0x02
    21e0:	7d 21       	and	r23, r13
    21e2:	8b 2f       	mov	r24, r27
    21e4:	8e 21       	and	r24, r14
    21e6:	9f 2f       	mov	r25, r31
    21e8:	9a 23       	and	r25, r26
    21ea:	09 81       	ldd	r16, Y+1	; 0x01
    21ec:	b7 d3       	rcall	.+1902   	; 0x295c <__ashldi3>
    21ee:	0f 2d       	mov	r16, r15
    21f0:	d0 d3       	rcall	.+1952   	; 0x2992 <__lshrdi3>
    21f2:	24 29       	or	r18, r4
    21f4:	b3 d3       	rcall	.+1894   	; 0x295c <__ashldi3>
    21f6:	12 2f       	mov	r17, r18
    21f8:	1e 23       	and	r17, r30
    21fa:	23 2e       	mov	r2, r19
    21fc:	29 20       	and	r2, r9
    21fe:	34 2e       	mov	r3, r20
    2200:	3a 20       	and	r3, r10
    2202:	45 2e       	mov	r4, r21
    2204:	4b 20       	and	r4, r11
    2206:	5b 80       	ldd	r5, Y+3	; 0x03
    2208:	56 22       	and	r5, r22
    220a:	67 2e       	mov	r6, r23
    220c:	6d 20       	and	r6, r13
    220e:	78 2e       	mov	r7, r24
    2210:	7e 20       	and	r7, r14
    2212:	8f 2e       	mov	r8, r31
    2214:	89 22       	and	r8, r25
    2216:	e0 95       	com	r30
    2218:	ed 83       	std	Y+5, r30	; 0x05
    221a:	90 94       	com	r9
    221c:	a0 94       	com	r10
    221e:	b0 94       	com	r11
    2220:	eb 81       	ldd	r30, Y+3	; 0x03
    2222:	e0 95       	com	r30
    2224:	e9 83       	std	Y+1, r30	; 0x01
    2226:	d0 94       	com	r13
    2228:	e0 94       	com	r14
    222a:	ff 2e       	mov	r15, r31
    222c:	f0 94       	com	r15
    222e:	1a 82       	std	Y+2, r1	; 0x02
    2230:	4d 81       	ldd	r20, Y+5	; 0x05
    2232:	6c 2d       	mov	r22, r12
    2234:	8a 81       	ldd	r24, Y+2	; 0x02
    2236:	1c dd       	rcall	.-1480   	; 0x1c70 <sram_write_and>
    2238:	2d 81       	ldd	r18, Y+5	; 0x05
    223a:	39 2d       	mov	r19, r9
    223c:	4a 2d       	mov	r20, r10
    223e:	5b 2d       	mov	r21, r11
    2240:	69 81       	ldd	r22, Y+1	; 0x01
    2242:	7d 2d       	mov	r23, r13
    2244:	8e 2d       	mov	r24, r14
    2246:	9f 2d       	mov	r25, r15
    2248:	08 e0       	ldi	r16, 0x08	; 8
    224a:	a3 d3       	rcall	.+1862   	; 0x2992 <__lshrdi3>
    224c:	2d 83       	std	Y+5, r18	; 0x05
    224e:	93 2e       	mov	r9, r19
    2250:	a4 2e       	mov	r10, r20
    2252:	b5 2e       	mov	r11, r21
    2254:	69 83       	std	Y+1, r22	; 0x01
    2256:	d7 2e       	mov	r13, r23
    2258:	e8 2e       	mov	r14, r24
    225a:	f9 2e       	mov	r15, r25
    225c:	41 2f       	mov	r20, r17
    225e:	6c 2d       	mov	r22, r12
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	19 dd       	rcall	.-1486   	; 0x1c96 <sram_write_or>
    2264:	21 2f       	mov	r18, r17
    2266:	32 2d       	mov	r19, r2
    2268:	43 2d       	mov	r20, r3
    226a:	54 2d       	mov	r21, r4
    226c:	65 2d       	mov	r22, r5
    226e:	76 2d       	mov	r23, r6
    2270:	87 2d       	mov	r24, r7
    2272:	98 2d       	mov	r25, r8
    2274:	8e d3       	rcall	.+1820   	; 0x2992 <__lshrdi3>
    2276:	12 2f       	mov	r17, r18
    2278:	23 2e       	mov	r2, r19
    227a:	34 2e       	mov	r3, r20
    227c:	45 2e       	mov	r4, r21
    227e:	56 2e       	mov	r5, r22
    2280:	67 2e       	mov	r6, r23
    2282:	78 2e       	mov	r7, r24
    2284:	89 2e       	mov	r8, r25
    2286:	fa 81       	ldd	r31, Y+2	; 0x02
    2288:	ff 5f       	subi	r31, 0xFF	; 255
    228a:	fa 83       	std	Y+2, r31	; 0x02
    228c:	f8 30       	cpi	r31, 0x08	; 8
    228e:	81 f6       	brne	.-96     	; 0x2230 <sram_scroll_vertically+0x162>
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	ff 90       	pop	r15
    22a4:	ef 90       	pop	r14
    22a6:	df 90       	pop	r13
    22a8:	cf 90       	pop	r12
    22aa:	bf 90       	pop	r11
    22ac:	af 90       	pop	r10
    22ae:	9f 90       	pop	r9
    22b0:	8f 90       	pop	r8
    22b2:	7f 90       	pop	r7
    22b4:	6f 90       	pop	r6
    22b6:	5f 90       	pop	r5
    22b8:	4f 90       	pop	r4
    22ba:	3f 90       	pop	r3
    22bc:	2f 90       	pop	r2
    22be:	08 95       	ret

000022c0 <sram_set_point>:
    22c0:	80 93 ce 02 	sts	0x02CE, r24
    22c4:	60 93 cd 02 	sts	0x02CD, r22
    22c8:	08 95       	ret

000022ca <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    22ca:	0f 93       	push	r16
    22cc:	1f 93       	push	r17
    22ce:	cf 93       	push	r28
    22d0:	df 93       	push	r29
    22d2:	c8 2f       	mov	r28, r24
    22d4:	d6 2f       	mov	r29, r22
    22d6:	14 2f       	mov	r17, r20
    22d8:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    22da:	80 93 ce 02 	sts	0x02CE, r24
	prev_y = y0;
    22de:	60 93 cd 02 	sts	0x02CD, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    22e2:	62 2f       	mov	r22, r18
    22e4:	fa dd       	rcall	.-1036   	; 0x1eda <sram_draw_line>
	sram_draw_line(x1,y1);
    22e6:	60 2f       	mov	r22, r16
    22e8:	81 2f       	mov	r24, r17
    22ea:	f7 dd       	rcall	.-1042   	; 0x1eda <sram_draw_line>
	sram_draw_line(x1,y0);
    22ec:	6d 2f       	mov	r22, r29
    22ee:	81 2f       	mov	r24, r17
    22f0:	f4 dd       	rcall	.-1048   	; 0x1eda <sram_draw_line>
	sram_draw_line(x0,y0);
    22f2:	6d 2f       	mov	r22, r29
    22f4:	8c 2f       	mov	r24, r28
    22f6:	f1 dd       	rcall	.-1054   	; 0x1eda <sram_draw_line>
}
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	08 95       	ret

00002302 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_timer_1_complete;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    2302:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    2304:	89 b7       	in	r24, 0x39	; 57
    2306:	81 60       	ori	r24, 0x01	; 1
    2308:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    230a:	83 b7       	in	r24, 0x33	; 51
    230c:	8d 60       	ori	r24, 0x0D	; 13
    230e:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	40 e0       	ldi	r20, 0x00	; 0
    2314:	50 e0       	ldi	r21, 0x00	; 0
    2316:	60 ec       	ldi	r22, 0xC0	; 192
    2318:	72 e1       	ldi	r23, 0x12	; 18
    231a:	80 e0       	ldi	r24, 0x00	; 0
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	02 d3       	rcall	.+1540   	; 0x2924 <__divmodsi4>
    2320:	21 bf       	out	0x31, r18	; 49
	FLAG_timer_1_complete = 1;//since we are initializing we want to refresh the page
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	80 93 cf 02 	sts	0x02CF, r24
    2328:	08 95       	ret

0000232a <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_timer_1_complete == 1)
    232a:	80 91 cf 02 	lds	r24, 0x02CF
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	19 f4       	brne	.+6      	; 0x2338 <timer_check_flag+0xe>
	{
		FLAG_timer_1_complete = 0;
    2332:	10 92 cf 02 	sts	0x02CF, r1
		return 1;
    2336:	08 95       	ret
	}
	return 0;
    2338:	80 e0       	ldi	r24, 0x00	; 0
}
    233a:	08 95       	ret

0000233c <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_timer_1_complete = 0;
    233c:	10 92 cf 02 	sts	0x02CF, r1
    2340:	08 95       	ret

00002342 <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    2342:	1f 92       	push	r1
    2344:	0f 92       	push	r0
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	0f 92       	push	r0
    234a:	11 24       	eor	r1, r1
    234c:	8f 93       	push	r24
	FLAG_timer_1_complete = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	80 93 cf 02 	sts	0x02CF, r24
}
    2354:	8f 91       	pop	r24
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <timer_delay>:

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
	timer_ms = (FPS*((double)timer_ms/1000));
    2364:	bc 01       	movw	r22, r24
    2366:	88 27       	eor	r24, r24
    2368:	77 fd       	sbrc	r23, 7
    236a:	80 95       	com	r24
    236c:	98 2f       	mov	r25, r24
    236e:	b0 d1       	rcall	.+864    	; 0x26d0 <__floatsisf>
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	4a e7       	ldi	r20, 0x7A	; 122
    2376:	54 e4       	ldi	r21, 0x44	; 68
    2378:	10 d1       	rcall	.+544    	; 0x259a <__divsf3>
    237a:	20 e0       	ldi	r18, 0x00	; 0
    237c:	30 e0       	ldi	r19, 0x00	; 0
    237e:	40 e7       	ldi	r20, 0x70	; 112
    2380:	52 e4       	ldi	r21, 0x42	; 66
    2382:	5a d2       	rcall	.+1204   	; 0x2838 <__mulsf3>
    2384:	72 d1       	rcall	.+740    	; 0x266a <__fixsfsi>
    2386:	eb 01       	movw	r28, r22
	while(timer_ms>0){
    2388:	1c 16       	cp	r1, r28
    238a:	1d 06       	cpc	r1, r29
    238c:	34 f4       	brge	.+12     	; 0x239a <timer_delay+0x3a>
		if (timer_check_flag())
    238e:	cd df       	rcall	.-102    	; 0x232a <timer_check_flag>
    2390:	81 11       	cpse	r24, r1
		{
			timer_ms--;
    2392:	21 97       	sbiw	r28, 0x01	; 1
	FLAG_timer_1_complete = 1;
}

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
	timer_ms = (FPS*((double)timer_ms/1000));
	while(timer_ms>0){
    2394:	1c 16       	cp	r1, r28
    2396:	1d 06       	cpc	r1, r29
    2398:	d4 f3       	brlt	.-12     	; 0x238e <timer_delay+0x2e>
		if (timer_check_flag())
		{
			timer_ms--;
		}
	}
    239a:	df 91       	pop	r29
    239c:	cf 91       	pop	r28
    239e:	08 95       	ret

000023a0 <decode_hex>:
	}
	
}

uint8_t decode_hex(char hex){
	if (hex >= 'A')
    23a0:	81 34       	cpi	r24, 0x41	; 65
    23a2:	10 f0       	brcs	.+4      	; 0x23a8 <decode_hex+0x8>
	{
		return 10 + hex - 'A';
    23a4:	87 53       	subi	r24, 0x37	; 55
    23a6:	08 95       	ret
	}else{
		return hex - '0';
    23a8:	80 53       	subi	r24, 0x30	; 48
	}
}
    23aa:	08 95       	ret

000023ac <print_highscore>:
 *  Author: pamarton
 */ 
#include "uart_exchange.h"


void print_highscore(uint8_t game){//retrives the highscore from the SD
    23ac:	7f 92       	push	r7
    23ae:	8f 92       	push	r8
    23b0:	9f 92       	push	r9
    23b2:	af 92       	push	r10
    23b4:	bf 92       	push	r11
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	2a 97       	sbiw	r28, 0x0a	; 10
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
	sram_init();
    23d6:	bd dd       	rcall	.-1158   	; 0x1f52 <sram_init>
    23d8:	0f 2e       	mov	r0, r31
    23da:	f0 e3       	ldi	r31, 0x30	; 48
    23dc:	cf 2e       	mov	r12, r31
    23de:	d1 2c       	mov	r13, r1
    23e0:	f0 2d       	mov	r31, r0
	{
		sram_goto_line(b);
		sram_write_char('1'+b);
		sram_write_char(' ');
		
		printf("S0R");
    23e2:	0f 2e       	mov	r0, r31
    23e4:	fe ed       	ldi	r31, 0xDE	; 222
    23e6:	8f 2e       	mov	r8, r31
    23e8:	f1 e0       	ldi	r31, 0x01	; 1
    23ea:	9f 2e       	mov	r9, r31
    23ec:	f0 2d       	mov	r31, r0
    23ee:	5e 01       	movw	r10, r28
    23f0:	45 e0       	ldi	r20, 0x05	; 5
    23f2:	a4 0e       	add	r10, r20
    23f4:	b1 1c       	adc	r11, r1
    23f6:	ee 24       	eor	r14, r14
    23f8:	e3 94       	inc	r14
    23fa:	f1 2c       	mov	r15, r1
    23fc:	ec 0e       	add	r14, r28
    23fe:	fd 1e       	adc	r15, r29
    2400:	88 e0       	ldi	r24, 0x08	; 8
    2402:	e8 0e       	add	r14, r24
    2404:	f1 1c       	adc	r15, r1
void print_highscore(uint8_t game){//retrives the highscore from the SD
	sram_init();
	char a[10];
	for (uint8_t b = 0; b <8; b++)
	{
		sram_goto_line(b);
    2406:	80 ed       	ldi	r24, 0xD0	; 208
    2408:	8c 0d       	add	r24, r12
    240a:	f0 db       	rcall	.-2080   	; 0x1bec <sram_goto_line>
		sram_write_char('1'+b);
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	8c 0d       	add	r24, r12
    2410:	b2 db       	rcall	.-2204   	; 0x1b76 <sram_write_char>
		sram_write_char(' ');
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	b0 db       	rcall	.-2208   	; 0x1b76 <sram_write_char>
		
		printf("S0R");
    2416:	9f 92       	push	r9
    2418:	8f 92       	push	r8
    241a:	b5 d3       	rcall	.+1898   	; 0x2b86 <printf>
		printf("%c",'0'+b);
    241c:	c6 01       	movw	r24, r12
    241e:	c4 d3       	rcall	.+1928   	; 0x2ba8 <putchar>
    2420:	0f 90       	pop	r0
    2422:	0f 90       	pop	r0
    2424:	8e 01       	movw	r16, r28
    2426:	0f 5f       	subi	r16, 0xFF	; 255
    2428:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (unsigned int i = 0; i< 4;i++)
		{
			a[i] = recieve_UART();
    242a:	0e 94 a5 03 	call	0x74a	; 0x74a <recieve_UART>
    242e:	f8 01       	movw	r30, r16
    2430:	81 93       	st	Z+, r24
    2432:	8f 01       	movw	r16, r30
		sram_write_char(' ');
		
		printf("S0R");
		printf("%c",'0'+b);
		
		for (unsigned int i = 0; i< 4;i++)
    2434:	ea 15       	cp	r30, r10
    2436:	fb 05       	cpc	r31, r11
    2438:	c1 f7       	brne	.-16     	; 0x242a <print_highscore+0x7e>
		{
			a[i] = recieve_UART();
		}
		uint16_t temp = decode_hex(a[0])<<12 | decode_hex(a[1])<<8 | decode_hex(a[2])<<4 | decode_hex(a[3]);
    243a:	89 81       	ldd	r24, Y+1	; 0x01
    243c:	b1 df       	rcall	.-158    	; 0x23a0 <decode_hex>
    243e:	78 2e       	mov	r7, r24
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	ae df       	rcall	.-164    	; 0x23a0 <decode_hex>
    2444:	08 2f       	mov	r16, r24
    2446:	8b 81       	ldd	r24, Y+3	; 0x03
    2448:	ab df       	rcall	.-170    	; 0x23a0 <decode_hex>
    244a:	18 2f       	mov	r17, r24
    244c:	8c 81       	ldd	r24, Y+4	; 0x04
    244e:	a8 df       	rcall	.-176    	; 0x23a0 <decode_hex>
    2450:	27 2d       	mov	r18, r7
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	32 2f       	mov	r19, r18
    2456:	22 27       	eor	r18, r18
    2458:	32 95       	swap	r19
    245a:	30 7f       	andi	r19, 0xF0	; 240
    245c:	30 2b       	or	r19, r16
    245e:	28 2b       	or	r18, r24
    2460:	f0 e1       	ldi	r31, 0x10	; 16
    2462:	1f 9f       	mul	r17, r31
    2464:	c0 01       	movw	r24, r0
    2466:	11 24       	eor	r1, r1
		sram_write_int(temp);
    2468:	82 2b       	or	r24, r18
    246a:	93 2b       	or	r25, r19
    246c:	e1 db       	rcall	.-2110   	; 0x1c30 <sram_write_int>
		sram_goto_column(63);
    246e:	8f e3       	ldi	r24, 0x3F	; 63
    2470:	c4 db       	rcall	.-2168   	; 0x1bfa <sram_goto_column>
    2472:	8e 01       	movw	r16, r28
    2474:	0f 5f       	subi	r16, 0xFF	; 255
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (unsigned int i = 0; i< 8;i++)
		{
			a[i] = recieve_UART();
    2478:	0e 94 a5 03 	call	0x74a	; 0x74a <recieve_UART>
    247c:	f8 01       	movw	r30, r16
    247e:	81 93       	st	Z+, r24
    2480:	8f 01       	movw	r16, r30
		}
		uint16_t temp = decode_hex(a[0])<<12 | decode_hex(a[1])<<8 | decode_hex(a[2])<<4 | decode_hex(a[3]);
		sram_write_int(temp);
		sram_goto_column(63);
		
		for (unsigned int i = 0; i< 8;i++)
    2482:	ee 15       	cp	r30, r14
    2484:	ff 05       	cpc	r31, r15
    2486:	c1 f7       	brne	.-16     	; 0x2478 <print_highscore+0xcc>
		{
			a[i] = recieve_UART();
		}
		sram_write_string(a);
    2488:	ce 01       	movw	r24, r28
    248a:	01 96       	adiw	r24, 0x01	; 1
    248c:	bd db       	rcall	.-2182   	; 0x1c08 <sram_write_string>
		sram_update_oled();
    248e:	58 dd       	rcall	.-1360   	; 0x1f40 <sram_update_oled>
    2490:	ff ef       	ldi	r31, 0xFF	; 255
    2492:	cf 1a       	sub	r12, r31
    2494:	df 0a       	sbc	r13, r31


void print_highscore(uint8_t game){//retrives the highscore from the SD
	sram_init();
	char a[10];
	for (uint8_t b = 0; b <8; b++)
    2496:	48 e3       	ldi	r20, 0x38	; 56
    2498:	c4 16       	cp	r12, r20
    249a:	d1 04       	cpc	r13, r1
    249c:	09 f0       	breq	.+2      	; 0x24a0 <print_highscore+0xf4>
    249e:	b3 cf       	rjmp	.-154    	; 0x2406 <print_highscore+0x5a>
		}
		sram_write_string(a);
		sram_update_oled();
	}
	
}
    24a0:	2a 96       	adiw	r28, 0x0a	; 10
    24a2:	0f b6       	in	r0, 0x3f	; 63
    24a4:	f8 94       	cli
    24a6:	de bf       	out	0x3e, r29	; 62
    24a8:	0f be       	out	0x3f, r0	; 63
    24aa:	cd bf       	out	0x3d, r28	; 61
    24ac:	df 91       	pop	r29
    24ae:	cf 91       	pop	r28
    24b0:	1f 91       	pop	r17
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	df 90       	pop	r13
    24ba:	cf 90       	pop	r12
    24bc:	bf 90       	pop	r11
    24be:	af 90       	pop	r10
    24c0:	9f 90       	pop	r9
    24c2:	8f 90       	pop	r8
    24c4:	7f 90       	pop	r7
    24c6:	08 95       	ret

000024c8 <__subsf3>:
    24c8:	50 58       	subi	r21, 0x80	; 128

000024ca <__addsf3>:
    24ca:	bb 27       	eor	r27, r27
    24cc:	aa 27       	eor	r26, r26
    24ce:	0e d0       	rcall	.+28     	; 0x24ec <__addsf3x>
    24d0:	75 c1       	rjmp	.+746    	; 0x27bc <__fp_round>
    24d2:	66 d1       	rcall	.+716    	; 0x27a0 <__fp_pscA>
    24d4:	30 f0       	brcs	.+12     	; 0x24e2 <__addsf3+0x18>
    24d6:	6b d1       	rcall	.+726    	; 0x27ae <__fp_pscB>
    24d8:	20 f0       	brcs	.+8      	; 0x24e2 <__addsf3+0x18>
    24da:	31 f4       	brne	.+12     	; 0x24e8 <__addsf3+0x1e>
    24dc:	9f 3f       	cpi	r25, 0xFF	; 255
    24de:	11 f4       	brne	.+4      	; 0x24e4 <__addsf3+0x1a>
    24e0:	1e f4       	brtc	.+6      	; 0x24e8 <__addsf3+0x1e>
    24e2:	5b c1       	rjmp	.+694    	; 0x279a <__fp_nan>
    24e4:	0e f4       	brtc	.+2      	; 0x24e8 <__addsf3+0x1e>
    24e6:	e0 95       	com	r30
    24e8:	e7 fb       	bst	r30, 7
    24ea:	51 c1       	rjmp	.+674    	; 0x278e <__fp_inf>

000024ec <__addsf3x>:
    24ec:	e9 2f       	mov	r30, r25
    24ee:	77 d1       	rcall	.+750    	; 0x27de <__fp_split3>
    24f0:	80 f3       	brcs	.-32     	; 0x24d2 <__addsf3+0x8>
    24f2:	ba 17       	cp	r27, r26
    24f4:	62 07       	cpc	r22, r18
    24f6:	73 07       	cpc	r23, r19
    24f8:	84 07       	cpc	r24, r20
    24fa:	95 07       	cpc	r25, r21
    24fc:	18 f0       	brcs	.+6      	; 0x2504 <__addsf3x+0x18>
    24fe:	71 f4       	brne	.+28     	; 0x251c <__addsf3x+0x30>
    2500:	9e f5       	brtc	.+102    	; 0x2568 <__addsf3x+0x7c>
    2502:	8f c1       	rjmp	.+798    	; 0x2822 <__fp_zero>
    2504:	0e f4       	brtc	.+2      	; 0x2508 <__addsf3x+0x1c>
    2506:	e0 95       	com	r30
    2508:	0b 2e       	mov	r0, r27
    250a:	ba 2f       	mov	r27, r26
    250c:	a0 2d       	mov	r26, r0
    250e:	0b 01       	movw	r0, r22
    2510:	b9 01       	movw	r22, r18
    2512:	90 01       	movw	r18, r0
    2514:	0c 01       	movw	r0, r24
    2516:	ca 01       	movw	r24, r20
    2518:	a0 01       	movw	r20, r0
    251a:	11 24       	eor	r1, r1
    251c:	ff 27       	eor	r31, r31
    251e:	59 1b       	sub	r21, r25
    2520:	99 f0       	breq	.+38     	; 0x2548 <__addsf3x+0x5c>
    2522:	59 3f       	cpi	r21, 0xF9	; 249
    2524:	50 f4       	brcc	.+20     	; 0x253a <__addsf3x+0x4e>
    2526:	50 3e       	cpi	r21, 0xE0	; 224
    2528:	68 f1       	brcs	.+90     	; 0x2584 <__addsf3x+0x98>
    252a:	1a 16       	cp	r1, r26
    252c:	f0 40       	sbci	r31, 0x00	; 0
    252e:	a2 2f       	mov	r26, r18
    2530:	23 2f       	mov	r18, r19
    2532:	34 2f       	mov	r19, r20
    2534:	44 27       	eor	r20, r20
    2536:	58 5f       	subi	r21, 0xF8	; 248
    2538:	f3 cf       	rjmp	.-26     	; 0x2520 <__addsf3x+0x34>
    253a:	46 95       	lsr	r20
    253c:	37 95       	ror	r19
    253e:	27 95       	ror	r18
    2540:	a7 95       	ror	r26
    2542:	f0 40       	sbci	r31, 0x00	; 0
    2544:	53 95       	inc	r21
    2546:	c9 f7       	brne	.-14     	; 0x253a <__addsf3x+0x4e>
    2548:	7e f4       	brtc	.+30     	; 0x2568 <__addsf3x+0x7c>
    254a:	1f 16       	cp	r1, r31
    254c:	ba 0b       	sbc	r27, r26
    254e:	62 0b       	sbc	r22, r18
    2550:	73 0b       	sbc	r23, r19
    2552:	84 0b       	sbc	r24, r20
    2554:	ba f0       	brmi	.+46     	; 0x2584 <__addsf3x+0x98>
    2556:	91 50       	subi	r25, 0x01	; 1
    2558:	a1 f0       	breq	.+40     	; 0x2582 <__addsf3x+0x96>
    255a:	ff 0f       	add	r31, r31
    255c:	bb 1f       	adc	r27, r27
    255e:	66 1f       	adc	r22, r22
    2560:	77 1f       	adc	r23, r23
    2562:	88 1f       	adc	r24, r24
    2564:	c2 f7       	brpl	.-16     	; 0x2556 <__addsf3x+0x6a>
    2566:	0e c0       	rjmp	.+28     	; 0x2584 <__addsf3x+0x98>
    2568:	ba 0f       	add	r27, r26
    256a:	62 1f       	adc	r22, r18
    256c:	73 1f       	adc	r23, r19
    256e:	84 1f       	adc	r24, r20
    2570:	48 f4       	brcc	.+18     	; 0x2584 <__addsf3x+0x98>
    2572:	87 95       	ror	r24
    2574:	77 95       	ror	r23
    2576:	67 95       	ror	r22
    2578:	b7 95       	ror	r27
    257a:	f7 95       	ror	r31
    257c:	9e 3f       	cpi	r25, 0xFE	; 254
    257e:	08 f0       	brcs	.+2      	; 0x2582 <__addsf3x+0x96>
    2580:	b3 cf       	rjmp	.-154    	; 0x24e8 <__addsf3+0x1e>
    2582:	93 95       	inc	r25
    2584:	88 0f       	add	r24, r24
    2586:	08 f0       	brcs	.+2      	; 0x258a <__addsf3x+0x9e>
    2588:	99 27       	eor	r25, r25
    258a:	ee 0f       	add	r30, r30
    258c:	97 95       	ror	r25
    258e:	87 95       	ror	r24
    2590:	08 95       	ret

00002592 <__cmpsf2>:
    2592:	d9 d0       	rcall	.+434    	; 0x2746 <__fp_cmp>
    2594:	08 f4       	brcc	.+2      	; 0x2598 <__cmpsf2+0x6>
    2596:	81 e0       	ldi	r24, 0x01	; 1
    2598:	08 95       	ret

0000259a <__divsf3>:
    259a:	0c d0       	rcall	.+24     	; 0x25b4 <__divsf3x>
    259c:	0f c1       	rjmp	.+542    	; 0x27bc <__fp_round>
    259e:	07 d1       	rcall	.+526    	; 0x27ae <__fp_pscB>
    25a0:	40 f0       	brcs	.+16     	; 0x25b2 <__divsf3+0x18>
    25a2:	fe d0       	rcall	.+508    	; 0x27a0 <__fp_pscA>
    25a4:	30 f0       	brcs	.+12     	; 0x25b2 <__divsf3+0x18>
    25a6:	21 f4       	brne	.+8      	; 0x25b0 <__divsf3+0x16>
    25a8:	5f 3f       	cpi	r21, 0xFF	; 255
    25aa:	19 f0       	breq	.+6      	; 0x25b2 <__divsf3+0x18>
    25ac:	f0 c0       	rjmp	.+480    	; 0x278e <__fp_inf>
    25ae:	51 11       	cpse	r21, r1
    25b0:	39 c1       	rjmp	.+626    	; 0x2824 <__fp_szero>
    25b2:	f3 c0       	rjmp	.+486    	; 0x279a <__fp_nan>

000025b4 <__divsf3x>:
    25b4:	14 d1       	rcall	.+552    	; 0x27de <__fp_split3>
    25b6:	98 f3       	brcs	.-26     	; 0x259e <__divsf3+0x4>

000025b8 <__divsf3_pse>:
    25b8:	99 23       	and	r25, r25
    25ba:	c9 f3       	breq	.-14     	; 0x25ae <__divsf3+0x14>
    25bc:	55 23       	and	r21, r21
    25be:	b1 f3       	breq	.-20     	; 0x25ac <__divsf3+0x12>
    25c0:	95 1b       	sub	r25, r21
    25c2:	55 0b       	sbc	r21, r21
    25c4:	bb 27       	eor	r27, r27
    25c6:	aa 27       	eor	r26, r26
    25c8:	62 17       	cp	r22, r18
    25ca:	73 07       	cpc	r23, r19
    25cc:	84 07       	cpc	r24, r20
    25ce:	38 f0       	brcs	.+14     	; 0x25de <__divsf3_pse+0x26>
    25d0:	9f 5f       	subi	r25, 0xFF	; 255
    25d2:	5f 4f       	sbci	r21, 0xFF	; 255
    25d4:	22 0f       	add	r18, r18
    25d6:	33 1f       	adc	r19, r19
    25d8:	44 1f       	adc	r20, r20
    25da:	aa 1f       	adc	r26, r26
    25dc:	a9 f3       	breq	.-22     	; 0x25c8 <__divsf3_pse+0x10>
    25de:	33 d0       	rcall	.+102    	; 0x2646 <__divsf3_pse+0x8e>
    25e0:	0e 2e       	mov	r0, r30
    25e2:	3a f0       	brmi	.+14     	; 0x25f2 <__divsf3_pse+0x3a>
    25e4:	e0 e8       	ldi	r30, 0x80	; 128
    25e6:	30 d0       	rcall	.+96     	; 0x2648 <__divsf3_pse+0x90>
    25e8:	91 50       	subi	r25, 0x01	; 1
    25ea:	50 40       	sbci	r21, 0x00	; 0
    25ec:	e6 95       	lsr	r30
    25ee:	00 1c       	adc	r0, r0
    25f0:	ca f7       	brpl	.-14     	; 0x25e4 <__divsf3_pse+0x2c>
    25f2:	29 d0       	rcall	.+82     	; 0x2646 <__divsf3_pse+0x8e>
    25f4:	fe 2f       	mov	r31, r30
    25f6:	27 d0       	rcall	.+78     	; 0x2646 <__divsf3_pse+0x8e>
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	bb 1f       	adc	r27, r27
    2600:	26 17       	cp	r18, r22
    2602:	37 07       	cpc	r19, r23
    2604:	48 07       	cpc	r20, r24
    2606:	ab 07       	cpc	r26, r27
    2608:	b0 e8       	ldi	r27, 0x80	; 128
    260a:	09 f0       	breq	.+2      	; 0x260e <__divsf3_pse+0x56>
    260c:	bb 0b       	sbc	r27, r27
    260e:	80 2d       	mov	r24, r0
    2610:	bf 01       	movw	r22, r30
    2612:	ff 27       	eor	r31, r31
    2614:	93 58       	subi	r25, 0x83	; 131
    2616:	5f 4f       	sbci	r21, 0xFF	; 255
    2618:	2a f0       	brmi	.+10     	; 0x2624 <__divsf3_pse+0x6c>
    261a:	9e 3f       	cpi	r25, 0xFE	; 254
    261c:	51 05       	cpc	r21, r1
    261e:	68 f0       	brcs	.+26     	; 0x263a <__divsf3_pse+0x82>
    2620:	b6 c0       	rjmp	.+364    	; 0x278e <__fp_inf>
    2622:	00 c1       	rjmp	.+512    	; 0x2824 <__fp_szero>
    2624:	5f 3f       	cpi	r21, 0xFF	; 255
    2626:	ec f3       	brlt	.-6      	; 0x2622 <__divsf3_pse+0x6a>
    2628:	98 3e       	cpi	r25, 0xE8	; 232
    262a:	dc f3       	brlt	.-10     	; 0x2622 <__divsf3_pse+0x6a>
    262c:	86 95       	lsr	r24
    262e:	77 95       	ror	r23
    2630:	67 95       	ror	r22
    2632:	b7 95       	ror	r27
    2634:	f7 95       	ror	r31
    2636:	9f 5f       	subi	r25, 0xFF	; 255
    2638:	c9 f7       	brne	.-14     	; 0x262c <__divsf3_pse+0x74>
    263a:	88 0f       	add	r24, r24
    263c:	91 1d       	adc	r25, r1
    263e:	96 95       	lsr	r25
    2640:	87 95       	ror	r24
    2642:	97 f9       	bld	r25, 7
    2644:	08 95       	ret
    2646:	e1 e0       	ldi	r30, 0x01	; 1
    2648:	66 0f       	add	r22, r22
    264a:	77 1f       	adc	r23, r23
    264c:	88 1f       	adc	r24, r24
    264e:	bb 1f       	adc	r27, r27
    2650:	62 17       	cp	r22, r18
    2652:	73 07       	cpc	r23, r19
    2654:	84 07       	cpc	r24, r20
    2656:	ba 07       	cpc	r27, r26
    2658:	20 f0       	brcs	.+8      	; 0x2662 <__divsf3_pse+0xaa>
    265a:	62 1b       	sub	r22, r18
    265c:	73 0b       	sbc	r23, r19
    265e:	84 0b       	sbc	r24, r20
    2660:	ba 0b       	sbc	r27, r26
    2662:	ee 1f       	adc	r30, r30
    2664:	88 f7       	brcc	.-30     	; 0x2648 <__divsf3_pse+0x90>
    2666:	e0 95       	com	r30
    2668:	08 95       	ret

0000266a <__fixsfsi>:
    266a:	04 d0       	rcall	.+8      	; 0x2674 <__fixunssfsi>
    266c:	68 94       	set
    266e:	b1 11       	cpse	r27, r1
    2670:	d9 c0       	rjmp	.+434    	; 0x2824 <__fp_szero>
    2672:	08 95       	ret

00002674 <__fixunssfsi>:
    2674:	bc d0       	rcall	.+376    	; 0x27ee <__fp_splitA>
    2676:	88 f0       	brcs	.+34     	; 0x269a <__fixunssfsi+0x26>
    2678:	9f 57       	subi	r25, 0x7F	; 127
    267a:	90 f0       	brcs	.+36     	; 0x26a0 <__fixunssfsi+0x2c>
    267c:	b9 2f       	mov	r27, r25
    267e:	99 27       	eor	r25, r25
    2680:	b7 51       	subi	r27, 0x17	; 23
    2682:	a0 f0       	brcs	.+40     	; 0x26ac <__fixunssfsi+0x38>
    2684:	d1 f0       	breq	.+52     	; 0x26ba <__fixunssfsi+0x46>
    2686:	66 0f       	add	r22, r22
    2688:	77 1f       	adc	r23, r23
    268a:	88 1f       	adc	r24, r24
    268c:	99 1f       	adc	r25, r25
    268e:	1a f0       	brmi	.+6      	; 0x2696 <__fixunssfsi+0x22>
    2690:	ba 95       	dec	r27
    2692:	c9 f7       	brne	.-14     	; 0x2686 <__fixunssfsi+0x12>
    2694:	12 c0       	rjmp	.+36     	; 0x26ba <__fixunssfsi+0x46>
    2696:	b1 30       	cpi	r27, 0x01	; 1
    2698:	81 f0       	breq	.+32     	; 0x26ba <__fixunssfsi+0x46>
    269a:	c3 d0       	rcall	.+390    	; 0x2822 <__fp_zero>
    269c:	b1 e0       	ldi	r27, 0x01	; 1
    269e:	08 95       	ret
    26a0:	c0 c0       	rjmp	.+384    	; 0x2822 <__fp_zero>
    26a2:	67 2f       	mov	r22, r23
    26a4:	78 2f       	mov	r23, r24
    26a6:	88 27       	eor	r24, r24
    26a8:	b8 5f       	subi	r27, 0xF8	; 248
    26aa:	39 f0       	breq	.+14     	; 0x26ba <__fixunssfsi+0x46>
    26ac:	b9 3f       	cpi	r27, 0xF9	; 249
    26ae:	cc f3       	brlt	.-14     	; 0x26a2 <__fixunssfsi+0x2e>
    26b0:	86 95       	lsr	r24
    26b2:	77 95       	ror	r23
    26b4:	67 95       	ror	r22
    26b6:	b3 95       	inc	r27
    26b8:	d9 f7       	brne	.-10     	; 0x26b0 <__fixunssfsi+0x3c>
    26ba:	3e f4       	brtc	.+14     	; 0x26ca <__fixunssfsi+0x56>
    26bc:	90 95       	com	r25
    26be:	80 95       	com	r24
    26c0:	70 95       	com	r23
    26c2:	61 95       	neg	r22
    26c4:	7f 4f       	sbci	r23, 0xFF	; 255
    26c6:	8f 4f       	sbci	r24, 0xFF	; 255
    26c8:	9f 4f       	sbci	r25, 0xFF	; 255
    26ca:	08 95       	ret

000026cc <__floatunsisf>:
    26cc:	e8 94       	clt
    26ce:	09 c0       	rjmp	.+18     	; 0x26e2 <__floatsisf+0x12>

000026d0 <__floatsisf>:
    26d0:	97 fb       	bst	r25, 7
    26d2:	3e f4       	brtc	.+14     	; 0x26e2 <__floatsisf+0x12>
    26d4:	90 95       	com	r25
    26d6:	80 95       	com	r24
    26d8:	70 95       	com	r23
    26da:	61 95       	neg	r22
    26dc:	7f 4f       	sbci	r23, 0xFF	; 255
    26de:	8f 4f       	sbci	r24, 0xFF	; 255
    26e0:	9f 4f       	sbci	r25, 0xFF	; 255
    26e2:	99 23       	and	r25, r25
    26e4:	a9 f0       	breq	.+42     	; 0x2710 <__floatsisf+0x40>
    26e6:	f9 2f       	mov	r31, r25
    26e8:	96 e9       	ldi	r25, 0x96	; 150
    26ea:	bb 27       	eor	r27, r27
    26ec:	93 95       	inc	r25
    26ee:	f6 95       	lsr	r31
    26f0:	87 95       	ror	r24
    26f2:	77 95       	ror	r23
    26f4:	67 95       	ror	r22
    26f6:	b7 95       	ror	r27
    26f8:	f1 11       	cpse	r31, r1
    26fa:	f8 cf       	rjmp	.-16     	; 0x26ec <__floatsisf+0x1c>
    26fc:	fa f4       	brpl	.+62     	; 0x273c <__floatsisf+0x6c>
    26fe:	bb 0f       	add	r27, r27
    2700:	11 f4       	brne	.+4      	; 0x2706 <__floatsisf+0x36>
    2702:	60 ff       	sbrs	r22, 0
    2704:	1b c0       	rjmp	.+54     	; 0x273c <__floatsisf+0x6c>
    2706:	6f 5f       	subi	r22, 0xFF	; 255
    2708:	7f 4f       	sbci	r23, 0xFF	; 255
    270a:	8f 4f       	sbci	r24, 0xFF	; 255
    270c:	9f 4f       	sbci	r25, 0xFF	; 255
    270e:	16 c0       	rjmp	.+44     	; 0x273c <__floatsisf+0x6c>
    2710:	88 23       	and	r24, r24
    2712:	11 f0       	breq	.+4      	; 0x2718 <__floatsisf+0x48>
    2714:	96 e9       	ldi	r25, 0x96	; 150
    2716:	11 c0       	rjmp	.+34     	; 0x273a <__floatsisf+0x6a>
    2718:	77 23       	and	r23, r23
    271a:	21 f0       	breq	.+8      	; 0x2724 <__floatsisf+0x54>
    271c:	9e e8       	ldi	r25, 0x8E	; 142
    271e:	87 2f       	mov	r24, r23
    2720:	76 2f       	mov	r23, r22
    2722:	05 c0       	rjmp	.+10     	; 0x272e <__floatsisf+0x5e>
    2724:	66 23       	and	r22, r22
    2726:	71 f0       	breq	.+28     	; 0x2744 <__floatsisf+0x74>
    2728:	96 e8       	ldi	r25, 0x86	; 134
    272a:	86 2f       	mov	r24, r22
    272c:	70 e0       	ldi	r23, 0x00	; 0
    272e:	60 e0       	ldi	r22, 0x00	; 0
    2730:	2a f0       	brmi	.+10     	; 0x273c <__floatsisf+0x6c>
    2732:	9a 95       	dec	r25
    2734:	66 0f       	add	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	88 1f       	adc	r24, r24
    273a:	da f7       	brpl	.-10     	; 0x2732 <__floatsisf+0x62>
    273c:	88 0f       	add	r24, r24
    273e:	96 95       	lsr	r25
    2740:	87 95       	ror	r24
    2742:	97 f9       	bld	r25, 7
    2744:	08 95       	ret

00002746 <__fp_cmp>:
    2746:	99 0f       	add	r25, r25
    2748:	00 08       	sbc	r0, r0
    274a:	55 0f       	add	r21, r21
    274c:	aa 0b       	sbc	r26, r26
    274e:	e0 e8       	ldi	r30, 0x80	; 128
    2750:	fe ef       	ldi	r31, 0xFE	; 254
    2752:	16 16       	cp	r1, r22
    2754:	17 06       	cpc	r1, r23
    2756:	e8 07       	cpc	r30, r24
    2758:	f9 07       	cpc	r31, r25
    275a:	c0 f0       	brcs	.+48     	; 0x278c <__fp_cmp+0x46>
    275c:	12 16       	cp	r1, r18
    275e:	13 06       	cpc	r1, r19
    2760:	e4 07       	cpc	r30, r20
    2762:	f5 07       	cpc	r31, r21
    2764:	98 f0       	brcs	.+38     	; 0x278c <__fp_cmp+0x46>
    2766:	62 1b       	sub	r22, r18
    2768:	73 0b       	sbc	r23, r19
    276a:	84 0b       	sbc	r24, r20
    276c:	95 0b       	sbc	r25, r21
    276e:	39 f4       	brne	.+14     	; 0x277e <__fp_cmp+0x38>
    2770:	0a 26       	eor	r0, r26
    2772:	61 f0       	breq	.+24     	; 0x278c <__fp_cmp+0x46>
    2774:	23 2b       	or	r18, r19
    2776:	24 2b       	or	r18, r20
    2778:	25 2b       	or	r18, r21
    277a:	21 f4       	brne	.+8      	; 0x2784 <__fp_cmp+0x3e>
    277c:	08 95       	ret
    277e:	0a 26       	eor	r0, r26
    2780:	09 f4       	brne	.+2      	; 0x2784 <__fp_cmp+0x3e>
    2782:	a1 40       	sbci	r26, 0x01	; 1
    2784:	a6 95       	lsr	r26
    2786:	8f ef       	ldi	r24, 0xFF	; 255
    2788:	81 1d       	adc	r24, r1
    278a:	81 1d       	adc	r24, r1
    278c:	08 95       	ret

0000278e <__fp_inf>:
    278e:	97 f9       	bld	r25, 7
    2790:	9f 67       	ori	r25, 0x7F	; 127
    2792:	80 e8       	ldi	r24, 0x80	; 128
    2794:	70 e0       	ldi	r23, 0x00	; 0
    2796:	60 e0       	ldi	r22, 0x00	; 0
    2798:	08 95       	ret

0000279a <__fp_nan>:
    279a:	9f ef       	ldi	r25, 0xFF	; 255
    279c:	80 ec       	ldi	r24, 0xC0	; 192
    279e:	08 95       	ret

000027a0 <__fp_pscA>:
    27a0:	00 24       	eor	r0, r0
    27a2:	0a 94       	dec	r0
    27a4:	16 16       	cp	r1, r22
    27a6:	17 06       	cpc	r1, r23
    27a8:	18 06       	cpc	r1, r24
    27aa:	09 06       	cpc	r0, r25
    27ac:	08 95       	ret

000027ae <__fp_pscB>:
    27ae:	00 24       	eor	r0, r0
    27b0:	0a 94       	dec	r0
    27b2:	12 16       	cp	r1, r18
    27b4:	13 06       	cpc	r1, r19
    27b6:	14 06       	cpc	r1, r20
    27b8:	05 06       	cpc	r0, r21
    27ba:	08 95       	ret

000027bc <__fp_round>:
    27bc:	09 2e       	mov	r0, r25
    27be:	03 94       	inc	r0
    27c0:	00 0c       	add	r0, r0
    27c2:	11 f4       	brne	.+4      	; 0x27c8 <__fp_round+0xc>
    27c4:	88 23       	and	r24, r24
    27c6:	52 f0       	brmi	.+20     	; 0x27dc <__fp_round+0x20>
    27c8:	bb 0f       	add	r27, r27
    27ca:	40 f4       	brcc	.+16     	; 0x27dc <__fp_round+0x20>
    27cc:	bf 2b       	or	r27, r31
    27ce:	11 f4       	brne	.+4      	; 0x27d4 <__fp_round+0x18>
    27d0:	60 ff       	sbrs	r22, 0
    27d2:	04 c0       	rjmp	.+8      	; 0x27dc <__fp_round+0x20>
    27d4:	6f 5f       	subi	r22, 0xFF	; 255
    27d6:	7f 4f       	sbci	r23, 0xFF	; 255
    27d8:	8f 4f       	sbci	r24, 0xFF	; 255
    27da:	9f 4f       	sbci	r25, 0xFF	; 255
    27dc:	08 95       	ret

000027de <__fp_split3>:
    27de:	57 fd       	sbrc	r21, 7
    27e0:	90 58       	subi	r25, 0x80	; 128
    27e2:	44 0f       	add	r20, r20
    27e4:	55 1f       	adc	r21, r21
    27e6:	59 f0       	breq	.+22     	; 0x27fe <__fp_splitA+0x10>
    27e8:	5f 3f       	cpi	r21, 0xFF	; 255
    27ea:	71 f0       	breq	.+28     	; 0x2808 <__fp_splitA+0x1a>
    27ec:	47 95       	ror	r20

000027ee <__fp_splitA>:
    27ee:	88 0f       	add	r24, r24
    27f0:	97 fb       	bst	r25, 7
    27f2:	99 1f       	adc	r25, r25
    27f4:	61 f0       	breq	.+24     	; 0x280e <__fp_splitA+0x20>
    27f6:	9f 3f       	cpi	r25, 0xFF	; 255
    27f8:	79 f0       	breq	.+30     	; 0x2818 <__fp_splitA+0x2a>
    27fa:	87 95       	ror	r24
    27fc:	08 95       	ret
    27fe:	12 16       	cp	r1, r18
    2800:	13 06       	cpc	r1, r19
    2802:	14 06       	cpc	r1, r20
    2804:	55 1f       	adc	r21, r21
    2806:	f2 cf       	rjmp	.-28     	; 0x27ec <__fp_split3+0xe>
    2808:	46 95       	lsr	r20
    280a:	f1 df       	rcall	.-30     	; 0x27ee <__fp_splitA>
    280c:	08 c0       	rjmp	.+16     	; 0x281e <__fp_splitA+0x30>
    280e:	16 16       	cp	r1, r22
    2810:	17 06       	cpc	r1, r23
    2812:	18 06       	cpc	r1, r24
    2814:	99 1f       	adc	r25, r25
    2816:	f1 cf       	rjmp	.-30     	; 0x27fa <__fp_splitA+0xc>
    2818:	86 95       	lsr	r24
    281a:	71 05       	cpc	r23, r1
    281c:	61 05       	cpc	r22, r1
    281e:	08 94       	sec
    2820:	08 95       	ret

00002822 <__fp_zero>:
    2822:	e8 94       	clt

00002824 <__fp_szero>:
    2824:	bb 27       	eor	r27, r27
    2826:	66 27       	eor	r22, r22
    2828:	77 27       	eor	r23, r23
    282a:	cb 01       	movw	r24, r22
    282c:	97 f9       	bld	r25, 7
    282e:	08 95       	ret

00002830 <__gesf2>:
    2830:	8a df       	rcall	.-236    	; 0x2746 <__fp_cmp>
    2832:	08 f4       	brcc	.+2      	; 0x2836 <__gesf2+0x6>
    2834:	8f ef       	ldi	r24, 0xFF	; 255
    2836:	08 95       	ret

00002838 <__mulsf3>:
    2838:	0b d0       	rcall	.+22     	; 0x2850 <__mulsf3x>
    283a:	c0 cf       	rjmp	.-128    	; 0x27bc <__fp_round>
    283c:	b1 df       	rcall	.-158    	; 0x27a0 <__fp_pscA>
    283e:	28 f0       	brcs	.+10     	; 0x284a <__mulsf3+0x12>
    2840:	b6 df       	rcall	.-148    	; 0x27ae <__fp_pscB>
    2842:	18 f0       	brcs	.+6      	; 0x284a <__mulsf3+0x12>
    2844:	95 23       	and	r25, r21
    2846:	09 f0       	breq	.+2      	; 0x284a <__mulsf3+0x12>
    2848:	a2 cf       	rjmp	.-188    	; 0x278e <__fp_inf>
    284a:	a7 cf       	rjmp	.-178    	; 0x279a <__fp_nan>
    284c:	11 24       	eor	r1, r1
    284e:	ea cf       	rjmp	.-44     	; 0x2824 <__fp_szero>

00002850 <__mulsf3x>:
    2850:	c6 df       	rcall	.-116    	; 0x27de <__fp_split3>
    2852:	a0 f3       	brcs	.-24     	; 0x283c <__mulsf3+0x4>

00002854 <__mulsf3_pse>:
    2854:	95 9f       	mul	r25, r21
    2856:	d1 f3       	breq	.-12     	; 0x284c <__mulsf3+0x14>
    2858:	95 0f       	add	r25, r21
    285a:	50 e0       	ldi	r21, 0x00	; 0
    285c:	55 1f       	adc	r21, r21
    285e:	62 9f       	mul	r22, r18
    2860:	f0 01       	movw	r30, r0
    2862:	72 9f       	mul	r23, r18
    2864:	bb 27       	eor	r27, r27
    2866:	f0 0d       	add	r31, r0
    2868:	b1 1d       	adc	r27, r1
    286a:	63 9f       	mul	r22, r19
    286c:	aa 27       	eor	r26, r26
    286e:	f0 0d       	add	r31, r0
    2870:	b1 1d       	adc	r27, r1
    2872:	aa 1f       	adc	r26, r26
    2874:	64 9f       	mul	r22, r20
    2876:	66 27       	eor	r22, r22
    2878:	b0 0d       	add	r27, r0
    287a:	a1 1d       	adc	r26, r1
    287c:	66 1f       	adc	r22, r22
    287e:	82 9f       	mul	r24, r18
    2880:	22 27       	eor	r18, r18
    2882:	b0 0d       	add	r27, r0
    2884:	a1 1d       	adc	r26, r1
    2886:	62 1f       	adc	r22, r18
    2888:	73 9f       	mul	r23, r19
    288a:	b0 0d       	add	r27, r0
    288c:	a1 1d       	adc	r26, r1
    288e:	62 1f       	adc	r22, r18
    2890:	83 9f       	mul	r24, r19
    2892:	a0 0d       	add	r26, r0
    2894:	61 1d       	adc	r22, r1
    2896:	22 1f       	adc	r18, r18
    2898:	74 9f       	mul	r23, r20
    289a:	33 27       	eor	r19, r19
    289c:	a0 0d       	add	r26, r0
    289e:	61 1d       	adc	r22, r1
    28a0:	23 1f       	adc	r18, r19
    28a2:	84 9f       	mul	r24, r20
    28a4:	60 0d       	add	r22, r0
    28a6:	21 1d       	adc	r18, r1
    28a8:	82 2f       	mov	r24, r18
    28aa:	76 2f       	mov	r23, r22
    28ac:	6a 2f       	mov	r22, r26
    28ae:	11 24       	eor	r1, r1
    28b0:	9f 57       	subi	r25, 0x7F	; 127
    28b2:	50 40       	sbci	r21, 0x00	; 0
    28b4:	8a f0       	brmi	.+34     	; 0x28d8 <__mulsf3_pse+0x84>
    28b6:	e1 f0       	breq	.+56     	; 0x28f0 <__mulsf3_pse+0x9c>
    28b8:	88 23       	and	r24, r24
    28ba:	4a f0       	brmi	.+18     	; 0x28ce <__mulsf3_pse+0x7a>
    28bc:	ee 0f       	add	r30, r30
    28be:	ff 1f       	adc	r31, r31
    28c0:	bb 1f       	adc	r27, r27
    28c2:	66 1f       	adc	r22, r22
    28c4:	77 1f       	adc	r23, r23
    28c6:	88 1f       	adc	r24, r24
    28c8:	91 50       	subi	r25, 0x01	; 1
    28ca:	50 40       	sbci	r21, 0x00	; 0
    28cc:	a9 f7       	brne	.-22     	; 0x28b8 <__mulsf3_pse+0x64>
    28ce:	9e 3f       	cpi	r25, 0xFE	; 254
    28d0:	51 05       	cpc	r21, r1
    28d2:	70 f0       	brcs	.+28     	; 0x28f0 <__mulsf3_pse+0x9c>
    28d4:	5c cf       	rjmp	.-328    	; 0x278e <__fp_inf>
    28d6:	a6 cf       	rjmp	.-180    	; 0x2824 <__fp_szero>
    28d8:	5f 3f       	cpi	r21, 0xFF	; 255
    28da:	ec f3       	brlt	.-6      	; 0x28d6 <__mulsf3_pse+0x82>
    28dc:	98 3e       	cpi	r25, 0xE8	; 232
    28de:	dc f3       	brlt	.-10     	; 0x28d6 <__mulsf3_pse+0x82>
    28e0:	86 95       	lsr	r24
    28e2:	77 95       	ror	r23
    28e4:	67 95       	ror	r22
    28e6:	b7 95       	ror	r27
    28e8:	f7 95       	ror	r31
    28ea:	e7 95       	ror	r30
    28ec:	9f 5f       	subi	r25, 0xFF	; 255
    28ee:	c1 f7       	brne	.-16     	; 0x28e0 <__mulsf3_pse+0x8c>
    28f0:	fe 2b       	or	r31, r30
    28f2:	88 0f       	add	r24, r24
    28f4:	91 1d       	adc	r25, r1
    28f6:	96 95       	lsr	r25
    28f8:	87 95       	ror	r24
    28fa:	97 f9       	bld	r25, 7
    28fc:	08 95       	ret

000028fe <__divmodhi4>:
    28fe:	97 fb       	bst	r25, 7
    2900:	07 2e       	mov	r0, r23
    2902:	16 f4       	brtc	.+4      	; 0x2908 <__divmodhi4+0xa>
    2904:	00 94       	com	r0
    2906:	06 d0       	rcall	.+12     	; 0x2914 <__divmodhi4_neg1>
    2908:	77 fd       	sbrc	r23, 7
    290a:	08 d0       	rcall	.+16     	; 0x291c <__divmodhi4_neg2>
    290c:	5e d0       	rcall	.+188    	; 0x29ca <__udivmodhi4>
    290e:	07 fc       	sbrc	r0, 7
    2910:	05 d0       	rcall	.+10     	; 0x291c <__divmodhi4_neg2>
    2912:	3e f4       	brtc	.+14     	; 0x2922 <__divmodhi4_exit>

00002914 <__divmodhi4_neg1>:
    2914:	90 95       	com	r25
    2916:	81 95       	neg	r24
    2918:	9f 4f       	sbci	r25, 0xFF	; 255
    291a:	08 95       	ret

0000291c <__divmodhi4_neg2>:
    291c:	70 95       	com	r23
    291e:	61 95       	neg	r22
    2920:	7f 4f       	sbci	r23, 0xFF	; 255

00002922 <__divmodhi4_exit>:
    2922:	08 95       	ret

00002924 <__divmodsi4>:
    2924:	05 2e       	mov	r0, r21
    2926:	97 fb       	bst	r25, 7
    2928:	16 f4       	brtc	.+4      	; 0x292e <__divmodsi4+0xa>
    292a:	00 94       	com	r0
    292c:	0f d0       	rcall	.+30     	; 0x294c <__negsi2>
    292e:	57 fd       	sbrc	r21, 7
    2930:	05 d0       	rcall	.+10     	; 0x293c <__divmodsi4_neg2>
    2932:	5f d0       	rcall	.+190    	; 0x29f2 <__udivmodsi4>
    2934:	07 fc       	sbrc	r0, 7
    2936:	02 d0       	rcall	.+4      	; 0x293c <__divmodsi4_neg2>
    2938:	46 f4       	brtc	.+16     	; 0x294a <__divmodsi4_exit>
    293a:	08 c0       	rjmp	.+16     	; 0x294c <__negsi2>

0000293c <__divmodsi4_neg2>:
    293c:	50 95       	com	r21
    293e:	40 95       	com	r20
    2940:	30 95       	com	r19
    2942:	21 95       	neg	r18
    2944:	3f 4f       	sbci	r19, 0xFF	; 255
    2946:	4f 4f       	sbci	r20, 0xFF	; 255
    2948:	5f 4f       	sbci	r21, 0xFF	; 255

0000294a <__divmodsi4_exit>:
    294a:	08 95       	ret

0000294c <__negsi2>:
    294c:	90 95       	com	r25
    294e:	80 95       	com	r24
    2950:	70 95       	com	r23
    2952:	61 95       	neg	r22
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	8f 4f       	sbci	r24, 0xFF	; 255
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	08 95       	ret

0000295c <__ashldi3>:
    295c:	0f 93       	push	r16
    295e:	08 30       	cpi	r16, 0x08	; 8
    2960:	90 f0       	brcs	.+36     	; 0x2986 <__ashldi3+0x2a>
    2962:	98 2f       	mov	r25, r24
    2964:	87 2f       	mov	r24, r23
    2966:	76 2f       	mov	r23, r22
    2968:	65 2f       	mov	r22, r21
    296a:	54 2f       	mov	r21, r20
    296c:	43 2f       	mov	r20, r19
    296e:	32 2f       	mov	r19, r18
    2970:	22 27       	eor	r18, r18
    2972:	08 50       	subi	r16, 0x08	; 8
    2974:	f4 cf       	rjmp	.-24     	; 0x295e <__ashldi3+0x2>
    2976:	22 0f       	add	r18, r18
    2978:	33 1f       	adc	r19, r19
    297a:	44 1f       	adc	r20, r20
    297c:	55 1f       	adc	r21, r21
    297e:	66 1f       	adc	r22, r22
    2980:	77 1f       	adc	r23, r23
    2982:	88 1f       	adc	r24, r24
    2984:	99 1f       	adc	r25, r25
    2986:	0a 95       	dec	r16
    2988:	b2 f7       	brpl	.-20     	; 0x2976 <__ashldi3+0x1a>
    298a:	0f 91       	pop	r16
    298c:	08 95       	ret

0000298e <__ashrdi3>:
    298e:	97 fb       	bst	r25, 7
    2990:	10 f8       	bld	r1, 0

00002992 <__lshrdi3>:
    2992:	16 94       	lsr	r1
    2994:	00 08       	sbc	r0, r0
    2996:	0f 93       	push	r16
    2998:	08 30       	cpi	r16, 0x08	; 8
    299a:	98 f0       	brcs	.+38     	; 0x29c2 <__lshrdi3+0x30>
    299c:	08 50       	subi	r16, 0x08	; 8
    299e:	23 2f       	mov	r18, r19
    29a0:	34 2f       	mov	r19, r20
    29a2:	45 2f       	mov	r20, r21
    29a4:	56 2f       	mov	r21, r22
    29a6:	67 2f       	mov	r22, r23
    29a8:	78 2f       	mov	r23, r24
    29aa:	89 2f       	mov	r24, r25
    29ac:	90 2d       	mov	r25, r0
    29ae:	f4 cf       	rjmp	.-24     	; 0x2998 <__lshrdi3+0x6>
    29b0:	05 94       	asr	r0
    29b2:	97 95       	ror	r25
    29b4:	87 95       	ror	r24
    29b6:	77 95       	ror	r23
    29b8:	67 95       	ror	r22
    29ba:	57 95       	ror	r21
    29bc:	47 95       	ror	r20
    29be:	37 95       	ror	r19
    29c0:	27 95       	ror	r18
    29c2:	0a 95       	dec	r16
    29c4:	aa f7       	brpl	.-22     	; 0x29b0 <__lshrdi3+0x1e>
    29c6:	0f 91       	pop	r16
    29c8:	08 95       	ret

000029ca <__udivmodhi4>:
    29ca:	aa 1b       	sub	r26, r26
    29cc:	bb 1b       	sub	r27, r27
    29ce:	51 e1       	ldi	r21, 0x11	; 17
    29d0:	07 c0       	rjmp	.+14     	; 0x29e0 <__udivmodhi4_ep>

000029d2 <__udivmodhi4_loop>:
    29d2:	aa 1f       	adc	r26, r26
    29d4:	bb 1f       	adc	r27, r27
    29d6:	a6 17       	cp	r26, r22
    29d8:	b7 07       	cpc	r27, r23
    29da:	10 f0       	brcs	.+4      	; 0x29e0 <__udivmodhi4_ep>
    29dc:	a6 1b       	sub	r26, r22
    29de:	b7 0b       	sbc	r27, r23

000029e0 <__udivmodhi4_ep>:
    29e0:	88 1f       	adc	r24, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	5a 95       	dec	r21
    29e6:	a9 f7       	brne	.-22     	; 0x29d2 <__udivmodhi4_loop>
    29e8:	80 95       	com	r24
    29ea:	90 95       	com	r25
    29ec:	bc 01       	movw	r22, r24
    29ee:	cd 01       	movw	r24, r26
    29f0:	08 95       	ret

000029f2 <__udivmodsi4>:
    29f2:	a1 e2       	ldi	r26, 0x21	; 33
    29f4:	1a 2e       	mov	r1, r26
    29f6:	aa 1b       	sub	r26, r26
    29f8:	bb 1b       	sub	r27, r27
    29fa:	fd 01       	movw	r30, r26
    29fc:	0d c0       	rjmp	.+26     	; 0x2a18 <__udivmodsi4_ep>

000029fe <__udivmodsi4_loop>:
    29fe:	aa 1f       	adc	r26, r26
    2a00:	bb 1f       	adc	r27, r27
    2a02:	ee 1f       	adc	r30, r30
    2a04:	ff 1f       	adc	r31, r31
    2a06:	a2 17       	cp	r26, r18
    2a08:	b3 07       	cpc	r27, r19
    2a0a:	e4 07       	cpc	r30, r20
    2a0c:	f5 07       	cpc	r31, r21
    2a0e:	20 f0       	brcs	.+8      	; 0x2a18 <__udivmodsi4_ep>
    2a10:	a2 1b       	sub	r26, r18
    2a12:	b3 0b       	sbc	r27, r19
    2a14:	e4 0b       	sbc	r30, r20
    2a16:	f5 0b       	sbc	r31, r21

00002a18 <__udivmodsi4_ep>:
    2a18:	66 1f       	adc	r22, r22
    2a1a:	77 1f       	adc	r23, r23
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	1a 94       	dec	r1
    2a22:	69 f7       	brne	.-38     	; 0x29fe <__udivmodsi4_loop>
    2a24:	60 95       	com	r22
    2a26:	70 95       	com	r23
    2a28:	80 95       	com	r24
    2a2a:	90 95       	com	r25
    2a2c:	9b 01       	movw	r18, r22
    2a2e:	ac 01       	movw	r20, r24
    2a30:	bd 01       	movw	r22, r26
    2a32:	cf 01       	movw	r24, r30
    2a34:	08 95       	ret

00002a36 <do_rand>:
    2a36:	8f 92       	push	r8
    2a38:	9f 92       	push	r9
    2a3a:	af 92       	push	r10
    2a3c:	bf 92       	push	r11
    2a3e:	cf 92       	push	r12
    2a40:	df 92       	push	r13
    2a42:	ef 92       	push	r14
    2a44:	ff 92       	push	r15
    2a46:	cf 93       	push	r28
    2a48:	df 93       	push	r29
    2a4a:	ec 01       	movw	r28, r24
    2a4c:	68 81       	ld	r22, Y
    2a4e:	79 81       	ldd	r23, Y+1	; 0x01
    2a50:	8a 81       	ldd	r24, Y+2	; 0x02
    2a52:	9b 81       	ldd	r25, Y+3	; 0x03
    2a54:	61 15       	cp	r22, r1
    2a56:	71 05       	cpc	r23, r1
    2a58:	81 05       	cpc	r24, r1
    2a5a:	91 05       	cpc	r25, r1
    2a5c:	21 f4       	brne	.+8      	; 0x2a66 <do_rand+0x30>
    2a5e:	64 e2       	ldi	r22, 0x24	; 36
    2a60:	79 ed       	ldi	r23, 0xD9	; 217
    2a62:	8b e5       	ldi	r24, 0x5B	; 91
    2a64:	97 e0       	ldi	r25, 0x07	; 7
    2a66:	2d e1       	ldi	r18, 0x1D	; 29
    2a68:	33 ef       	ldi	r19, 0xF3	; 243
    2a6a:	41 e0       	ldi	r20, 0x01	; 1
    2a6c:	50 e0       	ldi	r21, 0x00	; 0
    2a6e:	5a df       	rcall	.-332    	; 0x2924 <__divmodsi4>
    2a70:	49 01       	movw	r8, r18
    2a72:	5a 01       	movw	r10, r20
    2a74:	9b 01       	movw	r18, r22
    2a76:	ac 01       	movw	r20, r24
    2a78:	a7 ea       	ldi	r26, 0xA7	; 167
    2a7a:	b1 e4       	ldi	r27, 0x41	; 65
    2a7c:	78 d4       	rcall	.+2288   	; 0x336e <__muluhisi3>
    2a7e:	6b 01       	movw	r12, r22
    2a80:	7c 01       	movw	r14, r24
    2a82:	ac ee       	ldi	r26, 0xEC	; 236
    2a84:	b4 ef       	ldi	r27, 0xF4	; 244
    2a86:	a5 01       	movw	r20, r10
    2a88:	94 01       	movw	r18, r8
    2a8a:	7d d4       	rcall	.+2298   	; 0x3386 <__mulohisi3>
    2a8c:	c6 0e       	add	r12, r22
    2a8e:	d7 1e       	adc	r13, r23
    2a90:	e8 1e       	adc	r14, r24
    2a92:	f9 1e       	adc	r15, r25
    2a94:	f7 fe       	sbrs	r15, 7
    2a96:	06 c0       	rjmp	.+12     	; 0x2aa4 <do_rand+0x6e>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	c8 1a       	sub	r12, r24
    2a9c:	d1 08       	sbc	r13, r1
    2a9e:	e1 08       	sbc	r14, r1
    2aa0:	80 e8       	ldi	r24, 0x80	; 128
    2aa2:	f8 0a       	sbc	r15, r24
    2aa4:	c8 82       	st	Y, r12
    2aa6:	d9 82       	std	Y+1, r13	; 0x01
    2aa8:	ea 82       	std	Y+2, r14	; 0x02
    2aaa:	fb 82       	std	Y+3, r15	; 0x03
    2aac:	c6 01       	movw	r24, r12
    2aae:	9f 77       	andi	r25, 0x7F	; 127
    2ab0:	df 91       	pop	r29
    2ab2:	cf 91       	pop	r28
    2ab4:	ff 90       	pop	r15
    2ab6:	ef 90       	pop	r14
    2ab8:	df 90       	pop	r13
    2aba:	cf 90       	pop	r12
    2abc:	bf 90       	pop	r11
    2abe:	af 90       	pop	r10
    2ac0:	9f 90       	pop	r9
    2ac2:	8f 90       	pop	r8
    2ac4:	08 95       	ret

00002ac6 <rand_r>:
    2ac6:	b7 cf       	rjmp	.-146    	; 0x2a36 <do_rand>

00002ac8 <rand>:
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	91 e0       	ldi	r25, 0x01	; 1
    2acc:	b4 cf       	rjmp	.-152    	; 0x2a36 <do_rand>

00002ace <srand>:
    2ace:	a0 e0       	ldi	r26, 0x00	; 0
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	80 93 00 01 	sts	0x0100, r24
    2ad6:	90 93 01 01 	sts	0x0101, r25
    2ada:	a0 93 02 01 	sts	0x0102, r26
    2ade:	b0 93 03 01 	sts	0x0103, r27
    2ae2:	08 95       	ret

00002ae4 <strcpy_P>:
    2ae4:	fb 01       	movw	r30, r22
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	05 90       	lpm	r0, Z+
    2aea:	0d 92       	st	X+, r0
    2aec:	00 20       	and	r0, r0
    2aee:	e1 f7       	brne	.-8      	; 0x2ae8 <strcpy_P+0x4>
    2af0:	08 95       	ret

00002af2 <fdevopen>:
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	ec 01       	movw	r28, r24
    2afc:	8b 01       	movw	r16, r22
    2afe:	00 97       	sbiw	r24, 0x00	; 0
    2b00:	31 f4       	brne	.+12     	; 0x2b0e <fdevopen+0x1c>
    2b02:	61 15       	cp	r22, r1
    2b04:	71 05       	cpc	r23, r1
    2b06:	19 f4       	brne	.+6      	; 0x2b0e <fdevopen+0x1c>
    2b08:	80 e0       	ldi	r24, 0x00	; 0
    2b0a:	90 e0       	ldi	r25, 0x00	; 0
    2b0c:	37 c0       	rjmp	.+110    	; 0x2b7c <fdevopen+0x8a>
    2b0e:	6e e0       	ldi	r22, 0x0E	; 14
    2b10:	70 e0       	ldi	r23, 0x00	; 0
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	3d d2       	rcall	.+1146   	; 0x2f92 <calloc>
    2b18:	fc 01       	movw	r30, r24
    2b1a:	00 97       	sbiw	r24, 0x00	; 0
    2b1c:	a9 f3       	breq	.-22     	; 0x2b08 <fdevopen+0x16>
    2b1e:	80 e8       	ldi	r24, 0x80	; 128
    2b20:	83 83       	std	Z+3, r24	; 0x03
    2b22:	01 15       	cp	r16, r1
    2b24:	11 05       	cpc	r17, r1
    2b26:	71 f0       	breq	.+28     	; 0x2b44 <fdevopen+0x52>
    2b28:	13 87       	std	Z+11, r17	; 0x0b
    2b2a:	02 87       	std	Z+10, r16	; 0x0a
    2b2c:	81 e8       	ldi	r24, 0x81	; 129
    2b2e:	83 83       	std	Z+3, r24	; 0x03
    2b30:	80 91 d0 02 	lds	r24, 0x02D0
    2b34:	90 91 d1 02 	lds	r25, 0x02D1
    2b38:	89 2b       	or	r24, r25
    2b3a:	21 f4       	brne	.+8      	; 0x2b44 <fdevopen+0x52>
    2b3c:	f0 93 d1 02 	sts	0x02D1, r31
    2b40:	e0 93 d0 02 	sts	0x02D0, r30
    2b44:	20 97       	sbiw	r28, 0x00	; 0
    2b46:	c9 f0       	breq	.+50     	; 0x2b7a <fdevopen+0x88>
    2b48:	d1 87       	std	Z+9, r29	; 0x09
    2b4a:	c0 87       	std	Z+8, r28	; 0x08
    2b4c:	83 81       	ldd	r24, Z+3	; 0x03
    2b4e:	82 60       	ori	r24, 0x02	; 2
    2b50:	83 83       	std	Z+3, r24	; 0x03
    2b52:	80 91 d2 02 	lds	r24, 0x02D2
    2b56:	90 91 d3 02 	lds	r25, 0x02D3
    2b5a:	89 2b       	or	r24, r25
    2b5c:	71 f4       	brne	.+28     	; 0x2b7a <fdevopen+0x88>
    2b5e:	f0 93 d3 02 	sts	0x02D3, r31
    2b62:	e0 93 d2 02 	sts	0x02D2, r30
    2b66:	80 91 d4 02 	lds	r24, 0x02D4
    2b6a:	90 91 d5 02 	lds	r25, 0x02D5
    2b6e:	89 2b       	or	r24, r25
    2b70:	21 f4       	brne	.+8      	; 0x2b7a <fdevopen+0x88>
    2b72:	f0 93 d5 02 	sts	0x02D5, r31
    2b76:	e0 93 d4 02 	sts	0x02D4, r30
    2b7a:	cf 01       	movw	r24, r30
    2b7c:	df 91       	pop	r29
    2b7e:	cf 91       	pop	r28
    2b80:	1f 91       	pop	r17
    2b82:	0f 91       	pop	r16
    2b84:	08 95       	ret

00002b86 <printf>:
    2b86:	a0 e0       	ldi	r26, 0x00	; 0
    2b88:	b0 e0       	ldi	r27, 0x00	; 0
    2b8a:	e8 ec       	ldi	r30, 0xC8	; 200
    2b8c:	f5 e1       	ldi	r31, 0x15	; 21
    2b8e:	0f c4       	rjmp	.+2078   	; 0x33ae <__prologue_saves__+0x20>
    2b90:	fe 01       	movw	r30, r28
    2b92:	35 96       	adiw	r30, 0x05	; 5
    2b94:	61 91       	ld	r22, Z+
    2b96:	71 91       	ld	r23, Z+
    2b98:	af 01       	movw	r20, r30
    2b9a:	80 91 d2 02 	lds	r24, 0x02D2
    2b9e:	90 91 d3 02 	lds	r25, 0x02D3
    2ba2:	34 d0       	rcall	.+104    	; 0x2c0c <vfprintf>
    2ba4:	e2 e0       	ldi	r30, 0x02	; 2
    2ba6:	1f c4       	rjmp	.+2110   	; 0x33e6 <__epilogue_restores__+0x20>

00002ba8 <putchar>:
    2ba8:	60 91 d2 02 	lds	r22, 0x02D2
    2bac:	70 91 d3 02 	lds	r23, 0x02D3
    2bb0:	4e c3       	rjmp	.+1692   	; 0x324e <fputc>

00002bb2 <puts>:
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	e0 91 d2 02 	lds	r30, 0x02D2
    2bbe:	f0 91 d3 02 	lds	r31, 0x02D3
    2bc2:	23 81       	ldd	r18, Z+3	; 0x03
    2bc4:	21 ff       	sbrs	r18, 1
    2bc6:	1b c0       	rjmp	.+54     	; 0x2bfe <puts+0x4c>
    2bc8:	ec 01       	movw	r28, r24
    2bca:	00 e0       	ldi	r16, 0x00	; 0
    2bcc:	10 e0       	ldi	r17, 0x00	; 0
    2bce:	89 91       	ld	r24, Y+
    2bd0:	60 91 d2 02 	lds	r22, 0x02D2
    2bd4:	70 91 d3 02 	lds	r23, 0x02D3
    2bd8:	db 01       	movw	r26, r22
    2bda:	18 96       	adiw	r26, 0x08	; 8
    2bdc:	ed 91       	ld	r30, X+
    2bde:	fc 91       	ld	r31, X
    2be0:	19 97       	sbiw	r26, 0x09	; 9
    2be2:	88 23       	and	r24, r24
    2be4:	31 f0       	breq	.+12     	; 0x2bf2 <puts+0x40>
    2be6:	09 95       	icall
    2be8:	89 2b       	or	r24, r25
    2bea:	89 f3       	breq	.-30     	; 0x2bce <puts+0x1c>
    2bec:	0f ef       	ldi	r16, 0xFF	; 255
    2bee:	1f ef       	ldi	r17, 0xFF	; 255
    2bf0:	ee cf       	rjmp	.-36     	; 0x2bce <puts+0x1c>
    2bf2:	8a e0       	ldi	r24, 0x0A	; 10
    2bf4:	09 95       	icall
    2bf6:	89 2b       	or	r24, r25
    2bf8:	11 f4       	brne	.+4      	; 0x2bfe <puts+0x4c>
    2bfa:	c8 01       	movw	r24, r16
    2bfc:	02 c0       	rjmp	.+4      	; 0x2c02 <puts+0x50>
    2bfe:	8f ef       	ldi	r24, 0xFF	; 255
    2c00:	9f ef       	ldi	r25, 0xFF	; 255
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	08 95       	ret

00002c0c <vfprintf>:
    2c0c:	ac e0       	ldi	r26, 0x0C	; 12
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	eb e0       	ldi	r30, 0x0B	; 11
    2c12:	f6 e1       	ldi	r31, 0x16	; 22
    2c14:	bc c3       	rjmp	.+1912   	; 0x338e <__prologue_saves__>
    2c16:	7c 01       	movw	r14, r24
    2c18:	6b 01       	movw	r12, r22
    2c1a:	8a 01       	movw	r16, r20
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	17 82       	std	Z+7, r1	; 0x07
    2c20:	16 82       	std	Z+6, r1	; 0x06
    2c22:	83 81       	ldd	r24, Z+3	; 0x03
    2c24:	81 ff       	sbrs	r24, 1
    2c26:	b0 c1       	rjmp	.+864    	; 0x2f88 <vfprintf+0x37c>
    2c28:	ce 01       	movw	r24, r28
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	4c 01       	movw	r8, r24
    2c2e:	f7 01       	movw	r30, r14
    2c30:	93 81       	ldd	r25, Z+3	; 0x03
    2c32:	f6 01       	movw	r30, r12
    2c34:	93 fd       	sbrc	r25, 3
    2c36:	85 91       	lpm	r24, Z+
    2c38:	93 ff       	sbrs	r25, 3
    2c3a:	81 91       	ld	r24, Z+
    2c3c:	6f 01       	movw	r12, r30
    2c3e:	88 23       	and	r24, r24
    2c40:	09 f4       	brne	.+2      	; 0x2c44 <vfprintf+0x38>
    2c42:	9e c1       	rjmp	.+828    	; 0x2f80 <vfprintf+0x374>
    2c44:	85 32       	cpi	r24, 0x25	; 37
    2c46:	39 f4       	brne	.+14     	; 0x2c56 <vfprintf+0x4a>
    2c48:	93 fd       	sbrc	r25, 3
    2c4a:	85 91       	lpm	r24, Z+
    2c4c:	93 ff       	sbrs	r25, 3
    2c4e:	81 91       	ld	r24, Z+
    2c50:	6f 01       	movw	r12, r30
    2c52:	85 32       	cpi	r24, 0x25	; 37
    2c54:	21 f4       	brne	.+8      	; 0x2c5e <vfprintf+0x52>
    2c56:	b7 01       	movw	r22, r14
    2c58:	90 e0       	ldi	r25, 0x00	; 0
    2c5a:	f9 d2       	rcall	.+1522   	; 0x324e <fputc>
    2c5c:	e8 cf       	rjmp	.-48     	; 0x2c2e <vfprintf+0x22>
    2c5e:	51 2c       	mov	r5, r1
    2c60:	31 2c       	mov	r3, r1
    2c62:	20 e0       	ldi	r18, 0x00	; 0
    2c64:	20 32       	cpi	r18, 0x20	; 32
    2c66:	a0 f4       	brcc	.+40     	; 0x2c90 <vfprintf+0x84>
    2c68:	8b 32       	cpi	r24, 0x2B	; 43
    2c6a:	69 f0       	breq	.+26     	; 0x2c86 <vfprintf+0x7a>
    2c6c:	30 f4       	brcc	.+12     	; 0x2c7a <vfprintf+0x6e>
    2c6e:	80 32       	cpi	r24, 0x20	; 32
    2c70:	59 f0       	breq	.+22     	; 0x2c88 <vfprintf+0x7c>
    2c72:	83 32       	cpi	r24, 0x23	; 35
    2c74:	69 f4       	brne	.+26     	; 0x2c90 <vfprintf+0x84>
    2c76:	20 61       	ori	r18, 0x10	; 16
    2c78:	2c c0       	rjmp	.+88     	; 0x2cd2 <vfprintf+0xc6>
    2c7a:	8d 32       	cpi	r24, 0x2D	; 45
    2c7c:	39 f0       	breq	.+14     	; 0x2c8c <vfprintf+0x80>
    2c7e:	80 33       	cpi	r24, 0x30	; 48
    2c80:	39 f4       	brne	.+14     	; 0x2c90 <vfprintf+0x84>
    2c82:	21 60       	ori	r18, 0x01	; 1
    2c84:	26 c0       	rjmp	.+76     	; 0x2cd2 <vfprintf+0xc6>
    2c86:	22 60       	ori	r18, 0x02	; 2
    2c88:	24 60       	ori	r18, 0x04	; 4
    2c8a:	23 c0       	rjmp	.+70     	; 0x2cd2 <vfprintf+0xc6>
    2c8c:	28 60       	ori	r18, 0x08	; 8
    2c8e:	21 c0       	rjmp	.+66     	; 0x2cd2 <vfprintf+0xc6>
    2c90:	27 fd       	sbrc	r18, 7
    2c92:	27 c0       	rjmp	.+78     	; 0x2ce2 <vfprintf+0xd6>
    2c94:	30 ed       	ldi	r19, 0xD0	; 208
    2c96:	38 0f       	add	r19, r24
    2c98:	3a 30       	cpi	r19, 0x0A	; 10
    2c9a:	78 f4       	brcc	.+30     	; 0x2cba <vfprintf+0xae>
    2c9c:	26 ff       	sbrs	r18, 6
    2c9e:	06 c0       	rjmp	.+12     	; 0x2cac <vfprintf+0xa0>
    2ca0:	fa e0       	ldi	r31, 0x0A	; 10
    2ca2:	5f 9e       	mul	r5, r31
    2ca4:	30 0d       	add	r19, r0
    2ca6:	11 24       	eor	r1, r1
    2ca8:	53 2e       	mov	r5, r19
    2caa:	13 c0       	rjmp	.+38     	; 0x2cd2 <vfprintf+0xc6>
    2cac:	8a e0       	ldi	r24, 0x0A	; 10
    2cae:	38 9e       	mul	r3, r24
    2cb0:	30 0d       	add	r19, r0
    2cb2:	11 24       	eor	r1, r1
    2cb4:	33 2e       	mov	r3, r19
    2cb6:	20 62       	ori	r18, 0x20	; 32
    2cb8:	0c c0       	rjmp	.+24     	; 0x2cd2 <vfprintf+0xc6>
    2cba:	8e 32       	cpi	r24, 0x2E	; 46
    2cbc:	21 f4       	brne	.+8      	; 0x2cc6 <vfprintf+0xba>
    2cbe:	26 fd       	sbrc	r18, 6
    2cc0:	5f c1       	rjmp	.+702    	; 0x2f80 <vfprintf+0x374>
    2cc2:	20 64       	ori	r18, 0x40	; 64
    2cc4:	06 c0       	rjmp	.+12     	; 0x2cd2 <vfprintf+0xc6>
    2cc6:	8c 36       	cpi	r24, 0x6C	; 108
    2cc8:	11 f4       	brne	.+4      	; 0x2cce <vfprintf+0xc2>
    2cca:	20 68       	ori	r18, 0x80	; 128
    2ccc:	02 c0       	rjmp	.+4      	; 0x2cd2 <vfprintf+0xc6>
    2cce:	88 36       	cpi	r24, 0x68	; 104
    2cd0:	41 f4       	brne	.+16     	; 0x2ce2 <vfprintf+0xd6>
    2cd2:	f6 01       	movw	r30, r12
    2cd4:	93 fd       	sbrc	r25, 3
    2cd6:	85 91       	lpm	r24, Z+
    2cd8:	93 ff       	sbrs	r25, 3
    2cda:	81 91       	ld	r24, Z+
    2cdc:	6f 01       	movw	r12, r30
    2cde:	81 11       	cpse	r24, r1
    2ce0:	c1 cf       	rjmp	.-126    	; 0x2c64 <vfprintf+0x58>
    2ce2:	98 2f       	mov	r25, r24
    2ce4:	9f 7d       	andi	r25, 0xDF	; 223
    2ce6:	95 54       	subi	r25, 0x45	; 69
    2ce8:	93 30       	cpi	r25, 0x03	; 3
    2cea:	28 f4       	brcc	.+10     	; 0x2cf6 <vfprintf+0xea>
    2cec:	0c 5f       	subi	r16, 0xFC	; 252
    2cee:	1f 4f       	sbci	r17, 0xFF	; 255
    2cf0:	ff e3       	ldi	r31, 0x3F	; 63
    2cf2:	f9 83       	std	Y+1, r31	; 0x01
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <vfprintf+0x104>
    2cf6:	83 36       	cpi	r24, 0x63	; 99
    2cf8:	31 f0       	breq	.+12     	; 0x2d06 <vfprintf+0xfa>
    2cfa:	83 37       	cpi	r24, 0x73	; 115
    2cfc:	71 f0       	breq	.+28     	; 0x2d1a <vfprintf+0x10e>
    2cfe:	83 35       	cpi	r24, 0x53	; 83
    2d00:	09 f0       	breq	.+2      	; 0x2d04 <vfprintf+0xf8>
    2d02:	57 c0       	rjmp	.+174    	; 0x2db2 <vfprintf+0x1a6>
    2d04:	21 c0       	rjmp	.+66     	; 0x2d48 <vfprintf+0x13c>
    2d06:	f8 01       	movw	r30, r16
    2d08:	80 81       	ld	r24, Z
    2d0a:	89 83       	std	Y+1, r24	; 0x01
    2d0c:	0e 5f       	subi	r16, 0xFE	; 254
    2d0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d10:	44 24       	eor	r4, r4
    2d12:	43 94       	inc	r4
    2d14:	51 2c       	mov	r5, r1
    2d16:	54 01       	movw	r10, r8
    2d18:	14 c0       	rjmp	.+40     	; 0x2d42 <vfprintf+0x136>
    2d1a:	38 01       	movw	r6, r16
    2d1c:	f2 e0       	ldi	r31, 0x02	; 2
    2d1e:	6f 0e       	add	r6, r31
    2d20:	71 1c       	adc	r7, r1
    2d22:	f8 01       	movw	r30, r16
    2d24:	a0 80       	ld	r10, Z
    2d26:	b1 80       	ldd	r11, Z+1	; 0x01
    2d28:	26 ff       	sbrs	r18, 6
    2d2a:	03 c0       	rjmp	.+6      	; 0x2d32 <vfprintf+0x126>
    2d2c:	65 2d       	mov	r22, r5
    2d2e:	70 e0       	ldi	r23, 0x00	; 0
    2d30:	02 c0       	rjmp	.+4      	; 0x2d36 <vfprintf+0x12a>
    2d32:	6f ef       	ldi	r22, 0xFF	; 255
    2d34:	7f ef       	ldi	r23, 0xFF	; 255
    2d36:	c5 01       	movw	r24, r10
    2d38:	2c 87       	std	Y+12, r18	; 0x0c
    2d3a:	7e d2       	rcall	.+1276   	; 0x3238 <strnlen>
    2d3c:	2c 01       	movw	r4, r24
    2d3e:	83 01       	movw	r16, r6
    2d40:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d42:	2f 77       	andi	r18, 0x7F	; 127
    2d44:	22 2e       	mov	r2, r18
    2d46:	16 c0       	rjmp	.+44     	; 0x2d74 <vfprintf+0x168>
    2d48:	38 01       	movw	r6, r16
    2d4a:	f2 e0       	ldi	r31, 0x02	; 2
    2d4c:	6f 0e       	add	r6, r31
    2d4e:	71 1c       	adc	r7, r1
    2d50:	f8 01       	movw	r30, r16
    2d52:	a0 80       	ld	r10, Z
    2d54:	b1 80       	ldd	r11, Z+1	; 0x01
    2d56:	26 ff       	sbrs	r18, 6
    2d58:	03 c0       	rjmp	.+6      	; 0x2d60 <vfprintf+0x154>
    2d5a:	65 2d       	mov	r22, r5
    2d5c:	70 e0       	ldi	r23, 0x00	; 0
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <vfprintf+0x158>
    2d60:	6f ef       	ldi	r22, 0xFF	; 255
    2d62:	7f ef       	ldi	r23, 0xFF	; 255
    2d64:	c5 01       	movw	r24, r10
    2d66:	2c 87       	std	Y+12, r18	; 0x0c
    2d68:	55 d2       	rcall	.+1194   	; 0x3214 <strnlen_P>
    2d6a:	2c 01       	movw	r4, r24
    2d6c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d6e:	20 68       	ori	r18, 0x80	; 128
    2d70:	22 2e       	mov	r2, r18
    2d72:	83 01       	movw	r16, r6
    2d74:	23 fc       	sbrc	r2, 3
    2d76:	19 c0       	rjmp	.+50     	; 0x2daa <vfprintf+0x19e>
    2d78:	83 2d       	mov	r24, r3
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	48 16       	cp	r4, r24
    2d7e:	59 06       	cpc	r5, r25
    2d80:	a0 f4       	brcc	.+40     	; 0x2daa <vfprintf+0x19e>
    2d82:	b7 01       	movw	r22, r14
    2d84:	80 e2       	ldi	r24, 0x20	; 32
    2d86:	90 e0       	ldi	r25, 0x00	; 0
    2d88:	62 d2       	rcall	.+1220   	; 0x324e <fputc>
    2d8a:	3a 94       	dec	r3
    2d8c:	f5 cf       	rjmp	.-22     	; 0x2d78 <vfprintf+0x16c>
    2d8e:	f5 01       	movw	r30, r10
    2d90:	27 fc       	sbrc	r2, 7
    2d92:	85 91       	lpm	r24, Z+
    2d94:	27 fe       	sbrs	r2, 7
    2d96:	81 91       	ld	r24, Z+
    2d98:	5f 01       	movw	r10, r30
    2d9a:	b7 01       	movw	r22, r14
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	57 d2       	rcall	.+1198   	; 0x324e <fputc>
    2da0:	31 10       	cpse	r3, r1
    2da2:	3a 94       	dec	r3
    2da4:	f1 e0       	ldi	r31, 0x01	; 1
    2da6:	4f 1a       	sub	r4, r31
    2da8:	51 08       	sbc	r5, r1
    2daa:	41 14       	cp	r4, r1
    2dac:	51 04       	cpc	r5, r1
    2dae:	79 f7       	brne	.-34     	; 0x2d8e <vfprintf+0x182>
    2db0:	de c0       	rjmp	.+444    	; 0x2f6e <vfprintf+0x362>
    2db2:	84 36       	cpi	r24, 0x64	; 100
    2db4:	11 f0       	breq	.+4      	; 0x2dba <vfprintf+0x1ae>
    2db6:	89 36       	cpi	r24, 0x69	; 105
    2db8:	31 f5       	brne	.+76     	; 0x2e06 <vfprintf+0x1fa>
    2dba:	f8 01       	movw	r30, r16
    2dbc:	27 ff       	sbrs	r18, 7
    2dbe:	07 c0       	rjmp	.+14     	; 0x2dce <vfprintf+0x1c2>
    2dc0:	60 81       	ld	r22, Z
    2dc2:	71 81       	ldd	r23, Z+1	; 0x01
    2dc4:	82 81       	ldd	r24, Z+2	; 0x02
    2dc6:	93 81       	ldd	r25, Z+3	; 0x03
    2dc8:	0c 5f       	subi	r16, 0xFC	; 252
    2dca:	1f 4f       	sbci	r17, 0xFF	; 255
    2dcc:	08 c0       	rjmp	.+16     	; 0x2dde <vfprintf+0x1d2>
    2dce:	60 81       	ld	r22, Z
    2dd0:	71 81       	ldd	r23, Z+1	; 0x01
    2dd2:	88 27       	eor	r24, r24
    2dd4:	77 fd       	sbrc	r23, 7
    2dd6:	80 95       	com	r24
    2dd8:	98 2f       	mov	r25, r24
    2dda:	0e 5f       	subi	r16, 0xFE	; 254
    2ddc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dde:	2f 76       	andi	r18, 0x6F	; 111
    2de0:	b2 2e       	mov	r11, r18
    2de2:	97 ff       	sbrs	r25, 7
    2de4:	09 c0       	rjmp	.+18     	; 0x2df8 <vfprintf+0x1ec>
    2de6:	90 95       	com	r25
    2de8:	80 95       	com	r24
    2dea:	70 95       	com	r23
    2dec:	61 95       	neg	r22
    2dee:	7f 4f       	sbci	r23, 0xFF	; 255
    2df0:	8f 4f       	sbci	r24, 0xFF	; 255
    2df2:	9f 4f       	sbci	r25, 0xFF	; 255
    2df4:	20 68       	ori	r18, 0x80	; 128
    2df6:	b2 2e       	mov	r11, r18
    2df8:	2a e0       	ldi	r18, 0x0A	; 10
    2dfa:	30 e0       	ldi	r19, 0x00	; 0
    2dfc:	a4 01       	movw	r20, r8
    2dfe:	59 d2       	rcall	.+1202   	; 0x32b2 <__ultoa_invert>
    2e00:	a8 2e       	mov	r10, r24
    2e02:	a8 18       	sub	r10, r8
    2e04:	43 c0       	rjmp	.+134    	; 0x2e8c <vfprintf+0x280>
    2e06:	85 37       	cpi	r24, 0x75	; 117
    2e08:	29 f4       	brne	.+10     	; 0x2e14 <vfprintf+0x208>
    2e0a:	2f 7e       	andi	r18, 0xEF	; 239
    2e0c:	b2 2e       	mov	r11, r18
    2e0e:	2a e0       	ldi	r18, 0x0A	; 10
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	25 c0       	rjmp	.+74     	; 0x2e5e <vfprintf+0x252>
    2e14:	f2 2f       	mov	r31, r18
    2e16:	f9 7f       	andi	r31, 0xF9	; 249
    2e18:	bf 2e       	mov	r11, r31
    2e1a:	8f 36       	cpi	r24, 0x6F	; 111
    2e1c:	c1 f0       	breq	.+48     	; 0x2e4e <vfprintf+0x242>
    2e1e:	18 f4       	brcc	.+6      	; 0x2e26 <vfprintf+0x21a>
    2e20:	88 35       	cpi	r24, 0x58	; 88
    2e22:	79 f0       	breq	.+30     	; 0x2e42 <vfprintf+0x236>
    2e24:	ad c0       	rjmp	.+346    	; 0x2f80 <vfprintf+0x374>
    2e26:	80 37       	cpi	r24, 0x70	; 112
    2e28:	19 f0       	breq	.+6      	; 0x2e30 <vfprintf+0x224>
    2e2a:	88 37       	cpi	r24, 0x78	; 120
    2e2c:	21 f0       	breq	.+8      	; 0x2e36 <vfprintf+0x22a>
    2e2e:	a8 c0       	rjmp	.+336    	; 0x2f80 <vfprintf+0x374>
    2e30:	2f 2f       	mov	r18, r31
    2e32:	20 61       	ori	r18, 0x10	; 16
    2e34:	b2 2e       	mov	r11, r18
    2e36:	b4 fe       	sbrs	r11, 4
    2e38:	0d c0       	rjmp	.+26     	; 0x2e54 <vfprintf+0x248>
    2e3a:	8b 2d       	mov	r24, r11
    2e3c:	84 60       	ori	r24, 0x04	; 4
    2e3e:	b8 2e       	mov	r11, r24
    2e40:	09 c0       	rjmp	.+18     	; 0x2e54 <vfprintf+0x248>
    2e42:	24 ff       	sbrs	r18, 4
    2e44:	0a c0       	rjmp	.+20     	; 0x2e5a <vfprintf+0x24e>
    2e46:	9f 2f       	mov	r25, r31
    2e48:	96 60       	ori	r25, 0x06	; 6
    2e4a:	b9 2e       	mov	r11, r25
    2e4c:	06 c0       	rjmp	.+12     	; 0x2e5a <vfprintf+0x24e>
    2e4e:	28 e0       	ldi	r18, 0x08	; 8
    2e50:	30 e0       	ldi	r19, 0x00	; 0
    2e52:	05 c0       	rjmp	.+10     	; 0x2e5e <vfprintf+0x252>
    2e54:	20 e1       	ldi	r18, 0x10	; 16
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	02 c0       	rjmp	.+4      	; 0x2e5e <vfprintf+0x252>
    2e5a:	20 e1       	ldi	r18, 0x10	; 16
    2e5c:	32 e0       	ldi	r19, 0x02	; 2
    2e5e:	f8 01       	movw	r30, r16
    2e60:	b7 fe       	sbrs	r11, 7
    2e62:	07 c0       	rjmp	.+14     	; 0x2e72 <vfprintf+0x266>
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	0c 5f       	subi	r16, 0xFC	; 252
    2e6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <vfprintf+0x272>
    2e72:	60 81       	ld	r22, Z
    2e74:	71 81       	ldd	r23, Z+1	; 0x01
    2e76:	80 e0       	ldi	r24, 0x00	; 0
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 5f       	subi	r16, 0xFE	; 254
    2e7c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e7e:	a4 01       	movw	r20, r8
    2e80:	18 d2       	rcall	.+1072   	; 0x32b2 <__ultoa_invert>
    2e82:	a8 2e       	mov	r10, r24
    2e84:	a8 18       	sub	r10, r8
    2e86:	fb 2d       	mov	r31, r11
    2e88:	ff 77       	andi	r31, 0x7F	; 127
    2e8a:	bf 2e       	mov	r11, r31
    2e8c:	b6 fe       	sbrs	r11, 6
    2e8e:	0b c0       	rjmp	.+22     	; 0x2ea6 <vfprintf+0x29a>
    2e90:	2b 2d       	mov	r18, r11
    2e92:	2e 7f       	andi	r18, 0xFE	; 254
    2e94:	a5 14       	cp	r10, r5
    2e96:	50 f4       	brcc	.+20     	; 0x2eac <vfprintf+0x2a0>
    2e98:	b4 fe       	sbrs	r11, 4
    2e9a:	0a c0       	rjmp	.+20     	; 0x2eb0 <vfprintf+0x2a4>
    2e9c:	b2 fc       	sbrc	r11, 2
    2e9e:	08 c0       	rjmp	.+16     	; 0x2eb0 <vfprintf+0x2a4>
    2ea0:	2b 2d       	mov	r18, r11
    2ea2:	2e 7e       	andi	r18, 0xEE	; 238
    2ea4:	05 c0       	rjmp	.+10     	; 0x2eb0 <vfprintf+0x2a4>
    2ea6:	7a 2c       	mov	r7, r10
    2ea8:	2b 2d       	mov	r18, r11
    2eaa:	03 c0       	rjmp	.+6      	; 0x2eb2 <vfprintf+0x2a6>
    2eac:	7a 2c       	mov	r7, r10
    2eae:	01 c0       	rjmp	.+2      	; 0x2eb2 <vfprintf+0x2a6>
    2eb0:	75 2c       	mov	r7, r5
    2eb2:	24 ff       	sbrs	r18, 4
    2eb4:	0d c0       	rjmp	.+26     	; 0x2ed0 <vfprintf+0x2c4>
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	ea 0d       	add	r30, r10
    2eba:	f1 1d       	adc	r31, r1
    2ebc:	80 81       	ld	r24, Z
    2ebe:	80 33       	cpi	r24, 0x30	; 48
    2ec0:	11 f4       	brne	.+4      	; 0x2ec6 <vfprintf+0x2ba>
    2ec2:	29 7e       	andi	r18, 0xE9	; 233
    2ec4:	09 c0       	rjmp	.+18     	; 0x2ed8 <vfprintf+0x2cc>
    2ec6:	22 ff       	sbrs	r18, 2
    2ec8:	06 c0       	rjmp	.+12     	; 0x2ed6 <vfprintf+0x2ca>
    2eca:	73 94       	inc	r7
    2ecc:	73 94       	inc	r7
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <vfprintf+0x2cc>
    2ed0:	82 2f       	mov	r24, r18
    2ed2:	86 78       	andi	r24, 0x86	; 134
    2ed4:	09 f0       	breq	.+2      	; 0x2ed8 <vfprintf+0x2cc>
    2ed6:	73 94       	inc	r7
    2ed8:	23 fd       	sbrc	r18, 3
    2eda:	12 c0       	rjmp	.+36     	; 0x2f00 <vfprintf+0x2f4>
    2edc:	20 ff       	sbrs	r18, 0
    2ede:	06 c0       	rjmp	.+12     	; 0x2eec <vfprintf+0x2e0>
    2ee0:	5a 2c       	mov	r5, r10
    2ee2:	73 14       	cp	r7, r3
    2ee4:	18 f4       	brcc	.+6      	; 0x2eec <vfprintf+0x2e0>
    2ee6:	53 0c       	add	r5, r3
    2ee8:	57 18       	sub	r5, r7
    2eea:	73 2c       	mov	r7, r3
    2eec:	73 14       	cp	r7, r3
    2eee:	60 f4       	brcc	.+24     	; 0x2f08 <vfprintf+0x2fc>
    2ef0:	b7 01       	movw	r22, r14
    2ef2:	80 e2       	ldi	r24, 0x20	; 32
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	2c 87       	std	Y+12, r18	; 0x0c
    2ef8:	aa d1       	rcall	.+852    	; 0x324e <fputc>
    2efa:	73 94       	inc	r7
    2efc:	2c 85       	ldd	r18, Y+12	; 0x0c
    2efe:	f6 cf       	rjmp	.-20     	; 0x2eec <vfprintf+0x2e0>
    2f00:	73 14       	cp	r7, r3
    2f02:	10 f4       	brcc	.+4      	; 0x2f08 <vfprintf+0x2fc>
    2f04:	37 18       	sub	r3, r7
    2f06:	01 c0       	rjmp	.+2      	; 0x2f0a <vfprintf+0x2fe>
    2f08:	31 2c       	mov	r3, r1
    2f0a:	24 ff       	sbrs	r18, 4
    2f0c:	11 c0       	rjmp	.+34     	; 0x2f30 <vfprintf+0x324>
    2f0e:	b7 01       	movw	r22, r14
    2f10:	80 e3       	ldi	r24, 0x30	; 48
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	2c 87       	std	Y+12, r18	; 0x0c
    2f16:	9b d1       	rcall	.+822    	; 0x324e <fputc>
    2f18:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f1a:	22 ff       	sbrs	r18, 2
    2f1c:	16 c0       	rjmp	.+44     	; 0x2f4a <vfprintf+0x33e>
    2f1e:	21 ff       	sbrs	r18, 1
    2f20:	03 c0       	rjmp	.+6      	; 0x2f28 <vfprintf+0x31c>
    2f22:	88 e5       	ldi	r24, 0x58	; 88
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <vfprintf+0x320>
    2f28:	88 e7       	ldi	r24, 0x78	; 120
    2f2a:	90 e0       	ldi	r25, 0x00	; 0
    2f2c:	b7 01       	movw	r22, r14
    2f2e:	0c c0       	rjmp	.+24     	; 0x2f48 <vfprintf+0x33c>
    2f30:	82 2f       	mov	r24, r18
    2f32:	86 78       	andi	r24, 0x86	; 134
    2f34:	51 f0       	breq	.+20     	; 0x2f4a <vfprintf+0x33e>
    2f36:	21 fd       	sbrc	r18, 1
    2f38:	02 c0       	rjmp	.+4      	; 0x2f3e <vfprintf+0x332>
    2f3a:	80 e2       	ldi	r24, 0x20	; 32
    2f3c:	01 c0       	rjmp	.+2      	; 0x2f40 <vfprintf+0x334>
    2f3e:	8b e2       	ldi	r24, 0x2B	; 43
    2f40:	27 fd       	sbrc	r18, 7
    2f42:	8d e2       	ldi	r24, 0x2D	; 45
    2f44:	b7 01       	movw	r22, r14
    2f46:	90 e0       	ldi	r25, 0x00	; 0
    2f48:	82 d1       	rcall	.+772    	; 0x324e <fputc>
    2f4a:	a5 14       	cp	r10, r5
    2f4c:	30 f4       	brcc	.+12     	; 0x2f5a <vfprintf+0x34e>
    2f4e:	b7 01       	movw	r22, r14
    2f50:	80 e3       	ldi	r24, 0x30	; 48
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	7c d1       	rcall	.+760    	; 0x324e <fputc>
    2f56:	5a 94       	dec	r5
    2f58:	f8 cf       	rjmp	.-16     	; 0x2f4a <vfprintf+0x33e>
    2f5a:	aa 94       	dec	r10
    2f5c:	f4 01       	movw	r30, r8
    2f5e:	ea 0d       	add	r30, r10
    2f60:	f1 1d       	adc	r31, r1
    2f62:	80 81       	ld	r24, Z
    2f64:	b7 01       	movw	r22, r14
    2f66:	90 e0       	ldi	r25, 0x00	; 0
    2f68:	72 d1       	rcall	.+740    	; 0x324e <fputc>
    2f6a:	a1 10       	cpse	r10, r1
    2f6c:	f6 cf       	rjmp	.-20     	; 0x2f5a <vfprintf+0x34e>
    2f6e:	33 20       	and	r3, r3
    2f70:	09 f4       	brne	.+2      	; 0x2f74 <vfprintf+0x368>
    2f72:	5d ce       	rjmp	.-838    	; 0x2c2e <vfprintf+0x22>
    2f74:	b7 01       	movw	r22, r14
    2f76:	80 e2       	ldi	r24, 0x20	; 32
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	69 d1       	rcall	.+722    	; 0x324e <fputc>
    2f7c:	3a 94       	dec	r3
    2f7e:	f7 cf       	rjmp	.-18     	; 0x2f6e <vfprintf+0x362>
    2f80:	f7 01       	movw	r30, r14
    2f82:	86 81       	ldd	r24, Z+6	; 0x06
    2f84:	97 81       	ldd	r25, Z+7	; 0x07
    2f86:	02 c0       	rjmp	.+4      	; 0x2f8c <vfprintf+0x380>
    2f88:	8f ef       	ldi	r24, 0xFF	; 255
    2f8a:	9f ef       	ldi	r25, 0xFF	; 255
    2f8c:	2c 96       	adiw	r28, 0x0c	; 12
    2f8e:	e2 e1       	ldi	r30, 0x12	; 18
    2f90:	1a c2       	rjmp	.+1076   	; 0x33c6 <__epilogue_restores__>

00002f92 <calloc>:
    2f92:	0f 93       	push	r16
    2f94:	1f 93       	push	r17
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	86 9f       	mul	r24, r22
    2f9c:	80 01       	movw	r16, r0
    2f9e:	87 9f       	mul	r24, r23
    2fa0:	10 0d       	add	r17, r0
    2fa2:	96 9f       	mul	r25, r22
    2fa4:	10 0d       	add	r17, r0
    2fa6:	11 24       	eor	r1, r1
    2fa8:	c8 01       	movw	r24, r16
    2faa:	0d d0       	rcall	.+26     	; 0x2fc6 <malloc>
    2fac:	ec 01       	movw	r28, r24
    2fae:	00 97       	sbiw	r24, 0x00	; 0
    2fb0:	21 f0       	breq	.+8      	; 0x2fba <calloc+0x28>
    2fb2:	a8 01       	movw	r20, r16
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	38 d1       	rcall	.+624    	; 0x322a <memset>
    2fba:	ce 01       	movw	r24, r28
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <malloc>:
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	82 30       	cpi	r24, 0x02	; 2
    2fcc:	91 05       	cpc	r25, r1
    2fce:	10 f4       	brcc	.+4      	; 0x2fd4 <malloc+0xe>
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	e0 91 d8 02 	lds	r30, 0x02D8
    2fd8:	f0 91 d9 02 	lds	r31, 0x02D9
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	a0 e0       	ldi	r26, 0x00	; 0
    2fe2:	b0 e0       	ldi	r27, 0x00	; 0
    2fe4:	30 97       	sbiw	r30, 0x00	; 0
    2fe6:	39 f1       	breq	.+78     	; 0x3036 <malloc+0x70>
    2fe8:	40 81       	ld	r20, Z
    2fea:	51 81       	ldd	r21, Z+1	; 0x01
    2fec:	48 17       	cp	r20, r24
    2fee:	59 07       	cpc	r21, r25
    2ff0:	b8 f0       	brcs	.+46     	; 0x3020 <malloc+0x5a>
    2ff2:	48 17       	cp	r20, r24
    2ff4:	59 07       	cpc	r21, r25
    2ff6:	71 f4       	brne	.+28     	; 0x3014 <malloc+0x4e>
    2ff8:	82 81       	ldd	r24, Z+2	; 0x02
    2ffa:	93 81       	ldd	r25, Z+3	; 0x03
    2ffc:	10 97       	sbiw	r26, 0x00	; 0
    2ffe:	29 f0       	breq	.+10     	; 0x300a <malloc+0x44>
    3000:	13 96       	adiw	r26, 0x03	; 3
    3002:	9c 93       	st	X, r25
    3004:	8e 93       	st	-X, r24
    3006:	12 97       	sbiw	r26, 0x02	; 2
    3008:	2c c0       	rjmp	.+88     	; 0x3062 <malloc+0x9c>
    300a:	90 93 d9 02 	sts	0x02D9, r25
    300e:	80 93 d8 02 	sts	0x02D8, r24
    3012:	27 c0       	rjmp	.+78     	; 0x3062 <malloc+0x9c>
    3014:	21 15       	cp	r18, r1
    3016:	31 05       	cpc	r19, r1
    3018:	31 f0       	breq	.+12     	; 0x3026 <malloc+0x60>
    301a:	42 17       	cp	r20, r18
    301c:	53 07       	cpc	r21, r19
    301e:	18 f0       	brcs	.+6      	; 0x3026 <malloc+0x60>
    3020:	a9 01       	movw	r20, r18
    3022:	db 01       	movw	r26, r22
    3024:	01 c0       	rjmp	.+2      	; 0x3028 <malloc+0x62>
    3026:	ef 01       	movw	r28, r30
    3028:	9a 01       	movw	r18, r20
    302a:	bd 01       	movw	r22, r26
    302c:	df 01       	movw	r26, r30
    302e:	02 80       	ldd	r0, Z+2	; 0x02
    3030:	f3 81       	ldd	r31, Z+3	; 0x03
    3032:	e0 2d       	mov	r30, r0
    3034:	d7 cf       	rjmp	.-82     	; 0x2fe4 <malloc+0x1e>
    3036:	21 15       	cp	r18, r1
    3038:	31 05       	cpc	r19, r1
    303a:	f9 f0       	breq	.+62     	; 0x307a <malloc+0xb4>
    303c:	28 1b       	sub	r18, r24
    303e:	39 0b       	sbc	r19, r25
    3040:	24 30       	cpi	r18, 0x04	; 4
    3042:	31 05       	cpc	r19, r1
    3044:	80 f4       	brcc	.+32     	; 0x3066 <malloc+0xa0>
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	9b 81       	ldd	r25, Y+3	; 0x03
    304a:	61 15       	cp	r22, r1
    304c:	71 05       	cpc	r23, r1
    304e:	21 f0       	breq	.+8      	; 0x3058 <malloc+0x92>
    3050:	fb 01       	movw	r30, r22
    3052:	93 83       	std	Z+3, r25	; 0x03
    3054:	82 83       	std	Z+2, r24	; 0x02
    3056:	04 c0       	rjmp	.+8      	; 0x3060 <malloc+0x9a>
    3058:	90 93 d9 02 	sts	0x02D9, r25
    305c:	80 93 d8 02 	sts	0x02D8, r24
    3060:	fe 01       	movw	r30, r28
    3062:	32 96       	adiw	r30, 0x02	; 2
    3064:	44 c0       	rjmp	.+136    	; 0x30ee <malloc+0x128>
    3066:	fe 01       	movw	r30, r28
    3068:	e2 0f       	add	r30, r18
    306a:	f3 1f       	adc	r31, r19
    306c:	81 93       	st	Z+, r24
    306e:	91 93       	st	Z+, r25
    3070:	22 50       	subi	r18, 0x02	; 2
    3072:	31 09       	sbc	r19, r1
    3074:	39 83       	std	Y+1, r19	; 0x01
    3076:	28 83       	st	Y, r18
    3078:	3a c0       	rjmp	.+116    	; 0x30ee <malloc+0x128>
    307a:	20 91 d6 02 	lds	r18, 0x02D6
    307e:	30 91 d7 02 	lds	r19, 0x02D7
    3082:	23 2b       	or	r18, r19
    3084:	41 f4       	brne	.+16     	; 0x3096 <malloc+0xd0>
    3086:	20 91 06 01 	lds	r18, 0x0106
    308a:	30 91 07 01 	lds	r19, 0x0107
    308e:	30 93 d7 02 	sts	0x02D7, r19
    3092:	20 93 d6 02 	sts	0x02D6, r18
    3096:	20 91 04 01 	lds	r18, 0x0104
    309a:	30 91 05 01 	lds	r19, 0x0105
    309e:	21 15       	cp	r18, r1
    30a0:	31 05       	cpc	r19, r1
    30a2:	41 f4       	brne	.+16     	; 0x30b4 <malloc+0xee>
    30a4:	2d b7       	in	r18, 0x3d	; 61
    30a6:	3e b7       	in	r19, 0x3e	; 62
    30a8:	40 91 08 01 	lds	r20, 0x0108
    30ac:	50 91 09 01 	lds	r21, 0x0109
    30b0:	24 1b       	sub	r18, r20
    30b2:	35 0b       	sbc	r19, r21
    30b4:	e0 91 d6 02 	lds	r30, 0x02D6
    30b8:	f0 91 d7 02 	lds	r31, 0x02D7
    30bc:	e2 17       	cp	r30, r18
    30be:	f3 07       	cpc	r31, r19
    30c0:	a0 f4       	brcc	.+40     	; 0x30ea <malloc+0x124>
    30c2:	2e 1b       	sub	r18, r30
    30c4:	3f 0b       	sbc	r19, r31
    30c6:	28 17       	cp	r18, r24
    30c8:	39 07       	cpc	r19, r25
    30ca:	78 f0       	brcs	.+30     	; 0x30ea <malloc+0x124>
    30cc:	ac 01       	movw	r20, r24
    30ce:	4e 5f       	subi	r20, 0xFE	; 254
    30d0:	5f 4f       	sbci	r21, 0xFF	; 255
    30d2:	24 17       	cp	r18, r20
    30d4:	35 07       	cpc	r19, r21
    30d6:	48 f0       	brcs	.+18     	; 0x30ea <malloc+0x124>
    30d8:	4e 0f       	add	r20, r30
    30da:	5f 1f       	adc	r21, r31
    30dc:	50 93 d7 02 	sts	0x02D7, r21
    30e0:	40 93 d6 02 	sts	0x02D6, r20
    30e4:	81 93       	st	Z+, r24
    30e6:	91 93       	st	Z+, r25
    30e8:	02 c0       	rjmp	.+4      	; 0x30ee <malloc+0x128>
    30ea:	e0 e0       	ldi	r30, 0x00	; 0
    30ec:	f0 e0       	ldi	r31, 0x00	; 0
    30ee:	cf 01       	movw	r24, r30
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	08 95       	ret

000030f6 <free>:
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	09 f4       	brne	.+2      	; 0x3100 <free+0xa>
    30fe:	87 c0       	rjmp	.+270    	; 0x320e <free+0x118>
    3100:	fc 01       	movw	r30, r24
    3102:	32 97       	sbiw	r30, 0x02	; 2
    3104:	13 82       	std	Z+3, r1	; 0x03
    3106:	12 82       	std	Z+2, r1	; 0x02
    3108:	c0 91 d8 02 	lds	r28, 0x02D8
    310c:	d0 91 d9 02 	lds	r29, 0x02D9
    3110:	20 97       	sbiw	r28, 0x00	; 0
    3112:	81 f4       	brne	.+32     	; 0x3134 <free+0x3e>
    3114:	20 81       	ld	r18, Z
    3116:	31 81       	ldd	r19, Z+1	; 0x01
    3118:	28 0f       	add	r18, r24
    311a:	39 1f       	adc	r19, r25
    311c:	80 91 d6 02 	lds	r24, 0x02D6
    3120:	90 91 d7 02 	lds	r25, 0x02D7
    3124:	82 17       	cp	r24, r18
    3126:	93 07       	cpc	r25, r19
    3128:	79 f5       	brne	.+94     	; 0x3188 <free+0x92>
    312a:	f0 93 d7 02 	sts	0x02D7, r31
    312e:	e0 93 d6 02 	sts	0x02D6, r30
    3132:	6d c0       	rjmp	.+218    	; 0x320e <free+0x118>
    3134:	de 01       	movw	r26, r28
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	ae 17       	cp	r26, r30
    313c:	bf 07       	cpc	r27, r31
    313e:	50 f4       	brcc	.+20     	; 0x3154 <free+0x5e>
    3140:	12 96       	adiw	r26, 0x02	; 2
    3142:	4d 91       	ld	r20, X+
    3144:	5c 91       	ld	r21, X
    3146:	13 97       	sbiw	r26, 0x03	; 3
    3148:	9d 01       	movw	r18, r26
    314a:	41 15       	cp	r20, r1
    314c:	51 05       	cpc	r21, r1
    314e:	09 f1       	breq	.+66     	; 0x3192 <free+0x9c>
    3150:	da 01       	movw	r26, r20
    3152:	f3 cf       	rjmp	.-26     	; 0x313a <free+0x44>
    3154:	b3 83       	std	Z+3, r27	; 0x03
    3156:	a2 83       	std	Z+2, r26	; 0x02
    3158:	40 81       	ld	r20, Z
    315a:	51 81       	ldd	r21, Z+1	; 0x01
    315c:	84 0f       	add	r24, r20
    315e:	95 1f       	adc	r25, r21
    3160:	8a 17       	cp	r24, r26
    3162:	9b 07       	cpc	r25, r27
    3164:	71 f4       	brne	.+28     	; 0x3182 <free+0x8c>
    3166:	8d 91       	ld	r24, X+
    3168:	9c 91       	ld	r25, X
    316a:	11 97       	sbiw	r26, 0x01	; 1
    316c:	84 0f       	add	r24, r20
    316e:	95 1f       	adc	r25, r21
    3170:	02 96       	adiw	r24, 0x02	; 2
    3172:	91 83       	std	Z+1, r25	; 0x01
    3174:	80 83       	st	Z, r24
    3176:	12 96       	adiw	r26, 0x02	; 2
    3178:	8d 91       	ld	r24, X+
    317a:	9c 91       	ld	r25, X
    317c:	13 97       	sbiw	r26, 0x03	; 3
    317e:	93 83       	std	Z+3, r25	; 0x03
    3180:	82 83       	std	Z+2, r24	; 0x02
    3182:	21 15       	cp	r18, r1
    3184:	31 05       	cpc	r19, r1
    3186:	29 f4       	brne	.+10     	; 0x3192 <free+0x9c>
    3188:	f0 93 d9 02 	sts	0x02D9, r31
    318c:	e0 93 d8 02 	sts	0x02D8, r30
    3190:	3e c0       	rjmp	.+124    	; 0x320e <free+0x118>
    3192:	d9 01       	movw	r26, r18
    3194:	13 96       	adiw	r26, 0x03	; 3
    3196:	fc 93       	st	X, r31
    3198:	ee 93       	st	-X, r30
    319a:	12 97       	sbiw	r26, 0x02	; 2
    319c:	4d 91       	ld	r20, X+
    319e:	5d 91       	ld	r21, X+
    31a0:	a4 0f       	add	r26, r20
    31a2:	b5 1f       	adc	r27, r21
    31a4:	ea 17       	cp	r30, r26
    31a6:	fb 07       	cpc	r31, r27
    31a8:	79 f4       	brne	.+30     	; 0x31c8 <free+0xd2>
    31aa:	80 81       	ld	r24, Z
    31ac:	91 81       	ldd	r25, Z+1	; 0x01
    31ae:	84 0f       	add	r24, r20
    31b0:	95 1f       	adc	r25, r21
    31b2:	02 96       	adiw	r24, 0x02	; 2
    31b4:	d9 01       	movw	r26, r18
    31b6:	11 96       	adiw	r26, 0x01	; 1
    31b8:	9c 93       	st	X, r25
    31ba:	8e 93       	st	-X, r24
    31bc:	82 81       	ldd	r24, Z+2	; 0x02
    31be:	93 81       	ldd	r25, Z+3	; 0x03
    31c0:	13 96       	adiw	r26, 0x03	; 3
    31c2:	9c 93       	st	X, r25
    31c4:	8e 93       	st	-X, r24
    31c6:	12 97       	sbiw	r26, 0x02	; 2
    31c8:	e0 e0       	ldi	r30, 0x00	; 0
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	00 97       	sbiw	r24, 0x00	; 0
    31d2:	19 f0       	breq	.+6      	; 0x31da <free+0xe4>
    31d4:	fe 01       	movw	r30, r28
    31d6:	ec 01       	movw	r28, r24
    31d8:	f9 cf       	rjmp	.-14     	; 0x31cc <free+0xd6>
    31da:	ce 01       	movw	r24, r28
    31dc:	02 96       	adiw	r24, 0x02	; 2
    31de:	28 81       	ld	r18, Y
    31e0:	39 81       	ldd	r19, Y+1	; 0x01
    31e2:	82 0f       	add	r24, r18
    31e4:	93 1f       	adc	r25, r19
    31e6:	20 91 d6 02 	lds	r18, 0x02D6
    31ea:	30 91 d7 02 	lds	r19, 0x02D7
    31ee:	28 17       	cp	r18, r24
    31f0:	39 07       	cpc	r19, r25
    31f2:	69 f4       	brne	.+26     	; 0x320e <free+0x118>
    31f4:	30 97       	sbiw	r30, 0x00	; 0
    31f6:	29 f4       	brne	.+10     	; 0x3202 <free+0x10c>
    31f8:	10 92 d9 02 	sts	0x02D9, r1
    31fc:	10 92 d8 02 	sts	0x02D8, r1
    3200:	02 c0       	rjmp	.+4      	; 0x3206 <free+0x110>
    3202:	13 82       	std	Z+3, r1	; 0x03
    3204:	12 82       	std	Z+2, r1	; 0x02
    3206:	d0 93 d7 02 	sts	0x02D7, r29
    320a:	c0 93 d6 02 	sts	0x02D6, r28
    320e:	df 91       	pop	r29
    3210:	cf 91       	pop	r28
    3212:	08 95       	ret

00003214 <strnlen_P>:
    3214:	fc 01       	movw	r30, r24
    3216:	05 90       	lpm	r0, Z+
    3218:	61 50       	subi	r22, 0x01	; 1
    321a:	70 40       	sbci	r23, 0x00	; 0
    321c:	01 10       	cpse	r0, r1
    321e:	d8 f7       	brcc	.-10     	; 0x3216 <strnlen_P+0x2>
    3220:	80 95       	com	r24
    3222:	90 95       	com	r25
    3224:	8e 0f       	add	r24, r30
    3226:	9f 1f       	adc	r25, r31
    3228:	08 95       	ret

0000322a <memset>:
    322a:	dc 01       	movw	r26, r24
    322c:	01 c0       	rjmp	.+2      	; 0x3230 <memset+0x6>
    322e:	6d 93       	st	X+, r22
    3230:	41 50       	subi	r20, 0x01	; 1
    3232:	50 40       	sbci	r21, 0x00	; 0
    3234:	e0 f7       	brcc	.-8      	; 0x322e <memset+0x4>
    3236:	08 95       	ret

00003238 <strnlen>:
    3238:	fc 01       	movw	r30, r24
    323a:	61 50       	subi	r22, 0x01	; 1
    323c:	70 40       	sbci	r23, 0x00	; 0
    323e:	01 90       	ld	r0, Z+
    3240:	01 10       	cpse	r0, r1
    3242:	d8 f7       	brcc	.-10     	; 0x323a <strnlen+0x2>
    3244:	80 95       	com	r24
    3246:	90 95       	com	r25
    3248:	8e 0f       	add	r24, r30
    324a:	9f 1f       	adc	r25, r31
    324c:	08 95       	ret

0000324e <fputc>:
    324e:	0f 93       	push	r16
    3250:	1f 93       	push	r17
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	18 2f       	mov	r17, r24
    3258:	09 2f       	mov	r16, r25
    325a:	eb 01       	movw	r28, r22
    325c:	8b 81       	ldd	r24, Y+3	; 0x03
    325e:	81 fd       	sbrc	r24, 1
    3260:	03 c0       	rjmp	.+6      	; 0x3268 <fputc+0x1a>
    3262:	8f ef       	ldi	r24, 0xFF	; 255
    3264:	9f ef       	ldi	r25, 0xFF	; 255
    3266:	20 c0       	rjmp	.+64     	; 0x32a8 <fputc+0x5a>
    3268:	82 ff       	sbrs	r24, 2
    326a:	10 c0       	rjmp	.+32     	; 0x328c <fputc+0x3e>
    326c:	4e 81       	ldd	r20, Y+6	; 0x06
    326e:	5f 81       	ldd	r21, Y+7	; 0x07
    3270:	2c 81       	ldd	r18, Y+4	; 0x04
    3272:	3d 81       	ldd	r19, Y+5	; 0x05
    3274:	42 17       	cp	r20, r18
    3276:	53 07       	cpc	r21, r19
    3278:	7c f4       	brge	.+30     	; 0x3298 <fputc+0x4a>
    327a:	e8 81       	ld	r30, Y
    327c:	f9 81       	ldd	r31, Y+1	; 0x01
    327e:	9f 01       	movw	r18, r30
    3280:	2f 5f       	subi	r18, 0xFF	; 255
    3282:	3f 4f       	sbci	r19, 0xFF	; 255
    3284:	39 83       	std	Y+1, r19	; 0x01
    3286:	28 83       	st	Y, r18
    3288:	10 83       	st	Z, r17
    328a:	06 c0       	rjmp	.+12     	; 0x3298 <fputc+0x4a>
    328c:	e8 85       	ldd	r30, Y+8	; 0x08
    328e:	f9 85       	ldd	r31, Y+9	; 0x09
    3290:	81 2f       	mov	r24, r17
    3292:	09 95       	icall
    3294:	89 2b       	or	r24, r25
    3296:	29 f7       	brne	.-54     	; 0x3262 <fputc+0x14>
    3298:	2e 81       	ldd	r18, Y+6	; 0x06
    329a:	3f 81       	ldd	r19, Y+7	; 0x07
    329c:	2f 5f       	subi	r18, 0xFF	; 255
    329e:	3f 4f       	sbci	r19, 0xFF	; 255
    32a0:	3f 83       	std	Y+7, r19	; 0x07
    32a2:	2e 83       	std	Y+6, r18	; 0x06
    32a4:	81 2f       	mov	r24, r17
    32a6:	90 2f       	mov	r25, r16
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	1f 91       	pop	r17
    32ae:	0f 91       	pop	r16
    32b0:	08 95       	ret

000032b2 <__ultoa_invert>:
    32b2:	fa 01       	movw	r30, r20
    32b4:	aa 27       	eor	r26, r26
    32b6:	28 30       	cpi	r18, 0x08	; 8
    32b8:	51 f1       	breq	.+84     	; 0x330e <__ultoa_invert+0x5c>
    32ba:	20 31       	cpi	r18, 0x10	; 16
    32bc:	81 f1       	breq	.+96     	; 0x331e <__ultoa_invert+0x6c>
    32be:	e8 94       	clt
    32c0:	6f 93       	push	r22
    32c2:	6e 7f       	andi	r22, 0xFE	; 254
    32c4:	6e 5f       	subi	r22, 0xFE	; 254
    32c6:	7f 4f       	sbci	r23, 0xFF	; 255
    32c8:	8f 4f       	sbci	r24, 0xFF	; 255
    32ca:	9f 4f       	sbci	r25, 0xFF	; 255
    32cc:	af 4f       	sbci	r26, 0xFF	; 255
    32ce:	b1 e0       	ldi	r27, 0x01	; 1
    32d0:	3e d0       	rcall	.+124    	; 0x334e <__ultoa_invert+0x9c>
    32d2:	b4 e0       	ldi	r27, 0x04	; 4
    32d4:	3c d0       	rcall	.+120    	; 0x334e <__ultoa_invert+0x9c>
    32d6:	67 0f       	add	r22, r23
    32d8:	78 1f       	adc	r23, r24
    32da:	89 1f       	adc	r24, r25
    32dc:	9a 1f       	adc	r25, r26
    32de:	a1 1d       	adc	r26, r1
    32e0:	68 0f       	add	r22, r24
    32e2:	79 1f       	adc	r23, r25
    32e4:	8a 1f       	adc	r24, r26
    32e6:	91 1d       	adc	r25, r1
    32e8:	a1 1d       	adc	r26, r1
    32ea:	6a 0f       	add	r22, r26
    32ec:	71 1d       	adc	r23, r1
    32ee:	81 1d       	adc	r24, r1
    32f0:	91 1d       	adc	r25, r1
    32f2:	a1 1d       	adc	r26, r1
    32f4:	20 d0       	rcall	.+64     	; 0x3336 <__ultoa_invert+0x84>
    32f6:	09 f4       	brne	.+2      	; 0x32fa <__ultoa_invert+0x48>
    32f8:	68 94       	set
    32fa:	3f 91       	pop	r19
    32fc:	2a e0       	ldi	r18, 0x0A	; 10
    32fe:	26 9f       	mul	r18, r22
    3300:	11 24       	eor	r1, r1
    3302:	30 19       	sub	r19, r0
    3304:	30 5d       	subi	r19, 0xD0	; 208
    3306:	31 93       	st	Z+, r19
    3308:	de f6       	brtc	.-74     	; 0x32c0 <__ultoa_invert+0xe>
    330a:	cf 01       	movw	r24, r30
    330c:	08 95       	ret
    330e:	46 2f       	mov	r20, r22
    3310:	47 70       	andi	r20, 0x07	; 7
    3312:	40 5d       	subi	r20, 0xD0	; 208
    3314:	41 93       	st	Z+, r20
    3316:	b3 e0       	ldi	r27, 0x03	; 3
    3318:	0f d0       	rcall	.+30     	; 0x3338 <__ultoa_invert+0x86>
    331a:	c9 f7       	brne	.-14     	; 0x330e <__ultoa_invert+0x5c>
    331c:	f6 cf       	rjmp	.-20     	; 0x330a <__ultoa_invert+0x58>
    331e:	46 2f       	mov	r20, r22
    3320:	4f 70       	andi	r20, 0x0F	; 15
    3322:	40 5d       	subi	r20, 0xD0	; 208
    3324:	4a 33       	cpi	r20, 0x3A	; 58
    3326:	18 f0       	brcs	.+6      	; 0x332e <__ultoa_invert+0x7c>
    3328:	49 5d       	subi	r20, 0xD9	; 217
    332a:	31 fd       	sbrc	r19, 1
    332c:	40 52       	subi	r20, 0x20	; 32
    332e:	41 93       	st	Z+, r20
    3330:	02 d0       	rcall	.+4      	; 0x3336 <__ultoa_invert+0x84>
    3332:	a9 f7       	brne	.-22     	; 0x331e <__ultoa_invert+0x6c>
    3334:	ea cf       	rjmp	.-44     	; 0x330a <__ultoa_invert+0x58>
    3336:	b4 e0       	ldi	r27, 0x04	; 4
    3338:	a6 95       	lsr	r26
    333a:	97 95       	ror	r25
    333c:	87 95       	ror	r24
    333e:	77 95       	ror	r23
    3340:	67 95       	ror	r22
    3342:	ba 95       	dec	r27
    3344:	c9 f7       	brne	.-14     	; 0x3338 <__ultoa_invert+0x86>
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	61 05       	cpc	r22, r1
    334a:	71 05       	cpc	r23, r1
    334c:	08 95       	ret
    334e:	9b 01       	movw	r18, r22
    3350:	ac 01       	movw	r20, r24
    3352:	0a 2e       	mov	r0, r26
    3354:	06 94       	lsr	r0
    3356:	57 95       	ror	r21
    3358:	47 95       	ror	r20
    335a:	37 95       	ror	r19
    335c:	27 95       	ror	r18
    335e:	ba 95       	dec	r27
    3360:	c9 f7       	brne	.-14     	; 0x3354 <__ultoa_invert+0xa2>
    3362:	62 0f       	add	r22, r18
    3364:	73 1f       	adc	r23, r19
    3366:	84 1f       	adc	r24, r20
    3368:	95 1f       	adc	r25, r21
    336a:	a0 1d       	adc	r26, r0
    336c:	08 95       	ret

0000336e <__muluhisi3>:
    336e:	46 d0       	rcall	.+140    	; 0x33fc <__umulhisi3>
    3370:	a5 9f       	mul	r26, r21
    3372:	90 0d       	add	r25, r0
    3374:	b4 9f       	mul	r27, r20
    3376:	90 0d       	add	r25, r0
    3378:	a4 9f       	mul	r26, r20
    337a:	80 0d       	add	r24, r0
    337c:	91 1d       	adc	r25, r1
    337e:	11 24       	eor	r1, r1
    3380:	08 95       	ret

00003382 <__mulshisi3>:
    3382:	b7 ff       	sbrs	r27, 7
    3384:	f4 cf       	rjmp	.-24     	; 0x336e <__muluhisi3>

00003386 <__mulohisi3>:
    3386:	f3 df       	rcall	.-26     	; 0x336e <__muluhisi3>
    3388:	82 1b       	sub	r24, r18
    338a:	93 0b       	sbc	r25, r19
    338c:	08 95       	ret

0000338e <__prologue_saves__>:
    338e:	2f 92       	push	r2
    3390:	3f 92       	push	r3
    3392:	4f 92       	push	r4
    3394:	5f 92       	push	r5
    3396:	6f 92       	push	r6
    3398:	7f 92       	push	r7
    339a:	8f 92       	push	r8
    339c:	9f 92       	push	r9
    339e:	af 92       	push	r10
    33a0:	bf 92       	push	r11
    33a2:	cf 92       	push	r12
    33a4:	df 92       	push	r13
    33a6:	ef 92       	push	r14
    33a8:	ff 92       	push	r15
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	ca 1b       	sub	r28, r26
    33b8:	db 0b       	sbc	r29, r27
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	09 94       	ijmp

000033c6 <__epilogue_restores__>:
    33c6:	2a 88       	ldd	r2, Y+18	; 0x12
    33c8:	39 88       	ldd	r3, Y+17	; 0x11
    33ca:	48 88       	ldd	r4, Y+16	; 0x10
    33cc:	5f 84       	ldd	r5, Y+15	; 0x0f
    33ce:	6e 84       	ldd	r6, Y+14	; 0x0e
    33d0:	7d 84       	ldd	r7, Y+13	; 0x0d
    33d2:	8c 84       	ldd	r8, Y+12	; 0x0c
    33d4:	9b 84       	ldd	r9, Y+11	; 0x0b
    33d6:	aa 84       	ldd	r10, Y+10	; 0x0a
    33d8:	b9 84       	ldd	r11, Y+9	; 0x09
    33da:	c8 84       	ldd	r12, Y+8	; 0x08
    33dc:	df 80       	ldd	r13, Y+7	; 0x07
    33de:	ee 80       	ldd	r14, Y+6	; 0x06
    33e0:	fd 80       	ldd	r15, Y+5	; 0x05
    33e2:	0c 81       	ldd	r16, Y+4	; 0x04
    33e4:	1b 81       	ldd	r17, Y+3	; 0x03
    33e6:	aa 81       	ldd	r26, Y+2	; 0x02
    33e8:	b9 81       	ldd	r27, Y+1	; 0x01
    33ea:	ce 0f       	add	r28, r30
    33ec:	d1 1d       	adc	r29, r1
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	ed 01       	movw	r28, r26
    33fa:	08 95       	ret

000033fc <__umulhisi3>:
    33fc:	a2 9f       	mul	r26, r18
    33fe:	b0 01       	movw	r22, r0
    3400:	b3 9f       	mul	r27, r19
    3402:	c0 01       	movw	r24, r0
    3404:	a3 9f       	mul	r26, r19
    3406:	70 0d       	add	r23, r0
    3408:	81 1d       	adc	r24, r1
    340a:	11 24       	eor	r1, r1
    340c:	91 1d       	adc	r25, r1
    340e:	b2 9f       	mul	r27, r18
    3410:	70 0d       	add	r23, r0
    3412:	81 1d       	adc	r24, r1
    3414:	11 24       	eor	r1, r1
    3416:	91 1d       	adc	r25, r1
    3418:	08 95       	ret

0000341a <_exit>:
    341a:	f8 94       	cli

0000341c <__stop_program>:
    341c:	ff cf       	rjmp	.-2      	; 0x341c <__stop_program>
