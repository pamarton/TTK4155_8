
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  00002cda  00002d6e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cda  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009c  00800144  00800144  00002db2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002db2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000430  00000000  00000000  00002e0e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000045c3  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012f0  00000000  00000000  00007801  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000022eb  00000000  00000000  00008af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000be0  00000000  00000000  0000addc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e37  00000000  00000000  0000b9bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002ca6  00000000  00000000  0000c7f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000430  00000000  00000000  0000f499  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	09 c2       	rjmp	.+1042   	; 0x414 <__ctors_end>
       2:	00 00       	nop
       4:	9e c3       	rjmp	.+1852   	; 0x742 <__vector_1>
       6:	00 00       	nop
       8:	ab c3       	rjmp	.+1878   	; 0x760 <__vector_2>
       a:	00 00       	nop
       c:	31 c2       	rjmp	.+1122   	; 0x470 <__vector_3>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c2       	rjmp	.+1078   	; 0x44c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c2       	rjmp	.+1074   	; 0x44c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c2       	rjmp	.+1070   	; 0x44c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c2       	rjmp	.+1066   	; 0x44c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c2       	rjmp	.+1062   	; 0x44c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c2       	rjmp	.+1058   	; 0x44c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c2       	rjmp	.+1054   	; 0x44c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c2       	rjmp	.+1050   	; 0x44c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c2       	rjmp	.+1046   	; 0x44c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c2       	rjmp	.+1042   	; 0x44c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c2       	rjmp	.+1038   	; 0x44c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <__vector_16>
      44:	03 c2       	rjmp	.+1030   	; 0x44c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c2       	rjmp	.+1026   	; 0x44c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c1       	rjmp	.+1018   	; 0x44c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c1       	rjmp	.+1014   	; 0x44c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c1       	rjmp	.+1010   	; 0x44c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c1       	rjmp	.+1006   	; 0x44c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c1       	rjmp	.+1002   	; 0x44c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c1       	rjmp	.+998    	; 0x44c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c1       	rjmp	.+994    	; 0x44c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c1       	rjmp	.+990    	; 0x44c <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	11 e0       	ldi	r17, 0x01	; 1
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	ea ed       	ldi	r30, 0xDA	; 218
     428:	fc e2       	ldi	r31, 0x2C	; 44
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	a4 34       	cpi	r26, 0x44	; 68
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	a4 e4       	ldi	r26, 0x44	; 68
     43a:	b1 e0       	ldi	r27, 0x01	; 1
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	a0 3e       	cpi	r26, 0xE0	; 224
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	fb d7       	rcall	.+4086   	; 0x143e <main>
     448:	0c 94 6b 16 	jmp	0x2cd6	; 0x2cd6 <_exit>

0000044c <__bad_interrupt>:
     44c:	d9 cd       	rjmp	.-1102   	; 0x0 <__vectors>

0000044e <CAN_construct_message>:
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
}
     44e:	90 93 46 01 	sts	0x0146, r25
     452:	80 93 45 01 	sts	0x0145, r24
     456:	60 93 47 01 	sts	0x0147, r22
     45a:	66 23       	and	r22, r22
     45c:	41 f0       	breq	.+16     	; 0x46e <CAN_construct_message+0x20>
     45e:	88 e4       	ldi	r24, 0x48	; 72
     460:	91 e0       	ldi	r25, 0x01	; 1
     462:	fc 01       	movw	r30, r24
     464:	11 92       	st	Z+, r1
     466:	2e 2f       	mov	r18, r30
     468:	28 1b       	sub	r18, r24
     46a:	26 17       	cp	r18, r22
     46c:	d8 f3       	brcs	.-10     	; 0x464 <CAN_construct_message+0x16>
     46e:	08 95       	ret

00000470 <__vector_3>:
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	8f 93       	push	r24
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 44 01 	sts	0x0144, r24
     482:	8f 91       	pop	r24
     484:	0f 90       	pop	r0
     486:	0f be       	out	0x3f, r0	; 63
     488:	0f 90       	pop	r0
     48a:	1f 90       	pop	r1
     48c:	18 95       	reti

0000048e <CAN_interrupt_setup>:
     48e:	f8 94       	cli
     490:	86 b7       	in	r24, 0x36	; 54
     492:	8e 7f       	andi	r24, 0xFE	; 254
     494:	86 bf       	out	0x36, r24	; 54
     496:	8b b7       	in	r24, 0x3b	; 59
     498:	80 62       	ori	r24, 0x20	; 32
     49a:	8b bf       	out	0x3b, r24	; 59
     49c:	78 94       	sei
     49e:	08 95       	ret

000004a0 <CAN_initialize>:
     4a0:	d0 d0       	rcall	.+416    	; 0x642 <MCP2515_initialize>
     4a2:	68 e0       	ldi	r22, 0x08	; 8
     4a4:	88 e2       	ldi	r24, 0x28	; 40
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	d2 df       	rcall	.-92     	; 0x44e <CAN_construct_message>
     4aa:	4f ef       	ldi	r20, 0xFF	; 255
     4ac:	50 e0       	ldi	r21, 0x00	; 0
     4ae:	64 e6       	ldi	r22, 0x64	; 100
     4b0:	80 e6       	ldi	r24, 0x60	; 96
     4b2:	ae d0       	rcall	.+348    	; 0x610 <MCP2515_bit_modify>
     4b4:	4f ef       	ldi	r20, 0xFF	; 255
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	64 e6       	ldi	r22, 0x64	; 100
     4ba:	80 e7       	ldi	r24, 0x70	; 112
     4bc:	a9 d0       	rcall	.+338    	; 0x610 <MCP2515_bit_modify>
     4be:	41 e0       	ldi	r20, 0x01	; 1
     4c0:	50 e0       	ldi	r21, 0x00	; 0
     4c2:	61 e0       	ldi	r22, 0x01	; 1
     4c4:	8b e2       	ldi	r24, 0x2B	; 43
     4c6:	a4 d0       	rcall	.+328    	; 0x610 <MCP2515_bit_modify>
     4c8:	40 e0       	ldi	r20, 0x00	; 0
     4ca:	50 e0       	ldi	r21, 0x00	; 0
     4cc:	60 ee       	ldi	r22, 0xE0	; 224
     4ce:	8f e0       	ldi	r24, 0x0F	; 15
     4d0:	9f d0       	rcall	.+318    	; 0x610 <MCP2515_bit_modify>
     4d2:	dd cf       	rjmp	.-70     	; 0x48e <CAN_interrupt_setup>
     4d4:	08 95       	ret

000004d6 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     4d6:	cf 93       	push	r28
     4d8:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     4da:	c4 e0       	ldi	r28, 0x04	; 4
     4dc:	d0 e0       	ldi	r29, 0x00	; 0
     4de:	02 c0       	rjmp	.+4      	; 0x4e4 <CAN_transmission_complete+0xe>
     4e0:	cc 0f       	add	r28, r28
     4e2:	dd 1f       	adc	r29, r29
     4e4:	8a 95       	dec	r24
     4e6:	e2 f7       	brpl	.-8      	; 0x4e0 <CAN_transmission_complete+0xa>
     4e8:	8c e2       	ldi	r24, 0x2C	; 44
     4ea:	74 d0       	rcall	.+232    	; 0x5d4 <MCP2515_read>
     4ec:	8c 23       	and	r24, r28
     4ee:	9d 23       	and	r25, r29
     4f0:	89 2b       	or	r24, r25
     4f2:	d1 f3       	breq	.-12     	; 0x4e8 <CAN_transmission_complete+0x12>
	return 1;
}
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	df 91       	pop	r29
     4f8:	cf 91       	pop	r28
     4fa:	08 95       	ret

000004fc <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     4fc:	ff 92       	push	r15
     4fe:	0f 93       	push	r16
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
     508:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     50a:	f6 2e       	mov	r15, r22
     50c:	ff 0c       	add	r15, r15
     50e:	ff 0c       	add	r15, r15
     510:	ff 0c       	add	r15, r15
     512:	ff 0c       	add	r15, r15
     514:	28 81       	ld	r18, Y
     516:	39 81       	ldd	r19, Y+1	; 0x01
     518:	b9 01       	movw	r22, r18
     51a:	75 95       	asr	r23
     51c:	67 95       	ror	r22
     51e:	75 95       	asr	r23
     520:	67 95       	ror	r22
     522:	75 95       	asr	r23
     524:	67 95       	ror	r22
     526:	81 e3       	ldi	r24, 0x31	; 49
     528:	8f 0d       	add	r24, r15
     52a:	45 d0       	rcall	.+138    	; 0x5b6 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     52c:	28 81       	ld	r18, Y
     52e:	39 81       	ldd	r19, Y+1	; 0x01
     530:	b9 01       	movw	r22, r18
     532:	66 0f       	add	r22, r22
     534:	77 1f       	adc	r23, r23
     536:	62 95       	swap	r22
     538:	72 95       	swap	r23
     53a:	70 7f       	andi	r23, 0xF0	; 240
     53c:	76 27       	eor	r23, r22
     53e:	60 7f       	andi	r22, 0xF0	; 240
     540:	76 27       	eor	r23, r22
     542:	82 e3       	ldi	r24, 0x32	; 50
     544:	8f 0d       	add	r24, r15
     546:	37 d0       	rcall	.+110    	; 0x5b6 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     548:	6a 81       	ldd	r22, Y+2	; 0x02
     54a:	6f 70       	andi	r22, 0x0F	; 15
     54c:	70 e0       	ldi	r23, 0x00	; 0
     54e:	85 e3       	ldi	r24, 0x35	; 53
     550:	8f 0d       	add	r24, r15
     552:	31 d0       	rcall	.+98     	; 0x5b6 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     554:	8a 81       	ldd	r24, Y+2	; 0x02
     556:	88 23       	and	r24, r24
     558:	89 f0       	breq	.+34     	; 0x57c <__stack+0x7d>
     55a:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     55c:	86 e3       	ldi	r24, 0x36	; 54
     55e:	f8 0e       	add	r15, r24
     560:	fe 01       	movw	r30, r28
     562:	e1 0f       	add	r30, r17
     564:	f1 1d       	adc	r31, r1
     566:	63 81       	ldd	r22, Z+3	; 0x03
     568:	77 27       	eor	r23, r23
     56a:	67 fd       	sbrc	r22, 7
     56c:	70 95       	com	r23
     56e:	8f 2d       	mov	r24, r15
     570:	81 0f       	add	r24, r17
     572:	21 d0       	rcall	.+66     	; 0x5b6 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     574:	1f 5f       	subi	r17, 0xFF	; 255
     576:	8a 81       	ldd	r24, Y+2	; 0x02
     578:	18 17       	cp	r17, r24
     57a:	90 f3       	brcs	.-28     	; 0x560 <__stack+0x61>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     57c:	80 2f       	mov	r24, r16
     57e:	38 d0       	rcall	.+112    	; 0x5f0 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     580:	80 2f       	mov	r24, r16
     582:	a9 df       	rcall	.-174    	; 0x4d6 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     584:	df 91       	pop	r29
     586:	cf 91       	pop	r28
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	08 95       	ret

00000590 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     590:	20 91 47 01 	lds	r18, 0x0147
     594:	22 23       	and	r18, r18
     596:	59 f0       	breq	.+22     	; 0x5ae <CAN_message_send+0x1e>
     598:	38 2f       	mov	r19, r24
     59a:	a8 e4       	ldi	r26, 0x48	; 72
     59c:	b1 e0       	ldi	r27, 0x01	; 1
     59e:	e8 2f       	mov	r30, r24
     5a0:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     5a2:	81 91       	ld	r24, Z+
     5a4:	8d 93       	st	X+, r24
     5a6:	8e 2f       	mov	r24, r30
     5a8:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5aa:	82 17       	cp	r24, r18
     5ac:	d0 f3       	brcs	.-12     	; 0x5a2 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     5ae:	85 e4       	ldi	r24, 0x45	; 69
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	a4 cf       	rjmp	.-184    	; 0x4fc <CAN_send_byte>
     5b4:	08 95       	ret

000005b6 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	d8 2f       	mov	r29, r24
     5bc:	c6 2f       	mov	r28, r22
     5be:	4e d0       	rcall	.+156    	; 0x65c <SPI_select>
     5c0:	82 e0       	ldi	r24, 0x02	; 2
     5c2:	42 d0       	rcall	.+132    	; 0x648 <SPI_send>
     5c4:	8d 2f       	mov	r24, r29
     5c6:	40 d0       	rcall	.+128    	; 0x648 <SPI_send>
     5c8:	8c 2f       	mov	r24, r28
     5ca:	3e d0       	rcall	.+124    	; 0x648 <SPI_send>
     5cc:	49 d0       	rcall	.+146    	; 0x660 <SPI_deselect>
     5ce:	df 91       	pop	r29
     5d0:	cf 91       	pop	r28
     5d2:	08 95       	ret

000005d4 <MCP2515_read>:
     5d4:	cf 93       	push	r28
     5d6:	c8 2f       	mov	r28, r24
     5d8:	41 d0       	rcall	.+130    	; 0x65c <SPI_select>
     5da:	83 e0       	ldi	r24, 0x03	; 3
     5dc:	35 d0       	rcall	.+106    	; 0x648 <SPI_send>
     5de:	8c 2f       	mov	r24, r28
     5e0:	33 d0       	rcall	.+102    	; 0x648 <SPI_send>
     5e2:	36 d0       	rcall	.+108    	; 0x650 <SPI_receive>
     5e4:	c8 2f       	mov	r28, r24
     5e6:	3c d0       	rcall	.+120    	; 0x660 <SPI_deselect>
     5e8:	8c 2f       	mov	r24, r28
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <MCP2515_request_to_send>:
     5f0:	cf 93       	push	r28
     5f2:	c8 2f       	mov	r28, r24
     5f4:	33 d0       	rcall	.+102    	; 0x65c <SPI_select>
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	c9 01       	movw	r24, r18
     5fc:	02 c0       	rjmp	.+4      	; 0x602 <MCP2515_request_to_send+0x12>
     5fe:	88 0f       	add	r24, r24
     600:	99 1f       	adc	r25, r25
     602:	ca 95       	dec	r28
     604:	e2 f7       	brpl	.-8      	; 0x5fe <MCP2515_request_to_send+0xe>
     606:	80 68       	ori	r24, 0x80	; 128
     608:	1f d0       	rcall	.+62     	; 0x648 <SPI_send>
     60a:	2a d0       	rcall	.+84     	; 0x660 <SPI_deselect>
     60c:	cf 91       	pop	r28
     60e:	08 95       	ret

00000610 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     610:	1f 93       	push	r17
     612:	cf 93       	push	r28
     614:	df 93       	push	r29
     616:	18 2f       	mov	r17, r24
     618:	d6 2f       	mov	r29, r22
     61a:	c4 2f       	mov	r28, r20
	SPI_select();
     61c:	1f d0       	rcall	.+62     	; 0x65c <SPI_select>
	SPI_send(MCP_BITMOD);
     61e:	85 e0       	ldi	r24, 0x05	; 5
     620:	13 d0       	rcall	.+38     	; 0x648 <SPI_send>
	SPI_send(adr);
     622:	81 2f       	mov	r24, r17
     624:	11 d0       	rcall	.+34     	; 0x648 <SPI_send>
	SPI_send(mask);
     626:	8d 2f       	mov	r24, r29
     628:	0f d0       	rcall	.+30     	; 0x648 <SPI_send>
	SPI_send(data);
     62a:	8c 2f       	mov	r24, r28
     62c:	0d d0       	rcall	.+26     	; 0x648 <SPI_send>
	SPI_deselect();
     62e:	18 d0       	rcall	.+48     	; 0x660 <SPI_deselect>
}
     630:	df 91       	pop	r29
     632:	cf 91       	pop	r28
     634:	1f 91       	pop	r17
     636:	08 95       	ret

00000638 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     638:	11 d0       	rcall	.+34     	; 0x65c <SPI_select>
	SPI_send(MCP_RESET);
     63a:	80 ec       	ldi	r24, 0xC0	; 192
     63c:	05 d0       	rcall	.+10     	; 0x648 <SPI_send>
	SPI_deselect();
     63e:	10 c0       	rjmp	.+32     	; 0x660 <SPI_deselect>
     640:	08 95       	ret

00000642 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     642:	10 d0       	rcall	.+32     	; 0x664 <SPI_initialize>
	MCP2515_reset();
     644:	f9 cf       	rjmp	.-14     	; 0x638 <MCP2515_reset>
     646:	08 95       	ret

00000648 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     648:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     64a:	77 9b       	sbis	0x0e, 7	; 14
     64c:	fe cf       	rjmp	.-4      	; 0x64a <SPI_send+0x2>

}
     64e:	08 95       	ret

00000650 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	fa df       	rcall	.-12     	; 0x648 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     654:	77 9b       	sbis	0x0e, 7	; 14
     656:	fe cf       	rjmp	.-4      	; 0x654 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     658:	8f b1       	in	r24, 0x0f	; 15
}
     65a:	08 95       	ret

0000065c <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     65c:	c4 98       	cbi	0x18, 4	; 24
     65e:	08 95       	ret

00000660 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     660:	c4 9a       	sbi	0x18, 4	; 24
     662:	08 95       	ret

00000664 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     664:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     666:	87 b3       	in	r24, 0x17	; 23
     668:	80 6b       	ori	r24, 0xB0	; 176
     66a:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     66c:	8d b1       	in	r24, 0x0d	; 13
     66e:	80 65       	ori	r24, 0x50	; 80
     670:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     672:	f6 cf       	rjmp	.-20     	; 0x660 <SPI_deselect>
     674:	08 95       	ret

00000676 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     676:	5d 9b       	sbis	0x0b, 5	; 11
     678:	fe cf       	rjmp	.-4      	; 0x676 <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     67a:	8c b9       	out	0x0c, r24	; 12
     67c:	08 95       	ret

0000067e <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     67e:	5f 9b       	sbis	0x0b, 7	; 11
     680:	fe cf       	rjmp	.-4      	; 0x67e <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     682:	8c b1       	in	r24, 0x0c	; 12
}
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	08 95       	ret

00000688 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     688:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     68a:	8f e1       	ldi	r24, 0x1F	; 31
     68c:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     68e:	88 e1       	ldi	r24, 0x18	; 24
     690:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     692:	6f e3       	ldi	r22, 0x3F	; 63
     694:	73 e0       	ldi	r23, 0x03	; 3
     696:	8b e3       	ldi	r24, 0x3B	; 59
     698:	93 e0       	ldi	r25, 0x03	; 3
     69a:	0c 94 04 12 	jmp	0x2408	; 0x2408 <fdevopen>
     69e:	08 95       	ret

000006a0 <readADC>:
     6a0:	82 30       	cpi	r24, 0x02	; 2
     6a2:	91 05       	cpc	r25, r1
     6a4:	71 f0       	breq	.+28     	; 0x6c2 <readADC+0x22>
     6a6:	1c f4       	brge	.+6      	; 0x6ae <readADC+0xe>
     6a8:	01 97       	sbiw	r24, 0x01	; 1
     6aa:	39 f0       	breq	.+14     	; 0x6ba <readADC+0x1a>
     6ac:	1c c0       	rjmp	.+56     	; 0x6e6 <readADC+0x46>
     6ae:	83 30       	cpi	r24, 0x03	; 3
     6b0:	91 05       	cpc	r25, r1
     6b2:	59 f0       	breq	.+22     	; 0x6ca <readADC+0x2a>
     6b4:	04 97       	sbiw	r24, 0x04	; 4
     6b6:	69 f0       	breq	.+26     	; 0x6d2 <readADC+0x32>
     6b8:	16 c0       	rjmp	.+44     	; 0x6e6 <readADC+0x46>
     6ba:	84 e1       	ldi	r24, 0x14	; 20
     6bc:	80 93 00 14 	sts	0x1400, r24
     6c0:	0b c0       	rjmp	.+22     	; 0x6d8 <readADC+0x38>
     6c2:	85 e1       	ldi	r24, 0x15	; 21
     6c4:	80 93 00 14 	sts	0x1400, r24
     6c8:	07 c0       	rjmp	.+14     	; 0x6d8 <readADC+0x38>
     6ca:	86 e1       	ldi	r24, 0x16	; 22
     6cc:	80 93 00 14 	sts	0x1400, r24
     6d0:	03 c0       	rjmp	.+6      	; 0x6d8 <readADC+0x38>
     6d2:	87 e1       	ldi	r24, 0x17	; 23
     6d4:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d8:	82 e5       	ldi	r24, 0x52	; 82
     6da:	8a 95       	dec	r24
     6dc:	f1 f7       	brne	.-4      	; 0x6da <readADC+0x3a>
     6de:	80 91 00 14 	lds	r24, 0x1400
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	08 95       	ret
     6e6:	80 e0       	ldi	r24, 0x00	; 0
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	08 95       	ret

000006ec <initalize_interrupts>:
 */ 
#include "button_interrupts.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     6ec:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     6ee:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     6f0:	85 b7       	in	r24, 0x35	; 53
     6f2:	81 60       	ori	r24, 0x01	; 1
     6f4:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     6f6:	85 b7       	in	r24, 0x35	; 53
     6f8:	82 60       	ori	r24, 0x02	; 2
     6fa:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     6fc:	85 b7       	in	r24, 0x35	; 53
     6fe:	84 60       	ori	r24, 0x04	; 4
     700:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     702:	85 b7       	in	r24, 0x35	; 53
     704:	88 60       	ori	r24, 0x08	; 8
     706:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     708:	8b b7       	in	r24, 0x3b	; 59
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     70e:	8b b7       	in	r24, 0x3b	; 59
     710:	80 68       	ori	r24, 0x80	; 128
     712:	8b bf       	out	0x3b, r24	; 59
	
	flag_right_button = 0;
     714:	10 92 6d 01 	sts	0x016D, r1
	flag_left_button = 0;
     718:	10 92 6e 01 	sts	0x016E, r1
     71c:	08 95       	ret

0000071e <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     71e:	80 91 6e 01 	lds	r24, 0x016E
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	19 f4       	brne	.+6      	; 0x72c <check_flag_left+0xe>
	{
		flag_left_button = 0;
     726:	10 92 6e 01 	sts	0x016E, r1
		return 1;
     72a:	08 95       	ret
	}
	return 0;
     72c:	80 e0       	ldi	r24, 0x00	; 0
}
     72e:	08 95       	ret

00000730 <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     730:	80 91 6d 01 	lds	r24, 0x016D
     734:	81 30       	cpi	r24, 0x01	; 1
     736:	19 f4       	brne	.+6      	; 0x73e <check_flag_right+0xe>
	{
		flag_right_button = 0;
     738:	10 92 6d 01 	sts	0x016D, r1
		return 1;
     73c:	08 95       	ret
	}
	return 0;
     73e:	80 e0       	ldi	r24, 0x00	; 0
}
     740:	08 95       	ret

00000742 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     74e:	81 e0       	ldi	r24, 0x01	; 1
     750:	80 93 6d 01 	sts	0x016D, r24
}
     754:	8f 91       	pop	r24
     756:	0f 90       	pop	r0
     758:	0f be       	out	0x3f, r0	; 63
     75a:	0f 90       	pop	r0
     75c:	1f 90       	pop	r1
     75e:	18 95       	reti

00000760 <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     760:	1f 92       	push	r1
     762:	0f 92       	push	r0
     764:	0f b6       	in	r0, 0x3f	; 63
     766:	0f 92       	push	r0
     768:	11 24       	eor	r1, r1
     76a:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     76c:	81 e0       	ldi	r24, 0x01	; 1
     76e:	80 93 6e 01 	sts	0x016E, r24
}
     772:	8f 91       	pop	r24
     774:	0f 90       	pop	r0
     776:	0f be       	out	0x3f, r0	; 63
     778:	0f 90       	pop	r0
     77a:	1f 90       	pop	r1
     77c:	18 95       	reti

0000077e <flappy_loading_screen>:
	sram_write_int(score);
	sram_push();
}

void flappy_render(void);
void flappy_render(void){
     77e:	cf 93       	push	r28
     780:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <sram_init>
     784:	80 e0       	ldi	r24, 0x00	; 0
     786:	a9 d6       	rcall	.+3410   	; 0x14da <oled_goto_line>
     788:	80 e2       	ldi	r24, 0x20	; 32
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	a4 d7       	rcall	.+3912   	; 0x16d6 <sram_write_string>
     78e:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sram_push>
     792:	cc e3       	ldi	r28, 0x3C	; 60
     794:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <timer_check_flag>
     798:	88 23       	and	r24, r24
     79a:	e1 f3       	breq	.-8      	; 0x794 <flappy_loading_screen+0x16>
     79c:	c1 50       	subi	r28, 0x01	; 1
     79e:	d1 f7       	brne	.-12     	; 0x794 <flappy_loading_screen+0x16>
     7a0:	20 e0       	ldi	r18, 0x00	; 0
     7a2:	4c e6       	ldi	r20, 0x6C	; 108
     7a4:	68 e0       	ldi	r22, 0x08	; 8
     7a6:	84 e4       	ldi	r24, 0x44	; 68
     7a8:	e8 d7       	rcall	.+4048   	; 0x177a <sram_draw_new_line>
     7aa:	28 e0       	ldi	r18, 0x08	; 8
     7ac:	4c e6       	ldi	r20, 0x6C	; 108
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	84 e4       	ldi	r24, 0x44	; 68
     7b2:	e3 d7       	rcall	.+4038   	; 0x177a <sram_draw_new_line>
     7b4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sram_push>
     7b8:	c4 e1       	ldi	r28, 0x14	; 20
     7ba:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <timer_check_flag>
     7be:	88 23       	and	r24, r24
     7c0:	e1 f3       	breq	.-8      	; 0x7ba <flappy_loading_screen+0x3c>
     7c2:	c1 50       	subi	r28, 0x01	; 1
     7c4:	d1 f7       	brne	.-12     	; 0x7ba <flappy_loading_screen+0x3c>
     7c6:	82 e0       	ldi	r24, 0x02	; 2
     7c8:	88 d6       	rcall	.+3344   	; 0x14da <oled_goto_line>
     7ca:	84 e4       	ldi	r24, 0x44	; 68
     7cc:	a1 d6       	rcall	.+3394   	; 0x1510 <oled_goto_column>
     7ce:	8e e2       	ldi	r24, 0x2E	; 46
     7d0:	91 e0       	ldi	r25, 0x01	; 1
     7d2:	81 d7       	rcall	.+3842   	; 0x16d6 <sram_write_string>
     7d4:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sram_push>
     7d8:	c8 e7       	ldi	r28, 0x78	; 120
     7da:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <timer_check_flag>
     7de:	88 23       	and	r24, r24
     7e0:	e1 f3       	breq	.-8      	; 0x7da <flappy_loading_screen+0x5c>
     7e2:	c1 50       	subi	r28, 0x01	; 1
     7e4:	d1 f7       	brne	.-12     	; 0x7da <flappy_loading_screen+0x5c>
     7e6:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <sram_init>
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <flappy_render_wall>:
	
}

void flappy_render_wall(uint8_t selected_wall, uint8_t pos){
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	d8 2f       	mov	r29, r24
     7f4:	c6 2f       	mov	r28, r22
	if (selected_wall > SCREEN_HEIGHT-1 -WALL_HOLE){
     7f6:	8c 32       	cpi	r24, 0x2C	; 44
     7f8:	30 f0       	brcs	.+12     	; 0x806 <flappy_render_wall+0x18>
		sram_draw_new_line(pos, 0, pos, SCREEN_HEIGHT-1 -WALL_HOLE);
     7fa:	2b e2       	ldi	r18, 0x2B	; 43
     7fc:	46 2f       	mov	r20, r22
     7fe:	60 e0       	ldi	r22, 0x00	; 0
     800:	8c 2f       	mov	r24, r28
     802:	bb d7       	rcall	.+3958   	; 0x177a <sram_draw_new_line>
     804:	14 c0       	rjmp	.+40     	; 0x82e <flappy_render_wall+0x40>
	}else if(selected_wall < WALL_HOLE){ 
     806:	84 31       	cpi	r24, 0x14	; 20
     808:	30 f4       	brcc	.+12     	; 0x816 <flappy_render_wall+0x28>
		sram_draw_new_line(pos, WALL_HOLE, pos , SCREEN_HEIGHT-1);
     80a:	2f e3       	ldi	r18, 0x3F	; 63
     80c:	46 2f       	mov	r20, r22
     80e:	64 e1       	ldi	r22, 0x14	; 20
     810:	8c 2f       	mov	r24, r28
     812:	b3 d7       	rcall	.+3942   	; 0x177a <sram_draw_new_line>
     814:	0c c0       	rjmp	.+24     	; 0x82e <flappy_render_wall+0x40>
	}else{
		sram_draw_new_line(pos, 0, pos, selected_wall-WALL_HOLE/2);
     816:	26 ef       	ldi	r18, 0xF6	; 246
     818:	28 0f       	add	r18, r24
     81a:	46 2f       	mov	r20, r22
     81c:	60 e0       	ldi	r22, 0x00	; 0
     81e:	8c 2f       	mov	r24, r28
     820:	ac d7       	rcall	.+3928   	; 0x177a <sram_draw_new_line>
		sram_draw_new_line(pos, selected_wall + WALL_HOLE/2, pos , SCREEN_HEIGHT-1);
     822:	6a e0       	ldi	r22, 0x0A	; 10
     824:	6d 0f       	add	r22, r29
     826:	2f e3       	ldi	r18, 0x3F	; 63
     828:	4c 2f       	mov	r20, r28
     82a:	8c 2f       	mov	r24, r28
     82c:	a6 d7       	rcall	.+3916   	; 0x177a <sram_draw_new_line>
	}
}
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <flappy_controll>:

double velocity = 0;
double acceleration = 0.03;
double player_height_accurate = 0;

void flappy_controll(){
     834:	cf 92       	push	r12
     836:	df 92       	push	r13
     838:	ef 92       	push	r14
     83a:	ff 92       	push	r15
	velocity += acceleration;
     83c:	20 91 0c 01 	lds	r18, 0x010C
     840:	30 91 0d 01 	lds	r19, 0x010D
     844:	40 91 0e 01 	lds	r20, 0x010E
     848:	50 91 0f 01 	lds	r21, 0x010F
     84c:	60 91 54 01 	lds	r22, 0x0154
     850:	70 91 55 01 	lds	r23, 0x0155
     854:	80 91 56 01 	lds	r24, 0x0156
     858:	90 91 57 01 	lds	r25, 0x0157
     85c:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__addsf3>
     860:	60 93 54 01 	sts	0x0154, r22
     864:	70 93 55 01 	sts	0x0155, r23
     868:	80 93 56 01 	sts	0x0156, r24
     86c:	90 93 57 01 	sts	0x0157, r25
	if(check_flag_left() | check_flag_right()){
     870:	56 df       	rcall	.-340    	; 0x71e <check_flag_left>
     872:	f8 2e       	mov	r15, r24
     874:	5d df       	rcall	.-326    	; 0x730 <check_flag_right>
     876:	8f 29       	or	r24, r15
     878:	f1 f0       	breq	.+60     	; 0x8b6 <flappy_controll+0x82>
		printf("vel");
     87a:	84 e3       	ldi	r24, 0x34	; 52
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	9f 93       	push	r25
     880:	8f 93       	push	r24
     882:	0e 94 4e 12 	call	0x249c	; 0x249c <printf>
		velocity -= 1;
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e8       	ldi	r20, 0x80	; 128
     88c:	5f e3       	ldi	r21, 0x3F	; 63
     88e:	60 91 54 01 	lds	r22, 0x0154
     892:	70 91 55 01 	lds	r23, 0x0155
     896:	80 91 56 01 	lds	r24, 0x0156
     89a:	90 91 57 01 	lds	r25, 0x0157
     89e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <__subsf3>
     8a2:	60 93 54 01 	sts	0x0154, r22
     8a6:	70 93 55 01 	sts	0x0155, r23
     8aa:	80 93 56 01 	sts	0x0156, r24
     8ae:	90 93 57 01 	sts	0x0157, r25
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
	}
	if(velocity > 1){
     8b6:	c0 90 54 01 	lds	r12, 0x0154
     8ba:	d0 90 55 01 	lds	r13, 0x0155
     8be:	e0 90 56 01 	lds	r14, 0x0156
     8c2:	f0 90 57 01 	lds	r15, 0x0157
     8c6:	20 e0       	ldi	r18, 0x00	; 0
     8c8:	30 e0       	ldi	r19, 0x00	; 0
     8ca:	40 e8       	ldi	r20, 0x80	; 128
     8cc:	5f e3       	ldi	r21, 0x3F	; 63
     8ce:	c7 01       	movw	r24, r14
     8d0:	b6 01       	movw	r22, r12
     8d2:	0e 94 83 10 	call	0x2106	; 0x2106 <__gesf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	6c f4       	brge	.+26     	; 0x8f4 <flappy_controll+0xc0>
		velocity = 1;
     8da:	80 e0       	ldi	r24, 0x00	; 0
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	a0 e8       	ldi	r26, 0x80	; 128
     8e0:	bf e3       	ldi	r27, 0x3F	; 63
     8e2:	80 93 54 01 	sts	0x0154, r24
     8e6:	90 93 55 01 	sts	0x0155, r25
     8ea:	a0 93 56 01 	sts	0x0156, r26
     8ee:	b0 93 57 01 	sts	0x0157, r27
     8f2:	16 c0       	rjmp	.+44     	; 0x920 <flappy_controll+0xec>
	}else if(velocity < -1){
     8f4:	20 e0       	ldi	r18, 0x00	; 0
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	40 e8       	ldi	r20, 0x80	; 128
     8fa:	5f eb       	ldi	r21, 0xBF	; 191
     8fc:	c7 01       	movw	r24, r14
     8fe:	b6 01       	movw	r22, r12
     900:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__cmpsf2>
     904:	88 23       	and	r24, r24
     906:	64 f4       	brge	.+24     	; 0x920 <flappy_controll+0xec>
		velocity = -1;
     908:	80 e0       	ldi	r24, 0x00	; 0
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e8       	ldi	r26, 0x80	; 128
     90e:	bf eb       	ldi	r27, 0xBF	; 191
     910:	80 93 54 01 	sts	0x0154, r24
     914:	90 93 55 01 	sts	0x0155, r25
     918:	a0 93 56 01 	sts	0x0156, r26
     91c:	b0 93 57 01 	sts	0x0157, r27
	}
	player_height_accurate += velocity;
     920:	20 91 54 01 	lds	r18, 0x0154
     924:	30 91 55 01 	lds	r19, 0x0155
     928:	40 91 56 01 	lds	r20, 0x0156
     92c:	50 91 57 01 	lds	r21, 0x0157
     930:	60 91 50 01 	lds	r22, 0x0150
     934:	70 91 51 01 	lds	r23, 0x0151
     938:	80 91 52 01 	lds	r24, 0x0152
     93c:	90 91 53 01 	lds	r25, 0x0153
     940:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__addsf3>
     944:	6b 01       	movw	r12, r22
     946:	7c 01       	movw	r14, r24
     948:	60 93 50 01 	sts	0x0150, r22
     94c:	70 93 51 01 	sts	0x0151, r23
     950:	80 93 52 01 	sts	0x0152, r24
     954:	90 93 53 01 	sts	0x0153, r25
	if(player_height_accurate >= SCREEN_HEIGHT-1){
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	4c e7       	ldi	r20, 0x7C	; 124
     95e:	52 e4       	ldi	r21, 0x42	; 66
     960:	0e 94 83 10 	call	0x2106	; 0x2106 <__gesf2>
     964:	88 23       	and	r24, r24
     966:	24 f0       	brlt	.+8      	; 0x970 <flappy_controll+0x13c>
		game_over = 1;
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	80 93 58 01 	sts	0x0158, r24
     96e:	0c c0       	rjmp	.+24     	; 0x988 <flappy_controll+0x154>
	}else if(player_height_accurate<= 0){
     970:	20 e0       	ldi	r18, 0x00	; 0
     972:	30 e0       	ldi	r19, 0x00	; 0
     974:	a9 01       	movw	r20, r18
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <__cmpsf2>
     97e:	18 16       	cp	r1, r24
     980:	1c f0       	brlt	.+6      	; 0x988 <flappy_controll+0x154>
		game_over = 1;
     982:	81 e0       	ldi	r24, 0x01	; 1
     984:	80 93 58 01 	sts	0x0158, r24
	}
	player_height = (int)player_height_accurate;
     988:	c7 01       	movw	r24, r14
     98a:	b6 01       	movw	r22, r12
     98c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__fixsfsi>
     990:	60 93 59 01 	sts	0x0159, r22
}
     994:	ff 90       	pop	r15
     996:	ef 90       	pop	r14
     998:	df 90       	pop	r13
     99a:	cf 90       	pop	r12
     99c:	08 95       	ret

0000099e <flappy_pixel_collision>:


uint8_t flappy_pixel_collision(void){
	if (ext_ram_adress[PLAYER_POS+((player_height-player_height%8)/8)*128] & (1<<player_height%8)){
     99e:	80 91 59 01 	lds	r24, 0x0159
     9a2:	e8 2f       	mov	r30, r24
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	f5 95       	asr	r31
     9a8:	e7 95       	ror	r30
     9aa:	f5 95       	asr	r31
     9ac:	e7 95       	ror	r30
     9ae:	f5 95       	asr	r31
     9b0:	e7 95       	ror	r30
     9b2:	f6 95       	lsr	r31
     9b4:	fe 2f       	mov	r31, r30
     9b6:	ee 27       	eor	r30, r30
     9b8:	f7 95       	ror	r31
     9ba:	e7 95       	ror	r30
     9bc:	3a 96       	adiw	r30, 0x0a	; 10
     9be:	20 91 10 01 	lds	r18, 0x0110
     9c2:	30 91 11 01 	lds	r19, 0x0111
     9c6:	e2 0f       	add	r30, r18
     9c8:	f3 1f       	adc	r31, r19
     9ca:	20 81       	ld	r18, Z
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	87 70       	andi	r24, 0x07	; 7
     9d0:	a9 01       	movw	r20, r18
     9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <flappy_pixel_collision+0x3a>
     9d4:	55 95       	asr	r21
     9d6:	47 95       	ror	r20
     9d8:	8a 95       	dec	r24
     9da:	e2 f7       	brpl	.-8      	; 0x9d4 <flappy_pixel_collision+0x36>
     9dc:	40 ff       	sbrs	r20, 0
     9de:	06 c0       	rjmp	.+12     	; 0x9ec <flappy_pixel_collision+0x4e>
		printf("C");
     9e0:	83 e4       	ldi	r24, 0x43	; 67
     9e2:	90 e0       	ldi	r25, 0x00	; 0
     9e4:	0e 94 5f 12 	call	0x24be	; 0x24be <putchar>
		return 1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	08 95       	ret
		
	}
	return 0;
     9ec:	80 e0       	ldi	r24, 0x00	; 0
}
     9ee:	08 95       	ret

000009f0 <flappy_scroll_wall>:
uint8_t new_wall = 100;




void flappy_scroll_wall(void){
     9f0:	cf 93       	push	r28
     9f2:	df 93       	push	r29
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
     9f8:	e0 91 10 01 	lds	r30, 0x0110
     9fc:	f0 91 11 01 	lds	r31, 0x0111
     a00:	e8 0f       	add	r30, r24
     a02:	f9 1f       	adc	r31, r25
     a04:	10 82       	st	Z, r1
     a06:	80 58       	subi	r24, 0x80	; 128
     a08:	9f 4f       	sbci	r25, 0xFF	; 255



void flappy_scroll_wall(void){
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
     a0a:	81 15       	cp	r24, r1
     a0c:	24 e0       	ldi	r18, 0x04	; 4
     a0e:	92 07       	cpc	r25, r18
     a10:	99 f7       	brne	.-26     	; 0x9f8 <flappy_scroll_wall+0x8>
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	70 e0       	ldi	r23, 0x00	; 0
uint8_t new_wall = 100;




void flappy_scroll_wall(void){
     a16:	b8 e0       	ldi	r27, 0x08	; 8
     a18:	19 c0       	rjmp	.+50     	; 0xa4c <flappy_scroll_wall+0x5c>
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
     a1a:	20 91 10 01 	lds	r18, 0x0110
     a1e:	30 91 11 01 	lds	r19, 0x0111
     a22:	f9 01       	movw	r30, r18
     a24:	e8 0f       	add	r30, r24
     a26:	f9 1f       	adc	r31, r25
     a28:	ac 01       	movw	r20, r24
     a2a:	4f 5f       	subi	r20, 0xFF	; 255
     a2c:	5f 4f       	sbci	r21, 0xFF	; 255
     a2e:	e9 01       	movw	r28, r18
     a30:	c4 0f       	add	r28, r20
     a32:	d5 1f       	adc	r29, r21
     a34:	28 81       	ld	r18, Y
     a36:	20 83       	st	Z, r18
     a38:	a1 50       	subi	r26, 0x01	; 1
     a3a:	80 58       	subi	r24, 0x80	; 128
     a3c:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     a3e:	a1 11       	cpse	r26, r1
     a40:	ec cf       	rjmp	.-40     	; 0xa1a <flappy_scroll_wall+0x2a>
     a42:	6f 5f       	subi	r22, 0xFF	; 255
     a44:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     a46:	6f 37       	cpi	r22, 0x7F	; 127
     a48:	71 05       	cpc	r23, r1
     a4a:	19 f0       	breq	.+6      	; 0xa52 <flappy_scroll_wall+0x62>
     a4c:	cb 01       	movw	r24, r22
uint8_t new_wall = 100;




void flappy_scroll_wall(void){
     a4e:	ab 2f       	mov	r26, r27
     a50:	e4 cf       	rjmp	.-56     	; 0xa1a <flappy_scroll_wall+0x2a>
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     a52:	8f e7       	ldi	r24, 0x7F	; 127
     a54:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
     a56:	e0 91 10 01 	lds	r30, 0x0110
     a5a:	f0 91 11 01 	lds	r31, 0x0111
     a5e:	e8 0f       	add	r30, r24
     a60:	f9 1f       	adc	r31, r25
     a62:	10 82       	st	Z, r1
     a64:	80 58       	subi	r24, 0x80	; 128
     a66:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     a68:	8f 37       	cpi	r24, 0x7F	; 127
     a6a:	24 e0       	ldi	r18, 0x04	; 4
     a6c:	92 07       	cpc	r25, r18
     a6e:	99 f7       	brne	.-26     	; 0xa56 <flappy_scroll_wall+0x66>
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
	}
	if(new_wall >= difficulity){//if a wall has been removed a new one must be made
     a70:	80 91 0a 01 	lds	r24, 0x010A
     a74:	90 91 0b 01 	lds	r25, 0x010B
     a78:	89 17       	cp	r24, r25
     a7a:	a8 f0       	brcs	.+42     	; 0xaa6 <flappy_scroll_wall+0xb6>
		flappy_render_wall(rand()%(SCREEN_HEIGHT-WALL_HOLE/2)+WALL_HOLE/4,127);
     a7c:	0e 94 ef 11 	call	0x23de	; 0x23de <rand>
     a80:	66 e3       	ldi	r22, 0x36	; 54
     a82:	70 e0       	ldi	r23, 0x00	; 0
     a84:	0e 94 41 11 	call	0x2282	; 0x2282 <__divmodhi4>
     a88:	6f e7       	ldi	r22, 0x7F	; 127
     a8a:	8b 5f       	subi	r24, 0xFB	; 251
     a8c:	b0 de       	rcall	.-672    	; 0x7ee <flappy_render_wall>
		new_wall = 0;
     a8e:	10 92 0a 01 	sts	0x010A, r1
		score++;
     a92:	80 91 5b 01 	lds	r24, 0x015B
     a96:	90 91 5c 01 	lds	r25, 0x015C
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	90 93 5c 01 	sts	0x015C, r25
     aa0:	80 93 5b 01 	sts	0x015B, r24
     aa4:	03 c0       	rjmp	.+6      	; 0xaac <flappy_scroll_wall+0xbc>
	}else{
		new_wall++;
     aa6:	8f 5f       	subi	r24, 0xFF	; 255
     aa8:	80 93 0a 01 	sts	0x010A, r24
	}
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	08 95       	ret

00000ab2 <flappy_game>:
#define DEATH_CROSS 5
	
volatile char *ext_ram_adress = (char *) 0x1800;
uint8_t player_height = 0;
uint8_t game_over = 0;
void flappy_game(void){
     ab2:	af 92       	push	r10
     ab4:	bf 92       	push	r11
     ab6:	cf 92       	push	r12
     ab8:	df 92       	push	r13
     aba:	ef 92       	push	r14
     abc:	ff 92       	push	r15
     abe:	0f 93       	push	r16
     ac0:	1f 93       	push	r17
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
	sram_push();
     ac6:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sram_push>
		if(check_flag_left()){//PAUSE
			oled_goto_line(0);
			oled_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			for (uint8_t i = 5; i > 1; i--)
     aca:	0f 2e       	mov	r0, r31
     acc:	f5 e0       	ldi	r31, 0x05	; 5
     ace:	af 2e       	mov	r10, r31
     ad0:	f0 2d       	mov	r31, r0
			{
				oled_goto_line(i);
				oled_goto_column(0);
				printf("%i",tempscore%10);
     ad2:	0f 2e       	mov	r0, r31
     ad4:	fa e0       	ldi	r31, 0x0A	; 10
     ad6:	cf 2e       	mov	r12, r31
     ad8:	d1 2c       	mov	r13, r1
     ada:	f0 2d       	mov	r31, r0
     adc:	0f 2e       	mov	r0, r31
     ade:	f8 e3       	ldi	r31, 0x38	; 56
     ae0:	ef 2e       	mov	r14, r31
     ae2:	f1 e0       	ldi	r31, 0x01	; 1
     ae4:	ff 2e       	mov	r15, r31
     ae6:	f0 2d       	mov	r31, r0
volatile char *ext_ram_adress = (char *) 0x1800;
uint8_t player_height = 0;
uint8_t game_over = 0;
void flappy_game(void){
	sram_push();
	while (!flappy_pixel_collision() && !game_over)
     ae8:	4b c0       	rjmp	.+150    	; 0xb80 <flappy_game+0xce>
	
	{
		if(timer_check_flag()){
     aea:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <timer_check_flag>
     aee:	88 23       	and	r24, r24
     af0:	41 f0       	breq	.+16     	; 0xb02 <flappy_game+0x50>
			flappy_controll();
     af2:	a0 de       	rcall	.-704    	; 0x834 <flappy_controll>
			sram_pixel(PLAYER_POS,player_height);
     af4:	60 91 59 01 	lds	r22, 0x0159
     af8:	8a e0       	ldi	r24, 0x0A	; 10
     afa:	23 d6       	rcall	.+3142   	; 0x1742 <sram_pixel>
			flappy_scroll_wall();
     afc:	79 df       	rcall	.-270    	; 0x9f0 <flappy_scroll_wall>
			sram_push();
     afe:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <sram_push>
		}
		if(check_flag_left()){//PAUSE
     b02:	0d de       	rcall	.-998    	; 0x71e <check_flag_left>
     b04:	88 23       	and	r24, r24
     b06:	09 f4       	brne	.+2      	; 0xb0a <flappy_game+0x58>
     b08:	3b c0       	rjmp	.+118    	; 0xb80 <flappy_game+0xce>
			oled_goto_line(0);
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	e6 d4       	rcall	.+2508   	; 0x14da <oled_goto_line>
			oled_goto_column(0);
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	ff d4       	rcall	.+2558   	; 0x1510 <oled_goto_column>
			sram_write_char('S');
     b12:	83 e5       	ldi	r24, 0x53	; 83
     b14:	a5 d5       	rcall	.+2890   	; 0x1660 <sram_write_char>
			int tempscore = score;
     b16:	00 91 5b 01 	lds	r16, 0x015B
     b1a:	10 91 5c 01 	lds	r17, 0x015C
			for (uint8_t i = 5; i > 1; i--)
     b1e:	ba 2c       	mov	r11, r10
			{
				oled_goto_line(i);
     b20:	8b 2d       	mov	r24, r11
     b22:	db d4       	rcall	.+2486   	; 0x14da <oled_goto_line>
				oled_goto_column(0);
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	f4 d4       	rcall	.+2536   	; 0x1510 <oled_goto_column>
				printf("%i",tempscore%10);
     b28:	c8 01       	movw	r24, r16
     b2a:	b6 01       	movw	r22, r12
     b2c:	0e 94 41 11 	call	0x2282	; 0x2282 <__divmodhi4>
     b30:	ec 01       	movw	r28, r24
     b32:	df 93       	push	r29
     b34:	cf 93       	push	r28
     b36:	ff 92       	push	r15
     b38:	ef 92       	push	r14
     b3a:	0e 94 4e 12 	call	0x249c	; 0x249c <printf>
				if(tempscore != 0){
     b3e:	0f 90       	pop	r0
     b40:	0f 90       	pop	r0
     b42:	0f 90       	pop	r0
     b44:	0f 90       	pop	r0
     b46:	01 15       	cp	r16, r1
     b48:	11 05       	cpc	r17, r1
     b4a:	51 f0       	breq	.+20     	; 0xb60 <flappy_game+0xae>
					sram_write_char('0'+(tempscore%10));
     b4c:	8c 2f       	mov	r24, r28
     b4e:	80 5d       	subi	r24, 0xD0	; 208
     b50:	87 d5       	rcall	.+2830   	; 0x1660 <sram_write_char>
					tempscore -= tempscore%10;
     b52:	c8 01       	movw	r24, r16
     b54:	8c 1b       	sub	r24, r28
     b56:	9d 0b       	sbc	r25, r29
					tempscore /= 10;
     b58:	b6 01       	movw	r22, r12
     b5a:	0e 94 41 11 	call	0x2282	; 0x2282 <__divmodhi4>
     b5e:	8b 01       	movw	r16, r22
		if(check_flag_left()){//PAUSE
			oled_goto_line(0);
			oled_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			for (uint8_t i = 5; i > 1; i--)
     b60:	ba 94       	dec	r11
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	b8 12       	cpse	r11, r24
     b66:	dc cf       	rjmp	.-72     	; 0xb20 <flappy_game+0x6e>
					tempscore -= tempscore%10;
					tempscore /= 10;
				}
				
			}
			oled_goto_line(7);
     b68:	87 e0       	ldi	r24, 0x07	; 7
     b6a:	b7 d4       	rcall	.+2414   	; 0x14da <oled_goto_line>
			oled_goto_column(0);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	d0 d4       	rcall	.+2464   	; 0x1510 <oled_goto_column>
			sram_write_char('P');
     b70:	80 e5       	ldi	r24, 0x50	; 80
     b72:	76 d5       	rcall	.+2796   	; 0x1660 <sram_write_char>
			sram_push();
     b74:	e5 d7       	rcall	.+4042   	; 0x1b40 <sram_push>
			while(!(check_flag_left() | check_flag_right())){
     b76:	d3 dd       	rcall	.-1114   	; 0x71e <check_flag_left>
     b78:	c8 2f       	mov	r28, r24
     b7a:	da dd       	rcall	.-1100   	; 0x730 <check_flag_right>
     b7c:	8c 2b       	or	r24, r28
     b7e:	d9 f3       	breq	.-10     	; 0xb76 <flappy_game+0xc4>
volatile char *ext_ram_adress = (char *) 0x1800;
uint8_t player_height = 0;
uint8_t game_over = 0;
void flappy_game(void){
	sram_push();
	while (!flappy_pixel_collision() && !game_over)
     b80:	0e df       	rcall	.-484    	; 0x99e <flappy_pixel_collision>
     b82:	81 11       	cpse	r24, r1
     b84:	05 c0       	rjmp	.+10     	; 0xb90 <flappy_game+0xde>
     b86:	80 91 58 01 	lds	r24, 0x0158
     b8a:	88 23       	and	r24, r24
     b8c:	09 f4       	brne	.+2      	; 0xb90 <flappy_game+0xde>
     b8e:	ad cf       	rjmp	.-166    	; 0xaea <flappy_game+0x38>
			while(!(check_flag_left() | check_flag_right())){
				
			}
		}
	}
	sram_draw_new_line(PLAYER_POS-DEATH_CROSS,player_height-DEATH_CROSS,PLAYER_POS+DEATH_CROSS,player_height+DEATH_CROSS);
     b90:	60 91 59 01 	lds	r22, 0x0159
     b94:	25 e0       	ldi	r18, 0x05	; 5
     b96:	26 0f       	add	r18, r22
     b98:	65 50       	subi	r22, 0x05	; 5
     b9a:	4f e0       	ldi	r20, 0x0F	; 15
     b9c:	85 e0       	ldi	r24, 0x05	; 5
     b9e:	ed d5       	rcall	.+3034   	; 0x177a <sram_draw_new_line>
	sram_draw_new_line(PLAYER_POS-DEATH_CROSS,player_height+DEATH_CROSS,PLAYER_POS+DEATH_CROSS,player_height-DEATH_CROSS);
     ba0:	60 91 59 01 	lds	r22, 0x0159
     ba4:	2b ef       	ldi	r18, 0xFB	; 251
     ba6:	26 0f       	add	r18, r22
     ba8:	6b 5f       	subi	r22, 0xFB	; 251
     baa:	4f e0       	ldi	r20, 0x0F	; 15
     bac:	85 e0       	ldi	r24, 0x05	; 5
     bae:	e5 d5       	rcall	.+3018   	; 0x177a <sram_draw_new_line>
	sram_draw_new_circle(PLAYER_POS,player_height,7);
     bb0:	47 e0       	ldi	r20, 0x07	; 7
     bb2:	60 91 59 01 	lds	r22, 0x0159
     bb6:	8a e0       	ldi	r24, 0x0A	; 10
     bb8:	e5 d6       	rcall	.+3530   	; 0x1984 <sram_draw_new_circle>
	oled_goto_line(7);
     bba:	87 e0       	ldi	r24, 0x07	; 7
     bbc:	8e d4       	rcall	.+2332   	; 0x14da <oled_goto_line>
	oled_goto_column(FONT_WIDTH*4);
     bbe:	80 e2       	ldi	r24, 0x20	; 32
     bc0:	a7 d4       	rcall	.+2382   	; 0x1510 <oled_goto_column>
	sram_write_string("SCORE: ");
     bc2:	8b e3       	ldi	r24, 0x3B	; 59
     bc4:	91 e0       	ldi	r25, 0x01	; 1
     bc6:	87 d5       	rcall	.+2830   	; 0x16d6 <sram_write_string>
	sram_write_int(score);
     bc8:	80 91 5b 01 	lds	r24, 0x015B
     bcc:	90 91 5c 01 	lds	r25, 0x015C
     bd0:	96 d5       	rcall	.+2860   	; 0x16fe <sram_write_int>
	sram_push();
     bd2:	b6 d7       	rcall	.+3948   	; 0x1b40 <sram_push>
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	08 95       	ret

00000bea <flappy_main>:
#define FONT_WIDTH 8
int score = 0;
uint8_t quit = 0;
uint8_t pause = 0;
int flappy_main(void){
	srand(TCNT0); //using the clock counter for this, to give an aproximated random value each time
     bea:	82 b7       	in	r24, 0x32	; 50
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <srand>
	flappy_loading_screen();
     bf2:	c5 dd       	rcall	.-1142   	; 0x77e <flappy_loading_screen>
	
	while (quit != 1)
     bf4:	80 91 5a 01 	lds	r24, 0x015A
     bf8:	81 30       	cpi	r24, 0x01	; 1
     bfa:	31 f0       	breq	.+12     	; 0xc08 <flappy_main+0x1e>
	{
		flappy_game();
     bfc:	5a df       	rcall	.-332    	; 0xab2 <flappy_game>
		if (check_flag_right())
     bfe:	98 dd       	rcall	.-1232   	; 0x730 <check_flag_right>
uint8_t pause = 0;
int flappy_main(void){
	srand(TCNT0); //using the clock counter for this, to give an aproximated random value each time
	flappy_loading_screen();
	
	while (quit != 1)
     c00:	80 91 5a 01 	lds	r24, 0x015A
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	d1 f7       	brne	.-12     	; 0xbfc <flappy_main+0x12>
		}
	}
	
	uint8_t restart = 0;
	return restart;
}
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	90 e0       	ldi	r25, 0x00	; 0
     c0c:	08 95       	ret

00000c0e <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
     c0e:	0f 93       	push	r16
     c10:	1f 93       	push	r17
     c12:	cf 93       	push	r28
     c14:	df 93       	push	r29
     c16:	c4 e6       	ldi	r28, 0x64	; 100
     c18:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     c1a:	00 91 67 01 	lds	r16, 0x0167
     c1e:	10 91 68 01 	lds	r17, 0x0168
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	3c dd       	rcall	.-1416   	; 0x6a0 <readADC>
     c28:	01 58       	subi	r16, 0x81	; 129
     c2a:	1f 4f       	sbci	r17, 0xFF	; 255
     c2c:	08 1b       	sub	r16, r24
     c2e:	19 0b       	sbc	r17, r25
     c30:	10 93 68 01 	sts	0x0168, r17
     c34:	00 93 67 01 	sts	0x0167, r16
		calibrate_y += 127 - readADC(2);
     c38:	00 91 65 01 	lds	r16, 0x0165
     c3c:	10 91 66 01 	lds	r17, 0x0166
     c40:	82 e0       	ldi	r24, 0x02	; 2
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	2d dd       	rcall	.-1446   	; 0x6a0 <readADC>
     c46:	01 58       	subi	r16, 0x81	; 129
     c48:	1f 4f       	sbci	r17, 0xFF	; 255
     c4a:	08 1b       	sub	r16, r24
     c4c:	19 0b       	sbc	r17, r25
     c4e:	10 93 66 01 	sts	0x0166, r17
     c52:	00 93 65 01 	sts	0x0165, r16
     c56:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     c58:	20 97       	sbiw	r28, 0x00	; 0
     c5a:	f9 f6       	brne	.-66     	; 0xc1a <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     c5c:	80 91 67 01 	lds	r24, 0x0167
     c60:	90 91 68 01 	lds	r25, 0x0168
     c64:	24 e6       	ldi	r18, 0x64	; 100
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	b9 01       	movw	r22, r18
     c6a:	0e 94 41 11 	call	0x2282	; 0x2282 <__divmodhi4>
     c6e:	70 93 68 01 	sts	0x0168, r23
     c72:	60 93 67 01 	sts	0x0167, r22
	calibrate_y /= CALIBRATE_READINGS;
     c76:	80 91 65 01 	lds	r24, 0x0165
     c7a:	90 91 66 01 	lds	r25, 0x0166
     c7e:	b9 01       	movw	r22, r18
     c80:	0e 94 41 11 	call	0x2282	; 0x2282 <__divmodhi4>
     c84:	70 93 66 01 	sts	0x0166, r23
     c88:	60 93 65 01 	sts	0x0165, r22
}
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	1f 91       	pop	r17
     c92:	0f 91       	pop	r16
     c94:	08 95       	ret

00000c96 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     c96:	2f 92       	push	r2
     c98:	3f 92       	push	r3
     c9a:	4f 92       	push	r4
     c9c:	5f 92       	push	r5
     c9e:	6f 92       	push	r6
     ca0:	7f 92       	push	r7
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	cf 92       	push	r12
     cac:	df 92       	push	r13
     cae:	ef 92       	push	r14
     cb0:	ff 92       	push	r15
     cb2:	0f 93       	push	r16
     cb4:	1f 93       	push	r17
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	00 d0       	rcall	.+0      	; 0xcbc <signal_to_range+0x26>
     cbc:	00 d0       	rcall	.+0      	; 0xcbe <signal_to_range+0x28>
     cbe:	00 d0       	rcall	.+0      	; 0xcc0 <signal_to_range+0x2a>
     cc0:	cd b7       	in	r28, 0x3d	; 61
     cc2:	de b7       	in	r29, 0x3e	; 62
     cc4:	3c 01       	movw	r6, r24
     cc6:	7a 83       	std	Y+2, r23	; 0x02
     cc8:	69 83       	std	Y+1, r22	; 0x01
     cca:	5c 83       	std	Y+4, r21	; 0x04
     ccc:	4b 83       	std	Y+3, r20	; 0x03
     cce:	3e 83       	std	Y+6, r19	; 0x06
     cd0:	2d 83       	std	Y+5, r18	; 0x05
     cd2:	18 01       	movw	r2, r16
     cd4:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     cd6:	b9 01       	movw	r22, r18
     cd8:	88 27       	eor	r24, r24
     cda:	77 fd       	sbrc	r23, 7
     cdc:	80 95       	com	r24
     cde:	98 2f       	mov	r25, r24
     ce0:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     ce4:	4b 01       	movw	r8, r22
     ce6:	5c 01       	movw	r10, r24
     ce8:	b3 01       	movw	r22, r6
     cea:	6e 0d       	add	r22, r14
     cec:	7f 1d       	adc	r23, r15
     cee:	29 81       	ldd	r18, Y+1	; 0x01
     cf0:	3a 81       	ldd	r19, Y+2	; 0x02
     cf2:	62 1b       	sub	r22, r18
     cf4:	73 0b       	sbc	r23, r19
     cf6:	88 27       	eor	r24, r24
     cf8:	77 fd       	sbrc	r23, 7
     cfa:	80 95       	com	r24
     cfc:	98 2f       	mov	r25, r24
     cfe:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     d02:	2b 01       	movw	r4, r22
     d04:	3c 01       	movw	r6, r24
     d06:	b1 01       	movw	r22, r2
     d08:	8d 81       	ldd	r24, Y+5	; 0x05
     d0a:	9e 81       	ldd	r25, Y+6	; 0x06
     d0c:	68 1b       	sub	r22, r24
     d0e:	79 0b       	sbc	r23, r25
     d10:	88 27       	eor	r24, r24
     d12:	77 fd       	sbrc	r23, 7
     d14:	80 95       	com	r24
     d16:	98 2f       	mov	r25, r24
     d18:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     d1c:	9b 01       	movw	r18, r22
     d1e:	ac 01       	movw	r20, r24
     d20:	c3 01       	movw	r24, r6
     d22:	b2 01       	movw	r22, r4
     d24:	0e 94 87 10 	call	0x210e	; 0x210e <__mulsf3>
     d28:	2b 01       	movw	r4, r22
     d2a:	3c 01       	movw	r6, r24
     d2c:	6b 81       	ldd	r22, Y+3	; 0x03
     d2e:	7c 81       	ldd	r23, Y+4	; 0x04
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	6e 1b       	sub	r22, r30
     d36:	7f 0b       	sbc	r23, r31
     d38:	88 27       	eor	r24, r24
     d3a:	77 fd       	sbrc	r23, 7
     d3c:	80 95       	com	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <__floatsisf>
     d44:	9b 01       	movw	r18, r22
     d46:	ac 01       	movw	r20, r24
     d48:	c3 01       	movw	r24, r6
     d4a:	b2 01       	movw	r22, r4
     d4c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__divsf3>
     d50:	9b 01       	movw	r18, r22
     d52:	ac 01       	movw	r20, r24
     d54:	c5 01       	movw	r24, r10
     d56:	b4 01       	movw	r22, r8
     d58:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <__addsf3>
     d5c:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     d60:	c1 01       	movw	r24, r2
     d62:	80 1b       	sub	r24, r16
     d64:	91 0b       	sbc	r25, r17
     d66:	68 17       	cp	r22, r24
     d68:	79 07       	cpc	r23, r25
     d6a:	74 f5       	brge	.+92     	; 0xdc8 <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     d6c:	8d 81       	ldd	r24, Y+5	; 0x05
     d6e:	9e 81       	ldd	r25, Y+6	; 0x06
     d70:	80 0f       	add	r24, r16
     d72:	91 1f       	adc	r25, r17
     d74:	86 17       	cp	r24, r22
     d76:	97 07       	cpc	r25, r23
     d78:	4c f5       	brge	.+82     	; 0xdcc <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     d7a:	f8 01       	movw	r30, r16
     d7c:	11 23       	and	r17, r17
     d7e:	0c f4       	brge	.+2      	; 0xd82 <signal_to_range+0xec>
     d80:	31 96       	adiw	r30, 0x01	; 1
     d82:	f5 95       	asr	r31
     d84:	e7 95       	ror	r30
     d86:	d8 01       	movw	r26, r16
     d88:	12 c0       	rjmp	.+36     	; 0xdae <signal_to_range+0x118>
     d8a:	8a 0f       	add	r24, r26
     d8c:	9b 1f       	adc	r25, r27
     d8e:	ac 01       	movw	r20, r24
     d90:	4e 0f       	add	r20, r30
     d92:	5f 1f       	adc	r21, r31
     d94:	64 17       	cp	r22, r20
     d96:	75 07       	cpc	r23, r21
     d98:	14 f0       	brlt	.+4      	; 0xd9e <signal_to_range+0x108>
				reference += step;
     d9a:	69 01       	movw	r12, r18
     d9c:	0b c0       	rjmp	.+22     	; 0xdb4 <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     d9e:	c6 01       	movw	r24, r12
     da0:	8e 1b       	sub	r24, r30
     da2:	9f 0b       	sbc	r25, r31
     da4:	86 17       	cp	r24, r22
     da6:	97 07       	cpc	r25, r23
     da8:	14 f0       	brlt	.+4      	; 0xdae <signal_to_range+0x118>
				reference -= step;
     daa:	c0 1a       	sub	r12, r16
     dac:	d1 0a       	sbc	r13, r17
     dae:	c6 01       	movw	r24, r12
     db0:	80 1b       	sub	r24, r16
     db2:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     db4:	96 01       	movw	r18, r12
     db6:	20 0f       	add	r18, r16
     db8:	31 1f       	adc	r19, r17
     dba:	62 17       	cp	r22, r18
     dbc:	73 07       	cpc	r23, r19
     dbe:	2c f7       	brge	.-54     	; 0xd8a <signal_to_range+0xf4>
     dc0:	86 17       	cp	r24, r22
     dc2:	97 07       	cpc	r25, r23
     dc4:	14 f7       	brge	.-60     	; 0xd8a <signal_to_range+0xf4>
     dc6:	04 c0       	rjmp	.+8      	; 0xdd0 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     dc8:	61 01       	movw	r12, r2
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     dcc:	cd 80       	ldd	r12, Y+5	; 0x05
     dce:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     dd0:	c6 01       	movw	r24, r12
     dd2:	26 96       	adiw	r28, 0x06	; 6
     dd4:	0f b6       	in	r0, 0x3f	; 63
     dd6:	f8 94       	cli
     dd8:	de bf       	out	0x3e, r29	; 62
     dda:	0f be       	out	0x3f, r0	; 63
     ddc:	cd bf       	out	0x3d, r28	; 61
     dde:	df 91       	pop	r29
     de0:	cf 91       	pop	r28
     de2:	1f 91       	pop	r17
     de4:	0f 91       	pop	r16
     de6:	ff 90       	pop	r15
     de8:	ef 90       	pop	r14
     dea:	df 90       	pop	r13
     dec:	cf 90       	pop	r12
     dee:	bf 90       	pop	r11
     df0:	af 90       	pop	r10
     df2:	9f 90       	pop	r9
     df4:	8f 90       	pop	r8
     df6:	7f 90       	pop	r7
     df8:	6f 90       	pop	r6
     dfa:	5f 90       	pop	r5
     dfc:	4f 90       	pop	r4
     dfe:	3f 90       	pop	r3
     e00:	2f 90       	pop	r2
     e02:	08 95       	ret

00000e04 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     e04:	af 92       	push	r10
     e06:	bf 92       	push	r11
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ef 92       	push	r14
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
	switch(channel){
     e14:	82 35       	cpi	r24, 0x52	; 82
     e16:	09 f4       	brne	.+2      	; 0xe1a <read_control_input+0x16>
     e18:	6e c0       	rjmp	.+220    	; 0xef6 <read_control_input+0xf2>
     e1a:	20 f4       	brcc	.+8      	; 0xe24 <read_control_input+0x20>
     e1c:	8c 34       	cpi	r24, 0x4C	; 76
     e1e:	09 f4       	brne	.+2      	; 0xe22 <read_control_input+0x1e>
     e20:	4a c0       	rjmp	.+148    	; 0xeb6 <read_control_input+0xb2>
     e22:	89 c0       	rjmp	.+274    	; 0xf36 <read_control_input+0x132>
     e24:	88 35       	cpi	r24, 0x58	; 88
     e26:	19 f0       	breq	.+6      	; 0xe2e <read_control_input+0x2a>
     e28:	89 35       	cpi	r24, 0x59	; 89
     e2a:	19 f1       	breq	.+70     	; 0xe72 <read_control_input+0x6e>
     e2c:	84 c0       	rjmp	.+264    	; 0xf36 <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     e2e:	c0 90 63 01 	lds	r12, 0x0163
     e32:	d0 90 64 01 	lds	r13, 0x0164
     e36:	e0 90 67 01 	lds	r14, 0x0167
     e3a:	f0 90 68 01 	lds	r15, 0x0168
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	2e dc       	rcall	.-1956   	; 0x6a0 <readADC>
     e44:	0f 2e       	mov	r0, r31
     e46:	fa e0       	ldi	r31, 0x0A	; 10
     e48:	af 2e       	mov	r10, r31
     e4a:	b1 2c       	mov	r11, r1
     e4c:	f0 2d       	mov	r31, r0
     e4e:	04 e6       	ldi	r16, 0x64	; 100
     e50:	10 e0       	ldi	r17, 0x00	; 0
     e52:	2c e9       	ldi	r18, 0x9C	; 156
     e54:	3f ef       	ldi	r19, 0xFF	; 255
     e56:	4f ef       	ldi	r20, 0xFF	; 255
     e58:	50 e0       	ldi	r21, 0x00	; 0
     e5a:	60 e0       	ldi	r22, 0x00	; 0
     e5c:	70 e0       	ldi	r23, 0x00	; 0
     e5e:	1b df       	rcall	.-458    	; 0xc96 <signal_to_range>
     e60:	90 93 64 01 	sts	0x0164, r25
     e64:	80 93 63 01 	sts	0x0163, r24
			return ref_X;
     e68:	80 91 63 01 	lds	r24, 0x0163
     e6c:	90 91 64 01 	lds	r25, 0x0164
     e70:	64 c0       	rjmp	.+200    	; 0xf3a <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     e72:	c0 90 61 01 	lds	r12, 0x0161
     e76:	d0 90 62 01 	lds	r13, 0x0162
     e7a:	e0 90 65 01 	lds	r14, 0x0165
     e7e:	f0 90 66 01 	lds	r15, 0x0166
     e82:	82 e0       	ldi	r24, 0x02	; 2
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	0c dc       	rcall	.-2024   	; 0x6a0 <readADC>
     e88:	0f 2e       	mov	r0, r31
     e8a:	fa e0       	ldi	r31, 0x0A	; 10
     e8c:	af 2e       	mov	r10, r31
     e8e:	b1 2c       	mov	r11, r1
     e90:	f0 2d       	mov	r31, r0
     e92:	04 e6       	ldi	r16, 0x64	; 100
     e94:	10 e0       	ldi	r17, 0x00	; 0
     e96:	2c e9       	ldi	r18, 0x9C	; 156
     e98:	3f ef       	ldi	r19, 0xFF	; 255
     e9a:	4f ef       	ldi	r20, 0xFF	; 255
     e9c:	50 e0       	ldi	r21, 0x00	; 0
     e9e:	60 e0       	ldi	r22, 0x00	; 0
     ea0:	70 e0       	ldi	r23, 0x00	; 0
     ea2:	f9 de       	rcall	.-526    	; 0xc96 <signal_to_range>
     ea4:	90 93 62 01 	sts	0x0162, r25
     ea8:	80 93 61 01 	sts	0x0161, r24
			return ref_Y;
     eac:	80 91 61 01 	lds	r24, 0x0161
     eb0:	90 91 62 01 	lds	r25, 0x0162
     eb4:	42 c0       	rjmp	.+132    	; 0xf3a <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     eb6:	c0 90 5f 01 	lds	r12, 0x015F
     eba:	d0 90 60 01 	lds	r13, 0x0160
     ebe:	83 e0       	ldi	r24, 0x03	; 3
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	ee db       	rcall	.-2084   	; 0x6a0 <readADC>
     ec4:	0f 2e       	mov	r0, r31
     ec6:	fa e0       	ldi	r31, 0x0A	; 10
     ec8:	af 2e       	mov	r10, r31
     eca:	b1 2c       	mov	r11, r1
     ecc:	f0 2d       	mov	r31, r0
     ece:	e1 2c       	mov	r14, r1
     ed0:	f1 2c       	mov	r15, r1
     ed2:	04 e6       	ldi	r16, 0x64	; 100
     ed4:	10 e0       	ldi	r17, 0x00	; 0
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	4f ef       	ldi	r20, 0xFF	; 255
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	60 e0       	ldi	r22, 0x00	; 0
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	d9 de       	rcall	.-590    	; 0xc96 <signal_to_range>
     ee4:	90 93 60 01 	sts	0x0160, r25
     ee8:	80 93 5f 01 	sts	0x015F, r24
		return ref_L;
     eec:	80 91 5f 01 	lds	r24, 0x015F
     ef0:	90 91 60 01 	lds	r25, 0x0160
     ef4:	22 c0       	rjmp	.+68     	; 0xf3a <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
     ef6:	c0 90 5d 01 	lds	r12, 0x015D
     efa:	d0 90 5e 01 	lds	r13, 0x015E
     efe:	84 e0       	ldi	r24, 0x04	; 4
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	ce db       	rcall	.-2148   	; 0x6a0 <readADC>
     f04:	0f 2e       	mov	r0, r31
     f06:	fa e0       	ldi	r31, 0x0A	; 10
     f08:	af 2e       	mov	r10, r31
     f0a:	b1 2c       	mov	r11, r1
     f0c:	f0 2d       	mov	r31, r0
     f0e:	e1 2c       	mov	r14, r1
     f10:	f1 2c       	mov	r15, r1
     f12:	04 e6       	ldi	r16, 0x64	; 100
     f14:	10 e0       	ldi	r17, 0x00	; 0
     f16:	20 e0       	ldi	r18, 0x00	; 0
     f18:	30 e0       	ldi	r19, 0x00	; 0
     f1a:	4f ef       	ldi	r20, 0xFF	; 255
     f1c:	50 e0       	ldi	r21, 0x00	; 0
     f1e:	60 e0       	ldi	r22, 0x00	; 0
     f20:	70 e0       	ldi	r23, 0x00	; 0
     f22:	b9 de       	rcall	.-654    	; 0xc96 <signal_to_range>
     f24:	90 93 5e 01 	sts	0x015E, r25
     f28:	80 93 5d 01 	sts	0x015D, r24
			return ref_R;
     f2c:	80 91 5d 01 	lds	r24, 0x015D
     f30:	90 91 5e 01 	lds	r25, 0x015E
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <read_control_input+0x136>
	}
	return 0;
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	90 e0       	ldi	r25, 0x00	; 0
}
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	08 95       	ret

00000f4c <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     f4c:	60 de       	rcall	.-832    	; 0xc0e <calibrate_joystick>
	ref_X = read_control_input('X');
     f4e:	88 e5       	ldi	r24, 0x58	; 88
     f50:	59 df       	rcall	.-334    	; 0xe04 <read_control_input>
     f52:	90 93 64 01 	sts	0x0164, r25
     f56:	80 93 63 01 	sts	0x0163, r24
	ref_Y = read_control_input('Y');
     f5a:	89 e5       	ldi	r24, 0x59	; 89
     f5c:	53 df       	rcall	.-346    	; 0xe04 <read_control_input>
     f5e:	90 93 62 01 	sts	0x0162, r25
     f62:	80 93 61 01 	sts	0x0161, r24
	ref_L = read_control_input('L');
     f66:	8c e4       	ldi	r24, 0x4C	; 76
     f68:	4d df       	rcall	.-358    	; 0xe04 <read_control_input>
     f6a:	90 93 60 01 	sts	0x0160, r25
     f6e:	80 93 5f 01 	sts	0x015F, r24
	ref_R = read_control_input('R');
     f72:	82 e5       	ldi	r24, 0x52	; 82
     f74:	47 df       	rcall	.-370    	; 0xe04 <read_control_input>
     f76:	90 93 5e 01 	sts	0x015E, r25
     f7a:	80 93 5d 01 	sts	0x015D, r24
     f7e:	08 95       	ret

00000f80 <initialize_menu>:
	left_button_flag = 1;
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	cf eb       	ldi	r28, 0xBF	; 191
     f86:	d1 e0       	ldi	r29, 0x01	; 1
     f88:	d0 93 a6 01 	sts	0x01A6, r29
     f8c:	c0 93 a5 01 	sts	0x01A5, r28
     f90:	10 92 a8 01 	sts	0x01A8, r1
     f94:	10 92 a7 01 	sts	0x01A7, r1
     f98:	10 92 aa 01 	sts	0x01AA, r1
     f9c:	10 92 a9 01 	sts	0x01A9, r1
     fa0:	e1 ea       	ldi	r30, 0xA1	; 161
     fa2:	f1 e0       	ldi	r31, 0x01	; 1
     fa4:	8a ee       	ldi	r24, 0xEA	; 234
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	91 83       	std	Z+1, r25	; 0x01
     faa:	80 83       	st	Z, r24
     fac:	83 e0       	ldi	r24, 0x03	; 3
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	90 93 a4 01 	sts	0x01A4, r25
     fb4:	80 93 a3 01 	sts	0x01A3, r24
     fb8:	23 e7       	ldi	r18, 0x73	; 115
     fba:	31 e0       	ldi	r19, 0x01	; 1
     fbc:	30 93 c4 01 	sts	0x01C4, r19
     fc0:	20 93 c3 01 	sts	0x01C3, r18
     fc4:	6b ea       	ldi	r22, 0xAB	; 171
     fc6:	71 e0       	ldi	r23, 0x01	; 1
     fc8:	70 93 c6 01 	sts	0x01C6, r23
     fcc:	60 93 c5 01 	sts	0x01C5, r22
     fd0:	10 92 c8 01 	sts	0x01C8, r1
     fd4:	10 92 c7 01 	sts	0x01C7, r1
     fd8:	44 ee       	ldi	r20, 0xE4	; 228
     fda:	50 e0       	ldi	r21, 0x00	; 0
     fdc:	59 83       	std	Y+1, r21	; 0x01
     fde:	48 83       	st	Y, r20
     fe0:	90 93 c2 01 	sts	0x01C2, r25
     fe4:	80 93 c1 01 	sts	0x01C1, r24
     fe8:	f0 93 78 01 	sts	0x0178, r31
     fec:	e0 93 77 01 	sts	0x0177, r30
     ff0:	cd e8       	ldi	r28, 0x8D	; 141
     ff2:	d1 e0       	ldi	r29, 0x01	; 1
     ff4:	d0 93 7a 01 	sts	0x017A, r29
     ff8:	c0 93 79 01 	sts	0x0179, r28
     ffc:	10 92 7c 01 	sts	0x017C, r1
    1000:	10 92 7b 01 	sts	0x017B, r1
    1004:	4c ed       	ldi	r20, 0xDC	; 220
    1006:	50 e0       	ldi	r21, 0x00	; 0
    1008:	d9 01       	movw	r26, r18
    100a:	4d 93       	st	X+, r20
    100c:	5c 93       	st	X, r21
    100e:	90 93 76 01 	sts	0x0176, r25
    1012:	80 93 75 01 	sts	0x0175, r24
    1016:	27 e9       	ldi	r18, 0x97	; 151
    1018:	31 e0       	ldi	r19, 0x01	; 1
    101a:	30 93 92 01 	sts	0x0192, r19
    101e:	20 93 91 01 	sts	0x0191, r18
    1022:	10 92 94 01 	sts	0x0194, r1
    1026:	10 92 93 01 	sts	0x0193, r1
    102a:	f0 93 96 01 	sts	0x0196, r31
    102e:	e0 93 95 01 	sts	0x0195, r30
    1032:	86 ed       	ldi	r24, 0xD6	; 214
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	99 83       	std	Y+1, r25	; 0x01
    1038:	88 83       	st	Y, r24
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	90 93 90 01 	sts	0x0190, r25
    1042:	80 93 8f 01 	sts	0x018F, r24
    1046:	d0 93 9c 01 	sts	0x019C, r29
    104a:	c0 93 9b 01 	sts	0x019B, r28
    104e:	10 92 9e 01 	sts	0x019E, r1
    1052:	10 92 9d 01 	sts	0x019D, r1
    1056:	f0 93 a0 01 	sts	0x01A0, r31
    105a:	e0 93 9f 01 	sts	0x019F, r30
    105e:	4d ec       	ldi	r20, 0xCD	; 205
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	d9 01       	movw	r26, r18
    1064:	4d 93       	st	X+, r20
    1066:	5c 93       	st	X, r21
    1068:	90 93 9a 01 	sts	0x019A, r25
    106c:	80 93 99 01 	sts	0x0199, r24
    1070:	c5 eb       	ldi	r28, 0xB5	; 181
    1072:	d1 e0       	ldi	r29, 0x01	; 1
    1074:	d0 93 b0 01 	sts	0x01B0, r29
    1078:	c0 93 af 01 	sts	0x01AF, r28
    107c:	10 92 b2 01 	sts	0x01B2, r1
    1080:	10 92 b1 01 	sts	0x01B1, r1
    1084:	f0 93 b4 01 	sts	0x01B4, r31
    1088:	e0 93 b3 01 	sts	0x01B3, r30
    108c:	22 ec       	ldi	r18, 0xC2	; 194
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	db 01       	movw	r26, r22
    1092:	2d 93       	st	X+, r18
    1094:	3c 93       	st	X, r19
    1096:	90 93 ae 01 	sts	0x01AE, r25
    109a:	80 93 ad 01 	sts	0x01AD, r24
    109e:	70 93 ba 01 	sts	0x01BA, r23
    10a2:	60 93 b9 01 	sts	0x01B9, r22
    10a6:	10 92 bc 01 	sts	0x01BC, r1
    10aa:	10 92 bb 01 	sts	0x01BB, r1
    10ae:	f0 93 be 01 	sts	0x01BE, r31
    10b2:	e0 93 bd 01 	sts	0x01BD, r30
    10b6:	28 eb       	ldi	r18, 0xB8	; 184
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	39 83       	std	Y+1, r19	; 0x01
    10bc:	28 83       	st	Y, r18
    10be:	90 93 b8 01 	sts	0x01B8, r25
    10c2:	80 93 b7 01 	sts	0x01B7, r24
    10c6:	f0 93 70 01 	sts	0x0170, r31
    10ca:	e0 93 6f 01 	sts	0x016F, r30
    10ce:	f0 93 72 01 	sts	0x0172, r31
    10d2:	e0 93 71 01 	sts	0x0171, r30
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	fd d1       	rcall	.+1018   	; 0x14da <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
    10e0:	60 ea       	ldi	r22, 0xA0	; 160
    10e2:	70 e0       	ldi	r23, 0x00	; 0
    10e4:	8d e7       	ldi	r24, 0x7D	; 125
    10e6:	91 e0       	ldi	r25, 0x01	; 1
    10e8:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
	sram_write_string(temp);
    10ec:	8d e7       	ldi	r24, 0x7D	; 125
    10ee:	91 e0       	ldi	r25, 0x01	; 1
    10f0:	f2 d2       	rcall	.+1508   	; 0x16d6 <sram_write_string>
	sram_clear_line(1);
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	4b d5       	rcall	.+2710   	; 0x1b8c <sram_clear_line>
	oled_goto_line(2);
    10f6:	82 e0       	ldi	r24, 0x02	; 2
    10f8:	f0 d1       	rcall	.+992    	; 0x14da <oled_goto_line>
	strcpy_P(temp,btn_1);
    10fa:	60 eb       	ldi	r22, 0xB0	; 176
    10fc:	70 e0       	ldi	r23, 0x00	; 0
    10fe:	8d e7       	ldi	r24, 0x7D	; 125
    1100:	91 e0       	ldi	r25, 0x01	; 1
    1102:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
	sram_write_string(temp);
    1106:	8d e7       	ldi	r24, 0x7D	; 125
    1108:	91 e0       	ldi	r25, 0x01	; 1
    110a:	e5 d2       	rcall	.+1482   	; 0x16d6 <sram_write_string>
	sram_push();
    110c:	19 d5       	rcall	.+2610   	; 0x1b40 <sram_push>
	while (!check_flag_right()){
    110e:	08 c0       	rjmp	.+16     	; 0x1120 <menu_set_contrast+0x44>
		write_c(0x81);
    1110:	81 e8       	ldi	r24, 0x81	; 129
    1112:	b6 d1       	rcall	.+876    	; 0x1480 <write_c>
		write_c(readADC(3)/2);
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	c3 da       	rcall	.-2682   	; 0x6a0 <readADC>
    111a:	96 95       	lsr	r25
    111c:	87 95       	ror	r24
    111e:	b0 d1       	rcall	.+864    	; 0x1480 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_push();
	while (!check_flag_right()){
    1120:	07 db       	rcall	.-2546   	; 0x730 <check_flag_right>
    1122:	88 23       	and	r24, r24
    1124:	a9 f3       	breq	.-22     	; 0x1110 <menu_set_contrast+0x34>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	
}
    1126:	08 95       	ret

00001128 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
    1130:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
    1132:	8c 2f       	mov	r24, r28
    1134:	2b d5       	rcall	.+2646   	; 0x1b8c <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
    1136:	cf 5f       	subi	r28, 0xFF	; 255
    1138:	c7 30       	cpi	r28, 0x07	; 7
    113a:	d9 f7       	brne	.-10     	; 0x1132 <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	cd d1       	rcall	.+922    	; 0x14da <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
    1140:	69 e9       	ldi	r22, 0x99	; 153
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	8d e7       	ldi	r24, 0x7D	; 125
    1146:	91 e0       	ldi	r25, 0x01	; 1
    1148:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
	sram_write_string(temp);
    114c:	8d e7       	ldi	r24, 0x7D	; 125
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	c2 d2       	rcall	.+1412   	; 0x16d6 <sram_write_string>
	oled_goto_line(2);
    1152:	82 e0       	ldi	r24, 0x02	; 2
    1154:	c2 d1       	rcall	.+900    	; 0x14da <oled_goto_line>
	strcpy_P(temp,btn_1);
    1156:	60 eb       	ldi	r22, 0xB0	; 176
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	8d e7       	ldi	r24, 0x7D	; 125
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
	sram_write_string(temp);
    1162:	8d e7       	ldi	r24, 0x7D	; 125
    1164:	91 e0       	ldi	r25, 0x01	; 1
    1166:	b7 d2       	rcall	.+1390   	; 0x16d6 <sram_write_string>
	sram_push();
    1168:	eb d4       	rcall	.+2518   	; 0x1b40 <sram_push>
	while (!check_flag_right()){
    116a:	e2 da       	rcall	.-2620   	; 0x730 <check_flag_right>
    116c:	88 23       	and	r24, r24
    116e:	e9 f3       	breq	.-6      	; 0x116a <menu_calibrate_joystick+0x42>
		
	}
	
	
	oled_clear_line(0);
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	d2 d1       	rcall	.+932    	; 0x1518 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
    1174:	6b e8       	ldi	r22, 0x8B	; 139
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	8d e7       	ldi	r24, 0x7D	; 125
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
	sram_write_string(temp);
    1180:	8d e7       	ldi	r24, 0x7D	; 125
    1182:	91 e0       	ldi	r25, 0x01	; 1
    1184:	a8 d2       	rcall	.+1360   	; 0x16d6 <sram_write_string>
    1186:	c0 e7       	ldi	r28, 0x70	; 112
    1188:	d0 e0       	ldi	r29, 0x00	; 0
    118a:	08 e7       	ldi	r16, 0x78	; 120
    118c:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	c3 d1       	rcall	.+902    	; 0x1518 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
    1192:	fe 01       	movw	r30, r28
    1194:	65 91       	lpm	r22, Z+
    1196:	74 91       	lpm	r23, Z
    1198:	8d e7       	ldi	r24, 0x7D	; 125
    119a:	91 e0       	ldi	r25, 0x01	; 1
    119c:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
		sram_write_string(temp);
    11a0:	8d e7       	ldi	r24, 0x7D	; 125
    11a2:	91 e0       	ldi	r25, 0x01	; 1
    11a4:	98 d2       	rcall	.+1328   	; 0x16d6 <sram_write_string>
		sram_push();
    11a6:	cc d4       	rcall	.+2456   	; 0x1b40 <sram_push>
		while (!check_flag_right()){
    11a8:	c3 da       	rcall	.-2682   	; 0x730 <check_flag_right>
    11aa:	88 23       	and	r24, r24
    11ac:	e9 f3       	breq	.-6      	; 0x11a8 <menu_calibrate_joystick+0x80>
    11ae:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
    11b0:	c0 17       	cp	r28, r16
    11b2:	d1 07       	cpc	r29, r17
    11b4:	61 f7       	brne	.-40     	; 0x118e <menu_calibrate_joystick+0x66>
		while (!check_flag_right()){
			
		}
		
	}
    11b6:	df 91       	pop	r29
    11b8:	cf 91       	pop	r28
    11ba:	1f 91       	pop	r17
    11bc:	0f 91       	pop	r16
    11be:	08 95       	ret

000011c0 <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    11c0:	80 91 71 01 	lds	r24, 0x0171
    11c4:	90 91 72 01 	lds	r25, 0x0172
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	87 39       	cpi	r24, 0x97	; 151
    11cc:	92 07       	cpc	r25, r18
    11ce:	11 f4       	brne	.+4      	; 0x11d4 <menu_function_selected+0x14>
		menu_set_contrast();
    11d0:	85 cf       	rjmp	.-246    	; 0x10dc <menu_set_contrast>
    11d2:	08 95       	ret
	}else if(current_selected == &debug_1){
    11d4:	85 5b       	subi	r24, 0xB5	; 181
    11d6:	91 40       	sbci	r25, 0x01	; 1
    11d8:	09 f4       	brne	.+2      	; 0x11dc <menu_function_selected+0x1c>
		menu_calibrate_joystick();
    11da:	a6 cf       	rjmp	.-180    	; 0x1128 <menu_calibrate_joystick>
    11dc:	08 95       	ret

000011de <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
    11de:	89 e5       	ldi	r24, 0x59	; 89
    11e0:	11 de       	rcall	.-990    	; 0xe04 <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
    11e2:	87 34       	cpi	r24, 0x47	; 71
    11e4:	91 05       	cpc	r25, r1
    11e6:	14 f1       	brlt	.+68     	; 0x122c <navigate_menu+0x4e>
    11e8:	20 91 69 01 	lds	r18, 0x0169
    11ec:	24 31       	cpi	r18, 0x14	; 20
    11ee:	f4 f0       	brlt	.+60     	; 0x122c <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    11f0:	e0 91 71 01 	lds	r30, 0x0171
    11f4:	f0 91 72 01 	lds	r31, 0x0172
    11f8:	82 81       	ldd	r24, Z+2	; 0x02
    11fa:	93 81       	ldd	r25, Z+3	; 0x03
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	18 16       	cp	r1, r24
    1200:	19 06       	cpc	r1, r25
    1202:	8c f4       	brge	.+34     	; 0x1226 <navigate_menu+0x48>
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    1208:	04 80       	ldd	r0, Z+4	; 0x04
    120a:	f5 81       	ldd	r31, Z+5	; 0x05
    120c:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    120e:	01 96       	adiw	r24, 0x01	; 1
    1210:	22 81       	ldd	r18, Z+2	; 0x02
    1212:	33 81       	ldd	r19, Z+3	; 0x03
    1214:	21 50       	subi	r18, 0x01	; 1
    1216:	31 09       	sbc	r19, r1
    1218:	82 17       	cp	r24, r18
    121a:	93 07       	cpc	r25, r19
    121c:	ac f3       	brlt	.-22     	; 0x1208 <navigate_menu+0x2a>
    121e:	f0 93 72 01 	sts	0x0172, r31
    1222:	e0 93 71 01 	sts	0x0171, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
    1226:	10 92 69 01 	sts	0x0169, r1
    122a:	1d c0       	rjmp	.+58     	; 0x1266 <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
    122c:	8a 3b       	cpi	r24, 0xBA	; 186
    122e:	2f ef       	ldi	r18, 0xFF	; 255
    1230:	92 07       	cpc	r25, r18
    1232:	8c f4       	brge	.+34     	; 0x1256 <navigate_menu+0x78>
    1234:	20 91 69 01 	lds	r18, 0x0169
    1238:	24 31       	cpi	r18, 0x14	; 20
    123a:	6c f0       	brlt	.+26     	; 0x1256 <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
    123c:	e0 91 71 01 	lds	r30, 0x0171
    1240:	f0 91 72 01 	lds	r31, 0x0172
    1244:	84 81       	ldd	r24, Z+4	; 0x04
    1246:	95 81       	ldd	r25, Z+5	; 0x05
    1248:	90 93 72 01 	sts	0x0172, r25
    124c:	80 93 71 01 	sts	0x0171, r24
		navigation_counter = 0;
    1250:	10 92 69 01 	sts	0x0169, r1
    1254:	08 c0       	rjmp	.+16     	; 0x1266 <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    1256:	8b 5b       	subi	r24, 0xBB	; 187
    1258:	9f 4f       	sbci	r25, 0xFF	; 255
    125a:	8b 38       	cpi	r24, 0x8B	; 139
    125c:	91 05       	cpc	r25, r1
    125e:	18 f4       	brcc	.+6      	; 0x1266 <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
    1260:	83 e1       	ldi	r24, 0x13	; 19
    1262:	80 93 69 01 	sts	0x0169, r24
	}
	if (check_flag_right())
    1266:	64 da       	rcall	.-2872   	; 0x730 <check_flag_right>
    1268:	88 23       	and	r24, r24
    126a:	99 f0       	breq	.+38     	; 0x1292 <navigate_menu+0xb4>
	{
		if(current_selected->ptr_child != NULL){
    126c:	e0 91 71 01 	lds	r30, 0x0171
    1270:	f0 91 72 01 	lds	r31, 0x0172
    1274:	86 81       	ldd	r24, Z+6	; 0x06
    1276:	97 81       	ldd	r25, Z+7	; 0x07
    1278:	00 97       	sbiw	r24, 0x00	; 0
    127a:	49 f0       	breq	.+18     	; 0x128e <navigate_menu+0xb0>
			current_head = current_selected->ptr_child;
    127c:	90 93 70 01 	sts	0x0170, r25
    1280:	80 93 6f 01 	sts	0x016F, r24
			current_selected = current_selected->ptr_child;
    1284:	90 93 72 01 	sts	0x0172, r25
    1288:	80 93 71 01 	sts	0x0171, r24
    128c:	1b c0       	rjmp	.+54     	; 0x12c4 <navigate_menu+0xe6>
		}else{
			menu_function_selected();
    128e:	98 df       	rcall	.-208    	; 0x11c0 <menu_function_selected>
    1290:	19 c0       	rjmp	.+50     	; 0x12c4 <navigate_menu+0xe6>
		}
	}else if (check_flag_left()){
    1292:	45 da       	rcall	.-2934   	; 0x71e <check_flag_left>
    1294:	88 23       	and	r24, r24
    1296:	b1 f0       	breq	.+44     	; 0x12c4 <navigate_menu+0xe6>
		if (current_selected->ptr_parent != NULL){
    1298:	e0 91 71 01 	lds	r30, 0x0171
    129c:	f0 91 72 01 	lds	r31, 0x0172
    12a0:	80 85       	ldd	r24, Z+8	; 0x08
    12a2:	91 85       	ldd	r25, Z+9	; 0x09
    12a4:	00 97       	sbiw	r24, 0x00	; 0
    12a6:	71 f0       	breq	.+28     	; 0x12c4 <navigate_menu+0xe6>
			current_head = current_head->ptr_parent;
    12a8:	e0 91 6f 01 	lds	r30, 0x016F
    12ac:	f0 91 70 01 	lds	r31, 0x0170
    12b0:	20 85       	ldd	r18, Z+8	; 0x08
    12b2:	31 85       	ldd	r19, Z+9	; 0x09
    12b4:	30 93 70 01 	sts	0x0170, r19
    12b8:	20 93 6f 01 	sts	0x016F, r18
			current_selected = current_selected->ptr_parent;
    12bc:	90 93 72 01 	sts	0x0172, r25
    12c0:	80 93 71 01 	sts	0x0171, r24
		}
	}
	return 0;
	
}
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	08 95       	ret

000012ca <menu_update>:
	current_selected = &mainmenu_0;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
    12ca:	0f 93       	push	r16
    12cc:	1f 93       	push	r17
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    12d2:	85 df       	rcall	.-246    	; 0x11de <navigate_menu>
    12d4:	89 2b       	or	r24, r25
    12d6:	09 f0       	breq	.+2      	; 0x12da <menu_update+0x10>
    12d8:	44 c0       	rjmp	.+136    	; 0x1362 <menu_update+0x98>
    12da:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    12dc:	8c 2f       	mov	r24, r28
    12de:	56 d4       	rcall	.+2220   	; 0x1b8c <sram_clear_line>
    12e0:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    12e2:	c7 30       	cpi	r28, 0x07	; 7
    12e4:	d9 f7       	brne	.-10     	; 0x12dc <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
    12e6:	e0 91 6f 01 	lds	r30, 0x016F
    12ea:	f0 91 70 01 	lds	r31, 0x0170
    12ee:	82 81       	ldd	r24, Z+2	; 0x02
    12f0:	93 81       	ldd	r25, Z+3	; 0x03
    12f2:	18 16       	cp	r1, r24
    12f4:	19 06       	cpc	r1, r25
    12f6:	ac f5       	brge	.+106    	; 0x1362 <menu_update+0x98>
    12f8:	c0 e0       	ldi	r28, 0x00	; 0
    12fa:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    12fc:	10 e8       	ldi	r17, 0x80	; 128
    12fe:	01 e8       	ldi	r16, 0x81	; 129
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    1300:	8c 2f       	mov	r24, r28
    1302:	eb d0       	rcall	.+470    	; 0x14da <oled_goto_line>
			oled_goto_column(0);
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	04 d1       	rcall	.+520    	; 0x1510 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    1308:	e0 91 6f 01 	lds	r30, 0x016F
    130c:	f0 91 70 01 	lds	r31, 0x0170
    1310:	60 81       	ld	r22, Z
    1312:	71 81       	ldd	r23, Z+1	; 0x01
    1314:	8d e7       	ldi	r24, 0x7D	; 125
    1316:	91 e0       	ldi	r25, 0x01	; 1
    1318:	0e 94 fd 11 	call	0x23fa	; 0x23fa <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    131c:	20 91 6f 01 	lds	r18, 0x016F
    1320:	30 91 70 01 	lds	r19, 0x0170
    1324:	80 91 71 01 	lds	r24, 0x0171
    1328:	90 91 72 01 	lds	r25, 0x0172
    132c:	28 17       	cp	r18, r24
    132e:	39 07       	cpc	r19, r25
    1330:	11 f4       	brne	.+4      	; 0x1336 <menu_update+0x6c>
    1332:	80 2f       	mov	r24, r16
    1334:	01 c0       	rjmp	.+2      	; 0x1338 <menu_update+0x6e>
    1336:	81 2f       	mov	r24, r17
    1338:	93 d1       	rcall	.+806    	; 0x1660 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    133a:	8d e7       	ldi	r24, 0x7D	; 125
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	cb d1       	rcall	.+918    	; 0x16d6 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    1340:	e0 91 6f 01 	lds	r30, 0x016F
    1344:	f0 91 70 01 	lds	r31, 0x0170
    1348:	04 80       	ldd	r0, Z+4	; 0x04
    134a:	f5 81       	ldd	r31, Z+5	; 0x05
    134c:	e0 2d       	mov	r30, r0
    134e:	f0 93 70 01 	sts	0x0170, r31
    1352:	e0 93 6f 01 	sts	0x016F, r30
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
    1356:	21 96       	adiw	r28, 0x01	; 1
    1358:	82 81       	ldd	r24, Z+2	; 0x02
    135a:	93 81       	ldd	r25, Z+3	; 0x03
    135c:	c8 17       	cp	r28, r24
    135e:	d9 07       	cpc	r29, r25
    1360:	7c f2       	brlt	.-98     	; 0x1300 <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    1362:	02 d5       	rcall	.+2564   	; 0x1d68 <timer_check_flag>
    1364:	88 23       	and	r24, r24
    1366:	51 f0       	breq	.+20     	; 0x137c <menu_update+0xb2>
		navigation_counter++;
    1368:	80 91 69 01 	lds	r24, 0x0169
    136c:	8f 5f       	subi	r24, 0xFF	; 255
    136e:	80 93 69 01 	sts	0x0169, r24
		sram_push();
    1372:	e6 d3       	rcall	.+1996   	; 0x1b40 <sram_push>
		timer_disable_flag();
    1374:	02 d5       	rcall	.+2564   	; 0x1d7a <timer_disable_flag>
		sram_scroll_line(7,1);
    1376:	61 e0       	ldi	r22, 0x01	; 1
    1378:	87 e0       	ldi	r24, 0x07	; 7
    137a:	b0 d4       	rcall	.+2400   	; 0x1cdc <sram_scroll_line>
	}
}
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	08 95       	ret

00001386 <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
    1386:	6d e3       	ldi	r22, 0x3D	; 61
    1388:	89 e0       	ldi	r24, 0x09	; 9
    138a:	b9 d4       	rcall	.+2418   	; 0x1cfe <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
    138c:	61 e0       	ldi	r22, 0x01	; 1
    138e:	89 e0       	ldi	r24, 0x09	; 9
    1390:	e7 d2       	rcall	.+1486   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+15,y-60);
    1392:	61 e0       	ldi	r22, 0x01	; 1
    1394:	87 e2       	ldi	r24, 0x27	; 39
    1396:	e4 d2       	rcall	.+1480   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+15,y-48);
    1398:	6d e0       	ldi	r22, 0x0D	; 13
    139a:	87 e2       	ldi	r24, 0x27	; 39
    139c:	e1 d2       	rcall	.+1474   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-6,y-48);
    139e:	6d e0       	ldi	r22, 0x0D	; 13
    13a0:	82 e1       	ldi	r24, 0x12	; 18
    13a2:	de d2       	rcall	.+1468   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-6,y-12);
    13a4:	61 e3       	ldi	r22, 0x31	; 49
    13a6:	82 e1       	ldi	r24, 0x12	; 18
    13a8:	db d2       	rcall	.+1462   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+6,y-12);
    13aa:	61 e3       	ldi	r22, 0x31	; 49
    13ac:	8e e1       	ldi	r24, 0x1E	; 30
    13ae:	d8 d2       	rcall	.+1456   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+6,y-36);
    13b0:	69 e1       	ldi	r22, 0x19	; 25
    13b2:	8e e1       	ldi	r24, 0x1E	; 30
    13b4:	d5 d2       	rcall	.+1450   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+15,y-36);
    13b6:	69 e1       	ldi	r22, 0x19	; 25
    13b8:	87 e2       	ldi	r24, 0x27	; 39
    13ba:	d2 d2       	rcall	.+1444   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+15,y);
    13bc:	6d e3       	ldi	r22, 0x3D	; 61
    13be:	87 e2       	ldi	r24, 0x27	; 39
    13c0:	cf d2       	rcall	.+1438   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
    13c2:	6d e3       	ldi	r22, 0x3D	; 61
    13c4:	89 e0       	ldi	r24, 0x09	; 9
    13c6:	cc d2       	rcall	.+1432   	; 0x1960 <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    13c8:	21 e0       	ldi	r18, 0x01	; 1
    13ca:	45 e4       	ldi	r20, 0x45	; 69
    13cc:	6d e3       	ldi	r22, 0x3D	; 61
    13ce:	8b e3       	ldi	r24, 0x3B	; 59
    13d0:	9b d4       	rcall	.+2358   	; 0x1d08 <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
    13d2:	61 e0       	ldi	r22, 0x01	; 1
    13d4:	87 e7       	ldi	r24, 0x77	; 119
    13d6:	93 d4       	rcall	.+2342   	; 0x1cfe <sram_set_point>
	sram_draw_line(x-15,y-60);
    13d8:	61 e0       	ldi	r22, 0x01	; 1
    13da:	89 e5       	ldi	r24, 0x59	; 89
    13dc:	c1 d2       	rcall	.+1410   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-12,y-48);
    13de:	6d e0       	ldi	r22, 0x0D	; 13
    13e0:	8c e5       	ldi	r24, 0x5C	; 92
    13e2:	be d2       	rcall	.+1404   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+6,y-48);
    13e4:	6d e0       	ldi	r22, 0x0D	; 13
    13e6:	8e e6       	ldi	r24, 0x6E	; 110
    13e8:	bb d2       	rcall	.+1398   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+3,y-36);
    13ea:	69 e1       	ldi	r22, 0x19	; 25
    13ec:	8b e6       	ldi	r24, 0x6B	; 107
    13ee:	b8 d2       	rcall	.+1392   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-9,y-36);
    13f0:	69 e1       	ldi	r22, 0x19	; 25
    13f2:	8f e5       	ldi	r24, 0x5F	; 95
    13f4:	b5 d2       	rcall	.+1386   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-6,y-24);
    13f6:	65 e2       	ldi	r22, 0x25	; 37
    13f8:	82 e6       	ldi	r24, 0x62	; 98
    13fa:	b2 d2       	rcall	.+1380   	; 0x1960 <sram_draw_line>
	sram_draw_line(x,y-24);
    13fc:	65 e2       	ldi	r22, 0x25	; 37
    13fe:	88 e6       	ldi	r24, 0x68	; 104
    1400:	af d2       	rcall	.+1374   	; 0x1960 <sram_draw_line>
	sram_draw_line(x-3,y-12);
    1402:	61 e3       	ldi	r22, 0x31	; 49
    1404:	85 e6       	ldi	r24, 0x65	; 101
    1406:	ac d2       	rcall	.+1368   	; 0x1960 <sram_draw_line>
	sram_draw_line(x,y);
    1408:	6d e3       	ldi	r22, 0x3D	; 61
    140a:	88 e6       	ldi	r24, 0x68	; 104
    140c:	a9 d2       	rcall	.+1362   	; 0x1960 <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
    140e:	61 e0       	ldi	r22, 0x01	; 1
    1410:	87 e7       	ldi	r24, 0x77	; 119
    1412:	a6 d2       	rcall	.+1356   	; 0x1960 <sram_draw_line>
	
	
	sram_push();
    1414:	95 c3       	rjmp	.+1834   	; 0x1b40 <sram_push>
    1416:	08 95       	ret

00001418 <init_all>:
    }
    
}

void init_all(void){
	cli();
    1418:	f8 94       	cli
	init_UART();
    141a:	36 d9       	rcall	.-3476   	; 0x688 <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
    141c:	85 b7       	in	r24, 0x35	; 53
    141e:	80 68       	ori	r24, 0x80	; 128
    1420:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
    1422:	80 b7       	in	r24, 0x30	; 48
    1424:	80 62       	ori	r24, 0x20	; 32
    1426:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    1428:	90 d0       	rcall	.+288    	; 0x154a <oled_ini>
	sram_init();
    142a:	93 d3       	rcall	.+1830   	; 0x1b52 <sram_init>
	bootscreen();
    142c:	ac df       	rcall	.-168    	; 0x1386 <bootscreen>
	initialize_menu();
    142e:	a8 dd       	rcall	.-1200   	; 0xf80 <initialize_menu>
	
	initialize_control_input();
    1430:	8d dd       	rcall	.-1254   	; 0xf4c <initialize_control_input>
	
	initalize_interrupts();
    1432:	5c d9       	rcall	.-3400   	; 0x6ec <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    1434:	8c e3       	ldi	r24, 0x3C	; 60
    1436:	84 d4       	rcall	.+2312   	; 0x1d40 <initialize_timer>
	
	CAN_initialize();
    1438:	33 d8       	rcall	.-3994   	; 0x4a0 <CAN_initialize>
	
	sei();//enable interrupts
    143a:	78 94       	sei
    143c:	08 95       	ret

0000143e <main>:
void init_all(void);
void bootscreen(void);


int main(void)
{
    143e:	cf 93       	push	r28
    1440:	df 93       	push	r29
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
    1446:	28 97       	sbiw	r28, 0x08	; 8
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
	init_all();
    1452:	e2 df       	rcall	.-60     	; 0x1418 <init_all>
	
	
	flappy_main();
    1454:	ca db       	rcall	.-2156   	; 0xbea <flappy_main>
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
    1456:	88 e0       	ldi	r24, 0x08	; 8
    1458:	e8 e1       	ldi	r30, 0x18	; 24
    145a:	f1 e0       	ldi	r31, 0x01	; 1
    145c:	de 01       	movw	r26, r28
    145e:	11 96       	adiw	r26, 0x01	; 1
    1460:	01 90       	ld	r0, Z+
    1462:	0d 92       	st	X+, r0
    1464:	8a 95       	dec	r24
    1466:	e1 f7       	brne	.-8      	; 0x1460 <main+0x22>

    uint8_t sendCAN = 1;
	uint8_t controller = 0;
    while(1){
	    if(sendCAN){
			controller = read_control_input('X');
    1468:	88 e5       	ldi	r24, 0x58	; 88
    146a:	cc dc       	rcall	.-1640   	; 0xe04 <read_control_input>
			
			
			if(controller != data[0]){
    146c:	99 81       	ldd	r25, Y+1	; 0x01
    146e:	98 17       	cp	r25, r24
    1470:	29 f0       	breq	.+10     	; 0x147c <main+0x3e>
				data[0] = controller;
    1472:	89 83       	std	Y+1, r24	; 0x01
				CAN_message_send(data,0);
    1474:	60 e0       	ldi	r22, 0x00	; 0
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	8a d8       	rcall	.-3820   	; 0x590 <CAN_message_send>
			if (CAN_data_receive())
			{
				
			}		    
	    }
		menu_update();
    147c:	26 df       	rcall	.-436    	; 0x12ca <menu_update>
    }
    147e:	f4 cf       	rjmp	.-24     	; 0x1468 <main+0x2a>

00001480 <write_c>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
    1480:	e0 91 16 01 	lds	r30, 0x0116
    1484:	f0 91 17 01 	lds	r31, 0x0117
    1488:	80 83       	st	Z, r24
    148a:	08 95       	ret

0000148c <oled_home>:
    148c:	10 92 6c 01 	sts	0x016C, r1
    1490:	10 92 6b 01 	sts	0x016B, r1
    1494:	e0 91 16 01 	lds	r30, 0x0116
    1498:	f0 91 17 01 	lds	r31, 0x0117
    149c:	81 e2       	ldi	r24, 0x21	; 33
    149e:	80 83       	st	Z, r24
    14a0:	e0 91 16 01 	lds	r30, 0x0116
    14a4:	f0 91 17 01 	lds	r31, 0x0117
    14a8:	10 82       	st	Z, r1
    14aa:	e0 91 16 01 	lds	r30, 0x0116
    14ae:	f0 91 17 01 	lds	r31, 0x0117
    14b2:	8f e7       	ldi	r24, 0x7F	; 127
    14b4:	80 83       	st	Z, r24
    14b6:	e0 91 16 01 	lds	r30, 0x0116
    14ba:	f0 91 17 01 	lds	r31, 0x0117
    14be:	82 e2       	ldi	r24, 0x22	; 34
    14c0:	80 83       	st	Z, r24
    14c2:	e0 91 16 01 	lds	r30, 0x0116
    14c6:	f0 91 17 01 	lds	r31, 0x0117
    14ca:	10 82       	st	Z, r1
    14cc:	e0 91 16 01 	lds	r30, 0x0116
    14d0:	f0 91 17 01 	lds	r31, 0x0117
    14d4:	87 e0       	ldi	r24, 0x07	; 7
    14d6:	80 83       	st	Z, r24
    14d8:	08 95       	ret

000014da <oled_goto_line>:
    14da:	cf 93       	push	r28
    14dc:	c8 2f       	mov	r28, r24
    14de:	d6 df       	rcall	.-84     	; 0x148c <oled_home>
    14e0:	c0 93 6c 01 	sts	0x016C, r28
    14e4:	8c 2f       	mov	r24, r28
    14e6:	87 70       	andi	r24, 0x07	; 7
    14e8:	89 f0       	breq	.+34     	; 0x150c <oled_goto_line+0x32>
    14ea:	e0 91 16 01 	lds	r30, 0x0116
    14ee:	f0 91 17 01 	lds	r31, 0x0117
    14f2:	10 82       	st	Z, r1
    14f4:	e0 91 16 01 	lds	r30, 0x0116
    14f8:	f0 91 17 01 	lds	r31, 0x0117
    14fc:	80 e1       	ldi	r24, 0x10	; 16
    14fe:	80 83       	st	Z, r24
    1500:	c0 6b       	ori	r28, 0xB0	; 176
    1502:	e0 91 16 01 	lds	r30, 0x0116
    1506:	f0 91 17 01 	lds	r31, 0x0117
    150a:	c0 83       	st	Z, r28
    150c:	cf 91       	pop	r28
    150e:	08 95       	ret

00001510 <oled_goto_column>:
    1510:	8f 77       	andi	r24, 0x7F	; 127
    1512:	80 93 6b 01 	sts	0x016B, r24
    1516:	08 95       	ret

00001518 <oled_clear_line>:
    1518:	cf 93       	push	r28
    151a:	c8 2f       	mov	r28, r24
    151c:	de df       	rcall	.-68     	; 0x14da <oled_goto_line>
    151e:	c8 30       	cpi	r28, 0x08	; 8
    1520:	48 f4       	brcc	.+18     	; 0x1534 <oled_clear_line+0x1c>
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	e0 91 14 01 	lds	r30, 0x0114
    1528:	f0 91 15 01 	lds	r31, 0x0115
    152c:	10 82       	st	Z, r1
    152e:	8f 5f       	subi	r24, 0xFF	; 255
    1530:	80 38       	cpi	r24, 0x80	; 128
    1532:	c1 f7       	brne	.-16     	; 0x1524 <oled_clear_line+0xc>
    1534:	cf 91       	pop	r28
    1536:	08 95       	ret

00001538 <oled_reset>:
    1538:	cf 93       	push	r28
    153a:	c0 e0       	ldi	r28, 0x00	; 0
    153c:	8c 2f       	mov	r24, r28
    153e:	ec df       	rcall	.-40     	; 0x1518 <oled_clear_line>
    1540:	cf 5f       	subi	r28, 0xFF	; 255
    1542:	c8 30       	cpi	r28, 0x08	; 8
    1544:	d9 f7       	brne	.-10     	; 0x153c <oled_reset+0x4>
    1546:	cf 91       	pop	r28
    1548:	08 95       	ret

0000154a <oled_ini>:
    154a:	85 b7       	in	r24, 0x35	; 53
    154c:	80 68       	ori	r24, 0x80	; 128
    154e:	85 bf       	out	0x35, r24	; 53
    1550:	80 b7       	in	r24, 0x30	; 48
    1552:	80 62       	ori	r24, 0x20	; 32
    1554:	80 bf       	out	0x30, r24	; 48
    1556:	e0 91 16 01 	lds	r30, 0x0116
    155a:	f0 91 17 01 	lds	r31, 0x0117
    155e:	8e ea       	ldi	r24, 0xAE	; 174
    1560:	80 83       	st	Z, r24
    1562:	e0 91 16 01 	lds	r30, 0x0116
    1566:	f0 91 17 01 	lds	r31, 0x0117
    156a:	81 ea       	ldi	r24, 0xA1	; 161
    156c:	80 83       	st	Z, r24
    156e:	e0 91 16 01 	lds	r30, 0x0116
    1572:	f0 91 17 01 	lds	r31, 0x0117
    1576:	8a ed       	ldi	r24, 0xDA	; 218
    1578:	80 83       	st	Z, r24
    157a:	e0 91 16 01 	lds	r30, 0x0116
    157e:	f0 91 17 01 	lds	r31, 0x0117
    1582:	82 e1       	ldi	r24, 0x12	; 18
    1584:	80 83       	st	Z, r24
    1586:	e0 91 16 01 	lds	r30, 0x0116
    158a:	f0 91 17 01 	lds	r31, 0x0117
    158e:	88 ec       	ldi	r24, 0xC8	; 200
    1590:	80 83       	st	Z, r24
    1592:	e0 91 16 01 	lds	r30, 0x0116
    1596:	f0 91 17 01 	lds	r31, 0x0117
    159a:	88 ea       	ldi	r24, 0xA8	; 168
    159c:	80 83       	st	Z, r24
    159e:	e0 91 16 01 	lds	r30, 0x0116
    15a2:	f0 91 17 01 	lds	r31, 0x0117
    15a6:	8f e3       	ldi	r24, 0x3F	; 63
    15a8:	80 83       	st	Z, r24
    15aa:	e0 91 16 01 	lds	r30, 0x0116
    15ae:	f0 91 17 01 	lds	r31, 0x0117
    15b2:	85 ed       	ldi	r24, 0xD5	; 213
    15b4:	80 83       	st	Z, r24
    15b6:	e0 91 16 01 	lds	r30, 0x0116
    15ba:	f0 91 17 01 	lds	r31, 0x0117
    15be:	80 e8       	ldi	r24, 0x80	; 128
    15c0:	80 83       	st	Z, r24
    15c2:	e0 91 16 01 	lds	r30, 0x0116
    15c6:	f0 91 17 01 	lds	r31, 0x0117
    15ca:	81 e8       	ldi	r24, 0x81	; 129
    15cc:	80 83       	st	Z, r24
    15ce:	e0 91 16 01 	lds	r30, 0x0116
    15d2:	f0 91 17 01 	lds	r31, 0x0117
    15d6:	80 e5       	ldi	r24, 0x50	; 80
    15d8:	80 83       	st	Z, r24
    15da:	e0 91 16 01 	lds	r30, 0x0116
    15de:	f0 91 17 01 	lds	r31, 0x0117
    15e2:	89 ed       	ldi	r24, 0xD9	; 217
    15e4:	80 83       	st	Z, r24
    15e6:	e0 91 16 01 	lds	r30, 0x0116
    15ea:	f0 91 17 01 	lds	r31, 0x0117
    15ee:	81 e2       	ldi	r24, 0x21	; 33
    15f0:	80 83       	st	Z, r24
    15f2:	e0 91 16 01 	lds	r30, 0x0116
    15f6:	f0 91 17 01 	lds	r31, 0x0117
    15fa:	80 e2       	ldi	r24, 0x20	; 32
    15fc:	80 83       	st	Z, r24
    15fe:	e0 91 16 01 	lds	r30, 0x0116
    1602:	f0 91 17 01 	lds	r31, 0x0117
    1606:	10 82       	st	Z, r1
    1608:	e0 91 16 01 	lds	r30, 0x0116
    160c:	f0 91 17 01 	lds	r31, 0x0117
    1610:	8b ed       	ldi	r24, 0xDB	; 219
    1612:	80 83       	st	Z, r24
    1614:	e0 91 16 01 	lds	r30, 0x0116
    1618:	f0 91 17 01 	lds	r31, 0x0117
    161c:	80 e3       	ldi	r24, 0x30	; 48
    161e:	80 83       	st	Z, r24
    1620:	e0 91 16 01 	lds	r30, 0x0116
    1624:	f0 91 17 01 	lds	r31, 0x0117
    1628:	8d ea       	ldi	r24, 0xAD	; 173
    162a:	80 83       	st	Z, r24
    162c:	e0 91 16 01 	lds	r30, 0x0116
    1630:	f0 91 17 01 	lds	r31, 0x0117
    1634:	10 82       	st	Z, r1
    1636:	e0 91 16 01 	lds	r30, 0x0116
    163a:	f0 91 17 01 	lds	r31, 0x0117
    163e:	84 ea       	ldi	r24, 0xA4	; 164
    1640:	80 83       	st	Z, r24
    1642:	e0 91 16 01 	lds	r30, 0x0116
    1646:	f0 91 17 01 	lds	r31, 0x0117
    164a:	86 ea       	ldi	r24, 0xA6	; 166
    164c:	80 83       	st	Z, r24
    164e:	e0 91 16 01 	lds	r30, 0x0116
    1652:	f0 91 17 01 	lds	r31, 0x0117
    1656:	8f ea       	ldi	r24, 0xAF	; 175
    1658:	80 83       	st	Z, r24
    165a:	6e df       	rcall	.-292    	; 0x1538 <oled_reset>
    165c:	17 cf       	rjmp	.-466    	; 0x148c <oled_home>
    165e:	08 95       	ret

00001660 <sram_write_char>:
    1660:	8a 30       	cpi	r24, 0x0A	; 10
    1662:	61 f4       	brne	.+24     	; 0x167c <sram_write_char+0x1c>
    1664:	80 91 6c 01 	lds	r24, 0x016C
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	01 96       	adiw	r24, 0x01	; 1
    166c:	87 70       	andi	r24, 0x07	; 7
    166e:	90 78       	andi	r25, 0x80	; 128
    1670:	80 93 6c 01 	sts	0x016C, r24
    1674:	10 92 6b 01 	sts	0x016B, r1
    1678:	81 e0       	ldi	r24, 0x01	; 1
    167a:	08 95       	ret
    167c:	88 23       	and	r24, r24
    167e:	39 f1       	breq	.+78     	; 0x16ce <sram_write_char+0x6e>
    1680:	e8 2f       	mov	r30, r24
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	ee 0f       	add	r30, r30
    1686:	ff 1f       	adc	r31, r31
    1688:	ee 0f       	add	r30, r30
    168a:	ff 1f       	adc	r31, r31
    168c:	ee 0f       	add	r30, r30
    168e:	ff 1f       	adc	r31, r31
    1690:	ec 50       	subi	r30, 0x0C	; 12
    1692:	f0 40       	sbci	r31, 0x00	; 0
    1694:	28 e0       	ldi	r18, 0x08	; 8
    1696:	80 91 6c 01 	lds	r24, 0x016C
    169a:	a0 91 6b 01 	lds	r26, 0x016B
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	90 e8       	ldi	r25, 0x80	; 128
    16a2:	89 9f       	mul	r24, r25
    16a4:	a0 0d       	add	r26, r0
    16a6:	b1 1d       	adc	r27, r1
    16a8:	11 24       	eor	r1, r1
    16aa:	80 91 12 01 	lds	r24, 0x0112
    16ae:	90 91 13 01 	lds	r25, 0x0113
    16b2:	a8 0f       	add	r26, r24
    16b4:	b9 1f       	adc	r27, r25
    16b6:	84 91       	lpm	r24, Z
    16b8:	8c 93       	st	X, r24
    16ba:	80 91 6b 01 	lds	r24, 0x016B
    16be:	8f 5f       	subi	r24, 0xFF	; 255
    16c0:	80 93 6b 01 	sts	0x016B, r24
    16c4:	21 50       	subi	r18, 0x01	; 1
    16c6:	31 96       	adiw	r30, 0x01	; 1
    16c8:	21 11       	cpse	r18, r1
    16ca:	e5 cf       	rjmp	.-54     	; 0x1696 <sram_write_char+0x36>
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <sram_write_char+0x72>
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	08 95       	ret
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	08 95       	ret

000016d6 <sram_write_string>:
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	11 e0       	ldi	r17, 0x01	; 1
    16e2:	18 0f       	add	r17, r24
    16e4:	fe 01       	movw	r30, r28
    16e6:	e8 0f       	add	r30, r24
    16e8:	f1 1d       	adc	r31, r1
    16ea:	80 81       	ld	r24, Z
    16ec:	b9 df       	rcall	.-142    	; 0x1660 <sram_write_char>
    16ee:	88 23       	and	r24, r24
    16f0:	11 f0       	breq	.+4      	; 0x16f6 <sram_write_string+0x20>
    16f2:	81 2f       	mov	r24, r17
    16f4:	f5 cf       	rjmp	.-22     	; 0x16e0 <sram_write_string+0xa>
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	08 95       	ret

000016fe <sram_write_int>:
    16fe:	cf 93       	push	r28
    1700:	18 16       	cp	r1, r24
    1702:	19 06       	cpc	r1, r25
    1704:	4c f4       	brge	.+18     	; 0x1718 <sram_write_int+0x1a>
    1706:	6a e0       	ldi	r22, 0x0A	; 10
    1708:	70 e0       	ldi	r23, 0x00	; 0
    170a:	bb d5       	rcall	.+2934   	; 0x2282 <__divmodhi4>
    170c:	c8 2f       	mov	r28, r24
    170e:	cb 01       	movw	r24, r22
    1710:	f6 df       	rcall	.-20     	; 0x16fe <sram_write_int>
    1712:	80 e3       	ldi	r24, 0x30	; 48
    1714:	8c 0f       	add	r24, r28
    1716:	a4 df       	rcall	.-184    	; 0x1660 <sram_write_char>
    1718:	cf 91       	pop	r28
    171a:	08 95       	ret

0000171c <sram_write_or>:
    171c:	87 70       	andi	r24, 0x07	; 7
    171e:	6f 77       	andi	r22, 0x7F	; 127
    1720:	e6 2f       	mov	r30, r22
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	90 e8       	ldi	r25, 0x80	; 128
    1726:	89 9f       	mul	r24, r25
    1728:	e0 0d       	add	r30, r0
    172a:	f1 1d       	adc	r31, r1
    172c:	11 24       	eor	r1, r1
    172e:	80 91 12 01 	lds	r24, 0x0112
    1732:	90 91 13 01 	lds	r25, 0x0113
    1736:	e8 0f       	add	r30, r24
    1738:	f9 1f       	adc	r31, r25
    173a:	80 81       	ld	r24, Z
    173c:	48 2b       	or	r20, r24
    173e:	40 83       	st	Z, r20
    1740:	08 95       	ret

00001742 <sram_pixel>:
    1742:	96 2f       	mov	r25, r22
    1744:	88 23       	and	r24, r24
    1746:	ac f0       	brlt	.+42     	; 0x1772 <sram_pixel+0x30>
    1748:	60 34       	cpi	r22, 0x40	; 64
    174a:	a8 f4       	brcc	.+42     	; 0x1776 <sram_pixel+0x34>
    174c:	46 2f       	mov	r20, r22
    174e:	47 70       	andi	r20, 0x07	; 7
    1750:	21 e0       	ldi	r18, 0x01	; 1
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	b9 01       	movw	r22, r18
    1756:	02 c0       	rjmp	.+4      	; 0x175c <sram_pixel+0x1a>
    1758:	66 0f       	add	r22, r22
    175a:	77 1f       	adc	r23, r23
    175c:	4a 95       	dec	r20
    175e:	e2 f7       	brpl	.-8      	; 0x1758 <sram_pixel+0x16>
    1760:	ab 01       	movw	r20, r22
    1762:	68 2f       	mov	r22, r24
    1764:	89 2f       	mov	r24, r25
    1766:	86 95       	lsr	r24
    1768:	86 95       	lsr	r24
    176a:	86 95       	lsr	r24
    176c:	d7 df       	rcall	.-82     	; 0x171c <sram_write_or>
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	08 95       	ret
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	08 95       	ret
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	08 95       	ret

0000177a <sram_draw_new_line>:
    177a:	2f 92       	push	r2
    177c:	3f 92       	push	r3
    177e:	4f 92       	push	r4
    1780:	5f 92       	push	r5
    1782:	6f 92       	push	r6
    1784:	7f 92       	push	r7
    1786:	8f 92       	push	r8
    1788:	9f 92       	push	r9
    178a:	af 92       	push	r10
    178c:	bf 92       	push	r11
    178e:	cf 92       	push	r12
    1790:	df 92       	push	r13
    1792:	ef 92       	push	r14
    1794:	ff 92       	push	r15
    1796:	0f 93       	push	r16
    1798:	1f 93       	push	r17
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	cd b7       	in	r28, 0x3d	; 61
    17a0:	de b7       	in	r29, 0x3e	; 62
    17a2:	2c 97       	sbiw	r28, 0x0c	; 12
    17a4:	0f b6       	in	r0, 0x3f	; 63
    17a6:	f8 94       	cli
    17a8:	de bf       	out	0x3e, r29	; 62
    17aa:	0f be       	out	0x3f, r0	; 63
    17ac:	cd bf       	out	0x3d, r28	; 61
    17ae:	38 2e       	mov	r3, r24
    17b0:	26 2e       	mov	r2, r22
    17b2:	04 2f       	mov	r16, r20
    17b4:	12 2f       	mov	r17, r18
    17b6:	48 17       	cp	r20, r24
    17b8:	08 f4       	brcc	.+2      	; 0x17bc <sram_draw_new_line+0x42>
    17ba:	90 c0       	rjmp	.+288    	; 0x18dc <sram_draw_new_line+0x162>
    17bc:	84 17       	cp	r24, r20
    17be:	09 f4       	brne	.+2      	; 0x17c2 <sram_draw_new_line+0x48>
    17c0:	79 c0       	rjmp	.+242    	; 0x18b4 <sram_draw_new_line+0x13a>
    17c2:	86 2e       	mov	r8, r22
    17c4:	91 2c       	mov	r9, r1
    17c6:	a4 2e       	mov	r10, r20
    17c8:	b1 2c       	mov	r11, r1
    17ca:	48 2e       	mov	r4, r24
    17cc:	51 2c       	mov	r5, r1
    17ce:	62 2f       	mov	r22, r18
    17d0:	70 e0       	ldi	r23, 0x00	; 0
    17d2:	68 19       	sub	r22, r8
    17d4:	79 09       	sbc	r23, r9
    17d6:	88 27       	eor	r24, r24
    17d8:	77 fd       	sbrc	r23, 7
    17da:	80 95       	com	r24
    17dc:	98 2f       	mov	r25, r24
    17de:	e3 d3       	rcall	.+1990   	; 0x1fa6 <__floatsisf>
    17e0:	6b 01       	movw	r12, r22
    17e2:	7c 01       	movw	r14, r24
    17e4:	b5 01       	movw	r22, r10
    17e6:	64 19       	sub	r22, r4
    17e8:	75 09       	sbc	r23, r5
    17ea:	88 27       	eor	r24, r24
    17ec:	77 fd       	sbrc	r23, 7
    17ee:	80 95       	com	r24
    17f0:	98 2f       	mov	r25, r24
    17f2:	d9 d3       	rcall	.+1970   	; 0x1fa6 <__floatsisf>
    17f4:	9b 01       	movw	r18, r22
    17f6:	ac 01       	movw	r20, r24
    17f8:	c7 01       	movw	r24, r14
    17fa:	b6 01       	movw	r22, r12
    17fc:	39 d3       	rcall	.+1650   	; 0x1e70 <__divsf3>
    17fe:	6d 83       	std	Y+5, r22	; 0x05
    1800:	7e 83       	std	Y+6, r23	; 0x06
    1802:	8f 83       	std	Y+7, r24	; 0x07
    1804:	98 87       	std	Y+8, r25	; 0x08
    1806:	63 2d       	mov	r22, r3
    1808:	70 e0       	ldi	r23, 0x00	; 0
    180a:	80 e0       	ldi	r24, 0x00	; 0
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	c9 d3       	rcall	.+1938   	; 0x1fa2 <__floatunsisf>
    1810:	6b 01       	movw	r12, r22
    1812:	7c 01       	movw	r14, r24
    1814:	b5 01       	movw	r22, r10
    1816:	88 27       	eor	r24, r24
    1818:	77 fd       	sbrc	r23, 7
    181a:	80 95       	com	r24
    181c:	98 2f       	mov	r25, r24
    181e:	c3 d3       	rcall	.+1926   	; 0x1fa6 <__floatsisf>
    1820:	69 83       	std	Y+1, r22	; 0x01
    1822:	7a 83       	std	Y+2, r23	; 0x02
    1824:	8b 83       	std	Y+3, r24	; 0x03
    1826:	9c 83       	std	Y+4, r25	; 0x04
    1828:	9b 01       	movw	r18, r22
    182a:	ac 01       	movw	r20, r24
    182c:	c7 01       	movw	r24, r14
    182e:	b6 01       	movw	r22, r12
    1830:	1b d3       	rcall	.+1590   	; 0x1e68 <__cmpsf2>
    1832:	88 23       	and	r24, r24
    1834:	0c f0       	brlt	.+2      	; 0x1838 <sram_draw_new_line+0xbe>
    1836:	3e c0       	rjmp	.+124    	; 0x18b4 <sram_draw_new_line+0x13a>
    1838:	66 24       	eor	r6, r6
    183a:	57 fc       	sbrc	r5, 7
    183c:	60 94       	com	r6
    183e:	76 2c       	mov	r7, r6
    1840:	c4 01       	movw	r24, r8
    1842:	aa 27       	eor	r26, r26
    1844:	97 fd       	sbrc	r25, 7
    1846:	a0 95       	com	r26
    1848:	ba 2f       	mov	r27, r26
    184a:	89 87       	std	Y+9, r24	; 0x09
    184c:	9a 87       	std	Y+10, r25	; 0x0a
    184e:	ab 87       	std	Y+11, r26	; 0x0b
    1850:	bc 87       	std	Y+12, r27	; 0x0c
    1852:	c3 01       	movw	r24, r6
    1854:	b2 01       	movw	r22, r4
    1856:	a7 d3       	rcall	.+1870   	; 0x1fa6 <__floatsisf>
    1858:	9b 01       	movw	r18, r22
    185a:	ac 01       	movw	r20, r24
    185c:	c7 01       	movw	r24, r14
    185e:	b6 01       	movw	r22, r12
    1860:	9e d2       	rcall	.+1340   	; 0x1d9e <__subsf3>
    1862:	2d 81       	ldd	r18, Y+5	; 0x05
    1864:	3e 81       	ldd	r19, Y+6	; 0x06
    1866:	4f 81       	ldd	r20, Y+7	; 0x07
    1868:	58 85       	ldd	r21, Y+8	; 0x08
    186a:	51 d4       	rcall	.+2210   	; 0x210e <__mulsf3>
    186c:	4b 01       	movw	r8, r22
    186e:	5c 01       	movw	r10, r24
    1870:	69 85       	ldd	r22, Y+9	; 0x09
    1872:	7a 85       	ldd	r23, Y+10	; 0x0a
    1874:	8b 85       	ldd	r24, Y+11	; 0x0b
    1876:	9c 85       	ldd	r25, Y+12	; 0x0c
    1878:	96 d3       	rcall	.+1836   	; 0x1fa6 <__floatsisf>
    187a:	9b 01       	movw	r18, r22
    187c:	ac 01       	movw	r20, r24
    187e:	c5 01       	movw	r24, r10
    1880:	b4 01       	movw	r22, r8
    1882:	8e d2       	rcall	.+1308   	; 0x1da0 <__addsf3>
    1884:	62 d3       	rcall	.+1732   	; 0x1f4a <__fixunssfsi>
    1886:	b6 2e       	mov	r11, r22
    1888:	c7 01       	movw	r24, r14
    188a:	b6 01       	movw	r22, r12
    188c:	5e d3       	rcall	.+1724   	; 0x1f4a <__fixunssfsi>
    188e:	86 2f       	mov	r24, r22
    1890:	6b 2d       	mov	r22, r11
    1892:	57 df       	rcall	.-338    	; 0x1742 <sram_pixel>
    1894:	2d ec       	ldi	r18, 0xCD	; 205
    1896:	3c ec       	ldi	r19, 0xCC	; 204
    1898:	4c ec       	ldi	r20, 0xCC	; 204
    189a:	5d e3       	ldi	r21, 0x3D	; 61
    189c:	c7 01       	movw	r24, r14
    189e:	b6 01       	movw	r22, r12
    18a0:	7f d2       	rcall	.+1278   	; 0x1da0 <__addsf3>
    18a2:	6b 01       	movw	r12, r22
    18a4:	7c 01       	movw	r14, r24
    18a6:	29 81       	ldd	r18, Y+1	; 0x01
    18a8:	3a 81       	ldd	r19, Y+2	; 0x02
    18aa:	4b 81       	ldd	r20, Y+3	; 0x03
    18ac:	5c 81       	ldd	r21, Y+4	; 0x04
    18ae:	dc d2       	rcall	.+1464   	; 0x1e68 <__cmpsf2>
    18b0:	88 23       	and	r24, r24
    18b2:	7c f2       	brlt	.-98     	; 0x1852 <sram_draw_new_line+0xd8>
    18b4:	12 15       	cp	r17, r2
    18b6:	c8 f1       	brcs	.+114    	; 0x192a <sram_draw_new_line+0x1b0>
    18b8:	30 12       	cpse	r3, r16
    18ba:	39 c0       	rjmp	.+114    	; 0x192e <sram_draw_new_line+0x1b4>
    18bc:	21 16       	cp	r2, r17
    18be:	30 f0       	brcs	.+12     	; 0x18cc <sram_draw_new_line+0x152>
    18c0:	36 c0       	rjmp	.+108    	; 0x192e <sram_draw_new_line+0x1b4>
    18c2:	82 2d       	mov	r24, r2
    18c4:	21 2e       	mov	r2, r17
    18c6:	18 2f       	mov	r17, r24
    18c8:	02 2d       	mov	r16, r2
    18ca:	01 c0       	rjmp	.+2      	; 0x18ce <sram_draw_new_line+0x154>
    18cc:	02 2d       	mov	r16, r2
    18ce:	60 2f       	mov	r22, r16
    18d0:	83 2d       	mov	r24, r3
    18d2:	37 df       	rcall	.-402    	; 0x1742 <sram_pixel>
    18d4:	0f 5f       	subi	r16, 0xFF	; 255
    18d6:	01 17       	cp	r16, r17
    18d8:	d0 f3       	brcs	.-12     	; 0x18ce <sram_draw_new_line+0x154>
    18da:	29 c0       	rjmp	.+82     	; 0x192e <sram_draw_new_line+0x1b4>
    18dc:	82 2e       	mov	r8, r18
    18de:	91 2c       	mov	r9, r1
    18e0:	a8 2e       	mov	r10, r24
    18e2:	b1 2c       	mov	r11, r1
    18e4:	44 2e       	mov	r4, r20
    18e6:	51 2c       	mov	r5, r1
    18e8:	70 e0       	ldi	r23, 0x00	; 0
    18ea:	68 19       	sub	r22, r8
    18ec:	79 09       	sbc	r23, r9
    18ee:	88 27       	eor	r24, r24
    18f0:	77 fd       	sbrc	r23, 7
    18f2:	80 95       	com	r24
    18f4:	98 2f       	mov	r25, r24
    18f6:	57 d3       	rcall	.+1710   	; 0x1fa6 <__floatsisf>
    18f8:	6b 01       	movw	r12, r22
    18fa:	7c 01       	movw	r14, r24
    18fc:	b5 01       	movw	r22, r10
    18fe:	64 19       	sub	r22, r4
    1900:	75 09       	sbc	r23, r5
    1902:	88 27       	eor	r24, r24
    1904:	77 fd       	sbrc	r23, 7
    1906:	80 95       	com	r24
    1908:	98 2f       	mov	r25, r24
    190a:	4d d3       	rcall	.+1690   	; 0x1fa6 <__floatsisf>
    190c:	9b 01       	movw	r18, r22
    190e:	ac 01       	movw	r20, r24
    1910:	c7 01       	movw	r24, r14
    1912:	b6 01       	movw	r22, r12
    1914:	ad d2       	rcall	.+1370   	; 0x1e70 <__divsf3>
    1916:	6d 83       	std	Y+5, r22	; 0x05
    1918:	7e 83       	std	Y+6, r23	; 0x06
    191a:	8f 83       	std	Y+7, r24	; 0x07
    191c:	98 87       	std	Y+8, r25	; 0x08
    191e:	82 2d       	mov	r24, r2
    1920:	21 2e       	mov	r2, r17
    1922:	18 2f       	mov	r17, r24
    1924:	30 2e       	mov	r3, r16
    1926:	0a 2d       	mov	r16, r10
    1928:	6e cf       	rjmp	.-292    	; 0x1806 <sram_draw_new_line+0x8c>
    192a:	30 16       	cp	r3, r16
    192c:	51 f2       	breq	.-108    	; 0x18c2 <sram_draw_new_line+0x148>
    192e:	2c 96       	adiw	r28, 0x0c	; 12
    1930:	0f b6       	in	r0, 0x3f	; 63
    1932:	f8 94       	cli
    1934:	de bf       	out	0x3e, r29	; 62
    1936:	0f be       	out	0x3f, r0	; 63
    1938:	cd bf       	out	0x3d, r28	; 61
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	bf 90       	pop	r11
    194c:	af 90       	pop	r10
    194e:	9f 90       	pop	r9
    1950:	8f 90       	pop	r8
    1952:	7f 90       	pop	r7
    1954:	6f 90       	pop	r6
    1956:	5f 90       	pop	r5
    1958:	4f 90       	pop	r4
    195a:	3f 90       	pop	r3
    195c:	2f 90       	pop	r2
    195e:	08 95       	ret

00001960 <sram_draw_line>:
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	d8 2f       	mov	r29, r24
    1966:	c6 2f       	mov	r28, r22
    1968:	26 2f       	mov	r18, r22
    196a:	48 2f       	mov	r20, r24
    196c:	60 91 d1 01 	lds	r22, 0x01D1
    1970:	80 91 d3 01 	lds	r24, 0x01D3
    1974:	02 df       	rcall	.-508    	; 0x177a <sram_draw_new_line>
    1976:	d0 93 d3 01 	sts	0x01D3, r29
    197a:	c0 93 d1 01 	sts	0x01D1, r28
    197e:	df 91       	pop	r29
    1980:	cf 91       	pop	r28
    1982:	08 95       	ret

00001984 <sram_draw_new_circle>:
    1984:	4f 92       	push	r4
    1986:	5f 92       	push	r5
    1988:	6f 92       	push	r6
    198a:	7f 92       	push	r7
    198c:	8f 92       	push	r8
    198e:	9f 92       	push	r9
    1990:	af 92       	push	r10
    1992:	bf 92       	push	r11
    1994:	cf 92       	push	r12
    1996:	df 92       	push	r13
    1998:	ef 92       	push	r14
    199a:	ff 92       	push	r15
    199c:	1f 93       	push	r17
    199e:	cf 93       	push	r28
    19a0:	df 93       	push	r29
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
    19a6:	64 97       	sbiw	r28, 0x14	; 20
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	de bf       	out	0x3e, r29	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	cd bf       	out	0x3d, r28	; 61
    19b2:	f8 2e       	mov	r15, r24
    19b4:	e6 2e       	mov	r14, r22
    19b6:	b4 2e       	mov	r11, r20
    19b8:	c4 2e       	mov	r12, r20
    19ba:	d1 2c       	mov	r13, r1
    19bc:	66 27       	eor	r22, r22
    19be:	77 27       	eor	r23, r23
    19c0:	6c 19       	sub	r22, r12
    19c2:	7d 09       	sbc	r23, r13
    19c4:	88 27       	eor	r24, r24
    19c6:	77 fd       	sbrc	r23, 7
    19c8:	80 95       	com	r24
    19ca:	98 2f       	mov	r25, r24
    19cc:	ec d2       	rcall	.+1496   	; 0x1fa6 <__floatsisf>
    19ce:	2b 01       	movw	r4, r22
    19d0:	3c 01       	movw	r6, r24
    19d2:	b6 01       	movw	r22, r12
    19d4:	88 27       	eor	r24, r24
    19d6:	77 fd       	sbrc	r23, 7
    19d8:	80 95       	com	r24
    19da:	98 2f       	mov	r25, r24
    19dc:	e4 d2       	rcall	.+1480   	; 0x1fa6 <__floatsisf>
    19de:	6d 83       	std	Y+5, r22	; 0x05
    19e0:	7e 83       	std	Y+6, r23	; 0x06
    19e2:	8f 83       	std	Y+7, r24	; 0x07
    19e4:	98 87       	std	Y+8, r25	; 0x08
    19e6:	9b 01       	movw	r18, r22
    19e8:	ac 01       	movw	r20, r24
    19ea:	c3 01       	movw	r24, r6
    19ec:	b2 01       	movw	r22, r4
    19ee:	3c d2       	rcall	.+1144   	; 0x1e68 <__cmpsf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	0c f4       	brge	.+2      	; 0x19f6 <sram_draw_new_circle+0x72>
    19f4:	70 c0       	rjmp	.+224    	; 0x1ad6 <sram_draw_new_circle+0x152>
    19f6:	6b 2d       	mov	r22, r11
    19f8:	70 e0       	ldi	r23, 0x00	; 0
    19fa:	80 e0       	ldi	r24, 0x00	; 0
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	d1 d2       	rcall	.+1442   	; 0x1fa2 <__floatunsisf>
    1a00:	9b 01       	movw	r18, r22
    1a02:	ac 01       	movw	r20, r24
    1a04:	84 d3       	rcall	.+1800   	; 0x210e <__mulsf3>
    1a06:	69 87       	std	Y+9, r22	; 0x09
    1a08:	7a 87       	std	Y+10, r23	; 0x0a
    1a0a:	8b 87       	std	Y+11, r24	; 0x0b
    1a0c:	9c 87       	std	Y+12, r25	; 0x0c
    1a0e:	8e 2d       	mov	r24, r14
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	8d 87       	std	Y+13, r24	; 0x0d
    1a18:	9e 87       	std	Y+14, r25	; 0x0e
    1a1a:	af 87       	std	Y+15, r26	; 0x0f
    1a1c:	b8 8b       	std	Y+16, r27	; 0x10
    1a1e:	8f 2d       	mov	r24, r15
    1a20:	90 e0       	ldi	r25, 0x00	; 0
    1a22:	a0 e0       	ldi	r26, 0x00	; 0
    1a24:	b0 e0       	ldi	r27, 0x00	; 0
    1a26:	89 8b       	std	Y+17, r24	; 0x11
    1a28:	9a 8b       	std	Y+18, r25	; 0x12
    1a2a:	ab 8b       	std	Y+19, r26	; 0x13
    1a2c:	bc 8b       	std	Y+20, r27	; 0x14
    1a2e:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a30:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a32:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a34:	98 89       	ldd	r25, Y+16	; 0x10
    1a36:	b7 d2       	rcall	.+1390   	; 0x1fa6 <__floatsisf>
    1a38:	4b 01       	movw	r8, r22
    1a3a:	5c 01       	movw	r10, r24
    1a3c:	a3 01       	movw	r20, r6
    1a3e:	92 01       	movw	r18, r4
    1a40:	c3 01       	movw	r24, r6
    1a42:	b2 01       	movw	r22, r4
    1a44:	64 d3       	rcall	.+1736   	; 0x210e <__mulsf3>
    1a46:	9b 01       	movw	r18, r22
    1a48:	ac 01       	movw	r20, r24
    1a4a:	69 85       	ldd	r22, Y+9	; 0x09
    1a4c:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a4e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a50:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a52:	a5 d1       	rcall	.+842    	; 0x1d9e <__subsf3>
    1a54:	c3 d3       	rcall	.+1926   	; 0x21dc <sqrt>
    1a56:	69 83       	std	Y+1, r22	; 0x01
    1a58:	7a 83       	std	Y+2, r23	; 0x02
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    1a5c:	9c 83       	std	Y+4, r25	; 0x04
    1a5e:	69 89       	ldd	r22, Y+17	; 0x11
    1a60:	7a 89       	ldd	r23, Y+18	; 0x12
    1a62:	8b 89       	ldd	r24, Y+19	; 0x13
    1a64:	9c 89       	ldd	r25, Y+20	; 0x14
    1a66:	9f d2       	rcall	.+1342   	; 0x1fa6 <__floatsisf>
    1a68:	6b 01       	movw	r12, r22
    1a6a:	7c 01       	movw	r14, r24
    1a6c:	29 81       	ldd	r18, Y+1	; 0x01
    1a6e:	3a 81       	ldd	r19, Y+2	; 0x02
    1a70:	4b 81       	ldd	r20, Y+3	; 0x03
    1a72:	5c 81       	ldd	r21, Y+4	; 0x04
    1a74:	c5 01       	movw	r24, r10
    1a76:	b4 01       	movw	r22, r8
    1a78:	92 d1       	rcall	.+804    	; 0x1d9e <__subsf3>
    1a7a:	67 d2       	rcall	.+1230   	; 0x1f4a <__fixunssfsi>
    1a7c:	16 2f       	mov	r17, r22
    1a7e:	a3 01       	movw	r20, r6
    1a80:	92 01       	movw	r18, r4
    1a82:	c7 01       	movw	r24, r14
    1a84:	b6 01       	movw	r22, r12
    1a86:	8c d1       	rcall	.+792    	; 0x1da0 <__addsf3>
    1a88:	60 d2       	rcall	.+1216   	; 0x1f4a <__fixunssfsi>
    1a8a:	86 2f       	mov	r24, r22
    1a8c:	61 2f       	mov	r22, r17
    1a8e:	59 de       	rcall	.-846    	; 0x1742 <sram_pixel>
    1a90:	29 81       	ldd	r18, Y+1	; 0x01
    1a92:	3a 81       	ldd	r19, Y+2	; 0x02
    1a94:	4b 81       	ldd	r20, Y+3	; 0x03
    1a96:	5c 81       	ldd	r21, Y+4	; 0x04
    1a98:	c5 01       	movw	r24, r10
    1a9a:	b4 01       	movw	r22, r8
    1a9c:	81 d1       	rcall	.+770    	; 0x1da0 <__addsf3>
    1a9e:	55 d2       	rcall	.+1194   	; 0x1f4a <__fixunssfsi>
    1aa0:	16 2f       	mov	r17, r22
    1aa2:	a3 01       	movw	r20, r6
    1aa4:	92 01       	movw	r18, r4
    1aa6:	c7 01       	movw	r24, r14
    1aa8:	b6 01       	movw	r22, r12
    1aaa:	79 d1       	rcall	.+754    	; 0x1d9e <__subsf3>
    1aac:	4e d2       	rcall	.+1180   	; 0x1f4a <__fixunssfsi>
    1aae:	86 2f       	mov	r24, r22
    1ab0:	61 2f       	mov	r22, r17
    1ab2:	47 de       	rcall	.-882    	; 0x1742 <sram_pixel>
    1ab4:	2a e0       	ldi	r18, 0x0A	; 10
    1ab6:	37 ed       	ldi	r19, 0xD7	; 215
    1ab8:	43 ea       	ldi	r20, 0xA3	; 163
    1aba:	5c e3       	ldi	r21, 0x3C	; 60
    1abc:	c3 01       	movw	r24, r6
    1abe:	b2 01       	movw	r22, r4
    1ac0:	6f d1       	rcall	.+734    	; 0x1da0 <__addsf3>
    1ac2:	2b 01       	movw	r4, r22
    1ac4:	3c 01       	movw	r6, r24
    1ac6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ac8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aca:	4f 81       	ldd	r20, Y+7	; 0x07
    1acc:	58 85       	ldd	r21, Y+8	; 0x08
    1ace:	cc d1       	rcall	.+920    	; 0x1e68 <__cmpsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <sram_draw_new_circle+0x152>
    1ad4:	ac cf       	rjmp	.-168    	; 0x1a2e <sram_draw_new_circle+0xaa>
    1ad6:	64 96       	adiw	r28, 0x14	; 20
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	1f 91       	pop	r17
    1ae8:	ff 90       	pop	r15
    1aea:	ef 90       	pop	r14
    1aec:	df 90       	pop	r13
    1aee:	cf 90       	pop	r12
    1af0:	bf 90       	pop	r11
    1af2:	af 90       	pop	r10
    1af4:	9f 90       	pop	r9
    1af6:	8f 90       	pop	r8
    1af8:	7f 90       	pop	r7
    1afa:	6f 90       	pop	r6
    1afc:	5f 90       	pop	r5
    1afe:	4f 90       	pop	r4
    1b00:	08 95       	ret

00001b02 <sram_push_line>:
    1b02:	cf 93       	push	r28
    1b04:	c8 2f       	mov	r28, r24
    1b06:	e9 dc       	rcall	.-1582   	; 0x14da <oled_goto_line>
    1b08:	80 e8       	ldi	r24, 0x80	; 128
    1b0a:	c8 9f       	mul	r28, r24
    1b0c:	a0 01       	movw	r20, r0
    1b0e:	11 24       	eor	r1, r1
    1b10:	80 e8       	ldi	r24, 0x80	; 128
    1b12:	90 e0       	ldi	r25, 0x00	; 0
    1b14:	40 58       	subi	r20, 0x80	; 128
    1b16:	5f 4f       	sbci	r21, 0xFF	; 255
    1b18:	9a 01       	movw	r18, r20
    1b1a:	28 1b       	sub	r18, r24
    1b1c:	39 0b       	sbc	r19, r25
    1b1e:	e0 91 12 01 	lds	r30, 0x0112
    1b22:	f0 91 13 01 	lds	r31, 0x0113
    1b26:	e2 0f       	add	r30, r18
    1b28:	f3 1f       	adc	r31, r19
    1b2a:	20 81       	ld	r18, Z
    1b2c:	e0 91 14 01 	lds	r30, 0x0114
    1b30:	f0 91 15 01 	lds	r31, 0x0115
    1b34:	20 83       	st	Z, r18
    1b36:	01 97       	sbiw	r24, 0x01	; 1
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	71 f7       	brne	.-36     	; 0x1b18 <sram_push_line+0x16>
    1b3c:	cf 91       	pop	r28
    1b3e:	08 95       	ret

00001b40 <sram_push>:
    1b40:	cf 93       	push	r28
    1b42:	c0 e0       	ldi	r28, 0x00	; 0
    1b44:	8c 2f       	mov	r24, r28
    1b46:	dd df       	rcall	.-70     	; 0x1b02 <sram_push_line>
    1b48:	cf 5f       	subi	r28, 0xFF	; 255
    1b4a:	c8 30       	cpi	r28, 0x08	; 8
    1b4c:	d9 f7       	brne	.-10     	; 0x1b44 <sram_push+0x4>
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <sram_init>:
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	b0 e8       	ldi	r27, 0x80	; 128
    1b58:	a0 e0       	ldi	r26, 0x00	; 0
    1b5a:	11 c0       	rjmp	.+34     	; 0x1b7e <sram_init+0x2c>
    1b5c:	a9 01       	movw	r20, r18
    1b5e:	48 1b       	sub	r20, r24
    1b60:	59 0b       	sbc	r21, r25
    1b62:	e0 91 12 01 	lds	r30, 0x0112
    1b66:	f0 91 13 01 	lds	r31, 0x0113
    1b6a:	e4 0f       	add	r30, r20
    1b6c:	f5 1f       	adc	r31, r21
    1b6e:	10 82       	st	Z, r1
    1b70:	01 97       	sbiw	r24, 0x01	; 1
    1b72:	00 97       	sbiw	r24, 0x00	; 0
    1b74:	99 f7       	brne	.-26     	; 0x1b5c <sram_init+0xa>
    1b76:	21 15       	cp	r18, r1
    1b78:	84 e0       	ldi	r24, 0x04	; 4
    1b7a:	38 07       	cpc	r19, r24
    1b7c:	29 f0       	breq	.+10     	; 0x1b88 <sram_init+0x36>
    1b7e:	8b 2f       	mov	r24, r27
    1b80:	9a 2f       	mov	r25, r26
    1b82:	20 58       	subi	r18, 0x80	; 128
    1b84:	3f 4f       	sbci	r19, 0xFF	; 255
    1b86:	ea cf       	rjmp	.-44     	; 0x1b5c <sram_init+0xa>
    1b88:	db cf       	rjmp	.-74     	; 0x1b40 <sram_push>
    1b8a:	08 95       	ret

00001b8c <sram_clear_line>:
    1b8c:	cf 93       	push	r28
    1b8e:	c8 2f       	mov	r28, r24
    1b90:	a4 dc       	rcall	.-1720   	; 0x14da <oled_goto_line>
    1b92:	c8 30       	cpi	r28, 0x08	; 8
    1b94:	20 f5       	brcc	.+72     	; 0x1bde <sram_clear_line+0x52>
    1b96:	80 e8       	ldi	r24, 0x80	; 128
    1b98:	c8 9f       	mul	r28, r24
    1b9a:	b0 01       	movw	r22, r0
    1b9c:	11 24       	eor	r1, r1
    1b9e:	20 e8       	ldi	r18, 0x80	; 128
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	60 58       	subi	r22, 0x80	; 128
    1ba4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba6:	ab 01       	movw	r20, r22
    1ba8:	42 1b       	sub	r20, r18
    1baa:	53 0b       	sbc	r21, r19
    1bac:	e0 91 12 01 	lds	r30, 0x0112
    1bb0:	f0 91 13 01 	lds	r31, 0x0113
    1bb4:	e4 0f       	add	r30, r20
    1bb6:	f5 1f       	adc	r31, r21
    1bb8:	10 82       	st	Z, r1
    1bba:	21 50       	subi	r18, 0x01	; 1
    1bbc:	31 09       	sbc	r19, r1
    1bbe:	21 15       	cp	r18, r1
    1bc0:	31 05       	cpc	r19, r1
    1bc2:	89 f7       	brne	.-30     	; 0x1ba6 <sram_clear_line+0x1a>
    1bc4:	21 e0       	ldi	r18, 0x01	; 1
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	c9 01       	movw	r24, r18
    1bca:	02 c0       	rjmp	.+4      	; 0x1bd0 <sram_clear_line+0x44>
    1bcc:	88 0f       	add	r24, r24
    1bce:	99 1f       	adc	r25, r25
    1bd0:	ca 95       	dec	r28
    1bd2:	e2 f7       	brpl	.-8      	; 0x1bcc <sram_clear_line+0x40>
    1bd4:	90 91 6a 01 	lds	r25, 0x016A
    1bd8:	89 2b       	or	r24, r25
    1bda:	80 93 6a 01 	sts	0x016A, r24
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <sram_scroll_data>:
    1be2:	ef 92       	push	r14
    1be4:	ff 92       	push	r15
    1be6:	0f 93       	push	r16
    1be8:	1f 93       	push	r17
    1bea:	cf 93       	push	r28
    1bec:	df 93       	push	r29
    1bee:	22 23       	and	r18, r18
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <sram_scroll_data+0x12>
    1bf2:	5f c0       	rjmp	.+190    	; 0x1cb2 <sram_scroll_data+0xd0>
    1bf4:	a0 91 12 01 	lds	r26, 0x0112
    1bf8:	b0 91 13 01 	lds	r27, 0x0113
    1bfc:	30 e8       	ldi	r19, 0x80	; 128
    1bfe:	83 9f       	mul	r24, r19
    1c00:	a0 0d       	add	r26, r0
    1c02:	b1 1d       	adc	r27, r1
    1c04:	11 24       	eor	r1, r1
    1c06:	49 ec       	ldi	r20, 0xC9	; 201
    1c08:	51 e0       	ldi	r21, 0x01	; 1
    1c0a:	fa 01       	movw	r30, r20
    1c0c:	9d 91       	ld	r25, X+
    1c0e:	91 93       	st	Z+, r25
    1c10:	9e 2f       	mov	r25, r30
    1c12:	94 1b       	sub	r25, r20
    1c14:	92 17       	cp	r25, r18
    1c16:	d0 f3       	brcs	.-12     	; 0x1c0c <sram_scroll_data+0x2a>
    1c18:	a2 2f       	mov	r26, r18
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	c0 e8       	ldi	r28, 0x80	; 128
    1c1e:	d0 e0       	ldi	r29, 0x00	; 0
    1c20:	7e 01       	movw	r14, r28
    1c22:	ea 1a       	sub	r14, r26
    1c24:	fb 0a       	sbc	r15, r27
    1c26:	1e 14       	cp	r1, r14
    1c28:	1f 04       	cpc	r1, r15
    1c2a:	0c f4       	brge	.+2      	; 0x1c2e <sram_scroll_data+0x4c>
    1c2c:	48 c0       	rjmp	.+144    	; 0x1cbe <sram_scroll_data+0xdc>
    1c2e:	18 c0       	rjmp	.+48     	; 0x1c60 <sram_scroll_data+0x7e>
    1c30:	60 91 12 01 	lds	r22, 0x0112
    1c34:	70 91 13 01 	lds	r23, 0x0113
    1c38:	40 0f       	add	r20, r16
    1c3a:	51 1f       	adc	r21, r17
    1c3c:	fb 01       	movw	r30, r22
    1c3e:	e4 0f       	add	r30, r20
    1c40:	f5 1f       	adc	r31, r21
    1c42:	4a 0f       	add	r20, r26
    1c44:	5b 1f       	adc	r21, r27
    1c46:	64 0f       	add	r22, r20
    1c48:	75 1f       	adc	r23, r21
    1c4a:	eb 01       	movw	r28, r22
    1c4c:	38 81       	ld	r19, Y
    1c4e:	30 83       	st	Z, r19
    1c50:	9f 5f       	subi	r25, 0xFF	; 255
    1c52:	49 2f       	mov	r20, r25
    1c54:	50 e0       	ldi	r21, 0x00	; 0
    1c56:	4e 15       	cp	r20, r14
    1c58:	5f 05       	cpc	r21, r15
    1c5a:	54 f3       	brlt	.-44     	; 0x1c30 <sram_scroll_data+0x4e>
    1c5c:	22 23       	and	r18, r18
    1c5e:	d1 f0       	breq	.+52     	; 0x1c94 <sram_scroll_data+0xb2>
    1c60:	d0 e8       	ldi	r29, 0x80	; 128
    1c62:	8d 9f       	mul	r24, r29
    1c64:	b0 01       	movw	r22, r0
    1c66:	11 24       	eor	r1, r1
    1c68:	6a 1b       	sub	r22, r26
    1c6a:	7b 0b       	sbc	r23, r27
    1c6c:	c9 ec       	ldi	r28, 0xC9	; 201
    1c6e:	d1 e0       	ldi	r29, 0x01	; 1
    1c70:	fe 01       	movw	r30, r28
    1c72:	6a 54       	subi	r22, 0x4A	; 74
    1c74:	71 40       	sbci	r23, 0x01	; 1
    1c76:	ab 01       	movw	r20, r22
    1c78:	4e 0f       	add	r20, r30
    1c7a:	5f 1f       	adc	r21, r31
    1c7c:	a0 91 12 01 	lds	r26, 0x0112
    1c80:	b0 91 13 01 	lds	r27, 0x0113
    1c84:	a4 0f       	add	r26, r20
    1c86:	b5 1f       	adc	r27, r21
    1c88:	91 91       	ld	r25, Z+
    1c8a:	9c 93       	st	X, r25
    1c8c:	9e 2f       	mov	r25, r30
    1c8e:	9c 1b       	sub	r25, r28
    1c90:	92 17       	cp	r25, r18
    1c92:	88 f3       	brcs	.-30     	; 0x1c76 <sram_scroll_data+0x94>
    1c94:	21 e0       	ldi	r18, 0x01	; 1
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	a9 01       	movw	r20, r18
    1c9a:	02 c0       	rjmp	.+4      	; 0x1ca0 <sram_scroll_data+0xbe>
    1c9c:	44 0f       	add	r20, r20
    1c9e:	55 1f       	adc	r21, r21
    1ca0:	8a 95       	dec	r24
    1ca2:	e2 f7       	brpl	.-8      	; 0x1c9c <sram_scroll_data+0xba>
    1ca4:	ca 01       	movw	r24, r20
    1ca6:	90 91 6a 01 	lds	r25, 0x016A
    1caa:	89 2b       	or	r24, r25
    1cac:	80 93 6a 01 	sts	0x016A, r24
    1cb0:	0e c0       	rjmp	.+28     	; 0x1cce <sram_scroll_data+0xec>
    1cb2:	68 94       	set
    1cb4:	ee 24       	eor	r14, r14
    1cb6:	e7 f8       	bld	r14, 7
    1cb8:	f1 2c       	mov	r15, r1
    1cba:	a0 e0       	ldi	r26, 0x00	; 0
    1cbc:	b0 e0       	ldi	r27, 0x00	; 0
    1cbe:	50 e8       	ldi	r21, 0x80	; 128
    1cc0:	85 9f       	mul	r24, r21
    1cc2:	80 01       	movw	r16, r0
    1cc4:	11 24       	eor	r1, r1
    1cc6:	40 e0       	ldi	r20, 0x00	; 0
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	b1 cf       	rjmp	.-158    	; 0x1c30 <sram_scroll_data+0x4e>
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	1f 91       	pop	r17
    1cd4:	0f 91       	pop	r16
    1cd6:	ff 90       	pop	r15
    1cd8:	ef 90       	pop	r14
    1cda:	08 95       	ret

00001cdc <sram_scroll_line>:
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	d8 2f       	mov	r29, r24
    1ce2:	c6 2f       	mov	r28, r22
    1ce4:	69 30       	cpi	r22, 0x09	; 9
    1ce6:	18 f0       	brcs	.+6      	; 0x1cee <sram_scroll_line+0x12>
    1ce8:	c8 50       	subi	r28, 0x08	; 8
    1cea:	6c 2f       	mov	r22, r28
    1cec:	f7 df       	rcall	.-18     	; 0x1cdc <sram_scroll_line>
    1cee:	2c 2f       	mov	r18, r28
    1cf0:	4f e7       	ldi	r20, 0x7F	; 127
    1cf2:	60 e0       	ldi	r22, 0x00	; 0
    1cf4:	8d 2f       	mov	r24, r29
    1cf6:	75 df       	rcall	.-278    	; 0x1be2 <sram_scroll_data>
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	08 95       	ret

00001cfe <sram_set_point>:
    1cfe:	80 93 d3 01 	sts	0x01D3, r24
    1d02:	60 93 d1 01 	sts	0x01D1, r22
    1d06:	08 95       	ret

00001d08 <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    1d08:	0f 93       	push	r16
    1d0a:	1f 93       	push	r17
    1d0c:	cf 93       	push	r28
    1d0e:	df 93       	push	r29
    1d10:	c8 2f       	mov	r28, r24
    1d12:	d6 2f       	mov	r29, r22
    1d14:	14 2f       	mov	r17, r20
    1d16:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    1d18:	80 93 d3 01 	sts	0x01D3, r24
	prev_y = y0;
    1d1c:	60 93 d1 01 	sts	0x01D1, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    1d20:	62 2f       	mov	r22, r18
    1d22:	1e de       	rcall	.-964    	; 0x1960 <sram_draw_line>
	sram_draw_line(x1,y1);
    1d24:	60 2f       	mov	r22, r16
    1d26:	81 2f       	mov	r24, r17
    1d28:	1b de       	rcall	.-970    	; 0x1960 <sram_draw_line>
	sram_draw_line(x1,y0);
    1d2a:	6d 2f       	mov	r22, r29
    1d2c:	81 2f       	mov	r24, r17
    1d2e:	18 de       	rcall	.-976    	; 0x1960 <sram_draw_line>
	sram_draw_line(x0,y0);
    1d30:	6d 2f       	mov	r22, r29
    1d32:	8c 2f       	mov	r24, r28
    1d34:	15 de       	rcall	.-982    	; 0x1960 <sram_draw_line>
}
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	08 95       	ret

00001d40 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_refresh_screen;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    1d40:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    1d42:	89 b7       	in	r24, 0x39	; 57
    1d44:	81 60       	ori	r24, 0x01	; 1
    1d46:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    1d48:	83 b7       	in	r24, 0x33	; 51
    1d4a:	8d 60       	ori	r24, 0x0D	; 13
    1d4c:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	40 e0       	ldi	r20, 0x00	; 0
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	60 ec       	ldi	r22, 0xC0	; 192
    1d56:	72 e1       	ldi	r23, 0x12	; 18
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a5 d2       	rcall	.+1354   	; 0x22a8 <__divmodsi4>
    1d5e:	21 bf       	out	0x31, r18	; 49
	FLAG_refresh_screen = 1;//since we are initializing we want to refresh the page
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	80 93 d5 01 	sts	0x01D5, r24
    1d66:	08 95       	ret

00001d68 <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_refresh_screen == 1)
    1d68:	80 91 d5 01 	lds	r24, 0x01D5
    1d6c:	81 30       	cpi	r24, 0x01	; 1
    1d6e:	19 f4       	brne	.+6      	; 0x1d76 <timer_check_flag+0xe>
	{
		FLAG_refresh_screen = 0;
    1d70:	10 92 d5 01 	sts	0x01D5, r1
		return 1;
    1d74:	08 95       	ret
	}
	return 0;
    1d76:	80 e0       	ldi	r24, 0x00	; 0
}
    1d78:	08 95       	ret

00001d7a <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_refresh_screen = 0;
    1d7a:	10 92 d5 01 	sts	0x01D5, r1
    1d7e:	08 95       	ret

00001d80 <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    1d80:	1f 92       	push	r1
    1d82:	0f 92       	push	r0
    1d84:	0f b6       	in	r0, 0x3f	; 63
    1d86:	0f 92       	push	r0
    1d88:	11 24       	eor	r1, r1
    1d8a:	8f 93       	push	r24
	FLAG_refresh_screen = 1;
    1d8c:	81 e0       	ldi	r24, 0x01	; 1
    1d8e:	80 93 d5 01 	sts	0x01D5, r24
}
    1d92:	8f 91       	pop	r24
    1d94:	0f 90       	pop	r0
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	0f 90       	pop	r0
    1d9a:	1f 90       	pop	r1
    1d9c:	18 95       	reti

00001d9e <__subsf3>:
    1d9e:	50 58       	subi	r21, 0x80	; 128

00001da0 <__addsf3>:
    1da0:	bb 27       	eor	r27, r27
    1da2:	aa 27       	eor	r26, r26
    1da4:	0e d0       	rcall	.+28     	; 0x1dc2 <__addsf3x>
    1da6:	75 c1       	rjmp	.+746    	; 0x2092 <__fp_round>
    1da8:	66 d1       	rcall	.+716    	; 0x2076 <__fp_pscA>
    1daa:	30 f0       	brcs	.+12     	; 0x1db8 <__addsf3+0x18>
    1dac:	6b d1       	rcall	.+726    	; 0x2084 <__fp_pscB>
    1dae:	20 f0       	brcs	.+8      	; 0x1db8 <__addsf3+0x18>
    1db0:	31 f4       	brne	.+12     	; 0x1dbe <__addsf3+0x1e>
    1db2:	9f 3f       	cpi	r25, 0xFF	; 255
    1db4:	11 f4       	brne	.+4      	; 0x1dba <__addsf3+0x1a>
    1db6:	1e f4       	brtc	.+6      	; 0x1dbe <__addsf3+0x1e>
    1db8:	5b c1       	rjmp	.+694    	; 0x2070 <__fp_nan>
    1dba:	0e f4       	brtc	.+2      	; 0x1dbe <__addsf3+0x1e>
    1dbc:	e0 95       	com	r30
    1dbe:	e7 fb       	bst	r30, 7
    1dc0:	51 c1       	rjmp	.+674    	; 0x2064 <__fp_inf>

00001dc2 <__addsf3x>:
    1dc2:	e9 2f       	mov	r30, r25
    1dc4:	77 d1       	rcall	.+750    	; 0x20b4 <__fp_split3>
    1dc6:	80 f3       	brcs	.-32     	; 0x1da8 <__addsf3+0x8>
    1dc8:	ba 17       	cp	r27, r26
    1dca:	62 07       	cpc	r22, r18
    1dcc:	73 07       	cpc	r23, r19
    1dce:	84 07       	cpc	r24, r20
    1dd0:	95 07       	cpc	r25, r21
    1dd2:	18 f0       	brcs	.+6      	; 0x1dda <__addsf3x+0x18>
    1dd4:	71 f4       	brne	.+28     	; 0x1df2 <__addsf3x+0x30>
    1dd6:	9e f5       	brtc	.+102    	; 0x1e3e <__addsf3x+0x7c>
    1dd8:	8f c1       	rjmp	.+798    	; 0x20f8 <__fp_zero>
    1dda:	0e f4       	brtc	.+2      	; 0x1dde <__addsf3x+0x1c>
    1ddc:	e0 95       	com	r30
    1dde:	0b 2e       	mov	r0, r27
    1de0:	ba 2f       	mov	r27, r26
    1de2:	a0 2d       	mov	r26, r0
    1de4:	0b 01       	movw	r0, r22
    1de6:	b9 01       	movw	r22, r18
    1de8:	90 01       	movw	r18, r0
    1dea:	0c 01       	movw	r0, r24
    1dec:	ca 01       	movw	r24, r20
    1dee:	a0 01       	movw	r20, r0
    1df0:	11 24       	eor	r1, r1
    1df2:	ff 27       	eor	r31, r31
    1df4:	59 1b       	sub	r21, r25
    1df6:	99 f0       	breq	.+38     	; 0x1e1e <__addsf3x+0x5c>
    1df8:	59 3f       	cpi	r21, 0xF9	; 249
    1dfa:	50 f4       	brcc	.+20     	; 0x1e10 <__addsf3x+0x4e>
    1dfc:	50 3e       	cpi	r21, 0xE0	; 224
    1dfe:	68 f1       	brcs	.+90     	; 0x1e5a <__addsf3x+0x98>
    1e00:	1a 16       	cp	r1, r26
    1e02:	f0 40       	sbci	r31, 0x00	; 0
    1e04:	a2 2f       	mov	r26, r18
    1e06:	23 2f       	mov	r18, r19
    1e08:	34 2f       	mov	r19, r20
    1e0a:	44 27       	eor	r20, r20
    1e0c:	58 5f       	subi	r21, 0xF8	; 248
    1e0e:	f3 cf       	rjmp	.-26     	; 0x1df6 <__addsf3x+0x34>
    1e10:	46 95       	lsr	r20
    1e12:	37 95       	ror	r19
    1e14:	27 95       	ror	r18
    1e16:	a7 95       	ror	r26
    1e18:	f0 40       	sbci	r31, 0x00	; 0
    1e1a:	53 95       	inc	r21
    1e1c:	c9 f7       	brne	.-14     	; 0x1e10 <__addsf3x+0x4e>
    1e1e:	7e f4       	brtc	.+30     	; 0x1e3e <__addsf3x+0x7c>
    1e20:	1f 16       	cp	r1, r31
    1e22:	ba 0b       	sbc	r27, r26
    1e24:	62 0b       	sbc	r22, r18
    1e26:	73 0b       	sbc	r23, r19
    1e28:	84 0b       	sbc	r24, r20
    1e2a:	ba f0       	brmi	.+46     	; 0x1e5a <__addsf3x+0x98>
    1e2c:	91 50       	subi	r25, 0x01	; 1
    1e2e:	a1 f0       	breq	.+40     	; 0x1e58 <__addsf3x+0x96>
    1e30:	ff 0f       	add	r31, r31
    1e32:	bb 1f       	adc	r27, r27
    1e34:	66 1f       	adc	r22, r22
    1e36:	77 1f       	adc	r23, r23
    1e38:	88 1f       	adc	r24, r24
    1e3a:	c2 f7       	brpl	.-16     	; 0x1e2c <__addsf3x+0x6a>
    1e3c:	0e c0       	rjmp	.+28     	; 0x1e5a <__addsf3x+0x98>
    1e3e:	ba 0f       	add	r27, r26
    1e40:	62 1f       	adc	r22, r18
    1e42:	73 1f       	adc	r23, r19
    1e44:	84 1f       	adc	r24, r20
    1e46:	48 f4       	brcc	.+18     	; 0x1e5a <__addsf3x+0x98>
    1e48:	87 95       	ror	r24
    1e4a:	77 95       	ror	r23
    1e4c:	67 95       	ror	r22
    1e4e:	b7 95       	ror	r27
    1e50:	f7 95       	ror	r31
    1e52:	9e 3f       	cpi	r25, 0xFE	; 254
    1e54:	08 f0       	brcs	.+2      	; 0x1e58 <__addsf3x+0x96>
    1e56:	b3 cf       	rjmp	.-154    	; 0x1dbe <__addsf3+0x1e>
    1e58:	93 95       	inc	r25
    1e5a:	88 0f       	add	r24, r24
    1e5c:	08 f0       	brcs	.+2      	; 0x1e60 <__addsf3x+0x9e>
    1e5e:	99 27       	eor	r25, r25
    1e60:	ee 0f       	add	r30, r30
    1e62:	97 95       	ror	r25
    1e64:	87 95       	ror	r24
    1e66:	08 95       	ret

00001e68 <__cmpsf2>:
    1e68:	d9 d0       	rcall	.+434    	; 0x201c <__fp_cmp>
    1e6a:	08 f4       	brcc	.+2      	; 0x1e6e <__cmpsf2+0x6>
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	08 95       	ret

00001e70 <__divsf3>:
    1e70:	0c d0       	rcall	.+24     	; 0x1e8a <__divsf3x>
    1e72:	0f c1       	rjmp	.+542    	; 0x2092 <__fp_round>
    1e74:	07 d1       	rcall	.+526    	; 0x2084 <__fp_pscB>
    1e76:	40 f0       	brcs	.+16     	; 0x1e88 <__divsf3+0x18>
    1e78:	fe d0       	rcall	.+508    	; 0x2076 <__fp_pscA>
    1e7a:	30 f0       	brcs	.+12     	; 0x1e88 <__divsf3+0x18>
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <__divsf3+0x16>
    1e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    1e80:	19 f0       	breq	.+6      	; 0x1e88 <__divsf3+0x18>
    1e82:	f0 c0       	rjmp	.+480    	; 0x2064 <__fp_inf>
    1e84:	51 11       	cpse	r21, r1
    1e86:	39 c1       	rjmp	.+626    	; 0x20fa <__fp_szero>
    1e88:	f3 c0       	rjmp	.+486    	; 0x2070 <__fp_nan>

00001e8a <__divsf3x>:
    1e8a:	14 d1       	rcall	.+552    	; 0x20b4 <__fp_split3>
    1e8c:	98 f3       	brcs	.-26     	; 0x1e74 <__divsf3+0x4>

00001e8e <__divsf3_pse>:
    1e8e:	99 23       	and	r25, r25
    1e90:	c9 f3       	breq	.-14     	; 0x1e84 <__divsf3+0x14>
    1e92:	55 23       	and	r21, r21
    1e94:	b1 f3       	breq	.-20     	; 0x1e82 <__divsf3+0x12>
    1e96:	95 1b       	sub	r25, r21
    1e98:	55 0b       	sbc	r21, r21
    1e9a:	bb 27       	eor	r27, r27
    1e9c:	aa 27       	eor	r26, r26
    1e9e:	62 17       	cp	r22, r18
    1ea0:	73 07       	cpc	r23, r19
    1ea2:	84 07       	cpc	r24, r20
    1ea4:	38 f0       	brcs	.+14     	; 0x1eb4 <__divsf3_pse+0x26>
    1ea6:	9f 5f       	subi	r25, 0xFF	; 255
    1ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eaa:	22 0f       	add	r18, r18
    1eac:	33 1f       	adc	r19, r19
    1eae:	44 1f       	adc	r20, r20
    1eb0:	aa 1f       	adc	r26, r26
    1eb2:	a9 f3       	breq	.-22     	; 0x1e9e <__divsf3_pse+0x10>
    1eb4:	33 d0       	rcall	.+102    	; 0x1f1c <__divsf3_pse+0x8e>
    1eb6:	0e 2e       	mov	r0, r30
    1eb8:	3a f0       	brmi	.+14     	; 0x1ec8 <__divsf3_pse+0x3a>
    1eba:	e0 e8       	ldi	r30, 0x80	; 128
    1ebc:	30 d0       	rcall	.+96     	; 0x1f1e <__divsf3_pse+0x90>
    1ebe:	91 50       	subi	r25, 0x01	; 1
    1ec0:	50 40       	sbci	r21, 0x00	; 0
    1ec2:	e6 95       	lsr	r30
    1ec4:	00 1c       	adc	r0, r0
    1ec6:	ca f7       	brpl	.-14     	; 0x1eba <__divsf3_pse+0x2c>
    1ec8:	29 d0       	rcall	.+82     	; 0x1f1c <__divsf3_pse+0x8e>
    1eca:	fe 2f       	mov	r31, r30
    1ecc:	27 d0       	rcall	.+78     	; 0x1f1c <__divsf3_pse+0x8e>
    1ece:	66 0f       	add	r22, r22
    1ed0:	77 1f       	adc	r23, r23
    1ed2:	88 1f       	adc	r24, r24
    1ed4:	bb 1f       	adc	r27, r27
    1ed6:	26 17       	cp	r18, r22
    1ed8:	37 07       	cpc	r19, r23
    1eda:	48 07       	cpc	r20, r24
    1edc:	ab 07       	cpc	r26, r27
    1ede:	b0 e8       	ldi	r27, 0x80	; 128
    1ee0:	09 f0       	breq	.+2      	; 0x1ee4 <__divsf3_pse+0x56>
    1ee2:	bb 0b       	sbc	r27, r27
    1ee4:	80 2d       	mov	r24, r0
    1ee6:	bf 01       	movw	r22, r30
    1ee8:	ff 27       	eor	r31, r31
    1eea:	93 58       	subi	r25, 0x83	; 131
    1eec:	5f 4f       	sbci	r21, 0xFF	; 255
    1eee:	2a f0       	brmi	.+10     	; 0x1efa <__divsf3_pse+0x6c>
    1ef0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ef2:	51 05       	cpc	r21, r1
    1ef4:	68 f0       	brcs	.+26     	; 0x1f10 <__divsf3_pse+0x82>
    1ef6:	b6 c0       	rjmp	.+364    	; 0x2064 <__fp_inf>
    1ef8:	00 c1       	rjmp	.+512    	; 0x20fa <__fp_szero>
    1efa:	5f 3f       	cpi	r21, 0xFF	; 255
    1efc:	ec f3       	brlt	.-6      	; 0x1ef8 <__divsf3_pse+0x6a>
    1efe:	98 3e       	cpi	r25, 0xE8	; 232
    1f00:	dc f3       	brlt	.-10     	; 0x1ef8 <__divsf3_pse+0x6a>
    1f02:	86 95       	lsr	r24
    1f04:	77 95       	ror	r23
    1f06:	67 95       	ror	r22
    1f08:	b7 95       	ror	r27
    1f0a:	f7 95       	ror	r31
    1f0c:	9f 5f       	subi	r25, 0xFF	; 255
    1f0e:	c9 f7       	brne	.-14     	; 0x1f02 <__divsf3_pse+0x74>
    1f10:	88 0f       	add	r24, r24
    1f12:	91 1d       	adc	r25, r1
    1f14:	96 95       	lsr	r25
    1f16:	87 95       	ror	r24
    1f18:	97 f9       	bld	r25, 7
    1f1a:	08 95       	ret
    1f1c:	e1 e0       	ldi	r30, 0x01	; 1
    1f1e:	66 0f       	add	r22, r22
    1f20:	77 1f       	adc	r23, r23
    1f22:	88 1f       	adc	r24, r24
    1f24:	bb 1f       	adc	r27, r27
    1f26:	62 17       	cp	r22, r18
    1f28:	73 07       	cpc	r23, r19
    1f2a:	84 07       	cpc	r24, r20
    1f2c:	ba 07       	cpc	r27, r26
    1f2e:	20 f0       	brcs	.+8      	; 0x1f38 <__divsf3_pse+0xaa>
    1f30:	62 1b       	sub	r22, r18
    1f32:	73 0b       	sbc	r23, r19
    1f34:	84 0b       	sbc	r24, r20
    1f36:	ba 0b       	sbc	r27, r26
    1f38:	ee 1f       	adc	r30, r30
    1f3a:	88 f7       	brcc	.-30     	; 0x1f1e <__divsf3_pse+0x90>
    1f3c:	e0 95       	com	r30
    1f3e:	08 95       	ret

00001f40 <__fixsfsi>:
    1f40:	04 d0       	rcall	.+8      	; 0x1f4a <__fixunssfsi>
    1f42:	68 94       	set
    1f44:	b1 11       	cpse	r27, r1
    1f46:	d9 c0       	rjmp	.+434    	; 0x20fa <__fp_szero>
    1f48:	08 95       	ret

00001f4a <__fixunssfsi>:
    1f4a:	bc d0       	rcall	.+376    	; 0x20c4 <__fp_splitA>
    1f4c:	88 f0       	brcs	.+34     	; 0x1f70 <__fixunssfsi+0x26>
    1f4e:	9f 57       	subi	r25, 0x7F	; 127
    1f50:	90 f0       	brcs	.+36     	; 0x1f76 <__fixunssfsi+0x2c>
    1f52:	b9 2f       	mov	r27, r25
    1f54:	99 27       	eor	r25, r25
    1f56:	b7 51       	subi	r27, 0x17	; 23
    1f58:	a0 f0       	brcs	.+40     	; 0x1f82 <__fixunssfsi+0x38>
    1f5a:	d1 f0       	breq	.+52     	; 0x1f90 <__fixunssfsi+0x46>
    1f5c:	66 0f       	add	r22, r22
    1f5e:	77 1f       	adc	r23, r23
    1f60:	88 1f       	adc	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	1a f0       	brmi	.+6      	; 0x1f6c <__fixunssfsi+0x22>
    1f66:	ba 95       	dec	r27
    1f68:	c9 f7       	brne	.-14     	; 0x1f5c <__fixunssfsi+0x12>
    1f6a:	12 c0       	rjmp	.+36     	; 0x1f90 <__fixunssfsi+0x46>
    1f6c:	b1 30       	cpi	r27, 0x01	; 1
    1f6e:	81 f0       	breq	.+32     	; 0x1f90 <__fixunssfsi+0x46>
    1f70:	c3 d0       	rcall	.+390    	; 0x20f8 <__fp_zero>
    1f72:	b1 e0       	ldi	r27, 0x01	; 1
    1f74:	08 95       	ret
    1f76:	c0 c0       	rjmp	.+384    	; 0x20f8 <__fp_zero>
    1f78:	67 2f       	mov	r22, r23
    1f7a:	78 2f       	mov	r23, r24
    1f7c:	88 27       	eor	r24, r24
    1f7e:	b8 5f       	subi	r27, 0xF8	; 248
    1f80:	39 f0       	breq	.+14     	; 0x1f90 <__fixunssfsi+0x46>
    1f82:	b9 3f       	cpi	r27, 0xF9	; 249
    1f84:	cc f3       	brlt	.-14     	; 0x1f78 <__fixunssfsi+0x2e>
    1f86:	86 95       	lsr	r24
    1f88:	77 95       	ror	r23
    1f8a:	67 95       	ror	r22
    1f8c:	b3 95       	inc	r27
    1f8e:	d9 f7       	brne	.-10     	; 0x1f86 <__fixunssfsi+0x3c>
    1f90:	3e f4       	brtc	.+14     	; 0x1fa0 <__fixunssfsi+0x56>
    1f92:	90 95       	com	r25
    1f94:	80 95       	com	r24
    1f96:	70 95       	com	r23
    1f98:	61 95       	neg	r22
    1f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1fa0:	08 95       	ret

00001fa2 <__floatunsisf>:
    1fa2:	e8 94       	clt
    1fa4:	09 c0       	rjmp	.+18     	; 0x1fb8 <__floatsisf+0x12>

00001fa6 <__floatsisf>:
    1fa6:	97 fb       	bst	r25, 7
    1fa8:	3e f4       	brtc	.+14     	; 0x1fb8 <__floatsisf+0x12>
    1faa:	90 95       	com	r25
    1fac:	80 95       	com	r24
    1fae:	70 95       	com	r23
    1fb0:	61 95       	neg	r22
    1fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1fb8:	99 23       	and	r25, r25
    1fba:	a9 f0       	breq	.+42     	; 0x1fe6 <__floatsisf+0x40>
    1fbc:	f9 2f       	mov	r31, r25
    1fbe:	96 e9       	ldi	r25, 0x96	; 150
    1fc0:	bb 27       	eor	r27, r27
    1fc2:	93 95       	inc	r25
    1fc4:	f6 95       	lsr	r31
    1fc6:	87 95       	ror	r24
    1fc8:	77 95       	ror	r23
    1fca:	67 95       	ror	r22
    1fcc:	b7 95       	ror	r27
    1fce:	f1 11       	cpse	r31, r1
    1fd0:	f8 cf       	rjmp	.-16     	; 0x1fc2 <__floatsisf+0x1c>
    1fd2:	fa f4       	brpl	.+62     	; 0x2012 <__floatsisf+0x6c>
    1fd4:	bb 0f       	add	r27, r27
    1fd6:	11 f4       	brne	.+4      	; 0x1fdc <__floatsisf+0x36>
    1fd8:	60 ff       	sbrs	r22, 0
    1fda:	1b c0       	rjmp	.+54     	; 0x2012 <__floatsisf+0x6c>
    1fdc:	6f 5f       	subi	r22, 0xFF	; 255
    1fde:	7f 4f       	sbci	r23, 0xFF	; 255
    1fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    1fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    1fe4:	16 c0       	rjmp	.+44     	; 0x2012 <__floatsisf+0x6c>
    1fe6:	88 23       	and	r24, r24
    1fe8:	11 f0       	breq	.+4      	; 0x1fee <__floatsisf+0x48>
    1fea:	96 e9       	ldi	r25, 0x96	; 150
    1fec:	11 c0       	rjmp	.+34     	; 0x2010 <__floatsisf+0x6a>
    1fee:	77 23       	and	r23, r23
    1ff0:	21 f0       	breq	.+8      	; 0x1ffa <__floatsisf+0x54>
    1ff2:	9e e8       	ldi	r25, 0x8E	; 142
    1ff4:	87 2f       	mov	r24, r23
    1ff6:	76 2f       	mov	r23, r22
    1ff8:	05 c0       	rjmp	.+10     	; 0x2004 <__floatsisf+0x5e>
    1ffa:	66 23       	and	r22, r22
    1ffc:	71 f0       	breq	.+28     	; 0x201a <__floatsisf+0x74>
    1ffe:	96 e8       	ldi	r25, 0x86	; 134
    2000:	86 2f       	mov	r24, r22
    2002:	70 e0       	ldi	r23, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	2a f0       	brmi	.+10     	; 0x2012 <__floatsisf+0x6c>
    2008:	9a 95       	dec	r25
    200a:	66 0f       	add	r22, r22
    200c:	77 1f       	adc	r23, r23
    200e:	88 1f       	adc	r24, r24
    2010:	da f7       	brpl	.-10     	; 0x2008 <__floatsisf+0x62>
    2012:	88 0f       	add	r24, r24
    2014:	96 95       	lsr	r25
    2016:	87 95       	ror	r24
    2018:	97 f9       	bld	r25, 7
    201a:	08 95       	ret

0000201c <__fp_cmp>:
    201c:	99 0f       	add	r25, r25
    201e:	00 08       	sbc	r0, r0
    2020:	55 0f       	add	r21, r21
    2022:	aa 0b       	sbc	r26, r26
    2024:	e0 e8       	ldi	r30, 0x80	; 128
    2026:	fe ef       	ldi	r31, 0xFE	; 254
    2028:	16 16       	cp	r1, r22
    202a:	17 06       	cpc	r1, r23
    202c:	e8 07       	cpc	r30, r24
    202e:	f9 07       	cpc	r31, r25
    2030:	c0 f0       	brcs	.+48     	; 0x2062 <__fp_cmp+0x46>
    2032:	12 16       	cp	r1, r18
    2034:	13 06       	cpc	r1, r19
    2036:	e4 07       	cpc	r30, r20
    2038:	f5 07       	cpc	r31, r21
    203a:	98 f0       	brcs	.+38     	; 0x2062 <__fp_cmp+0x46>
    203c:	62 1b       	sub	r22, r18
    203e:	73 0b       	sbc	r23, r19
    2040:	84 0b       	sbc	r24, r20
    2042:	95 0b       	sbc	r25, r21
    2044:	39 f4       	brne	.+14     	; 0x2054 <__fp_cmp+0x38>
    2046:	0a 26       	eor	r0, r26
    2048:	61 f0       	breq	.+24     	; 0x2062 <__fp_cmp+0x46>
    204a:	23 2b       	or	r18, r19
    204c:	24 2b       	or	r18, r20
    204e:	25 2b       	or	r18, r21
    2050:	21 f4       	brne	.+8      	; 0x205a <__fp_cmp+0x3e>
    2052:	08 95       	ret
    2054:	0a 26       	eor	r0, r26
    2056:	09 f4       	brne	.+2      	; 0x205a <__fp_cmp+0x3e>
    2058:	a1 40       	sbci	r26, 0x01	; 1
    205a:	a6 95       	lsr	r26
    205c:	8f ef       	ldi	r24, 0xFF	; 255
    205e:	81 1d       	adc	r24, r1
    2060:	81 1d       	adc	r24, r1
    2062:	08 95       	ret

00002064 <__fp_inf>:
    2064:	97 f9       	bld	r25, 7
    2066:	9f 67       	ori	r25, 0x7F	; 127
    2068:	80 e8       	ldi	r24, 0x80	; 128
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	08 95       	ret

00002070 <__fp_nan>:
    2070:	9f ef       	ldi	r25, 0xFF	; 255
    2072:	80 ec       	ldi	r24, 0xC0	; 192
    2074:	08 95       	ret

00002076 <__fp_pscA>:
    2076:	00 24       	eor	r0, r0
    2078:	0a 94       	dec	r0
    207a:	16 16       	cp	r1, r22
    207c:	17 06       	cpc	r1, r23
    207e:	18 06       	cpc	r1, r24
    2080:	09 06       	cpc	r0, r25
    2082:	08 95       	ret

00002084 <__fp_pscB>:
    2084:	00 24       	eor	r0, r0
    2086:	0a 94       	dec	r0
    2088:	12 16       	cp	r1, r18
    208a:	13 06       	cpc	r1, r19
    208c:	14 06       	cpc	r1, r20
    208e:	05 06       	cpc	r0, r21
    2090:	08 95       	ret

00002092 <__fp_round>:
    2092:	09 2e       	mov	r0, r25
    2094:	03 94       	inc	r0
    2096:	00 0c       	add	r0, r0
    2098:	11 f4       	brne	.+4      	; 0x209e <__fp_round+0xc>
    209a:	88 23       	and	r24, r24
    209c:	52 f0       	brmi	.+20     	; 0x20b2 <__fp_round+0x20>
    209e:	bb 0f       	add	r27, r27
    20a0:	40 f4       	brcc	.+16     	; 0x20b2 <__fp_round+0x20>
    20a2:	bf 2b       	or	r27, r31
    20a4:	11 f4       	brne	.+4      	; 0x20aa <__fp_round+0x18>
    20a6:	60 ff       	sbrs	r22, 0
    20a8:	04 c0       	rjmp	.+8      	; 0x20b2 <__fp_round+0x20>
    20aa:	6f 5f       	subi	r22, 0xFF	; 255
    20ac:	7f 4f       	sbci	r23, 0xFF	; 255
    20ae:	8f 4f       	sbci	r24, 0xFF	; 255
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	08 95       	ret

000020b4 <__fp_split3>:
    20b4:	57 fd       	sbrc	r21, 7
    20b6:	90 58       	subi	r25, 0x80	; 128
    20b8:	44 0f       	add	r20, r20
    20ba:	55 1f       	adc	r21, r21
    20bc:	59 f0       	breq	.+22     	; 0x20d4 <__fp_splitA+0x10>
    20be:	5f 3f       	cpi	r21, 0xFF	; 255
    20c0:	71 f0       	breq	.+28     	; 0x20de <__fp_splitA+0x1a>
    20c2:	47 95       	ror	r20

000020c4 <__fp_splitA>:
    20c4:	88 0f       	add	r24, r24
    20c6:	97 fb       	bst	r25, 7
    20c8:	99 1f       	adc	r25, r25
    20ca:	61 f0       	breq	.+24     	; 0x20e4 <__fp_splitA+0x20>
    20cc:	9f 3f       	cpi	r25, 0xFF	; 255
    20ce:	79 f0       	breq	.+30     	; 0x20ee <__fp_splitA+0x2a>
    20d0:	87 95       	ror	r24
    20d2:	08 95       	ret
    20d4:	12 16       	cp	r1, r18
    20d6:	13 06       	cpc	r1, r19
    20d8:	14 06       	cpc	r1, r20
    20da:	55 1f       	adc	r21, r21
    20dc:	f2 cf       	rjmp	.-28     	; 0x20c2 <__fp_split3+0xe>
    20de:	46 95       	lsr	r20
    20e0:	f1 df       	rcall	.-30     	; 0x20c4 <__fp_splitA>
    20e2:	08 c0       	rjmp	.+16     	; 0x20f4 <__fp_splitA+0x30>
    20e4:	16 16       	cp	r1, r22
    20e6:	17 06       	cpc	r1, r23
    20e8:	18 06       	cpc	r1, r24
    20ea:	99 1f       	adc	r25, r25
    20ec:	f1 cf       	rjmp	.-30     	; 0x20d0 <__fp_splitA+0xc>
    20ee:	86 95       	lsr	r24
    20f0:	71 05       	cpc	r23, r1
    20f2:	61 05       	cpc	r22, r1
    20f4:	08 94       	sec
    20f6:	08 95       	ret

000020f8 <__fp_zero>:
    20f8:	e8 94       	clt

000020fa <__fp_szero>:
    20fa:	bb 27       	eor	r27, r27
    20fc:	66 27       	eor	r22, r22
    20fe:	77 27       	eor	r23, r23
    2100:	cb 01       	movw	r24, r22
    2102:	97 f9       	bld	r25, 7
    2104:	08 95       	ret

00002106 <__gesf2>:
    2106:	8a df       	rcall	.-236    	; 0x201c <__fp_cmp>
    2108:	08 f4       	brcc	.+2      	; 0x210c <__gesf2+0x6>
    210a:	8f ef       	ldi	r24, 0xFF	; 255
    210c:	08 95       	ret

0000210e <__mulsf3>:
    210e:	0b d0       	rcall	.+22     	; 0x2126 <__mulsf3x>
    2110:	c0 cf       	rjmp	.-128    	; 0x2092 <__fp_round>
    2112:	b1 df       	rcall	.-158    	; 0x2076 <__fp_pscA>
    2114:	28 f0       	brcs	.+10     	; 0x2120 <__mulsf3+0x12>
    2116:	b6 df       	rcall	.-148    	; 0x2084 <__fp_pscB>
    2118:	18 f0       	brcs	.+6      	; 0x2120 <__mulsf3+0x12>
    211a:	95 23       	and	r25, r21
    211c:	09 f0       	breq	.+2      	; 0x2120 <__mulsf3+0x12>
    211e:	a2 cf       	rjmp	.-188    	; 0x2064 <__fp_inf>
    2120:	a7 cf       	rjmp	.-178    	; 0x2070 <__fp_nan>
    2122:	11 24       	eor	r1, r1
    2124:	ea cf       	rjmp	.-44     	; 0x20fa <__fp_szero>

00002126 <__mulsf3x>:
    2126:	c6 df       	rcall	.-116    	; 0x20b4 <__fp_split3>
    2128:	a0 f3       	brcs	.-24     	; 0x2112 <__mulsf3+0x4>

0000212a <__mulsf3_pse>:
    212a:	95 9f       	mul	r25, r21
    212c:	d1 f3       	breq	.-12     	; 0x2122 <__mulsf3+0x14>
    212e:	95 0f       	add	r25, r21
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	55 1f       	adc	r21, r21
    2134:	62 9f       	mul	r22, r18
    2136:	f0 01       	movw	r30, r0
    2138:	72 9f       	mul	r23, r18
    213a:	bb 27       	eor	r27, r27
    213c:	f0 0d       	add	r31, r0
    213e:	b1 1d       	adc	r27, r1
    2140:	63 9f       	mul	r22, r19
    2142:	aa 27       	eor	r26, r26
    2144:	f0 0d       	add	r31, r0
    2146:	b1 1d       	adc	r27, r1
    2148:	aa 1f       	adc	r26, r26
    214a:	64 9f       	mul	r22, r20
    214c:	66 27       	eor	r22, r22
    214e:	b0 0d       	add	r27, r0
    2150:	a1 1d       	adc	r26, r1
    2152:	66 1f       	adc	r22, r22
    2154:	82 9f       	mul	r24, r18
    2156:	22 27       	eor	r18, r18
    2158:	b0 0d       	add	r27, r0
    215a:	a1 1d       	adc	r26, r1
    215c:	62 1f       	adc	r22, r18
    215e:	73 9f       	mul	r23, r19
    2160:	b0 0d       	add	r27, r0
    2162:	a1 1d       	adc	r26, r1
    2164:	62 1f       	adc	r22, r18
    2166:	83 9f       	mul	r24, r19
    2168:	a0 0d       	add	r26, r0
    216a:	61 1d       	adc	r22, r1
    216c:	22 1f       	adc	r18, r18
    216e:	74 9f       	mul	r23, r20
    2170:	33 27       	eor	r19, r19
    2172:	a0 0d       	add	r26, r0
    2174:	61 1d       	adc	r22, r1
    2176:	23 1f       	adc	r18, r19
    2178:	84 9f       	mul	r24, r20
    217a:	60 0d       	add	r22, r0
    217c:	21 1d       	adc	r18, r1
    217e:	82 2f       	mov	r24, r18
    2180:	76 2f       	mov	r23, r22
    2182:	6a 2f       	mov	r22, r26
    2184:	11 24       	eor	r1, r1
    2186:	9f 57       	subi	r25, 0x7F	; 127
    2188:	50 40       	sbci	r21, 0x00	; 0
    218a:	8a f0       	brmi	.+34     	; 0x21ae <__mulsf3_pse+0x84>
    218c:	e1 f0       	breq	.+56     	; 0x21c6 <__mulsf3_pse+0x9c>
    218e:	88 23       	and	r24, r24
    2190:	4a f0       	brmi	.+18     	; 0x21a4 <__mulsf3_pse+0x7a>
    2192:	ee 0f       	add	r30, r30
    2194:	ff 1f       	adc	r31, r31
    2196:	bb 1f       	adc	r27, r27
    2198:	66 1f       	adc	r22, r22
    219a:	77 1f       	adc	r23, r23
    219c:	88 1f       	adc	r24, r24
    219e:	91 50       	subi	r25, 0x01	; 1
    21a0:	50 40       	sbci	r21, 0x00	; 0
    21a2:	a9 f7       	brne	.-22     	; 0x218e <__mulsf3_pse+0x64>
    21a4:	9e 3f       	cpi	r25, 0xFE	; 254
    21a6:	51 05       	cpc	r21, r1
    21a8:	70 f0       	brcs	.+28     	; 0x21c6 <__mulsf3_pse+0x9c>
    21aa:	5c cf       	rjmp	.-328    	; 0x2064 <__fp_inf>
    21ac:	a6 cf       	rjmp	.-180    	; 0x20fa <__fp_szero>
    21ae:	5f 3f       	cpi	r21, 0xFF	; 255
    21b0:	ec f3       	brlt	.-6      	; 0x21ac <__mulsf3_pse+0x82>
    21b2:	98 3e       	cpi	r25, 0xE8	; 232
    21b4:	dc f3       	brlt	.-10     	; 0x21ac <__mulsf3_pse+0x82>
    21b6:	86 95       	lsr	r24
    21b8:	77 95       	ror	r23
    21ba:	67 95       	ror	r22
    21bc:	b7 95       	ror	r27
    21be:	f7 95       	ror	r31
    21c0:	e7 95       	ror	r30
    21c2:	9f 5f       	subi	r25, 0xFF	; 255
    21c4:	c1 f7       	brne	.-16     	; 0x21b6 <__mulsf3_pse+0x8c>
    21c6:	fe 2b       	or	r31, r30
    21c8:	88 0f       	add	r24, r24
    21ca:	91 1d       	adc	r25, r1
    21cc:	96 95       	lsr	r25
    21ce:	87 95       	ror	r24
    21d0:	97 f9       	bld	r25, 7
    21d2:	08 95       	ret
    21d4:	11 f4       	brne	.+4      	; 0x21da <__mulsf3_pse+0xb0>
    21d6:	0e f4       	brtc	.+2      	; 0x21da <__mulsf3_pse+0xb0>
    21d8:	4b cf       	rjmp	.-362    	; 0x2070 <__fp_nan>
    21da:	3e c0       	rjmp	.+124    	; 0x2258 <__fp_mpack>

000021dc <sqrt>:
    21dc:	73 df       	rcall	.-282    	; 0x20c4 <__fp_splitA>
    21de:	d0 f3       	brcs	.-12     	; 0x21d4 <__mulsf3_pse+0xaa>
    21e0:	99 23       	and	r25, r25
    21e2:	d9 f3       	breq	.-10     	; 0x21da <__mulsf3_pse+0xb0>
    21e4:	ce f3       	brts	.-14     	; 0x21d8 <__mulsf3_pse+0xae>
    21e6:	9f 57       	subi	r25, 0x7F	; 127
    21e8:	55 0b       	sbc	r21, r21
    21ea:	87 ff       	sbrs	r24, 7
    21ec:	43 d0       	rcall	.+134    	; 0x2274 <__fp_norm2>
    21ee:	00 24       	eor	r0, r0
    21f0:	a0 e6       	ldi	r26, 0x60	; 96
    21f2:	40 ea       	ldi	r20, 0xA0	; 160
    21f4:	90 01       	movw	r18, r0
    21f6:	80 58       	subi	r24, 0x80	; 128
    21f8:	56 95       	lsr	r21
    21fa:	97 95       	ror	r25
    21fc:	28 f4       	brcc	.+10     	; 0x2208 <sqrt+0x2c>
    21fe:	80 5c       	subi	r24, 0xC0	; 192
    2200:	66 0f       	add	r22, r22
    2202:	77 1f       	adc	r23, r23
    2204:	88 1f       	adc	r24, r24
    2206:	20 f0       	brcs	.+8      	; 0x2210 <sqrt+0x34>
    2208:	26 17       	cp	r18, r22
    220a:	37 07       	cpc	r19, r23
    220c:	48 07       	cpc	r20, r24
    220e:	30 f4       	brcc	.+12     	; 0x221c <sqrt+0x40>
    2210:	62 1b       	sub	r22, r18
    2212:	73 0b       	sbc	r23, r19
    2214:	84 0b       	sbc	r24, r20
    2216:	20 29       	or	r18, r0
    2218:	31 29       	or	r19, r1
    221a:	4a 2b       	or	r20, r26
    221c:	a6 95       	lsr	r26
    221e:	17 94       	ror	r1
    2220:	07 94       	ror	r0
    2222:	20 25       	eor	r18, r0
    2224:	31 25       	eor	r19, r1
    2226:	4a 27       	eor	r20, r26
    2228:	58 f7       	brcc	.-42     	; 0x2200 <sqrt+0x24>
    222a:	66 0f       	add	r22, r22
    222c:	77 1f       	adc	r23, r23
    222e:	88 1f       	adc	r24, r24
    2230:	20 f0       	brcs	.+8      	; 0x223a <sqrt+0x5e>
    2232:	26 17       	cp	r18, r22
    2234:	37 07       	cpc	r19, r23
    2236:	48 07       	cpc	r20, r24
    2238:	30 f4       	brcc	.+12     	; 0x2246 <sqrt+0x6a>
    223a:	62 0b       	sbc	r22, r18
    223c:	73 0b       	sbc	r23, r19
    223e:	84 0b       	sbc	r24, r20
    2240:	20 0d       	add	r18, r0
    2242:	31 1d       	adc	r19, r1
    2244:	41 1d       	adc	r20, r1
    2246:	a0 95       	com	r26
    2248:	81 f7       	brne	.-32     	; 0x222a <sqrt+0x4e>
    224a:	b9 01       	movw	r22, r18
    224c:	84 2f       	mov	r24, r20
    224e:	91 58       	subi	r25, 0x81	; 129
    2250:	88 0f       	add	r24, r24
    2252:	96 95       	lsr	r25
    2254:	87 95       	ror	r24
    2256:	08 95       	ret

00002258 <__fp_mpack>:
    2258:	9f 3f       	cpi	r25, 0xFF	; 255
    225a:	31 f0       	breq	.+12     	; 0x2268 <__fp_mpack_finite+0xc>

0000225c <__fp_mpack_finite>:
    225c:	91 50       	subi	r25, 0x01	; 1
    225e:	20 f4       	brcc	.+8      	; 0x2268 <__fp_mpack_finite+0xc>
    2260:	87 95       	ror	r24
    2262:	77 95       	ror	r23
    2264:	67 95       	ror	r22
    2266:	b7 95       	ror	r27
    2268:	88 0f       	add	r24, r24
    226a:	91 1d       	adc	r25, r1
    226c:	96 95       	lsr	r25
    226e:	87 95       	ror	r24
    2270:	97 f9       	bld	r25, 7
    2272:	08 95       	ret

00002274 <__fp_norm2>:
    2274:	91 50       	subi	r25, 0x01	; 1
    2276:	50 40       	sbci	r21, 0x00	; 0
    2278:	66 0f       	add	r22, r22
    227a:	77 1f       	adc	r23, r23
    227c:	88 1f       	adc	r24, r24
    227e:	d2 f7       	brpl	.-12     	; 0x2274 <__fp_norm2>
    2280:	08 95       	ret

00002282 <__divmodhi4>:
    2282:	97 fb       	bst	r25, 7
    2284:	07 2e       	mov	r0, r23
    2286:	16 f4       	brtc	.+4      	; 0x228c <__divmodhi4+0xa>
    2288:	00 94       	com	r0
    228a:	06 d0       	rcall	.+12     	; 0x2298 <__divmodhi4_neg1>
    228c:	77 fd       	sbrc	r23, 7
    228e:	08 d0       	rcall	.+16     	; 0x22a0 <__divmodhi4_neg2>
    2290:	27 d0       	rcall	.+78     	; 0x22e0 <__udivmodhi4>
    2292:	07 fc       	sbrc	r0, 7
    2294:	05 d0       	rcall	.+10     	; 0x22a0 <__divmodhi4_neg2>
    2296:	3e f4       	brtc	.+14     	; 0x22a6 <__divmodhi4_exit>

00002298 <__divmodhi4_neg1>:
    2298:	90 95       	com	r25
    229a:	81 95       	neg	r24
    229c:	9f 4f       	sbci	r25, 0xFF	; 255
    229e:	08 95       	ret

000022a0 <__divmodhi4_neg2>:
    22a0:	70 95       	com	r23
    22a2:	61 95       	neg	r22
    22a4:	7f 4f       	sbci	r23, 0xFF	; 255

000022a6 <__divmodhi4_exit>:
    22a6:	08 95       	ret

000022a8 <__divmodsi4>:
    22a8:	05 2e       	mov	r0, r21
    22aa:	97 fb       	bst	r25, 7
    22ac:	16 f4       	brtc	.+4      	; 0x22b2 <__divmodsi4+0xa>
    22ae:	00 94       	com	r0
    22b0:	0f d0       	rcall	.+30     	; 0x22d0 <__negsi2>
    22b2:	57 fd       	sbrc	r21, 7
    22b4:	05 d0       	rcall	.+10     	; 0x22c0 <__divmodsi4_neg2>
    22b6:	28 d0       	rcall	.+80     	; 0x2308 <__udivmodsi4>
    22b8:	07 fc       	sbrc	r0, 7
    22ba:	02 d0       	rcall	.+4      	; 0x22c0 <__divmodsi4_neg2>
    22bc:	46 f4       	brtc	.+16     	; 0x22ce <__divmodsi4_exit>
    22be:	08 c0       	rjmp	.+16     	; 0x22d0 <__negsi2>

000022c0 <__divmodsi4_neg2>:
    22c0:	50 95       	com	r21
    22c2:	40 95       	com	r20
    22c4:	30 95       	com	r19
    22c6:	21 95       	neg	r18
    22c8:	3f 4f       	sbci	r19, 0xFF	; 255
    22ca:	4f 4f       	sbci	r20, 0xFF	; 255
    22cc:	5f 4f       	sbci	r21, 0xFF	; 255

000022ce <__divmodsi4_exit>:
    22ce:	08 95       	ret

000022d0 <__negsi2>:
    22d0:	90 95       	com	r25
    22d2:	80 95       	com	r24
    22d4:	70 95       	com	r23
    22d6:	61 95       	neg	r22
    22d8:	7f 4f       	sbci	r23, 0xFF	; 255
    22da:	8f 4f       	sbci	r24, 0xFF	; 255
    22dc:	9f 4f       	sbci	r25, 0xFF	; 255
    22de:	08 95       	ret

000022e0 <__udivmodhi4>:
    22e0:	aa 1b       	sub	r26, r26
    22e2:	bb 1b       	sub	r27, r27
    22e4:	51 e1       	ldi	r21, 0x11	; 17
    22e6:	07 c0       	rjmp	.+14     	; 0x22f6 <__udivmodhi4_ep>

000022e8 <__udivmodhi4_loop>:
    22e8:	aa 1f       	adc	r26, r26
    22ea:	bb 1f       	adc	r27, r27
    22ec:	a6 17       	cp	r26, r22
    22ee:	b7 07       	cpc	r27, r23
    22f0:	10 f0       	brcs	.+4      	; 0x22f6 <__udivmodhi4_ep>
    22f2:	a6 1b       	sub	r26, r22
    22f4:	b7 0b       	sbc	r27, r23

000022f6 <__udivmodhi4_ep>:
    22f6:	88 1f       	adc	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	5a 95       	dec	r21
    22fc:	a9 f7       	brne	.-22     	; 0x22e8 <__udivmodhi4_loop>
    22fe:	80 95       	com	r24
    2300:	90 95       	com	r25
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	08 95       	ret

00002308 <__udivmodsi4>:
    2308:	a1 e2       	ldi	r26, 0x21	; 33
    230a:	1a 2e       	mov	r1, r26
    230c:	aa 1b       	sub	r26, r26
    230e:	bb 1b       	sub	r27, r27
    2310:	fd 01       	movw	r30, r26
    2312:	0d c0       	rjmp	.+26     	; 0x232e <__udivmodsi4_ep>

00002314 <__udivmodsi4_loop>:
    2314:	aa 1f       	adc	r26, r26
    2316:	bb 1f       	adc	r27, r27
    2318:	ee 1f       	adc	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	a2 17       	cp	r26, r18
    231e:	b3 07       	cpc	r27, r19
    2320:	e4 07       	cpc	r30, r20
    2322:	f5 07       	cpc	r31, r21
    2324:	20 f0       	brcs	.+8      	; 0x232e <__udivmodsi4_ep>
    2326:	a2 1b       	sub	r26, r18
    2328:	b3 0b       	sbc	r27, r19
    232a:	e4 0b       	sbc	r30, r20
    232c:	f5 0b       	sbc	r31, r21

0000232e <__udivmodsi4_ep>:
    232e:	66 1f       	adc	r22, r22
    2330:	77 1f       	adc	r23, r23
    2332:	88 1f       	adc	r24, r24
    2334:	99 1f       	adc	r25, r25
    2336:	1a 94       	dec	r1
    2338:	69 f7       	brne	.-38     	; 0x2314 <__udivmodsi4_loop>
    233a:	60 95       	com	r22
    233c:	70 95       	com	r23
    233e:	80 95       	com	r24
    2340:	90 95       	com	r25
    2342:	9b 01       	movw	r18, r22
    2344:	ac 01       	movw	r20, r24
    2346:	bd 01       	movw	r22, r26
    2348:	cf 01       	movw	r24, r30
    234a:	08 95       	ret

0000234c <do_rand>:
    234c:	8f 92       	push	r8
    234e:	9f 92       	push	r9
    2350:	af 92       	push	r10
    2352:	bf 92       	push	r11
    2354:	cf 92       	push	r12
    2356:	df 92       	push	r13
    2358:	ef 92       	push	r14
    235a:	ff 92       	push	r15
    235c:	cf 93       	push	r28
    235e:	df 93       	push	r29
    2360:	ec 01       	movw	r28, r24
    2362:	68 81       	ld	r22, Y
    2364:	79 81       	ldd	r23, Y+1	; 0x01
    2366:	8a 81       	ldd	r24, Y+2	; 0x02
    2368:	9b 81       	ldd	r25, Y+3	; 0x03
    236a:	61 15       	cp	r22, r1
    236c:	71 05       	cpc	r23, r1
    236e:	81 05       	cpc	r24, r1
    2370:	91 05       	cpc	r25, r1
    2372:	21 f4       	brne	.+8      	; 0x237c <do_rand+0x30>
    2374:	64 e2       	ldi	r22, 0x24	; 36
    2376:	79 ed       	ldi	r23, 0xD9	; 217
    2378:	8b e5       	ldi	r24, 0x5B	; 91
    237a:	97 e0       	ldi	r25, 0x07	; 7
    237c:	2d e1       	ldi	r18, 0x1D	; 29
    237e:	33 ef       	ldi	r19, 0xF3	; 243
    2380:	41 e0       	ldi	r20, 0x01	; 1
    2382:	50 e0       	ldi	r21, 0x00	; 0
    2384:	91 df       	rcall	.-222    	; 0x22a8 <__divmodsi4>
    2386:	49 01       	movw	r8, r18
    2388:	5a 01       	movw	r10, r20
    238a:	9b 01       	movw	r18, r22
    238c:	ac 01       	movw	r20, r24
    238e:	a7 ea       	ldi	r26, 0xA7	; 167
    2390:	b1 e4       	ldi	r27, 0x41	; 65
    2392:	4b d4       	rcall	.+2198   	; 0x2c2a <__muluhisi3>
    2394:	6b 01       	movw	r12, r22
    2396:	7c 01       	movw	r14, r24
    2398:	ac ee       	ldi	r26, 0xEC	; 236
    239a:	b4 ef       	ldi	r27, 0xF4	; 244
    239c:	a5 01       	movw	r20, r10
    239e:	94 01       	movw	r18, r8
    23a0:	50 d4       	rcall	.+2208   	; 0x2c42 <__mulohisi3>
    23a2:	c6 0e       	add	r12, r22
    23a4:	d7 1e       	adc	r13, r23
    23a6:	e8 1e       	adc	r14, r24
    23a8:	f9 1e       	adc	r15, r25
    23aa:	f7 fe       	sbrs	r15, 7
    23ac:	06 c0       	rjmp	.+12     	; 0x23ba <do_rand+0x6e>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	c8 1a       	sub	r12, r24
    23b2:	d1 08       	sbc	r13, r1
    23b4:	e1 08       	sbc	r14, r1
    23b6:	80 e8       	ldi	r24, 0x80	; 128
    23b8:	f8 0a       	sbc	r15, r24
    23ba:	c8 82       	st	Y, r12
    23bc:	d9 82       	std	Y+1, r13	; 0x01
    23be:	ea 82       	std	Y+2, r14	; 0x02
    23c0:	fb 82       	std	Y+3, r15	; 0x03
    23c2:	c6 01       	movw	r24, r12
    23c4:	9f 77       	andi	r25, 0x7F	; 127
    23c6:	df 91       	pop	r29
    23c8:	cf 91       	pop	r28
    23ca:	ff 90       	pop	r15
    23cc:	ef 90       	pop	r14
    23ce:	df 90       	pop	r13
    23d0:	cf 90       	pop	r12
    23d2:	bf 90       	pop	r11
    23d4:	af 90       	pop	r10
    23d6:	9f 90       	pop	r9
    23d8:	8f 90       	pop	r8
    23da:	08 95       	ret

000023dc <rand_r>:
    23dc:	b7 cf       	rjmp	.-146    	; 0x234c <do_rand>

000023de <rand>:
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	91 e0       	ldi	r25, 0x01	; 1
    23e2:	b4 cf       	rjmp	.-152    	; 0x234c <do_rand>

000023e4 <srand>:
    23e4:	a0 e0       	ldi	r26, 0x00	; 0
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	80 93 00 01 	sts	0x0100, r24
    23ec:	90 93 01 01 	sts	0x0101, r25
    23f0:	a0 93 02 01 	sts	0x0102, r26
    23f4:	b0 93 03 01 	sts	0x0103, r27
    23f8:	08 95       	ret

000023fa <strcpy_P>:
    23fa:	fb 01       	movw	r30, r22
    23fc:	dc 01       	movw	r26, r24
    23fe:	05 90       	lpm	r0, Z+
    2400:	0d 92       	st	X+, r0
    2402:	00 20       	and	r0, r0
    2404:	e1 f7       	brne	.-8      	; 0x23fe <strcpy_P+0x4>
    2406:	08 95       	ret

00002408 <fdevopen>:
    2408:	0f 93       	push	r16
    240a:	1f 93       	push	r17
    240c:	cf 93       	push	r28
    240e:	df 93       	push	r29
    2410:	ec 01       	movw	r28, r24
    2412:	8b 01       	movw	r16, r22
    2414:	00 97       	sbiw	r24, 0x00	; 0
    2416:	31 f4       	brne	.+12     	; 0x2424 <fdevopen+0x1c>
    2418:	61 15       	cp	r22, r1
    241a:	71 05       	cpc	r23, r1
    241c:	19 f4       	brne	.+6      	; 0x2424 <fdevopen+0x1c>
    241e:	80 e0       	ldi	r24, 0x00	; 0
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	37 c0       	rjmp	.+110    	; 0x2492 <fdevopen+0x8a>
    2424:	6e e0       	ldi	r22, 0x0E	; 14
    2426:	70 e0       	ldi	r23, 0x00	; 0
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	10 d2       	rcall	.+1056   	; 0x284e <calloc>
    242e:	fc 01       	movw	r30, r24
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	a9 f3       	breq	.-22     	; 0x241e <fdevopen+0x16>
    2434:	80 e8       	ldi	r24, 0x80	; 128
    2436:	83 83       	std	Z+3, r24	; 0x03
    2438:	01 15       	cp	r16, r1
    243a:	11 05       	cpc	r17, r1
    243c:	71 f0       	breq	.+28     	; 0x245a <fdevopen+0x52>
    243e:	13 87       	std	Z+11, r17	; 0x0b
    2440:	02 87       	std	Z+10, r16	; 0x0a
    2442:	81 e8       	ldi	r24, 0x81	; 129
    2444:	83 83       	std	Z+3, r24	; 0x03
    2446:	80 91 d6 01 	lds	r24, 0x01D6
    244a:	90 91 d7 01 	lds	r25, 0x01D7
    244e:	89 2b       	or	r24, r25
    2450:	21 f4       	brne	.+8      	; 0x245a <fdevopen+0x52>
    2452:	f0 93 d7 01 	sts	0x01D7, r31
    2456:	e0 93 d6 01 	sts	0x01D6, r30
    245a:	20 97       	sbiw	r28, 0x00	; 0
    245c:	c9 f0       	breq	.+50     	; 0x2490 <fdevopen+0x88>
    245e:	d1 87       	std	Z+9, r29	; 0x09
    2460:	c0 87       	std	Z+8, r28	; 0x08
    2462:	83 81       	ldd	r24, Z+3	; 0x03
    2464:	82 60       	ori	r24, 0x02	; 2
    2466:	83 83       	std	Z+3, r24	; 0x03
    2468:	80 91 d8 01 	lds	r24, 0x01D8
    246c:	90 91 d9 01 	lds	r25, 0x01D9
    2470:	89 2b       	or	r24, r25
    2472:	71 f4       	brne	.+28     	; 0x2490 <fdevopen+0x88>
    2474:	f0 93 d9 01 	sts	0x01D9, r31
    2478:	e0 93 d8 01 	sts	0x01D8, r30
    247c:	80 91 da 01 	lds	r24, 0x01DA
    2480:	90 91 db 01 	lds	r25, 0x01DB
    2484:	89 2b       	or	r24, r25
    2486:	21 f4       	brne	.+8      	; 0x2490 <fdevopen+0x88>
    2488:	f0 93 db 01 	sts	0x01DB, r31
    248c:	e0 93 da 01 	sts	0x01DA, r30
    2490:	cf 01       	movw	r24, r30
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	1f 91       	pop	r17
    2498:	0f 91       	pop	r16
    249a:	08 95       	ret

0000249c <printf>:
    249c:	a0 e0       	ldi	r26, 0x00	; 0
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e3 e5       	ldi	r30, 0x53	; 83
    24a2:	f2 e1       	ldi	r31, 0x12	; 18
    24a4:	e2 c3       	rjmp	.+1988   	; 0x2c6a <__prologue_saves__+0x20>
    24a6:	fe 01       	movw	r30, r28
    24a8:	35 96       	adiw	r30, 0x05	; 5
    24aa:	61 91       	ld	r22, Z+
    24ac:	71 91       	ld	r23, Z+
    24ae:	af 01       	movw	r20, r30
    24b0:	80 91 d8 01 	lds	r24, 0x01D8
    24b4:	90 91 d9 01 	lds	r25, 0x01D9
    24b8:	07 d0       	rcall	.+14     	; 0x24c8 <vfprintf>
    24ba:	e2 e0       	ldi	r30, 0x02	; 2
    24bc:	f2 c3       	rjmp	.+2020   	; 0x2ca2 <__epilogue_restores__+0x20>

000024be <putchar>:
    24be:	60 91 d8 01 	lds	r22, 0x01D8
    24c2:	70 91 d9 01 	lds	r23, 0x01D9
    24c6:	21 c3       	rjmp	.+1602   	; 0x2b0a <fputc>

000024c8 <vfprintf>:
    24c8:	ac e0       	ldi	r26, 0x0C	; 12
    24ca:	b0 e0       	ldi	r27, 0x00	; 0
    24cc:	e9 e6       	ldi	r30, 0x69	; 105
    24ce:	f2 e1       	ldi	r31, 0x12	; 18
    24d0:	bc c3       	rjmp	.+1912   	; 0x2c4a <__prologue_saves__>
    24d2:	7c 01       	movw	r14, r24
    24d4:	6b 01       	movw	r12, r22
    24d6:	8a 01       	movw	r16, r20
    24d8:	fc 01       	movw	r30, r24
    24da:	17 82       	std	Z+7, r1	; 0x07
    24dc:	16 82       	std	Z+6, r1	; 0x06
    24de:	83 81       	ldd	r24, Z+3	; 0x03
    24e0:	81 ff       	sbrs	r24, 1
    24e2:	b0 c1       	rjmp	.+864    	; 0x2844 <vfprintf+0x37c>
    24e4:	ce 01       	movw	r24, r28
    24e6:	01 96       	adiw	r24, 0x01	; 1
    24e8:	4c 01       	movw	r8, r24
    24ea:	f7 01       	movw	r30, r14
    24ec:	93 81       	ldd	r25, Z+3	; 0x03
    24ee:	f6 01       	movw	r30, r12
    24f0:	93 fd       	sbrc	r25, 3
    24f2:	85 91       	lpm	r24, Z+
    24f4:	93 ff       	sbrs	r25, 3
    24f6:	81 91       	ld	r24, Z+
    24f8:	6f 01       	movw	r12, r30
    24fa:	88 23       	and	r24, r24
    24fc:	09 f4       	brne	.+2      	; 0x2500 <vfprintf+0x38>
    24fe:	9e c1       	rjmp	.+828    	; 0x283c <vfprintf+0x374>
    2500:	85 32       	cpi	r24, 0x25	; 37
    2502:	39 f4       	brne	.+14     	; 0x2512 <vfprintf+0x4a>
    2504:	93 fd       	sbrc	r25, 3
    2506:	85 91       	lpm	r24, Z+
    2508:	93 ff       	sbrs	r25, 3
    250a:	81 91       	ld	r24, Z+
    250c:	6f 01       	movw	r12, r30
    250e:	85 32       	cpi	r24, 0x25	; 37
    2510:	21 f4       	brne	.+8      	; 0x251a <vfprintf+0x52>
    2512:	b7 01       	movw	r22, r14
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	f9 d2       	rcall	.+1522   	; 0x2b0a <fputc>
    2518:	e8 cf       	rjmp	.-48     	; 0x24ea <vfprintf+0x22>
    251a:	51 2c       	mov	r5, r1
    251c:	31 2c       	mov	r3, r1
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	20 32       	cpi	r18, 0x20	; 32
    2522:	a0 f4       	brcc	.+40     	; 0x254c <vfprintf+0x84>
    2524:	8b 32       	cpi	r24, 0x2B	; 43
    2526:	69 f0       	breq	.+26     	; 0x2542 <vfprintf+0x7a>
    2528:	30 f4       	brcc	.+12     	; 0x2536 <vfprintf+0x6e>
    252a:	80 32       	cpi	r24, 0x20	; 32
    252c:	59 f0       	breq	.+22     	; 0x2544 <vfprintf+0x7c>
    252e:	83 32       	cpi	r24, 0x23	; 35
    2530:	69 f4       	brne	.+26     	; 0x254c <vfprintf+0x84>
    2532:	20 61       	ori	r18, 0x10	; 16
    2534:	2c c0       	rjmp	.+88     	; 0x258e <vfprintf+0xc6>
    2536:	8d 32       	cpi	r24, 0x2D	; 45
    2538:	39 f0       	breq	.+14     	; 0x2548 <vfprintf+0x80>
    253a:	80 33       	cpi	r24, 0x30	; 48
    253c:	39 f4       	brne	.+14     	; 0x254c <vfprintf+0x84>
    253e:	21 60       	ori	r18, 0x01	; 1
    2540:	26 c0       	rjmp	.+76     	; 0x258e <vfprintf+0xc6>
    2542:	22 60       	ori	r18, 0x02	; 2
    2544:	24 60       	ori	r18, 0x04	; 4
    2546:	23 c0       	rjmp	.+70     	; 0x258e <vfprintf+0xc6>
    2548:	28 60       	ori	r18, 0x08	; 8
    254a:	21 c0       	rjmp	.+66     	; 0x258e <vfprintf+0xc6>
    254c:	27 fd       	sbrc	r18, 7
    254e:	27 c0       	rjmp	.+78     	; 0x259e <vfprintf+0xd6>
    2550:	30 ed       	ldi	r19, 0xD0	; 208
    2552:	38 0f       	add	r19, r24
    2554:	3a 30       	cpi	r19, 0x0A	; 10
    2556:	78 f4       	brcc	.+30     	; 0x2576 <vfprintf+0xae>
    2558:	26 ff       	sbrs	r18, 6
    255a:	06 c0       	rjmp	.+12     	; 0x2568 <vfprintf+0xa0>
    255c:	fa e0       	ldi	r31, 0x0A	; 10
    255e:	5f 9e       	mul	r5, r31
    2560:	30 0d       	add	r19, r0
    2562:	11 24       	eor	r1, r1
    2564:	53 2e       	mov	r5, r19
    2566:	13 c0       	rjmp	.+38     	; 0x258e <vfprintf+0xc6>
    2568:	8a e0       	ldi	r24, 0x0A	; 10
    256a:	38 9e       	mul	r3, r24
    256c:	30 0d       	add	r19, r0
    256e:	11 24       	eor	r1, r1
    2570:	33 2e       	mov	r3, r19
    2572:	20 62       	ori	r18, 0x20	; 32
    2574:	0c c0       	rjmp	.+24     	; 0x258e <vfprintf+0xc6>
    2576:	8e 32       	cpi	r24, 0x2E	; 46
    2578:	21 f4       	brne	.+8      	; 0x2582 <vfprintf+0xba>
    257a:	26 fd       	sbrc	r18, 6
    257c:	5f c1       	rjmp	.+702    	; 0x283c <vfprintf+0x374>
    257e:	20 64       	ori	r18, 0x40	; 64
    2580:	06 c0       	rjmp	.+12     	; 0x258e <vfprintf+0xc6>
    2582:	8c 36       	cpi	r24, 0x6C	; 108
    2584:	11 f4       	brne	.+4      	; 0x258a <vfprintf+0xc2>
    2586:	20 68       	ori	r18, 0x80	; 128
    2588:	02 c0       	rjmp	.+4      	; 0x258e <vfprintf+0xc6>
    258a:	88 36       	cpi	r24, 0x68	; 104
    258c:	41 f4       	brne	.+16     	; 0x259e <vfprintf+0xd6>
    258e:	f6 01       	movw	r30, r12
    2590:	93 fd       	sbrc	r25, 3
    2592:	85 91       	lpm	r24, Z+
    2594:	93 ff       	sbrs	r25, 3
    2596:	81 91       	ld	r24, Z+
    2598:	6f 01       	movw	r12, r30
    259a:	81 11       	cpse	r24, r1
    259c:	c1 cf       	rjmp	.-126    	; 0x2520 <vfprintf+0x58>
    259e:	98 2f       	mov	r25, r24
    25a0:	9f 7d       	andi	r25, 0xDF	; 223
    25a2:	95 54       	subi	r25, 0x45	; 69
    25a4:	93 30       	cpi	r25, 0x03	; 3
    25a6:	28 f4       	brcc	.+10     	; 0x25b2 <vfprintf+0xea>
    25a8:	0c 5f       	subi	r16, 0xFC	; 252
    25aa:	1f 4f       	sbci	r17, 0xFF	; 255
    25ac:	ff e3       	ldi	r31, 0x3F	; 63
    25ae:	f9 83       	std	Y+1, r31	; 0x01
    25b0:	0d c0       	rjmp	.+26     	; 0x25cc <vfprintf+0x104>
    25b2:	83 36       	cpi	r24, 0x63	; 99
    25b4:	31 f0       	breq	.+12     	; 0x25c2 <vfprintf+0xfa>
    25b6:	83 37       	cpi	r24, 0x73	; 115
    25b8:	71 f0       	breq	.+28     	; 0x25d6 <vfprintf+0x10e>
    25ba:	83 35       	cpi	r24, 0x53	; 83
    25bc:	09 f0       	breq	.+2      	; 0x25c0 <vfprintf+0xf8>
    25be:	57 c0       	rjmp	.+174    	; 0x266e <vfprintf+0x1a6>
    25c0:	21 c0       	rjmp	.+66     	; 0x2604 <vfprintf+0x13c>
    25c2:	f8 01       	movw	r30, r16
    25c4:	80 81       	ld	r24, Z
    25c6:	89 83       	std	Y+1, r24	; 0x01
    25c8:	0e 5f       	subi	r16, 0xFE	; 254
    25ca:	1f 4f       	sbci	r17, 0xFF	; 255
    25cc:	44 24       	eor	r4, r4
    25ce:	43 94       	inc	r4
    25d0:	51 2c       	mov	r5, r1
    25d2:	54 01       	movw	r10, r8
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <vfprintf+0x136>
    25d6:	38 01       	movw	r6, r16
    25d8:	f2 e0       	ldi	r31, 0x02	; 2
    25da:	6f 0e       	add	r6, r31
    25dc:	71 1c       	adc	r7, r1
    25de:	f8 01       	movw	r30, r16
    25e0:	a0 80       	ld	r10, Z
    25e2:	b1 80       	ldd	r11, Z+1	; 0x01
    25e4:	26 ff       	sbrs	r18, 6
    25e6:	03 c0       	rjmp	.+6      	; 0x25ee <vfprintf+0x126>
    25e8:	65 2d       	mov	r22, r5
    25ea:	70 e0       	ldi	r23, 0x00	; 0
    25ec:	02 c0       	rjmp	.+4      	; 0x25f2 <vfprintf+0x12a>
    25ee:	6f ef       	ldi	r22, 0xFF	; 255
    25f0:	7f ef       	ldi	r23, 0xFF	; 255
    25f2:	c5 01       	movw	r24, r10
    25f4:	2c 87       	std	Y+12, r18	; 0x0c
    25f6:	7e d2       	rcall	.+1276   	; 0x2af4 <strnlen>
    25f8:	2c 01       	movw	r4, r24
    25fa:	83 01       	movw	r16, r6
    25fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    25fe:	2f 77       	andi	r18, 0x7F	; 127
    2600:	22 2e       	mov	r2, r18
    2602:	16 c0       	rjmp	.+44     	; 0x2630 <vfprintf+0x168>
    2604:	38 01       	movw	r6, r16
    2606:	f2 e0       	ldi	r31, 0x02	; 2
    2608:	6f 0e       	add	r6, r31
    260a:	71 1c       	adc	r7, r1
    260c:	f8 01       	movw	r30, r16
    260e:	a0 80       	ld	r10, Z
    2610:	b1 80       	ldd	r11, Z+1	; 0x01
    2612:	26 ff       	sbrs	r18, 6
    2614:	03 c0       	rjmp	.+6      	; 0x261c <vfprintf+0x154>
    2616:	65 2d       	mov	r22, r5
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	02 c0       	rjmp	.+4      	; 0x2620 <vfprintf+0x158>
    261c:	6f ef       	ldi	r22, 0xFF	; 255
    261e:	7f ef       	ldi	r23, 0xFF	; 255
    2620:	c5 01       	movw	r24, r10
    2622:	2c 87       	std	Y+12, r18	; 0x0c
    2624:	55 d2       	rcall	.+1194   	; 0x2ad0 <strnlen_P>
    2626:	2c 01       	movw	r4, r24
    2628:	2c 85       	ldd	r18, Y+12	; 0x0c
    262a:	20 68       	ori	r18, 0x80	; 128
    262c:	22 2e       	mov	r2, r18
    262e:	83 01       	movw	r16, r6
    2630:	23 fc       	sbrc	r2, 3
    2632:	19 c0       	rjmp	.+50     	; 0x2666 <vfprintf+0x19e>
    2634:	83 2d       	mov	r24, r3
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	48 16       	cp	r4, r24
    263a:	59 06       	cpc	r5, r25
    263c:	a0 f4       	brcc	.+40     	; 0x2666 <vfprintf+0x19e>
    263e:	b7 01       	movw	r22, r14
    2640:	80 e2       	ldi	r24, 0x20	; 32
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	62 d2       	rcall	.+1220   	; 0x2b0a <fputc>
    2646:	3a 94       	dec	r3
    2648:	f5 cf       	rjmp	.-22     	; 0x2634 <vfprintf+0x16c>
    264a:	f5 01       	movw	r30, r10
    264c:	27 fc       	sbrc	r2, 7
    264e:	85 91       	lpm	r24, Z+
    2650:	27 fe       	sbrs	r2, 7
    2652:	81 91       	ld	r24, Z+
    2654:	5f 01       	movw	r10, r30
    2656:	b7 01       	movw	r22, r14
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	57 d2       	rcall	.+1198   	; 0x2b0a <fputc>
    265c:	31 10       	cpse	r3, r1
    265e:	3a 94       	dec	r3
    2660:	f1 e0       	ldi	r31, 0x01	; 1
    2662:	4f 1a       	sub	r4, r31
    2664:	51 08       	sbc	r5, r1
    2666:	41 14       	cp	r4, r1
    2668:	51 04       	cpc	r5, r1
    266a:	79 f7       	brne	.-34     	; 0x264a <vfprintf+0x182>
    266c:	de c0       	rjmp	.+444    	; 0x282a <vfprintf+0x362>
    266e:	84 36       	cpi	r24, 0x64	; 100
    2670:	11 f0       	breq	.+4      	; 0x2676 <vfprintf+0x1ae>
    2672:	89 36       	cpi	r24, 0x69	; 105
    2674:	31 f5       	brne	.+76     	; 0x26c2 <vfprintf+0x1fa>
    2676:	f8 01       	movw	r30, r16
    2678:	27 ff       	sbrs	r18, 7
    267a:	07 c0       	rjmp	.+14     	; 0x268a <vfprintf+0x1c2>
    267c:	60 81       	ld	r22, Z
    267e:	71 81       	ldd	r23, Z+1	; 0x01
    2680:	82 81       	ldd	r24, Z+2	; 0x02
    2682:	93 81       	ldd	r25, Z+3	; 0x03
    2684:	0c 5f       	subi	r16, 0xFC	; 252
    2686:	1f 4f       	sbci	r17, 0xFF	; 255
    2688:	08 c0       	rjmp	.+16     	; 0x269a <vfprintf+0x1d2>
    268a:	60 81       	ld	r22, Z
    268c:	71 81       	ldd	r23, Z+1	; 0x01
    268e:	88 27       	eor	r24, r24
    2690:	77 fd       	sbrc	r23, 7
    2692:	80 95       	com	r24
    2694:	98 2f       	mov	r25, r24
    2696:	0e 5f       	subi	r16, 0xFE	; 254
    2698:	1f 4f       	sbci	r17, 0xFF	; 255
    269a:	2f 76       	andi	r18, 0x6F	; 111
    269c:	b2 2e       	mov	r11, r18
    269e:	97 ff       	sbrs	r25, 7
    26a0:	09 c0       	rjmp	.+18     	; 0x26b4 <vfprintf+0x1ec>
    26a2:	90 95       	com	r25
    26a4:	80 95       	com	r24
    26a6:	70 95       	com	r23
    26a8:	61 95       	neg	r22
    26aa:	7f 4f       	sbci	r23, 0xFF	; 255
    26ac:	8f 4f       	sbci	r24, 0xFF	; 255
    26ae:	9f 4f       	sbci	r25, 0xFF	; 255
    26b0:	20 68       	ori	r18, 0x80	; 128
    26b2:	b2 2e       	mov	r11, r18
    26b4:	2a e0       	ldi	r18, 0x0A	; 10
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	a4 01       	movw	r20, r8
    26ba:	59 d2       	rcall	.+1202   	; 0x2b6e <__ultoa_invert>
    26bc:	a8 2e       	mov	r10, r24
    26be:	a8 18       	sub	r10, r8
    26c0:	43 c0       	rjmp	.+134    	; 0x2748 <vfprintf+0x280>
    26c2:	85 37       	cpi	r24, 0x75	; 117
    26c4:	29 f4       	brne	.+10     	; 0x26d0 <vfprintf+0x208>
    26c6:	2f 7e       	andi	r18, 0xEF	; 239
    26c8:	b2 2e       	mov	r11, r18
    26ca:	2a e0       	ldi	r18, 0x0A	; 10
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	25 c0       	rjmp	.+74     	; 0x271a <vfprintf+0x252>
    26d0:	f2 2f       	mov	r31, r18
    26d2:	f9 7f       	andi	r31, 0xF9	; 249
    26d4:	bf 2e       	mov	r11, r31
    26d6:	8f 36       	cpi	r24, 0x6F	; 111
    26d8:	c1 f0       	breq	.+48     	; 0x270a <vfprintf+0x242>
    26da:	18 f4       	brcc	.+6      	; 0x26e2 <vfprintf+0x21a>
    26dc:	88 35       	cpi	r24, 0x58	; 88
    26de:	79 f0       	breq	.+30     	; 0x26fe <vfprintf+0x236>
    26e0:	ad c0       	rjmp	.+346    	; 0x283c <vfprintf+0x374>
    26e2:	80 37       	cpi	r24, 0x70	; 112
    26e4:	19 f0       	breq	.+6      	; 0x26ec <vfprintf+0x224>
    26e6:	88 37       	cpi	r24, 0x78	; 120
    26e8:	21 f0       	breq	.+8      	; 0x26f2 <vfprintf+0x22a>
    26ea:	a8 c0       	rjmp	.+336    	; 0x283c <vfprintf+0x374>
    26ec:	2f 2f       	mov	r18, r31
    26ee:	20 61       	ori	r18, 0x10	; 16
    26f0:	b2 2e       	mov	r11, r18
    26f2:	b4 fe       	sbrs	r11, 4
    26f4:	0d c0       	rjmp	.+26     	; 0x2710 <vfprintf+0x248>
    26f6:	8b 2d       	mov	r24, r11
    26f8:	84 60       	ori	r24, 0x04	; 4
    26fa:	b8 2e       	mov	r11, r24
    26fc:	09 c0       	rjmp	.+18     	; 0x2710 <vfprintf+0x248>
    26fe:	24 ff       	sbrs	r18, 4
    2700:	0a c0       	rjmp	.+20     	; 0x2716 <vfprintf+0x24e>
    2702:	9f 2f       	mov	r25, r31
    2704:	96 60       	ori	r25, 0x06	; 6
    2706:	b9 2e       	mov	r11, r25
    2708:	06 c0       	rjmp	.+12     	; 0x2716 <vfprintf+0x24e>
    270a:	28 e0       	ldi	r18, 0x08	; 8
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	05 c0       	rjmp	.+10     	; 0x271a <vfprintf+0x252>
    2710:	20 e1       	ldi	r18, 0x10	; 16
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	02 c0       	rjmp	.+4      	; 0x271a <vfprintf+0x252>
    2716:	20 e1       	ldi	r18, 0x10	; 16
    2718:	32 e0       	ldi	r19, 0x02	; 2
    271a:	f8 01       	movw	r30, r16
    271c:	b7 fe       	sbrs	r11, 7
    271e:	07 c0       	rjmp	.+14     	; 0x272e <vfprintf+0x266>
    2720:	60 81       	ld	r22, Z
    2722:	71 81       	ldd	r23, Z+1	; 0x01
    2724:	82 81       	ldd	r24, Z+2	; 0x02
    2726:	93 81       	ldd	r25, Z+3	; 0x03
    2728:	0c 5f       	subi	r16, 0xFC	; 252
    272a:	1f 4f       	sbci	r17, 0xFF	; 255
    272c:	06 c0       	rjmp	.+12     	; 0x273a <vfprintf+0x272>
    272e:	60 81       	ld	r22, Z
    2730:	71 81       	ldd	r23, Z+1	; 0x01
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	0e 5f       	subi	r16, 0xFE	; 254
    2738:	1f 4f       	sbci	r17, 0xFF	; 255
    273a:	a4 01       	movw	r20, r8
    273c:	18 d2       	rcall	.+1072   	; 0x2b6e <__ultoa_invert>
    273e:	a8 2e       	mov	r10, r24
    2740:	a8 18       	sub	r10, r8
    2742:	fb 2d       	mov	r31, r11
    2744:	ff 77       	andi	r31, 0x7F	; 127
    2746:	bf 2e       	mov	r11, r31
    2748:	b6 fe       	sbrs	r11, 6
    274a:	0b c0       	rjmp	.+22     	; 0x2762 <vfprintf+0x29a>
    274c:	2b 2d       	mov	r18, r11
    274e:	2e 7f       	andi	r18, 0xFE	; 254
    2750:	a5 14       	cp	r10, r5
    2752:	50 f4       	brcc	.+20     	; 0x2768 <vfprintf+0x2a0>
    2754:	b4 fe       	sbrs	r11, 4
    2756:	0a c0       	rjmp	.+20     	; 0x276c <vfprintf+0x2a4>
    2758:	b2 fc       	sbrc	r11, 2
    275a:	08 c0       	rjmp	.+16     	; 0x276c <vfprintf+0x2a4>
    275c:	2b 2d       	mov	r18, r11
    275e:	2e 7e       	andi	r18, 0xEE	; 238
    2760:	05 c0       	rjmp	.+10     	; 0x276c <vfprintf+0x2a4>
    2762:	7a 2c       	mov	r7, r10
    2764:	2b 2d       	mov	r18, r11
    2766:	03 c0       	rjmp	.+6      	; 0x276e <vfprintf+0x2a6>
    2768:	7a 2c       	mov	r7, r10
    276a:	01 c0       	rjmp	.+2      	; 0x276e <vfprintf+0x2a6>
    276c:	75 2c       	mov	r7, r5
    276e:	24 ff       	sbrs	r18, 4
    2770:	0d c0       	rjmp	.+26     	; 0x278c <vfprintf+0x2c4>
    2772:	fe 01       	movw	r30, r28
    2774:	ea 0d       	add	r30, r10
    2776:	f1 1d       	adc	r31, r1
    2778:	80 81       	ld	r24, Z
    277a:	80 33       	cpi	r24, 0x30	; 48
    277c:	11 f4       	brne	.+4      	; 0x2782 <vfprintf+0x2ba>
    277e:	29 7e       	andi	r18, 0xE9	; 233
    2780:	09 c0       	rjmp	.+18     	; 0x2794 <vfprintf+0x2cc>
    2782:	22 ff       	sbrs	r18, 2
    2784:	06 c0       	rjmp	.+12     	; 0x2792 <vfprintf+0x2ca>
    2786:	73 94       	inc	r7
    2788:	73 94       	inc	r7
    278a:	04 c0       	rjmp	.+8      	; 0x2794 <vfprintf+0x2cc>
    278c:	82 2f       	mov	r24, r18
    278e:	86 78       	andi	r24, 0x86	; 134
    2790:	09 f0       	breq	.+2      	; 0x2794 <vfprintf+0x2cc>
    2792:	73 94       	inc	r7
    2794:	23 fd       	sbrc	r18, 3
    2796:	12 c0       	rjmp	.+36     	; 0x27bc <vfprintf+0x2f4>
    2798:	20 ff       	sbrs	r18, 0
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <vfprintf+0x2e0>
    279c:	5a 2c       	mov	r5, r10
    279e:	73 14       	cp	r7, r3
    27a0:	18 f4       	brcc	.+6      	; 0x27a8 <vfprintf+0x2e0>
    27a2:	53 0c       	add	r5, r3
    27a4:	57 18       	sub	r5, r7
    27a6:	73 2c       	mov	r7, r3
    27a8:	73 14       	cp	r7, r3
    27aa:	60 f4       	brcc	.+24     	; 0x27c4 <vfprintf+0x2fc>
    27ac:	b7 01       	movw	r22, r14
    27ae:	80 e2       	ldi	r24, 0x20	; 32
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	2c 87       	std	Y+12, r18	; 0x0c
    27b4:	aa d1       	rcall	.+852    	; 0x2b0a <fputc>
    27b6:	73 94       	inc	r7
    27b8:	2c 85       	ldd	r18, Y+12	; 0x0c
    27ba:	f6 cf       	rjmp	.-20     	; 0x27a8 <vfprintf+0x2e0>
    27bc:	73 14       	cp	r7, r3
    27be:	10 f4       	brcc	.+4      	; 0x27c4 <vfprintf+0x2fc>
    27c0:	37 18       	sub	r3, r7
    27c2:	01 c0       	rjmp	.+2      	; 0x27c6 <vfprintf+0x2fe>
    27c4:	31 2c       	mov	r3, r1
    27c6:	24 ff       	sbrs	r18, 4
    27c8:	11 c0       	rjmp	.+34     	; 0x27ec <vfprintf+0x324>
    27ca:	b7 01       	movw	r22, r14
    27cc:	80 e3       	ldi	r24, 0x30	; 48
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	2c 87       	std	Y+12, r18	; 0x0c
    27d2:	9b d1       	rcall	.+822    	; 0x2b0a <fputc>
    27d4:	2c 85       	ldd	r18, Y+12	; 0x0c
    27d6:	22 ff       	sbrs	r18, 2
    27d8:	16 c0       	rjmp	.+44     	; 0x2806 <vfprintf+0x33e>
    27da:	21 ff       	sbrs	r18, 1
    27dc:	03 c0       	rjmp	.+6      	; 0x27e4 <vfprintf+0x31c>
    27de:	88 e5       	ldi	r24, 0x58	; 88
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	02 c0       	rjmp	.+4      	; 0x27e8 <vfprintf+0x320>
    27e4:	88 e7       	ldi	r24, 0x78	; 120
    27e6:	90 e0       	ldi	r25, 0x00	; 0
    27e8:	b7 01       	movw	r22, r14
    27ea:	0c c0       	rjmp	.+24     	; 0x2804 <vfprintf+0x33c>
    27ec:	82 2f       	mov	r24, r18
    27ee:	86 78       	andi	r24, 0x86	; 134
    27f0:	51 f0       	breq	.+20     	; 0x2806 <vfprintf+0x33e>
    27f2:	21 fd       	sbrc	r18, 1
    27f4:	02 c0       	rjmp	.+4      	; 0x27fa <vfprintf+0x332>
    27f6:	80 e2       	ldi	r24, 0x20	; 32
    27f8:	01 c0       	rjmp	.+2      	; 0x27fc <vfprintf+0x334>
    27fa:	8b e2       	ldi	r24, 0x2B	; 43
    27fc:	27 fd       	sbrc	r18, 7
    27fe:	8d e2       	ldi	r24, 0x2D	; 45
    2800:	b7 01       	movw	r22, r14
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	82 d1       	rcall	.+772    	; 0x2b0a <fputc>
    2806:	a5 14       	cp	r10, r5
    2808:	30 f4       	brcc	.+12     	; 0x2816 <vfprintf+0x34e>
    280a:	b7 01       	movw	r22, r14
    280c:	80 e3       	ldi	r24, 0x30	; 48
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	7c d1       	rcall	.+760    	; 0x2b0a <fputc>
    2812:	5a 94       	dec	r5
    2814:	f8 cf       	rjmp	.-16     	; 0x2806 <vfprintf+0x33e>
    2816:	aa 94       	dec	r10
    2818:	f4 01       	movw	r30, r8
    281a:	ea 0d       	add	r30, r10
    281c:	f1 1d       	adc	r31, r1
    281e:	80 81       	ld	r24, Z
    2820:	b7 01       	movw	r22, r14
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	72 d1       	rcall	.+740    	; 0x2b0a <fputc>
    2826:	a1 10       	cpse	r10, r1
    2828:	f6 cf       	rjmp	.-20     	; 0x2816 <vfprintf+0x34e>
    282a:	33 20       	and	r3, r3
    282c:	09 f4       	brne	.+2      	; 0x2830 <vfprintf+0x368>
    282e:	5d ce       	rjmp	.-838    	; 0x24ea <vfprintf+0x22>
    2830:	b7 01       	movw	r22, r14
    2832:	80 e2       	ldi	r24, 0x20	; 32
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	69 d1       	rcall	.+722    	; 0x2b0a <fputc>
    2838:	3a 94       	dec	r3
    283a:	f7 cf       	rjmp	.-18     	; 0x282a <vfprintf+0x362>
    283c:	f7 01       	movw	r30, r14
    283e:	86 81       	ldd	r24, Z+6	; 0x06
    2840:	97 81       	ldd	r25, Z+7	; 0x07
    2842:	02 c0       	rjmp	.+4      	; 0x2848 <vfprintf+0x380>
    2844:	8f ef       	ldi	r24, 0xFF	; 255
    2846:	9f ef       	ldi	r25, 0xFF	; 255
    2848:	2c 96       	adiw	r28, 0x0c	; 12
    284a:	e2 e1       	ldi	r30, 0x12	; 18
    284c:	1a c2       	rjmp	.+1076   	; 0x2c82 <__epilogue_restores__>

0000284e <calloc>:
    284e:	0f 93       	push	r16
    2850:	1f 93       	push	r17
    2852:	cf 93       	push	r28
    2854:	df 93       	push	r29
    2856:	86 9f       	mul	r24, r22
    2858:	80 01       	movw	r16, r0
    285a:	87 9f       	mul	r24, r23
    285c:	10 0d       	add	r17, r0
    285e:	96 9f       	mul	r25, r22
    2860:	10 0d       	add	r17, r0
    2862:	11 24       	eor	r1, r1
    2864:	c8 01       	movw	r24, r16
    2866:	0d d0       	rcall	.+26     	; 0x2882 <malloc>
    2868:	ec 01       	movw	r28, r24
    286a:	00 97       	sbiw	r24, 0x00	; 0
    286c:	21 f0       	breq	.+8      	; 0x2876 <calloc+0x28>
    286e:	a8 01       	movw	r20, r16
    2870:	60 e0       	ldi	r22, 0x00	; 0
    2872:	70 e0       	ldi	r23, 0x00	; 0
    2874:	38 d1       	rcall	.+624    	; 0x2ae6 <memset>
    2876:	ce 01       	movw	r24, r28
    2878:	df 91       	pop	r29
    287a:	cf 91       	pop	r28
    287c:	1f 91       	pop	r17
    287e:	0f 91       	pop	r16
    2880:	08 95       	ret

00002882 <malloc>:
    2882:	cf 93       	push	r28
    2884:	df 93       	push	r29
    2886:	82 30       	cpi	r24, 0x02	; 2
    2888:	91 05       	cpc	r25, r1
    288a:	10 f4       	brcc	.+4      	; 0x2890 <malloc+0xe>
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	e0 91 de 01 	lds	r30, 0x01DE
    2894:	f0 91 df 01 	lds	r31, 0x01DF
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	a0 e0       	ldi	r26, 0x00	; 0
    289e:	b0 e0       	ldi	r27, 0x00	; 0
    28a0:	30 97       	sbiw	r30, 0x00	; 0
    28a2:	39 f1       	breq	.+78     	; 0x28f2 <malloc+0x70>
    28a4:	40 81       	ld	r20, Z
    28a6:	51 81       	ldd	r21, Z+1	; 0x01
    28a8:	48 17       	cp	r20, r24
    28aa:	59 07       	cpc	r21, r25
    28ac:	b8 f0       	brcs	.+46     	; 0x28dc <malloc+0x5a>
    28ae:	48 17       	cp	r20, r24
    28b0:	59 07       	cpc	r21, r25
    28b2:	71 f4       	brne	.+28     	; 0x28d0 <malloc+0x4e>
    28b4:	82 81       	ldd	r24, Z+2	; 0x02
    28b6:	93 81       	ldd	r25, Z+3	; 0x03
    28b8:	10 97       	sbiw	r26, 0x00	; 0
    28ba:	29 f0       	breq	.+10     	; 0x28c6 <malloc+0x44>
    28bc:	13 96       	adiw	r26, 0x03	; 3
    28be:	9c 93       	st	X, r25
    28c0:	8e 93       	st	-X, r24
    28c2:	12 97       	sbiw	r26, 0x02	; 2
    28c4:	2c c0       	rjmp	.+88     	; 0x291e <malloc+0x9c>
    28c6:	90 93 df 01 	sts	0x01DF, r25
    28ca:	80 93 de 01 	sts	0x01DE, r24
    28ce:	27 c0       	rjmp	.+78     	; 0x291e <malloc+0x9c>
    28d0:	21 15       	cp	r18, r1
    28d2:	31 05       	cpc	r19, r1
    28d4:	31 f0       	breq	.+12     	; 0x28e2 <malloc+0x60>
    28d6:	42 17       	cp	r20, r18
    28d8:	53 07       	cpc	r21, r19
    28da:	18 f0       	brcs	.+6      	; 0x28e2 <malloc+0x60>
    28dc:	a9 01       	movw	r20, r18
    28de:	db 01       	movw	r26, r22
    28e0:	01 c0       	rjmp	.+2      	; 0x28e4 <malloc+0x62>
    28e2:	ef 01       	movw	r28, r30
    28e4:	9a 01       	movw	r18, r20
    28e6:	bd 01       	movw	r22, r26
    28e8:	df 01       	movw	r26, r30
    28ea:	02 80       	ldd	r0, Z+2	; 0x02
    28ec:	f3 81       	ldd	r31, Z+3	; 0x03
    28ee:	e0 2d       	mov	r30, r0
    28f0:	d7 cf       	rjmp	.-82     	; 0x28a0 <malloc+0x1e>
    28f2:	21 15       	cp	r18, r1
    28f4:	31 05       	cpc	r19, r1
    28f6:	f9 f0       	breq	.+62     	; 0x2936 <malloc+0xb4>
    28f8:	28 1b       	sub	r18, r24
    28fa:	39 0b       	sbc	r19, r25
    28fc:	24 30       	cpi	r18, 0x04	; 4
    28fe:	31 05       	cpc	r19, r1
    2900:	80 f4       	brcc	.+32     	; 0x2922 <malloc+0xa0>
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	9b 81       	ldd	r25, Y+3	; 0x03
    2906:	61 15       	cp	r22, r1
    2908:	71 05       	cpc	r23, r1
    290a:	21 f0       	breq	.+8      	; 0x2914 <malloc+0x92>
    290c:	fb 01       	movw	r30, r22
    290e:	93 83       	std	Z+3, r25	; 0x03
    2910:	82 83       	std	Z+2, r24	; 0x02
    2912:	04 c0       	rjmp	.+8      	; 0x291c <malloc+0x9a>
    2914:	90 93 df 01 	sts	0x01DF, r25
    2918:	80 93 de 01 	sts	0x01DE, r24
    291c:	fe 01       	movw	r30, r28
    291e:	32 96       	adiw	r30, 0x02	; 2
    2920:	44 c0       	rjmp	.+136    	; 0x29aa <malloc+0x128>
    2922:	fe 01       	movw	r30, r28
    2924:	e2 0f       	add	r30, r18
    2926:	f3 1f       	adc	r31, r19
    2928:	81 93       	st	Z+, r24
    292a:	91 93       	st	Z+, r25
    292c:	22 50       	subi	r18, 0x02	; 2
    292e:	31 09       	sbc	r19, r1
    2930:	39 83       	std	Y+1, r19	; 0x01
    2932:	28 83       	st	Y, r18
    2934:	3a c0       	rjmp	.+116    	; 0x29aa <malloc+0x128>
    2936:	20 91 dc 01 	lds	r18, 0x01DC
    293a:	30 91 dd 01 	lds	r19, 0x01DD
    293e:	23 2b       	or	r18, r19
    2940:	41 f4       	brne	.+16     	; 0x2952 <malloc+0xd0>
    2942:	20 91 06 01 	lds	r18, 0x0106
    2946:	30 91 07 01 	lds	r19, 0x0107
    294a:	30 93 dd 01 	sts	0x01DD, r19
    294e:	20 93 dc 01 	sts	0x01DC, r18
    2952:	20 91 04 01 	lds	r18, 0x0104
    2956:	30 91 05 01 	lds	r19, 0x0105
    295a:	21 15       	cp	r18, r1
    295c:	31 05       	cpc	r19, r1
    295e:	41 f4       	brne	.+16     	; 0x2970 <malloc+0xee>
    2960:	2d b7       	in	r18, 0x3d	; 61
    2962:	3e b7       	in	r19, 0x3e	; 62
    2964:	40 91 08 01 	lds	r20, 0x0108
    2968:	50 91 09 01 	lds	r21, 0x0109
    296c:	24 1b       	sub	r18, r20
    296e:	35 0b       	sbc	r19, r21
    2970:	e0 91 dc 01 	lds	r30, 0x01DC
    2974:	f0 91 dd 01 	lds	r31, 0x01DD
    2978:	e2 17       	cp	r30, r18
    297a:	f3 07       	cpc	r31, r19
    297c:	a0 f4       	brcc	.+40     	; 0x29a6 <malloc+0x124>
    297e:	2e 1b       	sub	r18, r30
    2980:	3f 0b       	sbc	r19, r31
    2982:	28 17       	cp	r18, r24
    2984:	39 07       	cpc	r19, r25
    2986:	78 f0       	brcs	.+30     	; 0x29a6 <malloc+0x124>
    2988:	ac 01       	movw	r20, r24
    298a:	4e 5f       	subi	r20, 0xFE	; 254
    298c:	5f 4f       	sbci	r21, 0xFF	; 255
    298e:	24 17       	cp	r18, r20
    2990:	35 07       	cpc	r19, r21
    2992:	48 f0       	brcs	.+18     	; 0x29a6 <malloc+0x124>
    2994:	4e 0f       	add	r20, r30
    2996:	5f 1f       	adc	r21, r31
    2998:	50 93 dd 01 	sts	0x01DD, r21
    299c:	40 93 dc 01 	sts	0x01DC, r20
    29a0:	81 93       	st	Z+, r24
    29a2:	91 93       	st	Z+, r25
    29a4:	02 c0       	rjmp	.+4      	; 0x29aa <malloc+0x128>
    29a6:	e0 e0       	ldi	r30, 0x00	; 0
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	cf 01       	movw	r24, r30
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <free>:
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	00 97       	sbiw	r24, 0x00	; 0
    29b8:	09 f4       	brne	.+2      	; 0x29bc <free+0xa>
    29ba:	87 c0       	rjmp	.+270    	; 0x2aca <free+0x118>
    29bc:	fc 01       	movw	r30, r24
    29be:	32 97       	sbiw	r30, 0x02	; 2
    29c0:	13 82       	std	Z+3, r1	; 0x03
    29c2:	12 82       	std	Z+2, r1	; 0x02
    29c4:	c0 91 de 01 	lds	r28, 0x01DE
    29c8:	d0 91 df 01 	lds	r29, 0x01DF
    29cc:	20 97       	sbiw	r28, 0x00	; 0
    29ce:	81 f4       	brne	.+32     	; 0x29f0 <free+0x3e>
    29d0:	20 81       	ld	r18, Z
    29d2:	31 81       	ldd	r19, Z+1	; 0x01
    29d4:	28 0f       	add	r18, r24
    29d6:	39 1f       	adc	r19, r25
    29d8:	80 91 dc 01 	lds	r24, 0x01DC
    29dc:	90 91 dd 01 	lds	r25, 0x01DD
    29e0:	82 17       	cp	r24, r18
    29e2:	93 07       	cpc	r25, r19
    29e4:	79 f5       	brne	.+94     	; 0x2a44 <free+0x92>
    29e6:	f0 93 dd 01 	sts	0x01DD, r31
    29ea:	e0 93 dc 01 	sts	0x01DC, r30
    29ee:	6d c0       	rjmp	.+218    	; 0x2aca <free+0x118>
    29f0:	de 01       	movw	r26, r28
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	ae 17       	cp	r26, r30
    29f8:	bf 07       	cpc	r27, r31
    29fa:	50 f4       	brcc	.+20     	; 0x2a10 <free+0x5e>
    29fc:	12 96       	adiw	r26, 0x02	; 2
    29fe:	4d 91       	ld	r20, X+
    2a00:	5c 91       	ld	r21, X
    2a02:	13 97       	sbiw	r26, 0x03	; 3
    2a04:	9d 01       	movw	r18, r26
    2a06:	41 15       	cp	r20, r1
    2a08:	51 05       	cpc	r21, r1
    2a0a:	09 f1       	breq	.+66     	; 0x2a4e <free+0x9c>
    2a0c:	da 01       	movw	r26, r20
    2a0e:	f3 cf       	rjmp	.-26     	; 0x29f6 <free+0x44>
    2a10:	b3 83       	std	Z+3, r27	; 0x03
    2a12:	a2 83       	std	Z+2, r26	; 0x02
    2a14:	40 81       	ld	r20, Z
    2a16:	51 81       	ldd	r21, Z+1	; 0x01
    2a18:	84 0f       	add	r24, r20
    2a1a:	95 1f       	adc	r25, r21
    2a1c:	8a 17       	cp	r24, r26
    2a1e:	9b 07       	cpc	r25, r27
    2a20:	71 f4       	brne	.+28     	; 0x2a3e <free+0x8c>
    2a22:	8d 91       	ld	r24, X+
    2a24:	9c 91       	ld	r25, X
    2a26:	11 97       	sbiw	r26, 0x01	; 1
    2a28:	84 0f       	add	r24, r20
    2a2a:	95 1f       	adc	r25, r21
    2a2c:	02 96       	adiw	r24, 0x02	; 2
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
    2a32:	12 96       	adiw	r26, 0x02	; 2
    2a34:	8d 91       	ld	r24, X+
    2a36:	9c 91       	ld	r25, X
    2a38:	13 97       	sbiw	r26, 0x03	; 3
    2a3a:	93 83       	std	Z+3, r25	; 0x03
    2a3c:	82 83       	std	Z+2, r24	; 0x02
    2a3e:	21 15       	cp	r18, r1
    2a40:	31 05       	cpc	r19, r1
    2a42:	29 f4       	brne	.+10     	; 0x2a4e <free+0x9c>
    2a44:	f0 93 df 01 	sts	0x01DF, r31
    2a48:	e0 93 de 01 	sts	0x01DE, r30
    2a4c:	3e c0       	rjmp	.+124    	; 0x2aca <free+0x118>
    2a4e:	d9 01       	movw	r26, r18
    2a50:	13 96       	adiw	r26, 0x03	; 3
    2a52:	fc 93       	st	X, r31
    2a54:	ee 93       	st	-X, r30
    2a56:	12 97       	sbiw	r26, 0x02	; 2
    2a58:	4d 91       	ld	r20, X+
    2a5a:	5d 91       	ld	r21, X+
    2a5c:	a4 0f       	add	r26, r20
    2a5e:	b5 1f       	adc	r27, r21
    2a60:	ea 17       	cp	r30, r26
    2a62:	fb 07       	cpc	r31, r27
    2a64:	79 f4       	brne	.+30     	; 0x2a84 <free+0xd2>
    2a66:	80 81       	ld	r24, Z
    2a68:	91 81       	ldd	r25, Z+1	; 0x01
    2a6a:	84 0f       	add	r24, r20
    2a6c:	95 1f       	adc	r25, r21
    2a6e:	02 96       	adiw	r24, 0x02	; 2
    2a70:	d9 01       	movw	r26, r18
    2a72:	11 96       	adiw	r26, 0x01	; 1
    2a74:	9c 93       	st	X, r25
    2a76:	8e 93       	st	-X, r24
    2a78:	82 81       	ldd	r24, Z+2	; 0x02
    2a7a:	93 81       	ldd	r25, Z+3	; 0x03
    2a7c:	13 96       	adiw	r26, 0x03	; 3
    2a7e:	9c 93       	st	X, r25
    2a80:	8e 93       	st	-X, r24
    2a82:	12 97       	sbiw	r26, 0x02	; 2
    2a84:	e0 e0       	ldi	r30, 0x00	; 0
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	19 f0       	breq	.+6      	; 0x2a96 <free+0xe4>
    2a90:	fe 01       	movw	r30, r28
    2a92:	ec 01       	movw	r28, r24
    2a94:	f9 cf       	rjmp	.-14     	; 0x2a88 <free+0xd6>
    2a96:	ce 01       	movw	r24, r28
    2a98:	02 96       	adiw	r24, 0x02	; 2
    2a9a:	28 81       	ld	r18, Y
    2a9c:	39 81       	ldd	r19, Y+1	; 0x01
    2a9e:	82 0f       	add	r24, r18
    2aa0:	93 1f       	adc	r25, r19
    2aa2:	20 91 dc 01 	lds	r18, 0x01DC
    2aa6:	30 91 dd 01 	lds	r19, 0x01DD
    2aaa:	28 17       	cp	r18, r24
    2aac:	39 07       	cpc	r19, r25
    2aae:	69 f4       	brne	.+26     	; 0x2aca <free+0x118>
    2ab0:	30 97       	sbiw	r30, 0x00	; 0
    2ab2:	29 f4       	brne	.+10     	; 0x2abe <free+0x10c>
    2ab4:	10 92 df 01 	sts	0x01DF, r1
    2ab8:	10 92 de 01 	sts	0x01DE, r1
    2abc:	02 c0       	rjmp	.+4      	; 0x2ac2 <free+0x110>
    2abe:	13 82       	std	Z+3, r1	; 0x03
    2ac0:	12 82       	std	Z+2, r1	; 0x02
    2ac2:	d0 93 dd 01 	sts	0x01DD, r29
    2ac6:	c0 93 dc 01 	sts	0x01DC, r28
    2aca:	df 91       	pop	r29
    2acc:	cf 91       	pop	r28
    2ace:	08 95       	ret

00002ad0 <strnlen_P>:
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	05 90       	lpm	r0, Z+
    2ad4:	61 50       	subi	r22, 0x01	; 1
    2ad6:	70 40       	sbci	r23, 0x00	; 0
    2ad8:	01 10       	cpse	r0, r1
    2ada:	d8 f7       	brcc	.-10     	; 0x2ad2 <strnlen_P+0x2>
    2adc:	80 95       	com	r24
    2ade:	90 95       	com	r25
    2ae0:	8e 0f       	add	r24, r30
    2ae2:	9f 1f       	adc	r25, r31
    2ae4:	08 95       	ret

00002ae6 <memset>:
    2ae6:	dc 01       	movw	r26, r24
    2ae8:	01 c0       	rjmp	.+2      	; 0x2aec <memset+0x6>
    2aea:	6d 93       	st	X+, r22
    2aec:	41 50       	subi	r20, 0x01	; 1
    2aee:	50 40       	sbci	r21, 0x00	; 0
    2af0:	e0 f7       	brcc	.-8      	; 0x2aea <memset+0x4>
    2af2:	08 95       	ret

00002af4 <strnlen>:
    2af4:	fc 01       	movw	r30, r24
    2af6:	61 50       	subi	r22, 0x01	; 1
    2af8:	70 40       	sbci	r23, 0x00	; 0
    2afa:	01 90       	ld	r0, Z+
    2afc:	01 10       	cpse	r0, r1
    2afe:	d8 f7       	brcc	.-10     	; 0x2af6 <strnlen+0x2>
    2b00:	80 95       	com	r24
    2b02:	90 95       	com	r25
    2b04:	8e 0f       	add	r24, r30
    2b06:	9f 1f       	adc	r25, r31
    2b08:	08 95       	ret

00002b0a <fputc>:
    2b0a:	0f 93       	push	r16
    2b0c:	1f 93       	push	r17
    2b0e:	cf 93       	push	r28
    2b10:	df 93       	push	r29
    2b12:	18 2f       	mov	r17, r24
    2b14:	09 2f       	mov	r16, r25
    2b16:	eb 01       	movw	r28, r22
    2b18:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1a:	81 fd       	sbrc	r24, 1
    2b1c:	03 c0       	rjmp	.+6      	; 0x2b24 <fputc+0x1a>
    2b1e:	8f ef       	ldi	r24, 0xFF	; 255
    2b20:	9f ef       	ldi	r25, 0xFF	; 255
    2b22:	20 c0       	rjmp	.+64     	; 0x2b64 <fputc+0x5a>
    2b24:	82 ff       	sbrs	r24, 2
    2b26:	10 c0       	rjmp	.+32     	; 0x2b48 <fputc+0x3e>
    2b28:	4e 81       	ldd	r20, Y+6	; 0x06
    2b2a:	5f 81       	ldd	r21, Y+7	; 0x07
    2b2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b30:	42 17       	cp	r20, r18
    2b32:	53 07       	cpc	r21, r19
    2b34:	7c f4       	brge	.+30     	; 0x2b54 <fputc+0x4a>
    2b36:	e8 81       	ld	r30, Y
    2b38:	f9 81       	ldd	r31, Y+1	; 0x01
    2b3a:	9f 01       	movw	r18, r30
    2b3c:	2f 5f       	subi	r18, 0xFF	; 255
    2b3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b40:	39 83       	std	Y+1, r19	; 0x01
    2b42:	28 83       	st	Y, r18
    2b44:	10 83       	st	Z, r17
    2b46:	06 c0       	rjmp	.+12     	; 0x2b54 <fputc+0x4a>
    2b48:	e8 85       	ldd	r30, Y+8	; 0x08
    2b4a:	f9 85       	ldd	r31, Y+9	; 0x09
    2b4c:	81 2f       	mov	r24, r17
    2b4e:	09 95       	icall
    2b50:	89 2b       	or	r24, r25
    2b52:	29 f7       	brne	.-54     	; 0x2b1e <fputc+0x14>
    2b54:	2e 81       	ldd	r18, Y+6	; 0x06
    2b56:	3f 81       	ldd	r19, Y+7	; 0x07
    2b58:	2f 5f       	subi	r18, 0xFF	; 255
    2b5a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b5c:	3f 83       	std	Y+7, r19	; 0x07
    2b5e:	2e 83       	std	Y+6, r18	; 0x06
    2b60:	81 2f       	mov	r24, r17
    2b62:	90 2f       	mov	r25, r16
    2b64:	df 91       	pop	r29
    2b66:	cf 91       	pop	r28
    2b68:	1f 91       	pop	r17
    2b6a:	0f 91       	pop	r16
    2b6c:	08 95       	ret

00002b6e <__ultoa_invert>:
    2b6e:	fa 01       	movw	r30, r20
    2b70:	aa 27       	eor	r26, r26
    2b72:	28 30       	cpi	r18, 0x08	; 8
    2b74:	51 f1       	breq	.+84     	; 0x2bca <__ultoa_invert+0x5c>
    2b76:	20 31       	cpi	r18, 0x10	; 16
    2b78:	81 f1       	breq	.+96     	; 0x2bda <__ultoa_invert+0x6c>
    2b7a:	e8 94       	clt
    2b7c:	6f 93       	push	r22
    2b7e:	6e 7f       	andi	r22, 0xFE	; 254
    2b80:	6e 5f       	subi	r22, 0xFE	; 254
    2b82:	7f 4f       	sbci	r23, 0xFF	; 255
    2b84:	8f 4f       	sbci	r24, 0xFF	; 255
    2b86:	9f 4f       	sbci	r25, 0xFF	; 255
    2b88:	af 4f       	sbci	r26, 0xFF	; 255
    2b8a:	b1 e0       	ldi	r27, 0x01	; 1
    2b8c:	3e d0       	rcall	.+124    	; 0x2c0a <__ultoa_invert+0x9c>
    2b8e:	b4 e0       	ldi	r27, 0x04	; 4
    2b90:	3c d0       	rcall	.+120    	; 0x2c0a <__ultoa_invert+0x9c>
    2b92:	67 0f       	add	r22, r23
    2b94:	78 1f       	adc	r23, r24
    2b96:	89 1f       	adc	r24, r25
    2b98:	9a 1f       	adc	r25, r26
    2b9a:	a1 1d       	adc	r26, r1
    2b9c:	68 0f       	add	r22, r24
    2b9e:	79 1f       	adc	r23, r25
    2ba0:	8a 1f       	adc	r24, r26
    2ba2:	91 1d       	adc	r25, r1
    2ba4:	a1 1d       	adc	r26, r1
    2ba6:	6a 0f       	add	r22, r26
    2ba8:	71 1d       	adc	r23, r1
    2baa:	81 1d       	adc	r24, r1
    2bac:	91 1d       	adc	r25, r1
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	20 d0       	rcall	.+64     	; 0x2bf2 <__ultoa_invert+0x84>
    2bb2:	09 f4       	brne	.+2      	; 0x2bb6 <__ultoa_invert+0x48>
    2bb4:	68 94       	set
    2bb6:	3f 91       	pop	r19
    2bb8:	2a e0       	ldi	r18, 0x0A	; 10
    2bba:	26 9f       	mul	r18, r22
    2bbc:	11 24       	eor	r1, r1
    2bbe:	30 19       	sub	r19, r0
    2bc0:	30 5d       	subi	r19, 0xD0	; 208
    2bc2:	31 93       	st	Z+, r19
    2bc4:	de f6       	brtc	.-74     	; 0x2b7c <__ultoa_invert+0xe>
    2bc6:	cf 01       	movw	r24, r30
    2bc8:	08 95       	ret
    2bca:	46 2f       	mov	r20, r22
    2bcc:	47 70       	andi	r20, 0x07	; 7
    2bce:	40 5d       	subi	r20, 0xD0	; 208
    2bd0:	41 93       	st	Z+, r20
    2bd2:	b3 e0       	ldi	r27, 0x03	; 3
    2bd4:	0f d0       	rcall	.+30     	; 0x2bf4 <__ultoa_invert+0x86>
    2bd6:	c9 f7       	brne	.-14     	; 0x2bca <__ultoa_invert+0x5c>
    2bd8:	f6 cf       	rjmp	.-20     	; 0x2bc6 <__ultoa_invert+0x58>
    2bda:	46 2f       	mov	r20, r22
    2bdc:	4f 70       	andi	r20, 0x0F	; 15
    2bde:	40 5d       	subi	r20, 0xD0	; 208
    2be0:	4a 33       	cpi	r20, 0x3A	; 58
    2be2:	18 f0       	brcs	.+6      	; 0x2bea <__ultoa_invert+0x7c>
    2be4:	49 5d       	subi	r20, 0xD9	; 217
    2be6:	31 fd       	sbrc	r19, 1
    2be8:	40 52       	subi	r20, 0x20	; 32
    2bea:	41 93       	st	Z+, r20
    2bec:	02 d0       	rcall	.+4      	; 0x2bf2 <__ultoa_invert+0x84>
    2bee:	a9 f7       	brne	.-22     	; 0x2bda <__ultoa_invert+0x6c>
    2bf0:	ea cf       	rjmp	.-44     	; 0x2bc6 <__ultoa_invert+0x58>
    2bf2:	b4 e0       	ldi	r27, 0x04	; 4
    2bf4:	a6 95       	lsr	r26
    2bf6:	97 95       	ror	r25
    2bf8:	87 95       	ror	r24
    2bfa:	77 95       	ror	r23
    2bfc:	67 95       	ror	r22
    2bfe:	ba 95       	dec	r27
    2c00:	c9 f7       	brne	.-14     	; 0x2bf4 <__ultoa_invert+0x86>
    2c02:	00 97       	sbiw	r24, 0x00	; 0
    2c04:	61 05       	cpc	r22, r1
    2c06:	71 05       	cpc	r23, r1
    2c08:	08 95       	ret
    2c0a:	9b 01       	movw	r18, r22
    2c0c:	ac 01       	movw	r20, r24
    2c0e:	0a 2e       	mov	r0, r26
    2c10:	06 94       	lsr	r0
    2c12:	57 95       	ror	r21
    2c14:	47 95       	ror	r20
    2c16:	37 95       	ror	r19
    2c18:	27 95       	ror	r18
    2c1a:	ba 95       	dec	r27
    2c1c:	c9 f7       	brne	.-14     	; 0x2c10 <__ultoa_invert+0xa2>
    2c1e:	62 0f       	add	r22, r18
    2c20:	73 1f       	adc	r23, r19
    2c22:	84 1f       	adc	r24, r20
    2c24:	95 1f       	adc	r25, r21
    2c26:	a0 1d       	adc	r26, r0
    2c28:	08 95       	ret

00002c2a <__muluhisi3>:
    2c2a:	46 d0       	rcall	.+140    	; 0x2cb8 <__umulhisi3>
    2c2c:	a5 9f       	mul	r26, r21
    2c2e:	90 0d       	add	r25, r0
    2c30:	b4 9f       	mul	r27, r20
    2c32:	90 0d       	add	r25, r0
    2c34:	a4 9f       	mul	r26, r20
    2c36:	80 0d       	add	r24, r0
    2c38:	91 1d       	adc	r25, r1
    2c3a:	11 24       	eor	r1, r1
    2c3c:	08 95       	ret

00002c3e <__mulshisi3>:
    2c3e:	b7 ff       	sbrs	r27, 7
    2c40:	f4 cf       	rjmp	.-24     	; 0x2c2a <__muluhisi3>

00002c42 <__mulohisi3>:
    2c42:	f3 df       	rcall	.-26     	; 0x2c2a <__muluhisi3>
    2c44:	82 1b       	sub	r24, r18
    2c46:	93 0b       	sbc	r25, r19
    2c48:	08 95       	ret

00002c4a <__prologue_saves__>:
    2c4a:	2f 92       	push	r2
    2c4c:	3f 92       	push	r3
    2c4e:	4f 92       	push	r4
    2c50:	5f 92       	push	r5
    2c52:	6f 92       	push	r6
    2c54:	7f 92       	push	r7
    2c56:	8f 92       	push	r8
    2c58:	9f 92       	push	r9
    2c5a:	af 92       	push	r10
    2c5c:	bf 92       	push	r11
    2c5e:	cf 92       	push	r12
    2c60:	df 92       	push	r13
    2c62:	ef 92       	push	r14
    2c64:	ff 92       	push	r15
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	cf 93       	push	r28
    2c6c:	df 93       	push	r29
    2c6e:	cd b7       	in	r28, 0x3d	; 61
    2c70:	de b7       	in	r29, 0x3e	; 62
    2c72:	ca 1b       	sub	r28, r26
    2c74:	db 0b       	sbc	r29, r27
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	09 94       	ijmp

00002c82 <__epilogue_restores__>:
    2c82:	2a 88       	ldd	r2, Y+18	; 0x12
    2c84:	39 88       	ldd	r3, Y+17	; 0x11
    2c86:	48 88       	ldd	r4, Y+16	; 0x10
    2c88:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c8a:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c8c:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c8e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c90:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c92:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c94:	b9 84       	ldd	r11, Y+9	; 0x09
    2c96:	c8 84       	ldd	r12, Y+8	; 0x08
    2c98:	df 80       	ldd	r13, Y+7	; 0x07
    2c9a:	ee 80       	ldd	r14, Y+6	; 0x06
    2c9c:	fd 80       	ldd	r15, Y+5	; 0x05
    2c9e:	0c 81       	ldd	r16, Y+4	; 0x04
    2ca0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ca2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ca4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ca6:	ce 0f       	add	r28, r30
    2ca8:	d1 1d       	adc	r29, r1
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	ed 01       	movw	r28, r26
    2cb6:	08 95       	ret

00002cb8 <__umulhisi3>:
    2cb8:	a2 9f       	mul	r26, r18
    2cba:	b0 01       	movw	r22, r0
    2cbc:	b3 9f       	mul	r27, r19
    2cbe:	c0 01       	movw	r24, r0
    2cc0:	a3 9f       	mul	r26, r19
    2cc2:	70 0d       	add	r23, r0
    2cc4:	81 1d       	adc	r24, r1
    2cc6:	11 24       	eor	r1, r1
    2cc8:	91 1d       	adc	r25, r1
    2cca:	b2 9f       	mul	r27, r18
    2ccc:	70 0d       	add	r23, r0
    2cce:	81 1d       	adc	r24, r1
    2cd0:	11 24       	eor	r1, r1
    2cd2:	91 1d       	adc	r25, r1
    2cd4:	08 95       	ret

00002cd6 <_exit>:
    2cd6:	f8 94       	cli

00002cd8 <__stop_program>:
    2cd8:	ff cf       	rjmp	.-2      	; 0x2cd8 <__stop_program>
