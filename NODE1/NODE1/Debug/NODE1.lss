
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001de  00800100  00003262  000032f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003262  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000eb  008002de  008002de  000034d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000034d4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000004c8  00000000  00000000  00003530  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000052d1  00000000  00000000  000039f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015df  00000000  00000000  00008cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000029f3  00000000  00000000  0000a2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e70  00000000  00000000  0000cc9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001043  00000000  00000000  0000db0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000041ac  00000000  00000000  0000eb4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000520  00000000  00000000  00012cfb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	24 c2       	rjmp	.+1096   	; 0x44a <__ctors_end>
       2:	00 00       	nop
       4:	bd c3       	rjmp	.+1914   	; 0x780 <__vector_1>
       6:	00 00       	nop
       8:	ca c3       	rjmp	.+1940   	; 0x79e <__vector_2>
       a:	00 00       	nop
       c:	4d c2       	rjmp	.+1178   	; 0x4a8 <__vector_3>
       e:	00 00       	nop
      10:	39 c2       	rjmp	.+1138   	; 0x484 <__bad_interrupt>
      12:	00 00       	nop
      14:	37 c2       	rjmp	.+1134   	; 0x484 <__bad_interrupt>
      16:	00 00       	nop
      18:	35 c2       	rjmp	.+1130   	; 0x484 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c2       	rjmp	.+1126   	; 0x484 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c2       	rjmp	.+1122   	; 0x484 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c2       	rjmp	.+1118   	; 0x484 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c2       	rjmp	.+1114   	; 0x484 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c2       	rjmp	.+1110   	; 0x484 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c2       	rjmp	.+1106   	; 0x484 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c2       	rjmp	.+1102   	; 0x484 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c2       	rjmp	.+1098   	; 0x484 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	23 c2       	rjmp	.+1094   	; 0x484 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 f0 10 	jmp	0x21e0	; 0x21e0 <__vector_16>
      44:	1f c2       	rjmp	.+1086   	; 0x484 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c2       	rjmp	.+1082   	; 0x484 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c2       	rjmp	.+1078   	; 0x484 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c2       	rjmp	.+1074   	; 0x484 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c2       	rjmp	.+1070   	; 0x484 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c2       	rjmp	.+1066   	; 0x484 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c2       	rjmp	.+1062   	; 0x484 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c2       	rjmp	.+1058   	; 0x484 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c2       	rjmp	.+1054   	; 0x484 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c2       	rjmp	.+1050   	; 0x484 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c2       	rjmp	.+1046   	; 0x484 <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_options>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_debug>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_start>:
      ea:	53 74 61 72 74 00                                   Start.

000000f0 <game_entry_1>:
      f0:	32 30 34 38 00                                      2048.

000000f5 <game_entry_0>:
      f5:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

00000102 <mainmenu_entry_games>:
     102:	47 61 6d 65 73 00                                   Games.

00000108 <highscore_entry_1>:
     108:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

00000115 <highscore_entry_0>:
     115:	53 71 75 61 73 68 2d 73 69 6d 00                    Squash-sim.

00000120 <mainmenu_entry_highscore>:
     120:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

0000012a <font>:
	...
     132:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     142:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     152:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     162:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     172:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     182:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     192:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     1a2:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     1b2:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     1c2:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     1d2:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1e2:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1f2:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     202:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     212:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     222:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     232:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     242:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     252:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     262:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     272:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     282:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     292:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     2a2:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     2b2:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     2c2:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     2d2:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2e2:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2f2:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     302:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     312:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     322:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     332:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     342:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     352:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     362:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     372:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     382:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     392:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     3a2:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     3b2:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     3c2:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     3d2:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3e2:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3f2:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     402:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     412:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     422:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     432:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     442:	01 01 01 01 01 01 01 ff                             ........

0000044a <__ctors_end>:
     44a:	11 24       	eor	r1, r1
     44c:	1f be       	out	0x3f, r1	; 63
     44e:	cf ef       	ldi	r28, 0xFF	; 255
     450:	d4 e0       	ldi	r29, 0x04	; 4
     452:	de bf       	out	0x3e, r29	; 62
     454:	cd bf       	out	0x3d, r28	; 61

00000456 <__do_copy_data>:
     456:	12 e0       	ldi	r17, 0x02	; 2
     458:	a0 e0       	ldi	r26, 0x00	; 0
     45a:	b1 e0       	ldi	r27, 0x01	; 1
     45c:	e2 e6       	ldi	r30, 0x62	; 98
     45e:	f2 e3       	ldi	r31, 0x32	; 50
     460:	02 c0       	rjmp	.+4      	; 0x466 <__do_copy_data+0x10>
     462:	05 90       	lpm	r0, Z+
     464:	0d 92       	st	X+, r0
     466:	ae 3d       	cpi	r26, 0xDE	; 222
     468:	b1 07       	cpc	r27, r17
     46a:	d9 f7       	brne	.-10     	; 0x462 <__do_copy_data+0xc>

0000046c <__do_clear_bss>:
     46c:	23 e0       	ldi	r18, 0x03	; 3
     46e:	ae ed       	ldi	r26, 0xDE	; 222
     470:	b2 e0       	ldi	r27, 0x02	; 2
     472:	01 c0       	rjmp	.+2      	; 0x476 <.do_clear_bss_start>

00000474 <.do_clear_bss_loop>:
     474:	1d 92       	st	X+, r1

00000476 <.do_clear_bss_start>:
     476:	a9 3c       	cpi	r26, 0xC9	; 201
     478:	b2 07       	cpc	r27, r18
     47a:	e1 f7       	brne	.-8      	; 0x474 <.do_clear_bss_loop>
     47c:	0e 94 b4 0b 	call	0x1768	; 0x1768 <main>
     480:	0c 94 2f 19 	jmp	0x325e	; 0x325e <_exit>

00000484 <__bad_interrupt>:
     484:	bd cd       	rjmp	.-1158   	; 0x0 <__vectors>

00000486 <CAN_construct_message>:
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
}
     486:	90 93 e0 02 	sts	0x02E0, r25
     48a:	80 93 df 02 	sts	0x02DF, r24
     48e:	60 93 e1 02 	sts	0x02E1, r22
     492:	66 23       	and	r22, r22
     494:	41 f0       	breq	.+16     	; 0x4a6 <CAN_construct_message+0x20>
     496:	82 ee       	ldi	r24, 0xE2	; 226
     498:	92 e0       	ldi	r25, 0x02	; 2
     49a:	fc 01       	movw	r30, r24
     49c:	11 92       	st	Z+, r1
     49e:	2e 2f       	mov	r18, r30
     4a0:	28 1b       	sub	r18, r24
     4a2:	26 17       	cp	r18, r22
     4a4:	d8 f3       	brcs	.-10     	; 0x49c <CAN_construct_message+0x16>
     4a6:	08 95       	ret

000004a8 <__vector_3>:
     4a8:	1f 92       	push	r1
     4aa:	0f 92       	push	r0
     4ac:	0f b6       	in	r0, 0x3f	; 63
     4ae:	0f 92       	push	r0
     4b0:	11 24       	eor	r1, r1
     4b2:	8f 93       	push	r24
     4b4:	81 e0       	ldi	r24, 0x01	; 1
     4b6:	80 93 de 02 	sts	0x02DE, r24
     4ba:	8f 91       	pop	r24
     4bc:	0f 90       	pop	r0
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <CAN_interrupt_setup>:
     4c6:	f8 94       	cli
     4c8:	86 b7       	in	r24, 0x36	; 54
     4ca:	8e 7f       	andi	r24, 0xFE	; 254
     4cc:	86 bf       	out	0x36, r24	; 54
     4ce:	8b b7       	in	r24, 0x3b	; 59
     4d0:	80 62       	ori	r24, 0x20	; 32
     4d2:	8b bf       	out	0x3b, r24	; 59
     4d4:	78 94       	sei
     4d6:	08 95       	ret

000004d8 <CAN_initialize>:
     4d8:	d3 d0       	rcall	.+422    	; 0x680 <MCP2515_initialize>
     4da:	68 e0       	ldi	r22, 0x08	; 8
     4dc:	84 e1       	ldi	r24, 0x14	; 20
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	d2 df       	rcall	.-92     	; 0x486 <CAN_construct_message>
     4e2:	4f ef       	ldi	r20, 0xFF	; 255
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	64 e6       	ldi	r22, 0x64	; 100
     4e8:	80 e6       	ldi	r24, 0x60	; 96
     4ea:	b1 d0       	rcall	.+354    	; 0x64e <MCP2515_bit_modify>
     4ec:	4f ef       	ldi	r20, 0xFF	; 255
     4ee:	50 e0       	ldi	r21, 0x00	; 0
     4f0:	64 e6       	ldi	r22, 0x64	; 100
     4f2:	80 e7       	ldi	r24, 0x70	; 112
     4f4:	ac d0       	rcall	.+344    	; 0x64e <MCP2515_bit_modify>
     4f6:	41 e0       	ldi	r20, 0x01	; 1
     4f8:	50 e0       	ldi	r21, 0x00	; 0
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	8b e2       	ldi	r24, 0x2B	; 43
     4fe:	a7 d0       	rcall	.+334    	; 0x64e <MCP2515_bit_modify>
     500:	41 e0       	ldi	r20, 0x01	; 1
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	62 e0       	ldi	r22, 0x02	; 2
     506:	8b e2       	ldi	r24, 0x2B	; 43
     508:	a2 d0       	rcall	.+324    	; 0x64e <MCP2515_bit_modify>
     50a:	40 e0       	ldi	r20, 0x00	; 0
     50c:	50 e0       	ldi	r21, 0x00	; 0
     50e:	60 ee       	ldi	r22, 0xE0	; 224
     510:	8f e0       	ldi	r24, 0x0F	; 15
     512:	9d d0       	rcall	.+314    	; 0x64e <MCP2515_bit_modify>
     514:	d8 cf       	rjmp	.-80     	; 0x4c6 <CAN_interrupt_setup>
     516:	08 95       	ret

00000518 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     51c:	c4 e0       	ldi	r28, 0x04	; 4
     51e:	d0 e0       	ldi	r29, 0x00	; 0
     520:	02 c0       	rjmp	.+4      	; 0x526 <CAN_transmission_complete+0xe>
     522:	cc 0f       	add	r28, r28
     524:	dd 1f       	adc	r29, r29
     526:	8a 95       	dec	r24
     528:	e2 f7       	brpl	.-8      	; 0x522 <CAN_transmission_complete+0xa>
     52a:	8c e2       	ldi	r24, 0x2C	; 44
     52c:	72 d0       	rcall	.+228    	; 0x612 <MCP2515_read>
     52e:	8c 23       	and	r24, r28
     530:	9d 23       	and	r25, r29
     532:	89 2b       	or	r24, r25
     534:	d1 f3       	breq	.-12     	; 0x52a <CAN_transmission_complete+0x12>
	return 1;
}
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     53e:	ff 92       	push	r15
     540:	0f 93       	push	r16
     542:	1f 93       	push	r17
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	ec 01       	movw	r28, r24
     54a:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     54c:	f6 2e       	mov	r15, r22
     54e:	ff 0c       	add	r15, r15
     550:	ff 0c       	add	r15, r15
     552:	ff 0c       	add	r15, r15
     554:	ff 0c       	add	r15, r15
     556:	28 81       	ld	r18, Y
     558:	39 81       	ldd	r19, Y+1	; 0x01
     55a:	b9 01       	movw	r22, r18
     55c:	75 95       	asr	r23
     55e:	67 95       	ror	r22
     560:	75 95       	asr	r23
     562:	67 95       	ror	r22
     564:	75 95       	asr	r23
     566:	67 95       	ror	r22
     568:	81 e3       	ldi	r24, 0x31	; 49
     56a:	8f 0d       	add	r24, r15
     56c:	43 d0       	rcall	.+134    	; 0x5f4 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     56e:	28 81       	ld	r18, Y
     570:	39 81       	ldd	r19, Y+1	; 0x01
     572:	b9 01       	movw	r22, r18
     574:	66 0f       	add	r22, r22
     576:	77 1f       	adc	r23, r23
     578:	62 95       	swap	r22
     57a:	72 95       	swap	r23
     57c:	70 7f       	andi	r23, 0xF0	; 240
     57e:	76 27       	eor	r23, r22
     580:	60 7f       	andi	r22, 0xF0	; 240
     582:	76 27       	eor	r23, r22
     584:	82 e3       	ldi	r24, 0x32	; 50
     586:	8f 0d       	add	r24, r15
     588:	35 d0       	rcall	.+106    	; 0x5f4 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     58a:	6a 81       	ldd	r22, Y+2	; 0x02
     58c:	6f 70       	andi	r22, 0x0F	; 15
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	85 e3       	ldi	r24, 0x35	; 53
     592:	8f 0d       	add	r24, r15
     594:	2f d0       	rcall	.+94     	; 0x5f4 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     596:	8a 81       	ldd	r24, Y+2	; 0x02
     598:	88 23       	and	r24, r24
     59a:	79 f0       	breq	.+30     	; 0x5ba <CAN_send_byte+0x7c>
     59c:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     59e:	86 e3       	ldi	r24, 0x36	; 54
     5a0:	f8 0e       	add	r15, r24
     5a2:	fe 01       	movw	r30, r28
     5a4:	e1 0f       	add	r30, r17
     5a6:	f1 1d       	adc	r31, r1
     5a8:	63 81       	ldd	r22, Z+3	; 0x03
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	8f 2d       	mov	r24, r15
     5ae:	81 0f       	add	r24, r17
     5b0:	21 d0       	rcall	.+66     	; 0x5f4 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     5b2:	1f 5f       	subi	r17, 0xFF	; 255
     5b4:	8a 81       	ldd	r24, Y+2	; 0x02
     5b6:	18 17       	cp	r17, r24
     5b8:	a0 f3       	brcs	.-24     	; 0x5a2 <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     5ba:	80 2f       	mov	r24, r16
     5bc:	38 d0       	rcall	.+112    	; 0x62e <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     5be:	80 2f       	mov	r24, r16
     5c0:	ab df       	rcall	.-170    	; 0x518 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	1f 91       	pop	r17
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	08 95       	ret

000005ce <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5ce:	20 91 e1 02 	lds	r18, 0x02E1
     5d2:	22 23       	and	r18, r18
     5d4:	59 f0       	breq	.+22     	; 0x5ec <CAN_message_send+0x1e>
     5d6:	38 2f       	mov	r19, r24
     5d8:	a2 ee       	ldi	r26, 0xE2	; 226
     5da:	b2 e0       	ldi	r27, 0x02	; 2
     5dc:	e8 2f       	mov	r30, r24
     5de:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     5e0:	81 91       	ld	r24, Z+
     5e2:	8d 93       	st	X+, r24
     5e4:	8e 2f       	mov	r24, r30
     5e6:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5e8:	82 17       	cp	r24, r18
     5ea:	d0 f3       	brcs	.-12     	; 0x5e0 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     5ec:	8f ed       	ldi	r24, 0xDF	; 223
     5ee:	92 e0       	ldi	r25, 0x02	; 2
     5f0:	a6 cf       	rjmp	.-180    	; 0x53e <CAN_send_byte>
     5f2:	08 95       	ret

000005f4 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	d8 2f       	mov	r29, r24
     5fa:	c6 2f       	mov	r28, r22
     5fc:	4e d0       	rcall	.+156    	; 0x69a <SPI_select>
     5fe:	82 e0       	ldi	r24, 0x02	; 2
     600:	42 d0       	rcall	.+132    	; 0x686 <SPI_send>
     602:	8d 2f       	mov	r24, r29
     604:	40 d0       	rcall	.+128    	; 0x686 <SPI_send>
     606:	8c 2f       	mov	r24, r28
     608:	3e d0       	rcall	.+124    	; 0x686 <SPI_send>
     60a:	49 d0       	rcall	.+146    	; 0x69e <SPI_deselect>
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	08 95       	ret

00000612 <MCP2515_read>:
     612:	cf 93       	push	r28
     614:	c8 2f       	mov	r28, r24
     616:	41 d0       	rcall	.+130    	; 0x69a <SPI_select>
     618:	83 e0       	ldi	r24, 0x03	; 3
     61a:	35 d0       	rcall	.+106    	; 0x686 <SPI_send>
     61c:	8c 2f       	mov	r24, r28
     61e:	33 d0       	rcall	.+102    	; 0x686 <SPI_send>
     620:	36 d0       	rcall	.+108    	; 0x68e <SPI_receive>
     622:	c8 2f       	mov	r28, r24
     624:	3c d0       	rcall	.+120    	; 0x69e <SPI_deselect>
     626:	8c 2f       	mov	r24, r28
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	cf 91       	pop	r28
     62c:	08 95       	ret

0000062e <MCP2515_request_to_send>:
     62e:	cf 93       	push	r28
     630:	c8 2f       	mov	r28, r24
     632:	33 d0       	rcall	.+102    	; 0x69a <SPI_select>
     634:	21 e0       	ldi	r18, 0x01	; 1
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	c9 01       	movw	r24, r18
     63a:	02 c0       	rjmp	.+4      	; 0x640 <MCP2515_request_to_send+0x12>
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	ca 95       	dec	r28
     642:	e2 f7       	brpl	.-8      	; 0x63c <MCP2515_request_to_send+0xe>
     644:	80 68       	ori	r24, 0x80	; 128
     646:	1f d0       	rcall	.+62     	; 0x686 <SPI_send>
     648:	2a d0       	rcall	.+84     	; 0x69e <SPI_deselect>
     64a:	cf 91       	pop	r28
     64c:	08 95       	ret

0000064e <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     64e:	1f 93       	push	r17
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	18 2f       	mov	r17, r24
     656:	d6 2f       	mov	r29, r22
     658:	c4 2f       	mov	r28, r20
	SPI_select();
     65a:	1f d0       	rcall	.+62     	; 0x69a <SPI_select>
	SPI_send(MCP_BITMOD);
     65c:	85 e0       	ldi	r24, 0x05	; 5
     65e:	13 d0       	rcall	.+38     	; 0x686 <SPI_send>
	SPI_send(adr);
     660:	81 2f       	mov	r24, r17
     662:	11 d0       	rcall	.+34     	; 0x686 <SPI_send>
	SPI_send(mask);
     664:	8d 2f       	mov	r24, r29
     666:	0f d0       	rcall	.+30     	; 0x686 <SPI_send>
	SPI_send(data);
     668:	8c 2f       	mov	r24, r28
     66a:	0d d0       	rcall	.+26     	; 0x686 <SPI_send>
	SPI_deselect();
     66c:	18 d0       	rcall	.+48     	; 0x69e <SPI_deselect>
}
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	08 95       	ret

00000676 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     676:	11 d0       	rcall	.+34     	; 0x69a <SPI_select>
	SPI_send(MCP_RESET);
     678:	80 ec       	ldi	r24, 0xC0	; 192
     67a:	05 d0       	rcall	.+10     	; 0x686 <SPI_send>
	SPI_deselect();
     67c:	10 c0       	rjmp	.+32     	; 0x69e <SPI_deselect>
     67e:	08 95       	ret

00000680 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     680:	10 d0       	rcall	.+32     	; 0x6a2 <SPI_initialize>
	MCP2515_reset();
     682:	f9 cf       	rjmp	.-14     	; 0x676 <MCP2515_reset>
     684:	08 95       	ret

00000686 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     686:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     688:	77 9b       	sbis	0x0e, 7	; 14
     68a:	fe cf       	rjmp	.-4      	; 0x688 <SPI_send+0x2>

}
     68c:	08 95       	ret

0000068e <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	fa df       	rcall	.-12     	; 0x686 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     692:	77 9b       	sbis	0x0e, 7	; 14
     694:	fe cf       	rjmp	.-4      	; 0x692 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     696:	8f b1       	in	r24, 0x0f	; 15
}
     698:	08 95       	ret

0000069a <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     69a:	c4 98       	cbi	0x18, 4	; 24
     69c:	08 95       	ret

0000069e <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     69e:	c4 9a       	sbi	0x18, 4	; 24
     6a0:	08 95       	ret

000006a2 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     6a2:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     6a4:	87 b3       	in	r24, 0x17	; 23
     6a6:	80 6b       	ori	r24, 0xB0	; 176
     6a8:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     6aa:	8d b1       	in	r24, 0x0d	; 13
     6ac:	80 65       	ori	r24, 0x50	; 80
     6ae:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     6b0:	f6 cf       	rjmp	.-20     	; 0x69e <SPI_deselect>
     6b2:	08 95       	ret

000006b4 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     6b4:	5d 9b       	sbis	0x0b, 5	; 11
     6b6:	fe cf       	rjmp	.-4      	; 0x6b4 <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     6b8:	8c b9       	out	0x0c, r24	; 12
     6ba:	08 95       	ret

000006bc <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     6bc:	5f 9b       	sbis	0x0b, 7	; 11
     6be:	fe cf       	rjmp	.-4      	; 0x6bc <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     6c0:	8c b1       	in	r24, 0x0c	; 12
}
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	08 95       	ret

000006c6 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     6c6:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     6c8:	8f e1       	ldi	r24, 0x1F	; 31
     6ca:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     6cc:	88 e1       	ldi	r24, 0x18	; 24
     6ce:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     6d0:	6e e5       	ldi	r22, 0x5E	; 94
     6d2:	73 e0       	ldi	r23, 0x03	; 3
     6d4:	8a e5       	ldi	r24, 0x5A	; 90
     6d6:	93 e0       	ldi	r25, 0x03	; 3
     6d8:	0c 94 c8 14 	jmp	0x2990	; 0x2990 <fdevopen>
     6dc:	08 95       	ret

000006de <readADC>:
     6de:	82 30       	cpi	r24, 0x02	; 2
     6e0:	91 05       	cpc	r25, r1
     6e2:	71 f0       	breq	.+28     	; 0x700 <readADC+0x22>
     6e4:	1c f4       	brge	.+6      	; 0x6ec <readADC+0xe>
     6e6:	01 97       	sbiw	r24, 0x01	; 1
     6e8:	39 f0       	breq	.+14     	; 0x6f8 <readADC+0x1a>
     6ea:	1c c0       	rjmp	.+56     	; 0x724 <readADC+0x46>
     6ec:	83 30       	cpi	r24, 0x03	; 3
     6ee:	91 05       	cpc	r25, r1
     6f0:	59 f0       	breq	.+22     	; 0x708 <readADC+0x2a>
     6f2:	04 97       	sbiw	r24, 0x04	; 4
     6f4:	69 f0       	breq	.+26     	; 0x710 <readADC+0x32>
     6f6:	16 c0       	rjmp	.+44     	; 0x724 <readADC+0x46>
     6f8:	84 e1       	ldi	r24, 0x14	; 20
     6fa:	80 93 00 14 	sts	0x1400, r24
     6fe:	0b c0       	rjmp	.+22     	; 0x716 <readADC+0x38>
     700:	85 e1       	ldi	r24, 0x15	; 21
     702:	80 93 00 14 	sts	0x1400, r24
     706:	07 c0       	rjmp	.+14     	; 0x716 <readADC+0x38>
     708:	86 e1       	ldi	r24, 0x16	; 22
     70a:	80 93 00 14 	sts	0x1400, r24
     70e:	03 c0       	rjmp	.+6      	; 0x716 <readADC+0x38>
     710:	87 e1       	ldi	r24, 0x17	; 23
     712:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     716:	82 e5       	ldi	r24, 0x52	; 82
     718:	8a 95       	dec	r24
     71a:	f1 f7       	brne	.-4      	; 0x718 <readADC+0x3a>
     71c:	80 91 00 14 	lds	r24, 0x1400
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	08 95       	ret
     724:	80 e0       	ldi	r24, 0x00	; 0
     726:	90 e0       	ldi	r25, 0x00	; 0
     728:	08 95       	ret

0000072a <initalize_interrupts>:
 */ 
#include "button_interrupts.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     72a:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     72c:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     72e:	85 b7       	in	r24, 0x35	; 53
     730:	81 60       	ori	r24, 0x01	; 1
     732:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     734:	85 b7       	in	r24, 0x35	; 53
     736:	82 60       	ori	r24, 0x02	; 2
     738:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     73a:	85 b7       	in	r24, 0x35	; 53
     73c:	84 60       	ori	r24, 0x04	; 4
     73e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     740:	85 b7       	in	r24, 0x35	; 53
     742:	88 60       	ori	r24, 0x08	; 8
     744:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     746:	8b b7       	in	r24, 0x3b	; 59
     748:	80 64       	ori	r24, 0x40	; 64
     74a:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     74c:	8b b7       	in	r24, 0x3b	; 59
     74e:	80 68       	ori	r24, 0x80	; 128
     750:	8b bf       	out	0x3b, r24	; 59
	
	flag_right_button = 0;
     752:	10 92 1a 03 	sts	0x031A, r1
	flag_left_button = 0;
     756:	10 92 1b 03 	sts	0x031B, r1
     75a:	08 95       	ret

0000075c <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     75c:	80 91 1b 03 	lds	r24, 0x031B
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	19 f4       	brne	.+6      	; 0x76a <check_flag_left+0xe>
	{
		flag_left_button = 0;
     764:	10 92 1b 03 	sts	0x031B, r1
		return 1;
     768:	08 95       	ret
	}
	return 0;
     76a:	80 e0       	ldi	r24, 0x00	; 0
}
     76c:	08 95       	ret

0000076e <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     76e:	80 91 1a 03 	lds	r24, 0x031A
     772:	81 30       	cpi	r24, 0x01	; 1
     774:	19 f4       	brne	.+6      	; 0x77c <check_flag_right+0xe>
	{
		flag_right_button = 0;
     776:	10 92 1a 03 	sts	0x031A, r1
		return 1;
     77a:	08 95       	ret
	}
	return 0;
     77c:	80 e0       	ldi	r24, 0x00	; 0
}
     77e:	08 95       	ret

00000780 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     780:	1f 92       	push	r1
     782:	0f 92       	push	r0
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	0f 92       	push	r0
     788:	11 24       	eor	r1, r1
     78a:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 1a 03 	sts	0x031A, r24
}
     792:	8f 91       	pop	r24
     794:	0f 90       	pop	r0
     796:	0f be       	out	0x3f, r0	; 63
     798:	0f 90       	pop	r0
     79a:	1f 90       	pop	r1
     79c:	18 95       	reti

0000079e <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     79e:	1f 92       	push	r1
     7a0:	0f 92       	push	r0
     7a2:	0f b6       	in	r0, 0x3f	; 63
     7a4:	0f 92       	push	r0
     7a6:	11 24       	eor	r1, r1
     7a8:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	80 93 1b 03 	sts	0x031B, r24
}
     7b0:	8f 91       	pop	r24
     7b2:	0f 90       	pop	r0
     7b4:	0f be       	out	0x3f, r0	; 63
     7b6:	0f 90       	pop	r0
     7b8:	1f 90       	pop	r1
     7ba:	18 95       	reti

000007bc <flappy_restart>:
	
	flappy_restart();
}

void flappy_restart(void){
	sram_goto_line(7);
     7bc:	87 e0       	ldi	r24, 0x07	; 7
     7be:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sram_goto_line>
	sram_write_string("BACK        PLAY");
     7c2:	8e e5       	ldi	r24, 0x5E	; 94
     7c4:	91 e0       	ldi	r25, 0x01	; 1
     7c6:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <sram_write_string>
	sram_update_oled();
     7ca:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
	quit = 0;
     7ce:	10 92 f4 02 	sts	0x02F4, r1
	printf("MP");
     7d2:	8f e6       	ldi	r24, 0x6F	; 111
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	9f 93       	push	r25
     7d8:	8f 93       	push	r24
     7da:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
	while (!(quit | check_flag_right()))
     7de:	0f 90       	pop	r0
     7e0:	0f 90       	pop	r0
     7e2:	03 c0       	rjmp	.+6      	; 0x7ea <flappy_restart+0x2e>
	{
		quit = check_flag_left();
     7e4:	bb df       	rcall	.-138    	; 0x75c <check_flag_left>
     7e6:	80 93 f4 02 	sts	0x02F4, r24
	sram_goto_line(7);
	sram_write_string("BACK        PLAY");
	sram_update_oled();
	quit = 0;
	printf("MP");
	while (!(quit | check_flag_right()))
     7ea:	c1 df       	rcall	.-126    	; 0x76e <check_flag_right>
     7ec:	90 91 f4 02 	lds	r25, 0x02F4
     7f0:	89 2b       	or	r24, r25
     7f2:	c1 f3       	breq	.-16     	; 0x7e4 <flappy_restart+0x28>
	{
		quit = check_flag_left();
	}
	
	sram_init();
     7f4:	0c 94 f8 0e 	jmp	0x1df0	; 0x1df0 <sram_init>
     7f8:	08 95       	ret

000007fa <flappy_loading_screen>:
	}
	
	return 0;
}

void flappy_loading_screen(void){
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
	sram_init();
     802:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <sram_init>
	sram_goto_line(0);
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sram_goto_line>
	sram_write_string("  FLAPPY BIRD");
     80c:	82 e7       	ldi	r24, 0x72	; 114
     80e:	91 e0       	ldi	r25, 0x01	; 1
     810:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <sram_write_string>
	sram_update_oled();
     814:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
	
	timer_delay(1000);
     818:	88 ee       	ldi	r24, 0xE8	; 232
     81a:	93 e0       	ldi	r25, 0x03	; 3
     81c:	0e 94 ff 10 	call	0x21fe	; 0x21fe <timer_delay>
	
	sram_draw_new_line(8*FONT_WIDTH+4,8,13*FONT_WIDTH+4,0);
     820:	20 e0       	ldi	r18, 0x00	; 0
     822:	4c e6       	ldi	r20, 0x6C	; 108
     824:	68 e0       	ldi	r22, 0x08	; 8
     826:	84 e4       	ldi	r24, 0x44	; 68
     828:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <sram_draw_new_line>
	sram_draw_new_line(8*FONT_WIDTH+4,0,13*FONT_WIDTH+4,8);
     82c:	28 e0       	ldi	r18, 0x08	; 8
     82e:	4c e6       	ldi	r20, 0x6C	; 108
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	84 e4       	ldi	r24, 0x44	; 68
     834:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <sram_draw_new_line>
	sram_update_oled();
     838:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
	
	timer_delay(1000);
     83c:	88 ee       	ldi	r24, 0xE8	; 232
     83e:	93 e0       	ldi	r25, 0x03	; 3
     840:	0e 94 ff 10 	call	0x21fe	; 0x21fe <timer_delay>
	
	sram_goto_line(2);
     844:	82 e0       	ldi	r24, 0x02	; 2
     846:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <sram_goto_line>
	sram_goto_column(FONT_WIDTH*8+4);
     84a:	84 e4       	ldi	r24, 0x44	; 68
     84c:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <sram_goto_column>
	sram_write_string("PIXEL");
     850:	80 e8       	ldi	r24, 0x80	; 128
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <sram_write_string>
	sram_update_oled();
     858:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
	
	timer_delay(500);
     85c:	84 ef       	ldi	r24, 0xF4	; 244
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	0e 94 ff 10 	call	0x21fe	; 0x21fe <timer_delay>
     864:	d0 e1       	ldi	r29, 0x10	; 16
	}
	
	return 0;
}

void flappy_loading_screen(void){
     866:	10 e1       	ldi	r17, 0x10	; 16
     868:	12 c0       	rjmp	.+36     	; 0x88e <flappy_loading_screen+0x94>
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
     86a:	00 e0       	ldi	r16, 0x00	; 0
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	48 e1       	ldi	r20, 0x18	; 24
     870:	60 e0       	ldi	r22, 0x00	; 0
     872:	8c 2f       	mov	r24, r28
     874:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <sram_scroll_vertically>
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
     878:	cf 5f       	subi	r28, 0xFF	; 255
     87a:	c0 34       	cpi	r28, 0x40	; 64
     87c:	b1 f7       	brne	.-20     	; 0x86a <flappy_loading_screen+0x70>
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
		}
		timer_delay(30);
     87e:	8e e1       	ldi	r24, 0x1E	; 30
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 ff 10 	call	0x21fe	; 0x21fe <timer_delay>
		sram_update_oled();
     886:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
     88a:	d1 50       	subi	r29, 0x01	; 1
	sram_write_string("PIXEL");
	sram_update_oled();
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
     88c:	11 f0       	breq	.+4      	; 0x892 <flappy_loading_screen+0x98>
	}
	
	return 0;
}

void flappy_loading_screen(void){
     88e:	c1 2f       	mov	r28, r17
     890:	ec cf       	rjmp	.-40     	; 0x86a <flappy_loading_screen+0x70>
		sram_update_oled();
	}
	
	//sram
	
	flappy_restart();
     892:	94 df       	rcall	.-216    	; 0x7bc <flappy_restart>
}
     894:	df 91       	pop	r29
     896:	cf 91       	pop	r28
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	08 95       	ret

0000089e <flappy_render_wall>:
	sram_write_string("SCORE: ");
	sram_write_int(score);
	sram_update_oled();
}

void flappy_render_wall(uint8_t selected_wall, uint8_t pos){
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	d8 2f       	mov	r29, r24
     8a4:	c6 2f       	mov	r28, r22
	if (selected_wall > SCREEN_HEIGHT-1 -WALL_HOLE){
     8a6:	8c 32       	cpi	r24, 0x2C	; 44
     8a8:	38 f0       	brcs	.+14     	; 0x8b8 <flappy_render_wall+0x1a>
		sram_draw_new_line(pos, 0, pos, SCREEN_HEIGHT-1 -WALL_HOLE);
     8aa:	2b e2       	ldi	r18, 0x2B	; 43
     8ac:	46 2f       	mov	r20, r22
     8ae:	60 e0       	ldi	r22, 0x00	; 0
     8b0:	8c 2f       	mov	r24, r28
     8b2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <sram_draw_new_line>
     8b6:	17 c0       	rjmp	.+46     	; 0x8e6 <flappy_render_wall+0x48>
	}else if(selected_wall < WALL_HOLE){ 
     8b8:	84 31       	cpi	r24, 0x14	; 20
     8ba:	38 f4       	brcc	.+14     	; 0x8ca <flappy_render_wall+0x2c>
		sram_draw_new_line(pos, WALL_HOLE, pos , SCREEN_HEIGHT-1);
     8bc:	2f e3       	ldi	r18, 0x3F	; 63
     8be:	46 2f       	mov	r20, r22
     8c0:	64 e1       	ldi	r22, 0x14	; 20
     8c2:	8c 2f       	mov	r24, r28
     8c4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <sram_draw_new_line>
     8c8:	0e c0       	rjmp	.+28     	; 0x8e6 <flappy_render_wall+0x48>
	}else{
		sram_draw_new_line(pos, 0, pos, selected_wall-WALL_HOLE/2);
     8ca:	26 ef       	ldi	r18, 0xF6	; 246
     8cc:	28 0f       	add	r18, r24
     8ce:	46 2f       	mov	r20, r22
     8d0:	60 e0       	ldi	r22, 0x00	; 0
     8d2:	8c 2f       	mov	r24, r28
     8d4:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <sram_draw_new_line>
		sram_draw_new_line(pos, selected_wall + WALL_HOLE/2, pos , SCREEN_HEIGHT-1);
     8d8:	6a e0       	ldi	r22, 0x0A	; 10
     8da:	6d 0f       	add	r22, r29
     8dc:	2f e3       	ldi	r18, 0x3F	; 63
     8de:	4c 2f       	mov	r20, r28
     8e0:	8c 2f       	mov	r24, r28
     8e2:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <sram_draw_new_line>
	}
}
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	08 95       	ret

000008ec <flappy_controll>:

void flappy_controll(void){
     8ec:	cf 92       	push	r12
     8ee:	df 92       	push	r13
     8f0:	ef 92       	push	r14
     8f2:	ff 92       	push	r15
	velocity += acceleration;
     8f4:	20 91 0c 01 	lds	r18, 0x010C
     8f8:	30 91 0d 01 	lds	r19, 0x010D
     8fc:	40 91 0e 01 	lds	r20, 0x010E
     900:	50 91 0f 01 	lds	r21, 0x010F
     904:	60 91 ee 02 	lds	r22, 0x02EE
     908:	70 91 ef 02 	lds	r23, 0x02EF
     90c:	80 91 f0 02 	lds	r24, 0x02F0
     910:	90 91 f1 02 	lds	r25, 0x02F1
     914:	0e 94 b4 11 	call	0x2368	; 0x2368 <__addsf3>
     918:	60 93 ee 02 	sts	0x02EE, r22
     91c:	70 93 ef 02 	sts	0x02EF, r23
     920:	80 93 f0 02 	sts	0x02F0, r24
     924:	90 93 f1 02 	sts	0x02F1, r25
	if(check_flag_left() | check_flag_right()){
     928:	19 df       	rcall	.-462    	; 0x75c <check_flag_left>
     92a:	f8 2e       	mov	r15, r24
     92c:	20 df       	rcall	.-448    	; 0x76e <check_flag_right>
     92e:	8f 29       	or	r24, r15
     930:	b1 f0       	breq	.+44     	; 0x95e <flappy_controll+0x72>
		velocity -= 1;
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	40 e8       	ldi	r20, 0x80	; 128
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	60 91 ee 02 	lds	r22, 0x02EE
     93e:	70 91 ef 02 	lds	r23, 0x02EF
     942:	80 91 f0 02 	lds	r24, 0x02F0
     946:	90 91 f1 02 	lds	r25, 0x02F1
     94a:	0e 94 b3 11 	call	0x2366	; 0x2366 <__subsf3>
     94e:	60 93 ee 02 	sts	0x02EE, r22
     952:	70 93 ef 02 	sts	0x02EF, r23
     956:	80 93 f0 02 	sts	0x02F0, r24
     95a:	90 93 f1 02 	sts	0x02F1, r25
	}
	if(velocity > 1){
     95e:	c0 90 ee 02 	lds	r12, 0x02EE
     962:	d0 90 ef 02 	lds	r13, 0x02EF
     966:	e0 90 f0 02 	lds	r14, 0x02F0
     96a:	f0 90 f1 02 	lds	r15, 0x02F1
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	40 e8       	ldi	r20, 0x80	; 128
     974:	5f e3       	ldi	r21, 0x3F	; 63
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	0e 94 67 13 	call	0x26ce	; 0x26ce <__gesf2>
     97e:	18 16       	cp	r1, r24
     980:	6c f4       	brge	.+26     	; 0x99c <flappy_controll+0xb0>
		velocity = 1;
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	a0 e8       	ldi	r26, 0x80	; 128
     988:	bf e3       	ldi	r27, 0x3F	; 63
     98a:	80 93 ee 02 	sts	0x02EE, r24
     98e:	90 93 ef 02 	sts	0x02EF, r25
     992:	a0 93 f0 02 	sts	0x02F0, r26
     996:	b0 93 f1 02 	sts	0x02F1, r27
     99a:	16 c0       	rjmp	.+44     	; 0x9c8 <flappy_controll+0xdc>
	}else if(velocity < -1){
     99c:	20 e0       	ldi	r18, 0x00	; 0
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	40 e8       	ldi	r20, 0x80	; 128
     9a2:	5f eb       	ldi	r21, 0xBF	; 191
     9a4:	c7 01       	movw	r24, r14
     9a6:	b6 01       	movw	r22, r12
     9a8:	0e 94 18 12 	call	0x2430	; 0x2430 <__cmpsf2>
     9ac:	88 23       	and	r24, r24
     9ae:	64 f4       	brge	.+24     	; 0x9c8 <flappy_controll+0xdc>
		velocity = -1;
     9b0:	80 e0       	ldi	r24, 0x00	; 0
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e8       	ldi	r26, 0x80	; 128
     9b6:	bf eb       	ldi	r27, 0xBF	; 191
     9b8:	80 93 ee 02 	sts	0x02EE, r24
     9bc:	90 93 ef 02 	sts	0x02EF, r25
     9c0:	a0 93 f0 02 	sts	0x02F0, r26
     9c4:	b0 93 f1 02 	sts	0x02F1, r27
	}
	player_height_accurate += velocity;
     9c8:	20 91 ee 02 	lds	r18, 0x02EE
     9cc:	30 91 ef 02 	lds	r19, 0x02EF
     9d0:	40 91 f0 02 	lds	r20, 0x02F0
     9d4:	50 91 f1 02 	lds	r21, 0x02F1
     9d8:	60 91 ea 02 	lds	r22, 0x02EA
     9dc:	70 91 eb 02 	lds	r23, 0x02EB
     9e0:	80 91 ec 02 	lds	r24, 0x02EC
     9e4:	90 91 ed 02 	lds	r25, 0x02ED
     9e8:	0e 94 b4 11 	call	0x2368	; 0x2368 <__addsf3>
     9ec:	6b 01       	movw	r12, r22
     9ee:	7c 01       	movw	r14, r24
     9f0:	60 93 ea 02 	sts	0x02EA, r22
     9f4:	70 93 eb 02 	sts	0x02EB, r23
     9f8:	80 93 ec 02 	sts	0x02EC, r24
     9fc:	90 93 ed 02 	sts	0x02ED, r25
	if(player_height_accurate >= SCREEN_HEIGHT-1){
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	4c e7       	ldi	r20, 0x7C	; 124
     a06:	52 e4       	ldi	r21, 0x42	; 66
     a08:	0e 94 67 13 	call	0x26ce	; 0x26ce <__gesf2>
     a0c:	88 23       	and	r24, r24
     a0e:	24 f0       	brlt	.+8      	; 0xa18 <flappy_controll+0x12c>
		game_over = 1;
     a10:	81 e0       	ldi	r24, 0x01	; 1
     a12:	80 93 f2 02 	sts	0x02F2, r24
     a16:	0c c0       	rjmp	.+24     	; 0xa30 <flappy_controll+0x144>
	}else if(player_height_accurate<= 0){
     a18:	20 e0       	ldi	r18, 0x00	; 0
     a1a:	30 e0       	ldi	r19, 0x00	; 0
     a1c:	a9 01       	movw	r20, r18
     a1e:	c7 01       	movw	r24, r14
     a20:	b6 01       	movw	r22, r12
     a22:	0e 94 18 12 	call	0x2430	; 0x2430 <__cmpsf2>
     a26:	18 16       	cp	r1, r24
     a28:	1c f0       	brlt	.+6      	; 0xa30 <flappy_controll+0x144>
		game_over = 1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 f2 02 	sts	0x02F2, r24
	}
	player_height = (int)player_height_accurate;
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	0e 94 84 12 	call	0x2508	; 0x2508 <__fixsfsi>
     a38:	60 93 f3 02 	sts	0x02F3, r22
}
     a3c:	ff 90       	pop	r15
     a3e:	ef 90       	pop	r14
     a40:	df 90       	pop	r13
     a42:	cf 90       	pop	r12
     a44:	08 95       	ret

00000a46 <flappy_pixel_collision>:

uint8_t flappy_pixel_collision(void){
	if (ext_ram_adress[PLAYER_POS+((player_height-player_height%8)/8)*128] & (1<<player_height%8)){
     a46:	80 91 f3 02 	lds	r24, 0x02F3
     a4a:	e8 2f       	mov	r30, r24
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	f5 95       	asr	r31
     a50:	e7 95       	ror	r30
     a52:	f5 95       	asr	r31
     a54:	e7 95       	ror	r30
     a56:	f5 95       	asr	r31
     a58:	e7 95       	ror	r30
     a5a:	f6 95       	lsr	r31
     a5c:	fe 2f       	mov	r31, r30
     a5e:	ee 27       	eor	r30, r30
     a60:	f7 95       	ror	r31
     a62:	e7 95       	ror	r30
     a64:	3a 96       	adiw	r30, 0x0a	; 10
     a66:	20 91 10 01 	lds	r18, 0x0110
     a6a:	30 91 11 01 	lds	r19, 0x0111
     a6e:	e2 0f       	add	r30, r18
     a70:	f3 1f       	adc	r31, r19
     a72:	20 81       	ld	r18, Z
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	87 70       	andi	r24, 0x07	; 7
     a78:	a9 01       	movw	r20, r18
     a7a:	02 c0       	rjmp	.+4      	; 0xa80 <flappy_pixel_collision+0x3a>
     a7c:	55 95       	asr	r21
     a7e:	47 95       	ror	r20
     a80:	8a 95       	dec	r24
     a82:	e2 f7       	brpl	.-8      	; 0xa7c <flappy_pixel_collision+0x36>
     a84:	ca 01       	movw	r24, r20
		return 1;
	}
	return 0;
}
     a86:	81 70       	andi	r24, 0x01	; 1
     a88:	08 95       	ret

00000a8a <flappy_scroll_wall>:

void flappy_scroll_wall(void){
     a8a:	cf 93       	push	r28
     a8c:	df 93       	push	r29
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
     a92:	e0 91 10 01 	lds	r30, 0x0110
     a96:	f0 91 11 01 	lds	r31, 0x0111
     a9a:	e8 0f       	add	r30, r24
     a9c:	f9 1f       	adc	r31, r25
     a9e:	10 82       	st	Z, r1
     aa0:	80 58       	subi	r24, 0x80	; 128
     aa2:	9f 4f       	sbci	r25, 0xFF	; 255
	return 0;
}

void flappy_scroll_wall(void){
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
     aa4:	81 15       	cp	r24, r1
     aa6:	24 e0       	ldi	r18, 0x04	; 4
     aa8:	92 07       	cpc	r25, r18
     aaa:	99 f7       	brne	.-26     	; 0xa92 <flappy_scroll_wall+0x8>
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     ab0:	b8 e0       	ldi	r27, 0x08	; 8
     ab2:	19 c0       	rjmp	.+50     	; 0xae6 <flappy_scroll_wall+0x5c>
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
     ab4:	20 91 10 01 	lds	r18, 0x0110
     ab8:	30 91 11 01 	lds	r19, 0x0111
     abc:	f9 01       	movw	r30, r18
     abe:	e8 0f       	add	r30, r24
     ac0:	f9 1f       	adc	r31, r25
     ac2:	ac 01       	movw	r20, r24
     ac4:	4f 5f       	subi	r20, 0xFF	; 255
     ac6:	5f 4f       	sbci	r21, 0xFF	; 255
     ac8:	e9 01       	movw	r28, r18
     aca:	c4 0f       	add	r28, r20
     acc:	d5 1f       	adc	r29, r21
     ace:	28 81       	ld	r18, Y
     ad0:	20 83       	st	Z, r18
     ad2:	a1 50       	subi	r26, 0x01	; 1
     ad4:	80 58       	subi	r24, 0x80	; 128
     ad6:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     ad8:	a1 11       	cpse	r26, r1
     ada:	ec cf       	rjmp	.-40     	; 0xab4 <flappy_scroll_wall+0x2a>
     adc:	6f 5f       	subi	r22, 0xFF	; 255
     ade:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     ae0:	6f 37       	cpi	r22, 0x7F	; 127
     ae2:	71 05       	cpc	r23, r1
     ae4:	19 f0       	breq	.+6      	; 0xaec <flappy_scroll_wall+0x62>
     ae6:	cb 01       	movw	r24, r22
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     ae8:	ab 2f       	mov	r26, r27
     aea:	e4 cf       	rjmp	.-56     	; 0xab4 <flappy_scroll_wall+0x2a>
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     aec:	8f e7       	ldi	r24, 0x7F	; 127
     aee:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
     af0:	e0 91 10 01 	lds	r30, 0x0110
     af4:	f0 91 11 01 	lds	r31, 0x0111
     af8:	e8 0f       	add	r30, r24
     afa:	f9 1f       	adc	r31, r25
     afc:	10 82       	st	Z, r1
     afe:	80 58       	subi	r24, 0x80	; 128
     b00:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     b02:	8f 37       	cpi	r24, 0x7F	; 127
     b04:	24 e0       	ldi	r18, 0x04	; 4
     b06:	92 07       	cpc	r25, r18
     b08:	99 f7       	brne	.-26     	; 0xaf0 <flappy_scroll_wall+0x66>
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
	}
	if(new_wall >= difficulity){//if a wall has been removed a new one must be made
     b0a:	80 91 0a 01 	lds	r24, 0x010A
     b0e:	90 91 0b 01 	lds	r25, 0x010B
     b12:	89 17       	cp	r24, r25
     b14:	a8 f0       	brcs	.+42     	; 0xb40 <flappy_scroll_wall+0xb6>
		flappy_render_wall(rand()%(SCREEN_HEIGHT-WALL_HOLE/2)+WALL_HOLE/4,127);
     b16:	0e 94 b3 14 	call	0x2966	; 0x2966 <rand>
     b1a:	66 e3       	ldi	r22, 0x36	; 54
     b1c:	70 e0       	ldi	r23, 0x00	; 0
     b1e:	0e 94 ce 13 	call	0x279c	; 0x279c <__divmodhi4>
     b22:	6f e7       	ldi	r22, 0x7F	; 127
     b24:	8b 5f       	subi	r24, 0xFB	; 251
     b26:	bb de       	rcall	.-650    	; 0x89e <flappy_render_wall>
		new_wall = 0;
     b28:	10 92 0a 01 	sts	0x010A, r1
		score++;
     b2c:	80 91 f5 02 	lds	r24, 0x02F5
     b30:	90 91 f6 02 	lds	r25, 0x02F6
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	90 93 f6 02 	sts	0x02F6, r25
     b3a:	80 93 f5 02 	sts	0x02F5, r24
     b3e:	03 c0       	rjmp	.+6      	; 0xb46 <flappy_scroll_wall+0xbc>
	}else{
		new_wall++;
     b40:	8f 5f       	subi	r24, 0xFF	; 255
     b42:	80 93 0a 01 	sts	0x010A, r24
	}
     b46:	df 91       	pop	r29
     b48:	cf 91       	pop	r28
     b4a:	08 95       	ret

00000b4c <flappy_game>:
	}
	
	sram_init();
}

void flappy_game(void){
     b4c:	8f 92       	push	r8
     b4e:	9f 92       	push	r9
     b50:	af 92       	push	r10
     b52:	bf 92       	push	r11
     b54:	cf 92       	push	r12
     b56:	df 92       	push	r13
     b58:	ef 92       	push	r14
     b5a:	ff 92       	push	r15
     b5c:	0f 93       	push	r16
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
	sram_update_oled();
     b64:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
	printf("M1");
     b68:	86 e8       	ldi	r24, 0x86	; 134
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	9f 93       	push	r25
     b6e:	8f 93       	push	r24
     b70:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
	while (!flappy_pixel_collision() && !game_over)
     b74:	0f 90       	pop	r0
     b76:	0f 90       	pop	r0
		if(check_flag_left()){//PAUSE
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
     b78:	0f 2e       	mov	r0, r31
     b7a:	ff e6       	ldi	r31, 0x6F	; 111
     b7c:	cf 2e       	mov	r12, r31
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	df 2e       	mov	r13, r31
     b82:	f0 2d       	mov	r31, r0
			for (uint8_t i = 5; i > 1; i--)
     b84:	0f 2e       	mov	r0, r31
     b86:	f5 e0       	ldi	r31, 0x05	; 5
     b88:	8f 2e       	mov	r8, r31
     b8a:	f0 2d       	mov	r31, r0
			{
				sram_goto_line(i);
				sram_goto_column(0);
				if(tempscore != 0){
					sram_write_char('0'+(tempscore%10));
     b8c:	0a e0       	ldi	r16, 0x0A	; 10
     b8e:	10 e0       	ldi	r17, 0x00	; 0
			sram_write_char('P');
			sram_update_oled();
			while(!(check_flag_left() | check_flag_right())){
				
			}
			printf("MR");
     b90:	0f 2e       	mov	r0, r31
     b92:	f9 e8       	ldi	r31, 0x89	; 137
     b94:	ef 2e       	mov	r14, r31
     b96:	f1 e0       	ldi	r31, 0x01	; 1
     b98:	ff 2e       	mov	r15, r31
     b9a:	f0 2d       	mov	r31, r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     b9c:	4d c0       	rjmp	.+154    	; 0xc38 <flappy_game+0xec>
	
	{
		if(timer_check_flag()){
     b9e:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <timer_check_flag>
     ba2:	88 23       	and	r24, r24
     ba4:	41 f0       	breq	.+16     	; 0xbb6 <flappy_game+0x6a>
			flappy_controll();
     ba6:	a2 de       	rcall	.-700    	; 0x8ec <flappy_controll>
			sram_pixel(PLAYER_POS,player_height);
     ba8:	60 91 f3 02 	lds	r22, 0x02F3
     bac:	8a e0       	ldi	r24, 0x0A	; 10
     bae:	d5 d7       	rcall	.+4010   	; 0x1b5a <sram_pixel>
			flappy_scroll_wall();
     bb0:	6c df       	rcall	.-296    	; 0xa8a <flappy_scroll_wall>
			sram_update_oled();
     bb2:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
		}
		if(check_flag_left()){//PAUSE
     bb6:	d2 dd       	rcall	.-1116   	; 0x75c <check_flag_left>
     bb8:	88 23       	and	r24, r24
     bba:	09 f4       	brne	.+2      	; 0xbbe <flappy_game+0x72>
     bbc:	3d c0       	rjmp	.+122    	; 0xc38 <flappy_game+0xec>
			sram_goto_line(0);
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	64 d7       	rcall	.+3784   	; 0x1a8a <sram_goto_line>
			sram_goto_column(0);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	69 d7       	rcall	.+3794   	; 0x1a98 <sram_goto_column>
			sram_write_char('S');
     bc6:	83 e5       	ldi	r24, 0x53	; 83
     bc8:	25 d7       	rcall	.+3658   	; 0x1a14 <sram_write_char>
			int tempscore = score;
     bca:	c0 91 f5 02 	lds	r28, 0x02F5
     bce:	d0 91 f6 02 	lds	r29, 0x02F6
			printf("MP");
     bd2:	df 92       	push	r13
     bd4:	cf 92       	push	r12
     bd6:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
			for (uint8_t i = 5; i > 1; i--)
     bde:	98 2c       	mov	r9, r8
			{
				sram_goto_line(i);
     be0:	89 2d       	mov	r24, r9
     be2:	53 d7       	rcall	.+3750   	; 0x1a8a <sram_goto_line>
				sram_goto_column(0);
     be4:	80 e0       	ldi	r24, 0x00	; 0
     be6:	58 d7       	rcall	.+3760   	; 0x1a98 <sram_goto_column>
				if(tempscore != 0){
     be8:	20 97       	sbiw	r28, 0x00	; 0
     bea:	79 f0       	breq	.+30     	; 0xc0a <flappy_game+0xbe>
					sram_write_char('0'+(tempscore%10));
     bec:	ce 01       	movw	r24, r28
     bee:	b8 01       	movw	r22, r16
     bf0:	0e 94 ce 13 	call	0x279c	; 0x279c <__divmodhi4>
     bf4:	5c 01       	movw	r10, r24
     bf6:	80 e3       	ldi	r24, 0x30	; 48
     bf8:	8a 0d       	add	r24, r10
     bfa:	0c d7       	rcall	.+3608   	; 0x1a14 <sram_write_char>
					tempscore -= tempscore%10;
     bfc:	ce 01       	movw	r24, r28
     bfe:	8a 19       	sub	r24, r10
     c00:	9b 09       	sbc	r25, r11
					tempscore /= 10;
     c02:	b8 01       	movw	r22, r16
     c04:	0e 94 ce 13 	call	0x279c	; 0x279c <__divmodhi4>
     c08:	eb 01       	movw	r28, r22
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
			for (uint8_t i = 5; i > 1; i--)
     c0a:	9a 94       	dec	r9
     c0c:	81 e0       	ldi	r24, 0x01	; 1
     c0e:	98 12       	cpse	r9, r24
     c10:	e7 cf       	rjmp	.-50     	; 0xbe0 <flappy_game+0x94>
					tempscore -= tempscore%10;
					tempscore /= 10;
				}
				
			}
			sram_goto_line(7);
     c12:	87 e0       	ldi	r24, 0x07	; 7
     c14:	3a d7       	rcall	.+3700   	; 0x1a8a <sram_goto_line>
			sram_goto_column(0);
     c16:	80 e0       	ldi	r24, 0x00	; 0
     c18:	3f d7       	rcall	.+3710   	; 0x1a98 <sram_goto_column>
			sram_write_char('P');
     c1a:	80 e5       	ldi	r24, 0x50	; 80
     c1c:	fb d6       	rcall	.+3574   	; 0x1a14 <sram_write_char>
			sram_update_oled();
     c1e:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
			while(!(check_flag_left() | check_flag_right())){
     c22:	9c dd       	rcall	.-1224   	; 0x75c <check_flag_left>
     c24:	c8 2f       	mov	r28, r24
     c26:	a3 dd       	rcall	.-1210   	; 0x76e <check_flag_right>
     c28:	8c 2b       	or	r24, r28
     c2a:	d9 f3       	breq	.-10     	; 0xc22 <flappy_game+0xd6>
				
			}
			printf("MR");
     c2c:	ff 92       	push	r15
     c2e:	ef 92       	push	r14
     c30:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     c38:	06 df       	rcall	.-500    	; 0xa46 <flappy_pixel_collision>
     c3a:	81 11       	cpse	r24, r1
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <flappy_game+0xfc>
     c3e:	80 91 f2 02 	lds	r24, 0x02F2
     c42:	88 23       	and	r24, r24
     c44:	09 f4       	brne	.+2      	; 0xc48 <flappy_game+0xfc>
     c46:	ab cf       	rjmp	.-170    	; 0xb9e <flappy_game+0x52>
				
			}
			printf("MR");
		}
	}
	printf("M2");
     c48:	8c e8       	ldi	r24, 0x8C	; 140
     c4a:	91 e0       	ldi	r25, 0x01	; 1
     c4c:	9f 93       	push	r25
     c4e:	8f 93       	push	r24
     c50:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
	timer_delay(1000);
     c54:	88 ee       	ldi	r24, 0xE8	; 232
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	0e 94 ff 10 	call	0x21fe	; 0x21fe <timer_delay>
	sram_init();
     c5c:	0e 94 f8 0e 	call	0x1df0	; 0x1df0 <sram_init>
	sram_goto_line(0);
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	13 d7       	rcall	.+3622   	; 0x1a8a <sram_goto_line>
	sram_goto_column(FONT_WIDTH*3);
     c64:	88 e1       	ldi	r24, 0x18	; 24
     c66:	18 d7       	rcall	.+3632   	; 0x1a98 <sram_goto_column>
	sram_write_string("GAME  OVER");
     c68:	8f e8       	ldi	r24, 0x8F	; 143
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	1c d7       	rcall	.+3640   	; 0x1aa6 <sram_write_string>
	sram_goto_line(1);
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	0c d7       	rcall	.+3608   	; 0x1a8a <sram_goto_line>
	sram_goto_column(FONT_WIDTH*4);
     c72:	80 e2       	ldi	r24, 0x20	; 32
     c74:	11 d7       	rcall	.+3618   	; 0x1a98 <sram_goto_column>
	sram_write_string("SCORE: ");
     c76:	8a e9       	ldi	r24, 0x9A	; 154
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	15 d7       	rcall	.+3626   	; 0x1aa6 <sram_write_string>
	sram_write_int(score);
     c7c:	80 91 f5 02 	lds	r24, 0x02F5
     c80:	90 91 f6 02 	lds	r25, 0x02F6
     c84:	24 d7       	rcall	.+3656   	; 0x1ace <sram_write_int>
	sram_update_oled();
     c86:	0e 94 ef 0e 	call	0x1dde	; 0x1dde <sram_update_oled>
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
}
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	ff 90       	pop	r15
     c98:	ef 90       	pop	r14
     c9a:	df 90       	pop	r13
     c9c:	cf 90       	pop	r12
     c9e:	bf 90       	pop	r11
     ca0:	af 90       	pop	r10
     ca2:	9f 90       	pop	r9
     ca4:	8f 90       	pop	r8
     ca6:	08 95       	ret

00000ca8 <flappy_main>:
double acceleration = 0.03;
double player_height_accurate = 0;
uint8_t difficulity = 100;
uint8_t new_wall = 100;

int flappy_main(void){
     ca8:	cf 92       	push	r12
     caa:	df 92       	push	r13
     cac:	ef 92       	push	r14
     cae:	ff 92       	push	r15
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
     cb4:	82 b7       	in	r24, 0x32	; 50
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 b6 14 	call	0x296c	; 0x296c <srand>
	quit = 0;
     cbc:	10 92 f4 02 	sts	0x02F4, r1
	flappy_loading_screen();
     cc0:	9c dd       	rcall	.-1224   	; 0x7fa <flappy_loading_screen>

	while (quit != 1){
     cc2:	80 91 f4 02 	lds	r24, 0x02F4
     cc6:	81 30       	cpi	r24, 0x01	; 1
     cc8:	79 f1       	breq	.+94     	; 0xd28 <flappy_main+0x80>
		game_over = 0;
		
		player_height_accurate = 1;
     cca:	0f 2e       	mov	r0, r31
     ccc:	c1 2c       	mov	r12, r1
     cce:	d1 2c       	mov	r13, r1
     cd0:	f0 e8       	ldi	r31, 0x80	; 128
     cd2:	ef 2e       	mov	r14, r31
     cd4:	ff e3       	ldi	r31, 0x3F	; 63
     cd6:	ff 2e       	mov	r15, r31
     cd8:	f0 2d       	mov	r31, r0
		player_height = 1;
     cda:	d1 e0       	ldi	r29, 0x01	; 1
		velocity = 0;
		difficulity = 100;
     cdc:	c4 e6       	ldi	r28, 0x64	; 100
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
		game_over = 0;
     cde:	10 92 f2 02 	sts	0x02F2, r1
		
		player_height_accurate = 1;
     ce2:	c0 92 ea 02 	sts	0x02EA, r12
     ce6:	d0 92 eb 02 	sts	0x02EB, r13
     cea:	e0 92 ec 02 	sts	0x02EC, r14
     cee:	f0 92 ed 02 	sts	0x02ED, r15
		player_height = 1;
     cf2:	d0 93 f3 02 	sts	0x02F3, r29
		velocity = 0;
     cf6:	10 92 ee 02 	sts	0x02EE, r1
     cfa:	10 92 ef 02 	sts	0x02EF, r1
     cfe:	10 92 f0 02 	sts	0x02F0, r1
     d02:	10 92 f1 02 	sts	0x02F1, r1
		difficulity = 100;
     d06:	c0 93 0b 01 	sts	0x010B, r28
		score = 0;
     d0a:	10 92 f6 02 	sts	0x02F6, r1
     d0e:	10 92 f5 02 	sts	0x02F5, r1
		flappy_game();
     d12:	1c df       	rcall	.-456    	; 0xb4c <flappy_game>
		sram_goto_line(6);
     d14:	86 e0       	ldi	r24, 0x06	; 6
     d16:	b9 d6       	rcall	.+3442   	; 0x1a8a <sram_goto_line>
		sram_write_string("   TRY AGAIN?");
     d18:	82 ea       	ldi	r24, 0xA2	; 162
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	c4 d6       	rcall	.+3464   	; 0x1aa6 <sram_write_string>
		flappy_restart();
     d1e:	4e dd       	rcall	.-1380   	; 0x7bc <flappy_restart>
int flappy_main(void){
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
     d20:	80 91 f4 02 	lds	r24, 0x02F4
     d24:	81 30       	cpi	r24, 0x01	; 1
     d26:	d9 f6       	brne	.-74     	; 0xcde <flappy_main+0x36>
		sram_write_string("   TRY AGAIN?");
		flappy_restart();
	}
	
	return 0;
}
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	df 91       	pop	r29
     d2e:	cf 91       	pop	r28
     d30:	ff 90       	pop	r15
     d32:	ef 90       	pop	r14
     d34:	df 90       	pop	r13
     d36:	cf 90       	pop	r12
     d38:	08 95       	ret

00000d3a <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	c4 e6       	ldi	r28, 0x64	; 100
     d44:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     d46:	00 91 01 03 	lds	r16, 0x0301
     d4a:	10 91 02 03 	lds	r17, 0x0302
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	c5 dc       	rcall	.-1654   	; 0x6de <readADC>
     d54:	01 58       	subi	r16, 0x81	; 129
     d56:	1f 4f       	sbci	r17, 0xFF	; 255
     d58:	08 1b       	sub	r16, r24
     d5a:	19 0b       	sbc	r17, r25
     d5c:	10 93 02 03 	sts	0x0302, r17
     d60:	00 93 01 03 	sts	0x0301, r16
		calibrate_y += 127 - readADC(2);
     d64:	00 91 ff 02 	lds	r16, 0x02FF
     d68:	10 91 00 03 	lds	r17, 0x0300
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	b6 dc       	rcall	.-1684   	; 0x6de <readADC>
     d72:	01 58       	subi	r16, 0x81	; 129
     d74:	1f 4f       	sbci	r17, 0xFF	; 255
     d76:	08 1b       	sub	r16, r24
     d78:	19 0b       	sbc	r17, r25
     d7a:	10 93 00 03 	sts	0x0300, r17
     d7e:	00 93 ff 02 	sts	0x02FF, r16
     d82:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     d84:	20 97       	sbiw	r28, 0x00	; 0
     d86:	f9 f6       	brne	.-66     	; 0xd46 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     d88:	80 91 01 03 	lds	r24, 0x0301
     d8c:	90 91 02 03 	lds	r25, 0x0302
     d90:	24 e6       	ldi	r18, 0x64	; 100
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	b9 01       	movw	r22, r18
     d96:	0e 94 ce 13 	call	0x279c	; 0x279c <__divmodhi4>
     d9a:	70 93 02 03 	sts	0x0302, r23
     d9e:	60 93 01 03 	sts	0x0301, r22
	calibrate_y /= CALIBRATE_READINGS;
     da2:	80 91 ff 02 	lds	r24, 0x02FF
     da6:	90 91 00 03 	lds	r25, 0x0300
     daa:	b9 01       	movw	r22, r18
     dac:	0e 94 ce 13 	call	0x279c	; 0x279c <__divmodhi4>
     db0:	70 93 00 03 	sts	0x0300, r23
     db4:	60 93 ff 02 	sts	0x02FF, r22
}
     db8:	df 91       	pop	r29
     dba:	cf 91       	pop	r28
     dbc:	1f 91       	pop	r17
     dbe:	0f 91       	pop	r16
     dc0:	08 95       	ret

00000dc2 <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     dc2:	2f 92       	push	r2
     dc4:	3f 92       	push	r3
     dc6:	4f 92       	push	r4
     dc8:	5f 92       	push	r5
     dca:	6f 92       	push	r6
     dcc:	7f 92       	push	r7
     dce:	8f 92       	push	r8
     dd0:	9f 92       	push	r9
     dd2:	af 92       	push	r10
     dd4:	bf 92       	push	r11
     dd6:	cf 92       	push	r12
     dd8:	df 92       	push	r13
     dda:	ef 92       	push	r14
     ddc:	ff 92       	push	r15
     dde:	0f 93       	push	r16
     de0:	1f 93       	push	r17
     de2:	cf 93       	push	r28
     de4:	df 93       	push	r29
     de6:	00 d0       	rcall	.+0      	; 0xde8 <signal_to_range+0x26>
     de8:	00 d0       	rcall	.+0      	; 0xdea <signal_to_range+0x28>
     dea:	00 d0       	rcall	.+0      	; 0xdec <signal_to_range+0x2a>
     dec:	cd b7       	in	r28, 0x3d	; 61
     dee:	de b7       	in	r29, 0x3e	; 62
     df0:	3c 01       	movw	r6, r24
     df2:	7a 83       	std	Y+2, r23	; 0x02
     df4:	69 83       	std	Y+1, r22	; 0x01
     df6:	5c 83       	std	Y+4, r21	; 0x04
     df8:	4b 83       	std	Y+3, r20	; 0x03
     dfa:	3e 83       	std	Y+6, r19	; 0x06
     dfc:	2d 83       	std	Y+5, r18	; 0x05
     dfe:	18 01       	movw	r2, r16
     e00:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     e02:	b9 01       	movw	r22, r18
     e04:	88 27       	eor	r24, r24
     e06:	77 fd       	sbrc	r23, 7
     e08:	80 95       	com	r24
     e0a:	98 2f       	mov	r25, r24
     e0c:	0e 94 b7 12 	call	0x256e	; 0x256e <__floatsisf>
     e10:	4b 01       	movw	r8, r22
     e12:	5c 01       	movw	r10, r24
     e14:	b3 01       	movw	r22, r6
     e16:	6e 0d       	add	r22, r14
     e18:	7f 1d       	adc	r23, r15
     e1a:	29 81       	ldd	r18, Y+1	; 0x01
     e1c:	3a 81       	ldd	r19, Y+2	; 0x02
     e1e:	62 1b       	sub	r22, r18
     e20:	73 0b       	sbc	r23, r19
     e22:	88 27       	eor	r24, r24
     e24:	77 fd       	sbrc	r23, 7
     e26:	80 95       	com	r24
     e28:	98 2f       	mov	r25, r24
     e2a:	0e 94 b7 12 	call	0x256e	; 0x256e <__floatsisf>
     e2e:	2b 01       	movw	r4, r22
     e30:	3c 01       	movw	r6, r24
     e32:	b1 01       	movw	r22, r2
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	9e 81       	ldd	r25, Y+6	; 0x06
     e38:	68 1b       	sub	r22, r24
     e3a:	79 0b       	sbc	r23, r25
     e3c:	88 27       	eor	r24, r24
     e3e:	77 fd       	sbrc	r23, 7
     e40:	80 95       	com	r24
     e42:	98 2f       	mov	r25, r24
     e44:	0e 94 b7 12 	call	0x256e	; 0x256e <__floatsisf>
     e48:	9b 01       	movw	r18, r22
     e4a:	ac 01       	movw	r20, r24
     e4c:	c3 01       	movw	r24, r6
     e4e:	b2 01       	movw	r22, r4
     e50:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <__mulsf3>
     e54:	2b 01       	movw	r4, r22
     e56:	3c 01       	movw	r6, r24
     e58:	6b 81       	ldd	r22, Y+3	; 0x03
     e5a:	7c 81       	ldd	r23, Y+4	; 0x04
     e5c:	e9 81       	ldd	r30, Y+1	; 0x01
     e5e:	fa 81       	ldd	r31, Y+2	; 0x02
     e60:	6e 1b       	sub	r22, r30
     e62:	7f 0b       	sbc	r23, r31
     e64:	88 27       	eor	r24, r24
     e66:	77 fd       	sbrc	r23, 7
     e68:	80 95       	com	r24
     e6a:	98 2f       	mov	r25, r24
     e6c:	0e 94 b7 12 	call	0x256e	; 0x256e <__floatsisf>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	c3 01       	movw	r24, r6
     e76:	b2 01       	movw	r22, r4
     e78:	0e 94 1c 12 	call	0x2438	; 0x2438 <__divsf3>
     e7c:	9b 01       	movw	r18, r22
     e7e:	ac 01       	movw	r20, r24
     e80:	c5 01       	movw	r24, r10
     e82:	b4 01       	movw	r22, r8
     e84:	0e 94 b4 11 	call	0x2368	; 0x2368 <__addsf3>
     e88:	0e 94 84 12 	call	0x2508	; 0x2508 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     e8c:	c1 01       	movw	r24, r2
     e8e:	80 1b       	sub	r24, r16
     e90:	91 0b       	sbc	r25, r17
     e92:	68 17       	cp	r22, r24
     e94:	79 07       	cpc	r23, r25
     e96:	74 f5       	brge	.+92     	; 0xef4 <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     e98:	8d 81       	ldd	r24, Y+5	; 0x05
     e9a:	9e 81       	ldd	r25, Y+6	; 0x06
     e9c:	80 0f       	add	r24, r16
     e9e:	91 1f       	adc	r25, r17
     ea0:	86 17       	cp	r24, r22
     ea2:	97 07       	cpc	r25, r23
     ea4:	4c f5       	brge	.+82     	; 0xef8 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     ea6:	f8 01       	movw	r30, r16
     ea8:	11 23       	and	r17, r17
     eaa:	0c f4       	brge	.+2      	; 0xeae <signal_to_range+0xec>
     eac:	31 96       	adiw	r30, 0x01	; 1
     eae:	f5 95       	asr	r31
     eb0:	e7 95       	ror	r30
     eb2:	d8 01       	movw	r26, r16
     eb4:	12 c0       	rjmp	.+36     	; 0xeda <signal_to_range+0x118>
     eb6:	8a 0f       	add	r24, r26
     eb8:	9b 1f       	adc	r25, r27
     eba:	ac 01       	movw	r20, r24
     ebc:	4e 0f       	add	r20, r30
     ebe:	5f 1f       	adc	r21, r31
     ec0:	64 17       	cp	r22, r20
     ec2:	75 07       	cpc	r23, r21
     ec4:	14 f0       	brlt	.+4      	; 0xeca <signal_to_range+0x108>
				reference += step;
     ec6:	69 01       	movw	r12, r18
     ec8:	0b c0       	rjmp	.+22     	; 0xee0 <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     eca:	c6 01       	movw	r24, r12
     ecc:	8e 1b       	sub	r24, r30
     ece:	9f 0b       	sbc	r25, r31
     ed0:	86 17       	cp	r24, r22
     ed2:	97 07       	cpc	r25, r23
     ed4:	14 f0       	brlt	.+4      	; 0xeda <signal_to_range+0x118>
				reference -= step;
     ed6:	c0 1a       	sub	r12, r16
     ed8:	d1 0a       	sbc	r13, r17
     eda:	c6 01       	movw	r24, r12
     edc:	80 1b       	sub	r24, r16
     ede:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     ee0:	96 01       	movw	r18, r12
     ee2:	20 0f       	add	r18, r16
     ee4:	31 1f       	adc	r19, r17
     ee6:	62 17       	cp	r22, r18
     ee8:	73 07       	cpc	r23, r19
     eea:	2c f7       	brge	.-54     	; 0xeb6 <signal_to_range+0xf4>
     eec:	86 17       	cp	r24, r22
     eee:	97 07       	cpc	r25, r23
     ef0:	14 f7       	brge	.-60     	; 0xeb6 <signal_to_range+0xf4>
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     ef4:	61 01       	movw	r12, r2
     ef6:	02 c0       	rjmp	.+4      	; 0xefc <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     ef8:	cd 80       	ldd	r12, Y+5	; 0x05
     efa:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     efc:	c6 01       	movw	r24, r12
     efe:	26 96       	adiw	r28, 0x06	; 6
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	1f 91       	pop	r17
     f10:	0f 91       	pop	r16
     f12:	ff 90       	pop	r15
     f14:	ef 90       	pop	r14
     f16:	df 90       	pop	r13
     f18:	cf 90       	pop	r12
     f1a:	bf 90       	pop	r11
     f1c:	af 90       	pop	r10
     f1e:	9f 90       	pop	r9
     f20:	8f 90       	pop	r8
     f22:	7f 90       	pop	r7
     f24:	6f 90       	pop	r6
     f26:	5f 90       	pop	r5
     f28:	4f 90       	pop	r4
     f2a:	3f 90       	pop	r3
     f2c:	2f 90       	pop	r2
     f2e:	08 95       	ret

00000f30 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     f30:	af 92       	push	r10
     f32:	bf 92       	push	r11
     f34:	cf 92       	push	r12
     f36:	df 92       	push	r13
     f38:	ef 92       	push	r14
     f3a:	ff 92       	push	r15
     f3c:	0f 93       	push	r16
     f3e:	1f 93       	push	r17
	switch(channel){
     f40:	82 35       	cpi	r24, 0x52	; 82
     f42:	09 f4       	brne	.+2      	; 0xf46 <read_control_input+0x16>
     f44:	6e c0       	rjmp	.+220    	; 0x1022 <read_control_input+0xf2>
     f46:	20 f4       	brcc	.+8      	; 0xf50 <read_control_input+0x20>
     f48:	8c 34       	cpi	r24, 0x4C	; 76
     f4a:	09 f4       	brne	.+2      	; 0xf4e <read_control_input+0x1e>
     f4c:	4a c0       	rjmp	.+148    	; 0xfe2 <read_control_input+0xb2>
     f4e:	89 c0       	rjmp	.+274    	; 0x1062 <read_control_input+0x132>
     f50:	88 35       	cpi	r24, 0x58	; 88
     f52:	19 f0       	breq	.+6      	; 0xf5a <read_control_input+0x2a>
     f54:	89 35       	cpi	r24, 0x59	; 89
     f56:	19 f1       	breq	.+70     	; 0xf9e <read_control_input+0x6e>
     f58:	84 c0       	rjmp	.+264    	; 0x1062 <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     f5a:	c0 90 fd 02 	lds	r12, 0x02FD
     f5e:	d0 90 fe 02 	lds	r13, 0x02FE
     f62:	e0 90 01 03 	lds	r14, 0x0301
     f66:	f0 90 02 03 	lds	r15, 0x0302
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	b7 db       	rcall	.-2194   	; 0x6de <readADC>
     f70:	0f 2e       	mov	r0, r31
     f72:	fa e0       	ldi	r31, 0x0A	; 10
     f74:	af 2e       	mov	r10, r31
     f76:	b1 2c       	mov	r11, r1
     f78:	f0 2d       	mov	r31, r0
     f7a:	04 e6       	ldi	r16, 0x64	; 100
     f7c:	10 e0       	ldi	r17, 0x00	; 0
     f7e:	2c e9       	ldi	r18, 0x9C	; 156
     f80:	3f ef       	ldi	r19, 0xFF	; 255
     f82:	4f ef       	ldi	r20, 0xFF	; 255
     f84:	50 e0       	ldi	r21, 0x00	; 0
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	70 e0       	ldi	r23, 0x00	; 0
     f8a:	1b df       	rcall	.-458    	; 0xdc2 <signal_to_range>
     f8c:	90 93 fe 02 	sts	0x02FE, r25
     f90:	80 93 fd 02 	sts	0x02FD, r24
			return ref_X;
     f94:	80 91 fd 02 	lds	r24, 0x02FD
     f98:	90 91 fe 02 	lds	r25, 0x02FE
     f9c:	64 c0       	rjmp	.+200    	; 0x1066 <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     f9e:	c0 90 fb 02 	lds	r12, 0x02FB
     fa2:	d0 90 fc 02 	lds	r13, 0x02FC
     fa6:	e0 90 ff 02 	lds	r14, 0x02FF
     faa:	f0 90 00 03 	lds	r15, 0x0300
     fae:	82 e0       	ldi	r24, 0x02	; 2
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	95 db       	rcall	.-2262   	; 0x6de <readADC>
     fb4:	0f 2e       	mov	r0, r31
     fb6:	fa e0       	ldi	r31, 0x0A	; 10
     fb8:	af 2e       	mov	r10, r31
     fba:	b1 2c       	mov	r11, r1
     fbc:	f0 2d       	mov	r31, r0
     fbe:	04 e6       	ldi	r16, 0x64	; 100
     fc0:	10 e0       	ldi	r17, 0x00	; 0
     fc2:	2c e9       	ldi	r18, 0x9C	; 156
     fc4:	3f ef       	ldi	r19, 0xFF	; 255
     fc6:	4f ef       	ldi	r20, 0xFF	; 255
     fc8:	50 e0       	ldi	r21, 0x00	; 0
     fca:	60 e0       	ldi	r22, 0x00	; 0
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	f9 de       	rcall	.-526    	; 0xdc2 <signal_to_range>
     fd0:	90 93 fc 02 	sts	0x02FC, r25
     fd4:	80 93 fb 02 	sts	0x02FB, r24
			return ref_Y;
     fd8:	80 91 fb 02 	lds	r24, 0x02FB
     fdc:	90 91 fc 02 	lds	r25, 0x02FC
     fe0:	42 c0       	rjmp	.+132    	; 0x1066 <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     fe2:	c0 90 f9 02 	lds	r12, 0x02F9
     fe6:	d0 90 fa 02 	lds	r13, 0x02FA
     fea:	83 e0       	ldi	r24, 0x03	; 3
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	77 db       	rcall	.-2322   	; 0x6de <readADC>
     ff0:	0f 2e       	mov	r0, r31
     ff2:	fa e0       	ldi	r31, 0x0A	; 10
     ff4:	af 2e       	mov	r10, r31
     ff6:	b1 2c       	mov	r11, r1
     ff8:	f0 2d       	mov	r31, r0
     ffa:	e1 2c       	mov	r14, r1
     ffc:	f1 2c       	mov	r15, r1
     ffe:	04 e6       	ldi	r16, 0x64	; 100
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	20 e0       	ldi	r18, 0x00	; 0
    1004:	30 e0       	ldi	r19, 0x00	; 0
    1006:	4f ef       	ldi	r20, 0xFF	; 255
    1008:	50 e0       	ldi	r21, 0x00	; 0
    100a:	60 e0       	ldi	r22, 0x00	; 0
    100c:	70 e0       	ldi	r23, 0x00	; 0
    100e:	d9 de       	rcall	.-590    	; 0xdc2 <signal_to_range>
    1010:	90 93 fa 02 	sts	0x02FA, r25
    1014:	80 93 f9 02 	sts	0x02F9, r24
		return ref_L;
    1018:	80 91 f9 02 	lds	r24, 0x02F9
    101c:	90 91 fa 02 	lds	r25, 0x02FA
    1020:	22 c0       	rjmp	.+68     	; 0x1066 <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
    1022:	c0 90 f7 02 	lds	r12, 0x02F7
    1026:	d0 90 f8 02 	lds	r13, 0x02F8
    102a:	84 e0       	ldi	r24, 0x04	; 4
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	57 db       	rcall	.-2386   	; 0x6de <readADC>
    1030:	0f 2e       	mov	r0, r31
    1032:	fa e0       	ldi	r31, 0x0A	; 10
    1034:	af 2e       	mov	r10, r31
    1036:	b1 2c       	mov	r11, r1
    1038:	f0 2d       	mov	r31, r0
    103a:	e1 2c       	mov	r14, r1
    103c:	f1 2c       	mov	r15, r1
    103e:	04 e6       	ldi	r16, 0x64	; 100
    1040:	10 e0       	ldi	r17, 0x00	; 0
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4f ef       	ldi	r20, 0xFF	; 255
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	60 e0       	ldi	r22, 0x00	; 0
    104c:	70 e0       	ldi	r23, 0x00	; 0
    104e:	b9 de       	rcall	.-654    	; 0xdc2 <signal_to_range>
    1050:	90 93 f8 02 	sts	0x02F8, r25
    1054:	80 93 f7 02 	sts	0x02F7, r24
			return ref_R;
    1058:	80 91 f7 02 	lds	r24, 0x02F7
    105c:	90 91 f8 02 	lds	r25, 0x02F8
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <read_control_input+0x136>
	}
	return 0;
    1062:	80 e0       	ldi	r24, 0x00	; 0
    1064:	90 e0       	ldi	r25, 0x00	; 0
}
    1066:	1f 91       	pop	r17
    1068:	0f 91       	pop	r16
    106a:	ff 90       	pop	r15
    106c:	ef 90       	pop	r14
    106e:	df 90       	pop	r13
    1070:	cf 90       	pop	r12
    1072:	bf 90       	pop	r11
    1074:	af 90       	pop	r10
    1076:	08 95       	ret

00001078 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
    1078:	60 de       	rcall	.-832    	; 0xd3a <calibrate_joystick>
	ref_X = read_control_input('X');
    107a:	88 e5       	ldi	r24, 0x58	; 88
    107c:	59 df       	rcall	.-334    	; 0xf30 <read_control_input>
    107e:	90 93 fe 02 	sts	0x02FE, r25
    1082:	80 93 fd 02 	sts	0x02FD, r24
	ref_Y = read_control_input('Y');
    1086:	89 e5       	ldi	r24, 0x59	; 89
    1088:	53 df       	rcall	.-346    	; 0xf30 <read_control_input>
    108a:	90 93 fc 02 	sts	0x02FC, r25
    108e:	80 93 fb 02 	sts	0x02FB, r24
	ref_L = read_control_input('L');
    1092:	8c e4       	ldi	r24, 0x4C	; 76
    1094:	4d df       	rcall	.-358    	; 0xf30 <read_control_input>
    1096:	90 93 fa 02 	sts	0x02FA, r25
    109a:	80 93 f9 02 	sts	0x02F9, r24
	ref_R = read_control_input('R');
    109e:	82 e5       	ldi	r24, 0x52	; 82
    10a0:	47 df       	rcall	.-370    	; 0xf30 <read_control_input>
    10a2:	90 93 f8 02 	sts	0x02F8, r25
    10a6:	80 93 f7 02 	sts	0x02F7, r24
    10aa:	08 95       	ret

000010ac <initialize_menu>:
	&debug_0
};

char temp[16];

void initialize_menu(void){
    10ac:	8f 92       	push	r8
    10ae:	9f 92       	push	r9
    10b0:	af 92       	push	r10
    10b2:	bf 92       	push	r11
    10b4:	cf 92       	push	r12
    10b6:	df 92       	push	r13
    10b8:	ef 92       	push	r14
    10ba:	ff 92       	push	r15
    10bc:	0f 93       	push	r16
    10be:	1f 93       	push	r17
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	0f 2e       	mov	r0, r31
    10c6:	fc e1       	ldi	r31, 0x1C	; 28
    10c8:	cf 2e       	mov	r12, r31
    10ca:	f1 e0       	ldi	r31, 0x01	; 1
    10cc:	df 2e       	mov	r13, r31
    10ce:	f0 2d       	mov	r31, r0
    10d0:	0f 2e       	mov	r0, r31
    10d2:	f2 e1       	ldi	r31, 0x12	; 18
    10d4:	ef 2e       	mov	r14, r31
    10d6:	f1 e0       	ldi	r31, 0x01	; 1
    10d8:	ff 2e       	mov	r15, r31
    10da:	f0 2d       	mov	r31, r0
    10dc:	06 e2       	ldi	r16, 0x26	; 38
    10de:	11 e0       	ldi	r17, 0x01	; 1
    10e0:	21 e0       	ldi	r18, 0x01	; 1
    10e2:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
    10e4:	c5 e0       	ldi	r28, 0x05	; 5
    10e6:	d0 e0       	ldi	r29, 0x00	; 0
    10e8:	d6 01       	movw	r26, r12
    10ea:	ad 90       	ld	r10, X+
    10ec:	bd 90       	ld	r11, X+
    10ee:	6d 01       	movw	r12, r26
    10f0:	f7 01       	movw	r30, r14
    10f2:	81 90       	ld	r8, Z+
    10f4:	91 90       	ld	r9, Z+
    10f6:	7f 01       	movw	r14, r30
    10f8:	c9 01       	movw	r24, r18
    10fa:	be 01       	movw	r22, r28
    10fc:	0e 94 ce 13 	call	0x279c	; 0x279c <__divmodhi4>
    1100:	fc 01       	movw	r30, r24
    1102:	ee 0f       	add	r30, r30
    1104:	ff 1f       	adc	r31, r31
    1106:	ea 5d       	subi	r30, 0xDA	; 218
    1108:	fe 4f       	sbci	r31, 0xFE	; 254
    110a:	80 81       	ld	r24, Z
    110c:	91 81       	ldd	r25, Z+1	; 0x01
    110e:	d8 01       	movw	r26, r16
    1110:	ed 91       	ld	r30, X+
    1112:	fd 91       	ld	r31, X+
    1114:	8d 01       	movw	r16, r26
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1116:	95 83       	std	Z+5, r25	; 0x05
    1118:	84 83       	std	Z+4, r24	; 0x04
	new_menu->ptr_child = ptr_child;
    111a:	97 82       	std	Z+7, r9	; 0x07
    111c:	86 82       	std	Z+6, r8	; 0x06
	new_menu->ptr_parent = ptr_parent;
    111e:	11 86       	std	Z+9, r1	; 0x09
    1120:	10 86       	std	Z+8, r1	; 0x08
	
	new_menu->title = title;
    1122:	b1 82       	std	Z+1, r11	; 0x01
    1124:	a0 82       	st	Z, r10
	new_menu->n_sib = n_sib;
    1126:	d3 83       	std	Z+3, r29	; 0x03
    1128:	c2 83       	std	Z+2, r28	; 0x02
    112a:	2f 5f       	subi	r18, 0xFF	; 255
    112c:	3f 4f       	sbci	r19, 0xFF	; 255
};

char temp[16];

void initialize_menu(void){
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
    112e:	26 30       	cpi	r18, 0x06	; 6
    1130:	31 05       	cpc	r19, r1
    1132:	d1 f6       	brne	.-76     	; 0x10e8 <initialize_menu+0x3c>
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    1134:	80 91 40 01 	lds	r24, 0x0140
    1138:	90 91 41 01 	lds	r25, 0x0141
    113c:	60 91 12 03 	lds	r22, 0x0312
    1140:	70 91 13 03 	lds	r23, 0x0313
    1144:	e6 e2       	ldi	r30, 0x26	; 38
    1146:	f1 e0       	ldi	r31, 0x01	; 1
    1148:	40 81       	ld	r20, Z
    114a:	51 81       	ldd	r21, Z+1	; 0x01
    114c:	0f 2e       	mov	r0, r31
    114e:	f4 e4       	ldi	r31, 0x44	; 68
    1150:	ef 2e       	mov	r14, r31
    1152:	f1 e0       	ldi	r31, 0x01	; 1
    1154:	ff 2e       	mov	r15, r31
    1156:	f0 2d       	mov	r31, r0
    1158:	e7 01       	movw	r28, r14
    115a:	a8 81       	ld	r26, Y
    115c:	b9 81       	ldd	r27, Y+1	; 0x01
    115e:	26 e4       	ldi	r18, 0x46	; 70
    1160:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1162:	e9 01       	movw	r28, r18
    1164:	08 81       	ld	r16, Y
    1166:	19 81       	ldd	r17, Y+1	; 0x01
    1168:	15 96       	adiw	r26, 0x05	; 5
    116a:	1c 93       	st	X, r17
    116c:	0e 93       	st	-X, r16
    116e:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1170:	17 96       	adiw	r26, 0x07	; 7
    1172:	7c 93       	st	X, r23
    1174:	6e 93       	st	-X, r22
    1176:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1178:	19 96       	adiw	r26, 0x09	; 9
    117a:	5c 93       	st	X, r21
    117c:	4e 93       	st	-X, r20
    117e:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1180:	11 96       	adiw	r26, 0x01	; 1
    1182:	9c 93       	st	X, r25
    1184:	8e 93       	st	-X, r24
	new_menu->n_sib = n_sib;
    1186:	82 e0       	ldi	r24, 0x02	; 2
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	13 96       	adiw	r26, 0x03	; 3
    118c:	9c 93       	st	X, r25
    118e:	8e 93       	st	-X, r24
    1190:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    1192:	40 91 42 01 	lds	r20, 0x0142
    1196:	50 91 43 01 	lds	r21, 0x0143
    119a:	00 91 14 03 	lds	r16, 0x0314
    119e:	10 91 15 03 	lds	r17, 0x0315
    11a2:	60 81       	ld	r22, Z
    11a4:	71 81       	ldd	r23, Z+1	; 0x01
    11a6:	a8 81       	ld	r26, Y
    11a8:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    11aa:	e7 01       	movw	r28, r14
    11ac:	28 81       	ld	r18, Y
    11ae:	39 81       	ldd	r19, Y+1	; 0x01
    11b0:	15 96       	adiw	r26, 0x05	; 5
    11b2:	3c 93       	st	X, r19
    11b4:	2e 93       	st	-X, r18
    11b6:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    11b8:	17 96       	adiw	r26, 0x07	; 7
    11ba:	1c 93       	st	X, r17
    11bc:	0e 93       	st	-X, r16
    11be:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    11c0:	19 96       	adiw	r26, 0x09	; 9
    11c2:	7c 93       	st	X, r23
    11c4:	6e 93       	st	-X, r22
    11c6:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    11c8:	11 96       	adiw	r26, 0x01	; 1
    11ca:	5c 93       	st	X, r21
    11cc:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    11ce:	13 96       	adiw	r26, 0x03	; 3
    11d0:	9c 93       	st	X, r25
    11d2:	8e 93       	st	-X, r24
    11d4:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    11d6:	40 91 48 01 	lds	r20, 0x0148
    11da:	50 91 49 01 	lds	r21, 0x0149
    11de:	00 91 16 03 	lds	r16, 0x0316
    11e2:	10 91 17 03 	lds	r17, 0x0317
    11e6:	60 81       	ld	r22, Z
    11e8:	71 81       	ldd	r23, Z+1	; 0x01
    11ea:	0f 2e       	mov	r0, r31
    11ec:	fc e4       	ldi	r31, 0x4C	; 76
    11ee:	cf 2e       	mov	r12, r31
    11f0:	f1 e0       	ldi	r31, 0x01	; 1
    11f2:	df 2e       	mov	r13, r31
    11f4:	f0 2d       	mov	r31, r0
    11f6:	e6 01       	movw	r28, r12
    11f8:	a8 81       	ld	r26, Y
    11fa:	b9 81       	ldd	r27, Y+1	; 0x01
    11fc:	2e e4       	ldi	r18, 0x4E	; 78
    11fe:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1200:	e9 01       	movw	r28, r18
    1202:	e8 80       	ld	r14, Y
    1204:	f9 80       	ldd	r15, Y+1	; 0x01
    1206:	15 96       	adiw	r26, 0x05	; 5
    1208:	fc 92       	st	X, r15
    120a:	ee 92       	st	-X, r14
    120c:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    120e:	17 96       	adiw	r26, 0x07	; 7
    1210:	1c 93       	st	X, r17
    1212:	0e 93       	st	-X, r16
    1214:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1216:	19 96       	adiw	r26, 0x09	; 9
    1218:	7c 93       	st	X, r23
    121a:	6e 93       	st	-X, r22
    121c:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    121e:	11 96       	adiw	r26, 0x01	; 1
    1220:	5c 93       	st	X, r21
    1222:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1224:	13 96       	adiw	r26, 0x03	; 3
    1226:	9c 93       	st	X, r25
    1228:	8e 93       	st	-X, r24
    122a:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    122c:	40 91 4a 01 	lds	r20, 0x014A
    1230:	50 91 4b 01 	lds	r21, 0x014B
    1234:	00 91 18 03 	lds	r16, 0x0318
    1238:	10 91 19 03 	lds	r17, 0x0319
    123c:	60 81       	ld	r22, Z
    123e:	71 81       	ldd	r23, Z+1	; 0x01
    1240:	a8 81       	ld	r26, Y
    1242:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1244:	e6 01       	movw	r28, r12
    1246:	28 81       	ld	r18, Y
    1248:	39 81       	ldd	r19, Y+1	; 0x01
    124a:	15 96       	adiw	r26, 0x05	; 5
    124c:	3c 93       	st	X, r19
    124e:	2e 93       	st	-X, r18
    1250:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1252:	17 96       	adiw	r26, 0x07	; 7
    1254:	1c 93       	st	X, r17
    1256:	0e 93       	st	-X, r16
    1258:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    125a:	19 96       	adiw	r26, 0x09	; 9
    125c:	7c 93       	st	X, r23
    125e:	6e 93       	st	-X, r22
    1260:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1262:	11 96       	adiw	r26, 0x01	; 1
    1264:	5c 93       	st	X, r21
    1266:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1268:	13 96       	adiw	r26, 0x03	; 3
    126a:	9c 93       	st	X, r25
    126c:	8e 93       	st	-X, r24
    126e:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    1270:	40 91 38 01 	lds	r20, 0x0138
    1274:	50 91 39 01 	lds	r21, 0x0139
    1278:	00 91 0e 03 	lds	r16, 0x030E
    127c:	10 91 0f 03 	lds	r17, 0x030F
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	0f 2e       	mov	r0, r31
    1286:	fc e3       	ldi	r31, 0x3C	; 60
    1288:	cf 2e       	mov	r12, r31
    128a:	f1 e0       	ldi	r31, 0x01	; 1
    128c:	df 2e       	mov	r13, r31
    128e:	f0 2d       	mov	r31, r0
    1290:	e6 01       	movw	r28, r12
    1292:	a8 81       	ld	r26, Y
    1294:	b9 81       	ldd	r27, Y+1	; 0x01
    1296:	2e e3       	ldi	r18, 0x3E	; 62
    1298:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    129a:	e9 01       	movw	r28, r18
    129c:	e8 80       	ld	r14, Y
    129e:	f9 80       	ldd	r15, Y+1	; 0x01
    12a0:	15 96       	adiw	r26, 0x05	; 5
    12a2:	fc 92       	st	X, r15
    12a4:	ee 92       	st	-X, r14
    12a6:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    12a8:	17 96       	adiw	r26, 0x07	; 7
    12aa:	1c 93       	st	X, r17
    12ac:	0e 93       	st	-X, r16
    12ae:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    12b0:	19 96       	adiw	r26, 0x09	; 9
    12b2:	7c 93       	st	X, r23
    12b4:	6e 93       	st	-X, r22
    12b6:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    12b8:	11 96       	adiw	r26, 0x01	; 1
    12ba:	5c 93       	st	X, r21
    12bc:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    12be:	13 96       	adiw	r26, 0x03	; 3
    12c0:	9c 93       	st	X, r25
    12c2:	8e 93       	st	-X, r24
    12c4:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    12c6:	40 91 3a 01 	lds	r20, 0x013A
    12ca:	50 91 3b 01 	lds	r21, 0x013B
    12ce:	00 91 10 03 	lds	r16, 0x0310
    12d2:	10 91 11 03 	lds	r17, 0x0311
    12d6:	60 81       	ld	r22, Z
    12d8:	71 81       	ldd	r23, Z+1	; 0x01
    12da:	a8 81       	ld	r26, Y
    12dc:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    12de:	e6 01       	movw	r28, r12
    12e0:	28 81       	ld	r18, Y
    12e2:	39 81       	ldd	r19, Y+1	; 0x01
    12e4:	15 96       	adiw	r26, 0x05	; 5
    12e6:	3c 93       	st	X, r19
    12e8:	2e 93       	st	-X, r18
    12ea:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    12ec:	17 96       	adiw	r26, 0x07	; 7
    12ee:	1c 93       	st	X, r17
    12f0:	0e 93       	st	-X, r16
    12f2:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    12f4:	19 96       	adiw	r26, 0x09	; 9
    12f6:	7c 93       	st	X, r23
    12f8:	6e 93       	st	-X, r22
    12fa:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    12fc:	11 96       	adiw	r26, 0x01	; 1
    12fe:	5c 93       	st	X, r21
    1300:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1302:	13 96       	adiw	r26, 0x03	; 3
    1304:	9c 93       	st	X, r25
    1306:	8e 93       	st	-X, r24
    1308:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if HIGHSCORE_ENABLE
	for (uint8_t h = 0; h < TOTAL_GAMES; h++)
	{
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_GAMES],mainmenu_list[0],highscore_ptr_list[h],TOTAL_GAMES,highscore_entry_list[h]);
    130a:	40 91 30 01 	lds	r20, 0x0130
    130e:	50 91 31 01 	lds	r21, 0x0131
    1312:	00 91 04 03 	lds	r16, 0x0304
    1316:	10 91 05 03 	lds	r17, 0x0305
    131a:	60 81       	ld	r22, Z
    131c:	71 81       	ldd	r23, Z+1	; 0x01
    131e:	0f 2e       	mov	r0, r31
    1320:	f4 e3       	ldi	r31, 0x34	; 52
    1322:	cf 2e       	mov	r12, r31
    1324:	f1 e0       	ldi	r31, 0x01	; 1
    1326:	df 2e       	mov	r13, r31
    1328:	f0 2d       	mov	r31, r0
    132a:	e6 01       	movw	r28, r12
    132c:	a8 81       	ld	r26, Y
    132e:	b9 81       	ldd	r27, Y+1	; 0x01
    1330:	26 e3       	ldi	r18, 0x36	; 54
    1332:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1334:	e9 01       	movw	r28, r18
    1336:	e8 80       	ld	r14, Y
    1338:	f9 80       	ldd	r15, Y+1	; 0x01
    133a:	15 96       	adiw	r26, 0x05	; 5
    133c:	fc 92       	st	X, r15
    133e:	ee 92       	st	-X, r14
    1340:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1342:	17 96       	adiw	r26, 0x07	; 7
    1344:	1c 93       	st	X, r17
    1346:	0e 93       	st	-X, r16
    1348:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    134a:	19 96       	adiw	r26, 0x09	; 9
    134c:	7c 93       	st	X, r23
    134e:	6e 93       	st	-X, r22
    1350:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1352:	11 96       	adiw	r26, 0x01	; 1
    1354:	5c 93       	st	X, r21
    1356:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	9c 93       	st	X, r25
    135c:	8e 93       	st	-X, r24
    135e:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if HIGHSCORE_ENABLE
	for (uint8_t h = 0; h < TOTAL_GAMES; h++)
	{
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_GAMES],mainmenu_list[0],highscore_ptr_list[h],TOTAL_GAMES,highscore_entry_list[h]);
    1360:	40 91 32 01 	lds	r20, 0x0132
    1364:	50 91 33 01 	lds	r21, 0x0133
    1368:	a0 91 06 03 	lds	r26, 0x0306
    136c:	b0 91 07 03 	lds	r27, 0x0307
    1370:	60 81       	ld	r22, Z
    1372:	71 81       	ldd	r23, Z+1	; 0x01
    1374:	e8 81       	ld	r30, Y
    1376:	f9 81       	ldd	r31, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1378:	e6 01       	movw	r28, r12
    137a:	28 81       	ld	r18, Y
    137c:	39 81       	ldd	r19, Y+1	; 0x01
    137e:	35 83       	std	Z+5, r19	; 0x05
    1380:	24 83       	std	Z+4, r18	; 0x04
	new_menu->ptr_child = ptr_child;
    1382:	b7 83       	std	Z+7, r27	; 0x07
    1384:	a6 83       	std	Z+6, r26	; 0x06
	new_menu->ptr_parent = ptr_parent;
    1386:	71 87       	std	Z+9, r23	; 0x09
    1388:	60 87       	std	Z+8, r22	; 0x08
	
	new_menu->title = title;
    138a:	51 83       	std	Z+1, r21	; 0x01
    138c:	40 83       	st	Z, r20
	new_menu->n_sib = n_sib;
    138e:	93 83       	std	Z+3, r25	; 0x03
    1390:	82 83       	std	Z+2, r24	; 0x02
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_GAMES],mainmenu_list[0],highscore_ptr_list[h],TOTAL_GAMES,highscore_entry_list[h]);
	}
	#endif
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_start;
    1392:	84 e9       	ldi	r24, 0x94	; 148
    1394:	93 e0       	ldi	r25, 0x03	; 3
    1396:	90 93 1d 03 	sts	0x031D, r25
    139a:	80 93 1c 03 	sts	0x031C, r24
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_start;
    139e:	90 93 1f 03 	sts	0x031F, r25
    13a2:	80 93 1e 03 	sts	0x031E, r24
	
}
    13a6:	df 91       	pop	r29
    13a8:	cf 91       	pop	r28
    13aa:	1f 91       	pop	r17
    13ac:	0f 91       	pop	r16
    13ae:	ff 90       	pop	r15
    13b0:	ef 90       	pop	r14
    13b2:	df 90       	pop	r13
    13b4:	cf 90       	pop	r12
    13b6:	bf 90       	pop	r11
    13b8:	af 90       	pop	r10
    13ba:	9f 90       	pop	r9
    13bc:	8f 90       	pop	r8
    13be:	08 95       	ret

000013c0 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	65 d2       	rcall	.+1226   	; 0x188e <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
    13c4:	60 ea       	ldi	r22, 0xA0	; 160
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	8e e3       	ldi	r24, 0x3E	; 62
    13ca:	93 e0       	ldi	r25, 0x03	; 3
    13cc:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
	sram_write_string(temp);
    13d0:	8e e3       	ldi	r24, 0x3E	; 62
    13d2:	93 e0       	ldi	r25, 0x03	; 3
    13d4:	68 d3       	rcall	.+1744   	; 0x1aa6 <sram_write_string>
	sram_clear_line(1);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	2c d5       	rcall	.+2648   	; 0x1e32 <sram_clear_line>
	oled_goto_line(2);
    13da:	82 e0       	ldi	r24, 0x02	; 2
    13dc:	58 d2       	rcall	.+1200   	; 0x188e <oled_goto_line>
	strcpy_P(temp,btn_1);
    13de:	60 eb       	ldi	r22, 0xB0	; 176
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	8e e3       	ldi	r24, 0x3E	; 62
    13e4:	93 e0       	ldi	r25, 0x03	; 3
    13e6:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
	sram_write_string(temp);
    13ea:	8e e3       	ldi	r24, 0x3E	; 62
    13ec:	93 e0       	ldi	r25, 0x03	; 3
    13ee:	5b d3       	rcall	.+1718   	; 0x1aa6 <sram_write_string>
	sram_update_oled();
    13f0:	f6 d4       	rcall	.+2540   	; 0x1dde <sram_update_oled>
	while (!check_flag_right()){
    13f2:	08 c0       	rjmp	.+16     	; 0x1404 <menu_set_contrast+0x44>
		write_c(0x81);
    13f4:	81 e8       	ldi	r24, 0x81	; 129
    13f6:	18 d2       	rcall	.+1072   	; 0x1828 <write_c>
		write_c(readADC(3)/2);
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	70 d9       	rcall	.-3360   	; 0x6de <readADC>
    13fe:	96 95       	lsr	r25
    1400:	87 95       	ror	r24
    1402:	12 d2       	rcall	.+1060   	; 0x1828 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_update_oled();
	while (!check_flag_right()){
    1404:	b4 d9       	rcall	.-3224   	; 0x76e <check_flag_right>
    1406:	88 23       	and	r24, r24
    1408:	a9 f3       	breq	.-22     	; 0x13f4 <menu_set_contrast+0x34>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
}
    140a:	08 95       	ret

0000140c <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
    140c:	0f 93       	push	r16
    140e:	1f 93       	push	r17
    1410:	cf 93       	push	r28
    1412:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
    1414:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
    1416:	8c 2f       	mov	r24, r28
    1418:	0c d5       	rcall	.+2584   	; 0x1e32 <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
    141a:	cf 5f       	subi	r28, 0xFF	; 255
    141c:	c7 30       	cpi	r28, 0x07	; 7
    141e:	d9 f7       	brne	.-10     	; 0x1416 <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
    1420:	80 e0       	ldi	r24, 0x00	; 0
    1422:	35 d2       	rcall	.+1130   	; 0x188e <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
    1424:	69 e9       	ldi	r22, 0x99	; 153
    1426:	70 e0       	ldi	r23, 0x00	; 0
    1428:	8e e3       	ldi	r24, 0x3E	; 62
    142a:	93 e0       	ldi	r25, 0x03	; 3
    142c:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
	sram_write_string(temp);
    1430:	8e e3       	ldi	r24, 0x3E	; 62
    1432:	93 e0       	ldi	r25, 0x03	; 3
    1434:	38 d3       	rcall	.+1648   	; 0x1aa6 <sram_write_string>
	oled_goto_line(2);
    1436:	82 e0       	ldi	r24, 0x02	; 2
    1438:	2a d2       	rcall	.+1108   	; 0x188e <oled_goto_line>
	strcpy_P(temp,btn_1);
    143a:	60 eb       	ldi	r22, 0xB0	; 176
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	8e e3       	ldi	r24, 0x3E	; 62
    1440:	93 e0       	ldi	r25, 0x03	; 3
    1442:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
	sram_write_string(temp);
    1446:	8e e3       	ldi	r24, 0x3E	; 62
    1448:	93 e0       	ldi	r25, 0x03	; 3
    144a:	2d d3       	rcall	.+1626   	; 0x1aa6 <sram_write_string>
	sram_update_oled();
    144c:	c8 d4       	rcall	.+2448   	; 0x1dde <sram_update_oled>
	while (!check_flag_right()){
    144e:	8f d9       	rcall	.-3298   	; 0x76e <check_flag_right>
    1450:	88 23       	and	r24, r24
    1452:	e9 f3       	breq	.-6      	; 0x144e <menu_calibrate_joystick+0x42>
		
	}
	
	
	oled_clear_line(0);
    1454:	80 e0       	ldi	r24, 0x00	; 0
    1456:	3a d2       	rcall	.+1140   	; 0x18cc <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
    1458:	6b e8       	ldi	r22, 0x8B	; 139
    145a:	70 e0       	ldi	r23, 0x00	; 0
    145c:	8e e3       	ldi	r24, 0x3E	; 62
    145e:	93 e0       	ldi	r25, 0x03	; 3
    1460:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
	sram_write_string(temp);
    1464:	8e e3       	ldi	r24, 0x3E	; 62
    1466:	93 e0       	ldi	r25, 0x03	; 3
    1468:	1e d3       	rcall	.+1596   	; 0x1aa6 <sram_write_string>
    146a:	c0 e7       	ldi	r28, 0x70	; 112
    146c:	d0 e0       	ldi	r29, 0x00	; 0
    146e:	08 e7       	ldi	r16, 0x78	; 120
    1470:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	2b d2       	rcall	.+1110   	; 0x18cc <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
    1476:	fe 01       	movw	r30, r28
    1478:	65 91       	lpm	r22, Z+
    147a:	74 91       	lpm	r23, Z
    147c:	8e e3       	ldi	r24, 0x3E	; 62
    147e:	93 e0       	ldi	r25, 0x03	; 3
    1480:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
		sram_write_string(temp);
    1484:	8e e3       	ldi	r24, 0x3E	; 62
    1486:	93 e0       	ldi	r25, 0x03	; 3
    1488:	0e d3       	rcall	.+1564   	; 0x1aa6 <sram_write_string>
		sram_update_oled();
    148a:	a9 d4       	rcall	.+2386   	; 0x1dde <sram_update_oled>
		while (!check_flag_right()){
    148c:	70 d9       	rcall	.-3360   	; 0x76e <check_flag_right>
    148e:	88 23       	and	r24, r24
    1490:	e9 f3       	breq	.-6      	; 0x148c <menu_calibrate_joystick+0x80>
    1492:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
    1494:	c0 17       	cp	r28, r16
    1496:	d1 07       	cpc	r29, r17
    1498:	61 f7       	brne	.-40     	; 0x1472 <menu_calibrate_joystick+0x66>
		while (!check_flag_right()){
			
		}
		
	}
    149a:	df 91       	pop	r29
    149c:	cf 91       	pop	r28
    149e:	1f 91       	pop	r17
    14a0:	0f 91       	pop	r16
    14a2:	08 95       	ret

000014a4 <menu_function_selected>:
	return 0;
	
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    14a4:	80 91 1e 03 	lds	r24, 0x031E
    14a8:	90 91 1f 03 	lds	r25, 0x031F
    14ac:	23 e0       	ldi	r18, 0x03	; 3
    14ae:	88 35       	cpi	r24, 0x58	; 88
    14b0:	92 07       	cpc	r25, r18
    14b2:	11 f4       	brne	.+4      	; 0x14b8 <menu_function_selected+0x14>
		menu_set_contrast();
    14b4:	85 cf       	rjmp	.-246    	; 0x13c0 <menu_set_contrast>
    14b6:	08 95       	ret
	}else if(current_selected == &debug_1){
    14b8:	23 e0       	ldi	r18, 0x03	; 3
    14ba:	8a 38       	cpi	r24, 0x8A	; 138
    14bc:	92 07       	cpc	r25, r18
    14be:	11 f4       	brne	.+4      	; 0x14c4 <menu_function_selected+0x20>
		menu_calibrate_joystick();
    14c0:	a5 cf       	rjmp	.-182    	; 0x140c <menu_calibrate_joystick>
    14c2:	08 95       	ret
	}
	#if FLAPPY == 1
	else if(current_selected == &game_0){
    14c4:	23 e0       	ldi	r18, 0x03	; 3
    14c6:	80 38       	cpi	r24, 0x80	; 128
    14c8:	92 07       	cpc	r25, r18
    14ca:	11 f4       	brne	.+4      	; 0x14d0 <menu_function_selected+0x2c>
		flappy_main();
    14cc:	ed cb       	rjmp	.-2086   	; 0xca8 <flappy_main>
    14ce:	08 95       	ret
	}
	#endif
	
	#if HIGHSCORE_ENABLE
	else if(current_selected == &highscore_0){
    14d0:	23 e0       	ldi	r18, 0x03	; 3
    14d2:	88 3a       	cpi	r24, 0xA8	; 168
    14d4:	92 07       	cpc	r25, r18
    14d6:	49 f4       	brne	.+18     	; 0x14ea <menu_function_selected+0x46>
		print_highscore(SCOREBOARD_MAIN_GAME);
    14d8:	88 e0       	ldi	r24, 0x08	; 8
    14da:	b7 d6       	rcall	.+3438   	; 0x224a <print_highscore>
		while (!(check_flag_left()||check_flag_right()))
    14dc:	3f d9       	rcall	.-3458   	; 0x75c <check_flag_left>
    14de:	81 11       	cpse	r24, r1
    14e0:	0f c0       	rjmp	.+30     	; 0x1500 <menu_function_selected+0x5c>
    14e2:	45 d9       	rcall	.-3446   	; 0x76e <check_flag_right>
    14e4:	88 23       	and	r24, r24
    14e6:	d1 f3       	breq	.-12     	; 0x14dc <menu_function_selected+0x38>
    14e8:	08 95       	ret
		{
			
		}
	}
	
	else if(current_selected == &highscore_1){
    14ea:	8e 59       	subi	r24, 0x9E	; 158
    14ec:	93 40       	sbci	r25, 0x03	; 3
    14ee:	41 f4       	brne	.+16     	; 0x1500 <menu_function_selected+0x5c>
		print_highscore(SCOREBOARD_FLAPPY_BIRD);
    14f0:	80 e0       	ldi	r24, 0x00	; 0
    14f2:	ab d6       	rcall	.+3414   	; 0x224a <print_highscore>
		while (!(check_flag_left()||check_flag_right()))
    14f4:	33 d9       	rcall	.-3482   	; 0x75c <check_flag_left>
    14f6:	81 11       	cpse	r24, r1
    14f8:	03 c0       	rjmp	.+6      	; 0x1500 <menu_function_selected+0x5c>
    14fa:	39 d9       	rcall	.-3470   	; 0x76e <check_flag_right>
    14fc:	88 23       	and	r24, r24
    14fe:	d1 f3       	breq	.-12     	; 0x14f4 <menu_function_selected+0x50>
    1500:	08 95       	ret

00001502 <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
    1502:	89 e5       	ldi	r24, 0x59	; 89
    1504:	15 dd       	rcall	.-1494   	; 0xf30 <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
    1506:	87 34       	cpi	r24, 0x47	; 71
    1508:	91 05       	cpc	r25, r1
    150a:	14 f1       	brlt	.+68     	; 0x1550 <navigate_menu+0x4e>
    150c:	20 91 03 03 	lds	r18, 0x0303
    1510:	24 31       	cpi	r18, 0x14	; 20
    1512:	f4 f0       	brlt	.+60     	; 0x1550 <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1514:	e0 91 1e 03 	lds	r30, 0x031E
    1518:	f0 91 1f 03 	lds	r31, 0x031F
    151c:	82 81       	ldd	r24, Z+2	; 0x02
    151e:	93 81       	ldd	r25, Z+3	; 0x03
    1520:	01 97       	sbiw	r24, 0x01	; 1
    1522:	18 16       	cp	r1, r24
    1524:	19 06       	cpc	r1, r25
    1526:	8c f4       	brge	.+34     	; 0x154a <navigate_menu+0x48>
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    152c:	04 80       	ldd	r0, Z+4	; 0x04
    152e:	f5 81       	ldd	r31, Z+5	; 0x05
    1530:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	22 81       	ldd	r18, Z+2	; 0x02
    1536:	33 81       	ldd	r19, Z+3	; 0x03
    1538:	21 50       	subi	r18, 0x01	; 1
    153a:	31 09       	sbc	r19, r1
    153c:	82 17       	cp	r24, r18
    153e:	93 07       	cpc	r25, r19
    1540:	ac f3       	brlt	.-22     	; 0x152c <navigate_menu+0x2a>
    1542:	f0 93 1f 03 	sts	0x031F, r31
    1546:	e0 93 1e 03 	sts	0x031E, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
    154a:	10 92 03 03 	sts	0x0303, r1
    154e:	1d c0       	rjmp	.+58     	; 0x158a <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
    1550:	8a 3b       	cpi	r24, 0xBA	; 186
    1552:	2f ef       	ldi	r18, 0xFF	; 255
    1554:	92 07       	cpc	r25, r18
    1556:	8c f4       	brge	.+34     	; 0x157a <navigate_menu+0x78>
    1558:	20 91 03 03 	lds	r18, 0x0303
    155c:	24 31       	cpi	r18, 0x14	; 20
    155e:	6c f0       	brlt	.+26     	; 0x157a <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
    1560:	e0 91 1e 03 	lds	r30, 0x031E
    1564:	f0 91 1f 03 	lds	r31, 0x031F
    1568:	84 81       	ldd	r24, Z+4	; 0x04
    156a:	95 81       	ldd	r25, Z+5	; 0x05
    156c:	90 93 1f 03 	sts	0x031F, r25
    1570:	80 93 1e 03 	sts	0x031E, r24
		navigation_counter = 0;
    1574:	10 92 03 03 	sts	0x0303, r1
    1578:	08 c0       	rjmp	.+16     	; 0x158a <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    157a:	8b 5b       	subi	r24, 0xBB	; 187
    157c:	9f 4f       	sbci	r25, 0xFF	; 255
    157e:	8b 38       	cpi	r24, 0x8B	; 139
    1580:	91 05       	cpc	r25, r1
    1582:	18 f4       	brcc	.+6      	; 0x158a <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
    1584:	83 e1       	ldi	r24, 0x13	; 19
    1586:	80 93 03 03 	sts	0x0303, r24
	}
	if (check_flag_right())
    158a:	f1 d8       	rcall	.-3614   	; 0x76e <check_flag_right>
    158c:	88 23       	and	r24, r24
    158e:	99 f0       	breq	.+38     	; 0x15b6 <navigate_menu+0xb4>
	{
		if(current_selected->ptr_child != NULL){
    1590:	e0 91 1e 03 	lds	r30, 0x031E
    1594:	f0 91 1f 03 	lds	r31, 0x031F
    1598:	86 81       	ldd	r24, Z+6	; 0x06
    159a:	97 81       	ldd	r25, Z+7	; 0x07
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	49 f0       	breq	.+18     	; 0x15b2 <navigate_menu+0xb0>
			current_head = current_selected->ptr_child;
    15a0:	90 93 1d 03 	sts	0x031D, r25
    15a4:	80 93 1c 03 	sts	0x031C, r24
			current_selected = current_selected->ptr_child;
    15a8:	90 93 1f 03 	sts	0x031F, r25
    15ac:	80 93 1e 03 	sts	0x031E, r24
    15b0:	1b c0       	rjmp	.+54     	; 0x15e8 <navigate_menu+0xe6>
		}else{
			menu_function_selected();
    15b2:	78 df       	rcall	.-272    	; 0x14a4 <menu_function_selected>
    15b4:	19 c0       	rjmp	.+50     	; 0x15e8 <navigate_menu+0xe6>
		}
	}else if (check_flag_left()){
    15b6:	d2 d8       	rcall	.-3676   	; 0x75c <check_flag_left>
    15b8:	88 23       	and	r24, r24
    15ba:	b1 f0       	breq	.+44     	; 0x15e8 <navigate_menu+0xe6>
		if (current_selected->ptr_parent != NULL){
    15bc:	e0 91 1e 03 	lds	r30, 0x031E
    15c0:	f0 91 1f 03 	lds	r31, 0x031F
    15c4:	80 85       	ldd	r24, Z+8	; 0x08
    15c6:	91 85       	ldd	r25, Z+9	; 0x09
    15c8:	00 97       	sbiw	r24, 0x00	; 0
    15ca:	71 f0       	breq	.+28     	; 0x15e8 <navigate_menu+0xe6>
			current_head = current_head->ptr_parent;
    15cc:	e0 91 1c 03 	lds	r30, 0x031C
    15d0:	f0 91 1d 03 	lds	r31, 0x031D
    15d4:	20 85       	ldd	r18, Z+8	; 0x08
    15d6:	31 85       	ldd	r19, Z+9	; 0x09
    15d8:	30 93 1d 03 	sts	0x031D, r19
    15dc:	20 93 1c 03 	sts	0x031C, r18
			current_selected = current_selected->ptr_parent;
    15e0:	90 93 1f 03 	sts	0x031F, r25
    15e4:	80 93 1e 03 	sts	0x031E, r24
		}
	}
	return 0;
	
}
    15e8:	80 e0       	ldi	r24, 0x00	; 0
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	08 95       	ret

000015ee <menu_update>:
	current_selected = &mainmenu_start;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
    15ee:	0f 93       	push	r16
    15f0:	1f 93       	push	r17
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    15f6:	85 df       	rcall	.-246    	; 0x1502 <navigate_menu>
    15f8:	89 2b       	or	r24, r25
    15fa:	09 f0       	breq	.+2      	; 0x15fe <menu_update+0x10>
    15fc:	44 c0       	rjmp	.+136    	; 0x1686 <menu_update+0x98>
    15fe:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    1600:	8c 2f       	mov	r24, r28
    1602:	17 d4       	rcall	.+2094   	; 0x1e32 <sram_clear_line>
    1604:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    1606:	c7 30       	cpi	r28, 0x07	; 7
    1608:	d9 f7       	brne	.-10     	; 0x1600 <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    160a:	e0 91 1c 03 	lds	r30, 0x031C
    160e:	f0 91 1d 03 	lds	r31, 0x031D
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	18 16       	cp	r1, r24
    1618:	19 06       	cpc	r1, r25
    161a:	ac f5       	brge	.+106    	; 0x1686 <menu_update+0x98>
    161c:	c0 e0       	ldi	r28, 0x00	; 0
    161e:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1620:	10 e8       	ldi	r17, 0x80	; 128
    1622:	01 e8       	ldi	r16, 0x81	; 129
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    1624:	8c 2f       	mov	r24, r28
    1626:	33 d1       	rcall	.+614    	; 0x188e <oled_goto_line>
			oled_goto_column(0);
    1628:	80 e0       	ldi	r24, 0x00	; 0
    162a:	4c d1       	rcall	.+664    	; 0x18c4 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    162c:	e0 91 1c 03 	lds	r30, 0x031C
    1630:	f0 91 1d 03 	lds	r31, 0x031D
    1634:	60 81       	ld	r22, Z
    1636:	71 81       	ldd	r23, Z+1	; 0x01
    1638:	8e e3       	ldi	r24, 0x3E	; 62
    163a:	93 e0       	ldi	r25, 0x03	; 3
    163c:	0e 94 c1 14 	call	0x2982	; 0x2982 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1640:	20 91 1c 03 	lds	r18, 0x031C
    1644:	30 91 1d 03 	lds	r19, 0x031D
    1648:	80 91 1e 03 	lds	r24, 0x031E
    164c:	90 91 1f 03 	lds	r25, 0x031F
    1650:	28 17       	cp	r18, r24
    1652:	39 07       	cpc	r19, r25
    1654:	11 f4       	brne	.+4      	; 0x165a <menu_update+0x6c>
    1656:	80 2f       	mov	r24, r16
    1658:	01 c0       	rjmp	.+2      	; 0x165c <menu_update+0x6e>
    165a:	81 2f       	mov	r24, r17
    165c:	db d1       	rcall	.+950    	; 0x1a14 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    165e:	8e e3       	ldi	r24, 0x3E	; 62
    1660:	93 e0       	ldi	r25, 0x03	; 3
    1662:	21 d2       	rcall	.+1090   	; 0x1aa6 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    1664:	e0 91 1c 03 	lds	r30, 0x031C
    1668:	f0 91 1d 03 	lds	r31, 0x031D
    166c:	04 80       	ldd	r0, Z+4	; 0x04
    166e:	f5 81       	ldd	r31, Z+5	; 0x05
    1670:	e0 2d       	mov	r30, r0
    1672:	f0 93 1d 03 	sts	0x031D, r31
    1676:	e0 93 1c 03 	sts	0x031C, r30
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    167a:	21 96       	adiw	r28, 0x01	; 1
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	c8 17       	cp	r28, r24
    1682:	d9 07       	cpc	r29, r25
    1684:	7c f2       	brlt	.-98     	; 0x1624 <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    1686:	a0 d5       	rcall	.+2880   	; 0x21c8 <timer_check_flag>
    1688:	88 23       	and	r24, r24
    168a:	51 f0       	breq	.+20     	; 0x16a0 <menu_update+0xb2>
		navigation_counter++;
    168c:	80 91 03 03 	lds	r24, 0x0303
    1690:	8f 5f       	subi	r24, 0xFF	; 255
    1692:	80 93 03 03 	sts	0x0303, r24
		sram_update_oled();
    1696:	a3 d3       	rcall	.+1862   	; 0x1dde <sram_update_oled>
		timer_disable_flag();
    1698:	a0 d5       	rcall	.+2880   	; 0x21da <timer_disable_flag>
		sram_scroll_line(7,1);
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	87 e0       	ldi	r24, 0x07	; 7
    169e:	55 d4       	rcall	.+2218   	; 0x1f4a <sram_scroll_line>
	}
}
    16a0:	df 91       	pop	r29
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	08 95       	ret

000016aa <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
    16aa:	6d e3       	ldi	r22, 0x3D	; 61
    16ac:	89 e0       	ldi	r24, 0x09	; 9
    16ae:	57 d5       	rcall	.+2734   	; 0x215e <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
    16b0:	61 e0       	ldi	r22, 0x01	; 1
    16b2:	89 e0       	ldi	r24, 0x09	; 9
    16b4:	61 d3       	rcall	.+1730   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+15,y-60);
    16b6:	61 e0       	ldi	r22, 0x01	; 1
    16b8:	87 e2       	ldi	r24, 0x27	; 39
    16ba:	5e d3       	rcall	.+1724   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+15,y-48);
    16bc:	6d e0       	ldi	r22, 0x0D	; 13
    16be:	87 e2       	ldi	r24, 0x27	; 39
    16c0:	5b d3       	rcall	.+1718   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-6,y-48);
    16c2:	6d e0       	ldi	r22, 0x0D	; 13
    16c4:	82 e1       	ldi	r24, 0x12	; 18
    16c6:	58 d3       	rcall	.+1712   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-6,y-12);
    16c8:	61 e3       	ldi	r22, 0x31	; 49
    16ca:	82 e1       	ldi	r24, 0x12	; 18
    16cc:	55 d3       	rcall	.+1706   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+6,y-12);
    16ce:	61 e3       	ldi	r22, 0x31	; 49
    16d0:	8e e1       	ldi	r24, 0x1E	; 30
    16d2:	52 d3       	rcall	.+1700   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+6,y-36);
    16d4:	69 e1       	ldi	r22, 0x19	; 25
    16d6:	8e e1       	ldi	r24, 0x1E	; 30
    16d8:	4f d3       	rcall	.+1694   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+15,y-36);
    16da:	69 e1       	ldi	r22, 0x19	; 25
    16dc:	87 e2       	ldi	r24, 0x27	; 39
    16de:	4c d3       	rcall	.+1688   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+15,y);
    16e0:	6d e3       	ldi	r22, 0x3D	; 61
    16e2:	87 e2       	ldi	r24, 0x27	; 39
    16e4:	49 d3       	rcall	.+1682   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
    16e6:	6d e3       	ldi	r22, 0x3D	; 61
    16e8:	89 e0       	ldi	r24, 0x09	; 9
    16ea:	46 d3       	rcall	.+1676   	; 0x1d78 <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    16ec:	21 e0       	ldi	r18, 0x01	; 1
    16ee:	45 e4       	ldi	r20, 0x45	; 69
    16f0:	6d e3       	ldi	r22, 0x3D	; 61
    16f2:	8b e3       	ldi	r24, 0x3B	; 59
    16f4:	39 d5       	rcall	.+2674   	; 0x2168 <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
    16f6:	61 e0       	ldi	r22, 0x01	; 1
    16f8:	87 e7       	ldi	r24, 0x77	; 119
    16fa:	31 d5       	rcall	.+2658   	; 0x215e <sram_set_point>
	sram_draw_line(x-15,y-60);
    16fc:	61 e0       	ldi	r22, 0x01	; 1
    16fe:	89 e5       	ldi	r24, 0x59	; 89
    1700:	3b d3       	rcall	.+1654   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-12,y-48);
    1702:	6d e0       	ldi	r22, 0x0D	; 13
    1704:	8c e5       	ldi	r24, 0x5C	; 92
    1706:	38 d3       	rcall	.+1648   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+6,y-48);
    1708:	6d e0       	ldi	r22, 0x0D	; 13
    170a:	8e e6       	ldi	r24, 0x6E	; 110
    170c:	35 d3       	rcall	.+1642   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+3,y-36);
    170e:	69 e1       	ldi	r22, 0x19	; 25
    1710:	8b e6       	ldi	r24, 0x6B	; 107
    1712:	32 d3       	rcall	.+1636   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-9,y-36);
    1714:	69 e1       	ldi	r22, 0x19	; 25
    1716:	8f e5       	ldi	r24, 0x5F	; 95
    1718:	2f d3       	rcall	.+1630   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-6,y-24);
    171a:	65 e2       	ldi	r22, 0x25	; 37
    171c:	82 e6       	ldi	r24, 0x62	; 98
    171e:	2c d3       	rcall	.+1624   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x,y-24);
    1720:	65 e2       	ldi	r22, 0x25	; 37
    1722:	88 e6       	ldi	r24, 0x68	; 104
    1724:	29 d3       	rcall	.+1618   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x-3,y-12);
    1726:	61 e3       	ldi	r22, 0x31	; 49
    1728:	85 e6       	ldi	r24, 0x65	; 101
    172a:	26 d3       	rcall	.+1612   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x,y);
    172c:	6d e3       	ldi	r22, 0x3D	; 61
    172e:	88 e6       	ldi	r24, 0x68	; 104
    1730:	23 d3       	rcall	.+1606   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
    1732:	61 e0       	ldi	r22, 0x01	; 1
    1734:	87 e7       	ldi	r24, 0x77	; 119
    1736:	20 d3       	rcall	.+1600   	; 0x1d78 <sram_draw_line>
	
	sram_update_oled();
    1738:	52 c3       	rjmp	.+1700   	; 0x1dde <sram_update_oled>
    173a:	08 95       	ret

0000173c <init_all>:
    }
    
}

void init_all(void){
	cli();
    173c:	f8 94       	cli
	init_UART();
    173e:	0e 94 63 03 	call	0x6c6	; 0x6c6 <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
    1742:	85 b7       	in	r24, 0x35	; 53
    1744:	80 68       	ori	r24, 0x80	; 128
    1746:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
    1748:	80 b7       	in	r24, 0x30	; 48
    174a:	80 62       	ori	r24, 0x20	; 32
    174c:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    174e:	d7 d0       	rcall	.+430    	; 0x18fe <oled_ini>
	sram_init();
    1750:	4f d3       	rcall	.+1694   	; 0x1df0 <sram_init>
	bootscreen();
    1752:	ab df       	rcall	.-170    	; 0x16aa <bootscreen>
	initialize_menu();
    1754:	ab dc       	rcall	.-1706   	; 0x10ac <initialize_menu>
	
	initialize_control_input();
    1756:	90 dc       	rcall	.-1760   	; 0x1078 <initialize_control_input>
	
	initalize_interrupts();
    1758:	0e 94 95 03 	call	0x72a	; 0x72a <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    175c:	8c e3       	ldi	r24, 0x3C	; 60
    175e:	20 d5       	rcall	.+2624   	; 0x21a0 <initialize_timer>
	
	CAN_initialize();
    1760:	0e 94 6c 02 	call	0x4d8	; 0x4d8 <CAN_initialize>
	
	sei();//enable interrupts
    1764:	78 94       	sei
    1766:	08 95       	ret

00001768 <main>:
#include "scoreboard.h"


#include "../../common_library/uart.h" //remove
int main(void)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
    1770:	28 97       	sbiw	r28, 0x08	; 8
    1772:	0f b6       	in	r0, 0x3f	; 63
    1774:	f8 94       	cli
    1776:	de bf       	out	0x3e, r29	; 62
    1778:	0f be       	out	0x3f, r0	; 63
    177a:	cd bf       	out	0x3d, r28	; 61
	//scoreboard_init();
	init_all();
    177c:	df df       	rcall	.-66     	; 0x173c <init_all>
	
	//sram_init();
	//main_2048();
	
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
    177e:	88 e0       	ldi	r24, 0x08	; 8
    1780:	e6 e5       	ldi	r30, 0x56	; 86
    1782:	f1 e0       	ldi	r31, 0x01	; 1
    1784:	de 01       	movw	r26, r28
    1786:	11 96       	adiw	r26, 0x01	; 1
    1788:	01 90       	ld	r0, Z+
    178a:	0d 92       	st	X+, r0
    178c:	8a 95       	dec	r24
    178e:	e1 f7       	brne	.-8      	; 0x1788 <main+0x20>
			
			controller = read_control_input('X');
			
			if(controller != (int8_t)data[0] || 1){
				data[0] = controller;
				printf("Sending Can: \t%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\n", (int8_t)data[0], (int8_t)data[1], (int8_t)data[2], (int8_t)data[3], (int8_t)data[4], (int8_t)data[5], (int8_t)data[6], (int8_t)data[7]);
    1790:	03 e9       	ldi	r16, 0x93	; 147
    1792:	12 e0       	ldi	r17, 0x02	; 2
    uint8_t sendCAN = 1;
	int8_t controller = 0;
    while(1){
	    if(sendCAN){
			
			controller = read_control_input('X');
    1794:	88 e5       	ldi	r24, 0x58	; 88
    1796:	cc db       	rcall	.-2152   	; 0xf30 <read_control_input>
			
			if(controller != (int8_t)data[0] || 1){
				data[0] = controller;
    1798:	89 83       	std	Y+1, r24	; 0x01
				printf("Sending Can: \t%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\n", (int8_t)data[0], (int8_t)data[1], (int8_t)data[2], (int8_t)data[3], (int8_t)data[4], (int8_t)data[5], (int8_t)data[6], (int8_t)data[7]);
    179a:	98 85       	ldd	r25, Y+8	; 0x08
    179c:	29 2f       	mov	r18, r25
    179e:	33 27       	eor	r19, r19
    17a0:	27 fd       	sbrc	r18, 7
    17a2:	30 95       	com	r19
    17a4:	3f 93       	push	r19
    17a6:	9f 93       	push	r25
    17a8:	9f 81       	ldd	r25, Y+7	; 0x07
    17aa:	29 2f       	mov	r18, r25
    17ac:	33 27       	eor	r19, r19
    17ae:	27 fd       	sbrc	r18, 7
    17b0:	30 95       	com	r19
    17b2:	3f 93       	push	r19
    17b4:	9f 93       	push	r25
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	29 2f       	mov	r18, r25
    17ba:	33 27       	eor	r19, r19
    17bc:	27 fd       	sbrc	r18, 7
    17be:	30 95       	com	r19
    17c0:	3f 93       	push	r19
    17c2:	9f 93       	push	r25
    17c4:	9d 81       	ldd	r25, Y+5	; 0x05
    17c6:	29 2f       	mov	r18, r25
    17c8:	33 27       	eor	r19, r19
    17ca:	27 fd       	sbrc	r18, 7
    17cc:	30 95       	com	r19
    17ce:	3f 93       	push	r19
    17d0:	9f 93       	push	r25
    17d2:	9c 81       	ldd	r25, Y+4	; 0x04
    17d4:	29 2f       	mov	r18, r25
    17d6:	33 27       	eor	r19, r19
    17d8:	27 fd       	sbrc	r18, 7
    17da:	30 95       	com	r19
    17dc:	3f 93       	push	r19
    17de:	9f 93       	push	r25
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	29 2f       	mov	r18, r25
    17e4:	33 27       	eor	r19, r19
    17e6:	27 fd       	sbrc	r18, 7
    17e8:	30 95       	com	r19
    17ea:	3f 93       	push	r19
    17ec:	9f 93       	push	r25
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	29 2f       	mov	r18, r25
    17f2:	33 27       	eor	r19, r19
    17f4:	27 fd       	sbrc	r18, 7
    17f6:	30 95       	com	r19
    17f8:	3f 93       	push	r19
    17fa:	9f 93       	push	r25
    17fc:	28 2f       	mov	r18, r24
    17fe:	33 27       	eor	r19, r19
    1800:	27 fd       	sbrc	r18, 7
    1802:	30 95       	com	r19
    1804:	3f 93       	push	r19
    1806:	8f 93       	push	r24
    1808:	1f 93       	push	r17
    180a:	0f 93       	push	r16
    180c:	0e 94 12 15 	call	0x2a24	; 0x2a24 <printf>
				CAN_message_send(data,0);
    1810:	60 e0       	ldi	r22, 0x00	; 0
    1812:	ce 01       	movw	r24, r28
    1814:	01 96       	adiw	r24, 0x01	; 1
    1816:	0e 94 e7 02 	call	0x5ce	; 0x5ce <CAN_message_send>
			//if (CAN_data_receive())
			//{
			//	
			//}		    
	    }
		menu_update();
    181a:	e9 de       	rcall	.-558    	; 0x15ee <menu_update>
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	b6 cf       	rjmp	.-148    	; 0x1794 <main+0x2c>

00001828 <write_c>:
void oled_goto_column(uint8_t column){
	col = column%128;
}
void oled_pos(uint8_t row,uint8_t column){
	oled_goto_column(column);
	oled_goto_line(row);
    1828:	e0 91 52 01 	lds	r30, 0x0152
    182c:	f0 91 53 01 	lds	r31, 0x0153
    1830:	80 83       	st	Z, r24
    1832:	08 95       	ret

00001834 <write_d>:
    1834:	e0 91 50 01 	lds	r30, 0x0150
    1838:	f0 91 51 01 	lds	r31, 0x0151
    183c:	80 83       	st	Z, r24
    183e:	08 95       	ret

00001840 <oled_home>:
    1840:	10 92 b3 03 	sts	0x03B3, r1
    1844:	10 92 b2 03 	sts	0x03B2, r1
    1848:	e0 91 52 01 	lds	r30, 0x0152
    184c:	f0 91 53 01 	lds	r31, 0x0153
    1850:	81 e2       	ldi	r24, 0x21	; 33
    1852:	80 83       	st	Z, r24
    1854:	e0 91 52 01 	lds	r30, 0x0152
    1858:	f0 91 53 01 	lds	r31, 0x0153
    185c:	10 82       	st	Z, r1
    185e:	e0 91 52 01 	lds	r30, 0x0152
    1862:	f0 91 53 01 	lds	r31, 0x0153
    1866:	8f e7       	ldi	r24, 0x7F	; 127
    1868:	80 83       	st	Z, r24
    186a:	e0 91 52 01 	lds	r30, 0x0152
    186e:	f0 91 53 01 	lds	r31, 0x0153
    1872:	82 e2       	ldi	r24, 0x22	; 34
    1874:	80 83       	st	Z, r24
    1876:	e0 91 52 01 	lds	r30, 0x0152
    187a:	f0 91 53 01 	lds	r31, 0x0153
    187e:	10 82       	st	Z, r1
    1880:	e0 91 52 01 	lds	r30, 0x0152
    1884:	f0 91 53 01 	lds	r31, 0x0153
    1888:	87 e0       	ldi	r24, 0x07	; 7
    188a:	80 83       	st	Z, r24
    188c:	08 95       	ret

0000188e <oled_goto_line>:
    188e:	cf 93       	push	r28
    1890:	c8 2f       	mov	r28, r24
    1892:	d6 df       	rcall	.-84     	; 0x1840 <oled_home>
    1894:	c0 93 b3 03 	sts	0x03B3, r28
    1898:	8c 2f       	mov	r24, r28
    189a:	87 70       	andi	r24, 0x07	; 7
    189c:	89 f0       	breq	.+34     	; 0x18c0 <oled_goto_line+0x32>
    189e:	e0 91 52 01 	lds	r30, 0x0152
    18a2:	f0 91 53 01 	lds	r31, 0x0153
    18a6:	10 82       	st	Z, r1
    18a8:	e0 91 52 01 	lds	r30, 0x0152
    18ac:	f0 91 53 01 	lds	r31, 0x0153
    18b0:	80 e1       	ldi	r24, 0x10	; 16
    18b2:	80 83       	st	Z, r24
    18b4:	c0 6b       	ori	r28, 0xB0	; 176
    18b6:	e0 91 52 01 	lds	r30, 0x0152
    18ba:	f0 91 53 01 	lds	r31, 0x0153
    18be:	c0 83       	st	Z, r28
    18c0:	cf 91       	pop	r28
    18c2:	08 95       	ret

000018c4 <oled_goto_column>:
    18c4:	8f 77       	andi	r24, 0x7F	; 127
    18c6:	80 93 b2 03 	sts	0x03B2, r24
    18ca:	08 95       	ret

000018cc <oled_clear_line>:
}

void oled_clear_line(uint8_t line){
    18cc:	cf 93       	push	r28
    18ce:	c8 2f       	mov	r28, r24
	oled_goto_line(line);
    18d0:	de df       	rcall	.-68     	; 0x188e <oled_goto_line>
	if(line < 8){
    18d2:	c8 30       	cpi	r28, 0x08	; 8
    18d4:	48 f4       	brcc	.+18     	; 0x18e8 <oled_clear_line+0x1c>
    18d6:	80 e0       	ldi	r24, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    18d8:	e0 91 50 01 	lds	r30, 0x0150
    18dc:	f0 91 51 01 	lds	r31, 0x0151
    18e0:	10 82       	st	Z, r1
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	if(line < 8){
		for(uint8_t i = 0; i < 128; i++){
    18e2:	8f 5f       	subi	r24, 0xFF	; 255
    18e4:	80 38       	cpi	r24, 0x80	; 128
    18e6:	c1 f7       	brne	.-16     	; 0x18d8 <oled_clear_line+0xc>
			write_d(0b00000000);
		}
	}
    18e8:	cf 91       	pop	r28
    18ea:	08 95       	ret

000018ec <oled_reset>:
	oled_home();
}


void oled_reset(void)
{		
    18ec:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8;i++){
    18ee:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(i);
    18f0:	8c 2f       	mov	r24, r28
    18f2:	ec df       	rcall	.-40     	; 0x18cc <oled_clear_line>
}


void oled_reset(void)
{		
	for(uint8_t i = 0; i < 8;i++){
    18f4:	cf 5f       	subi	r28, 0xFF	; 255
    18f6:	c8 30       	cpi	r28, 0x08	; 8
    18f8:	d9 f7       	brne	.-10     	; 0x18f0 <oled_reset+0x4>
		oled_clear_line(i);
	}
}
    18fa:	cf 91       	pop	r28
    18fc:	08 95       	ret

000018fe <oled_ini>:
	
}
void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    18fe:	85 b7       	in	r24, 0x35	; 53
    1900:	80 68       	ori	r24, 0x80	; 128
    1902:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1904:	80 b7       	in	r24, 0x30	; 48
    1906:	80 62       	ori	r24, 0x20	; 32
    1908:	80 bf       	out	0x30, r24	; 48

uint8_t page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    190a:	e0 91 52 01 	lds	r30, 0x0152
    190e:	f0 91 53 01 	lds	r31, 0x0153
    1912:	8e ea       	ldi	r24, 0xAE	; 174
    1914:	80 83       	st	Z, r24
    1916:	e0 91 52 01 	lds	r30, 0x0152
    191a:	f0 91 53 01 	lds	r31, 0x0153
    191e:	81 ea       	ldi	r24, 0xA1	; 161
    1920:	80 83       	st	Z, r24
    1922:	e0 91 52 01 	lds	r30, 0x0152
    1926:	f0 91 53 01 	lds	r31, 0x0153
    192a:	8a ed       	ldi	r24, 0xDA	; 218
    192c:	80 83       	st	Z, r24
    192e:	e0 91 52 01 	lds	r30, 0x0152
    1932:	f0 91 53 01 	lds	r31, 0x0153
    1936:	82 e1       	ldi	r24, 0x12	; 18
    1938:	80 83       	st	Z, r24
    193a:	e0 91 52 01 	lds	r30, 0x0152
    193e:	f0 91 53 01 	lds	r31, 0x0153
    1942:	88 ec       	ldi	r24, 0xC8	; 200
    1944:	80 83       	st	Z, r24
    1946:	e0 91 52 01 	lds	r30, 0x0152
    194a:	f0 91 53 01 	lds	r31, 0x0153
    194e:	88 ea       	ldi	r24, 0xA8	; 168
    1950:	80 83       	st	Z, r24
    1952:	e0 91 52 01 	lds	r30, 0x0152
    1956:	f0 91 53 01 	lds	r31, 0x0153
    195a:	8f e3       	ldi	r24, 0x3F	; 63
    195c:	80 83       	st	Z, r24
    195e:	e0 91 52 01 	lds	r30, 0x0152
    1962:	f0 91 53 01 	lds	r31, 0x0153
    1966:	85 ed       	ldi	r24, 0xD5	; 213
    1968:	80 83       	st	Z, r24
    196a:	e0 91 52 01 	lds	r30, 0x0152
    196e:	f0 91 53 01 	lds	r31, 0x0153
    1972:	80 e8       	ldi	r24, 0x80	; 128
    1974:	80 83       	st	Z, r24
    1976:	e0 91 52 01 	lds	r30, 0x0152
    197a:	f0 91 53 01 	lds	r31, 0x0153
    197e:	81 e8       	ldi	r24, 0x81	; 129
    1980:	80 83       	st	Z, r24
    1982:	e0 91 52 01 	lds	r30, 0x0152
    1986:	f0 91 53 01 	lds	r31, 0x0153
    198a:	80 e5       	ldi	r24, 0x50	; 80
    198c:	80 83       	st	Z, r24
    198e:	e0 91 52 01 	lds	r30, 0x0152
    1992:	f0 91 53 01 	lds	r31, 0x0153
    1996:	89 ed       	ldi	r24, 0xD9	; 217
    1998:	80 83       	st	Z, r24
    199a:	e0 91 52 01 	lds	r30, 0x0152
    199e:	f0 91 53 01 	lds	r31, 0x0153
    19a2:	81 e2       	ldi	r24, 0x21	; 33
    19a4:	80 83       	st	Z, r24
    19a6:	e0 91 52 01 	lds	r30, 0x0152
    19aa:	f0 91 53 01 	lds	r31, 0x0153
    19ae:	80 e2       	ldi	r24, 0x20	; 32
    19b0:	80 83       	st	Z, r24
    19b2:	e0 91 52 01 	lds	r30, 0x0152
    19b6:	f0 91 53 01 	lds	r31, 0x0153
    19ba:	10 82       	st	Z, r1
    19bc:	e0 91 52 01 	lds	r30, 0x0152
    19c0:	f0 91 53 01 	lds	r31, 0x0153
    19c4:	8b ed       	ldi	r24, 0xDB	; 219
    19c6:	80 83       	st	Z, r24
    19c8:	e0 91 52 01 	lds	r30, 0x0152
    19cc:	f0 91 53 01 	lds	r31, 0x0153
    19d0:	80 e3       	ldi	r24, 0x30	; 48
    19d2:	80 83       	st	Z, r24
    19d4:	e0 91 52 01 	lds	r30, 0x0152
    19d8:	f0 91 53 01 	lds	r31, 0x0153
    19dc:	8d ea       	ldi	r24, 0xAD	; 173
    19de:	80 83       	st	Z, r24
    19e0:	e0 91 52 01 	lds	r30, 0x0152
    19e4:	f0 91 53 01 	lds	r31, 0x0153
    19e8:	10 82       	st	Z, r1
    19ea:	e0 91 52 01 	lds	r30, 0x0152
    19ee:	f0 91 53 01 	lds	r31, 0x0153
    19f2:	84 ea       	ldi	r24, 0xA4	; 164
    19f4:	80 83       	st	Z, r24
    19f6:	e0 91 52 01 	lds	r30, 0x0152
    19fa:	f0 91 53 01 	lds	r31, 0x0153
    19fe:	86 ea       	ldi	r24, 0xA6	; 166
    1a00:	80 83       	st	Z, r24
    1a02:	e0 91 52 01 	lds	r30, 0x0152
    1a06:	f0 91 53 01 	lds	r31, 0x0153
    1a0a:	8f ea       	ldi	r24, 0xAF	; 175
    1a0c:	80 83       	st	Z, r24
	write_c(0x00);
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	oled_reset();
    1a0e:	6e df       	rcall	.-292    	; 0x18ec <oled_reset>
	oled_home();
    1a10:	17 cf       	rjmp	.-466    	; 0x1840 <oled_home>
    1a12:	08 95       	ret

00001a14 <sram_write_char>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
    1a14:	8a 30       	cpi	r24, 0x0A	; 10
    1a16:	61 f4       	brne	.+24     	; 0x1a30 <sram_write_char+0x1c>
    1a18:	80 91 b3 03 	lds	r24, 0x03B3
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	01 96       	adiw	r24, 0x01	; 1
    1a20:	87 70       	andi	r24, 0x07	; 7
    1a22:	90 78       	andi	r25, 0x80	; 128
    1a24:	80 93 b3 03 	sts	0x03B3, r24
    1a28:	10 92 b2 03 	sts	0x03B2, r1
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	08 95       	ret
    1a30:	88 23       	and	r24, r24
    1a32:	39 f1       	breq	.+78     	; 0x1a82 <sram_write_char+0x6e>
    1a34:	e8 2f       	mov	r30, r24
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	ee 0f       	add	r30, r30
    1a3a:	ff 1f       	adc	r31, r31
    1a3c:	ee 0f       	add	r30, r30
    1a3e:	ff 1f       	adc	r31, r31
    1a40:	ee 0f       	add	r30, r30
    1a42:	ff 1f       	adc	r31, r31
    1a44:	e6 5d       	subi	r30, 0xD6	; 214
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	28 e0       	ldi	r18, 0x08	; 8
    1a4a:	80 91 b3 03 	lds	r24, 0x03B3
    1a4e:	a0 91 b2 03 	lds	r26, 0x03B2
    1a52:	b0 e0       	ldi	r27, 0x00	; 0
    1a54:	90 e8       	ldi	r25, 0x80	; 128
    1a56:	89 9f       	mul	r24, r25
    1a58:	a0 0d       	add	r26, r0
    1a5a:	b1 1d       	adc	r27, r1
    1a5c:	11 24       	eor	r1, r1
    1a5e:	80 91 54 01 	lds	r24, 0x0154
    1a62:	90 91 55 01 	lds	r25, 0x0155
    1a66:	a8 0f       	add	r26, r24
    1a68:	b9 1f       	adc	r27, r25
    1a6a:	84 91       	lpm	r24, Z
    1a6c:	8c 93       	st	X, r24
    1a6e:	80 91 b2 03 	lds	r24, 0x03B2
    1a72:	8f 5f       	subi	r24, 0xFF	; 255
    1a74:	80 93 b2 03 	sts	0x03B2, r24
    1a78:	21 50       	subi	r18, 0x01	; 1
    1a7a:	31 96       	adiw	r30, 0x01	; 1
    1a7c:	21 11       	cpse	r18, r1
    1a7e:	e5 cf       	rjmp	.-54     	; 0x1a4a <sram_write_char+0x36>
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <sram_write_char+0x72>
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	08 95       	ret
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	08 95       	ret

00001a8a <sram_goto_line>:
    1a8a:	cf 93       	push	r28
    1a8c:	c8 2f       	mov	r28, r24
    1a8e:	ff de       	rcall	.-514    	; 0x188e <oled_goto_line>
    1a90:	c0 93 b3 03 	sts	0x03B3, r28
    1a94:	cf 91       	pop	r28
    1a96:	08 95       	ret

00001a98 <sram_goto_column>:
    1a98:	cf 93       	push	r28
    1a9a:	c8 2f       	mov	r28, r24
    1a9c:	13 df       	rcall	.-474    	; 0x18c4 <oled_goto_column>
    1a9e:	c0 93 b2 03 	sts	0x03B2, r28
    1aa2:	cf 91       	pop	r28
    1aa4:	08 95       	ret

00001aa6 <sram_write_string>:
    1aa6:	1f 93       	push	r17
    1aa8:	cf 93       	push	r28
    1aaa:	df 93       	push	r29
    1aac:	ec 01       	movw	r28, r24
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	11 e0       	ldi	r17, 0x01	; 1
    1ab2:	18 0f       	add	r17, r24
    1ab4:	fe 01       	movw	r30, r28
    1ab6:	e8 0f       	add	r30, r24
    1ab8:	f1 1d       	adc	r31, r1
    1aba:	80 81       	ld	r24, Z
    1abc:	ab df       	rcall	.-170    	; 0x1a14 <sram_write_char>
    1abe:	88 23       	and	r24, r24
    1ac0:	11 f0       	breq	.+4      	; 0x1ac6 <sram_write_string+0x20>
    1ac2:	81 2f       	mov	r24, r17
    1ac4:	f5 cf       	rjmp	.-22     	; 0x1ab0 <sram_write_string+0xa>
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	08 95       	ret

00001ace <sram_write_int>:
    1ace:	cf 93       	push	r28
    1ad0:	18 16       	cp	r1, r24
    1ad2:	19 06       	cpc	r1, r25
    1ad4:	4c f4       	brge	.+18     	; 0x1ae8 <sram_write_int+0x1a>
    1ad6:	6a e0       	ldi	r22, 0x0A	; 10
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	60 d6       	rcall	.+3264   	; 0x279c <__divmodhi4>
    1adc:	c8 2f       	mov	r28, r24
    1ade:	cb 01       	movw	r24, r22
    1ae0:	f6 df       	rcall	.-20     	; 0x1ace <sram_write_int>
    1ae2:	80 e3       	ldi	r24, 0x30	; 48
    1ae4:	8c 0f       	add	r24, r28
    1ae6:	96 df       	rcall	.-212    	; 0x1a14 <sram_write_char>
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <sram_read>:
    1aec:	87 70       	andi	r24, 0x07	; 7
    1aee:	6f 77       	andi	r22, 0x7F	; 127
    1af0:	e6 2f       	mov	r30, r22
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	90 e8       	ldi	r25, 0x80	; 128
    1af6:	89 9f       	mul	r24, r25
    1af8:	e0 0d       	add	r30, r0
    1afa:	f1 1d       	adc	r31, r1
    1afc:	11 24       	eor	r1, r1
    1afe:	80 91 54 01 	lds	r24, 0x0154
    1b02:	90 91 55 01 	lds	r25, 0x0155
    1b06:	e8 0f       	add	r30, r24
    1b08:	f9 1f       	adc	r31, r25
    1b0a:	80 81       	ld	r24, Z
    1b0c:	08 95       	ret

00001b0e <sram_write_and>:
    1b0e:	87 70       	andi	r24, 0x07	; 7
    1b10:	6f 77       	andi	r22, 0x7F	; 127
    1b12:	e6 2f       	mov	r30, r22
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	90 e8       	ldi	r25, 0x80	; 128
    1b18:	89 9f       	mul	r24, r25
    1b1a:	e0 0d       	add	r30, r0
    1b1c:	f1 1d       	adc	r31, r1
    1b1e:	11 24       	eor	r1, r1
    1b20:	80 91 54 01 	lds	r24, 0x0154
    1b24:	90 91 55 01 	lds	r25, 0x0155
    1b28:	e8 0f       	add	r30, r24
    1b2a:	f9 1f       	adc	r31, r25
    1b2c:	80 81       	ld	r24, Z
    1b2e:	48 23       	and	r20, r24
    1b30:	40 83       	st	Z, r20
    1b32:	08 95       	ret

00001b34 <sram_write_or>:
    1b34:	87 70       	andi	r24, 0x07	; 7
    1b36:	6f 77       	andi	r22, 0x7F	; 127
    1b38:	e6 2f       	mov	r30, r22
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	90 e8       	ldi	r25, 0x80	; 128
    1b3e:	89 9f       	mul	r24, r25
    1b40:	e0 0d       	add	r30, r0
    1b42:	f1 1d       	adc	r31, r1
    1b44:	11 24       	eor	r1, r1
    1b46:	80 91 54 01 	lds	r24, 0x0154
    1b4a:	90 91 55 01 	lds	r25, 0x0155
    1b4e:	e8 0f       	add	r30, r24
    1b50:	f9 1f       	adc	r31, r25
    1b52:	80 81       	ld	r24, Z
    1b54:	48 2b       	or	r20, r24
    1b56:	40 83       	st	Z, r20
    1b58:	08 95       	ret

00001b5a <sram_pixel>:
    1b5a:	96 2f       	mov	r25, r22
    1b5c:	88 23       	and	r24, r24
    1b5e:	ac f0       	brlt	.+42     	; 0x1b8a <sram_pixel+0x30>
    1b60:	60 34       	cpi	r22, 0x40	; 64
    1b62:	a8 f4       	brcc	.+42     	; 0x1b8e <sram_pixel+0x34>
    1b64:	46 2f       	mov	r20, r22
    1b66:	47 70       	andi	r20, 0x07	; 7
    1b68:	21 e0       	ldi	r18, 0x01	; 1
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	b9 01       	movw	r22, r18
    1b6e:	02 c0       	rjmp	.+4      	; 0x1b74 <sram_pixel+0x1a>
    1b70:	66 0f       	add	r22, r22
    1b72:	77 1f       	adc	r23, r23
    1b74:	4a 95       	dec	r20
    1b76:	e2 f7       	brpl	.-8      	; 0x1b70 <sram_pixel+0x16>
    1b78:	ab 01       	movw	r20, r22
    1b7a:	68 2f       	mov	r22, r24
    1b7c:	89 2f       	mov	r24, r25
    1b7e:	86 95       	lsr	r24
    1b80:	86 95       	lsr	r24
    1b82:	86 95       	lsr	r24
    1b84:	d7 df       	rcall	.-82     	; 0x1b34 <sram_write_or>
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	08 95       	ret
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	08 95       	ret
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	08 95       	ret

00001b92 <sram_draw_new_line>:
    1b92:	2f 92       	push	r2
    1b94:	3f 92       	push	r3
    1b96:	4f 92       	push	r4
    1b98:	5f 92       	push	r5
    1b9a:	6f 92       	push	r6
    1b9c:	7f 92       	push	r7
    1b9e:	8f 92       	push	r8
    1ba0:	9f 92       	push	r9
    1ba2:	af 92       	push	r10
    1ba4:	bf 92       	push	r11
    1ba6:	cf 92       	push	r12
    1ba8:	df 92       	push	r13
    1baa:	ef 92       	push	r14
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	2c 97       	sbiw	r28, 0x0c	; 12
    1bbc:	0f b6       	in	r0, 0x3f	; 63
    1bbe:	f8 94       	cli
    1bc0:	de bf       	out	0x3e, r29	; 62
    1bc2:	0f be       	out	0x3f, r0	; 63
    1bc4:	cd bf       	out	0x3d, r28	; 61
    1bc6:	38 2e       	mov	r3, r24
    1bc8:	26 2e       	mov	r2, r22
    1bca:	04 2f       	mov	r16, r20
    1bcc:	12 2f       	mov	r17, r18
    1bce:	48 17       	cp	r20, r24
    1bd0:	08 f4       	brcc	.+2      	; 0x1bd4 <sram_draw_new_line+0x42>
    1bd2:	90 c0       	rjmp	.+288    	; 0x1cf4 <sram_draw_new_line+0x162>
    1bd4:	84 17       	cp	r24, r20
    1bd6:	09 f4       	brne	.+2      	; 0x1bda <sram_draw_new_line+0x48>
    1bd8:	79 c0       	rjmp	.+242    	; 0x1ccc <sram_draw_new_line+0x13a>
    1bda:	86 2e       	mov	r8, r22
    1bdc:	91 2c       	mov	r9, r1
    1bde:	a4 2e       	mov	r10, r20
    1be0:	b1 2c       	mov	r11, r1
    1be2:	48 2e       	mov	r4, r24
    1be4:	51 2c       	mov	r5, r1
    1be6:	62 2f       	mov	r22, r18
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	68 19       	sub	r22, r8
    1bec:	79 09       	sbc	r23, r9
    1bee:	88 27       	eor	r24, r24
    1bf0:	77 fd       	sbrc	r23, 7
    1bf2:	80 95       	com	r24
    1bf4:	98 2f       	mov	r25, r24
    1bf6:	bb d4       	rcall	.+2422   	; 0x256e <__floatsisf>
    1bf8:	6b 01       	movw	r12, r22
    1bfa:	7c 01       	movw	r14, r24
    1bfc:	b5 01       	movw	r22, r10
    1bfe:	64 19       	sub	r22, r4
    1c00:	75 09       	sbc	r23, r5
    1c02:	88 27       	eor	r24, r24
    1c04:	77 fd       	sbrc	r23, 7
    1c06:	80 95       	com	r24
    1c08:	98 2f       	mov	r25, r24
    1c0a:	b1 d4       	rcall	.+2402   	; 0x256e <__floatsisf>
    1c0c:	9b 01       	movw	r18, r22
    1c0e:	ac 01       	movw	r20, r24
    1c10:	c7 01       	movw	r24, r14
    1c12:	b6 01       	movw	r22, r12
    1c14:	11 d4       	rcall	.+2082   	; 0x2438 <__divsf3>
    1c16:	6d 83       	std	Y+5, r22	; 0x05
    1c18:	7e 83       	std	Y+6, r23	; 0x06
    1c1a:	8f 83       	std	Y+7, r24	; 0x07
    1c1c:	98 87       	std	Y+8, r25	; 0x08
    1c1e:	63 2d       	mov	r22, r3
    1c20:	70 e0       	ldi	r23, 0x00	; 0
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	a1 d4       	rcall	.+2370   	; 0x256a <__floatunsisf>
    1c28:	6b 01       	movw	r12, r22
    1c2a:	7c 01       	movw	r14, r24
    1c2c:	b5 01       	movw	r22, r10
    1c2e:	88 27       	eor	r24, r24
    1c30:	77 fd       	sbrc	r23, 7
    1c32:	80 95       	com	r24
    1c34:	98 2f       	mov	r25, r24
    1c36:	9b d4       	rcall	.+2358   	; 0x256e <__floatsisf>
    1c38:	69 83       	std	Y+1, r22	; 0x01
    1c3a:	7a 83       	std	Y+2, r23	; 0x02
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
    1c3e:	9c 83       	std	Y+4, r25	; 0x04
    1c40:	9b 01       	movw	r18, r22
    1c42:	ac 01       	movw	r20, r24
    1c44:	c7 01       	movw	r24, r14
    1c46:	b6 01       	movw	r22, r12
    1c48:	f3 d3       	rcall	.+2022   	; 0x2430 <__cmpsf2>
    1c4a:	88 23       	and	r24, r24
    1c4c:	0c f0       	brlt	.+2      	; 0x1c50 <sram_draw_new_line+0xbe>
    1c4e:	3e c0       	rjmp	.+124    	; 0x1ccc <sram_draw_new_line+0x13a>
    1c50:	66 24       	eor	r6, r6
    1c52:	57 fc       	sbrc	r5, 7
    1c54:	60 94       	com	r6
    1c56:	76 2c       	mov	r7, r6
    1c58:	c4 01       	movw	r24, r8
    1c5a:	aa 27       	eor	r26, r26
    1c5c:	97 fd       	sbrc	r25, 7
    1c5e:	a0 95       	com	r26
    1c60:	ba 2f       	mov	r27, r26
    1c62:	89 87       	std	Y+9, r24	; 0x09
    1c64:	9a 87       	std	Y+10, r25	; 0x0a
    1c66:	ab 87       	std	Y+11, r26	; 0x0b
    1c68:	bc 87       	std	Y+12, r27	; 0x0c
    1c6a:	c3 01       	movw	r24, r6
    1c6c:	b2 01       	movw	r22, r4
    1c6e:	7f d4       	rcall	.+2302   	; 0x256e <__floatsisf>
    1c70:	9b 01       	movw	r18, r22
    1c72:	ac 01       	movw	r20, r24
    1c74:	c7 01       	movw	r24, r14
    1c76:	b6 01       	movw	r22, r12
    1c78:	76 d3       	rcall	.+1772   	; 0x2366 <__subsf3>
    1c7a:	2d 81       	ldd	r18, Y+5	; 0x05
    1c7c:	3e 81       	ldd	r19, Y+6	; 0x06
    1c7e:	4f 81       	ldd	r20, Y+7	; 0x07
    1c80:	58 85       	ldd	r21, Y+8	; 0x08
    1c82:	29 d5       	rcall	.+2642   	; 0x26d6 <__mulsf3>
    1c84:	4b 01       	movw	r8, r22
    1c86:	5c 01       	movw	r10, r24
    1c88:	69 85       	ldd	r22, Y+9	; 0x09
    1c8a:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c8c:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c8e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c90:	6e d4       	rcall	.+2268   	; 0x256e <__floatsisf>
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	c5 01       	movw	r24, r10
    1c98:	b4 01       	movw	r22, r8
    1c9a:	66 d3       	rcall	.+1740   	; 0x2368 <__addsf3>
    1c9c:	3a d4       	rcall	.+2164   	; 0x2512 <__fixunssfsi>
    1c9e:	b6 2e       	mov	r11, r22
    1ca0:	c7 01       	movw	r24, r14
    1ca2:	b6 01       	movw	r22, r12
    1ca4:	36 d4       	rcall	.+2156   	; 0x2512 <__fixunssfsi>
    1ca6:	86 2f       	mov	r24, r22
    1ca8:	6b 2d       	mov	r22, r11
    1caa:	57 df       	rcall	.-338    	; 0x1b5a <sram_pixel>
    1cac:	2d ec       	ldi	r18, 0xCD	; 205
    1cae:	3c ec       	ldi	r19, 0xCC	; 204
    1cb0:	4c ec       	ldi	r20, 0xCC	; 204
    1cb2:	5d e3       	ldi	r21, 0x3D	; 61
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	b6 01       	movw	r22, r12
    1cb8:	57 d3       	rcall	.+1710   	; 0x2368 <__addsf3>
    1cba:	6b 01       	movw	r12, r22
    1cbc:	7c 01       	movw	r14, r24
    1cbe:	29 81       	ldd	r18, Y+1	; 0x01
    1cc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1cc2:	4b 81       	ldd	r20, Y+3	; 0x03
    1cc4:	5c 81       	ldd	r21, Y+4	; 0x04
    1cc6:	b4 d3       	rcall	.+1896   	; 0x2430 <__cmpsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	7c f2       	brlt	.-98     	; 0x1c6a <sram_draw_new_line+0xd8>
    1ccc:	12 15       	cp	r17, r2
    1cce:	c8 f1       	brcs	.+114    	; 0x1d42 <sram_draw_new_line+0x1b0>
    1cd0:	30 12       	cpse	r3, r16
    1cd2:	39 c0       	rjmp	.+114    	; 0x1d46 <sram_draw_new_line+0x1b4>
    1cd4:	21 16       	cp	r2, r17
    1cd6:	30 f0       	brcs	.+12     	; 0x1ce4 <sram_draw_new_line+0x152>
    1cd8:	36 c0       	rjmp	.+108    	; 0x1d46 <sram_draw_new_line+0x1b4>
    1cda:	82 2d       	mov	r24, r2
    1cdc:	21 2e       	mov	r2, r17
    1cde:	18 2f       	mov	r17, r24
    1ce0:	02 2d       	mov	r16, r2
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <sram_draw_new_line+0x154>
    1ce4:	02 2d       	mov	r16, r2
    1ce6:	60 2f       	mov	r22, r16
    1ce8:	83 2d       	mov	r24, r3
    1cea:	37 df       	rcall	.-402    	; 0x1b5a <sram_pixel>
    1cec:	0f 5f       	subi	r16, 0xFF	; 255
    1cee:	01 17       	cp	r16, r17
    1cf0:	d0 f3       	brcs	.-12     	; 0x1ce6 <sram_draw_new_line+0x154>
    1cf2:	29 c0       	rjmp	.+82     	; 0x1d46 <sram_draw_new_line+0x1b4>
    1cf4:	82 2e       	mov	r8, r18
    1cf6:	91 2c       	mov	r9, r1
    1cf8:	a8 2e       	mov	r10, r24
    1cfa:	b1 2c       	mov	r11, r1
    1cfc:	44 2e       	mov	r4, r20
    1cfe:	51 2c       	mov	r5, r1
    1d00:	70 e0       	ldi	r23, 0x00	; 0
    1d02:	68 19       	sub	r22, r8
    1d04:	79 09       	sbc	r23, r9
    1d06:	88 27       	eor	r24, r24
    1d08:	77 fd       	sbrc	r23, 7
    1d0a:	80 95       	com	r24
    1d0c:	98 2f       	mov	r25, r24
    1d0e:	2f d4       	rcall	.+2142   	; 0x256e <__floatsisf>
    1d10:	6b 01       	movw	r12, r22
    1d12:	7c 01       	movw	r14, r24
    1d14:	b5 01       	movw	r22, r10
    1d16:	64 19       	sub	r22, r4
    1d18:	75 09       	sbc	r23, r5
    1d1a:	88 27       	eor	r24, r24
    1d1c:	77 fd       	sbrc	r23, 7
    1d1e:	80 95       	com	r24
    1d20:	98 2f       	mov	r25, r24
    1d22:	25 d4       	rcall	.+2122   	; 0x256e <__floatsisf>
    1d24:	9b 01       	movw	r18, r22
    1d26:	ac 01       	movw	r20, r24
    1d28:	c7 01       	movw	r24, r14
    1d2a:	b6 01       	movw	r22, r12
    1d2c:	85 d3       	rcall	.+1802   	; 0x2438 <__divsf3>
    1d2e:	6d 83       	std	Y+5, r22	; 0x05
    1d30:	7e 83       	std	Y+6, r23	; 0x06
    1d32:	8f 83       	std	Y+7, r24	; 0x07
    1d34:	98 87       	std	Y+8, r25	; 0x08
    1d36:	82 2d       	mov	r24, r2
    1d38:	21 2e       	mov	r2, r17
    1d3a:	18 2f       	mov	r17, r24
    1d3c:	30 2e       	mov	r3, r16
    1d3e:	0a 2d       	mov	r16, r10
    1d40:	6e cf       	rjmp	.-292    	; 0x1c1e <sram_draw_new_line+0x8c>
    1d42:	30 16       	cp	r3, r16
    1d44:	51 f2       	breq	.-108    	; 0x1cda <sram_draw_new_line+0x148>
    1d46:	2c 96       	adiw	r28, 0x0c	; 12
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	1f 91       	pop	r17
    1d58:	0f 91       	pop	r16
    1d5a:	ff 90       	pop	r15
    1d5c:	ef 90       	pop	r14
    1d5e:	df 90       	pop	r13
    1d60:	cf 90       	pop	r12
    1d62:	bf 90       	pop	r11
    1d64:	af 90       	pop	r10
    1d66:	9f 90       	pop	r9
    1d68:	8f 90       	pop	r8
    1d6a:	7f 90       	pop	r7
    1d6c:	6f 90       	pop	r6
    1d6e:	5f 90       	pop	r5
    1d70:	4f 90       	pop	r4
    1d72:	3f 90       	pop	r3
    1d74:	2f 90       	pop	r2
    1d76:	08 95       	ret

00001d78 <sram_draw_line>:
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	d8 2f       	mov	r29, r24
    1d7e:	c6 2f       	mov	r28, r22
    1d80:	26 2f       	mov	r18, r22
    1d82:	48 2f       	mov	r20, r24
    1d84:	60 91 bc 03 	lds	r22, 0x03BC
    1d88:	80 91 bd 03 	lds	r24, 0x03BD
    1d8c:	02 df       	rcall	.-508    	; 0x1b92 <sram_draw_new_line>
    1d8e:	d0 93 bd 03 	sts	0x03BD, r29
    1d92:	c0 93 bc 03 	sts	0x03BC, r28
    1d96:	df 91       	pop	r29
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <sram_push_line>:
    1d9c:	0f 93       	push	r16
    1d9e:	1f 93       	push	r17
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	08 2f       	mov	r16, r24
    1da6:	71 de       	rcall	.-798    	; 0x1a8a <sram_goto_line>
    1da8:	80 e8       	ldi	r24, 0x80	; 128
    1daa:	08 9f       	mul	r16, r24
    1dac:	80 01       	movw	r16, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	c0 e8       	ldi	r28, 0x80	; 128
    1db2:	d0 e0       	ldi	r29, 0x00	; 0
    1db4:	00 58       	subi	r16, 0x80	; 128
    1db6:	1f 4f       	sbci	r17, 0xFF	; 255
    1db8:	c8 01       	movw	r24, r16
    1dba:	8c 1b       	sub	r24, r28
    1dbc:	9d 0b       	sbc	r25, r29
    1dbe:	e0 91 54 01 	lds	r30, 0x0154
    1dc2:	f0 91 55 01 	lds	r31, 0x0155
    1dc6:	e8 0f       	add	r30, r24
    1dc8:	f9 1f       	adc	r31, r25
    1dca:	80 81       	ld	r24, Z
    1dcc:	33 dd       	rcall	.-1434   	; 0x1834 <write_d>
    1dce:	21 97       	sbiw	r28, 0x01	; 1
    1dd0:	20 97       	sbiw	r28, 0x00	; 0
    1dd2:	91 f7       	brne	.-28     	; 0x1db8 <sram_push_line+0x1c>
    1dd4:	df 91       	pop	r29
    1dd6:	cf 91       	pop	r28
    1dd8:	1f 91       	pop	r17
    1dda:	0f 91       	pop	r16
    1ddc:	08 95       	ret

00001dde <sram_update_oled>:
    1dde:	cf 93       	push	r28
    1de0:	c0 e0       	ldi	r28, 0x00	; 0
    1de2:	8c 2f       	mov	r24, r28
    1de4:	db df       	rcall	.-74     	; 0x1d9c <sram_push_line>
    1de6:	cf 5f       	subi	r28, 0xFF	; 255
    1de8:	c8 30       	cpi	r28, 0x08	; 8
    1dea:	d9 f7       	brne	.-10     	; 0x1de2 <sram_update_oled+0x4>
    1dec:	cf 91       	pop	r28
    1dee:	08 95       	ret

00001df0 <sram_init>:
    1df0:	20 e0       	ldi	r18, 0x00	; 0
    1df2:	30 e0       	ldi	r19, 0x00	; 0
    1df4:	b0 e8       	ldi	r27, 0x80	; 128
    1df6:	a0 e0       	ldi	r26, 0x00	; 0
    1df8:	11 c0       	rjmp	.+34     	; 0x1e1c <sram_init+0x2c>
    1dfa:	a9 01       	movw	r20, r18
    1dfc:	48 1b       	sub	r20, r24
    1dfe:	59 0b       	sbc	r21, r25
    1e00:	e0 91 54 01 	lds	r30, 0x0154
    1e04:	f0 91 55 01 	lds	r31, 0x0155
    1e08:	e4 0f       	add	r30, r20
    1e0a:	f5 1f       	adc	r31, r21
    1e0c:	10 82       	st	Z, r1
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	00 97       	sbiw	r24, 0x00	; 0
    1e12:	99 f7       	brne	.-26     	; 0x1dfa <sram_init+0xa>
    1e14:	21 15       	cp	r18, r1
    1e16:	84 e0       	ldi	r24, 0x04	; 4
    1e18:	38 07       	cpc	r19, r24
    1e1a:	29 f0       	breq	.+10     	; 0x1e26 <sram_init+0x36>
    1e1c:	8b 2f       	mov	r24, r27
    1e1e:	9a 2f       	mov	r25, r26
    1e20:	20 58       	subi	r18, 0x80	; 128
    1e22:	3f 4f       	sbci	r19, 0xFF	; 255
    1e24:	ea cf       	rjmp	.-44     	; 0x1dfa <sram_init+0xa>
    1e26:	10 92 b3 03 	sts	0x03B3, r1
    1e2a:	10 92 b2 03 	sts	0x03B2, r1
    1e2e:	d7 cf       	rjmp	.-82     	; 0x1dde <sram_update_oled>
    1e30:	08 95       	ret

00001e32 <sram_clear_line>:
    1e32:	cf 93       	push	r28
    1e34:	c8 2f       	mov	r28, r24
    1e36:	2b dd       	rcall	.-1450   	; 0x188e <oled_goto_line>
    1e38:	c8 30       	cpi	r28, 0x08	; 8
    1e3a:	b8 f4       	brcc	.+46     	; 0x1e6a <sram_clear_line+0x38>
    1e3c:	20 e8       	ldi	r18, 0x80	; 128
    1e3e:	c2 9f       	mul	r28, r18
    1e40:	c0 01       	movw	r24, r0
    1e42:	11 24       	eor	r1, r1
    1e44:	20 e8       	ldi	r18, 0x80	; 128
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	80 58       	subi	r24, 0x80	; 128
    1e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4c:	ac 01       	movw	r20, r24
    1e4e:	42 1b       	sub	r20, r18
    1e50:	53 0b       	sbc	r21, r19
    1e52:	e0 91 54 01 	lds	r30, 0x0154
    1e56:	f0 91 55 01 	lds	r31, 0x0155
    1e5a:	e4 0f       	add	r30, r20
    1e5c:	f5 1f       	adc	r31, r21
    1e5e:	10 82       	st	Z, r1
    1e60:	21 50       	subi	r18, 0x01	; 1
    1e62:	31 09       	sbc	r19, r1
    1e64:	21 15       	cp	r18, r1
    1e66:	31 05       	cpc	r19, r1
    1e68:	89 f7       	brne	.-30     	; 0x1e4c <sram_clear_line+0x1a>
    1e6a:	cf 91       	pop	r28
    1e6c:	08 95       	ret

00001e6e <sram_scroll_horizontally>:
    1e6e:	ef 92       	push	r14
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	22 23       	and	r18, r18
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <sram_scroll_horizontally+0x12>
    1e7e:	50 c0       	rjmp	.+160    	; 0x1f20 <sram_scroll_horizontally+0xb2>
    1e80:	a0 91 54 01 	lds	r26, 0x0154
    1e84:	b0 91 55 01 	lds	r27, 0x0155
    1e88:	90 e8       	ldi	r25, 0x80	; 128
    1e8a:	89 9f       	mul	r24, r25
    1e8c:	a0 0d       	add	r26, r0
    1e8e:	b1 1d       	adc	r27, r1
    1e90:	11 24       	eor	r1, r1
    1e92:	64 eb       	ldi	r22, 0xB4	; 180
    1e94:	73 e0       	ldi	r23, 0x03	; 3
    1e96:	fb 01       	movw	r30, r22
    1e98:	9d 91       	ld	r25, X+
    1e9a:	91 93       	st	Z+, r25
    1e9c:	9e 2f       	mov	r25, r30
    1e9e:	96 1b       	sub	r25, r22
    1ea0:	92 17       	cp	r25, r18
    1ea2:	d0 f3       	brcs	.-12     	; 0x1e98 <sram_scroll_horizontally+0x2a>
    1ea4:	a2 2f       	mov	r26, r18
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	c0 e8       	ldi	r28, 0x80	; 128
    1eaa:	d0 e0       	ldi	r29, 0x00	; 0
    1eac:	7e 01       	movw	r14, r28
    1eae:	ea 1a       	sub	r14, r26
    1eb0:	fb 0a       	sbc	r15, r27
    1eb2:	1e 14       	cp	r1, r14
    1eb4:	1f 04       	cpc	r1, r15
    1eb6:	d4 f1       	brlt	.+116    	; 0x1f2c <sram_scroll_horizontally+0xbe>
    1eb8:	18 c0       	rjmp	.+48     	; 0x1eea <sram_scroll_horizontally+0x7c>
    1eba:	60 91 54 01 	lds	r22, 0x0154
    1ebe:	70 91 55 01 	lds	r23, 0x0155
    1ec2:	40 0f       	add	r20, r16
    1ec4:	51 1f       	adc	r21, r17
    1ec6:	fb 01       	movw	r30, r22
    1ec8:	e4 0f       	add	r30, r20
    1eca:	f5 1f       	adc	r31, r21
    1ecc:	4a 0f       	add	r20, r26
    1ece:	5b 1f       	adc	r21, r27
    1ed0:	64 0f       	add	r22, r20
    1ed2:	75 1f       	adc	r23, r21
    1ed4:	eb 01       	movw	r28, r22
    1ed6:	38 81       	ld	r19, Y
    1ed8:	30 83       	st	Z, r19
    1eda:	9f 5f       	subi	r25, 0xFF	; 255
    1edc:	49 2f       	mov	r20, r25
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	4e 15       	cp	r20, r14
    1ee2:	5f 05       	cpc	r21, r15
    1ee4:	54 f3       	brlt	.-44     	; 0x1eba <sram_scroll_horizontally+0x4c>
    1ee6:	22 23       	and	r18, r18
    1ee8:	49 f1       	breq	.+82     	; 0x1f3c <sram_scroll_horizontally+0xce>
    1eea:	d0 e8       	ldi	r29, 0x80	; 128
    1eec:	8d 9f       	mul	r24, r29
    1eee:	a0 01       	movw	r20, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	4a 1b       	sub	r20, r26
    1ef4:	5b 0b       	sbc	r21, r27
    1ef6:	64 eb       	ldi	r22, 0xB4	; 180
    1ef8:	73 e0       	ldi	r23, 0x03	; 3
    1efa:	fb 01       	movw	r30, r22
    1efc:	45 53       	subi	r20, 0x35	; 53
    1efe:	53 40       	sbci	r21, 0x03	; 3
    1f00:	ca 01       	movw	r24, r20
    1f02:	8e 0f       	add	r24, r30
    1f04:	9f 1f       	adc	r25, r31
    1f06:	a0 91 54 01 	lds	r26, 0x0154
    1f0a:	b0 91 55 01 	lds	r27, 0x0155
    1f0e:	a8 0f       	add	r26, r24
    1f10:	b9 1f       	adc	r27, r25
    1f12:	81 91       	ld	r24, Z+
    1f14:	8c 93       	st	X, r24
    1f16:	8e 2f       	mov	r24, r30
    1f18:	86 1b       	sub	r24, r22
    1f1a:	82 17       	cp	r24, r18
    1f1c:	88 f3       	brcs	.-30     	; 0x1f00 <sram_scroll_horizontally+0x92>
    1f1e:	0e c0       	rjmp	.+28     	; 0x1f3c <sram_scroll_horizontally+0xce>
    1f20:	68 94       	set
    1f22:	ee 24       	eor	r14, r14
    1f24:	e7 f8       	bld	r14, 7
    1f26:	f1 2c       	mov	r15, r1
    1f28:	a0 e0       	ldi	r26, 0x00	; 0
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	90 e8       	ldi	r25, 0x80	; 128
    1f2e:	89 9f       	mul	r24, r25
    1f30:	80 01       	movw	r16, r0
    1f32:	11 24       	eor	r1, r1
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	50 e0       	ldi	r21, 0x00	; 0
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	bf cf       	rjmp	.-130    	; 0x1eba <sram_scroll_horizontally+0x4c>
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	1f 91       	pop	r17
    1f42:	0f 91       	pop	r16
    1f44:	ff 90       	pop	r15
    1f46:	ef 90       	pop	r14
    1f48:	08 95       	ret

00001f4a <sram_scroll_line>:
    1f4a:	cf 93       	push	r28
    1f4c:	df 93       	push	r29
    1f4e:	d8 2f       	mov	r29, r24
    1f50:	c6 2f       	mov	r28, r22
    1f52:	69 30       	cpi	r22, 0x09	; 9
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <sram_scroll_line+0x12>
    1f56:	c8 50       	subi	r28, 0x08	; 8
    1f58:	6c 2f       	mov	r22, r28
    1f5a:	f7 df       	rcall	.-18     	; 0x1f4a <sram_scroll_line>
    1f5c:	2c 2f       	mov	r18, r28
    1f5e:	4f e7       	ldi	r20, 0x7F	; 127
    1f60:	60 e0       	ldi	r22, 0x00	; 0
    1f62:	8d 2f       	mov	r24, r29
    1f64:	84 df       	rcall	.-248    	; 0x1e6e <sram_scroll_horizontally>
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	08 95       	ret

00001f6c <sram_scroll_vertically>:
    1f6c:	2f 92       	push	r2
    1f6e:	3f 92       	push	r3
    1f70:	4f 92       	push	r4
    1f72:	5f 92       	push	r5
    1f74:	6f 92       	push	r6
    1f76:	7f 92       	push	r7
    1f78:	8f 92       	push	r8
    1f7a:	9f 92       	push	r9
    1f7c:	af 92       	push	r10
    1f7e:	bf 92       	push	r11
    1f80:	cf 92       	push	r12
    1f82:	df 92       	push	r13
    1f84:	ef 92       	push	r14
    1f86:	ff 92       	push	r15
    1f88:	0f 93       	push	r16
    1f8a:	1f 93       	push	r17
    1f8c:	cf 93       	push	r28
    1f8e:	df 93       	push	r29
    1f90:	00 d0       	rcall	.+0      	; 0x1f92 <sram_scroll_vertically+0x26>
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <sram_scroll_vertically+0x28>
    1f94:	1f 92       	push	r1
    1f96:	cd b7       	in	r28, 0x3d	; 61
    1f98:	de b7       	in	r29, 0x3e	; 62
    1f9a:	c8 2e       	mov	r12, r24
    1f9c:	f6 2e       	mov	r15, r22
    1f9e:	24 2e       	mov	r2, r20
    1fa0:	29 83       	std	Y+1, r18	; 0x01
    1fa2:	40 2e       	mov	r4, r16
    1fa4:	0f 2e       	mov	r0, r31
    1fa6:	f7 e0       	ldi	r31, 0x07	; 7
    1fa8:	af 2e       	mov	r10, r31
    1faa:	f0 2d       	mov	r31, r0
    1fac:	51 2c       	mov	r5, r1
    1fae:	61 2c       	mov	r6, r1
    1fb0:	71 2c       	mov	r7, r1
    1fb2:	81 2c       	mov	r8, r1
    1fb4:	10 e0       	ldi	r17, 0x00	; 0
    1fb6:	1a 82       	std	Y+2, r1	; 0x02
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	25 2d       	mov	r18, r5
    1fbe:	36 2d       	mov	r19, r6
    1fc0:	47 2d       	mov	r20, r7
    1fc2:	58 2d       	mov	r21, r8
    1fc4:	61 2f       	mov	r22, r17
    1fc6:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc8:	8b 2f       	mov	r24, r27
    1fca:	9a 2f       	mov	r25, r26
    1fcc:	08 e0       	ldi	r16, 0x08	; 8
    1fce:	15 d4       	rcall	.+2090   	; 0x27fa <__ashldi3>
    1fd0:	52 2e       	mov	r5, r18
    1fd2:	63 2e       	mov	r6, r19
    1fd4:	74 2e       	mov	r7, r20
    1fd6:	85 2e       	mov	r8, r21
    1fd8:	16 2f       	mov	r17, r22
    1fda:	b7 2e       	mov	r11, r23
    1fdc:	d8 2e       	mov	r13, r24
    1fde:	e9 2e       	mov	r14, r25
    1fe0:	6c 2d       	mov	r22, r12
    1fe2:	8a 2d       	mov	r24, r10
    1fe4:	83 dd       	rcall	.-1274   	; 0x1aec <sram_read>
    1fe6:	58 2a       	or	r5, r24
    1fe8:	ba 82       	std	Y+2, r11	; 0x02
    1fea:	bd 2d       	mov	r27, r13
    1fec:	ae 2d       	mov	r26, r14
    1fee:	aa 94       	dec	r10
    1ff0:	8f ef       	ldi	r24, 0xFF	; 255
    1ff2:	a8 12       	cpse	r10, r24
    1ff4:	e3 cf       	rjmp	.-58     	; 0x1fbc <sram_scroll_vertically+0x50>
    1ff6:	31 2c       	mov	r3, r1
    1ff8:	ef e3       	ldi	r30, 0x3F	; 63
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	e2 19       	sub	r30, r2
    1ffe:	f3 09       	sbc	r31, r3
    2000:	2f ef       	ldi	r18, 0xFF	; 255
    2002:	3f ef       	ldi	r19, 0xFF	; 255
    2004:	4f ef       	ldi	r20, 0xFF	; 255
    2006:	5f ef       	ldi	r21, 0xFF	; 255
    2008:	6f ef       	ldi	r22, 0xFF	; 255
    200a:	7f ef       	ldi	r23, 0xFF	; 255
    200c:	9f ef       	ldi	r25, 0xFF	; 255
    200e:	0e 2f       	mov	r16, r30
    2010:	f4 d3       	rcall	.+2024   	; 0x27fa <__ashldi3>
    2012:	ef 0d       	add	r30, r15
    2014:	f1 1d       	adc	r31, r1
    2016:	0e 2f       	mov	r16, r30
    2018:	0b d4       	rcall	.+2070   	; 0x2830 <__lshrdi3>
    201a:	0f 2d       	mov	r16, r15
    201c:	ee d3       	rcall	.+2012   	; 0x27fa <__ashldi3>
    201e:	e2 2f       	mov	r30, r18
    2020:	93 2e       	mov	r9, r19
    2022:	a4 2e       	mov	r10, r20
    2024:	b5 2e       	mov	r11, r21
    2026:	6b 83       	std	Y+3, r22	; 0x03
    2028:	d7 2e       	mov	r13, r23
    202a:	e8 2e       	mov	r14, r24
    202c:	f9 2f       	mov	r31, r25
    202e:	44 20       	and	r4, r4
    2030:	d9 f0       	breq	.+54     	; 0x2068 <sram_scroll_vertically+0xfc>
    2032:	89 81       	ldd	r24, Y+1	; 0x01
    2034:	28 1a       	sub	r2, r24
    2036:	31 08       	sbc	r3, r1
    2038:	87 fd       	sbrc	r24, 7
    203a:	33 94       	inc	r3
    203c:	25 2d       	mov	r18, r5
    203e:	36 2d       	mov	r19, r6
    2040:	47 2d       	mov	r20, r7
    2042:	58 2d       	mov	r21, r8
    2044:	61 2f       	mov	r22, r17
    2046:	7a 81       	ldd	r23, Y+2	; 0x02
    2048:	8b 2f       	mov	r24, r27
    204a:	9a 2f       	mov	r25, r26
    204c:	02 2d       	mov	r16, r2
    204e:	f0 d3       	rcall	.+2016   	; 0x2830 <__lshrdi3>
    2050:	81 e0       	ldi	r24, 0x01	; 1
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	09 80       	ldd	r0, Y+1	; 0x01
    2056:	02 c0       	rjmp	.+4      	; 0x205c <sram_scroll_vertically+0xf0>
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	0a 94       	dec	r0
    205e:	e2 f7       	brpl	.-8      	; 0x2058 <sram_scroll_vertically+0xec>
    2060:	44 24       	eor	r4, r4
    2062:	4a 94       	dec	r4
    2064:	48 0e       	add	r4, r24
    2066:	42 22       	and	r4, r18
    2068:	25 2d       	mov	r18, r5
    206a:	2e 23       	and	r18, r30
    206c:	36 2d       	mov	r19, r6
    206e:	39 21       	and	r19, r9
    2070:	47 2d       	mov	r20, r7
    2072:	4a 21       	and	r20, r10
    2074:	58 2d       	mov	r21, r8
    2076:	5b 21       	and	r21, r11
    2078:	6b 81       	ldd	r22, Y+3	; 0x03
    207a:	61 23       	and	r22, r17
    207c:	7a 81       	ldd	r23, Y+2	; 0x02
    207e:	7d 21       	and	r23, r13
    2080:	8b 2f       	mov	r24, r27
    2082:	8e 21       	and	r24, r14
    2084:	9f 2f       	mov	r25, r31
    2086:	9a 23       	and	r25, r26
    2088:	09 81       	ldd	r16, Y+1	; 0x01
    208a:	b7 d3       	rcall	.+1902   	; 0x27fa <__ashldi3>
    208c:	0f 2d       	mov	r16, r15
    208e:	d0 d3       	rcall	.+1952   	; 0x2830 <__lshrdi3>
    2090:	24 29       	or	r18, r4
    2092:	b3 d3       	rcall	.+1894   	; 0x27fa <__ashldi3>
    2094:	12 2f       	mov	r17, r18
    2096:	1e 23       	and	r17, r30
    2098:	23 2e       	mov	r2, r19
    209a:	29 20       	and	r2, r9
    209c:	34 2e       	mov	r3, r20
    209e:	3a 20       	and	r3, r10
    20a0:	45 2e       	mov	r4, r21
    20a2:	4b 20       	and	r4, r11
    20a4:	5b 80       	ldd	r5, Y+3	; 0x03
    20a6:	56 22       	and	r5, r22
    20a8:	67 2e       	mov	r6, r23
    20aa:	6d 20       	and	r6, r13
    20ac:	78 2e       	mov	r7, r24
    20ae:	7e 20       	and	r7, r14
    20b0:	8f 2e       	mov	r8, r31
    20b2:	89 22       	and	r8, r25
    20b4:	e0 95       	com	r30
    20b6:	ed 83       	std	Y+5, r30	; 0x05
    20b8:	90 94       	com	r9
    20ba:	a0 94       	com	r10
    20bc:	b0 94       	com	r11
    20be:	eb 81       	ldd	r30, Y+3	; 0x03
    20c0:	e0 95       	com	r30
    20c2:	e9 83       	std	Y+1, r30	; 0x01
    20c4:	d0 94       	com	r13
    20c6:	e0 94       	com	r14
    20c8:	ff 2e       	mov	r15, r31
    20ca:	f0 94       	com	r15
    20cc:	1a 82       	std	Y+2, r1	; 0x02
    20ce:	4d 81       	ldd	r20, Y+5	; 0x05
    20d0:	6c 2d       	mov	r22, r12
    20d2:	8a 81       	ldd	r24, Y+2	; 0x02
    20d4:	1c dd       	rcall	.-1480   	; 0x1b0e <sram_write_and>
    20d6:	2d 81       	ldd	r18, Y+5	; 0x05
    20d8:	39 2d       	mov	r19, r9
    20da:	4a 2d       	mov	r20, r10
    20dc:	5b 2d       	mov	r21, r11
    20de:	69 81       	ldd	r22, Y+1	; 0x01
    20e0:	7d 2d       	mov	r23, r13
    20e2:	8e 2d       	mov	r24, r14
    20e4:	9f 2d       	mov	r25, r15
    20e6:	08 e0       	ldi	r16, 0x08	; 8
    20e8:	a3 d3       	rcall	.+1862   	; 0x2830 <__lshrdi3>
    20ea:	2d 83       	std	Y+5, r18	; 0x05
    20ec:	93 2e       	mov	r9, r19
    20ee:	a4 2e       	mov	r10, r20
    20f0:	b5 2e       	mov	r11, r21
    20f2:	69 83       	std	Y+1, r22	; 0x01
    20f4:	d7 2e       	mov	r13, r23
    20f6:	e8 2e       	mov	r14, r24
    20f8:	f9 2e       	mov	r15, r25
    20fa:	41 2f       	mov	r20, r17
    20fc:	6c 2d       	mov	r22, r12
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	19 dd       	rcall	.-1486   	; 0x1b34 <sram_write_or>
    2102:	21 2f       	mov	r18, r17
    2104:	32 2d       	mov	r19, r2
    2106:	43 2d       	mov	r20, r3
    2108:	54 2d       	mov	r21, r4
    210a:	65 2d       	mov	r22, r5
    210c:	76 2d       	mov	r23, r6
    210e:	87 2d       	mov	r24, r7
    2110:	98 2d       	mov	r25, r8
    2112:	8e d3       	rcall	.+1820   	; 0x2830 <__lshrdi3>
    2114:	12 2f       	mov	r17, r18
    2116:	23 2e       	mov	r2, r19
    2118:	34 2e       	mov	r3, r20
    211a:	45 2e       	mov	r4, r21
    211c:	56 2e       	mov	r5, r22
    211e:	67 2e       	mov	r6, r23
    2120:	78 2e       	mov	r7, r24
    2122:	89 2e       	mov	r8, r25
    2124:	fa 81       	ldd	r31, Y+2	; 0x02
    2126:	ff 5f       	subi	r31, 0xFF	; 255
    2128:	fa 83       	std	Y+2, r31	; 0x02
    212a:	f8 30       	cpi	r31, 0x08	; 8
    212c:	81 f6       	brne	.-96     	; 0x20ce <sram_scroll_vertically+0x162>
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	0f 90       	pop	r0
    2138:	df 91       	pop	r29
    213a:	cf 91       	pop	r28
    213c:	1f 91       	pop	r17
    213e:	0f 91       	pop	r16
    2140:	ff 90       	pop	r15
    2142:	ef 90       	pop	r14
    2144:	df 90       	pop	r13
    2146:	cf 90       	pop	r12
    2148:	bf 90       	pop	r11
    214a:	af 90       	pop	r10
    214c:	9f 90       	pop	r9
    214e:	8f 90       	pop	r8
    2150:	7f 90       	pop	r7
    2152:	6f 90       	pop	r6
    2154:	5f 90       	pop	r5
    2156:	4f 90       	pop	r4
    2158:	3f 90       	pop	r3
    215a:	2f 90       	pop	r2
    215c:	08 95       	ret

0000215e <sram_set_point>:
    215e:	80 93 bd 03 	sts	0x03BD, r24
    2162:	60 93 bc 03 	sts	0x03BC, r22
    2166:	08 95       	ret

00002168 <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	c8 2f       	mov	r28, r24
    2172:	d6 2f       	mov	r29, r22
    2174:	14 2f       	mov	r17, r20
    2176:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    2178:	80 93 bd 03 	sts	0x03BD, r24
	prev_y = y0;
    217c:	60 93 bc 03 	sts	0x03BC, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    2180:	62 2f       	mov	r22, r18
    2182:	fa dd       	rcall	.-1036   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x1,y1);
    2184:	60 2f       	mov	r22, r16
    2186:	81 2f       	mov	r24, r17
    2188:	f7 dd       	rcall	.-1042   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x1,y0);
    218a:	6d 2f       	mov	r22, r29
    218c:	81 2f       	mov	r24, r17
    218e:	f4 dd       	rcall	.-1048   	; 0x1d78 <sram_draw_line>
	sram_draw_line(x0,y0);
    2190:	6d 2f       	mov	r22, r29
    2192:	8c 2f       	mov	r24, r28
    2194:	f1 dd       	rcall	.-1054   	; 0x1d78 <sram_draw_line>
}
    2196:	df 91       	pop	r29
    2198:	cf 91       	pop	r28
    219a:	1f 91       	pop	r17
    219c:	0f 91       	pop	r16
    219e:	08 95       	ret

000021a0 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_timer_1_complete;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    21a0:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    21a2:	89 b7       	in	r24, 0x39	; 57
    21a4:	81 60       	ori	r24, 0x01	; 1
    21a6:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    21a8:	83 b7       	in	r24, 0x33	; 51
    21aa:	8d 60       	ori	r24, 0x0D	; 13
    21ac:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	40 e0       	ldi	r20, 0x00	; 0
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	60 ec       	ldi	r22, 0xC0	; 192
    21b6:	72 e1       	ldi	r23, 0x12	; 18
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 d3       	rcall	.+1540   	; 0x27c2 <__divmodsi4>
    21be:	21 bf       	out	0x31, r18	; 49
	FLAG_timer_1_complete = 1;//since we are initializing we want to refresh the page
    21c0:	81 e0       	ldi	r24, 0x01	; 1
    21c2:	80 93 be 03 	sts	0x03BE, r24
    21c6:	08 95       	ret

000021c8 <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_timer_1_complete == 1)
    21c8:	80 91 be 03 	lds	r24, 0x03BE
    21cc:	81 30       	cpi	r24, 0x01	; 1
    21ce:	19 f4       	brne	.+6      	; 0x21d6 <timer_check_flag+0xe>
	{
		FLAG_timer_1_complete = 0;
    21d0:	10 92 be 03 	sts	0x03BE, r1
		return 1;
    21d4:	08 95       	ret
	}
	return 0;
    21d6:	80 e0       	ldi	r24, 0x00	; 0
}
    21d8:	08 95       	ret

000021da <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_timer_1_complete = 0;
    21da:	10 92 be 03 	sts	0x03BE, r1
    21de:	08 95       	ret

000021e0 <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    21e0:	1f 92       	push	r1
    21e2:	0f 92       	push	r0
    21e4:	0f b6       	in	r0, 0x3f	; 63
    21e6:	0f 92       	push	r0
    21e8:	11 24       	eor	r1, r1
    21ea:	8f 93       	push	r24
	FLAG_timer_1_complete = 1;
    21ec:	81 e0       	ldi	r24, 0x01	; 1
    21ee:	80 93 be 03 	sts	0x03BE, r24
}
    21f2:	8f 91       	pop	r24
    21f4:	0f 90       	pop	r0
    21f6:	0f be       	out	0x3f, r0	; 63
    21f8:	0f 90       	pop	r0
    21fa:	1f 90       	pop	r1
    21fc:	18 95       	reti

000021fe <timer_delay>:

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
	timer_ms = (FPS*((double)timer_ms/1000));
    2202:	bc 01       	movw	r22, r24
    2204:	88 27       	eor	r24, r24
    2206:	77 fd       	sbrc	r23, 7
    2208:	80 95       	com	r24
    220a:	98 2f       	mov	r25, r24
    220c:	b0 d1       	rcall	.+864    	; 0x256e <__floatsisf>
    220e:	20 e0       	ldi	r18, 0x00	; 0
    2210:	30 e0       	ldi	r19, 0x00	; 0
    2212:	4a e7       	ldi	r20, 0x7A	; 122
    2214:	54 e4       	ldi	r21, 0x44	; 68
    2216:	10 d1       	rcall	.+544    	; 0x2438 <__divsf3>
    2218:	20 e0       	ldi	r18, 0x00	; 0
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	40 e7       	ldi	r20, 0x70	; 112
    221e:	52 e4       	ldi	r21, 0x42	; 66
    2220:	5a d2       	rcall	.+1204   	; 0x26d6 <__mulsf3>
    2222:	72 d1       	rcall	.+740    	; 0x2508 <__fixsfsi>
    2224:	eb 01       	movw	r28, r22
	while(timer_ms>0){
    2226:	1c 16       	cp	r1, r28
    2228:	1d 06       	cpc	r1, r29
    222a:	34 f4       	brge	.+12     	; 0x2238 <timer_delay+0x3a>
		if (timer_check_flag())
    222c:	cd df       	rcall	.-102    	; 0x21c8 <timer_check_flag>
    222e:	81 11       	cpse	r24, r1
		{
			timer_ms--;
    2230:	21 97       	sbiw	r28, 0x01	; 1
	FLAG_timer_1_complete = 1;
}

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
	timer_ms = (FPS*((double)timer_ms/1000));
	while(timer_ms>0){
    2232:	1c 16       	cp	r1, r28
    2234:	1d 06       	cpc	r1, r29
    2236:	d4 f3       	brlt	.-12     	; 0x222c <timer_delay+0x2e>
		if (timer_check_flag())
		{
			timer_ms--;
		}
	}
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	08 95       	ret

0000223e <decode_hex>:
	}
	
}

uint8_t decode_hex(char hex){
	if (hex >= 'A')
    223e:	81 34       	cpi	r24, 0x41	; 65
    2240:	10 f0       	brcs	.+4      	; 0x2246 <decode_hex+0x8>
	{
		return 10 + hex - 'A';
    2242:	87 53       	subi	r24, 0x37	; 55
    2244:	08 95       	ret
	}else{
		return hex - '0';
    2246:	80 53       	subi	r24, 0x30	; 48
	}
}
    2248:	08 95       	ret

0000224a <print_highscore>:
 *  Author: pamarton
 */ 
#include "uart_exchange.h"


void print_highscore(uint8_t game){//retrives the highscore from the SD
    224a:	7f 92       	push	r7
    224c:	8f 92       	push	r8
    224e:	9f 92       	push	r9
    2250:	af 92       	push	r10
    2252:	bf 92       	push	r11
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	cf 93       	push	r28
    2262:	df 93       	push	r29
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	2a 97       	sbiw	r28, 0x0a	; 10
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
	sram_init();
    2274:	bd dd       	rcall	.-1158   	; 0x1df0 <sram_init>
    2276:	0f 2e       	mov	r0, r31
    2278:	f0 e3       	ldi	r31, 0x30	; 48
    227a:	cf 2e       	mov	r12, r31
    227c:	d1 2c       	mov	r13, r1
    227e:	f0 2d       	mov	r31, r0
	{
		sram_goto_line(b);
		sram_write_char('1'+b);
		sram_write_char(' ');
		
		printf("S0R");
    2280:	0f 2e       	mov	r0, r31
    2282:	fa eb       	ldi	r31, 0xBA	; 186
    2284:	8f 2e       	mov	r8, r31
    2286:	f2 e0       	ldi	r31, 0x02	; 2
    2288:	9f 2e       	mov	r9, r31
    228a:	f0 2d       	mov	r31, r0
    228c:	5e 01       	movw	r10, r28
    228e:	45 e0       	ldi	r20, 0x05	; 5
    2290:	a4 0e       	add	r10, r20
    2292:	b1 1c       	adc	r11, r1
    2294:	ee 24       	eor	r14, r14
    2296:	e3 94       	inc	r14
    2298:	f1 2c       	mov	r15, r1
    229a:	ec 0e       	add	r14, r28
    229c:	fd 1e       	adc	r15, r29
    229e:	88 e0       	ldi	r24, 0x08	; 8
    22a0:	e8 0e       	add	r14, r24
    22a2:	f1 1c       	adc	r15, r1
void print_highscore(uint8_t game){//retrives the highscore from the SD
	sram_init();
	char a[10];
	for (uint8_t b = 0; b <8; b++)
	{
		sram_goto_line(b);
    22a4:	80 ed       	ldi	r24, 0xD0	; 208
    22a6:	8c 0d       	add	r24, r12
    22a8:	f0 db       	rcall	.-2080   	; 0x1a8a <sram_goto_line>
		sram_write_char('1'+b);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	8c 0d       	add	r24, r12
    22ae:	b2 db       	rcall	.-2204   	; 0x1a14 <sram_write_char>
		sram_write_char(' ');
    22b0:	80 e2       	ldi	r24, 0x20	; 32
    22b2:	b0 db       	rcall	.-2208   	; 0x1a14 <sram_write_char>
		
		printf("S0R");
    22b4:	9f 92       	push	r9
    22b6:	8f 92       	push	r8
    22b8:	b5 d3       	rcall	.+1898   	; 0x2a24 <printf>
		printf("%c",'0'+b);
    22ba:	c6 01       	movw	r24, r12
    22bc:	c4 d3       	rcall	.+1928   	; 0x2a46 <putchar>
    22be:	0f 90       	pop	r0
    22c0:	0f 90       	pop	r0
    22c2:	8e 01       	movw	r16, r28
    22c4:	0f 5f       	subi	r16, 0xFF	; 255
    22c6:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (unsigned int i = 0; i< 4;i++)
		{
			a[i] = recieve_UART();
    22c8:	0e 94 5e 03 	call	0x6bc	; 0x6bc <recieve_UART>
    22cc:	f8 01       	movw	r30, r16
    22ce:	81 93       	st	Z+, r24
    22d0:	8f 01       	movw	r16, r30
		sram_write_char(' ');
		
		printf("S0R");
		printf("%c",'0'+b);
		
		for (unsigned int i = 0; i< 4;i++)
    22d2:	ea 15       	cp	r30, r10
    22d4:	fb 05       	cpc	r31, r11
    22d6:	c1 f7       	brne	.-16     	; 0x22c8 <print_highscore+0x7e>
		{
			a[i] = recieve_UART();
		}
		uint16_t temp = decode_hex(a[0])<<12 | decode_hex(a[1])<<8 | decode_hex(a[2])<<4 | decode_hex(a[3]);
    22d8:	89 81       	ldd	r24, Y+1	; 0x01
    22da:	b1 df       	rcall	.-158    	; 0x223e <decode_hex>
    22dc:	78 2e       	mov	r7, r24
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	ae df       	rcall	.-164    	; 0x223e <decode_hex>
    22e2:	08 2f       	mov	r16, r24
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	ab df       	rcall	.-170    	; 0x223e <decode_hex>
    22e8:	18 2f       	mov	r17, r24
    22ea:	8c 81       	ldd	r24, Y+4	; 0x04
    22ec:	a8 df       	rcall	.-176    	; 0x223e <decode_hex>
    22ee:	27 2d       	mov	r18, r7
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	32 2f       	mov	r19, r18
    22f4:	22 27       	eor	r18, r18
    22f6:	32 95       	swap	r19
    22f8:	30 7f       	andi	r19, 0xF0	; 240
    22fa:	30 2b       	or	r19, r16
    22fc:	28 2b       	or	r18, r24
    22fe:	f0 e1       	ldi	r31, 0x10	; 16
    2300:	1f 9f       	mul	r17, r31
    2302:	c0 01       	movw	r24, r0
    2304:	11 24       	eor	r1, r1
		sram_write_int(temp);
    2306:	82 2b       	or	r24, r18
    2308:	93 2b       	or	r25, r19
    230a:	e1 db       	rcall	.-2110   	; 0x1ace <sram_write_int>
		sram_goto_column(63);
    230c:	8f e3       	ldi	r24, 0x3F	; 63
    230e:	c4 db       	rcall	.-2168   	; 0x1a98 <sram_goto_column>
    2310:	8e 01       	movw	r16, r28
    2312:	0f 5f       	subi	r16, 0xFF	; 255
    2314:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (unsigned int i = 0; i< 8;i++)
		{
			a[i] = recieve_UART();
    2316:	0e 94 5e 03 	call	0x6bc	; 0x6bc <recieve_UART>
    231a:	f8 01       	movw	r30, r16
    231c:	81 93       	st	Z+, r24
    231e:	8f 01       	movw	r16, r30
		}
		uint16_t temp = decode_hex(a[0])<<12 | decode_hex(a[1])<<8 | decode_hex(a[2])<<4 | decode_hex(a[3]);
		sram_write_int(temp);
		sram_goto_column(63);
		
		for (unsigned int i = 0; i< 8;i++)
    2320:	ee 15       	cp	r30, r14
    2322:	ff 05       	cpc	r31, r15
    2324:	c1 f7       	brne	.-16     	; 0x2316 <print_highscore+0xcc>
		{
			a[i] = recieve_UART();
		}
		sram_write_string(a);
    2326:	ce 01       	movw	r24, r28
    2328:	01 96       	adiw	r24, 0x01	; 1
    232a:	bd db       	rcall	.-2182   	; 0x1aa6 <sram_write_string>
		sram_update_oled();
    232c:	58 dd       	rcall	.-1360   	; 0x1dde <sram_update_oled>
    232e:	ff ef       	ldi	r31, 0xFF	; 255
    2330:	cf 1a       	sub	r12, r31
    2332:	df 0a       	sbc	r13, r31


void print_highscore(uint8_t game){//retrives the highscore from the SD
	sram_init();
	char a[10];
	for (uint8_t b = 0; b <8; b++)
    2334:	48 e3       	ldi	r20, 0x38	; 56
    2336:	c4 16       	cp	r12, r20
    2338:	d1 04       	cpc	r13, r1
    233a:	09 f0       	breq	.+2      	; 0x233e <print_highscore+0xf4>
    233c:	b3 cf       	rjmp	.-154    	; 0x22a4 <print_highscore+0x5a>
		}
		sram_write_string(a);
		sram_update_oled();
	}
	
}
    233e:	2a 96       	adiw	r28, 0x0a	; 10
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	df 91       	pop	r29
    234c:	cf 91       	pop	r28
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	ff 90       	pop	r15
    2354:	ef 90       	pop	r14
    2356:	df 90       	pop	r13
    2358:	cf 90       	pop	r12
    235a:	bf 90       	pop	r11
    235c:	af 90       	pop	r10
    235e:	9f 90       	pop	r9
    2360:	8f 90       	pop	r8
    2362:	7f 90       	pop	r7
    2364:	08 95       	ret

00002366 <__subsf3>:
    2366:	50 58       	subi	r21, 0x80	; 128

00002368 <__addsf3>:
    2368:	bb 27       	eor	r27, r27
    236a:	aa 27       	eor	r26, r26
    236c:	0e d0       	rcall	.+28     	; 0x238a <__addsf3x>
    236e:	75 c1       	rjmp	.+746    	; 0x265a <__fp_round>
    2370:	66 d1       	rcall	.+716    	; 0x263e <__fp_pscA>
    2372:	30 f0       	brcs	.+12     	; 0x2380 <__addsf3+0x18>
    2374:	6b d1       	rcall	.+726    	; 0x264c <__fp_pscB>
    2376:	20 f0       	brcs	.+8      	; 0x2380 <__addsf3+0x18>
    2378:	31 f4       	brne	.+12     	; 0x2386 <__addsf3+0x1e>
    237a:	9f 3f       	cpi	r25, 0xFF	; 255
    237c:	11 f4       	brne	.+4      	; 0x2382 <__addsf3+0x1a>
    237e:	1e f4       	brtc	.+6      	; 0x2386 <__addsf3+0x1e>
    2380:	5b c1       	rjmp	.+694    	; 0x2638 <__fp_nan>
    2382:	0e f4       	brtc	.+2      	; 0x2386 <__addsf3+0x1e>
    2384:	e0 95       	com	r30
    2386:	e7 fb       	bst	r30, 7
    2388:	51 c1       	rjmp	.+674    	; 0x262c <__fp_inf>

0000238a <__addsf3x>:
    238a:	e9 2f       	mov	r30, r25
    238c:	77 d1       	rcall	.+750    	; 0x267c <__fp_split3>
    238e:	80 f3       	brcs	.-32     	; 0x2370 <__addsf3+0x8>
    2390:	ba 17       	cp	r27, r26
    2392:	62 07       	cpc	r22, r18
    2394:	73 07       	cpc	r23, r19
    2396:	84 07       	cpc	r24, r20
    2398:	95 07       	cpc	r25, r21
    239a:	18 f0       	brcs	.+6      	; 0x23a2 <__addsf3x+0x18>
    239c:	71 f4       	brne	.+28     	; 0x23ba <__addsf3x+0x30>
    239e:	9e f5       	brtc	.+102    	; 0x2406 <__addsf3x+0x7c>
    23a0:	8f c1       	rjmp	.+798    	; 0x26c0 <__fp_zero>
    23a2:	0e f4       	brtc	.+2      	; 0x23a6 <__addsf3x+0x1c>
    23a4:	e0 95       	com	r30
    23a6:	0b 2e       	mov	r0, r27
    23a8:	ba 2f       	mov	r27, r26
    23aa:	a0 2d       	mov	r26, r0
    23ac:	0b 01       	movw	r0, r22
    23ae:	b9 01       	movw	r22, r18
    23b0:	90 01       	movw	r18, r0
    23b2:	0c 01       	movw	r0, r24
    23b4:	ca 01       	movw	r24, r20
    23b6:	a0 01       	movw	r20, r0
    23b8:	11 24       	eor	r1, r1
    23ba:	ff 27       	eor	r31, r31
    23bc:	59 1b       	sub	r21, r25
    23be:	99 f0       	breq	.+38     	; 0x23e6 <__addsf3x+0x5c>
    23c0:	59 3f       	cpi	r21, 0xF9	; 249
    23c2:	50 f4       	brcc	.+20     	; 0x23d8 <__addsf3x+0x4e>
    23c4:	50 3e       	cpi	r21, 0xE0	; 224
    23c6:	68 f1       	brcs	.+90     	; 0x2422 <__addsf3x+0x98>
    23c8:	1a 16       	cp	r1, r26
    23ca:	f0 40       	sbci	r31, 0x00	; 0
    23cc:	a2 2f       	mov	r26, r18
    23ce:	23 2f       	mov	r18, r19
    23d0:	34 2f       	mov	r19, r20
    23d2:	44 27       	eor	r20, r20
    23d4:	58 5f       	subi	r21, 0xF8	; 248
    23d6:	f3 cf       	rjmp	.-26     	; 0x23be <__addsf3x+0x34>
    23d8:	46 95       	lsr	r20
    23da:	37 95       	ror	r19
    23dc:	27 95       	ror	r18
    23de:	a7 95       	ror	r26
    23e0:	f0 40       	sbci	r31, 0x00	; 0
    23e2:	53 95       	inc	r21
    23e4:	c9 f7       	brne	.-14     	; 0x23d8 <__addsf3x+0x4e>
    23e6:	7e f4       	brtc	.+30     	; 0x2406 <__addsf3x+0x7c>
    23e8:	1f 16       	cp	r1, r31
    23ea:	ba 0b       	sbc	r27, r26
    23ec:	62 0b       	sbc	r22, r18
    23ee:	73 0b       	sbc	r23, r19
    23f0:	84 0b       	sbc	r24, r20
    23f2:	ba f0       	brmi	.+46     	; 0x2422 <__addsf3x+0x98>
    23f4:	91 50       	subi	r25, 0x01	; 1
    23f6:	a1 f0       	breq	.+40     	; 0x2420 <__addsf3x+0x96>
    23f8:	ff 0f       	add	r31, r31
    23fa:	bb 1f       	adc	r27, r27
    23fc:	66 1f       	adc	r22, r22
    23fe:	77 1f       	adc	r23, r23
    2400:	88 1f       	adc	r24, r24
    2402:	c2 f7       	brpl	.-16     	; 0x23f4 <__addsf3x+0x6a>
    2404:	0e c0       	rjmp	.+28     	; 0x2422 <__addsf3x+0x98>
    2406:	ba 0f       	add	r27, r26
    2408:	62 1f       	adc	r22, r18
    240a:	73 1f       	adc	r23, r19
    240c:	84 1f       	adc	r24, r20
    240e:	48 f4       	brcc	.+18     	; 0x2422 <__addsf3x+0x98>
    2410:	87 95       	ror	r24
    2412:	77 95       	ror	r23
    2414:	67 95       	ror	r22
    2416:	b7 95       	ror	r27
    2418:	f7 95       	ror	r31
    241a:	9e 3f       	cpi	r25, 0xFE	; 254
    241c:	08 f0       	brcs	.+2      	; 0x2420 <__addsf3x+0x96>
    241e:	b3 cf       	rjmp	.-154    	; 0x2386 <__addsf3+0x1e>
    2420:	93 95       	inc	r25
    2422:	88 0f       	add	r24, r24
    2424:	08 f0       	brcs	.+2      	; 0x2428 <__addsf3x+0x9e>
    2426:	99 27       	eor	r25, r25
    2428:	ee 0f       	add	r30, r30
    242a:	97 95       	ror	r25
    242c:	87 95       	ror	r24
    242e:	08 95       	ret

00002430 <__cmpsf2>:
    2430:	d9 d0       	rcall	.+434    	; 0x25e4 <__fp_cmp>
    2432:	08 f4       	brcc	.+2      	; 0x2436 <__cmpsf2+0x6>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	08 95       	ret

00002438 <__divsf3>:
    2438:	0c d0       	rcall	.+24     	; 0x2452 <__divsf3x>
    243a:	0f c1       	rjmp	.+542    	; 0x265a <__fp_round>
    243c:	07 d1       	rcall	.+526    	; 0x264c <__fp_pscB>
    243e:	40 f0       	brcs	.+16     	; 0x2450 <__divsf3+0x18>
    2440:	fe d0       	rcall	.+508    	; 0x263e <__fp_pscA>
    2442:	30 f0       	brcs	.+12     	; 0x2450 <__divsf3+0x18>
    2444:	21 f4       	brne	.+8      	; 0x244e <__divsf3+0x16>
    2446:	5f 3f       	cpi	r21, 0xFF	; 255
    2448:	19 f0       	breq	.+6      	; 0x2450 <__divsf3+0x18>
    244a:	f0 c0       	rjmp	.+480    	; 0x262c <__fp_inf>
    244c:	51 11       	cpse	r21, r1
    244e:	39 c1       	rjmp	.+626    	; 0x26c2 <__fp_szero>
    2450:	f3 c0       	rjmp	.+486    	; 0x2638 <__fp_nan>

00002452 <__divsf3x>:
    2452:	14 d1       	rcall	.+552    	; 0x267c <__fp_split3>
    2454:	98 f3       	brcs	.-26     	; 0x243c <__divsf3+0x4>

00002456 <__divsf3_pse>:
    2456:	99 23       	and	r25, r25
    2458:	c9 f3       	breq	.-14     	; 0x244c <__divsf3+0x14>
    245a:	55 23       	and	r21, r21
    245c:	b1 f3       	breq	.-20     	; 0x244a <__divsf3+0x12>
    245e:	95 1b       	sub	r25, r21
    2460:	55 0b       	sbc	r21, r21
    2462:	bb 27       	eor	r27, r27
    2464:	aa 27       	eor	r26, r26
    2466:	62 17       	cp	r22, r18
    2468:	73 07       	cpc	r23, r19
    246a:	84 07       	cpc	r24, r20
    246c:	38 f0       	brcs	.+14     	; 0x247c <__divsf3_pse+0x26>
    246e:	9f 5f       	subi	r25, 0xFF	; 255
    2470:	5f 4f       	sbci	r21, 0xFF	; 255
    2472:	22 0f       	add	r18, r18
    2474:	33 1f       	adc	r19, r19
    2476:	44 1f       	adc	r20, r20
    2478:	aa 1f       	adc	r26, r26
    247a:	a9 f3       	breq	.-22     	; 0x2466 <__divsf3_pse+0x10>
    247c:	33 d0       	rcall	.+102    	; 0x24e4 <__divsf3_pse+0x8e>
    247e:	0e 2e       	mov	r0, r30
    2480:	3a f0       	brmi	.+14     	; 0x2490 <__divsf3_pse+0x3a>
    2482:	e0 e8       	ldi	r30, 0x80	; 128
    2484:	30 d0       	rcall	.+96     	; 0x24e6 <__divsf3_pse+0x90>
    2486:	91 50       	subi	r25, 0x01	; 1
    2488:	50 40       	sbci	r21, 0x00	; 0
    248a:	e6 95       	lsr	r30
    248c:	00 1c       	adc	r0, r0
    248e:	ca f7       	brpl	.-14     	; 0x2482 <__divsf3_pse+0x2c>
    2490:	29 d0       	rcall	.+82     	; 0x24e4 <__divsf3_pse+0x8e>
    2492:	fe 2f       	mov	r31, r30
    2494:	27 d0       	rcall	.+78     	; 0x24e4 <__divsf3_pse+0x8e>
    2496:	66 0f       	add	r22, r22
    2498:	77 1f       	adc	r23, r23
    249a:	88 1f       	adc	r24, r24
    249c:	bb 1f       	adc	r27, r27
    249e:	26 17       	cp	r18, r22
    24a0:	37 07       	cpc	r19, r23
    24a2:	48 07       	cpc	r20, r24
    24a4:	ab 07       	cpc	r26, r27
    24a6:	b0 e8       	ldi	r27, 0x80	; 128
    24a8:	09 f0       	breq	.+2      	; 0x24ac <__divsf3_pse+0x56>
    24aa:	bb 0b       	sbc	r27, r27
    24ac:	80 2d       	mov	r24, r0
    24ae:	bf 01       	movw	r22, r30
    24b0:	ff 27       	eor	r31, r31
    24b2:	93 58       	subi	r25, 0x83	; 131
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255
    24b6:	2a f0       	brmi	.+10     	; 0x24c2 <__divsf3_pse+0x6c>
    24b8:	9e 3f       	cpi	r25, 0xFE	; 254
    24ba:	51 05       	cpc	r21, r1
    24bc:	68 f0       	brcs	.+26     	; 0x24d8 <__divsf3_pse+0x82>
    24be:	b6 c0       	rjmp	.+364    	; 0x262c <__fp_inf>
    24c0:	00 c1       	rjmp	.+512    	; 0x26c2 <__fp_szero>
    24c2:	5f 3f       	cpi	r21, 0xFF	; 255
    24c4:	ec f3       	brlt	.-6      	; 0x24c0 <__divsf3_pse+0x6a>
    24c6:	98 3e       	cpi	r25, 0xE8	; 232
    24c8:	dc f3       	brlt	.-10     	; 0x24c0 <__divsf3_pse+0x6a>
    24ca:	86 95       	lsr	r24
    24cc:	77 95       	ror	r23
    24ce:	67 95       	ror	r22
    24d0:	b7 95       	ror	r27
    24d2:	f7 95       	ror	r31
    24d4:	9f 5f       	subi	r25, 0xFF	; 255
    24d6:	c9 f7       	brne	.-14     	; 0x24ca <__divsf3_pse+0x74>
    24d8:	88 0f       	add	r24, r24
    24da:	91 1d       	adc	r25, r1
    24dc:	96 95       	lsr	r25
    24de:	87 95       	ror	r24
    24e0:	97 f9       	bld	r25, 7
    24e2:	08 95       	ret
    24e4:	e1 e0       	ldi	r30, 0x01	; 1
    24e6:	66 0f       	add	r22, r22
    24e8:	77 1f       	adc	r23, r23
    24ea:	88 1f       	adc	r24, r24
    24ec:	bb 1f       	adc	r27, r27
    24ee:	62 17       	cp	r22, r18
    24f0:	73 07       	cpc	r23, r19
    24f2:	84 07       	cpc	r24, r20
    24f4:	ba 07       	cpc	r27, r26
    24f6:	20 f0       	brcs	.+8      	; 0x2500 <__divsf3_pse+0xaa>
    24f8:	62 1b       	sub	r22, r18
    24fa:	73 0b       	sbc	r23, r19
    24fc:	84 0b       	sbc	r24, r20
    24fe:	ba 0b       	sbc	r27, r26
    2500:	ee 1f       	adc	r30, r30
    2502:	88 f7       	brcc	.-30     	; 0x24e6 <__divsf3_pse+0x90>
    2504:	e0 95       	com	r30
    2506:	08 95       	ret

00002508 <__fixsfsi>:
    2508:	04 d0       	rcall	.+8      	; 0x2512 <__fixunssfsi>
    250a:	68 94       	set
    250c:	b1 11       	cpse	r27, r1
    250e:	d9 c0       	rjmp	.+434    	; 0x26c2 <__fp_szero>
    2510:	08 95       	ret

00002512 <__fixunssfsi>:
    2512:	bc d0       	rcall	.+376    	; 0x268c <__fp_splitA>
    2514:	88 f0       	brcs	.+34     	; 0x2538 <__fixunssfsi+0x26>
    2516:	9f 57       	subi	r25, 0x7F	; 127
    2518:	90 f0       	brcs	.+36     	; 0x253e <__fixunssfsi+0x2c>
    251a:	b9 2f       	mov	r27, r25
    251c:	99 27       	eor	r25, r25
    251e:	b7 51       	subi	r27, 0x17	; 23
    2520:	a0 f0       	brcs	.+40     	; 0x254a <__fixunssfsi+0x38>
    2522:	d1 f0       	breq	.+52     	; 0x2558 <__fixunssfsi+0x46>
    2524:	66 0f       	add	r22, r22
    2526:	77 1f       	adc	r23, r23
    2528:	88 1f       	adc	r24, r24
    252a:	99 1f       	adc	r25, r25
    252c:	1a f0       	brmi	.+6      	; 0x2534 <__fixunssfsi+0x22>
    252e:	ba 95       	dec	r27
    2530:	c9 f7       	brne	.-14     	; 0x2524 <__fixunssfsi+0x12>
    2532:	12 c0       	rjmp	.+36     	; 0x2558 <__fixunssfsi+0x46>
    2534:	b1 30       	cpi	r27, 0x01	; 1
    2536:	81 f0       	breq	.+32     	; 0x2558 <__fixunssfsi+0x46>
    2538:	c3 d0       	rcall	.+390    	; 0x26c0 <__fp_zero>
    253a:	b1 e0       	ldi	r27, 0x01	; 1
    253c:	08 95       	ret
    253e:	c0 c0       	rjmp	.+384    	; 0x26c0 <__fp_zero>
    2540:	67 2f       	mov	r22, r23
    2542:	78 2f       	mov	r23, r24
    2544:	88 27       	eor	r24, r24
    2546:	b8 5f       	subi	r27, 0xF8	; 248
    2548:	39 f0       	breq	.+14     	; 0x2558 <__fixunssfsi+0x46>
    254a:	b9 3f       	cpi	r27, 0xF9	; 249
    254c:	cc f3       	brlt	.-14     	; 0x2540 <__fixunssfsi+0x2e>
    254e:	86 95       	lsr	r24
    2550:	77 95       	ror	r23
    2552:	67 95       	ror	r22
    2554:	b3 95       	inc	r27
    2556:	d9 f7       	brne	.-10     	; 0x254e <__fixunssfsi+0x3c>
    2558:	3e f4       	brtc	.+14     	; 0x2568 <__fixunssfsi+0x56>
    255a:	90 95       	com	r25
    255c:	80 95       	com	r24
    255e:	70 95       	com	r23
    2560:	61 95       	neg	r22
    2562:	7f 4f       	sbci	r23, 0xFF	; 255
    2564:	8f 4f       	sbci	r24, 0xFF	; 255
    2566:	9f 4f       	sbci	r25, 0xFF	; 255
    2568:	08 95       	ret

0000256a <__floatunsisf>:
    256a:	e8 94       	clt
    256c:	09 c0       	rjmp	.+18     	; 0x2580 <__floatsisf+0x12>

0000256e <__floatsisf>:
    256e:	97 fb       	bst	r25, 7
    2570:	3e f4       	brtc	.+14     	; 0x2580 <__floatsisf+0x12>
    2572:	90 95       	com	r25
    2574:	80 95       	com	r24
    2576:	70 95       	com	r23
    2578:	61 95       	neg	r22
    257a:	7f 4f       	sbci	r23, 0xFF	; 255
    257c:	8f 4f       	sbci	r24, 0xFF	; 255
    257e:	9f 4f       	sbci	r25, 0xFF	; 255
    2580:	99 23       	and	r25, r25
    2582:	a9 f0       	breq	.+42     	; 0x25ae <__floatsisf+0x40>
    2584:	f9 2f       	mov	r31, r25
    2586:	96 e9       	ldi	r25, 0x96	; 150
    2588:	bb 27       	eor	r27, r27
    258a:	93 95       	inc	r25
    258c:	f6 95       	lsr	r31
    258e:	87 95       	ror	r24
    2590:	77 95       	ror	r23
    2592:	67 95       	ror	r22
    2594:	b7 95       	ror	r27
    2596:	f1 11       	cpse	r31, r1
    2598:	f8 cf       	rjmp	.-16     	; 0x258a <__floatsisf+0x1c>
    259a:	fa f4       	brpl	.+62     	; 0x25da <__floatsisf+0x6c>
    259c:	bb 0f       	add	r27, r27
    259e:	11 f4       	brne	.+4      	; 0x25a4 <__floatsisf+0x36>
    25a0:	60 ff       	sbrs	r22, 0
    25a2:	1b c0       	rjmp	.+54     	; 0x25da <__floatsisf+0x6c>
    25a4:	6f 5f       	subi	r22, 0xFF	; 255
    25a6:	7f 4f       	sbci	r23, 0xFF	; 255
    25a8:	8f 4f       	sbci	r24, 0xFF	; 255
    25aa:	9f 4f       	sbci	r25, 0xFF	; 255
    25ac:	16 c0       	rjmp	.+44     	; 0x25da <__floatsisf+0x6c>
    25ae:	88 23       	and	r24, r24
    25b0:	11 f0       	breq	.+4      	; 0x25b6 <__floatsisf+0x48>
    25b2:	96 e9       	ldi	r25, 0x96	; 150
    25b4:	11 c0       	rjmp	.+34     	; 0x25d8 <__floatsisf+0x6a>
    25b6:	77 23       	and	r23, r23
    25b8:	21 f0       	breq	.+8      	; 0x25c2 <__floatsisf+0x54>
    25ba:	9e e8       	ldi	r25, 0x8E	; 142
    25bc:	87 2f       	mov	r24, r23
    25be:	76 2f       	mov	r23, r22
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <__floatsisf+0x5e>
    25c2:	66 23       	and	r22, r22
    25c4:	71 f0       	breq	.+28     	; 0x25e2 <__floatsisf+0x74>
    25c6:	96 e8       	ldi	r25, 0x86	; 134
    25c8:	86 2f       	mov	r24, r22
    25ca:	70 e0       	ldi	r23, 0x00	; 0
    25cc:	60 e0       	ldi	r22, 0x00	; 0
    25ce:	2a f0       	brmi	.+10     	; 0x25da <__floatsisf+0x6c>
    25d0:	9a 95       	dec	r25
    25d2:	66 0f       	add	r22, r22
    25d4:	77 1f       	adc	r23, r23
    25d6:	88 1f       	adc	r24, r24
    25d8:	da f7       	brpl	.-10     	; 0x25d0 <__floatsisf+0x62>
    25da:	88 0f       	add	r24, r24
    25dc:	96 95       	lsr	r25
    25de:	87 95       	ror	r24
    25e0:	97 f9       	bld	r25, 7
    25e2:	08 95       	ret

000025e4 <__fp_cmp>:
    25e4:	99 0f       	add	r25, r25
    25e6:	00 08       	sbc	r0, r0
    25e8:	55 0f       	add	r21, r21
    25ea:	aa 0b       	sbc	r26, r26
    25ec:	e0 e8       	ldi	r30, 0x80	; 128
    25ee:	fe ef       	ldi	r31, 0xFE	; 254
    25f0:	16 16       	cp	r1, r22
    25f2:	17 06       	cpc	r1, r23
    25f4:	e8 07       	cpc	r30, r24
    25f6:	f9 07       	cpc	r31, r25
    25f8:	c0 f0       	brcs	.+48     	; 0x262a <__fp_cmp+0x46>
    25fa:	12 16       	cp	r1, r18
    25fc:	13 06       	cpc	r1, r19
    25fe:	e4 07       	cpc	r30, r20
    2600:	f5 07       	cpc	r31, r21
    2602:	98 f0       	brcs	.+38     	; 0x262a <__fp_cmp+0x46>
    2604:	62 1b       	sub	r22, r18
    2606:	73 0b       	sbc	r23, r19
    2608:	84 0b       	sbc	r24, r20
    260a:	95 0b       	sbc	r25, r21
    260c:	39 f4       	brne	.+14     	; 0x261c <__fp_cmp+0x38>
    260e:	0a 26       	eor	r0, r26
    2610:	61 f0       	breq	.+24     	; 0x262a <__fp_cmp+0x46>
    2612:	23 2b       	or	r18, r19
    2614:	24 2b       	or	r18, r20
    2616:	25 2b       	or	r18, r21
    2618:	21 f4       	brne	.+8      	; 0x2622 <__fp_cmp+0x3e>
    261a:	08 95       	ret
    261c:	0a 26       	eor	r0, r26
    261e:	09 f4       	brne	.+2      	; 0x2622 <__fp_cmp+0x3e>
    2620:	a1 40       	sbci	r26, 0x01	; 1
    2622:	a6 95       	lsr	r26
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	81 1d       	adc	r24, r1
    2628:	81 1d       	adc	r24, r1
    262a:	08 95       	ret

0000262c <__fp_inf>:
    262c:	97 f9       	bld	r25, 7
    262e:	9f 67       	ori	r25, 0x7F	; 127
    2630:	80 e8       	ldi	r24, 0x80	; 128
    2632:	70 e0       	ldi	r23, 0x00	; 0
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	08 95       	ret

00002638 <__fp_nan>:
    2638:	9f ef       	ldi	r25, 0xFF	; 255
    263a:	80 ec       	ldi	r24, 0xC0	; 192
    263c:	08 95       	ret

0000263e <__fp_pscA>:
    263e:	00 24       	eor	r0, r0
    2640:	0a 94       	dec	r0
    2642:	16 16       	cp	r1, r22
    2644:	17 06       	cpc	r1, r23
    2646:	18 06       	cpc	r1, r24
    2648:	09 06       	cpc	r0, r25
    264a:	08 95       	ret

0000264c <__fp_pscB>:
    264c:	00 24       	eor	r0, r0
    264e:	0a 94       	dec	r0
    2650:	12 16       	cp	r1, r18
    2652:	13 06       	cpc	r1, r19
    2654:	14 06       	cpc	r1, r20
    2656:	05 06       	cpc	r0, r21
    2658:	08 95       	ret

0000265a <__fp_round>:
    265a:	09 2e       	mov	r0, r25
    265c:	03 94       	inc	r0
    265e:	00 0c       	add	r0, r0
    2660:	11 f4       	brne	.+4      	; 0x2666 <__fp_round+0xc>
    2662:	88 23       	and	r24, r24
    2664:	52 f0       	brmi	.+20     	; 0x267a <__fp_round+0x20>
    2666:	bb 0f       	add	r27, r27
    2668:	40 f4       	brcc	.+16     	; 0x267a <__fp_round+0x20>
    266a:	bf 2b       	or	r27, r31
    266c:	11 f4       	brne	.+4      	; 0x2672 <__fp_round+0x18>
    266e:	60 ff       	sbrs	r22, 0
    2670:	04 c0       	rjmp	.+8      	; 0x267a <__fp_round+0x20>
    2672:	6f 5f       	subi	r22, 0xFF	; 255
    2674:	7f 4f       	sbci	r23, 0xFF	; 255
    2676:	8f 4f       	sbci	r24, 0xFF	; 255
    2678:	9f 4f       	sbci	r25, 0xFF	; 255
    267a:	08 95       	ret

0000267c <__fp_split3>:
    267c:	57 fd       	sbrc	r21, 7
    267e:	90 58       	subi	r25, 0x80	; 128
    2680:	44 0f       	add	r20, r20
    2682:	55 1f       	adc	r21, r21
    2684:	59 f0       	breq	.+22     	; 0x269c <__fp_splitA+0x10>
    2686:	5f 3f       	cpi	r21, 0xFF	; 255
    2688:	71 f0       	breq	.+28     	; 0x26a6 <__fp_splitA+0x1a>
    268a:	47 95       	ror	r20

0000268c <__fp_splitA>:
    268c:	88 0f       	add	r24, r24
    268e:	97 fb       	bst	r25, 7
    2690:	99 1f       	adc	r25, r25
    2692:	61 f0       	breq	.+24     	; 0x26ac <__fp_splitA+0x20>
    2694:	9f 3f       	cpi	r25, 0xFF	; 255
    2696:	79 f0       	breq	.+30     	; 0x26b6 <__fp_splitA+0x2a>
    2698:	87 95       	ror	r24
    269a:	08 95       	ret
    269c:	12 16       	cp	r1, r18
    269e:	13 06       	cpc	r1, r19
    26a0:	14 06       	cpc	r1, r20
    26a2:	55 1f       	adc	r21, r21
    26a4:	f2 cf       	rjmp	.-28     	; 0x268a <__fp_split3+0xe>
    26a6:	46 95       	lsr	r20
    26a8:	f1 df       	rcall	.-30     	; 0x268c <__fp_splitA>
    26aa:	08 c0       	rjmp	.+16     	; 0x26bc <__fp_splitA+0x30>
    26ac:	16 16       	cp	r1, r22
    26ae:	17 06       	cpc	r1, r23
    26b0:	18 06       	cpc	r1, r24
    26b2:	99 1f       	adc	r25, r25
    26b4:	f1 cf       	rjmp	.-30     	; 0x2698 <__fp_splitA+0xc>
    26b6:	86 95       	lsr	r24
    26b8:	71 05       	cpc	r23, r1
    26ba:	61 05       	cpc	r22, r1
    26bc:	08 94       	sec
    26be:	08 95       	ret

000026c0 <__fp_zero>:
    26c0:	e8 94       	clt

000026c2 <__fp_szero>:
    26c2:	bb 27       	eor	r27, r27
    26c4:	66 27       	eor	r22, r22
    26c6:	77 27       	eor	r23, r23
    26c8:	cb 01       	movw	r24, r22
    26ca:	97 f9       	bld	r25, 7
    26cc:	08 95       	ret

000026ce <__gesf2>:
    26ce:	8a df       	rcall	.-236    	; 0x25e4 <__fp_cmp>
    26d0:	08 f4       	brcc	.+2      	; 0x26d4 <__gesf2+0x6>
    26d2:	8f ef       	ldi	r24, 0xFF	; 255
    26d4:	08 95       	ret

000026d6 <__mulsf3>:
    26d6:	0b d0       	rcall	.+22     	; 0x26ee <__mulsf3x>
    26d8:	c0 cf       	rjmp	.-128    	; 0x265a <__fp_round>
    26da:	b1 df       	rcall	.-158    	; 0x263e <__fp_pscA>
    26dc:	28 f0       	brcs	.+10     	; 0x26e8 <__mulsf3+0x12>
    26de:	b6 df       	rcall	.-148    	; 0x264c <__fp_pscB>
    26e0:	18 f0       	brcs	.+6      	; 0x26e8 <__mulsf3+0x12>
    26e2:	95 23       	and	r25, r21
    26e4:	09 f0       	breq	.+2      	; 0x26e8 <__mulsf3+0x12>
    26e6:	a2 cf       	rjmp	.-188    	; 0x262c <__fp_inf>
    26e8:	a7 cf       	rjmp	.-178    	; 0x2638 <__fp_nan>
    26ea:	11 24       	eor	r1, r1
    26ec:	ea cf       	rjmp	.-44     	; 0x26c2 <__fp_szero>

000026ee <__mulsf3x>:
    26ee:	c6 df       	rcall	.-116    	; 0x267c <__fp_split3>
    26f0:	a0 f3       	brcs	.-24     	; 0x26da <__mulsf3+0x4>

000026f2 <__mulsf3_pse>:
    26f2:	95 9f       	mul	r25, r21
    26f4:	d1 f3       	breq	.-12     	; 0x26ea <__mulsf3+0x14>
    26f6:	95 0f       	add	r25, r21
    26f8:	50 e0       	ldi	r21, 0x00	; 0
    26fa:	55 1f       	adc	r21, r21
    26fc:	62 9f       	mul	r22, r18
    26fe:	f0 01       	movw	r30, r0
    2700:	72 9f       	mul	r23, r18
    2702:	bb 27       	eor	r27, r27
    2704:	f0 0d       	add	r31, r0
    2706:	b1 1d       	adc	r27, r1
    2708:	63 9f       	mul	r22, r19
    270a:	aa 27       	eor	r26, r26
    270c:	f0 0d       	add	r31, r0
    270e:	b1 1d       	adc	r27, r1
    2710:	aa 1f       	adc	r26, r26
    2712:	64 9f       	mul	r22, r20
    2714:	66 27       	eor	r22, r22
    2716:	b0 0d       	add	r27, r0
    2718:	a1 1d       	adc	r26, r1
    271a:	66 1f       	adc	r22, r22
    271c:	82 9f       	mul	r24, r18
    271e:	22 27       	eor	r18, r18
    2720:	b0 0d       	add	r27, r0
    2722:	a1 1d       	adc	r26, r1
    2724:	62 1f       	adc	r22, r18
    2726:	73 9f       	mul	r23, r19
    2728:	b0 0d       	add	r27, r0
    272a:	a1 1d       	adc	r26, r1
    272c:	62 1f       	adc	r22, r18
    272e:	83 9f       	mul	r24, r19
    2730:	a0 0d       	add	r26, r0
    2732:	61 1d       	adc	r22, r1
    2734:	22 1f       	adc	r18, r18
    2736:	74 9f       	mul	r23, r20
    2738:	33 27       	eor	r19, r19
    273a:	a0 0d       	add	r26, r0
    273c:	61 1d       	adc	r22, r1
    273e:	23 1f       	adc	r18, r19
    2740:	84 9f       	mul	r24, r20
    2742:	60 0d       	add	r22, r0
    2744:	21 1d       	adc	r18, r1
    2746:	82 2f       	mov	r24, r18
    2748:	76 2f       	mov	r23, r22
    274a:	6a 2f       	mov	r22, r26
    274c:	11 24       	eor	r1, r1
    274e:	9f 57       	subi	r25, 0x7F	; 127
    2750:	50 40       	sbci	r21, 0x00	; 0
    2752:	8a f0       	brmi	.+34     	; 0x2776 <__mulsf3_pse+0x84>
    2754:	e1 f0       	breq	.+56     	; 0x278e <__mulsf3_pse+0x9c>
    2756:	88 23       	and	r24, r24
    2758:	4a f0       	brmi	.+18     	; 0x276c <__mulsf3_pse+0x7a>
    275a:	ee 0f       	add	r30, r30
    275c:	ff 1f       	adc	r31, r31
    275e:	bb 1f       	adc	r27, r27
    2760:	66 1f       	adc	r22, r22
    2762:	77 1f       	adc	r23, r23
    2764:	88 1f       	adc	r24, r24
    2766:	91 50       	subi	r25, 0x01	; 1
    2768:	50 40       	sbci	r21, 0x00	; 0
    276a:	a9 f7       	brne	.-22     	; 0x2756 <__mulsf3_pse+0x64>
    276c:	9e 3f       	cpi	r25, 0xFE	; 254
    276e:	51 05       	cpc	r21, r1
    2770:	70 f0       	brcs	.+28     	; 0x278e <__mulsf3_pse+0x9c>
    2772:	5c cf       	rjmp	.-328    	; 0x262c <__fp_inf>
    2774:	a6 cf       	rjmp	.-180    	; 0x26c2 <__fp_szero>
    2776:	5f 3f       	cpi	r21, 0xFF	; 255
    2778:	ec f3       	brlt	.-6      	; 0x2774 <__mulsf3_pse+0x82>
    277a:	98 3e       	cpi	r25, 0xE8	; 232
    277c:	dc f3       	brlt	.-10     	; 0x2774 <__mulsf3_pse+0x82>
    277e:	86 95       	lsr	r24
    2780:	77 95       	ror	r23
    2782:	67 95       	ror	r22
    2784:	b7 95       	ror	r27
    2786:	f7 95       	ror	r31
    2788:	e7 95       	ror	r30
    278a:	9f 5f       	subi	r25, 0xFF	; 255
    278c:	c1 f7       	brne	.-16     	; 0x277e <__mulsf3_pse+0x8c>
    278e:	fe 2b       	or	r31, r30
    2790:	88 0f       	add	r24, r24
    2792:	91 1d       	adc	r25, r1
    2794:	96 95       	lsr	r25
    2796:	87 95       	ror	r24
    2798:	97 f9       	bld	r25, 7
    279a:	08 95       	ret

0000279c <__divmodhi4>:
    279c:	97 fb       	bst	r25, 7
    279e:	07 2e       	mov	r0, r23
    27a0:	16 f4       	brtc	.+4      	; 0x27a6 <__divmodhi4+0xa>
    27a2:	00 94       	com	r0
    27a4:	06 d0       	rcall	.+12     	; 0x27b2 <__divmodhi4_neg1>
    27a6:	77 fd       	sbrc	r23, 7
    27a8:	08 d0       	rcall	.+16     	; 0x27ba <__divmodhi4_neg2>
    27aa:	5e d0       	rcall	.+188    	; 0x2868 <__udivmodhi4>
    27ac:	07 fc       	sbrc	r0, 7
    27ae:	05 d0       	rcall	.+10     	; 0x27ba <__divmodhi4_neg2>
    27b0:	3e f4       	brtc	.+14     	; 0x27c0 <__divmodhi4_exit>

000027b2 <__divmodhi4_neg1>:
    27b2:	90 95       	com	r25
    27b4:	81 95       	neg	r24
    27b6:	9f 4f       	sbci	r25, 0xFF	; 255
    27b8:	08 95       	ret

000027ba <__divmodhi4_neg2>:
    27ba:	70 95       	com	r23
    27bc:	61 95       	neg	r22
    27be:	7f 4f       	sbci	r23, 0xFF	; 255

000027c0 <__divmodhi4_exit>:
    27c0:	08 95       	ret

000027c2 <__divmodsi4>:
    27c2:	05 2e       	mov	r0, r21
    27c4:	97 fb       	bst	r25, 7
    27c6:	16 f4       	brtc	.+4      	; 0x27cc <__divmodsi4+0xa>
    27c8:	00 94       	com	r0
    27ca:	0f d0       	rcall	.+30     	; 0x27ea <__negsi2>
    27cc:	57 fd       	sbrc	r21, 7
    27ce:	05 d0       	rcall	.+10     	; 0x27da <__divmodsi4_neg2>
    27d0:	5f d0       	rcall	.+190    	; 0x2890 <__udivmodsi4>
    27d2:	07 fc       	sbrc	r0, 7
    27d4:	02 d0       	rcall	.+4      	; 0x27da <__divmodsi4_neg2>
    27d6:	46 f4       	brtc	.+16     	; 0x27e8 <__divmodsi4_exit>
    27d8:	08 c0       	rjmp	.+16     	; 0x27ea <__negsi2>

000027da <__divmodsi4_neg2>:
    27da:	50 95       	com	r21
    27dc:	40 95       	com	r20
    27de:	30 95       	com	r19
    27e0:	21 95       	neg	r18
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	4f 4f       	sbci	r20, 0xFF	; 255
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255

000027e8 <__divmodsi4_exit>:
    27e8:	08 95       	ret

000027ea <__negsi2>:
    27ea:	90 95       	com	r25
    27ec:	80 95       	com	r24
    27ee:	70 95       	com	r23
    27f0:	61 95       	neg	r22
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255
    27f4:	8f 4f       	sbci	r24, 0xFF	; 255
    27f6:	9f 4f       	sbci	r25, 0xFF	; 255
    27f8:	08 95       	ret

000027fa <__ashldi3>:
    27fa:	0f 93       	push	r16
    27fc:	08 30       	cpi	r16, 0x08	; 8
    27fe:	90 f0       	brcs	.+36     	; 0x2824 <__ashldi3+0x2a>
    2800:	98 2f       	mov	r25, r24
    2802:	87 2f       	mov	r24, r23
    2804:	76 2f       	mov	r23, r22
    2806:	65 2f       	mov	r22, r21
    2808:	54 2f       	mov	r21, r20
    280a:	43 2f       	mov	r20, r19
    280c:	32 2f       	mov	r19, r18
    280e:	22 27       	eor	r18, r18
    2810:	08 50       	subi	r16, 0x08	; 8
    2812:	f4 cf       	rjmp	.-24     	; 0x27fc <__ashldi3+0x2>
    2814:	22 0f       	add	r18, r18
    2816:	33 1f       	adc	r19, r19
    2818:	44 1f       	adc	r20, r20
    281a:	55 1f       	adc	r21, r21
    281c:	66 1f       	adc	r22, r22
    281e:	77 1f       	adc	r23, r23
    2820:	88 1f       	adc	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	0a 95       	dec	r16
    2826:	b2 f7       	brpl	.-20     	; 0x2814 <__ashldi3+0x1a>
    2828:	0f 91       	pop	r16
    282a:	08 95       	ret

0000282c <__ashrdi3>:
    282c:	97 fb       	bst	r25, 7
    282e:	10 f8       	bld	r1, 0

00002830 <__lshrdi3>:
    2830:	16 94       	lsr	r1
    2832:	00 08       	sbc	r0, r0
    2834:	0f 93       	push	r16
    2836:	08 30       	cpi	r16, 0x08	; 8
    2838:	98 f0       	brcs	.+38     	; 0x2860 <__lshrdi3+0x30>
    283a:	08 50       	subi	r16, 0x08	; 8
    283c:	23 2f       	mov	r18, r19
    283e:	34 2f       	mov	r19, r20
    2840:	45 2f       	mov	r20, r21
    2842:	56 2f       	mov	r21, r22
    2844:	67 2f       	mov	r22, r23
    2846:	78 2f       	mov	r23, r24
    2848:	89 2f       	mov	r24, r25
    284a:	90 2d       	mov	r25, r0
    284c:	f4 cf       	rjmp	.-24     	; 0x2836 <__lshrdi3+0x6>
    284e:	05 94       	asr	r0
    2850:	97 95       	ror	r25
    2852:	87 95       	ror	r24
    2854:	77 95       	ror	r23
    2856:	67 95       	ror	r22
    2858:	57 95       	ror	r21
    285a:	47 95       	ror	r20
    285c:	37 95       	ror	r19
    285e:	27 95       	ror	r18
    2860:	0a 95       	dec	r16
    2862:	aa f7       	brpl	.-22     	; 0x284e <__lshrdi3+0x1e>
    2864:	0f 91       	pop	r16
    2866:	08 95       	ret

00002868 <__udivmodhi4>:
    2868:	aa 1b       	sub	r26, r26
    286a:	bb 1b       	sub	r27, r27
    286c:	51 e1       	ldi	r21, 0x11	; 17
    286e:	07 c0       	rjmp	.+14     	; 0x287e <__udivmodhi4_ep>

00002870 <__udivmodhi4_loop>:
    2870:	aa 1f       	adc	r26, r26
    2872:	bb 1f       	adc	r27, r27
    2874:	a6 17       	cp	r26, r22
    2876:	b7 07       	cpc	r27, r23
    2878:	10 f0       	brcs	.+4      	; 0x287e <__udivmodhi4_ep>
    287a:	a6 1b       	sub	r26, r22
    287c:	b7 0b       	sbc	r27, r23

0000287e <__udivmodhi4_ep>:
    287e:	88 1f       	adc	r24, r24
    2880:	99 1f       	adc	r25, r25
    2882:	5a 95       	dec	r21
    2884:	a9 f7       	brne	.-22     	; 0x2870 <__udivmodhi4_loop>
    2886:	80 95       	com	r24
    2888:	90 95       	com	r25
    288a:	bc 01       	movw	r22, r24
    288c:	cd 01       	movw	r24, r26
    288e:	08 95       	ret

00002890 <__udivmodsi4>:
    2890:	a1 e2       	ldi	r26, 0x21	; 33
    2892:	1a 2e       	mov	r1, r26
    2894:	aa 1b       	sub	r26, r26
    2896:	bb 1b       	sub	r27, r27
    2898:	fd 01       	movw	r30, r26
    289a:	0d c0       	rjmp	.+26     	; 0x28b6 <__udivmodsi4_ep>

0000289c <__udivmodsi4_loop>:
    289c:	aa 1f       	adc	r26, r26
    289e:	bb 1f       	adc	r27, r27
    28a0:	ee 1f       	adc	r30, r30
    28a2:	ff 1f       	adc	r31, r31
    28a4:	a2 17       	cp	r26, r18
    28a6:	b3 07       	cpc	r27, r19
    28a8:	e4 07       	cpc	r30, r20
    28aa:	f5 07       	cpc	r31, r21
    28ac:	20 f0       	brcs	.+8      	; 0x28b6 <__udivmodsi4_ep>
    28ae:	a2 1b       	sub	r26, r18
    28b0:	b3 0b       	sbc	r27, r19
    28b2:	e4 0b       	sbc	r30, r20
    28b4:	f5 0b       	sbc	r31, r21

000028b6 <__udivmodsi4_ep>:
    28b6:	66 1f       	adc	r22, r22
    28b8:	77 1f       	adc	r23, r23
    28ba:	88 1f       	adc	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	1a 94       	dec	r1
    28c0:	69 f7       	brne	.-38     	; 0x289c <__udivmodsi4_loop>
    28c2:	60 95       	com	r22
    28c4:	70 95       	com	r23
    28c6:	80 95       	com	r24
    28c8:	90 95       	com	r25
    28ca:	9b 01       	movw	r18, r22
    28cc:	ac 01       	movw	r20, r24
    28ce:	bd 01       	movw	r22, r26
    28d0:	cf 01       	movw	r24, r30
    28d2:	08 95       	ret

000028d4 <do_rand>:
    28d4:	8f 92       	push	r8
    28d6:	9f 92       	push	r9
    28d8:	af 92       	push	r10
    28da:	bf 92       	push	r11
    28dc:	cf 92       	push	r12
    28de:	df 92       	push	r13
    28e0:	ef 92       	push	r14
    28e2:	ff 92       	push	r15
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
    28e8:	ec 01       	movw	r28, r24
    28ea:	68 81       	ld	r22, Y
    28ec:	79 81       	ldd	r23, Y+1	; 0x01
    28ee:	8a 81       	ldd	r24, Y+2	; 0x02
    28f0:	9b 81       	ldd	r25, Y+3	; 0x03
    28f2:	61 15       	cp	r22, r1
    28f4:	71 05       	cpc	r23, r1
    28f6:	81 05       	cpc	r24, r1
    28f8:	91 05       	cpc	r25, r1
    28fa:	21 f4       	brne	.+8      	; 0x2904 <do_rand+0x30>
    28fc:	64 e2       	ldi	r22, 0x24	; 36
    28fe:	79 ed       	ldi	r23, 0xD9	; 217
    2900:	8b e5       	ldi	r24, 0x5B	; 91
    2902:	97 e0       	ldi	r25, 0x07	; 7
    2904:	2d e1       	ldi	r18, 0x1D	; 29
    2906:	33 ef       	ldi	r19, 0xF3	; 243
    2908:	41 e0       	ldi	r20, 0x01	; 1
    290a:	50 e0       	ldi	r21, 0x00	; 0
    290c:	5a df       	rcall	.-332    	; 0x27c2 <__divmodsi4>
    290e:	49 01       	movw	r8, r18
    2910:	5a 01       	movw	r10, r20
    2912:	9b 01       	movw	r18, r22
    2914:	ac 01       	movw	r20, r24
    2916:	a7 ea       	ldi	r26, 0xA7	; 167
    2918:	b1 e4       	ldi	r27, 0x41	; 65
    291a:	4b d4       	rcall	.+2198   	; 0x31b2 <__muluhisi3>
    291c:	6b 01       	movw	r12, r22
    291e:	7c 01       	movw	r14, r24
    2920:	ac ee       	ldi	r26, 0xEC	; 236
    2922:	b4 ef       	ldi	r27, 0xF4	; 244
    2924:	a5 01       	movw	r20, r10
    2926:	94 01       	movw	r18, r8
    2928:	50 d4       	rcall	.+2208   	; 0x31ca <__mulohisi3>
    292a:	c6 0e       	add	r12, r22
    292c:	d7 1e       	adc	r13, r23
    292e:	e8 1e       	adc	r14, r24
    2930:	f9 1e       	adc	r15, r25
    2932:	f7 fe       	sbrs	r15, 7
    2934:	06 c0       	rjmp	.+12     	; 0x2942 <do_rand+0x6e>
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	c8 1a       	sub	r12, r24
    293a:	d1 08       	sbc	r13, r1
    293c:	e1 08       	sbc	r14, r1
    293e:	80 e8       	ldi	r24, 0x80	; 128
    2940:	f8 0a       	sbc	r15, r24
    2942:	c8 82       	st	Y, r12
    2944:	d9 82       	std	Y+1, r13	; 0x01
    2946:	ea 82       	std	Y+2, r14	; 0x02
    2948:	fb 82       	std	Y+3, r15	; 0x03
    294a:	c6 01       	movw	r24, r12
    294c:	9f 77       	andi	r25, 0x7F	; 127
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	ff 90       	pop	r15
    2954:	ef 90       	pop	r14
    2956:	df 90       	pop	r13
    2958:	cf 90       	pop	r12
    295a:	bf 90       	pop	r11
    295c:	af 90       	pop	r10
    295e:	9f 90       	pop	r9
    2960:	8f 90       	pop	r8
    2962:	08 95       	ret

00002964 <rand_r>:
    2964:	b7 cf       	rjmp	.-146    	; 0x28d4 <do_rand>

00002966 <rand>:
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	91 e0       	ldi	r25, 0x01	; 1
    296a:	b4 cf       	rjmp	.-152    	; 0x28d4 <do_rand>

0000296c <srand>:
    296c:	a0 e0       	ldi	r26, 0x00	; 0
    296e:	b0 e0       	ldi	r27, 0x00	; 0
    2970:	80 93 00 01 	sts	0x0100, r24
    2974:	90 93 01 01 	sts	0x0101, r25
    2978:	a0 93 02 01 	sts	0x0102, r26
    297c:	b0 93 03 01 	sts	0x0103, r27
    2980:	08 95       	ret

00002982 <strcpy_P>:
    2982:	fb 01       	movw	r30, r22
    2984:	dc 01       	movw	r26, r24
    2986:	05 90       	lpm	r0, Z+
    2988:	0d 92       	st	X+, r0
    298a:	00 20       	and	r0, r0
    298c:	e1 f7       	brne	.-8      	; 0x2986 <strcpy_P+0x4>
    298e:	08 95       	ret

00002990 <fdevopen>:
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	cf 93       	push	r28
    2996:	df 93       	push	r29
    2998:	ec 01       	movw	r28, r24
    299a:	8b 01       	movw	r16, r22
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	31 f4       	brne	.+12     	; 0x29ac <fdevopen+0x1c>
    29a0:	61 15       	cp	r22, r1
    29a2:	71 05       	cpc	r23, r1
    29a4:	19 f4       	brne	.+6      	; 0x29ac <fdevopen+0x1c>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	37 c0       	rjmp	.+110    	; 0x2a1a <fdevopen+0x8a>
    29ac:	6e e0       	ldi	r22, 0x0E	; 14
    29ae:	70 e0       	ldi	r23, 0x00	; 0
    29b0:	81 e0       	ldi	r24, 0x01	; 1
    29b2:	90 e0       	ldi	r25, 0x00	; 0
    29b4:	10 d2       	rcall	.+1056   	; 0x2dd6 <calloc>
    29b6:	fc 01       	movw	r30, r24
    29b8:	00 97       	sbiw	r24, 0x00	; 0
    29ba:	a9 f3       	breq	.-22     	; 0x29a6 <fdevopen+0x16>
    29bc:	80 e8       	ldi	r24, 0x80	; 128
    29be:	83 83       	std	Z+3, r24	; 0x03
    29c0:	01 15       	cp	r16, r1
    29c2:	11 05       	cpc	r17, r1
    29c4:	71 f0       	breq	.+28     	; 0x29e2 <fdevopen+0x52>
    29c6:	13 87       	std	Z+11, r17	; 0x0b
    29c8:	02 87       	std	Z+10, r16	; 0x0a
    29ca:	81 e8       	ldi	r24, 0x81	; 129
    29cc:	83 83       	std	Z+3, r24	; 0x03
    29ce:	80 91 bf 03 	lds	r24, 0x03BF
    29d2:	90 91 c0 03 	lds	r25, 0x03C0
    29d6:	89 2b       	or	r24, r25
    29d8:	21 f4       	brne	.+8      	; 0x29e2 <fdevopen+0x52>
    29da:	f0 93 c0 03 	sts	0x03C0, r31
    29de:	e0 93 bf 03 	sts	0x03BF, r30
    29e2:	20 97       	sbiw	r28, 0x00	; 0
    29e4:	c9 f0       	breq	.+50     	; 0x2a18 <fdevopen+0x88>
    29e6:	d1 87       	std	Z+9, r29	; 0x09
    29e8:	c0 87       	std	Z+8, r28	; 0x08
    29ea:	83 81       	ldd	r24, Z+3	; 0x03
    29ec:	82 60       	ori	r24, 0x02	; 2
    29ee:	83 83       	std	Z+3, r24	; 0x03
    29f0:	80 91 c1 03 	lds	r24, 0x03C1
    29f4:	90 91 c2 03 	lds	r25, 0x03C2
    29f8:	89 2b       	or	r24, r25
    29fa:	71 f4       	brne	.+28     	; 0x2a18 <fdevopen+0x88>
    29fc:	f0 93 c2 03 	sts	0x03C2, r31
    2a00:	e0 93 c1 03 	sts	0x03C1, r30
    2a04:	80 91 c3 03 	lds	r24, 0x03C3
    2a08:	90 91 c4 03 	lds	r25, 0x03C4
    2a0c:	89 2b       	or	r24, r25
    2a0e:	21 f4       	brne	.+8      	; 0x2a18 <fdevopen+0x88>
    2a10:	f0 93 c4 03 	sts	0x03C4, r31
    2a14:	e0 93 c3 03 	sts	0x03C3, r30
    2a18:	cf 01       	movw	r24, r30
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	08 95       	ret

00002a24 <printf>:
    2a24:	a0 e0       	ldi	r26, 0x00	; 0
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	e7 e1       	ldi	r30, 0x17	; 23
    2a2a:	f5 e1       	ldi	r31, 0x15	; 21
    2a2c:	e2 c3       	rjmp	.+1988   	; 0x31f2 <__prologue_saves__+0x20>
    2a2e:	fe 01       	movw	r30, r28
    2a30:	35 96       	adiw	r30, 0x05	; 5
    2a32:	61 91       	ld	r22, Z+
    2a34:	71 91       	ld	r23, Z+
    2a36:	af 01       	movw	r20, r30
    2a38:	80 91 c1 03 	lds	r24, 0x03C1
    2a3c:	90 91 c2 03 	lds	r25, 0x03C2
    2a40:	07 d0       	rcall	.+14     	; 0x2a50 <vfprintf>
    2a42:	e2 e0       	ldi	r30, 0x02	; 2
    2a44:	f2 c3       	rjmp	.+2020   	; 0x322a <__epilogue_restores__+0x20>

00002a46 <putchar>:
    2a46:	60 91 c1 03 	lds	r22, 0x03C1
    2a4a:	70 91 c2 03 	lds	r23, 0x03C2
    2a4e:	21 c3       	rjmp	.+1602   	; 0x3092 <fputc>

00002a50 <vfprintf>:
    2a50:	ac e0       	ldi	r26, 0x0C	; 12
    2a52:	b0 e0       	ldi	r27, 0x00	; 0
    2a54:	ed e2       	ldi	r30, 0x2D	; 45
    2a56:	f5 e1       	ldi	r31, 0x15	; 21
    2a58:	bc c3       	rjmp	.+1912   	; 0x31d2 <__prologue_saves__>
    2a5a:	7c 01       	movw	r14, r24
    2a5c:	6b 01       	movw	r12, r22
    2a5e:	8a 01       	movw	r16, r20
    2a60:	fc 01       	movw	r30, r24
    2a62:	17 82       	std	Z+7, r1	; 0x07
    2a64:	16 82       	std	Z+6, r1	; 0x06
    2a66:	83 81       	ldd	r24, Z+3	; 0x03
    2a68:	81 ff       	sbrs	r24, 1
    2a6a:	b0 c1       	rjmp	.+864    	; 0x2dcc <vfprintf+0x37c>
    2a6c:	ce 01       	movw	r24, r28
    2a6e:	01 96       	adiw	r24, 0x01	; 1
    2a70:	4c 01       	movw	r8, r24
    2a72:	f7 01       	movw	r30, r14
    2a74:	93 81       	ldd	r25, Z+3	; 0x03
    2a76:	f6 01       	movw	r30, r12
    2a78:	93 fd       	sbrc	r25, 3
    2a7a:	85 91       	lpm	r24, Z+
    2a7c:	93 ff       	sbrs	r25, 3
    2a7e:	81 91       	ld	r24, Z+
    2a80:	6f 01       	movw	r12, r30
    2a82:	88 23       	and	r24, r24
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <vfprintf+0x38>
    2a86:	9e c1       	rjmp	.+828    	; 0x2dc4 <vfprintf+0x374>
    2a88:	85 32       	cpi	r24, 0x25	; 37
    2a8a:	39 f4       	brne	.+14     	; 0x2a9a <vfprintf+0x4a>
    2a8c:	93 fd       	sbrc	r25, 3
    2a8e:	85 91       	lpm	r24, Z+
    2a90:	93 ff       	sbrs	r25, 3
    2a92:	81 91       	ld	r24, Z+
    2a94:	6f 01       	movw	r12, r30
    2a96:	85 32       	cpi	r24, 0x25	; 37
    2a98:	21 f4       	brne	.+8      	; 0x2aa2 <vfprintf+0x52>
    2a9a:	b7 01       	movw	r22, r14
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	f9 d2       	rcall	.+1522   	; 0x3092 <fputc>
    2aa0:	e8 cf       	rjmp	.-48     	; 0x2a72 <vfprintf+0x22>
    2aa2:	51 2c       	mov	r5, r1
    2aa4:	31 2c       	mov	r3, r1
    2aa6:	20 e0       	ldi	r18, 0x00	; 0
    2aa8:	20 32       	cpi	r18, 0x20	; 32
    2aaa:	a0 f4       	brcc	.+40     	; 0x2ad4 <vfprintf+0x84>
    2aac:	8b 32       	cpi	r24, 0x2B	; 43
    2aae:	69 f0       	breq	.+26     	; 0x2aca <vfprintf+0x7a>
    2ab0:	30 f4       	brcc	.+12     	; 0x2abe <vfprintf+0x6e>
    2ab2:	80 32       	cpi	r24, 0x20	; 32
    2ab4:	59 f0       	breq	.+22     	; 0x2acc <vfprintf+0x7c>
    2ab6:	83 32       	cpi	r24, 0x23	; 35
    2ab8:	69 f4       	brne	.+26     	; 0x2ad4 <vfprintf+0x84>
    2aba:	20 61       	ori	r18, 0x10	; 16
    2abc:	2c c0       	rjmp	.+88     	; 0x2b16 <vfprintf+0xc6>
    2abe:	8d 32       	cpi	r24, 0x2D	; 45
    2ac0:	39 f0       	breq	.+14     	; 0x2ad0 <vfprintf+0x80>
    2ac2:	80 33       	cpi	r24, 0x30	; 48
    2ac4:	39 f4       	brne	.+14     	; 0x2ad4 <vfprintf+0x84>
    2ac6:	21 60       	ori	r18, 0x01	; 1
    2ac8:	26 c0       	rjmp	.+76     	; 0x2b16 <vfprintf+0xc6>
    2aca:	22 60       	ori	r18, 0x02	; 2
    2acc:	24 60       	ori	r18, 0x04	; 4
    2ace:	23 c0       	rjmp	.+70     	; 0x2b16 <vfprintf+0xc6>
    2ad0:	28 60       	ori	r18, 0x08	; 8
    2ad2:	21 c0       	rjmp	.+66     	; 0x2b16 <vfprintf+0xc6>
    2ad4:	27 fd       	sbrc	r18, 7
    2ad6:	27 c0       	rjmp	.+78     	; 0x2b26 <vfprintf+0xd6>
    2ad8:	30 ed       	ldi	r19, 0xD0	; 208
    2ada:	38 0f       	add	r19, r24
    2adc:	3a 30       	cpi	r19, 0x0A	; 10
    2ade:	78 f4       	brcc	.+30     	; 0x2afe <vfprintf+0xae>
    2ae0:	26 ff       	sbrs	r18, 6
    2ae2:	06 c0       	rjmp	.+12     	; 0x2af0 <vfprintf+0xa0>
    2ae4:	fa e0       	ldi	r31, 0x0A	; 10
    2ae6:	5f 9e       	mul	r5, r31
    2ae8:	30 0d       	add	r19, r0
    2aea:	11 24       	eor	r1, r1
    2aec:	53 2e       	mov	r5, r19
    2aee:	13 c0       	rjmp	.+38     	; 0x2b16 <vfprintf+0xc6>
    2af0:	8a e0       	ldi	r24, 0x0A	; 10
    2af2:	38 9e       	mul	r3, r24
    2af4:	30 0d       	add	r19, r0
    2af6:	11 24       	eor	r1, r1
    2af8:	33 2e       	mov	r3, r19
    2afa:	20 62       	ori	r18, 0x20	; 32
    2afc:	0c c0       	rjmp	.+24     	; 0x2b16 <vfprintf+0xc6>
    2afe:	8e 32       	cpi	r24, 0x2E	; 46
    2b00:	21 f4       	brne	.+8      	; 0x2b0a <vfprintf+0xba>
    2b02:	26 fd       	sbrc	r18, 6
    2b04:	5f c1       	rjmp	.+702    	; 0x2dc4 <vfprintf+0x374>
    2b06:	20 64       	ori	r18, 0x40	; 64
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <vfprintf+0xc6>
    2b0a:	8c 36       	cpi	r24, 0x6C	; 108
    2b0c:	11 f4       	brne	.+4      	; 0x2b12 <vfprintf+0xc2>
    2b0e:	20 68       	ori	r18, 0x80	; 128
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <vfprintf+0xc6>
    2b12:	88 36       	cpi	r24, 0x68	; 104
    2b14:	41 f4       	brne	.+16     	; 0x2b26 <vfprintf+0xd6>
    2b16:	f6 01       	movw	r30, r12
    2b18:	93 fd       	sbrc	r25, 3
    2b1a:	85 91       	lpm	r24, Z+
    2b1c:	93 ff       	sbrs	r25, 3
    2b1e:	81 91       	ld	r24, Z+
    2b20:	6f 01       	movw	r12, r30
    2b22:	81 11       	cpse	r24, r1
    2b24:	c1 cf       	rjmp	.-126    	; 0x2aa8 <vfprintf+0x58>
    2b26:	98 2f       	mov	r25, r24
    2b28:	9f 7d       	andi	r25, 0xDF	; 223
    2b2a:	95 54       	subi	r25, 0x45	; 69
    2b2c:	93 30       	cpi	r25, 0x03	; 3
    2b2e:	28 f4       	brcc	.+10     	; 0x2b3a <vfprintf+0xea>
    2b30:	0c 5f       	subi	r16, 0xFC	; 252
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	ff e3       	ldi	r31, 0x3F	; 63
    2b36:	f9 83       	std	Y+1, r31	; 0x01
    2b38:	0d c0       	rjmp	.+26     	; 0x2b54 <vfprintf+0x104>
    2b3a:	83 36       	cpi	r24, 0x63	; 99
    2b3c:	31 f0       	breq	.+12     	; 0x2b4a <vfprintf+0xfa>
    2b3e:	83 37       	cpi	r24, 0x73	; 115
    2b40:	71 f0       	breq	.+28     	; 0x2b5e <vfprintf+0x10e>
    2b42:	83 35       	cpi	r24, 0x53	; 83
    2b44:	09 f0       	breq	.+2      	; 0x2b48 <vfprintf+0xf8>
    2b46:	57 c0       	rjmp	.+174    	; 0x2bf6 <vfprintf+0x1a6>
    2b48:	21 c0       	rjmp	.+66     	; 0x2b8c <vfprintf+0x13c>
    2b4a:	f8 01       	movw	r30, r16
    2b4c:	80 81       	ld	r24, Z
    2b4e:	89 83       	std	Y+1, r24	; 0x01
    2b50:	0e 5f       	subi	r16, 0xFE	; 254
    2b52:	1f 4f       	sbci	r17, 0xFF	; 255
    2b54:	44 24       	eor	r4, r4
    2b56:	43 94       	inc	r4
    2b58:	51 2c       	mov	r5, r1
    2b5a:	54 01       	movw	r10, r8
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <vfprintf+0x136>
    2b5e:	38 01       	movw	r6, r16
    2b60:	f2 e0       	ldi	r31, 0x02	; 2
    2b62:	6f 0e       	add	r6, r31
    2b64:	71 1c       	adc	r7, r1
    2b66:	f8 01       	movw	r30, r16
    2b68:	a0 80       	ld	r10, Z
    2b6a:	b1 80       	ldd	r11, Z+1	; 0x01
    2b6c:	26 ff       	sbrs	r18, 6
    2b6e:	03 c0       	rjmp	.+6      	; 0x2b76 <vfprintf+0x126>
    2b70:	65 2d       	mov	r22, r5
    2b72:	70 e0       	ldi	r23, 0x00	; 0
    2b74:	02 c0       	rjmp	.+4      	; 0x2b7a <vfprintf+0x12a>
    2b76:	6f ef       	ldi	r22, 0xFF	; 255
    2b78:	7f ef       	ldi	r23, 0xFF	; 255
    2b7a:	c5 01       	movw	r24, r10
    2b7c:	2c 87       	std	Y+12, r18	; 0x0c
    2b7e:	7e d2       	rcall	.+1276   	; 0x307c <strnlen>
    2b80:	2c 01       	movw	r4, r24
    2b82:	83 01       	movw	r16, r6
    2b84:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b86:	2f 77       	andi	r18, 0x7F	; 127
    2b88:	22 2e       	mov	r2, r18
    2b8a:	16 c0       	rjmp	.+44     	; 0x2bb8 <vfprintf+0x168>
    2b8c:	38 01       	movw	r6, r16
    2b8e:	f2 e0       	ldi	r31, 0x02	; 2
    2b90:	6f 0e       	add	r6, r31
    2b92:	71 1c       	adc	r7, r1
    2b94:	f8 01       	movw	r30, r16
    2b96:	a0 80       	ld	r10, Z
    2b98:	b1 80       	ldd	r11, Z+1	; 0x01
    2b9a:	26 ff       	sbrs	r18, 6
    2b9c:	03 c0       	rjmp	.+6      	; 0x2ba4 <vfprintf+0x154>
    2b9e:	65 2d       	mov	r22, r5
    2ba0:	70 e0       	ldi	r23, 0x00	; 0
    2ba2:	02 c0       	rjmp	.+4      	; 0x2ba8 <vfprintf+0x158>
    2ba4:	6f ef       	ldi	r22, 0xFF	; 255
    2ba6:	7f ef       	ldi	r23, 0xFF	; 255
    2ba8:	c5 01       	movw	r24, r10
    2baa:	2c 87       	std	Y+12, r18	; 0x0c
    2bac:	55 d2       	rcall	.+1194   	; 0x3058 <strnlen_P>
    2bae:	2c 01       	movw	r4, r24
    2bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2bb2:	20 68       	ori	r18, 0x80	; 128
    2bb4:	22 2e       	mov	r2, r18
    2bb6:	83 01       	movw	r16, r6
    2bb8:	23 fc       	sbrc	r2, 3
    2bba:	19 c0       	rjmp	.+50     	; 0x2bee <vfprintf+0x19e>
    2bbc:	83 2d       	mov	r24, r3
    2bbe:	90 e0       	ldi	r25, 0x00	; 0
    2bc0:	48 16       	cp	r4, r24
    2bc2:	59 06       	cpc	r5, r25
    2bc4:	a0 f4       	brcc	.+40     	; 0x2bee <vfprintf+0x19e>
    2bc6:	b7 01       	movw	r22, r14
    2bc8:	80 e2       	ldi	r24, 0x20	; 32
    2bca:	90 e0       	ldi	r25, 0x00	; 0
    2bcc:	62 d2       	rcall	.+1220   	; 0x3092 <fputc>
    2bce:	3a 94       	dec	r3
    2bd0:	f5 cf       	rjmp	.-22     	; 0x2bbc <vfprintf+0x16c>
    2bd2:	f5 01       	movw	r30, r10
    2bd4:	27 fc       	sbrc	r2, 7
    2bd6:	85 91       	lpm	r24, Z+
    2bd8:	27 fe       	sbrs	r2, 7
    2bda:	81 91       	ld	r24, Z+
    2bdc:	5f 01       	movw	r10, r30
    2bde:	b7 01       	movw	r22, r14
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	57 d2       	rcall	.+1198   	; 0x3092 <fputc>
    2be4:	31 10       	cpse	r3, r1
    2be6:	3a 94       	dec	r3
    2be8:	f1 e0       	ldi	r31, 0x01	; 1
    2bea:	4f 1a       	sub	r4, r31
    2bec:	51 08       	sbc	r5, r1
    2bee:	41 14       	cp	r4, r1
    2bf0:	51 04       	cpc	r5, r1
    2bf2:	79 f7       	brne	.-34     	; 0x2bd2 <vfprintf+0x182>
    2bf4:	de c0       	rjmp	.+444    	; 0x2db2 <vfprintf+0x362>
    2bf6:	84 36       	cpi	r24, 0x64	; 100
    2bf8:	11 f0       	breq	.+4      	; 0x2bfe <vfprintf+0x1ae>
    2bfa:	89 36       	cpi	r24, 0x69	; 105
    2bfc:	31 f5       	brne	.+76     	; 0x2c4a <vfprintf+0x1fa>
    2bfe:	f8 01       	movw	r30, r16
    2c00:	27 ff       	sbrs	r18, 7
    2c02:	07 c0       	rjmp	.+14     	; 0x2c12 <vfprintf+0x1c2>
    2c04:	60 81       	ld	r22, Z
    2c06:	71 81       	ldd	r23, Z+1	; 0x01
    2c08:	82 81       	ldd	r24, Z+2	; 0x02
    2c0a:	93 81       	ldd	r25, Z+3	; 0x03
    2c0c:	0c 5f       	subi	r16, 0xFC	; 252
    2c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c10:	08 c0       	rjmp	.+16     	; 0x2c22 <vfprintf+0x1d2>
    2c12:	60 81       	ld	r22, Z
    2c14:	71 81       	ldd	r23, Z+1	; 0x01
    2c16:	88 27       	eor	r24, r24
    2c18:	77 fd       	sbrc	r23, 7
    2c1a:	80 95       	com	r24
    2c1c:	98 2f       	mov	r25, r24
    2c1e:	0e 5f       	subi	r16, 0xFE	; 254
    2c20:	1f 4f       	sbci	r17, 0xFF	; 255
    2c22:	2f 76       	andi	r18, 0x6F	; 111
    2c24:	b2 2e       	mov	r11, r18
    2c26:	97 ff       	sbrs	r25, 7
    2c28:	09 c0       	rjmp	.+18     	; 0x2c3c <vfprintf+0x1ec>
    2c2a:	90 95       	com	r25
    2c2c:	80 95       	com	r24
    2c2e:	70 95       	com	r23
    2c30:	61 95       	neg	r22
    2c32:	7f 4f       	sbci	r23, 0xFF	; 255
    2c34:	8f 4f       	sbci	r24, 0xFF	; 255
    2c36:	9f 4f       	sbci	r25, 0xFF	; 255
    2c38:	20 68       	ori	r18, 0x80	; 128
    2c3a:	b2 2e       	mov	r11, r18
    2c3c:	2a e0       	ldi	r18, 0x0A	; 10
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	a4 01       	movw	r20, r8
    2c42:	59 d2       	rcall	.+1202   	; 0x30f6 <__ultoa_invert>
    2c44:	a8 2e       	mov	r10, r24
    2c46:	a8 18       	sub	r10, r8
    2c48:	43 c0       	rjmp	.+134    	; 0x2cd0 <vfprintf+0x280>
    2c4a:	85 37       	cpi	r24, 0x75	; 117
    2c4c:	29 f4       	brne	.+10     	; 0x2c58 <vfprintf+0x208>
    2c4e:	2f 7e       	andi	r18, 0xEF	; 239
    2c50:	b2 2e       	mov	r11, r18
    2c52:	2a e0       	ldi	r18, 0x0A	; 10
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	25 c0       	rjmp	.+74     	; 0x2ca2 <vfprintf+0x252>
    2c58:	f2 2f       	mov	r31, r18
    2c5a:	f9 7f       	andi	r31, 0xF9	; 249
    2c5c:	bf 2e       	mov	r11, r31
    2c5e:	8f 36       	cpi	r24, 0x6F	; 111
    2c60:	c1 f0       	breq	.+48     	; 0x2c92 <vfprintf+0x242>
    2c62:	18 f4       	brcc	.+6      	; 0x2c6a <vfprintf+0x21a>
    2c64:	88 35       	cpi	r24, 0x58	; 88
    2c66:	79 f0       	breq	.+30     	; 0x2c86 <vfprintf+0x236>
    2c68:	ad c0       	rjmp	.+346    	; 0x2dc4 <vfprintf+0x374>
    2c6a:	80 37       	cpi	r24, 0x70	; 112
    2c6c:	19 f0       	breq	.+6      	; 0x2c74 <vfprintf+0x224>
    2c6e:	88 37       	cpi	r24, 0x78	; 120
    2c70:	21 f0       	breq	.+8      	; 0x2c7a <vfprintf+0x22a>
    2c72:	a8 c0       	rjmp	.+336    	; 0x2dc4 <vfprintf+0x374>
    2c74:	2f 2f       	mov	r18, r31
    2c76:	20 61       	ori	r18, 0x10	; 16
    2c78:	b2 2e       	mov	r11, r18
    2c7a:	b4 fe       	sbrs	r11, 4
    2c7c:	0d c0       	rjmp	.+26     	; 0x2c98 <vfprintf+0x248>
    2c7e:	8b 2d       	mov	r24, r11
    2c80:	84 60       	ori	r24, 0x04	; 4
    2c82:	b8 2e       	mov	r11, r24
    2c84:	09 c0       	rjmp	.+18     	; 0x2c98 <vfprintf+0x248>
    2c86:	24 ff       	sbrs	r18, 4
    2c88:	0a c0       	rjmp	.+20     	; 0x2c9e <vfprintf+0x24e>
    2c8a:	9f 2f       	mov	r25, r31
    2c8c:	96 60       	ori	r25, 0x06	; 6
    2c8e:	b9 2e       	mov	r11, r25
    2c90:	06 c0       	rjmp	.+12     	; 0x2c9e <vfprintf+0x24e>
    2c92:	28 e0       	ldi	r18, 0x08	; 8
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	05 c0       	rjmp	.+10     	; 0x2ca2 <vfprintf+0x252>
    2c98:	20 e1       	ldi	r18, 0x10	; 16
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	02 c0       	rjmp	.+4      	; 0x2ca2 <vfprintf+0x252>
    2c9e:	20 e1       	ldi	r18, 0x10	; 16
    2ca0:	32 e0       	ldi	r19, 0x02	; 2
    2ca2:	f8 01       	movw	r30, r16
    2ca4:	b7 fe       	sbrs	r11, 7
    2ca6:	07 c0       	rjmp	.+14     	; 0x2cb6 <vfprintf+0x266>
    2ca8:	60 81       	ld	r22, Z
    2caa:	71 81       	ldd	r23, Z+1	; 0x01
    2cac:	82 81       	ldd	r24, Z+2	; 0x02
    2cae:	93 81       	ldd	r25, Z+3	; 0x03
    2cb0:	0c 5f       	subi	r16, 0xFC	; 252
    2cb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb4:	06 c0       	rjmp	.+12     	; 0x2cc2 <vfprintf+0x272>
    2cb6:	60 81       	ld	r22, Z
    2cb8:	71 81       	ldd	r23, Z+1	; 0x01
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	90 e0       	ldi	r25, 0x00	; 0
    2cbe:	0e 5f       	subi	r16, 0xFE	; 254
    2cc0:	1f 4f       	sbci	r17, 0xFF	; 255
    2cc2:	a4 01       	movw	r20, r8
    2cc4:	18 d2       	rcall	.+1072   	; 0x30f6 <__ultoa_invert>
    2cc6:	a8 2e       	mov	r10, r24
    2cc8:	a8 18       	sub	r10, r8
    2cca:	fb 2d       	mov	r31, r11
    2ccc:	ff 77       	andi	r31, 0x7F	; 127
    2cce:	bf 2e       	mov	r11, r31
    2cd0:	b6 fe       	sbrs	r11, 6
    2cd2:	0b c0       	rjmp	.+22     	; 0x2cea <vfprintf+0x29a>
    2cd4:	2b 2d       	mov	r18, r11
    2cd6:	2e 7f       	andi	r18, 0xFE	; 254
    2cd8:	a5 14       	cp	r10, r5
    2cda:	50 f4       	brcc	.+20     	; 0x2cf0 <vfprintf+0x2a0>
    2cdc:	b4 fe       	sbrs	r11, 4
    2cde:	0a c0       	rjmp	.+20     	; 0x2cf4 <vfprintf+0x2a4>
    2ce0:	b2 fc       	sbrc	r11, 2
    2ce2:	08 c0       	rjmp	.+16     	; 0x2cf4 <vfprintf+0x2a4>
    2ce4:	2b 2d       	mov	r18, r11
    2ce6:	2e 7e       	andi	r18, 0xEE	; 238
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <vfprintf+0x2a4>
    2cea:	7a 2c       	mov	r7, r10
    2cec:	2b 2d       	mov	r18, r11
    2cee:	03 c0       	rjmp	.+6      	; 0x2cf6 <vfprintf+0x2a6>
    2cf0:	7a 2c       	mov	r7, r10
    2cf2:	01 c0       	rjmp	.+2      	; 0x2cf6 <vfprintf+0x2a6>
    2cf4:	75 2c       	mov	r7, r5
    2cf6:	24 ff       	sbrs	r18, 4
    2cf8:	0d c0       	rjmp	.+26     	; 0x2d14 <vfprintf+0x2c4>
    2cfa:	fe 01       	movw	r30, r28
    2cfc:	ea 0d       	add	r30, r10
    2cfe:	f1 1d       	adc	r31, r1
    2d00:	80 81       	ld	r24, Z
    2d02:	80 33       	cpi	r24, 0x30	; 48
    2d04:	11 f4       	brne	.+4      	; 0x2d0a <vfprintf+0x2ba>
    2d06:	29 7e       	andi	r18, 0xE9	; 233
    2d08:	09 c0       	rjmp	.+18     	; 0x2d1c <vfprintf+0x2cc>
    2d0a:	22 ff       	sbrs	r18, 2
    2d0c:	06 c0       	rjmp	.+12     	; 0x2d1a <vfprintf+0x2ca>
    2d0e:	73 94       	inc	r7
    2d10:	73 94       	inc	r7
    2d12:	04 c0       	rjmp	.+8      	; 0x2d1c <vfprintf+0x2cc>
    2d14:	82 2f       	mov	r24, r18
    2d16:	86 78       	andi	r24, 0x86	; 134
    2d18:	09 f0       	breq	.+2      	; 0x2d1c <vfprintf+0x2cc>
    2d1a:	73 94       	inc	r7
    2d1c:	23 fd       	sbrc	r18, 3
    2d1e:	12 c0       	rjmp	.+36     	; 0x2d44 <vfprintf+0x2f4>
    2d20:	20 ff       	sbrs	r18, 0
    2d22:	06 c0       	rjmp	.+12     	; 0x2d30 <vfprintf+0x2e0>
    2d24:	5a 2c       	mov	r5, r10
    2d26:	73 14       	cp	r7, r3
    2d28:	18 f4       	brcc	.+6      	; 0x2d30 <vfprintf+0x2e0>
    2d2a:	53 0c       	add	r5, r3
    2d2c:	57 18       	sub	r5, r7
    2d2e:	73 2c       	mov	r7, r3
    2d30:	73 14       	cp	r7, r3
    2d32:	60 f4       	brcc	.+24     	; 0x2d4c <vfprintf+0x2fc>
    2d34:	b7 01       	movw	r22, r14
    2d36:	80 e2       	ldi	r24, 0x20	; 32
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	2c 87       	std	Y+12, r18	; 0x0c
    2d3c:	aa d1       	rcall	.+852    	; 0x3092 <fputc>
    2d3e:	73 94       	inc	r7
    2d40:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d42:	f6 cf       	rjmp	.-20     	; 0x2d30 <vfprintf+0x2e0>
    2d44:	73 14       	cp	r7, r3
    2d46:	10 f4       	brcc	.+4      	; 0x2d4c <vfprintf+0x2fc>
    2d48:	37 18       	sub	r3, r7
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <vfprintf+0x2fe>
    2d4c:	31 2c       	mov	r3, r1
    2d4e:	24 ff       	sbrs	r18, 4
    2d50:	11 c0       	rjmp	.+34     	; 0x2d74 <vfprintf+0x324>
    2d52:	b7 01       	movw	r22, r14
    2d54:	80 e3       	ldi	r24, 0x30	; 48
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	2c 87       	std	Y+12, r18	; 0x0c
    2d5a:	9b d1       	rcall	.+822    	; 0x3092 <fputc>
    2d5c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2d5e:	22 ff       	sbrs	r18, 2
    2d60:	16 c0       	rjmp	.+44     	; 0x2d8e <vfprintf+0x33e>
    2d62:	21 ff       	sbrs	r18, 1
    2d64:	03 c0       	rjmp	.+6      	; 0x2d6c <vfprintf+0x31c>
    2d66:	88 e5       	ldi	r24, 0x58	; 88
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <vfprintf+0x320>
    2d6c:	88 e7       	ldi	r24, 0x78	; 120
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	b7 01       	movw	r22, r14
    2d72:	0c c0       	rjmp	.+24     	; 0x2d8c <vfprintf+0x33c>
    2d74:	82 2f       	mov	r24, r18
    2d76:	86 78       	andi	r24, 0x86	; 134
    2d78:	51 f0       	breq	.+20     	; 0x2d8e <vfprintf+0x33e>
    2d7a:	21 fd       	sbrc	r18, 1
    2d7c:	02 c0       	rjmp	.+4      	; 0x2d82 <vfprintf+0x332>
    2d7e:	80 e2       	ldi	r24, 0x20	; 32
    2d80:	01 c0       	rjmp	.+2      	; 0x2d84 <vfprintf+0x334>
    2d82:	8b e2       	ldi	r24, 0x2B	; 43
    2d84:	27 fd       	sbrc	r18, 7
    2d86:	8d e2       	ldi	r24, 0x2D	; 45
    2d88:	b7 01       	movw	r22, r14
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	82 d1       	rcall	.+772    	; 0x3092 <fputc>
    2d8e:	a5 14       	cp	r10, r5
    2d90:	30 f4       	brcc	.+12     	; 0x2d9e <vfprintf+0x34e>
    2d92:	b7 01       	movw	r22, r14
    2d94:	80 e3       	ldi	r24, 0x30	; 48
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	7c d1       	rcall	.+760    	; 0x3092 <fputc>
    2d9a:	5a 94       	dec	r5
    2d9c:	f8 cf       	rjmp	.-16     	; 0x2d8e <vfprintf+0x33e>
    2d9e:	aa 94       	dec	r10
    2da0:	f4 01       	movw	r30, r8
    2da2:	ea 0d       	add	r30, r10
    2da4:	f1 1d       	adc	r31, r1
    2da6:	80 81       	ld	r24, Z
    2da8:	b7 01       	movw	r22, r14
    2daa:	90 e0       	ldi	r25, 0x00	; 0
    2dac:	72 d1       	rcall	.+740    	; 0x3092 <fputc>
    2dae:	a1 10       	cpse	r10, r1
    2db0:	f6 cf       	rjmp	.-20     	; 0x2d9e <vfprintf+0x34e>
    2db2:	33 20       	and	r3, r3
    2db4:	09 f4       	brne	.+2      	; 0x2db8 <vfprintf+0x368>
    2db6:	5d ce       	rjmp	.-838    	; 0x2a72 <vfprintf+0x22>
    2db8:	b7 01       	movw	r22, r14
    2dba:	80 e2       	ldi	r24, 0x20	; 32
    2dbc:	90 e0       	ldi	r25, 0x00	; 0
    2dbe:	69 d1       	rcall	.+722    	; 0x3092 <fputc>
    2dc0:	3a 94       	dec	r3
    2dc2:	f7 cf       	rjmp	.-18     	; 0x2db2 <vfprintf+0x362>
    2dc4:	f7 01       	movw	r30, r14
    2dc6:	86 81       	ldd	r24, Z+6	; 0x06
    2dc8:	97 81       	ldd	r25, Z+7	; 0x07
    2dca:	02 c0       	rjmp	.+4      	; 0x2dd0 <vfprintf+0x380>
    2dcc:	8f ef       	ldi	r24, 0xFF	; 255
    2dce:	9f ef       	ldi	r25, 0xFF	; 255
    2dd0:	2c 96       	adiw	r28, 0x0c	; 12
    2dd2:	e2 e1       	ldi	r30, 0x12	; 18
    2dd4:	1a c2       	rjmp	.+1076   	; 0x320a <__epilogue_restores__>

00002dd6 <calloc>:
    2dd6:	0f 93       	push	r16
    2dd8:	1f 93       	push	r17
    2dda:	cf 93       	push	r28
    2ddc:	df 93       	push	r29
    2dde:	86 9f       	mul	r24, r22
    2de0:	80 01       	movw	r16, r0
    2de2:	87 9f       	mul	r24, r23
    2de4:	10 0d       	add	r17, r0
    2de6:	96 9f       	mul	r25, r22
    2de8:	10 0d       	add	r17, r0
    2dea:	11 24       	eor	r1, r1
    2dec:	c8 01       	movw	r24, r16
    2dee:	0d d0       	rcall	.+26     	; 0x2e0a <malloc>
    2df0:	ec 01       	movw	r28, r24
    2df2:	00 97       	sbiw	r24, 0x00	; 0
    2df4:	21 f0       	breq	.+8      	; 0x2dfe <calloc+0x28>
    2df6:	a8 01       	movw	r20, r16
    2df8:	60 e0       	ldi	r22, 0x00	; 0
    2dfa:	70 e0       	ldi	r23, 0x00	; 0
    2dfc:	38 d1       	rcall	.+624    	; 0x306e <memset>
    2dfe:	ce 01       	movw	r24, r28
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	1f 91       	pop	r17
    2e06:	0f 91       	pop	r16
    2e08:	08 95       	ret

00002e0a <malloc>:
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	82 30       	cpi	r24, 0x02	; 2
    2e10:	91 05       	cpc	r25, r1
    2e12:	10 f4       	brcc	.+4      	; 0x2e18 <malloc+0xe>
    2e14:	82 e0       	ldi	r24, 0x02	; 2
    2e16:	90 e0       	ldi	r25, 0x00	; 0
    2e18:	e0 91 c7 03 	lds	r30, 0x03C7
    2e1c:	f0 91 c8 03 	lds	r31, 0x03C8
    2e20:	20 e0       	ldi	r18, 0x00	; 0
    2e22:	30 e0       	ldi	r19, 0x00	; 0
    2e24:	a0 e0       	ldi	r26, 0x00	; 0
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	30 97       	sbiw	r30, 0x00	; 0
    2e2a:	39 f1       	breq	.+78     	; 0x2e7a <malloc+0x70>
    2e2c:	40 81       	ld	r20, Z
    2e2e:	51 81       	ldd	r21, Z+1	; 0x01
    2e30:	48 17       	cp	r20, r24
    2e32:	59 07       	cpc	r21, r25
    2e34:	b8 f0       	brcs	.+46     	; 0x2e64 <malloc+0x5a>
    2e36:	48 17       	cp	r20, r24
    2e38:	59 07       	cpc	r21, r25
    2e3a:	71 f4       	brne	.+28     	; 0x2e58 <malloc+0x4e>
    2e3c:	82 81       	ldd	r24, Z+2	; 0x02
    2e3e:	93 81       	ldd	r25, Z+3	; 0x03
    2e40:	10 97       	sbiw	r26, 0x00	; 0
    2e42:	29 f0       	breq	.+10     	; 0x2e4e <malloc+0x44>
    2e44:	13 96       	adiw	r26, 0x03	; 3
    2e46:	9c 93       	st	X, r25
    2e48:	8e 93       	st	-X, r24
    2e4a:	12 97       	sbiw	r26, 0x02	; 2
    2e4c:	2c c0       	rjmp	.+88     	; 0x2ea6 <malloc+0x9c>
    2e4e:	90 93 c8 03 	sts	0x03C8, r25
    2e52:	80 93 c7 03 	sts	0x03C7, r24
    2e56:	27 c0       	rjmp	.+78     	; 0x2ea6 <malloc+0x9c>
    2e58:	21 15       	cp	r18, r1
    2e5a:	31 05       	cpc	r19, r1
    2e5c:	31 f0       	breq	.+12     	; 0x2e6a <malloc+0x60>
    2e5e:	42 17       	cp	r20, r18
    2e60:	53 07       	cpc	r21, r19
    2e62:	18 f0       	brcs	.+6      	; 0x2e6a <malloc+0x60>
    2e64:	a9 01       	movw	r20, r18
    2e66:	db 01       	movw	r26, r22
    2e68:	01 c0       	rjmp	.+2      	; 0x2e6c <malloc+0x62>
    2e6a:	ef 01       	movw	r28, r30
    2e6c:	9a 01       	movw	r18, r20
    2e6e:	bd 01       	movw	r22, r26
    2e70:	df 01       	movw	r26, r30
    2e72:	02 80       	ldd	r0, Z+2	; 0x02
    2e74:	f3 81       	ldd	r31, Z+3	; 0x03
    2e76:	e0 2d       	mov	r30, r0
    2e78:	d7 cf       	rjmp	.-82     	; 0x2e28 <malloc+0x1e>
    2e7a:	21 15       	cp	r18, r1
    2e7c:	31 05       	cpc	r19, r1
    2e7e:	f9 f0       	breq	.+62     	; 0x2ebe <malloc+0xb4>
    2e80:	28 1b       	sub	r18, r24
    2e82:	39 0b       	sbc	r19, r25
    2e84:	24 30       	cpi	r18, 0x04	; 4
    2e86:	31 05       	cpc	r19, r1
    2e88:	80 f4       	brcc	.+32     	; 0x2eaa <malloc+0xa0>
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	61 15       	cp	r22, r1
    2e90:	71 05       	cpc	r23, r1
    2e92:	21 f0       	breq	.+8      	; 0x2e9c <malloc+0x92>
    2e94:	fb 01       	movw	r30, r22
    2e96:	93 83       	std	Z+3, r25	; 0x03
    2e98:	82 83       	std	Z+2, r24	; 0x02
    2e9a:	04 c0       	rjmp	.+8      	; 0x2ea4 <malloc+0x9a>
    2e9c:	90 93 c8 03 	sts	0x03C8, r25
    2ea0:	80 93 c7 03 	sts	0x03C7, r24
    2ea4:	fe 01       	movw	r30, r28
    2ea6:	32 96       	adiw	r30, 0x02	; 2
    2ea8:	44 c0       	rjmp	.+136    	; 0x2f32 <malloc+0x128>
    2eaa:	fe 01       	movw	r30, r28
    2eac:	e2 0f       	add	r30, r18
    2eae:	f3 1f       	adc	r31, r19
    2eb0:	81 93       	st	Z+, r24
    2eb2:	91 93       	st	Z+, r25
    2eb4:	22 50       	subi	r18, 0x02	; 2
    2eb6:	31 09       	sbc	r19, r1
    2eb8:	39 83       	std	Y+1, r19	; 0x01
    2eba:	28 83       	st	Y, r18
    2ebc:	3a c0       	rjmp	.+116    	; 0x2f32 <malloc+0x128>
    2ebe:	20 91 c5 03 	lds	r18, 0x03C5
    2ec2:	30 91 c6 03 	lds	r19, 0x03C6
    2ec6:	23 2b       	or	r18, r19
    2ec8:	41 f4       	brne	.+16     	; 0x2eda <malloc+0xd0>
    2eca:	20 91 06 01 	lds	r18, 0x0106
    2ece:	30 91 07 01 	lds	r19, 0x0107
    2ed2:	30 93 c6 03 	sts	0x03C6, r19
    2ed6:	20 93 c5 03 	sts	0x03C5, r18
    2eda:	20 91 04 01 	lds	r18, 0x0104
    2ede:	30 91 05 01 	lds	r19, 0x0105
    2ee2:	21 15       	cp	r18, r1
    2ee4:	31 05       	cpc	r19, r1
    2ee6:	41 f4       	brne	.+16     	; 0x2ef8 <malloc+0xee>
    2ee8:	2d b7       	in	r18, 0x3d	; 61
    2eea:	3e b7       	in	r19, 0x3e	; 62
    2eec:	40 91 08 01 	lds	r20, 0x0108
    2ef0:	50 91 09 01 	lds	r21, 0x0109
    2ef4:	24 1b       	sub	r18, r20
    2ef6:	35 0b       	sbc	r19, r21
    2ef8:	e0 91 c5 03 	lds	r30, 0x03C5
    2efc:	f0 91 c6 03 	lds	r31, 0x03C6
    2f00:	e2 17       	cp	r30, r18
    2f02:	f3 07       	cpc	r31, r19
    2f04:	a0 f4       	brcc	.+40     	; 0x2f2e <malloc+0x124>
    2f06:	2e 1b       	sub	r18, r30
    2f08:	3f 0b       	sbc	r19, r31
    2f0a:	28 17       	cp	r18, r24
    2f0c:	39 07       	cpc	r19, r25
    2f0e:	78 f0       	brcs	.+30     	; 0x2f2e <malloc+0x124>
    2f10:	ac 01       	movw	r20, r24
    2f12:	4e 5f       	subi	r20, 0xFE	; 254
    2f14:	5f 4f       	sbci	r21, 0xFF	; 255
    2f16:	24 17       	cp	r18, r20
    2f18:	35 07       	cpc	r19, r21
    2f1a:	48 f0       	brcs	.+18     	; 0x2f2e <malloc+0x124>
    2f1c:	4e 0f       	add	r20, r30
    2f1e:	5f 1f       	adc	r21, r31
    2f20:	50 93 c6 03 	sts	0x03C6, r21
    2f24:	40 93 c5 03 	sts	0x03C5, r20
    2f28:	81 93       	st	Z+, r24
    2f2a:	91 93       	st	Z+, r25
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <malloc+0x128>
    2f2e:	e0 e0       	ldi	r30, 0x00	; 0
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	cf 01       	movw	r24, r30
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	08 95       	ret

00002f3a <free>:
    2f3a:	cf 93       	push	r28
    2f3c:	df 93       	push	r29
    2f3e:	00 97       	sbiw	r24, 0x00	; 0
    2f40:	09 f4       	brne	.+2      	; 0x2f44 <free+0xa>
    2f42:	87 c0       	rjmp	.+270    	; 0x3052 <free+0x118>
    2f44:	fc 01       	movw	r30, r24
    2f46:	32 97       	sbiw	r30, 0x02	; 2
    2f48:	13 82       	std	Z+3, r1	; 0x03
    2f4a:	12 82       	std	Z+2, r1	; 0x02
    2f4c:	c0 91 c7 03 	lds	r28, 0x03C7
    2f50:	d0 91 c8 03 	lds	r29, 0x03C8
    2f54:	20 97       	sbiw	r28, 0x00	; 0
    2f56:	81 f4       	brne	.+32     	; 0x2f78 <free+0x3e>
    2f58:	20 81       	ld	r18, Z
    2f5a:	31 81       	ldd	r19, Z+1	; 0x01
    2f5c:	28 0f       	add	r18, r24
    2f5e:	39 1f       	adc	r19, r25
    2f60:	80 91 c5 03 	lds	r24, 0x03C5
    2f64:	90 91 c6 03 	lds	r25, 0x03C6
    2f68:	82 17       	cp	r24, r18
    2f6a:	93 07       	cpc	r25, r19
    2f6c:	79 f5       	brne	.+94     	; 0x2fcc <free+0x92>
    2f6e:	f0 93 c6 03 	sts	0x03C6, r31
    2f72:	e0 93 c5 03 	sts	0x03C5, r30
    2f76:	6d c0       	rjmp	.+218    	; 0x3052 <free+0x118>
    2f78:	de 01       	movw	r26, r28
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	ae 17       	cp	r26, r30
    2f80:	bf 07       	cpc	r27, r31
    2f82:	50 f4       	brcc	.+20     	; 0x2f98 <free+0x5e>
    2f84:	12 96       	adiw	r26, 0x02	; 2
    2f86:	4d 91       	ld	r20, X+
    2f88:	5c 91       	ld	r21, X
    2f8a:	13 97       	sbiw	r26, 0x03	; 3
    2f8c:	9d 01       	movw	r18, r26
    2f8e:	41 15       	cp	r20, r1
    2f90:	51 05       	cpc	r21, r1
    2f92:	09 f1       	breq	.+66     	; 0x2fd6 <free+0x9c>
    2f94:	da 01       	movw	r26, r20
    2f96:	f3 cf       	rjmp	.-26     	; 0x2f7e <free+0x44>
    2f98:	b3 83       	std	Z+3, r27	; 0x03
    2f9a:	a2 83       	std	Z+2, r26	; 0x02
    2f9c:	40 81       	ld	r20, Z
    2f9e:	51 81       	ldd	r21, Z+1	; 0x01
    2fa0:	84 0f       	add	r24, r20
    2fa2:	95 1f       	adc	r25, r21
    2fa4:	8a 17       	cp	r24, r26
    2fa6:	9b 07       	cpc	r25, r27
    2fa8:	71 f4       	brne	.+28     	; 0x2fc6 <free+0x8c>
    2faa:	8d 91       	ld	r24, X+
    2fac:	9c 91       	ld	r25, X
    2fae:	11 97       	sbiw	r26, 0x01	; 1
    2fb0:	84 0f       	add	r24, r20
    2fb2:	95 1f       	adc	r25, r21
    2fb4:	02 96       	adiw	r24, 0x02	; 2
    2fb6:	91 83       	std	Z+1, r25	; 0x01
    2fb8:	80 83       	st	Z, r24
    2fba:	12 96       	adiw	r26, 0x02	; 2
    2fbc:	8d 91       	ld	r24, X+
    2fbe:	9c 91       	ld	r25, X
    2fc0:	13 97       	sbiw	r26, 0x03	; 3
    2fc2:	93 83       	std	Z+3, r25	; 0x03
    2fc4:	82 83       	std	Z+2, r24	; 0x02
    2fc6:	21 15       	cp	r18, r1
    2fc8:	31 05       	cpc	r19, r1
    2fca:	29 f4       	brne	.+10     	; 0x2fd6 <free+0x9c>
    2fcc:	f0 93 c8 03 	sts	0x03C8, r31
    2fd0:	e0 93 c7 03 	sts	0x03C7, r30
    2fd4:	3e c0       	rjmp	.+124    	; 0x3052 <free+0x118>
    2fd6:	d9 01       	movw	r26, r18
    2fd8:	13 96       	adiw	r26, 0x03	; 3
    2fda:	fc 93       	st	X, r31
    2fdc:	ee 93       	st	-X, r30
    2fde:	12 97       	sbiw	r26, 0x02	; 2
    2fe0:	4d 91       	ld	r20, X+
    2fe2:	5d 91       	ld	r21, X+
    2fe4:	a4 0f       	add	r26, r20
    2fe6:	b5 1f       	adc	r27, r21
    2fe8:	ea 17       	cp	r30, r26
    2fea:	fb 07       	cpc	r31, r27
    2fec:	79 f4       	brne	.+30     	; 0x300c <free+0xd2>
    2fee:	80 81       	ld	r24, Z
    2ff0:	91 81       	ldd	r25, Z+1	; 0x01
    2ff2:	84 0f       	add	r24, r20
    2ff4:	95 1f       	adc	r25, r21
    2ff6:	02 96       	adiw	r24, 0x02	; 2
    2ff8:	d9 01       	movw	r26, r18
    2ffa:	11 96       	adiw	r26, 0x01	; 1
    2ffc:	9c 93       	st	X, r25
    2ffe:	8e 93       	st	-X, r24
    3000:	82 81       	ldd	r24, Z+2	; 0x02
    3002:	93 81       	ldd	r25, Z+3	; 0x03
    3004:	13 96       	adiw	r26, 0x03	; 3
    3006:	9c 93       	st	X, r25
    3008:	8e 93       	st	-X, r24
    300a:	12 97       	sbiw	r26, 0x02	; 2
    300c:	e0 e0       	ldi	r30, 0x00	; 0
    300e:	f0 e0       	ldi	r31, 0x00	; 0
    3010:	8a 81       	ldd	r24, Y+2	; 0x02
    3012:	9b 81       	ldd	r25, Y+3	; 0x03
    3014:	00 97       	sbiw	r24, 0x00	; 0
    3016:	19 f0       	breq	.+6      	; 0x301e <free+0xe4>
    3018:	fe 01       	movw	r30, r28
    301a:	ec 01       	movw	r28, r24
    301c:	f9 cf       	rjmp	.-14     	; 0x3010 <free+0xd6>
    301e:	ce 01       	movw	r24, r28
    3020:	02 96       	adiw	r24, 0x02	; 2
    3022:	28 81       	ld	r18, Y
    3024:	39 81       	ldd	r19, Y+1	; 0x01
    3026:	82 0f       	add	r24, r18
    3028:	93 1f       	adc	r25, r19
    302a:	20 91 c5 03 	lds	r18, 0x03C5
    302e:	30 91 c6 03 	lds	r19, 0x03C6
    3032:	28 17       	cp	r18, r24
    3034:	39 07       	cpc	r19, r25
    3036:	69 f4       	brne	.+26     	; 0x3052 <free+0x118>
    3038:	30 97       	sbiw	r30, 0x00	; 0
    303a:	29 f4       	brne	.+10     	; 0x3046 <free+0x10c>
    303c:	10 92 c8 03 	sts	0x03C8, r1
    3040:	10 92 c7 03 	sts	0x03C7, r1
    3044:	02 c0       	rjmp	.+4      	; 0x304a <free+0x110>
    3046:	13 82       	std	Z+3, r1	; 0x03
    3048:	12 82       	std	Z+2, r1	; 0x02
    304a:	d0 93 c6 03 	sts	0x03C6, r29
    304e:	c0 93 c5 03 	sts	0x03C5, r28
    3052:	df 91       	pop	r29
    3054:	cf 91       	pop	r28
    3056:	08 95       	ret

00003058 <strnlen_P>:
    3058:	fc 01       	movw	r30, r24
    305a:	05 90       	lpm	r0, Z+
    305c:	61 50       	subi	r22, 0x01	; 1
    305e:	70 40       	sbci	r23, 0x00	; 0
    3060:	01 10       	cpse	r0, r1
    3062:	d8 f7       	brcc	.-10     	; 0x305a <strnlen_P+0x2>
    3064:	80 95       	com	r24
    3066:	90 95       	com	r25
    3068:	8e 0f       	add	r24, r30
    306a:	9f 1f       	adc	r25, r31
    306c:	08 95       	ret

0000306e <memset>:
    306e:	dc 01       	movw	r26, r24
    3070:	01 c0       	rjmp	.+2      	; 0x3074 <memset+0x6>
    3072:	6d 93       	st	X+, r22
    3074:	41 50       	subi	r20, 0x01	; 1
    3076:	50 40       	sbci	r21, 0x00	; 0
    3078:	e0 f7       	brcc	.-8      	; 0x3072 <memset+0x4>
    307a:	08 95       	ret

0000307c <strnlen>:
    307c:	fc 01       	movw	r30, r24
    307e:	61 50       	subi	r22, 0x01	; 1
    3080:	70 40       	sbci	r23, 0x00	; 0
    3082:	01 90       	ld	r0, Z+
    3084:	01 10       	cpse	r0, r1
    3086:	d8 f7       	brcc	.-10     	; 0x307e <strnlen+0x2>
    3088:	80 95       	com	r24
    308a:	90 95       	com	r25
    308c:	8e 0f       	add	r24, r30
    308e:	9f 1f       	adc	r25, r31
    3090:	08 95       	ret

00003092 <fputc>:
    3092:	0f 93       	push	r16
    3094:	1f 93       	push	r17
    3096:	cf 93       	push	r28
    3098:	df 93       	push	r29
    309a:	18 2f       	mov	r17, r24
    309c:	09 2f       	mov	r16, r25
    309e:	eb 01       	movw	r28, r22
    30a0:	8b 81       	ldd	r24, Y+3	; 0x03
    30a2:	81 fd       	sbrc	r24, 1
    30a4:	03 c0       	rjmp	.+6      	; 0x30ac <fputc+0x1a>
    30a6:	8f ef       	ldi	r24, 0xFF	; 255
    30a8:	9f ef       	ldi	r25, 0xFF	; 255
    30aa:	20 c0       	rjmp	.+64     	; 0x30ec <fputc+0x5a>
    30ac:	82 ff       	sbrs	r24, 2
    30ae:	10 c0       	rjmp	.+32     	; 0x30d0 <fputc+0x3e>
    30b0:	4e 81       	ldd	r20, Y+6	; 0x06
    30b2:	5f 81       	ldd	r21, Y+7	; 0x07
    30b4:	2c 81       	ldd	r18, Y+4	; 0x04
    30b6:	3d 81       	ldd	r19, Y+5	; 0x05
    30b8:	42 17       	cp	r20, r18
    30ba:	53 07       	cpc	r21, r19
    30bc:	7c f4       	brge	.+30     	; 0x30dc <fputc+0x4a>
    30be:	e8 81       	ld	r30, Y
    30c0:	f9 81       	ldd	r31, Y+1	; 0x01
    30c2:	9f 01       	movw	r18, r30
    30c4:	2f 5f       	subi	r18, 0xFF	; 255
    30c6:	3f 4f       	sbci	r19, 0xFF	; 255
    30c8:	39 83       	std	Y+1, r19	; 0x01
    30ca:	28 83       	st	Y, r18
    30cc:	10 83       	st	Z, r17
    30ce:	06 c0       	rjmp	.+12     	; 0x30dc <fputc+0x4a>
    30d0:	e8 85       	ldd	r30, Y+8	; 0x08
    30d2:	f9 85       	ldd	r31, Y+9	; 0x09
    30d4:	81 2f       	mov	r24, r17
    30d6:	09 95       	icall
    30d8:	89 2b       	or	r24, r25
    30da:	29 f7       	brne	.-54     	; 0x30a6 <fputc+0x14>
    30dc:	2e 81       	ldd	r18, Y+6	; 0x06
    30de:	3f 81       	ldd	r19, Y+7	; 0x07
    30e0:	2f 5f       	subi	r18, 0xFF	; 255
    30e2:	3f 4f       	sbci	r19, 0xFF	; 255
    30e4:	3f 83       	std	Y+7, r19	; 0x07
    30e6:	2e 83       	std	Y+6, r18	; 0x06
    30e8:	81 2f       	mov	r24, r17
    30ea:	90 2f       	mov	r25, r16
    30ec:	df 91       	pop	r29
    30ee:	cf 91       	pop	r28
    30f0:	1f 91       	pop	r17
    30f2:	0f 91       	pop	r16
    30f4:	08 95       	ret

000030f6 <__ultoa_invert>:
    30f6:	fa 01       	movw	r30, r20
    30f8:	aa 27       	eor	r26, r26
    30fa:	28 30       	cpi	r18, 0x08	; 8
    30fc:	51 f1       	breq	.+84     	; 0x3152 <__ultoa_invert+0x5c>
    30fe:	20 31       	cpi	r18, 0x10	; 16
    3100:	81 f1       	breq	.+96     	; 0x3162 <__ultoa_invert+0x6c>
    3102:	e8 94       	clt
    3104:	6f 93       	push	r22
    3106:	6e 7f       	andi	r22, 0xFE	; 254
    3108:	6e 5f       	subi	r22, 0xFE	; 254
    310a:	7f 4f       	sbci	r23, 0xFF	; 255
    310c:	8f 4f       	sbci	r24, 0xFF	; 255
    310e:	9f 4f       	sbci	r25, 0xFF	; 255
    3110:	af 4f       	sbci	r26, 0xFF	; 255
    3112:	b1 e0       	ldi	r27, 0x01	; 1
    3114:	3e d0       	rcall	.+124    	; 0x3192 <__ultoa_invert+0x9c>
    3116:	b4 e0       	ldi	r27, 0x04	; 4
    3118:	3c d0       	rcall	.+120    	; 0x3192 <__ultoa_invert+0x9c>
    311a:	67 0f       	add	r22, r23
    311c:	78 1f       	adc	r23, r24
    311e:	89 1f       	adc	r24, r25
    3120:	9a 1f       	adc	r25, r26
    3122:	a1 1d       	adc	r26, r1
    3124:	68 0f       	add	r22, r24
    3126:	79 1f       	adc	r23, r25
    3128:	8a 1f       	adc	r24, r26
    312a:	91 1d       	adc	r25, r1
    312c:	a1 1d       	adc	r26, r1
    312e:	6a 0f       	add	r22, r26
    3130:	71 1d       	adc	r23, r1
    3132:	81 1d       	adc	r24, r1
    3134:	91 1d       	adc	r25, r1
    3136:	a1 1d       	adc	r26, r1
    3138:	20 d0       	rcall	.+64     	; 0x317a <__ultoa_invert+0x84>
    313a:	09 f4       	brne	.+2      	; 0x313e <__ultoa_invert+0x48>
    313c:	68 94       	set
    313e:	3f 91       	pop	r19
    3140:	2a e0       	ldi	r18, 0x0A	; 10
    3142:	26 9f       	mul	r18, r22
    3144:	11 24       	eor	r1, r1
    3146:	30 19       	sub	r19, r0
    3148:	30 5d       	subi	r19, 0xD0	; 208
    314a:	31 93       	st	Z+, r19
    314c:	de f6       	brtc	.-74     	; 0x3104 <__ultoa_invert+0xe>
    314e:	cf 01       	movw	r24, r30
    3150:	08 95       	ret
    3152:	46 2f       	mov	r20, r22
    3154:	47 70       	andi	r20, 0x07	; 7
    3156:	40 5d       	subi	r20, 0xD0	; 208
    3158:	41 93       	st	Z+, r20
    315a:	b3 e0       	ldi	r27, 0x03	; 3
    315c:	0f d0       	rcall	.+30     	; 0x317c <__ultoa_invert+0x86>
    315e:	c9 f7       	brne	.-14     	; 0x3152 <__ultoa_invert+0x5c>
    3160:	f6 cf       	rjmp	.-20     	; 0x314e <__ultoa_invert+0x58>
    3162:	46 2f       	mov	r20, r22
    3164:	4f 70       	andi	r20, 0x0F	; 15
    3166:	40 5d       	subi	r20, 0xD0	; 208
    3168:	4a 33       	cpi	r20, 0x3A	; 58
    316a:	18 f0       	brcs	.+6      	; 0x3172 <__ultoa_invert+0x7c>
    316c:	49 5d       	subi	r20, 0xD9	; 217
    316e:	31 fd       	sbrc	r19, 1
    3170:	40 52       	subi	r20, 0x20	; 32
    3172:	41 93       	st	Z+, r20
    3174:	02 d0       	rcall	.+4      	; 0x317a <__ultoa_invert+0x84>
    3176:	a9 f7       	brne	.-22     	; 0x3162 <__ultoa_invert+0x6c>
    3178:	ea cf       	rjmp	.-44     	; 0x314e <__ultoa_invert+0x58>
    317a:	b4 e0       	ldi	r27, 0x04	; 4
    317c:	a6 95       	lsr	r26
    317e:	97 95       	ror	r25
    3180:	87 95       	ror	r24
    3182:	77 95       	ror	r23
    3184:	67 95       	ror	r22
    3186:	ba 95       	dec	r27
    3188:	c9 f7       	brne	.-14     	; 0x317c <__ultoa_invert+0x86>
    318a:	00 97       	sbiw	r24, 0x00	; 0
    318c:	61 05       	cpc	r22, r1
    318e:	71 05       	cpc	r23, r1
    3190:	08 95       	ret
    3192:	9b 01       	movw	r18, r22
    3194:	ac 01       	movw	r20, r24
    3196:	0a 2e       	mov	r0, r26
    3198:	06 94       	lsr	r0
    319a:	57 95       	ror	r21
    319c:	47 95       	ror	r20
    319e:	37 95       	ror	r19
    31a0:	27 95       	ror	r18
    31a2:	ba 95       	dec	r27
    31a4:	c9 f7       	brne	.-14     	; 0x3198 <__ultoa_invert+0xa2>
    31a6:	62 0f       	add	r22, r18
    31a8:	73 1f       	adc	r23, r19
    31aa:	84 1f       	adc	r24, r20
    31ac:	95 1f       	adc	r25, r21
    31ae:	a0 1d       	adc	r26, r0
    31b0:	08 95       	ret

000031b2 <__muluhisi3>:
    31b2:	46 d0       	rcall	.+140    	; 0x3240 <__umulhisi3>
    31b4:	a5 9f       	mul	r26, r21
    31b6:	90 0d       	add	r25, r0
    31b8:	b4 9f       	mul	r27, r20
    31ba:	90 0d       	add	r25, r0
    31bc:	a4 9f       	mul	r26, r20
    31be:	80 0d       	add	r24, r0
    31c0:	91 1d       	adc	r25, r1
    31c2:	11 24       	eor	r1, r1
    31c4:	08 95       	ret

000031c6 <__mulshisi3>:
    31c6:	b7 ff       	sbrs	r27, 7
    31c8:	f4 cf       	rjmp	.-24     	; 0x31b2 <__muluhisi3>

000031ca <__mulohisi3>:
    31ca:	f3 df       	rcall	.-26     	; 0x31b2 <__muluhisi3>
    31cc:	82 1b       	sub	r24, r18
    31ce:	93 0b       	sbc	r25, r19
    31d0:	08 95       	ret

000031d2 <__prologue_saves__>:
    31d2:	2f 92       	push	r2
    31d4:	3f 92       	push	r3
    31d6:	4f 92       	push	r4
    31d8:	5f 92       	push	r5
    31da:	6f 92       	push	r6
    31dc:	7f 92       	push	r7
    31de:	8f 92       	push	r8
    31e0:	9f 92       	push	r9
    31e2:	af 92       	push	r10
    31e4:	bf 92       	push	r11
    31e6:	cf 92       	push	r12
    31e8:	df 92       	push	r13
    31ea:	ef 92       	push	r14
    31ec:	ff 92       	push	r15
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	cd b7       	in	r28, 0x3d	; 61
    31f8:	de b7       	in	r29, 0x3e	; 62
    31fa:	ca 1b       	sub	r28, r26
    31fc:	db 0b       	sbc	r29, r27
    31fe:	0f b6       	in	r0, 0x3f	; 63
    3200:	f8 94       	cli
    3202:	de bf       	out	0x3e, r29	; 62
    3204:	0f be       	out	0x3f, r0	; 63
    3206:	cd bf       	out	0x3d, r28	; 61
    3208:	09 94       	ijmp

0000320a <__epilogue_restores__>:
    320a:	2a 88       	ldd	r2, Y+18	; 0x12
    320c:	39 88       	ldd	r3, Y+17	; 0x11
    320e:	48 88       	ldd	r4, Y+16	; 0x10
    3210:	5f 84       	ldd	r5, Y+15	; 0x0f
    3212:	6e 84       	ldd	r6, Y+14	; 0x0e
    3214:	7d 84       	ldd	r7, Y+13	; 0x0d
    3216:	8c 84       	ldd	r8, Y+12	; 0x0c
    3218:	9b 84       	ldd	r9, Y+11	; 0x0b
    321a:	aa 84       	ldd	r10, Y+10	; 0x0a
    321c:	b9 84       	ldd	r11, Y+9	; 0x09
    321e:	c8 84       	ldd	r12, Y+8	; 0x08
    3220:	df 80       	ldd	r13, Y+7	; 0x07
    3222:	ee 80       	ldd	r14, Y+6	; 0x06
    3224:	fd 80       	ldd	r15, Y+5	; 0x05
    3226:	0c 81       	ldd	r16, Y+4	; 0x04
    3228:	1b 81       	ldd	r17, Y+3	; 0x03
    322a:	aa 81       	ldd	r26, Y+2	; 0x02
    322c:	b9 81       	ldd	r27, Y+1	; 0x01
    322e:	ce 0f       	add	r28, r30
    3230:	d1 1d       	adc	r29, r1
    3232:	0f b6       	in	r0, 0x3f	; 63
    3234:	f8 94       	cli
    3236:	de bf       	out	0x3e, r29	; 62
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	cd bf       	out	0x3d, r28	; 61
    323c:	ed 01       	movw	r28, r26
    323e:	08 95       	ret

00003240 <__umulhisi3>:
    3240:	a2 9f       	mul	r26, r18
    3242:	b0 01       	movw	r22, r0
    3244:	b3 9f       	mul	r27, r19
    3246:	c0 01       	movw	r24, r0
    3248:	a3 9f       	mul	r26, r19
    324a:	70 0d       	add	r23, r0
    324c:	81 1d       	adc	r24, r1
    324e:	11 24       	eor	r1, r1
    3250:	91 1d       	adc	r25, r1
    3252:	b2 9f       	mul	r27, r18
    3254:	70 0d       	add	r23, r0
    3256:	81 1d       	adc	r24, r1
    3258:	11 24       	eor	r1, r1
    325a:	91 1d       	adc	r25, r1
    325c:	08 95       	ret

0000325e <_exit>:
    325e:	f8 94       	cli

00003260 <__stop_program>:
    3260:	ff cf       	rjmp	.-2      	; 0x3260 <__stop_program>
