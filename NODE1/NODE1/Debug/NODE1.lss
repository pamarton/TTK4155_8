
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  0000305e  000030f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000305e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000cd  008002ba  008002ba  000032ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000032ac  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000470  00000000  00000000  00003308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00004ac4  00000000  00000000  00003778  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000141d  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000025d7  00000000  00000000  00009659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000d2c  00000000  00000000  0000bc30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000f72  00000000  00000000  0000c95c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003b29  00000000  00000000  0000d8ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000004a8  00000000  00000000  000113f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	18 c2       	rjmp	.+1072   	; 0x432 <__ctors_end>
       2:	00 00       	nop
       4:	b1 c3       	rjmp	.+1890   	; 0x768 <__vector_1>
       6:	00 00       	nop
       8:	be c3       	rjmp	.+1916   	; 0x786 <__vector_2>
       a:	00 00       	nop
       c:	41 c2       	rjmp	.+1154   	; 0x490 <__vector_3>
       e:	00 00       	nop
      10:	2d c2       	rjmp	.+1114   	; 0x46c <__bad_interrupt>
      12:	00 00       	nop
      14:	2b c2       	rjmp	.+1110   	; 0x46c <__bad_interrupt>
      16:	00 00       	nop
      18:	29 c2       	rjmp	.+1106   	; 0x46c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	27 c2       	rjmp	.+1102   	; 0x46c <__bad_interrupt>
      1e:	00 00       	nop
      20:	25 c2       	rjmp	.+1098   	; 0x46c <__bad_interrupt>
      22:	00 00       	nop
      24:	23 c2       	rjmp	.+1094   	; 0x46c <__bad_interrupt>
      26:	00 00       	nop
      28:	21 c2       	rjmp	.+1090   	; 0x46c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	1f c2       	rjmp	.+1086   	; 0x46c <__bad_interrupt>
      2e:	00 00       	nop
      30:	1d c2       	rjmp	.+1082   	; 0x46c <__bad_interrupt>
      32:	00 00       	nop
      34:	1b c2       	rjmp	.+1078   	; 0x46c <__bad_interrupt>
      36:	00 00       	nop
      38:	19 c2       	rjmp	.+1074   	; 0x46c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	17 c2       	rjmp	.+1070   	; 0x46c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 87 10 	jmp	0x210e	; 0x210e <__vector_16>
      44:	13 c2       	rjmp	.+1062   	; 0x46c <__bad_interrupt>
      46:	00 00       	nop
      48:	11 c2       	rjmp	.+1058   	; 0x46c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	0f c2       	rjmp	.+1054   	; 0x46c <__bad_interrupt>
      4e:	00 00       	nop
      50:	0d c2       	rjmp	.+1050   	; 0x46c <__bad_interrupt>
      52:	00 00       	nop
      54:	0b c2       	rjmp	.+1046   	; 0x46c <__bad_interrupt>
      56:	00 00       	nop
      58:	09 c2       	rjmp	.+1042   	; 0x46c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	07 c2       	rjmp	.+1038   	; 0x46c <__bad_interrupt>
      5e:	00 00       	nop
      60:	05 c2       	rjmp	.+1034   	; 0x46c <__bad_interrupt>
      62:	00 00       	nop
      64:	03 c2       	rjmp	.+1030   	; 0x46c <__bad_interrupt>
      66:	00 00       	nop
      68:	01 c2       	rjmp	.+1026   	; 0x46c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ff c1       	rjmp	.+1022   	; 0x46c <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_options>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_debug>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_start>:
      ea:	53 74 61 72 74 00                                   Start.

000000f0 <game_entry_1>:
      f0:	32 30 34 38 00                                      2048.

000000f5 <game_entry_0>:
      f5:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

00000102 <mainmenu_entry_games>:
     102:	47 61 6d 65 73 00                                   Games.

00000108 <mainmenu_entry_highscore>:
     108:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

00000112 <font>:
	...
     11a:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     12a:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     13a:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     14a:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     15a:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     16a:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     17a:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     18a:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     19a:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     1aa:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     1ba:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ca:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1da:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1ea:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1fa:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     20a:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     21a:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     22a:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     23a:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     24a:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     25a:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     26a:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     27a:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     28a:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     29a:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     2aa:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     2ba:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ca:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2da:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2ea:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2fa:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     30a:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     31a:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     32a:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     33a:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     34a:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     35a:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     36a:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     37a:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     38a:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     39a:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     3aa:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     3ba:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ca:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3da:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3ea:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3fa:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     40a:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     41a:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     42a:	01 01 01 01 01 01 01 ff                             ........

00000432 <__ctors_end>:
     432:	11 24       	eor	r1, r1
     434:	1f be       	out	0x3f, r1	; 63
     436:	cf ef       	ldi	r28, 0xFF	; 255
     438:	d4 e0       	ldi	r29, 0x04	; 4
     43a:	de bf       	out	0x3e, r29	; 62
     43c:	cd bf       	out	0x3d, r28	; 61

0000043e <__do_copy_data>:
     43e:	12 e0       	ldi	r17, 0x02	; 2
     440:	a0 e0       	ldi	r26, 0x00	; 0
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	ee e5       	ldi	r30, 0x5E	; 94
     446:	f0 e3       	ldi	r31, 0x30	; 48
     448:	02 c0       	rjmp	.+4      	; 0x44e <__do_copy_data+0x10>
     44a:	05 90       	lpm	r0, Z+
     44c:	0d 92       	st	X+, r0
     44e:	aa 3b       	cpi	r26, 0xBA	; 186
     450:	b1 07       	cpc	r27, r17
     452:	d9 f7       	brne	.-10     	; 0x44a <__do_copy_data+0xc>

00000454 <__do_clear_bss>:
     454:	23 e0       	ldi	r18, 0x03	; 3
     456:	aa eb       	ldi	r26, 0xBA	; 186
     458:	b2 e0       	ldi	r27, 0x02	; 2
     45a:	01 c0       	rjmp	.+2      	; 0x45e <.do_clear_bss_start>

0000045c <.do_clear_bss_loop>:
     45c:	1d 92       	st	X+, r1

0000045e <.do_clear_bss_start>:
     45e:	a7 38       	cpi	r26, 0x87	; 135
     460:	b2 07       	cpc	r27, r18
     462:	e1 f7       	brne	.-8      	; 0x45c <.do_clear_bss_loop>
     464:	0e 94 47 0b 	call	0x168e	; 0x168e <main>
     468:	0c 94 2d 18 	jmp	0x305a	; 0x305a <_exit>

0000046c <__bad_interrupt>:
     46c:	c9 cd       	rjmp	.-1134   	; 0x0 <__vectors>

0000046e <CAN_construct_message>:
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
}
     46e:	90 93 bc 02 	sts	0x02BC, r25
     472:	80 93 bb 02 	sts	0x02BB, r24
     476:	60 93 bd 02 	sts	0x02BD, r22
     47a:	66 23       	and	r22, r22
     47c:	41 f0       	breq	.+16     	; 0x48e <CAN_construct_message+0x20>
     47e:	8e eb       	ldi	r24, 0xBE	; 190
     480:	92 e0       	ldi	r25, 0x02	; 2
     482:	fc 01       	movw	r30, r24
     484:	11 92       	st	Z+, r1
     486:	2e 2f       	mov	r18, r30
     488:	28 1b       	sub	r18, r24
     48a:	26 17       	cp	r18, r22
     48c:	d8 f3       	brcs	.-10     	; 0x484 <CAN_construct_message+0x16>
     48e:	08 95       	ret

00000490 <__vector_3>:
     490:	1f 92       	push	r1
     492:	0f 92       	push	r0
     494:	0f b6       	in	r0, 0x3f	; 63
     496:	0f 92       	push	r0
     498:	11 24       	eor	r1, r1
     49a:	8f 93       	push	r24
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 ba 02 	sts	0x02BA, r24
     4a2:	8f 91       	pop	r24
     4a4:	0f 90       	pop	r0
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	0f 90       	pop	r0
     4aa:	1f 90       	pop	r1
     4ac:	18 95       	reti

000004ae <CAN_interrupt_setup>:
     4ae:	f8 94       	cli
     4b0:	86 b7       	in	r24, 0x36	; 54
     4b2:	8e 7f       	andi	r24, 0xFE	; 254
     4b4:	86 bf       	out	0x36, r24	; 54
     4b6:	8b b7       	in	r24, 0x3b	; 59
     4b8:	80 62       	ori	r24, 0x20	; 32
     4ba:	8b bf       	out	0x3b, r24	; 59
     4bc:	78 94       	sei
     4be:	08 95       	ret

000004c0 <CAN_initialize>:
     4c0:	d3 d0       	rcall	.+422    	; 0x668 <MCP2515_initialize>
     4c2:	68 e0       	ldi	r22, 0x08	; 8
     4c4:	84 e1       	ldi	r24, 0x14	; 20
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	d2 df       	rcall	.-92     	; 0x46e <CAN_construct_message>
     4ca:	4f ef       	ldi	r20, 0xFF	; 255
     4cc:	50 e0       	ldi	r21, 0x00	; 0
     4ce:	64 e6       	ldi	r22, 0x64	; 100
     4d0:	80 e6       	ldi	r24, 0x60	; 96
     4d2:	b1 d0       	rcall	.+354    	; 0x636 <MCP2515_bit_modify>
     4d4:	4f ef       	ldi	r20, 0xFF	; 255
     4d6:	50 e0       	ldi	r21, 0x00	; 0
     4d8:	64 e6       	ldi	r22, 0x64	; 100
     4da:	80 e7       	ldi	r24, 0x70	; 112
     4dc:	ac d0       	rcall	.+344    	; 0x636 <MCP2515_bit_modify>
     4de:	41 e0       	ldi	r20, 0x01	; 1
     4e0:	50 e0       	ldi	r21, 0x00	; 0
     4e2:	61 e0       	ldi	r22, 0x01	; 1
     4e4:	8b e2       	ldi	r24, 0x2B	; 43
     4e6:	a7 d0       	rcall	.+334    	; 0x636 <MCP2515_bit_modify>
     4e8:	41 e0       	ldi	r20, 0x01	; 1
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	62 e0       	ldi	r22, 0x02	; 2
     4ee:	8b e2       	ldi	r24, 0x2B	; 43
     4f0:	a2 d0       	rcall	.+324    	; 0x636 <MCP2515_bit_modify>
     4f2:	40 e0       	ldi	r20, 0x00	; 0
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	60 ee       	ldi	r22, 0xE0	; 224
     4f8:	8f e0       	ldi	r24, 0x0F	; 15
     4fa:	9d d0       	rcall	.+314    	; 0x636 <MCP2515_bit_modify>
     4fc:	d8 cf       	rjmp	.-80     	; 0x4ae <CAN_interrupt_setup>
     4fe:	08 95       	ret

00000500 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     500:	cf 93       	push	r28
     502:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     504:	c4 e0       	ldi	r28, 0x04	; 4
     506:	d0 e0       	ldi	r29, 0x00	; 0
     508:	02 c0       	rjmp	.+4      	; 0x50e <CAN_transmission_complete+0xe>
     50a:	cc 0f       	add	r28, r28
     50c:	dd 1f       	adc	r29, r29
     50e:	8a 95       	dec	r24
     510:	e2 f7       	brpl	.-8      	; 0x50a <CAN_transmission_complete+0xa>
     512:	8c e2       	ldi	r24, 0x2C	; 44
     514:	72 d0       	rcall	.+228    	; 0x5fa <MCP2515_read>
     516:	8c 23       	and	r24, r28
     518:	9d 23       	and	r25, r29
     51a:	89 2b       	or	r24, r25
     51c:	d1 f3       	breq	.-12     	; 0x512 <CAN_transmission_complete+0x12>
	return 1;
}
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	ec 01       	movw	r28, r24
     532:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     534:	f6 2e       	mov	r15, r22
     536:	ff 0c       	add	r15, r15
     538:	ff 0c       	add	r15, r15
     53a:	ff 0c       	add	r15, r15
     53c:	ff 0c       	add	r15, r15
     53e:	28 81       	ld	r18, Y
     540:	39 81       	ldd	r19, Y+1	; 0x01
     542:	b9 01       	movw	r22, r18
     544:	75 95       	asr	r23
     546:	67 95       	ror	r22
     548:	75 95       	asr	r23
     54a:	67 95       	ror	r22
     54c:	75 95       	asr	r23
     54e:	67 95       	ror	r22
     550:	81 e3       	ldi	r24, 0x31	; 49
     552:	8f 0d       	add	r24, r15
     554:	43 d0       	rcall	.+134    	; 0x5dc <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     556:	28 81       	ld	r18, Y
     558:	39 81       	ldd	r19, Y+1	; 0x01
     55a:	b9 01       	movw	r22, r18
     55c:	66 0f       	add	r22, r22
     55e:	77 1f       	adc	r23, r23
     560:	62 95       	swap	r22
     562:	72 95       	swap	r23
     564:	70 7f       	andi	r23, 0xF0	; 240
     566:	76 27       	eor	r23, r22
     568:	60 7f       	andi	r22, 0xF0	; 240
     56a:	76 27       	eor	r23, r22
     56c:	82 e3       	ldi	r24, 0x32	; 50
     56e:	8f 0d       	add	r24, r15
     570:	35 d0       	rcall	.+106    	; 0x5dc <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     572:	6a 81       	ldd	r22, Y+2	; 0x02
     574:	6f 70       	andi	r22, 0x0F	; 15
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	85 e3       	ldi	r24, 0x35	; 53
     57a:	8f 0d       	add	r24, r15
     57c:	2f d0       	rcall	.+94     	; 0x5dc <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     57e:	8a 81       	ldd	r24, Y+2	; 0x02
     580:	88 23       	and	r24, r24
     582:	79 f0       	breq	.+30     	; 0x5a2 <CAN_send_byte+0x7c>
     584:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     586:	86 e3       	ldi	r24, 0x36	; 54
     588:	f8 0e       	add	r15, r24
     58a:	fe 01       	movw	r30, r28
     58c:	e1 0f       	add	r30, r17
     58e:	f1 1d       	adc	r31, r1
     590:	63 81       	ldd	r22, Z+3	; 0x03
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	8f 2d       	mov	r24, r15
     596:	81 0f       	add	r24, r17
     598:	21 d0       	rcall	.+66     	; 0x5dc <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     59a:	1f 5f       	subi	r17, 0xFF	; 255
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	18 17       	cp	r17, r24
     5a0:	a0 f3       	brcs	.-24     	; 0x58a <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     5a2:	80 2f       	mov	r24, r16
     5a4:	38 d0       	rcall	.+112    	; 0x616 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     5a6:	80 2f       	mov	r24, r16
     5a8:	ab df       	rcall	.-170    	; 0x500 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	1f 91       	pop	r17
     5b0:	0f 91       	pop	r16
     5b2:	ff 90       	pop	r15
     5b4:	08 95       	ret

000005b6 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5b6:	20 91 bd 02 	lds	r18, 0x02BD
     5ba:	22 23       	and	r18, r18
     5bc:	59 f0       	breq	.+22     	; 0x5d4 <CAN_message_send+0x1e>
     5be:	38 2f       	mov	r19, r24
     5c0:	ae eb       	ldi	r26, 0xBE	; 190
     5c2:	b2 e0       	ldi	r27, 0x02	; 2
     5c4:	e8 2f       	mov	r30, r24
     5c6:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     5c8:	81 91       	ld	r24, Z+
     5ca:	8d 93       	st	X+, r24
     5cc:	8e 2f       	mov	r24, r30
     5ce:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     5d0:	82 17       	cp	r24, r18
     5d2:	d0 f3       	brcs	.-12     	; 0x5c8 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     5d4:	8b eb       	ldi	r24, 0xBB	; 187
     5d6:	92 e0       	ldi	r25, 0x02	; 2
     5d8:	a6 cf       	rjmp	.-180    	; 0x526 <CAN_send_byte>
     5da:	08 95       	ret

000005dc <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	d8 2f       	mov	r29, r24
     5e2:	c6 2f       	mov	r28, r22
     5e4:	4e d0       	rcall	.+156    	; 0x682 <SPI_select>
     5e6:	82 e0       	ldi	r24, 0x02	; 2
     5e8:	42 d0       	rcall	.+132    	; 0x66e <SPI_send>
     5ea:	8d 2f       	mov	r24, r29
     5ec:	40 d0       	rcall	.+128    	; 0x66e <SPI_send>
     5ee:	8c 2f       	mov	r24, r28
     5f0:	3e d0       	rcall	.+124    	; 0x66e <SPI_send>
     5f2:	49 d0       	rcall	.+146    	; 0x686 <SPI_deselect>
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <MCP2515_read>:
     5fa:	cf 93       	push	r28
     5fc:	c8 2f       	mov	r28, r24
     5fe:	41 d0       	rcall	.+130    	; 0x682 <SPI_select>
     600:	83 e0       	ldi	r24, 0x03	; 3
     602:	35 d0       	rcall	.+106    	; 0x66e <SPI_send>
     604:	8c 2f       	mov	r24, r28
     606:	33 d0       	rcall	.+102    	; 0x66e <SPI_send>
     608:	36 d0       	rcall	.+108    	; 0x676 <SPI_receive>
     60a:	c8 2f       	mov	r28, r24
     60c:	3c d0       	rcall	.+120    	; 0x686 <SPI_deselect>
     60e:	8c 2f       	mov	r24, r28
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	cf 91       	pop	r28
     614:	08 95       	ret

00000616 <MCP2515_request_to_send>:
     616:	cf 93       	push	r28
     618:	c8 2f       	mov	r28, r24
     61a:	33 d0       	rcall	.+102    	; 0x682 <SPI_select>
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	c9 01       	movw	r24, r18
     622:	02 c0       	rjmp	.+4      	; 0x628 <MCP2515_request_to_send+0x12>
     624:	88 0f       	add	r24, r24
     626:	99 1f       	adc	r25, r25
     628:	ca 95       	dec	r28
     62a:	e2 f7       	brpl	.-8      	; 0x624 <MCP2515_request_to_send+0xe>
     62c:	80 68       	ori	r24, 0x80	; 128
     62e:	1f d0       	rcall	.+62     	; 0x66e <SPI_send>
     630:	2a d0       	rcall	.+84     	; 0x686 <SPI_deselect>
     632:	cf 91       	pop	r28
     634:	08 95       	ret

00000636 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     636:	1f 93       	push	r17
     638:	cf 93       	push	r28
     63a:	df 93       	push	r29
     63c:	18 2f       	mov	r17, r24
     63e:	d6 2f       	mov	r29, r22
     640:	c4 2f       	mov	r28, r20
	SPI_select();
     642:	1f d0       	rcall	.+62     	; 0x682 <SPI_select>
	SPI_send(MCP_BITMOD);
     644:	85 e0       	ldi	r24, 0x05	; 5
     646:	13 d0       	rcall	.+38     	; 0x66e <SPI_send>
	SPI_send(adr);
     648:	81 2f       	mov	r24, r17
     64a:	11 d0       	rcall	.+34     	; 0x66e <SPI_send>
	SPI_send(mask);
     64c:	8d 2f       	mov	r24, r29
     64e:	0f d0       	rcall	.+30     	; 0x66e <SPI_send>
	SPI_send(data);
     650:	8c 2f       	mov	r24, r28
     652:	0d d0       	rcall	.+26     	; 0x66e <SPI_send>
	SPI_deselect();
     654:	18 d0       	rcall	.+48     	; 0x686 <SPI_deselect>
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	08 95       	ret

0000065e <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     65e:	11 d0       	rcall	.+34     	; 0x682 <SPI_select>
	SPI_send(MCP_RESET);
     660:	80 ec       	ldi	r24, 0xC0	; 192
     662:	05 d0       	rcall	.+10     	; 0x66e <SPI_send>
	SPI_deselect();
     664:	10 c0       	rjmp	.+32     	; 0x686 <SPI_deselect>
     666:	08 95       	ret

00000668 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     668:	10 d0       	rcall	.+32     	; 0x68a <SPI_initialize>
	MCP2515_reset();
     66a:	f9 cf       	rjmp	.-14     	; 0x65e <MCP2515_reset>
     66c:	08 95       	ret

0000066e <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     66e:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     670:	77 9b       	sbis	0x0e, 7	; 14
     672:	fe cf       	rjmp	.-4      	; 0x670 <SPI_send+0x2>

}
     674:	08 95       	ret

00000676 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     676:	80 e0       	ldi	r24, 0x00	; 0
     678:	fa df       	rcall	.-12     	; 0x66e <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     67a:	77 9b       	sbis	0x0e, 7	; 14
     67c:	fe cf       	rjmp	.-4      	; 0x67a <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     67e:	8f b1       	in	r24, 0x0f	; 15
}
     680:	08 95       	ret

00000682 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     682:	c4 98       	cbi	0x18, 4	; 24
     684:	08 95       	ret

00000686 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     686:	c4 9a       	sbi	0x18, 4	; 24
     688:	08 95       	ret

0000068a <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     68a:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     68c:	87 b3       	in	r24, 0x17	; 23
     68e:	80 6b       	ori	r24, 0xB0	; 176
     690:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     692:	8d b1       	in	r24, 0x0d	; 13
     694:	80 65       	ori	r24, 0x50	; 80
     696:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     698:	f6 cf       	rjmp	.-20     	; 0x686 <SPI_deselect>
     69a:	08 95       	ret

0000069c <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     69c:	5d 9b       	sbis	0x0b, 5	; 11
     69e:	fe cf       	rjmp	.-4      	; 0x69c <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     6a0:	8c b9       	out	0x0c, r24	; 12
     6a2:	08 95       	ret

000006a4 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     6a4:	5f 9b       	sbis	0x0b, 7	; 11
     6a6:	fe cf       	rjmp	.-4      	; 0x6a4 <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     6a8:	8c b1       	in	r24, 0x0c	; 12
}
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	08 95       	ret

000006ae <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     6ae:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     6b0:	8f e1       	ldi	r24, 0x1F	; 31
     6b2:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     6b4:	88 e1       	ldi	r24, 0x18	; 24
     6b6:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     6b8:	62 e5       	ldi	r22, 0x52	; 82
     6ba:	73 e0       	ldi	r23, 0x03	; 3
     6bc:	8e e4       	ldi	r24, 0x4E	; 78
     6be:	93 e0       	ldi	r25, 0x03	; 3
     6c0:	0c 94 cb 13 	jmp	0x2796	; 0x2796 <fdevopen>
     6c4:	08 95       	ret

000006c6 <readADC>:
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	91 05       	cpc	r25, r1
     6ca:	71 f0       	breq	.+28     	; 0x6e8 <readADC+0x22>
     6cc:	1c f4       	brge	.+6      	; 0x6d4 <readADC+0xe>
     6ce:	01 97       	sbiw	r24, 0x01	; 1
     6d0:	39 f0       	breq	.+14     	; 0x6e0 <readADC+0x1a>
     6d2:	1c c0       	rjmp	.+56     	; 0x70c <readADC+0x46>
     6d4:	83 30       	cpi	r24, 0x03	; 3
     6d6:	91 05       	cpc	r25, r1
     6d8:	59 f0       	breq	.+22     	; 0x6f0 <readADC+0x2a>
     6da:	04 97       	sbiw	r24, 0x04	; 4
     6dc:	69 f0       	breq	.+26     	; 0x6f8 <readADC+0x32>
     6de:	16 c0       	rjmp	.+44     	; 0x70c <readADC+0x46>
     6e0:	84 e1       	ldi	r24, 0x14	; 20
     6e2:	80 93 00 14 	sts	0x1400, r24
     6e6:	0b c0       	rjmp	.+22     	; 0x6fe <readADC+0x38>
     6e8:	85 e1       	ldi	r24, 0x15	; 21
     6ea:	80 93 00 14 	sts	0x1400, r24
     6ee:	07 c0       	rjmp	.+14     	; 0x6fe <readADC+0x38>
     6f0:	86 e1       	ldi	r24, 0x16	; 22
     6f2:	80 93 00 14 	sts	0x1400, r24
     6f6:	03 c0       	rjmp	.+6      	; 0x6fe <readADC+0x38>
     6f8:	87 e1       	ldi	r24, 0x17	; 23
     6fa:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6fe:	82 e5       	ldi	r24, 0x52	; 82
     700:	8a 95       	dec	r24
     702:	f1 f7       	brne	.-4      	; 0x700 <readADC+0x3a>
     704:	80 91 00 14 	lds	r24, 0x1400
     708:	90 e0       	ldi	r25, 0x00	; 0
     70a:	08 95       	ret
     70c:	80 e0       	ldi	r24, 0x00	; 0
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	08 95       	ret

00000712 <initalize_interrupts>:
 */ 
#include "button_interrupts.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     712:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     714:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     716:	85 b7       	in	r24, 0x35	; 53
     718:	81 60       	ori	r24, 0x01	; 1
     71a:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     71c:	85 b7       	in	r24, 0x35	; 53
     71e:	82 60       	ori	r24, 0x02	; 2
     720:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     722:	85 b7       	in	r24, 0x35	; 53
     724:	84 60       	ori	r24, 0x04	; 4
     726:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     728:	85 b7       	in	r24, 0x35	; 53
     72a:	88 60       	ori	r24, 0x08	; 8
     72c:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     72e:	8b b7       	in	r24, 0x3b	; 59
     730:	80 64       	ori	r24, 0x40	; 64
     732:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     734:	8b b7       	in	r24, 0x3b	; 59
     736:	80 68       	ori	r24, 0x80	; 128
     738:	8b bf       	out	0x3b, r24	; 59
	
	flag_right_button = 0;
     73a:	10 92 ec 02 	sts	0x02EC, r1
	flag_left_button = 0;
     73e:	10 92 ed 02 	sts	0x02ED, r1
     742:	08 95       	ret

00000744 <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     744:	80 91 ed 02 	lds	r24, 0x02ED
     748:	81 30       	cpi	r24, 0x01	; 1
     74a:	19 f4       	brne	.+6      	; 0x752 <check_flag_left+0xe>
	{
		flag_left_button = 0;
     74c:	10 92 ed 02 	sts	0x02ED, r1
		return 1;
     750:	08 95       	ret
	}
	return 0;
     752:	80 e0       	ldi	r24, 0x00	; 0
}
     754:	08 95       	ret

00000756 <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     756:	80 91 ec 02 	lds	r24, 0x02EC
     75a:	81 30       	cpi	r24, 0x01	; 1
     75c:	19 f4       	brne	.+6      	; 0x764 <check_flag_right+0xe>
	{
		flag_right_button = 0;
     75e:	10 92 ec 02 	sts	0x02EC, r1
		return 1;
     762:	08 95       	ret
	}
	return 0;
     764:	80 e0       	ldi	r24, 0x00	; 0
}
     766:	08 95       	ret

00000768 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     768:	1f 92       	push	r1
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	80 93 ec 02 	sts	0x02EC, r24
}
     77a:	8f 91       	pop	r24
     77c:	0f 90       	pop	r0
     77e:	0f be       	out	0x3f, r0	; 63
     780:	0f 90       	pop	r0
     782:	1f 90       	pop	r1
     784:	18 95       	reti

00000786 <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     786:	1f 92       	push	r1
     788:	0f 92       	push	r0
     78a:	0f b6       	in	r0, 0x3f	; 63
     78c:	0f 92       	push	r0
     78e:	11 24       	eor	r1, r1
     790:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	80 93 ed 02 	sts	0x02ED, r24
}
     798:	8f 91       	pop	r24
     79a:	0f 90       	pop	r0
     79c:	0f be       	out	0x3f, r0	; 63
     79e:	0f 90       	pop	r0
     7a0:	1f 90       	pop	r1
     7a2:	18 95       	reti

000007a4 <flappy_restart>:
	
	flappy_restart();
}

void flappy_restart(void){
	sram_goto_line(7);
     7a4:	87 e0       	ldi	r24, 0x07	; 7
     7a6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <sram_goto_line>
	sram_write_string("BACK        PLAY");
     7aa:	86 e5       	ldi	r24, 0x56	; 86
     7ac:	91 e0       	ldi	r25, 0x01	; 1
     7ae:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <sram_write_string>
	sram_update_oled();
     7b2:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
	quit = 0;
     7b6:	10 92 d0 02 	sts	0x02D0, r1
	printf("MP");
     7ba:	87 e6       	ldi	r24, 0x67	; 103
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
	while (!(quit | check_flag_right()))
     7c6:	0f 90       	pop	r0
     7c8:	0f 90       	pop	r0
     7ca:	03 c0       	rjmp	.+6      	; 0x7d2 <flappy_restart+0x2e>
	{
		quit = check_flag_left();
     7cc:	bb df       	rcall	.-138    	; 0x744 <check_flag_left>
     7ce:	80 93 d0 02 	sts	0x02D0, r24
	sram_goto_line(7);
	sram_write_string("BACK        PLAY");
	sram_update_oled();
	quit = 0;
	printf("MP");
	while (!(quit | check_flag_right()))
     7d2:	c1 df       	rcall	.-126    	; 0x756 <check_flag_right>
     7d4:	90 91 d0 02 	lds	r25, 0x02D0
     7d8:	89 2b       	or	r24, r25
     7da:	c1 f3       	breq	.-16     	; 0x7cc <flappy_restart+0x28>
	{
		quit = check_flag_left();
	}
	
	sram_init();
     7dc:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <sram_init>
     7e0:	08 95       	ret

000007e2 <flappy_loading_screen>:
	}
	
	return 0;
}

void flappy_loading_screen(void){
     7e2:	0f 93       	push	r16
     7e4:	1f 93       	push	r17
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
	sram_init();
     7ea:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <sram_init>
	sram_goto_line(0);
     7ee:	80 e0       	ldi	r24, 0x00	; 0
     7f0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <sram_goto_line>
	sram_write_string("  FLAPPY BIRD");
     7f4:	8a e6       	ldi	r24, 0x6A	; 106
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <sram_write_string>
	sram_update_oled();
     7fc:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
	
	timer_delay(1000);
     800:	88 ee       	ldi	r24, 0xE8	; 232
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	0e 94 96 10 	call	0x212c	; 0x212c <timer_delay>
	
	sram_draw_new_line(8*FONT_WIDTH+4,8,13*FONT_WIDTH+4,0);
     808:	20 e0       	ldi	r18, 0x00	; 0
     80a:	4c e6       	ldi	r20, 0x6C	; 108
     80c:	68 e0       	ldi	r22, 0x08	; 8
     80e:	84 e4       	ldi	r24, 0x44	; 68
     810:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sram_draw_new_line>
	sram_draw_new_line(8*FONT_WIDTH+4,0,13*FONT_WIDTH+4,8);
     814:	28 e0       	ldi	r18, 0x08	; 8
     816:	4c e6       	ldi	r20, 0x6C	; 108
     818:	60 e0       	ldi	r22, 0x00	; 0
     81a:	84 e4       	ldi	r24, 0x44	; 68
     81c:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sram_draw_new_line>
	sram_update_oled();
     820:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
	
	timer_delay(1000);
     824:	88 ee       	ldi	r24, 0xE8	; 232
     826:	93 e0       	ldi	r25, 0x03	; 3
     828:	0e 94 96 10 	call	0x212c	; 0x212c <timer_delay>
	
	sram_goto_line(2);
     82c:	82 e0       	ldi	r24, 0x02	; 2
     82e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*8+4);
     832:	84 e4       	ldi	r24, 0x44	; 68
     834:	0e 94 e3 0c 	call	0x19c6	; 0x19c6 <sram_goto_column>
	sram_write_string("PIXEL");
     838:	88 e7       	ldi	r24, 0x78	; 120
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <sram_write_string>
	sram_update_oled();
     840:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
	
	timer_delay(500);
     844:	84 ef       	ldi	r24, 0xF4	; 244
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	0e 94 96 10 	call	0x212c	; 0x212c <timer_delay>
     84c:	d0 e1       	ldi	r29, 0x10	; 16
	}
	
	return 0;
}

void flappy_loading_screen(void){
     84e:	10 e1       	ldi	r17, 0x10	; 16
     850:	12 c0       	rjmp	.+36     	; 0x876 <flappy_loading_screen+0x94>
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
     852:	00 e0       	ldi	r16, 0x00	; 0
     854:	21 e0       	ldi	r18, 0x01	; 1
     856:	48 e1       	ldi	r20, 0x18	; 24
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	8c 2f       	mov	r24, r28
     85c:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <sram_scroll_vertically>
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
     860:	cf 5f       	subi	r28, 0xFF	; 255
     862:	c0 34       	cpi	r28, 0x40	; 64
     864:	b1 f7       	brne	.-20     	; 0x852 <flappy_loading_screen+0x70>
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
		}
		timer_delay(30);
     866:	8e e1       	ldi	r24, 0x1E	; 30
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0e 94 96 10 	call	0x212c	; 0x212c <timer_delay>
		sram_update_oled();
     86e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
     872:	d1 50       	subi	r29, 0x01	; 1
	sram_write_string("PIXEL");
	sram_update_oled();
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
     874:	11 f0       	breq	.+4      	; 0x87a <flappy_loading_screen+0x98>
	}
	
	return 0;
}

void flappy_loading_screen(void){
     876:	c1 2f       	mov	r28, r17
     878:	ec cf       	rjmp	.-40     	; 0x852 <flappy_loading_screen+0x70>
		sram_update_oled();
	}
	
	//sram
	
	flappy_restart();
     87a:	94 df       	rcall	.-216    	; 0x7a4 <flappy_restart>
}
     87c:	df 91       	pop	r29
     87e:	cf 91       	pop	r28
     880:	1f 91       	pop	r17
     882:	0f 91       	pop	r16
     884:	08 95       	ret

00000886 <flappy_render_wall>:
	sram_write_string("SCORE: ");
	sram_write_int(score);
	sram_update_oled();
}

void flappy_render_wall(uint8_t selected_wall, uint8_t pos){
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	d8 2f       	mov	r29, r24
     88c:	c6 2f       	mov	r28, r22
	if (selected_wall > SCREEN_HEIGHT-1 -WALL_HOLE){
     88e:	8c 32       	cpi	r24, 0x2C	; 44
     890:	38 f0       	brcs	.+14     	; 0x8a0 <flappy_render_wall+0x1a>
		sram_draw_new_line(pos, 0, pos, SCREEN_HEIGHT-1 -WALL_HOLE);
     892:	2b e2       	ldi	r18, 0x2B	; 43
     894:	46 2f       	mov	r20, r22
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	8c 2f       	mov	r24, r28
     89a:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sram_draw_new_line>
     89e:	17 c0       	rjmp	.+46     	; 0x8ce <flappy_render_wall+0x48>
	}else if(selected_wall < WALL_HOLE){ 
     8a0:	84 31       	cpi	r24, 0x14	; 20
     8a2:	38 f4       	brcc	.+14     	; 0x8b2 <flappy_render_wall+0x2c>
		sram_draw_new_line(pos, WALL_HOLE, pos , SCREEN_HEIGHT-1);
     8a4:	2f e3       	ldi	r18, 0x3F	; 63
     8a6:	46 2f       	mov	r20, r22
     8a8:	64 e1       	ldi	r22, 0x14	; 20
     8aa:	8c 2f       	mov	r24, r28
     8ac:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sram_draw_new_line>
     8b0:	0e c0       	rjmp	.+28     	; 0x8ce <flappy_render_wall+0x48>
	}else{
		sram_draw_new_line(pos, 0, pos, selected_wall-WALL_HOLE/2);
     8b2:	26 ef       	ldi	r18, 0xF6	; 246
     8b4:	28 0f       	add	r18, r24
     8b6:	46 2f       	mov	r20, r22
     8b8:	60 e0       	ldi	r22, 0x00	; 0
     8ba:	8c 2f       	mov	r24, r28
     8bc:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sram_draw_new_line>
		sram_draw_new_line(pos, selected_wall + WALL_HOLE/2, pos , SCREEN_HEIGHT-1);
     8c0:	6a e0       	ldi	r22, 0x0A	; 10
     8c2:	6d 0f       	add	r22, r29
     8c4:	2f e3       	ldi	r18, 0x3F	; 63
     8c6:	4c 2f       	mov	r20, r28
     8c8:	8c 2f       	mov	r24, r28
     8ca:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <sram_draw_new_line>
	}
}
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <flappy_controll>:

void flappy_controll(void){
     8d4:	cf 92       	push	r12
     8d6:	df 92       	push	r13
     8d8:	ef 92       	push	r14
     8da:	ff 92       	push	r15
	velocity += acceleration;
     8dc:	20 91 0c 01 	lds	r18, 0x010C
     8e0:	30 91 0d 01 	lds	r19, 0x010D
     8e4:	40 91 0e 01 	lds	r20, 0x010E
     8e8:	50 91 0f 01 	lds	r21, 0x010F
     8ec:	60 91 ca 02 	lds	r22, 0x02CA
     8f0:	70 91 cb 02 	lds	r23, 0x02CB
     8f4:	80 91 cc 02 	lds	r24, 0x02CC
     8f8:	90 91 cd 02 	lds	r25, 0x02CD
     8fc:	0e 94 b7 10 	call	0x216e	; 0x216e <__addsf3>
     900:	60 93 ca 02 	sts	0x02CA, r22
     904:	70 93 cb 02 	sts	0x02CB, r23
     908:	80 93 cc 02 	sts	0x02CC, r24
     90c:	90 93 cd 02 	sts	0x02CD, r25
	if(check_flag_left() | check_flag_right()){
     910:	19 df       	rcall	.-462    	; 0x744 <check_flag_left>
     912:	f8 2e       	mov	r15, r24
     914:	20 df       	rcall	.-448    	; 0x756 <check_flag_right>
     916:	8f 29       	or	r24, r15
     918:	b1 f0       	breq	.+44     	; 0x946 <flappy_controll+0x72>
		velocity -= 1;
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e8       	ldi	r20, 0x80	; 128
     920:	5f e3       	ldi	r21, 0x3F	; 63
     922:	60 91 ca 02 	lds	r22, 0x02CA
     926:	70 91 cb 02 	lds	r23, 0x02CB
     92a:	80 91 cc 02 	lds	r24, 0x02CC
     92e:	90 91 cd 02 	lds	r25, 0x02CD
     932:	0e 94 b6 10 	call	0x216c	; 0x216c <__subsf3>
     936:	60 93 ca 02 	sts	0x02CA, r22
     93a:	70 93 cb 02 	sts	0x02CB, r23
     93e:	80 93 cc 02 	sts	0x02CC, r24
     942:	90 93 cd 02 	sts	0x02CD, r25
	}
	if(velocity > 1){
     946:	c0 90 ca 02 	lds	r12, 0x02CA
     94a:	d0 90 cb 02 	lds	r13, 0x02CB
     94e:	e0 90 cc 02 	lds	r14, 0x02CC
     952:	f0 90 cd 02 	lds	r15, 0x02CD
     956:	20 e0       	ldi	r18, 0x00	; 0
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	40 e8       	ldi	r20, 0x80	; 128
     95c:	5f e3       	ldi	r21, 0x3F	; 63
     95e:	c7 01       	movw	r24, r14
     960:	b6 01       	movw	r22, r12
     962:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__gesf2>
     966:	18 16       	cp	r1, r24
     968:	6c f4       	brge	.+26     	; 0x984 <flappy_controll+0xb0>
		velocity = 1;
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	a0 e8       	ldi	r26, 0x80	; 128
     970:	bf e3       	ldi	r27, 0x3F	; 63
     972:	80 93 ca 02 	sts	0x02CA, r24
     976:	90 93 cb 02 	sts	0x02CB, r25
     97a:	a0 93 cc 02 	sts	0x02CC, r26
     97e:	b0 93 cd 02 	sts	0x02CD, r27
     982:	16 c0       	rjmp	.+44     	; 0x9b0 <flappy_controll+0xdc>
	}else if(velocity < -1){
     984:	20 e0       	ldi	r18, 0x00	; 0
     986:	30 e0       	ldi	r19, 0x00	; 0
     988:	40 e8       	ldi	r20, 0x80	; 128
     98a:	5f eb       	ldi	r21, 0xBF	; 191
     98c:	c7 01       	movw	r24, r14
     98e:	b6 01       	movw	r22, r12
     990:	0e 94 1b 11 	call	0x2236	; 0x2236 <__cmpsf2>
     994:	88 23       	and	r24, r24
     996:	64 f4       	brge	.+24     	; 0x9b0 <flappy_controll+0xdc>
		velocity = -1;
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	a0 e8       	ldi	r26, 0x80	; 128
     99e:	bf eb       	ldi	r27, 0xBF	; 191
     9a0:	80 93 ca 02 	sts	0x02CA, r24
     9a4:	90 93 cb 02 	sts	0x02CB, r25
     9a8:	a0 93 cc 02 	sts	0x02CC, r26
     9ac:	b0 93 cd 02 	sts	0x02CD, r27
	}
	player_height_accurate += velocity;
     9b0:	20 91 ca 02 	lds	r18, 0x02CA
     9b4:	30 91 cb 02 	lds	r19, 0x02CB
     9b8:	40 91 cc 02 	lds	r20, 0x02CC
     9bc:	50 91 cd 02 	lds	r21, 0x02CD
     9c0:	60 91 c6 02 	lds	r22, 0x02C6
     9c4:	70 91 c7 02 	lds	r23, 0x02C7
     9c8:	80 91 c8 02 	lds	r24, 0x02C8
     9cc:	90 91 c9 02 	lds	r25, 0x02C9
     9d0:	0e 94 b7 10 	call	0x216e	; 0x216e <__addsf3>
     9d4:	6b 01       	movw	r12, r22
     9d6:	7c 01       	movw	r14, r24
     9d8:	60 93 c6 02 	sts	0x02C6, r22
     9dc:	70 93 c7 02 	sts	0x02C7, r23
     9e0:	80 93 c8 02 	sts	0x02C8, r24
     9e4:	90 93 c9 02 	sts	0x02C9, r25
	if(player_height_accurate >= SCREEN_HEIGHT-1){
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	4c e7       	ldi	r20, 0x7C	; 124
     9ee:	52 e4       	ldi	r21, 0x42	; 66
     9f0:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <__gesf2>
     9f4:	88 23       	and	r24, r24
     9f6:	24 f0       	brlt	.+8      	; 0xa00 <flappy_controll+0x12c>
		game_over = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	80 93 ce 02 	sts	0x02CE, r24
     9fe:	0c c0       	rjmp	.+24     	; 0xa18 <flappy_controll+0x144>
	}else if(player_height_accurate<= 0){
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	a9 01       	movw	r20, r18
     a06:	c7 01       	movw	r24, r14
     a08:	b6 01       	movw	r22, r12
     a0a:	0e 94 1b 11 	call	0x2236	; 0x2236 <__cmpsf2>
     a0e:	18 16       	cp	r1, r24
     a10:	1c f0       	brlt	.+6      	; 0xa18 <flappy_controll+0x144>
		game_over = 1;
     a12:	81 e0       	ldi	r24, 0x01	; 1
     a14:	80 93 ce 02 	sts	0x02CE, r24
	}
	player_height = (int)player_height_accurate;
     a18:	c7 01       	movw	r24, r14
     a1a:	b6 01       	movw	r22, r12
     a1c:	0e 94 87 11 	call	0x230e	; 0x230e <__fixsfsi>
     a20:	60 93 cf 02 	sts	0x02CF, r22
}
     a24:	ff 90       	pop	r15
     a26:	ef 90       	pop	r14
     a28:	df 90       	pop	r13
     a2a:	cf 90       	pop	r12
     a2c:	08 95       	ret

00000a2e <flappy_pixel_collision>:

uint8_t flappy_pixel_collision(void){
	if (ext_ram_adress[PLAYER_POS+((player_height-player_height%8)/8)*128] & (1<<player_height%8)){
     a2e:	80 91 cf 02 	lds	r24, 0x02CF
     a32:	e8 2f       	mov	r30, r24
     a34:	f0 e0       	ldi	r31, 0x00	; 0
     a36:	f5 95       	asr	r31
     a38:	e7 95       	ror	r30
     a3a:	f5 95       	asr	r31
     a3c:	e7 95       	ror	r30
     a3e:	f5 95       	asr	r31
     a40:	e7 95       	ror	r30
     a42:	f6 95       	lsr	r31
     a44:	fe 2f       	mov	r31, r30
     a46:	ee 27       	eor	r30, r30
     a48:	f7 95       	ror	r31
     a4a:	e7 95       	ror	r30
     a4c:	3a 96       	adiw	r30, 0x0a	; 10
     a4e:	20 91 10 01 	lds	r18, 0x0110
     a52:	30 91 11 01 	lds	r19, 0x0111
     a56:	e2 0f       	add	r30, r18
     a58:	f3 1f       	adc	r31, r19
     a5a:	20 81       	ld	r18, Z
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	87 70       	andi	r24, 0x07	; 7
     a60:	a9 01       	movw	r20, r18
     a62:	02 c0       	rjmp	.+4      	; 0xa68 <flappy_pixel_collision+0x3a>
     a64:	55 95       	asr	r21
     a66:	47 95       	ror	r20
     a68:	8a 95       	dec	r24
     a6a:	e2 f7       	brpl	.-8      	; 0xa64 <flappy_pixel_collision+0x36>
     a6c:	ca 01       	movw	r24, r20
		return 1;
	}
	return 0;
}
     a6e:	81 70       	andi	r24, 0x01	; 1
     a70:	08 95       	ret

00000a72 <flappy_scroll_wall>:

void flappy_scroll_wall(void){
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	80 e0       	ldi	r24, 0x00	; 0
     a78:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
     a7a:	e0 91 10 01 	lds	r30, 0x0110
     a7e:	f0 91 11 01 	lds	r31, 0x0111
     a82:	e8 0f       	add	r30, r24
     a84:	f9 1f       	adc	r31, r25
     a86:	10 82       	st	Z, r1
     a88:	80 58       	subi	r24, 0x80	; 128
     a8a:	9f 4f       	sbci	r25, 0xFF	; 255
	return 0;
}

void flappy_scroll_wall(void){
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
     a8c:	81 15       	cp	r24, r1
     a8e:	24 e0       	ldi	r18, 0x04	; 4
     a90:	92 07       	cpc	r25, r18
     a92:	99 f7       	brne	.-26     	; 0xa7a <flappy_scroll_wall+0x8>
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	70 e0       	ldi	r23, 0x00	; 0
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     a98:	b8 e0       	ldi	r27, 0x08	; 8
     a9a:	19 c0       	rjmp	.+50     	; 0xace <flappy_scroll_wall+0x5c>
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
     a9c:	20 91 10 01 	lds	r18, 0x0110
     aa0:	30 91 11 01 	lds	r19, 0x0111
     aa4:	f9 01       	movw	r30, r18
     aa6:	e8 0f       	add	r30, r24
     aa8:	f9 1f       	adc	r31, r25
     aaa:	ac 01       	movw	r20, r24
     aac:	4f 5f       	subi	r20, 0xFF	; 255
     aae:	5f 4f       	sbci	r21, 0xFF	; 255
     ab0:	e9 01       	movw	r28, r18
     ab2:	c4 0f       	add	r28, r20
     ab4:	d5 1f       	adc	r29, r21
     ab6:	28 81       	ld	r18, Y
     ab8:	20 83       	st	Z, r18
     aba:	a1 50       	subi	r26, 0x01	; 1
     abc:	80 58       	subi	r24, 0x80	; 128
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     ac0:	a1 11       	cpse	r26, r1
     ac2:	ec cf       	rjmp	.-40     	; 0xa9c <flappy_scroll_wall+0x2a>
     ac4:	6f 5f       	subi	r22, 0xFF	; 255
     ac6:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     ac8:	6f 37       	cpi	r22, 0x7F	; 127
     aca:	71 05       	cpc	r23, r1
     acc:	19 f0       	breq	.+6      	; 0xad4 <flappy_scroll_wall+0x62>
     ace:	cb 01       	movw	r24, r22
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     ad0:	ab 2f       	mov	r26, r27
     ad2:	e4 cf       	rjmp	.-56     	; 0xa9c <flappy_scroll_wall+0x2a>
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     ad4:	8f e7       	ldi	r24, 0x7F	; 127
     ad6:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
     ad8:	e0 91 10 01 	lds	r30, 0x0110
     adc:	f0 91 11 01 	lds	r31, 0x0111
     ae0:	e8 0f       	add	r30, r24
     ae2:	f9 1f       	adc	r31, r25
     ae4:	10 82       	st	Z, r1
     ae6:	80 58       	subi	r24, 0x80	; 128
     ae8:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     aea:	8f 37       	cpi	r24, 0x7F	; 127
     aec:	24 e0       	ldi	r18, 0x04	; 4
     aee:	92 07       	cpc	r25, r18
     af0:	99 f7       	brne	.-26     	; 0xad8 <flappy_scroll_wall+0x66>
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
	}
	if(new_wall >= difficulity){//if a wall has been removed a new one must be made
     af2:	80 91 0a 01 	lds	r24, 0x010A
     af6:	90 91 0b 01 	lds	r25, 0x010B
     afa:	89 17       	cp	r24, r25
     afc:	a8 f0       	brcs	.+42     	; 0xb28 <flappy_scroll_wall+0xb6>
		flappy_render_wall(rand()%(SCREEN_HEIGHT-WALL_HOLE/2)+WALL_HOLE/4,127);
     afe:	0e 94 b6 13 	call	0x276c	; 0x276c <rand>
     b02:	66 e3       	ldi	r22, 0x36	; 54
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodhi4>
     b0a:	6f e7       	ldi	r22, 0x7F	; 127
     b0c:	8b 5f       	subi	r24, 0xFB	; 251
     b0e:	bb de       	rcall	.-650    	; 0x886 <flappy_render_wall>
		new_wall = 0;
     b10:	10 92 0a 01 	sts	0x010A, r1
		score++;
     b14:	80 91 d1 02 	lds	r24, 0x02D1
     b18:	90 91 d2 02 	lds	r25, 0x02D2
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	90 93 d2 02 	sts	0x02D2, r25
     b22:	80 93 d1 02 	sts	0x02D1, r24
     b26:	03 c0       	rjmp	.+6      	; 0xb2e <flappy_scroll_wall+0xbc>
	}else{
		new_wall++;
     b28:	8f 5f       	subi	r24, 0xFF	; 255
     b2a:	80 93 0a 01 	sts	0x010A, r24
	}
     b2e:	df 91       	pop	r29
     b30:	cf 91       	pop	r28
     b32:	08 95       	ret

00000b34 <flappy_game>:
	}
	
	sram_init();
}

void flappy_game(void){
     b34:	8f 92       	push	r8
     b36:	9f 92       	push	r9
     b38:	af 92       	push	r10
     b3a:	bf 92       	push	r11
     b3c:	cf 92       	push	r12
     b3e:	df 92       	push	r13
     b40:	ef 92       	push	r14
     b42:	ff 92       	push	r15
     b44:	0f 93       	push	r16
     b46:	1f 93       	push	r17
     b48:	cf 93       	push	r28
     b4a:	df 93       	push	r29
	sram_update_oled();
     b4c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
	printf("M1");
     b50:	8e e7       	ldi	r24, 0x7E	; 126
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	9f 93       	push	r25
     b56:	8f 93       	push	r24
     b58:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
	while (!flappy_pixel_collision() && !game_over)
     b5c:	0f 90       	pop	r0
     b5e:	0f 90       	pop	r0
		if(check_flag_left()){//PAUSE
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
     b60:	0f 2e       	mov	r0, r31
     b62:	f7 e6       	ldi	r31, 0x67	; 103
     b64:	cf 2e       	mov	r12, r31
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	df 2e       	mov	r13, r31
     b6a:	f0 2d       	mov	r31, r0
			for (uint8_t i = 5; i > 1; i--)
     b6c:	0f 2e       	mov	r0, r31
     b6e:	f5 e0       	ldi	r31, 0x05	; 5
     b70:	8f 2e       	mov	r8, r31
     b72:	f0 2d       	mov	r31, r0
			{
				sram_goto_line(i);
				sram_goto_column(0);
				if(tempscore != 0){
					sram_write_char('0'+(tempscore%10));
     b74:	0a e0       	ldi	r16, 0x0A	; 10
     b76:	10 e0       	ldi	r17, 0x00	; 0
			sram_write_char('P');
			sram_update_oled();
			while(!(check_flag_left() | check_flag_right())){
				
			}
			printf("MR");
     b78:	0f 2e       	mov	r0, r31
     b7a:	f1 e8       	ldi	r31, 0x81	; 129
     b7c:	ef 2e       	mov	r14, r31
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	ff 2e       	mov	r15, r31
     b82:	f0 2d       	mov	r31, r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     b84:	4d c0       	rjmp	.+154    	; 0xc20 <flappy_game+0xec>
	
	{
		if(timer_check_flag()){
     b86:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <timer_check_flag>
     b8a:	88 23       	and	r24, r24
     b8c:	41 f0       	breq	.+16     	; 0xb9e <flappy_game+0x6a>
			flappy_controll();
     b8e:	a2 de       	rcall	.-700    	; 0x8d4 <flappy_controll>
			sram_pixel(PLAYER_POS,player_height);
     b90:	60 91 cf 02 	lds	r22, 0x02CF
     b94:	8a e0       	ldi	r24, 0x0A	; 10
     b96:	78 d7       	rcall	.+3824   	; 0x1a88 <sram_pixel>
			flappy_scroll_wall();
     b98:	6c df       	rcall	.-296    	; 0xa72 <flappy_scroll_wall>
			sram_update_oled();
     b9a:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
		}
		if(check_flag_left()){//PAUSE
     b9e:	d2 dd       	rcall	.-1116   	; 0x744 <check_flag_left>
     ba0:	88 23       	and	r24, r24
     ba2:	09 f4       	brne	.+2      	; 0xba6 <flappy_game+0x72>
     ba4:	3d c0       	rjmp	.+122    	; 0xc20 <flappy_game+0xec>
			sram_goto_line(0);
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	07 d7       	rcall	.+3598   	; 0x19b8 <sram_goto_line>
			sram_goto_column(0);
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	0c d7       	rcall	.+3608   	; 0x19c6 <sram_goto_column>
			sram_write_char('S');
     bae:	83 e5       	ldi	r24, 0x53	; 83
     bb0:	c8 d6       	rcall	.+3472   	; 0x1942 <sram_write_char>
			int tempscore = score;
     bb2:	c0 91 d1 02 	lds	r28, 0x02D1
     bb6:	d0 91 d2 02 	lds	r29, 0x02D2
			printf("MP");
     bba:	df 92       	push	r13
     bbc:	cf 92       	push	r12
     bbe:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
			for (uint8_t i = 5; i > 1; i--)
     bc6:	98 2c       	mov	r9, r8
			{
				sram_goto_line(i);
     bc8:	89 2d       	mov	r24, r9
     bca:	f6 d6       	rcall	.+3564   	; 0x19b8 <sram_goto_line>
				sram_goto_column(0);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	fb d6       	rcall	.+3574   	; 0x19c6 <sram_goto_column>
				if(tempscore != 0){
     bd0:	20 97       	sbiw	r28, 0x00	; 0
     bd2:	79 f0       	breq	.+30     	; 0xbf2 <flappy_game+0xbe>
					sram_write_char('0'+(tempscore%10));
     bd4:	ce 01       	movw	r24, r28
     bd6:	b8 01       	movw	r22, r16
     bd8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodhi4>
     bdc:	5c 01       	movw	r10, r24
     bde:	80 e3       	ldi	r24, 0x30	; 48
     be0:	8a 0d       	add	r24, r10
     be2:	af d6       	rcall	.+3422   	; 0x1942 <sram_write_char>
					tempscore -= tempscore%10;
     be4:	ce 01       	movw	r24, r28
     be6:	8a 19       	sub	r24, r10
     be8:	9b 09       	sbc	r25, r11
					tempscore /= 10;
     bea:	b8 01       	movw	r22, r16
     bec:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodhi4>
     bf0:	eb 01       	movw	r28, r22
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
			for (uint8_t i = 5; i > 1; i--)
     bf2:	9a 94       	dec	r9
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	98 12       	cpse	r9, r24
     bf8:	e7 cf       	rjmp	.-50     	; 0xbc8 <flappy_game+0x94>
					tempscore -= tempscore%10;
					tempscore /= 10;
				}
				
			}
			sram_goto_line(7);
     bfa:	87 e0       	ldi	r24, 0x07	; 7
     bfc:	dd d6       	rcall	.+3514   	; 0x19b8 <sram_goto_line>
			sram_goto_column(0);
     bfe:	80 e0       	ldi	r24, 0x00	; 0
     c00:	e2 d6       	rcall	.+3524   	; 0x19c6 <sram_goto_column>
			sram_write_char('P');
     c02:	80 e5       	ldi	r24, 0x50	; 80
     c04:	9e d6       	rcall	.+3388   	; 0x1942 <sram_write_char>
			sram_update_oled();
     c06:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
			while(!(check_flag_left() | check_flag_right())){
     c0a:	9c dd       	rcall	.-1224   	; 0x744 <check_flag_left>
     c0c:	c8 2f       	mov	r28, r24
     c0e:	a3 dd       	rcall	.-1210   	; 0x756 <check_flag_right>
     c10:	8c 2b       	or	r24, r28
     c12:	d9 f3       	breq	.-10     	; 0xc0a <flappy_game+0xd6>
				
			}
			printf("MR");
     c14:	ff 92       	push	r15
     c16:	ef 92       	push	r14
     c18:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     c20:	06 df       	rcall	.-500    	; 0xa2e <flappy_pixel_collision>
     c22:	81 11       	cpse	r24, r1
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <flappy_game+0xfc>
     c26:	80 91 ce 02 	lds	r24, 0x02CE
     c2a:	88 23       	and	r24, r24
     c2c:	09 f4       	brne	.+2      	; 0xc30 <flappy_game+0xfc>
     c2e:	ab cf       	rjmp	.-170    	; 0xb86 <flappy_game+0x52>
				
			}
			printf("MR");
		}
	}
	printf("M2");
     c30:	84 e8       	ldi	r24, 0x84	; 132
     c32:	91 e0       	ldi	r25, 0x01	; 1
     c34:	9f 93       	push	r25
     c36:	8f 93       	push	r24
     c38:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
	timer_delay(1000);
     c3c:	88 ee       	ldi	r24, 0xE8	; 232
     c3e:	93 e0       	ldi	r25, 0x03	; 3
     c40:	0e 94 96 10 	call	0x212c	; 0x212c <timer_delay>
	sram_init();
     c44:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <sram_init>
	sram_goto_line(0);
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	b6 d6       	rcall	.+3436   	; 0x19b8 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*3);
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	bb d6       	rcall	.+3446   	; 0x19c6 <sram_goto_column>
	sram_write_string("GAME  OVER");
     c50:	87 e8       	ldi	r24, 0x87	; 135
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	bf d6       	rcall	.+3454   	; 0x19d4 <sram_write_string>
	sram_goto_line(1);
     c56:	81 e0       	ldi	r24, 0x01	; 1
     c58:	af d6       	rcall	.+3422   	; 0x19b8 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*4);
     c5a:	80 e2       	ldi	r24, 0x20	; 32
     c5c:	b4 d6       	rcall	.+3432   	; 0x19c6 <sram_goto_column>
	sram_write_string("SCORE: ");
     c5e:	82 e9       	ldi	r24, 0x92	; 146
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	b8 d6       	rcall	.+3440   	; 0x19d4 <sram_write_string>
	sram_write_int(score);
     c64:	80 91 d1 02 	lds	r24, 0x02D1
     c68:	90 91 d2 02 	lds	r25, 0x02D2
     c6c:	c7 d6       	rcall	.+3470   	; 0x19fc <sram_write_int>
	sram_update_oled();
     c6e:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <sram_update_oled>
     c72:	0f 90       	pop	r0
     c74:	0f 90       	pop	r0
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	ff 90       	pop	r15
     c80:	ef 90       	pop	r14
     c82:	df 90       	pop	r13
     c84:	cf 90       	pop	r12
     c86:	bf 90       	pop	r11
     c88:	af 90       	pop	r10
     c8a:	9f 90       	pop	r9
     c8c:	8f 90       	pop	r8
     c8e:	08 95       	ret

00000c90 <flappy_main>:
double acceleration = 0.03;
double player_height_accurate = 0;
uint8_t difficulity = 100;
uint8_t new_wall = 100;

int flappy_main(void){
     c90:	cf 92       	push	r12
     c92:	df 92       	push	r13
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
     c9c:	82 b7       	in	r24, 0x32	; 50
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 b9 13 	call	0x2772	; 0x2772 <srand>
	quit = 0;
     ca4:	10 92 d0 02 	sts	0x02D0, r1
	flappy_loading_screen();
     ca8:	9c dd       	rcall	.-1224   	; 0x7e2 <flappy_loading_screen>

	while (quit != 1){
     caa:	80 91 d0 02 	lds	r24, 0x02D0
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	79 f1       	breq	.+94     	; 0xd10 <flappy_main+0x80>
		game_over = 0;
		
		player_height_accurate = 1;
     cb2:	0f 2e       	mov	r0, r31
     cb4:	c1 2c       	mov	r12, r1
     cb6:	d1 2c       	mov	r13, r1
     cb8:	f0 e8       	ldi	r31, 0x80	; 128
     cba:	ef 2e       	mov	r14, r31
     cbc:	ff e3       	ldi	r31, 0x3F	; 63
     cbe:	ff 2e       	mov	r15, r31
     cc0:	f0 2d       	mov	r31, r0
		player_height = 1;
     cc2:	d1 e0       	ldi	r29, 0x01	; 1
		velocity = 0;
		difficulity = 100;
     cc4:	c4 e6       	ldi	r28, 0x64	; 100
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
		game_over = 0;
     cc6:	10 92 ce 02 	sts	0x02CE, r1
		
		player_height_accurate = 1;
     cca:	c0 92 c6 02 	sts	0x02C6, r12
     cce:	d0 92 c7 02 	sts	0x02C7, r13
     cd2:	e0 92 c8 02 	sts	0x02C8, r14
     cd6:	f0 92 c9 02 	sts	0x02C9, r15
		player_height = 1;
     cda:	d0 93 cf 02 	sts	0x02CF, r29
		velocity = 0;
     cde:	10 92 ca 02 	sts	0x02CA, r1
     ce2:	10 92 cb 02 	sts	0x02CB, r1
     ce6:	10 92 cc 02 	sts	0x02CC, r1
     cea:	10 92 cd 02 	sts	0x02CD, r1
		difficulity = 100;
     cee:	c0 93 0b 01 	sts	0x010B, r28
		score = 0;
     cf2:	10 92 d2 02 	sts	0x02D2, r1
     cf6:	10 92 d1 02 	sts	0x02D1, r1
		flappy_game();
     cfa:	1c df       	rcall	.-456    	; 0xb34 <flappy_game>
		sram_goto_line(6);
     cfc:	86 e0       	ldi	r24, 0x06	; 6
     cfe:	5c d6       	rcall	.+3256   	; 0x19b8 <sram_goto_line>
		sram_write_string("   TRY AGAIN?");
     d00:	8a e9       	ldi	r24, 0x9A	; 154
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	67 d6       	rcall	.+3278   	; 0x19d4 <sram_write_string>
		flappy_restart();
     d06:	4e dd       	rcall	.-1380   	; 0x7a4 <flappy_restart>
int flappy_main(void){
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
     d08:	80 91 d0 02 	lds	r24, 0x02D0
     d0c:	81 30       	cpi	r24, 0x01	; 1
     d0e:	d9 f6       	brne	.-74     	; 0xcc6 <flappy_main+0x36>
		sram_write_string("   TRY AGAIN?");
		flappy_restart();
	}
	
	return 0;
}
     d10:	80 e0       	ldi	r24, 0x00	; 0
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	ff 90       	pop	r15
     d1a:	ef 90       	pop	r14
     d1c:	df 90       	pop	r13
     d1e:	cf 90       	pop	r12
     d20:	08 95       	ret

00000d22 <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
     d22:	0f 93       	push	r16
     d24:	1f 93       	push	r17
     d26:	cf 93       	push	r28
     d28:	df 93       	push	r29
     d2a:	c4 e6       	ldi	r28, 0x64	; 100
     d2c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     d2e:	00 91 dd 02 	lds	r16, 0x02DD
     d32:	10 91 de 02 	lds	r17, 0x02DE
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	c5 dc       	rcall	.-1654   	; 0x6c6 <readADC>
     d3c:	01 58       	subi	r16, 0x81	; 129
     d3e:	1f 4f       	sbci	r17, 0xFF	; 255
     d40:	08 1b       	sub	r16, r24
     d42:	19 0b       	sbc	r17, r25
     d44:	10 93 de 02 	sts	0x02DE, r17
     d48:	00 93 dd 02 	sts	0x02DD, r16
		calibrate_y += 127 - readADC(2);
     d4c:	00 91 db 02 	lds	r16, 0x02DB
     d50:	10 91 dc 02 	lds	r17, 0x02DC
     d54:	82 e0       	ldi	r24, 0x02	; 2
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	b6 dc       	rcall	.-1684   	; 0x6c6 <readADC>
     d5a:	01 58       	subi	r16, 0x81	; 129
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	08 1b       	sub	r16, r24
     d60:	19 0b       	sbc	r17, r25
     d62:	10 93 dc 02 	sts	0x02DC, r17
     d66:	00 93 db 02 	sts	0x02DB, r16
     d6a:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     d6c:	20 97       	sbiw	r28, 0x00	; 0
     d6e:	f9 f6       	brne	.-66     	; 0xd2e <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     d70:	80 91 dd 02 	lds	r24, 0x02DD
     d74:	90 91 de 02 	lds	r25, 0x02DE
     d78:	24 e6       	ldi	r18, 0x64	; 100
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	b9 01       	movw	r22, r18
     d7e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodhi4>
     d82:	70 93 de 02 	sts	0x02DE, r23
     d86:	60 93 dd 02 	sts	0x02DD, r22
	calibrate_y /= CALIBRATE_READINGS;
     d8a:	80 91 db 02 	lds	r24, 0x02DB
     d8e:	90 91 dc 02 	lds	r25, 0x02DC
     d92:	b9 01       	movw	r22, r18
     d94:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodhi4>
     d98:	70 93 dc 02 	sts	0x02DC, r23
     d9c:	60 93 db 02 	sts	0x02DB, r22
}
     da0:	df 91       	pop	r29
     da2:	cf 91       	pop	r28
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	08 95       	ret

00000daa <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     daa:	2f 92       	push	r2
     dac:	3f 92       	push	r3
     dae:	4f 92       	push	r4
     db0:	5f 92       	push	r5
     db2:	6f 92       	push	r6
     db4:	7f 92       	push	r7
     db6:	8f 92       	push	r8
     db8:	9f 92       	push	r9
     dba:	af 92       	push	r10
     dbc:	bf 92       	push	r11
     dbe:	cf 92       	push	r12
     dc0:	df 92       	push	r13
     dc2:	ef 92       	push	r14
     dc4:	ff 92       	push	r15
     dc6:	0f 93       	push	r16
     dc8:	1f 93       	push	r17
     dca:	cf 93       	push	r28
     dcc:	df 93       	push	r29
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <signal_to_range+0x26>
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <signal_to_range+0x28>
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <signal_to_range+0x2a>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	3c 01       	movw	r6, r24
     dda:	7a 83       	std	Y+2, r23	; 0x02
     ddc:	69 83       	std	Y+1, r22	; 0x01
     dde:	5c 83       	std	Y+4, r21	; 0x04
     de0:	4b 83       	std	Y+3, r20	; 0x03
     de2:	3e 83       	std	Y+6, r19	; 0x06
     de4:	2d 83       	std	Y+5, r18	; 0x05
     de6:	18 01       	movw	r2, r16
     de8:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     dea:	b9 01       	movw	r22, r18
     dec:	88 27       	eor	r24, r24
     dee:	77 fd       	sbrc	r23, 7
     df0:	80 95       	com	r24
     df2:	98 2f       	mov	r25, r24
     df4:	0e 94 ba 11 	call	0x2374	; 0x2374 <__floatsisf>
     df8:	4b 01       	movw	r8, r22
     dfa:	5c 01       	movw	r10, r24
     dfc:	b3 01       	movw	r22, r6
     dfe:	6e 0d       	add	r22, r14
     e00:	7f 1d       	adc	r23, r15
     e02:	29 81       	ldd	r18, Y+1	; 0x01
     e04:	3a 81       	ldd	r19, Y+2	; 0x02
     e06:	62 1b       	sub	r22, r18
     e08:	73 0b       	sbc	r23, r19
     e0a:	88 27       	eor	r24, r24
     e0c:	77 fd       	sbrc	r23, 7
     e0e:	80 95       	com	r24
     e10:	98 2f       	mov	r25, r24
     e12:	0e 94 ba 11 	call	0x2374	; 0x2374 <__floatsisf>
     e16:	2b 01       	movw	r4, r22
     e18:	3c 01       	movw	r6, r24
     e1a:	b1 01       	movw	r22, r2
     e1c:	8d 81       	ldd	r24, Y+5	; 0x05
     e1e:	9e 81       	ldd	r25, Y+6	; 0x06
     e20:	68 1b       	sub	r22, r24
     e22:	79 0b       	sbc	r23, r25
     e24:	88 27       	eor	r24, r24
     e26:	77 fd       	sbrc	r23, 7
     e28:	80 95       	com	r24
     e2a:	98 2f       	mov	r25, r24
     e2c:	0e 94 ba 11 	call	0x2374	; 0x2374 <__floatsisf>
     e30:	9b 01       	movw	r18, r22
     e32:	ac 01       	movw	r20, r24
     e34:	c3 01       	movw	r24, r6
     e36:	b2 01       	movw	r22, r4
     e38:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__mulsf3>
     e3c:	2b 01       	movw	r4, r22
     e3e:	3c 01       	movw	r6, r24
     e40:	6b 81       	ldd	r22, Y+3	; 0x03
     e42:	7c 81       	ldd	r23, Y+4	; 0x04
     e44:	e9 81       	ldd	r30, Y+1	; 0x01
     e46:	fa 81       	ldd	r31, Y+2	; 0x02
     e48:	6e 1b       	sub	r22, r30
     e4a:	7f 0b       	sbc	r23, r31
     e4c:	88 27       	eor	r24, r24
     e4e:	77 fd       	sbrc	r23, 7
     e50:	80 95       	com	r24
     e52:	98 2f       	mov	r25, r24
     e54:	0e 94 ba 11 	call	0x2374	; 0x2374 <__floatsisf>
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	c3 01       	movw	r24, r6
     e5e:	b2 01       	movw	r22, r4
     e60:	0e 94 1f 11 	call	0x223e	; 0x223e <__divsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c5 01       	movw	r24, r10
     e6a:	b4 01       	movw	r22, r8
     e6c:	0e 94 b7 10 	call	0x216e	; 0x216e <__addsf3>
     e70:	0e 94 87 11 	call	0x230e	; 0x230e <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     e74:	c1 01       	movw	r24, r2
     e76:	80 1b       	sub	r24, r16
     e78:	91 0b       	sbc	r25, r17
     e7a:	68 17       	cp	r22, r24
     e7c:	79 07       	cpc	r23, r25
     e7e:	74 f5       	brge	.+92     	; 0xedc <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     e80:	8d 81       	ldd	r24, Y+5	; 0x05
     e82:	9e 81       	ldd	r25, Y+6	; 0x06
     e84:	80 0f       	add	r24, r16
     e86:	91 1f       	adc	r25, r17
     e88:	86 17       	cp	r24, r22
     e8a:	97 07       	cpc	r25, r23
     e8c:	4c f5       	brge	.+82     	; 0xee0 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     e8e:	f8 01       	movw	r30, r16
     e90:	11 23       	and	r17, r17
     e92:	0c f4       	brge	.+2      	; 0xe96 <signal_to_range+0xec>
     e94:	31 96       	adiw	r30, 0x01	; 1
     e96:	f5 95       	asr	r31
     e98:	e7 95       	ror	r30
     e9a:	d8 01       	movw	r26, r16
     e9c:	12 c0       	rjmp	.+36     	; 0xec2 <signal_to_range+0x118>
     e9e:	8a 0f       	add	r24, r26
     ea0:	9b 1f       	adc	r25, r27
     ea2:	ac 01       	movw	r20, r24
     ea4:	4e 0f       	add	r20, r30
     ea6:	5f 1f       	adc	r21, r31
     ea8:	64 17       	cp	r22, r20
     eaa:	75 07       	cpc	r23, r21
     eac:	14 f0       	brlt	.+4      	; 0xeb2 <signal_to_range+0x108>
				reference += step;
     eae:	69 01       	movw	r12, r18
     eb0:	0b c0       	rjmp	.+22     	; 0xec8 <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     eb2:	c6 01       	movw	r24, r12
     eb4:	8e 1b       	sub	r24, r30
     eb6:	9f 0b       	sbc	r25, r31
     eb8:	86 17       	cp	r24, r22
     eba:	97 07       	cpc	r25, r23
     ebc:	14 f0       	brlt	.+4      	; 0xec2 <signal_to_range+0x118>
				reference -= step;
     ebe:	c0 1a       	sub	r12, r16
     ec0:	d1 0a       	sbc	r13, r17
     ec2:	c6 01       	movw	r24, r12
     ec4:	80 1b       	sub	r24, r16
     ec6:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     ec8:	96 01       	movw	r18, r12
     eca:	20 0f       	add	r18, r16
     ecc:	31 1f       	adc	r19, r17
     ece:	62 17       	cp	r22, r18
     ed0:	73 07       	cpc	r23, r19
     ed2:	2c f7       	brge	.-54     	; 0xe9e <signal_to_range+0xf4>
     ed4:	86 17       	cp	r24, r22
     ed6:	97 07       	cpc	r25, r23
     ed8:	14 f7       	brge	.-60     	; 0xe9e <signal_to_range+0xf4>
     eda:	04 c0       	rjmp	.+8      	; 0xee4 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     edc:	61 01       	movw	r12, r2
     ede:	02 c0       	rjmp	.+4      	; 0xee4 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     ee0:	cd 80       	ldd	r12, Y+5	; 0x05
     ee2:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     ee4:	c6 01       	movw	r24, r12
     ee6:	26 96       	adiw	r28, 0x06	; 6
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	df 91       	pop	r29
     ef4:	cf 91       	pop	r28
     ef6:	1f 91       	pop	r17
     ef8:	0f 91       	pop	r16
     efa:	ff 90       	pop	r15
     efc:	ef 90       	pop	r14
     efe:	df 90       	pop	r13
     f00:	cf 90       	pop	r12
     f02:	bf 90       	pop	r11
     f04:	af 90       	pop	r10
     f06:	9f 90       	pop	r9
     f08:	8f 90       	pop	r8
     f0a:	7f 90       	pop	r7
     f0c:	6f 90       	pop	r6
     f0e:	5f 90       	pop	r5
     f10:	4f 90       	pop	r4
     f12:	3f 90       	pop	r3
     f14:	2f 90       	pop	r2
     f16:	08 95       	ret

00000f18 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     f18:	af 92       	push	r10
     f1a:	bf 92       	push	r11
     f1c:	cf 92       	push	r12
     f1e:	df 92       	push	r13
     f20:	ef 92       	push	r14
     f22:	ff 92       	push	r15
     f24:	0f 93       	push	r16
     f26:	1f 93       	push	r17
	switch(channel){
     f28:	82 35       	cpi	r24, 0x52	; 82
     f2a:	09 f4       	brne	.+2      	; 0xf2e <read_control_input+0x16>
     f2c:	6e c0       	rjmp	.+220    	; 0x100a <read_control_input+0xf2>
     f2e:	20 f4       	brcc	.+8      	; 0xf38 <read_control_input+0x20>
     f30:	8c 34       	cpi	r24, 0x4C	; 76
     f32:	09 f4       	brne	.+2      	; 0xf36 <read_control_input+0x1e>
     f34:	4a c0       	rjmp	.+148    	; 0xfca <read_control_input+0xb2>
     f36:	89 c0       	rjmp	.+274    	; 0x104a <read_control_input+0x132>
     f38:	88 35       	cpi	r24, 0x58	; 88
     f3a:	19 f0       	breq	.+6      	; 0xf42 <read_control_input+0x2a>
     f3c:	89 35       	cpi	r24, 0x59	; 89
     f3e:	19 f1       	breq	.+70     	; 0xf86 <read_control_input+0x6e>
     f40:	84 c0       	rjmp	.+264    	; 0x104a <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     f42:	c0 90 d9 02 	lds	r12, 0x02D9
     f46:	d0 90 da 02 	lds	r13, 0x02DA
     f4a:	e0 90 dd 02 	lds	r14, 0x02DD
     f4e:	f0 90 de 02 	lds	r15, 0x02DE
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	b7 db       	rcall	.-2194   	; 0x6c6 <readADC>
     f58:	0f 2e       	mov	r0, r31
     f5a:	fa e0       	ldi	r31, 0x0A	; 10
     f5c:	af 2e       	mov	r10, r31
     f5e:	b1 2c       	mov	r11, r1
     f60:	f0 2d       	mov	r31, r0
     f62:	04 e6       	ldi	r16, 0x64	; 100
     f64:	10 e0       	ldi	r17, 0x00	; 0
     f66:	2c e9       	ldi	r18, 0x9C	; 156
     f68:	3f ef       	ldi	r19, 0xFF	; 255
     f6a:	4f ef       	ldi	r20, 0xFF	; 255
     f6c:	50 e0       	ldi	r21, 0x00	; 0
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	70 e0       	ldi	r23, 0x00	; 0
     f72:	1b df       	rcall	.-458    	; 0xdaa <signal_to_range>
     f74:	90 93 da 02 	sts	0x02DA, r25
     f78:	80 93 d9 02 	sts	0x02D9, r24
			return ref_X;
     f7c:	80 91 d9 02 	lds	r24, 0x02D9
     f80:	90 91 da 02 	lds	r25, 0x02DA
     f84:	64 c0       	rjmp	.+200    	; 0x104e <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     f86:	c0 90 d7 02 	lds	r12, 0x02D7
     f8a:	d0 90 d8 02 	lds	r13, 0x02D8
     f8e:	e0 90 db 02 	lds	r14, 0x02DB
     f92:	f0 90 dc 02 	lds	r15, 0x02DC
     f96:	82 e0       	ldi	r24, 0x02	; 2
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	95 db       	rcall	.-2262   	; 0x6c6 <readADC>
     f9c:	0f 2e       	mov	r0, r31
     f9e:	fa e0       	ldi	r31, 0x0A	; 10
     fa0:	af 2e       	mov	r10, r31
     fa2:	b1 2c       	mov	r11, r1
     fa4:	f0 2d       	mov	r31, r0
     fa6:	04 e6       	ldi	r16, 0x64	; 100
     fa8:	10 e0       	ldi	r17, 0x00	; 0
     faa:	2c e9       	ldi	r18, 0x9C	; 156
     fac:	3f ef       	ldi	r19, 0xFF	; 255
     fae:	4f ef       	ldi	r20, 0xFF	; 255
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	60 e0       	ldi	r22, 0x00	; 0
     fb4:	70 e0       	ldi	r23, 0x00	; 0
     fb6:	f9 de       	rcall	.-526    	; 0xdaa <signal_to_range>
     fb8:	90 93 d8 02 	sts	0x02D8, r25
     fbc:	80 93 d7 02 	sts	0x02D7, r24
			return ref_Y;
     fc0:	80 91 d7 02 	lds	r24, 0x02D7
     fc4:	90 91 d8 02 	lds	r25, 0x02D8
     fc8:	42 c0       	rjmp	.+132    	; 0x104e <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     fca:	c0 90 d5 02 	lds	r12, 0x02D5
     fce:	d0 90 d6 02 	lds	r13, 0x02D6
     fd2:	83 e0       	ldi	r24, 0x03	; 3
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	77 db       	rcall	.-2322   	; 0x6c6 <readADC>
     fd8:	0f 2e       	mov	r0, r31
     fda:	fa e0       	ldi	r31, 0x0A	; 10
     fdc:	af 2e       	mov	r10, r31
     fde:	b1 2c       	mov	r11, r1
     fe0:	f0 2d       	mov	r31, r0
     fe2:	e1 2c       	mov	r14, r1
     fe4:	f1 2c       	mov	r15, r1
     fe6:	04 e6       	ldi	r16, 0x64	; 100
     fe8:	10 e0       	ldi	r17, 0x00	; 0
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	4f ef       	ldi	r20, 0xFF	; 255
     ff0:	50 e0       	ldi	r21, 0x00	; 0
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	d9 de       	rcall	.-590    	; 0xdaa <signal_to_range>
     ff8:	90 93 d6 02 	sts	0x02D6, r25
     ffc:	80 93 d5 02 	sts	0x02D5, r24
		return ref_L;
    1000:	80 91 d5 02 	lds	r24, 0x02D5
    1004:	90 91 d6 02 	lds	r25, 0x02D6
    1008:	22 c0       	rjmp	.+68     	; 0x104e <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
    100a:	c0 90 d3 02 	lds	r12, 0x02D3
    100e:	d0 90 d4 02 	lds	r13, 0x02D4
    1012:	84 e0       	ldi	r24, 0x04	; 4
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	57 db       	rcall	.-2386   	; 0x6c6 <readADC>
    1018:	0f 2e       	mov	r0, r31
    101a:	fa e0       	ldi	r31, 0x0A	; 10
    101c:	af 2e       	mov	r10, r31
    101e:	b1 2c       	mov	r11, r1
    1020:	f0 2d       	mov	r31, r0
    1022:	e1 2c       	mov	r14, r1
    1024:	f1 2c       	mov	r15, r1
    1026:	04 e6       	ldi	r16, 0x64	; 100
    1028:	10 e0       	ldi	r17, 0x00	; 0
    102a:	20 e0       	ldi	r18, 0x00	; 0
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	4f ef       	ldi	r20, 0xFF	; 255
    1030:	50 e0       	ldi	r21, 0x00	; 0
    1032:	60 e0       	ldi	r22, 0x00	; 0
    1034:	70 e0       	ldi	r23, 0x00	; 0
    1036:	b9 de       	rcall	.-654    	; 0xdaa <signal_to_range>
    1038:	90 93 d4 02 	sts	0x02D4, r25
    103c:	80 93 d3 02 	sts	0x02D3, r24
			return ref_R;
    1040:	80 91 d3 02 	lds	r24, 0x02D3
    1044:	90 91 d4 02 	lds	r25, 0x02D4
    1048:	02 c0       	rjmp	.+4      	; 0x104e <read_control_input+0x136>
	}
	return 0;
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
}
    104e:	1f 91       	pop	r17
    1050:	0f 91       	pop	r16
    1052:	ff 90       	pop	r15
    1054:	ef 90       	pop	r14
    1056:	df 90       	pop	r13
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	08 95       	ret

00001060 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
    1060:	60 de       	rcall	.-832    	; 0xd22 <calibrate_joystick>
	ref_X = read_control_input('X');
    1062:	88 e5       	ldi	r24, 0x58	; 88
    1064:	59 df       	rcall	.-334    	; 0xf18 <read_control_input>
    1066:	90 93 da 02 	sts	0x02DA, r25
    106a:	80 93 d9 02 	sts	0x02D9, r24
	ref_Y = read_control_input('Y');
    106e:	89 e5       	ldi	r24, 0x59	; 89
    1070:	53 df       	rcall	.-346    	; 0xf18 <read_control_input>
    1072:	90 93 d8 02 	sts	0x02D8, r25
    1076:	80 93 d7 02 	sts	0x02D7, r24
	ref_L = read_control_input('L');
    107a:	8c e4       	ldi	r24, 0x4C	; 76
    107c:	4d df       	rcall	.-358    	; 0xf18 <read_control_input>
    107e:	90 93 d6 02 	sts	0x02D6, r25
    1082:	80 93 d5 02 	sts	0x02D5, r24
	ref_R = read_control_input('R');
    1086:	82 e5       	ldi	r24, 0x52	; 82
    1088:	47 df       	rcall	.-370    	; 0xf18 <read_control_input>
    108a:	90 93 d4 02 	sts	0x02D4, r25
    108e:	80 93 d3 02 	sts	0x02D3, r24
    1092:	08 95       	ret

00001094 <initialize_menu>:
	&debug_0
};

char temp[16];

void initialize_menu(void){
    1094:	8f 92       	push	r8
    1096:	9f 92       	push	r9
    1098:	af 92       	push	r10
    109a:	bf 92       	push	r11
    109c:	cf 92       	push	r12
    109e:	df 92       	push	r13
    10a0:	ef 92       	push	r14
    10a2:	ff 92       	push	r15
    10a4:	0f 93       	push	r16
    10a6:	1f 93       	push	r17
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	0f 2e       	mov	r0, r31
    10ae:	fc e1       	ldi	r31, 0x1C	; 28
    10b0:	cf 2e       	mov	r12, r31
    10b2:	f1 e0       	ldi	r31, 0x01	; 1
    10b4:	df 2e       	mov	r13, r31
    10b6:	f0 2d       	mov	r31, r0
    10b8:	0f 2e       	mov	r0, r31
    10ba:	f2 e1       	ldi	r31, 0x12	; 18
    10bc:	ef 2e       	mov	r14, r31
    10be:	f1 e0       	ldi	r31, 0x01	; 1
    10c0:	ff 2e       	mov	r15, r31
    10c2:	f0 2d       	mov	r31, r0
    10c4:	06 e2       	ldi	r16, 0x26	; 38
    10c6:	11 e0       	ldi	r17, 0x01	; 1
    10c8:	21 e0       	ldi	r18, 0x01	; 1
    10ca:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
    10cc:	c5 e0       	ldi	r28, 0x05	; 5
    10ce:	d0 e0       	ldi	r29, 0x00	; 0
    10d0:	d6 01       	movw	r26, r12
    10d2:	ad 90       	ld	r10, X+
    10d4:	bd 90       	ld	r11, X+
    10d6:	6d 01       	movw	r12, r26
    10d8:	f7 01       	movw	r30, r14
    10da:	81 90       	ld	r8, Z+
    10dc:	91 90       	ld	r9, Z+
    10de:	7f 01       	movw	r14, r30
    10e0:	c9 01       	movw	r24, r18
    10e2:	be 01       	movw	r22, r28
    10e4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__divmodhi4>
    10e8:	fc 01       	movw	r30, r24
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ea 5d       	subi	r30, 0xDA	; 218
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	d8 01       	movw	r26, r16
    10f8:	ed 91       	ld	r30, X+
    10fa:	fd 91       	ld	r31, X+
    10fc:	8d 01       	movw	r16, r26
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    10fe:	95 83       	std	Z+5, r25	; 0x05
    1100:	84 83       	std	Z+4, r24	; 0x04
	new_menu->ptr_child = ptr_child;
    1102:	97 82       	std	Z+7, r9	; 0x07
    1104:	86 82       	std	Z+6, r8	; 0x06
	new_menu->ptr_parent = ptr_parent;
    1106:	11 86       	std	Z+9, r1	; 0x09
    1108:	10 86       	std	Z+8, r1	; 0x08
	
	new_menu->title = title;
    110a:	b1 82       	std	Z+1, r11	; 0x01
    110c:	a0 82       	st	Z, r10
	new_menu->n_sib = n_sib;
    110e:	d3 83       	std	Z+3, r29	; 0x03
    1110:	c2 83       	std	Z+2, r28	; 0x02
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
};

char temp[16];

void initialize_menu(void){
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
    1116:	26 30       	cpi	r18, 0x06	; 6
    1118:	31 05       	cpc	r19, r1
    111a:	d1 f6       	brne	.-76     	; 0x10d0 <initialize_menu+0x3c>
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    111c:	80 91 38 01 	lds	r24, 0x0138
    1120:	90 91 39 01 	lds	r25, 0x0139
    1124:	60 91 e4 02 	lds	r22, 0x02E4
    1128:	70 91 e5 02 	lds	r23, 0x02E5
    112c:	e6 e2       	ldi	r30, 0x26	; 38
    112e:	f1 e0       	ldi	r31, 0x01	; 1
    1130:	40 81       	ld	r20, Z
    1132:	51 81       	ldd	r21, Z+1	; 0x01
    1134:	0f 2e       	mov	r0, r31
    1136:	fc e3       	ldi	r31, 0x3C	; 60
    1138:	ef 2e       	mov	r14, r31
    113a:	f1 e0       	ldi	r31, 0x01	; 1
    113c:	ff 2e       	mov	r15, r31
    113e:	f0 2d       	mov	r31, r0
    1140:	e7 01       	movw	r28, r14
    1142:	a8 81       	ld	r26, Y
    1144:	b9 81       	ldd	r27, Y+1	; 0x01
    1146:	2e e3       	ldi	r18, 0x3E	; 62
    1148:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    114a:	e9 01       	movw	r28, r18
    114c:	08 81       	ld	r16, Y
    114e:	19 81       	ldd	r17, Y+1	; 0x01
    1150:	15 96       	adiw	r26, 0x05	; 5
    1152:	1c 93       	st	X, r17
    1154:	0e 93       	st	-X, r16
    1156:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1158:	17 96       	adiw	r26, 0x07	; 7
    115a:	7c 93       	st	X, r23
    115c:	6e 93       	st	-X, r22
    115e:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1160:	19 96       	adiw	r26, 0x09	; 9
    1162:	5c 93       	st	X, r21
    1164:	4e 93       	st	-X, r20
    1166:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1168:	11 96       	adiw	r26, 0x01	; 1
    116a:	9c 93       	st	X, r25
    116c:	8e 93       	st	-X, r24
	new_menu->n_sib = n_sib;
    116e:	82 e0       	ldi	r24, 0x02	; 2
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	9c 93       	st	X, r25
    1176:	8e 93       	st	-X, r24
    1178:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    117a:	40 91 3a 01 	lds	r20, 0x013A
    117e:	50 91 3b 01 	lds	r21, 0x013B
    1182:	00 91 e6 02 	lds	r16, 0x02E6
    1186:	10 91 e7 02 	lds	r17, 0x02E7
    118a:	60 81       	ld	r22, Z
    118c:	71 81       	ldd	r23, Z+1	; 0x01
    118e:	a8 81       	ld	r26, Y
    1190:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1192:	e7 01       	movw	r28, r14
    1194:	28 81       	ld	r18, Y
    1196:	39 81       	ldd	r19, Y+1	; 0x01
    1198:	15 96       	adiw	r26, 0x05	; 5
    119a:	3c 93       	st	X, r19
    119c:	2e 93       	st	-X, r18
    119e:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    11a0:	17 96       	adiw	r26, 0x07	; 7
    11a2:	1c 93       	st	X, r17
    11a4:	0e 93       	st	-X, r16
    11a6:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    11a8:	19 96       	adiw	r26, 0x09	; 9
    11aa:	7c 93       	st	X, r23
    11ac:	6e 93       	st	-X, r22
    11ae:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    11b0:	11 96       	adiw	r26, 0x01	; 1
    11b2:	5c 93       	st	X, r21
    11b4:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	9c 93       	st	X, r25
    11ba:	8e 93       	st	-X, r24
    11bc:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    11be:	40 91 40 01 	lds	r20, 0x0140
    11c2:	50 91 41 01 	lds	r21, 0x0141
    11c6:	00 91 e8 02 	lds	r16, 0x02E8
    11ca:	10 91 e9 02 	lds	r17, 0x02E9
    11ce:	60 81       	ld	r22, Z
    11d0:	71 81       	ldd	r23, Z+1	; 0x01
    11d2:	0f 2e       	mov	r0, r31
    11d4:	f4 e4       	ldi	r31, 0x44	; 68
    11d6:	cf 2e       	mov	r12, r31
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	df 2e       	mov	r13, r31
    11dc:	f0 2d       	mov	r31, r0
    11de:	e6 01       	movw	r28, r12
    11e0:	a8 81       	ld	r26, Y
    11e2:	b9 81       	ldd	r27, Y+1	; 0x01
    11e4:	26 e4       	ldi	r18, 0x46	; 70
    11e6:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    11e8:	e9 01       	movw	r28, r18
    11ea:	e8 80       	ld	r14, Y
    11ec:	f9 80       	ldd	r15, Y+1	; 0x01
    11ee:	15 96       	adiw	r26, 0x05	; 5
    11f0:	fc 92       	st	X, r15
    11f2:	ee 92       	st	-X, r14
    11f4:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    11f6:	17 96       	adiw	r26, 0x07	; 7
    11f8:	1c 93       	st	X, r17
    11fa:	0e 93       	st	-X, r16
    11fc:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    11fe:	19 96       	adiw	r26, 0x09	; 9
    1200:	7c 93       	st	X, r23
    1202:	6e 93       	st	-X, r22
    1204:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1206:	11 96       	adiw	r26, 0x01	; 1
    1208:	5c 93       	st	X, r21
    120a:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    120c:	13 96       	adiw	r26, 0x03	; 3
    120e:	9c 93       	st	X, r25
    1210:	8e 93       	st	-X, r24
    1212:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    1214:	40 91 42 01 	lds	r20, 0x0142
    1218:	50 91 43 01 	lds	r21, 0x0143
    121c:	00 91 ea 02 	lds	r16, 0x02EA
    1220:	10 91 eb 02 	lds	r17, 0x02EB
    1224:	60 81       	ld	r22, Z
    1226:	71 81       	ldd	r23, Z+1	; 0x01
    1228:	a8 81       	ld	r26, Y
    122a:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    122c:	e6 01       	movw	r28, r12
    122e:	28 81       	ld	r18, Y
    1230:	39 81       	ldd	r19, Y+1	; 0x01
    1232:	15 96       	adiw	r26, 0x05	; 5
    1234:	3c 93       	st	X, r19
    1236:	2e 93       	st	-X, r18
    1238:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    123a:	17 96       	adiw	r26, 0x07	; 7
    123c:	1c 93       	st	X, r17
    123e:	0e 93       	st	-X, r16
    1240:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1242:	19 96       	adiw	r26, 0x09	; 9
    1244:	7c 93       	st	X, r23
    1246:	6e 93       	st	-X, r22
    1248:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    124a:	11 96       	adiw	r26, 0x01	; 1
    124c:	5c 93       	st	X, r21
    124e:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1250:	13 96       	adiw	r26, 0x03	; 3
    1252:	9c 93       	st	X, r25
    1254:	8e 93       	st	-X, r24
    1256:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    1258:	40 91 30 01 	lds	r20, 0x0130
    125c:	50 91 31 01 	lds	r21, 0x0131
    1260:	00 91 e0 02 	lds	r16, 0x02E0
    1264:	10 91 e1 02 	lds	r17, 0x02E1
    1268:	60 81       	ld	r22, Z
    126a:	71 81       	ldd	r23, Z+1	; 0x01
    126c:	0f 2e       	mov	r0, r31
    126e:	f4 e3       	ldi	r31, 0x34	; 52
    1270:	cf 2e       	mov	r12, r31
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	df 2e       	mov	r13, r31
    1276:	f0 2d       	mov	r31, r0
    1278:	e6 01       	movw	r28, r12
    127a:	a8 81       	ld	r26, Y
    127c:	b9 81       	ldd	r27, Y+1	; 0x01
    127e:	26 e3       	ldi	r18, 0x36	; 54
    1280:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1282:	e9 01       	movw	r28, r18
    1284:	e8 80       	ld	r14, Y
    1286:	f9 80       	ldd	r15, Y+1	; 0x01
    1288:	15 96       	adiw	r26, 0x05	; 5
    128a:	fc 92       	st	X, r15
    128c:	ee 92       	st	-X, r14
    128e:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1290:	17 96       	adiw	r26, 0x07	; 7
    1292:	1c 93       	st	X, r17
    1294:	0e 93       	st	-X, r16
    1296:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1298:	19 96       	adiw	r26, 0x09	; 9
    129a:	7c 93       	st	X, r23
    129c:	6e 93       	st	-X, r22
    129e:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    12a0:	11 96       	adiw	r26, 0x01	; 1
    12a2:	5c 93       	st	X, r21
    12a4:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    12a6:	13 96       	adiw	r26, 0x03	; 3
    12a8:	9c 93       	st	X, r25
    12aa:	8e 93       	st	-X, r24
    12ac:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    12ae:	40 91 32 01 	lds	r20, 0x0132
    12b2:	50 91 33 01 	lds	r21, 0x0133
    12b6:	a0 91 e2 02 	lds	r26, 0x02E2
    12ba:	b0 91 e3 02 	lds	r27, 0x02E3
    12be:	60 81       	ld	r22, Z
    12c0:	71 81       	ldd	r23, Z+1	; 0x01
    12c2:	e8 81       	ld	r30, Y
    12c4:	f9 81       	ldd	r31, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    12c6:	e6 01       	movw	r28, r12
    12c8:	28 81       	ld	r18, Y
    12ca:	39 81       	ldd	r19, Y+1	; 0x01
    12cc:	35 83       	std	Z+5, r19	; 0x05
    12ce:	24 83       	std	Z+4, r18	; 0x04
	new_menu->ptr_child = ptr_child;
    12d0:	b7 83       	std	Z+7, r27	; 0x07
    12d2:	a6 83       	std	Z+6, r26	; 0x06
	new_menu->ptr_parent = ptr_parent;
    12d4:	71 87       	std	Z+9, r23	; 0x09
    12d6:	60 87       	std	Z+8, r22	; 0x08
	
	new_menu->title = title;
    12d8:	51 83       	std	Z+1, r21	; 0x01
    12da:	40 83       	st	Z, r20
	new_menu->n_sib = n_sib;
    12dc:	93 83       	std	Z+3, r25	; 0x03
    12de:	82 83       	std	Z+2, r24	; 0x02
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
	}
	#endif
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_start;
    12e0:	86 e6       	ldi	r24, 0x66	; 102
    12e2:	93 e0       	ldi	r25, 0x03	; 3
    12e4:	90 93 ef 02 	sts	0x02EF, r25
    12e8:	80 93 ee 02 	sts	0x02EE, r24
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_start;
    12ec:	90 93 f1 02 	sts	0x02F1, r25
    12f0:	80 93 f0 02 	sts	0x02F0, r24
	
}
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	1f 91       	pop	r17
    12fa:	0f 91       	pop	r16
    12fc:	ff 90       	pop	r15
    12fe:	ef 90       	pop	r14
    1300:	df 90       	pop	r13
    1302:	cf 90       	pop	r12
    1304:	bf 90       	pop	r11
    1306:	af 90       	pop	r10
    1308:	9f 90       	pop	r9
    130a:	8f 90       	pop	r8
    130c:	08 95       	ret

0000130e <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	55 d2       	rcall	.+1194   	; 0x17bc <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
    1312:	60 ea       	ldi	r22, 0xA0	; 160
    1314:	70 e0       	ldi	r23, 0x00	; 0
    1316:	80 e1       	ldi	r24, 0x10	; 16
    1318:	93 e0       	ldi	r25, 0x03	; 3
    131a:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
	sram_write_string(temp);
    131e:	80 e1       	ldi	r24, 0x10	; 16
    1320:	93 e0       	ldi	r25, 0x03	; 3
    1322:	58 d3       	rcall	.+1712   	; 0x19d4 <sram_write_string>
	sram_clear_line(1);
    1324:	81 e0       	ldi	r24, 0x01	; 1
    1326:	1c d5       	rcall	.+2616   	; 0x1d60 <sram_clear_line>
	oled_goto_line(2);
    1328:	82 e0       	ldi	r24, 0x02	; 2
    132a:	48 d2       	rcall	.+1168   	; 0x17bc <oled_goto_line>
	strcpy_P(temp,btn_1);
    132c:	60 eb       	ldi	r22, 0xB0	; 176
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	80 e1       	ldi	r24, 0x10	; 16
    1332:	93 e0       	ldi	r25, 0x03	; 3
    1334:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
	sram_write_string(temp);
    1338:	80 e1       	ldi	r24, 0x10	; 16
    133a:	93 e0       	ldi	r25, 0x03	; 3
    133c:	4b d3       	rcall	.+1686   	; 0x19d4 <sram_write_string>
	sram_update_oled();
    133e:	e6 d4       	rcall	.+2508   	; 0x1d0c <sram_update_oled>
	while (!check_flag_right()){
    1340:	08 c0       	rjmp	.+16     	; 0x1352 <menu_set_contrast+0x44>
		write_c(0x81);
    1342:	81 e8       	ldi	r24, 0x81	; 129
    1344:	08 d2       	rcall	.+1040   	; 0x1756 <write_c>
		write_c(readADC(3)/2);
    1346:	83 e0       	ldi	r24, 0x03	; 3
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	bd d9       	rcall	.-3206   	; 0x6c6 <readADC>
    134c:	96 95       	lsr	r25
    134e:	87 95       	ror	r24
    1350:	02 d2       	rcall	.+1028   	; 0x1756 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_update_oled();
	while (!check_flag_right()){
    1352:	01 da       	rcall	.-3070   	; 0x756 <check_flag_right>
    1354:	88 23       	and	r24, r24
    1356:	a9 f3       	breq	.-22     	; 0x1342 <menu_set_contrast+0x34>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	
}
    1358:	08 95       	ret

0000135a <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
    1362:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
    1364:	8c 2f       	mov	r24, r28
    1366:	fc d4       	rcall	.+2552   	; 0x1d60 <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
    1368:	cf 5f       	subi	r28, 0xFF	; 255
    136a:	c7 30       	cpi	r28, 0x07	; 7
    136c:	d9 f7       	brne	.-10     	; 0x1364 <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	25 d2       	rcall	.+1098   	; 0x17bc <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
    1372:	69 e9       	ldi	r22, 0x99	; 153
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	80 e1       	ldi	r24, 0x10	; 16
    1378:	93 e0       	ldi	r25, 0x03	; 3
    137a:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
	sram_write_string(temp);
    137e:	80 e1       	ldi	r24, 0x10	; 16
    1380:	93 e0       	ldi	r25, 0x03	; 3
    1382:	28 d3       	rcall	.+1616   	; 0x19d4 <sram_write_string>
	oled_goto_line(2);
    1384:	82 e0       	ldi	r24, 0x02	; 2
    1386:	1a d2       	rcall	.+1076   	; 0x17bc <oled_goto_line>
	strcpy_P(temp,btn_1);
    1388:	60 eb       	ldi	r22, 0xB0	; 176
    138a:	70 e0       	ldi	r23, 0x00	; 0
    138c:	80 e1       	ldi	r24, 0x10	; 16
    138e:	93 e0       	ldi	r25, 0x03	; 3
    1390:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
	sram_write_string(temp);
    1394:	80 e1       	ldi	r24, 0x10	; 16
    1396:	93 e0       	ldi	r25, 0x03	; 3
    1398:	1d d3       	rcall	.+1594   	; 0x19d4 <sram_write_string>
	sram_update_oled();
    139a:	b8 d4       	rcall	.+2416   	; 0x1d0c <sram_update_oled>
	while (!check_flag_right()){
    139c:	dc d9       	rcall	.-3144   	; 0x756 <check_flag_right>
    139e:	88 23       	and	r24, r24
    13a0:	e9 f3       	breq	.-6      	; 0x139c <menu_calibrate_joystick+0x42>
		
	}
	
	
	oled_clear_line(0);
    13a2:	80 e0       	ldi	r24, 0x00	; 0
    13a4:	2a d2       	rcall	.+1108   	; 0x17fa <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
    13a6:	6b e8       	ldi	r22, 0x8B	; 139
    13a8:	70 e0       	ldi	r23, 0x00	; 0
    13aa:	80 e1       	ldi	r24, 0x10	; 16
    13ac:	93 e0       	ldi	r25, 0x03	; 3
    13ae:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
	sram_write_string(temp);
    13b2:	80 e1       	ldi	r24, 0x10	; 16
    13b4:	93 e0       	ldi	r25, 0x03	; 3
    13b6:	0e d3       	rcall	.+1564   	; 0x19d4 <sram_write_string>
    13b8:	c0 e7       	ldi	r28, 0x70	; 112
    13ba:	d0 e0       	ldi	r29, 0x00	; 0
    13bc:	08 e7       	ldi	r16, 0x78	; 120
    13be:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	1b d2       	rcall	.+1078   	; 0x17fa <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
    13c4:	fe 01       	movw	r30, r28
    13c6:	65 91       	lpm	r22, Z+
    13c8:	74 91       	lpm	r23, Z
    13ca:	80 e1       	ldi	r24, 0x10	; 16
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
		sram_write_string(temp);
    13d2:	80 e1       	ldi	r24, 0x10	; 16
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	fe d2       	rcall	.+1532   	; 0x19d4 <sram_write_string>
		sram_update_oled();
    13d8:	99 d4       	rcall	.+2354   	; 0x1d0c <sram_update_oled>
		while (!check_flag_right()){
    13da:	bd d9       	rcall	.-3206   	; 0x756 <check_flag_right>
    13dc:	88 23       	and	r24, r24
    13de:	e9 f3       	breq	.-6      	; 0x13da <menu_calibrate_joystick+0x80>
    13e0:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
    13e2:	c0 17       	cp	r28, r16
    13e4:	d1 07       	cpc	r29, r17
    13e6:	61 f7       	brne	.-40     	; 0x13c0 <menu_calibrate_joystick+0x66>
		while (!check_flag_right()){
			
		}
		
	}
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	08 95       	ret

000013f2 <menu_function_selected>:
	return 0;
	
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    13f2:	80 91 f0 02 	lds	r24, 0x02F0
    13f6:	90 91 f1 02 	lds	r25, 0x02F1
    13fa:	23 e0       	ldi	r18, 0x03	; 3
    13fc:	8a 32       	cpi	r24, 0x2A	; 42
    13fe:	92 07       	cpc	r25, r18
    1400:	11 f4       	brne	.+4      	; 0x1406 <menu_function_selected+0x14>
		menu_set_contrast();
    1402:	85 cf       	rjmp	.-246    	; 0x130e <menu_set_contrast>
    1404:	08 95       	ret
	}else if(current_selected == &debug_1){
    1406:	23 e0       	ldi	r18, 0x03	; 3
    1408:	8c 35       	cpi	r24, 0x5C	; 92
    140a:	92 07       	cpc	r25, r18
    140c:	11 f4       	brne	.+4      	; 0x1412 <menu_function_selected+0x20>
		menu_calibrate_joystick();
    140e:	a5 cf       	rjmp	.-182    	; 0x135a <menu_calibrate_joystick>
    1410:	08 95       	ret
	}
	#if FLAPPY == 1
	else if(current_selected == &game_0){
    1412:	82 55       	subi	r24, 0x52	; 82
    1414:	93 40       	sbci	r25, 0x03	; 3
    1416:	49 f4       	brne	.+18     	; 0x142a <menu_function_selected+0x38>
		flappy_main();
    1418:	3b dc       	rcall	.-1930   	; 0xc90 <flappy_main>
		printf("FLAPPYT");
    141a:	88 ea       	ldi	r24, 0xA8	; 168
    141c:	91 e0       	ldi	r25, 0x01	; 1
    141e:	9f 93       	push	r25
    1420:	8f 93       	push	r24
    1422:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	08 95       	ret

0000142c <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
    142c:	89 e5       	ldi	r24, 0x59	; 89
    142e:	74 dd       	rcall	.-1304   	; 0xf18 <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
    1430:	87 34       	cpi	r24, 0x47	; 71
    1432:	91 05       	cpc	r25, r1
    1434:	14 f1       	brlt	.+68     	; 0x147a <navigate_menu+0x4e>
    1436:	20 91 df 02 	lds	r18, 0x02DF
    143a:	24 31       	cpi	r18, 0x14	; 20
    143c:	f4 f0       	brlt	.+60     	; 0x147a <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    143e:	e0 91 f0 02 	lds	r30, 0x02F0
    1442:	f0 91 f1 02 	lds	r31, 0x02F1
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	18 16       	cp	r1, r24
    144e:	19 06       	cpc	r1, r25
    1450:	8c f4       	brge	.+34     	; 0x1474 <navigate_menu+0x48>
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    1456:	04 80       	ldd	r0, Z+4	; 0x04
    1458:	f5 81       	ldd	r31, Z+5	; 0x05
    145a:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    145c:	01 96       	adiw	r24, 0x01	; 1
    145e:	22 81       	ldd	r18, Z+2	; 0x02
    1460:	33 81       	ldd	r19, Z+3	; 0x03
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	31 09       	sbc	r19, r1
    1466:	82 17       	cp	r24, r18
    1468:	93 07       	cpc	r25, r19
    146a:	ac f3       	brlt	.-22     	; 0x1456 <navigate_menu+0x2a>
    146c:	f0 93 f1 02 	sts	0x02F1, r31
    1470:	e0 93 f0 02 	sts	0x02F0, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
    1474:	10 92 df 02 	sts	0x02DF, r1
    1478:	1d c0       	rjmp	.+58     	; 0x14b4 <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
    147a:	8a 3b       	cpi	r24, 0xBA	; 186
    147c:	2f ef       	ldi	r18, 0xFF	; 255
    147e:	92 07       	cpc	r25, r18
    1480:	8c f4       	brge	.+34     	; 0x14a4 <navigate_menu+0x78>
    1482:	20 91 df 02 	lds	r18, 0x02DF
    1486:	24 31       	cpi	r18, 0x14	; 20
    1488:	6c f0       	brlt	.+26     	; 0x14a4 <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
    148a:	e0 91 f0 02 	lds	r30, 0x02F0
    148e:	f0 91 f1 02 	lds	r31, 0x02F1
    1492:	84 81       	ldd	r24, Z+4	; 0x04
    1494:	95 81       	ldd	r25, Z+5	; 0x05
    1496:	90 93 f1 02 	sts	0x02F1, r25
    149a:	80 93 f0 02 	sts	0x02F0, r24
		navigation_counter = 0;
    149e:	10 92 df 02 	sts	0x02DF, r1
    14a2:	08 c0       	rjmp	.+16     	; 0x14b4 <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    14a4:	8b 5b       	subi	r24, 0xBB	; 187
    14a6:	9f 4f       	sbci	r25, 0xFF	; 255
    14a8:	8b 38       	cpi	r24, 0x8B	; 139
    14aa:	91 05       	cpc	r25, r1
    14ac:	18 f4       	brcc	.+6      	; 0x14b4 <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
    14ae:	83 e1       	ldi	r24, 0x13	; 19
    14b0:	80 93 df 02 	sts	0x02DF, r24
	}
	if (check_flag_right())
    14b4:	50 d9       	rcall	.-3424   	; 0x756 <check_flag_right>
    14b6:	88 23       	and	r24, r24
    14b8:	99 f0       	breq	.+38     	; 0x14e0 <navigate_menu+0xb4>
	{
		if(current_selected->ptr_child != NULL){
    14ba:	e0 91 f0 02 	lds	r30, 0x02F0
    14be:	f0 91 f1 02 	lds	r31, 0x02F1
    14c2:	86 81       	ldd	r24, Z+6	; 0x06
    14c4:	97 81       	ldd	r25, Z+7	; 0x07
    14c6:	00 97       	sbiw	r24, 0x00	; 0
    14c8:	49 f0       	breq	.+18     	; 0x14dc <navigate_menu+0xb0>
			current_head = current_selected->ptr_child;
    14ca:	90 93 ef 02 	sts	0x02EF, r25
    14ce:	80 93 ee 02 	sts	0x02EE, r24
			current_selected = current_selected->ptr_child;
    14d2:	90 93 f1 02 	sts	0x02F1, r25
    14d6:	80 93 f0 02 	sts	0x02F0, r24
    14da:	1b c0       	rjmp	.+54     	; 0x1512 <navigate_menu+0xe6>
		}else{
			menu_function_selected();
    14dc:	8a df       	rcall	.-236    	; 0x13f2 <menu_function_selected>
    14de:	19 c0       	rjmp	.+50     	; 0x1512 <navigate_menu+0xe6>
		}
	}else if (check_flag_left()){
    14e0:	31 d9       	rcall	.-3486   	; 0x744 <check_flag_left>
    14e2:	88 23       	and	r24, r24
    14e4:	b1 f0       	breq	.+44     	; 0x1512 <navigate_menu+0xe6>
		if (current_selected->ptr_parent != NULL){
    14e6:	e0 91 f0 02 	lds	r30, 0x02F0
    14ea:	f0 91 f1 02 	lds	r31, 0x02F1
    14ee:	80 85       	ldd	r24, Z+8	; 0x08
    14f0:	91 85       	ldd	r25, Z+9	; 0x09
    14f2:	00 97       	sbiw	r24, 0x00	; 0
    14f4:	71 f0       	breq	.+28     	; 0x1512 <navigate_menu+0xe6>
			current_head = current_head->ptr_parent;
    14f6:	e0 91 ee 02 	lds	r30, 0x02EE
    14fa:	f0 91 ef 02 	lds	r31, 0x02EF
    14fe:	20 85       	ldd	r18, Z+8	; 0x08
    1500:	31 85       	ldd	r19, Z+9	; 0x09
    1502:	30 93 ef 02 	sts	0x02EF, r19
    1506:	20 93 ee 02 	sts	0x02EE, r18
			current_selected = current_selected->ptr_parent;
    150a:	90 93 f1 02 	sts	0x02F1, r25
    150e:	80 93 f0 02 	sts	0x02F0, r24
		}
	}
	return 0;
	
}
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	08 95       	ret

00001518 <menu_update>:
	current_selected = &mainmenu_start;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
    1518:	0f 93       	push	r16
    151a:	1f 93       	push	r17
    151c:	cf 93       	push	r28
    151e:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    1520:	85 df       	rcall	.-246    	; 0x142c <navigate_menu>
    1522:	89 2b       	or	r24, r25
    1524:	09 f0       	breq	.+2      	; 0x1528 <menu_update+0x10>
    1526:	44 c0       	rjmp	.+136    	; 0x15b0 <menu_update+0x98>
    1528:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    152a:	8c 2f       	mov	r24, r28
    152c:	19 d4       	rcall	.+2098   	; 0x1d60 <sram_clear_line>
    152e:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    1530:	c7 30       	cpi	r28, 0x07	; 7
    1532:	d9 f7       	brne	.-10     	; 0x152a <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    1534:	e0 91 ee 02 	lds	r30, 0x02EE
    1538:	f0 91 ef 02 	lds	r31, 0x02EF
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	93 81       	ldd	r25, Z+3	; 0x03
    1540:	18 16       	cp	r1, r24
    1542:	19 06       	cpc	r1, r25
    1544:	ac f5       	brge	.+106    	; 0x15b0 <menu_update+0x98>
    1546:	c0 e0       	ldi	r28, 0x00	; 0
    1548:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    154a:	10 e8       	ldi	r17, 0x80	; 128
    154c:	01 e8       	ldi	r16, 0x81	; 129
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    154e:	8c 2f       	mov	r24, r28
    1550:	35 d1       	rcall	.+618    	; 0x17bc <oled_goto_line>
			oled_goto_column(0);
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	4e d1       	rcall	.+668    	; 0x17f2 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    1556:	e0 91 ee 02 	lds	r30, 0x02EE
    155a:	f0 91 ef 02 	lds	r31, 0x02EF
    155e:	60 81       	ld	r22, Z
    1560:	71 81       	ldd	r23, Z+1	; 0x01
    1562:	80 e1       	ldi	r24, 0x10	; 16
    1564:	93 e0       	ldi	r25, 0x03	; 3
    1566:	0e 94 c4 13 	call	0x2788	; 0x2788 <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    156a:	20 91 ee 02 	lds	r18, 0x02EE
    156e:	30 91 ef 02 	lds	r19, 0x02EF
    1572:	80 91 f0 02 	lds	r24, 0x02F0
    1576:	90 91 f1 02 	lds	r25, 0x02F1
    157a:	28 17       	cp	r18, r24
    157c:	39 07       	cpc	r19, r25
    157e:	11 f4       	brne	.+4      	; 0x1584 <menu_update+0x6c>
    1580:	80 2f       	mov	r24, r16
    1582:	01 c0       	rjmp	.+2      	; 0x1586 <menu_update+0x6e>
    1584:	81 2f       	mov	r24, r17
    1586:	dd d1       	rcall	.+954    	; 0x1942 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    1588:	80 e1       	ldi	r24, 0x10	; 16
    158a:	93 e0       	ldi	r25, 0x03	; 3
    158c:	23 d2       	rcall	.+1094   	; 0x19d4 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    158e:	e0 91 ee 02 	lds	r30, 0x02EE
    1592:	f0 91 ef 02 	lds	r31, 0x02EF
    1596:	04 80       	ldd	r0, Z+4	; 0x04
    1598:	f5 81       	ldd	r31, Z+5	; 0x05
    159a:	e0 2d       	mov	r30, r0
    159c:	f0 93 ef 02 	sts	0x02EF, r31
    15a0:	e0 93 ee 02 	sts	0x02EE, r30
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    15a4:	21 96       	adiw	r28, 0x01	; 1
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	c8 17       	cp	r28, r24
    15ac:	d9 07       	cpc	r29, r25
    15ae:	7c f2       	brlt	.-98     	; 0x154e <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    15b0:	a2 d5       	rcall	.+2884   	; 0x20f6 <timer_check_flag>
    15b2:	88 23       	and	r24, r24
    15b4:	51 f0       	breq	.+20     	; 0x15ca <menu_update+0xb2>
		navigation_counter++;
    15b6:	80 91 df 02 	lds	r24, 0x02DF
    15ba:	8f 5f       	subi	r24, 0xFF	; 255
    15bc:	80 93 df 02 	sts	0x02DF, r24
		sram_update_oled();
    15c0:	a5 d3       	rcall	.+1866   	; 0x1d0c <sram_update_oled>
		timer_disable_flag();
    15c2:	a2 d5       	rcall	.+2884   	; 0x2108 <timer_disable_flag>
		sram_scroll_line(7,1);
    15c4:	61 e0       	ldi	r22, 0x01	; 1
    15c6:	87 e0       	ldi	r24, 0x07	; 7
    15c8:	57 d4       	rcall	.+2222   	; 0x1e78 <sram_scroll_line>
	}
}
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	08 95       	ret

000015d4 <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
    15d4:	6d e3       	ldi	r22, 0x3D	; 61
    15d6:	89 e0       	ldi	r24, 0x09	; 9
    15d8:	59 d5       	rcall	.+2738   	; 0x208c <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
    15da:	61 e0       	ldi	r22, 0x01	; 1
    15dc:	89 e0       	ldi	r24, 0x09	; 9
    15de:	63 d3       	rcall	.+1734   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+15,y-60);
    15e0:	61 e0       	ldi	r22, 0x01	; 1
    15e2:	87 e2       	ldi	r24, 0x27	; 39
    15e4:	60 d3       	rcall	.+1728   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+15,y-48);
    15e6:	6d e0       	ldi	r22, 0x0D	; 13
    15e8:	87 e2       	ldi	r24, 0x27	; 39
    15ea:	5d d3       	rcall	.+1722   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-6,y-48);
    15ec:	6d e0       	ldi	r22, 0x0D	; 13
    15ee:	82 e1       	ldi	r24, 0x12	; 18
    15f0:	5a d3       	rcall	.+1716   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-6,y-12);
    15f2:	61 e3       	ldi	r22, 0x31	; 49
    15f4:	82 e1       	ldi	r24, 0x12	; 18
    15f6:	57 d3       	rcall	.+1710   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+6,y-12);
    15f8:	61 e3       	ldi	r22, 0x31	; 49
    15fa:	8e e1       	ldi	r24, 0x1E	; 30
    15fc:	54 d3       	rcall	.+1704   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+6,y-36);
    15fe:	69 e1       	ldi	r22, 0x19	; 25
    1600:	8e e1       	ldi	r24, 0x1E	; 30
    1602:	51 d3       	rcall	.+1698   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+15,y-36);
    1604:	69 e1       	ldi	r22, 0x19	; 25
    1606:	87 e2       	ldi	r24, 0x27	; 39
    1608:	4e d3       	rcall	.+1692   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+15,y);
    160a:	6d e3       	ldi	r22, 0x3D	; 61
    160c:	87 e2       	ldi	r24, 0x27	; 39
    160e:	4b d3       	rcall	.+1686   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
    1610:	6d e3       	ldi	r22, 0x3D	; 61
    1612:	89 e0       	ldi	r24, 0x09	; 9
    1614:	48 d3       	rcall	.+1680   	; 0x1ca6 <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    1616:	21 e0       	ldi	r18, 0x01	; 1
    1618:	45 e4       	ldi	r20, 0x45	; 69
    161a:	6d e3       	ldi	r22, 0x3D	; 61
    161c:	8b e3       	ldi	r24, 0x3B	; 59
    161e:	3b d5       	rcall	.+2678   	; 0x2096 <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
    1620:	61 e0       	ldi	r22, 0x01	; 1
    1622:	87 e7       	ldi	r24, 0x77	; 119
    1624:	33 d5       	rcall	.+2662   	; 0x208c <sram_set_point>
	sram_draw_line(x-15,y-60);
    1626:	61 e0       	ldi	r22, 0x01	; 1
    1628:	89 e5       	ldi	r24, 0x59	; 89
    162a:	3d d3       	rcall	.+1658   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-12,y-48);
    162c:	6d e0       	ldi	r22, 0x0D	; 13
    162e:	8c e5       	ldi	r24, 0x5C	; 92
    1630:	3a d3       	rcall	.+1652   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+6,y-48);
    1632:	6d e0       	ldi	r22, 0x0D	; 13
    1634:	8e e6       	ldi	r24, 0x6E	; 110
    1636:	37 d3       	rcall	.+1646   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+3,y-36);
    1638:	69 e1       	ldi	r22, 0x19	; 25
    163a:	8b e6       	ldi	r24, 0x6B	; 107
    163c:	34 d3       	rcall	.+1640   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-9,y-36);
    163e:	69 e1       	ldi	r22, 0x19	; 25
    1640:	8f e5       	ldi	r24, 0x5F	; 95
    1642:	31 d3       	rcall	.+1634   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-6,y-24);
    1644:	65 e2       	ldi	r22, 0x25	; 37
    1646:	82 e6       	ldi	r24, 0x62	; 98
    1648:	2e d3       	rcall	.+1628   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x,y-24);
    164a:	65 e2       	ldi	r22, 0x25	; 37
    164c:	88 e6       	ldi	r24, 0x68	; 104
    164e:	2b d3       	rcall	.+1622   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x-3,y-12);
    1650:	61 e3       	ldi	r22, 0x31	; 49
    1652:	85 e6       	ldi	r24, 0x65	; 101
    1654:	28 d3       	rcall	.+1616   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x,y);
    1656:	6d e3       	ldi	r22, 0x3D	; 61
    1658:	88 e6       	ldi	r24, 0x68	; 104
    165a:	25 d3       	rcall	.+1610   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
    165c:	61 e0       	ldi	r22, 0x01	; 1
    165e:	87 e7       	ldi	r24, 0x77	; 119
    1660:	22 d3       	rcall	.+1604   	; 0x1ca6 <sram_draw_line>
	
	sram_update_oled();
    1662:	54 c3       	rjmp	.+1704   	; 0x1d0c <sram_update_oled>
    1664:	08 95       	ret

00001666 <init_all>:
    }
    
}

void init_all(void){
	cli();
    1666:	f8 94       	cli
	init_UART();
    1668:	22 d8       	rcall	.-4028   	; 0x6ae <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
    166a:	85 b7       	in	r24, 0x35	; 53
    166c:	80 68       	ori	r24, 0x80	; 128
    166e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
    1670:	80 b7       	in	r24, 0x30	; 48
    1672:	80 62       	ori	r24, 0x20	; 32
    1674:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    1676:	da d0       	rcall	.+436    	; 0x182c <oled_ini>
	sram_init();
    1678:	52 d3       	rcall	.+1700   	; 0x1d1e <sram_init>
	bootscreen();
    167a:	ac df       	rcall	.-168    	; 0x15d4 <bootscreen>
	initialize_menu();
    167c:	0b dd       	rcall	.-1514   	; 0x1094 <initialize_menu>
	
	initialize_control_input();
    167e:	f0 dc       	rcall	.-1568   	; 0x1060 <initialize_control_input>
	
	initalize_interrupts();
    1680:	48 d8       	rcall	.-3952   	; 0x712 <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    1682:	8c e3       	ldi	r24, 0x3C	; 60
    1684:	24 d5       	rcall	.+2632   	; 0x20ce <initialize_timer>
	
	CAN_initialize();
    1686:	0e 94 60 02 	call	0x4c0	; 0x4c0 <CAN_initialize>
	
	sei();//enable interrupts
    168a:	78 94       	sei
    168c:	08 95       	ret

0000168e <main>:
#include "scoreboard.h"


#include "../../common_library/uart.h" //remove
int main(void)
{
    168e:	cf 93       	push	r28
    1690:	df 93       	push	r29
    1692:	cd b7       	in	r28, 0x3d	; 61
    1694:	de b7       	in	r29, 0x3e	; 62
    1696:	28 97       	sbiw	r28, 0x08	; 8
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
	//scoreboard_init();
	init_all();
    16a2:	e1 df       	rcall	.-62     	; 0x1666 <init_all>
	
	//sram_init();
	//main_2048();
	
	
	uint8_t temp[8] = {1,2,3,4,5,6,7,8};
    16a4:	88 e0       	ldi	r24, 0x08	; 8
    16a6:	ee e4       	ldi	r30, 0x4E	; 78
    16a8:	f1 e0       	ldi	r31, 0x01	; 1
    16aa:	de 01       	movw	r26, r28
    16ac:	11 96       	adiw	r26, 0x01	; 1
    16ae:	01 90       	ld	r0, Z+
    16b0:	0d 92       	st	X+, r0
    16b2:	8a 95       	dec	r24
    16b4:	e1 f7       	brne	.-8      	; 0x16ae <main+0x20>
			
			controller = read_control_input('X');
			
			if(controller != (int8_t)data[0]){
				data[0] = controller;
				printf("Sending Can: \t%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\n", (int8_t)data[0], (int8_t)data[1], (int8_t)data[2], (int8_t)data[3], (int8_t)data[4], (int8_t)data[5], (int8_t)data[6], (int8_t)data[7]);
    16b6:	03 e9       	ldi	r16, 0x93	; 147
    16b8:	12 e0       	ldi	r17, 0x02	; 2
    uint8_t sendCAN = 1;
	int8_t controller = 0;
    while(1){
	    if(sendCAN){
			
			controller = read_control_input('X');
    16ba:	88 e5       	ldi	r24, 0x58	; 88
    16bc:	2d dc       	rcall	.-1958   	; 0xf18 <read_control_input>
			
			if(controller != (int8_t)data[0]){
    16be:	99 81       	ldd	r25, Y+1	; 0x01
    16c0:	98 17       	cp	r25, r24
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <main+0x38>
    16c4:	46 c0       	rjmp	.+140    	; 0x1752 <main+0xc4>
				data[0] = controller;
    16c6:	89 83       	std	Y+1, r24	; 0x01
				printf("Sending Can: \t%i\t%i\t%i\t%i\t%i\t%i\t%i\t%i\n", (int8_t)data[0], (int8_t)data[1], (int8_t)data[2], (int8_t)data[3], (int8_t)data[4], (int8_t)data[5], (int8_t)data[6], (int8_t)data[7]);
    16c8:	98 85       	ldd	r25, Y+8	; 0x08
    16ca:	29 2f       	mov	r18, r25
    16cc:	33 27       	eor	r19, r19
    16ce:	27 fd       	sbrc	r18, 7
    16d0:	30 95       	com	r19
    16d2:	3f 93       	push	r19
    16d4:	9f 93       	push	r25
    16d6:	9f 81       	ldd	r25, Y+7	; 0x07
    16d8:	29 2f       	mov	r18, r25
    16da:	33 27       	eor	r19, r19
    16dc:	27 fd       	sbrc	r18, 7
    16de:	30 95       	com	r19
    16e0:	3f 93       	push	r19
    16e2:	9f 93       	push	r25
    16e4:	9e 81       	ldd	r25, Y+6	; 0x06
    16e6:	29 2f       	mov	r18, r25
    16e8:	33 27       	eor	r19, r19
    16ea:	27 fd       	sbrc	r18, 7
    16ec:	30 95       	com	r19
    16ee:	3f 93       	push	r19
    16f0:	9f 93       	push	r25
    16f2:	9d 81       	ldd	r25, Y+5	; 0x05
    16f4:	29 2f       	mov	r18, r25
    16f6:	33 27       	eor	r19, r19
    16f8:	27 fd       	sbrc	r18, 7
    16fa:	30 95       	com	r19
    16fc:	3f 93       	push	r19
    16fe:	9f 93       	push	r25
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	29 2f       	mov	r18, r25
    1704:	33 27       	eor	r19, r19
    1706:	27 fd       	sbrc	r18, 7
    1708:	30 95       	com	r19
    170a:	3f 93       	push	r19
    170c:	9f 93       	push	r25
    170e:	9b 81       	ldd	r25, Y+3	; 0x03
    1710:	29 2f       	mov	r18, r25
    1712:	33 27       	eor	r19, r19
    1714:	27 fd       	sbrc	r18, 7
    1716:	30 95       	com	r19
    1718:	3f 93       	push	r19
    171a:	9f 93       	push	r25
    171c:	9a 81       	ldd	r25, Y+2	; 0x02
    171e:	29 2f       	mov	r18, r25
    1720:	33 27       	eor	r19, r19
    1722:	27 fd       	sbrc	r18, 7
    1724:	30 95       	com	r19
    1726:	3f 93       	push	r19
    1728:	9f 93       	push	r25
    172a:	28 2f       	mov	r18, r24
    172c:	33 27       	eor	r19, r19
    172e:	27 fd       	sbrc	r18, 7
    1730:	30 95       	com	r19
    1732:	3f 93       	push	r19
    1734:	8f 93       	push	r24
    1736:	1f 93       	push	r17
    1738:	0f 93       	push	r16
    173a:	0e 94 15 14 	call	0x282a	; 0x282a <printf>
				CAN_message_send(data,0);
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	ce 01       	movw	r24, r28
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	0e 94 db 02 	call	0x5b6	; 0x5b6 <CAN_message_send>
    1748:	0f b6       	in	r0, 0x3f	; 63
    174a:	f8 94       	cli
    174c:	de bf       	out	0x3e, r29	; 62
    174e:	0f be       	out	0x3f, r0	; 63
    1750:	cd bf       	out	0x3d, r28	; 61
			//if (CAN_data_receive())
			//{
			//	
			//}		    
	    }
		menu_update();
    1752:	e2 de       	rcall	.-572    	; 0x1518 <menu_update>
    }
    1754:	b2 cf       	rjmp	.-156    	; 0x16ba <main+0x2c>

00001756 <write_c>:
void oled_goto_column(uint8_t column){
	col = column%128;
}
void oled_pos(uint8_t row,uint8_t column){
	oled_goto_column(column);
	oled_goto_line(row);
    1756:	e0 91 4a 01 	lds	r30, 0x014A
    175a:	f0 91 4b 01 	lds	r31, 0x014B
    175e:	80 83       	st	Z, r24
    1760:	08 95       	ret

00001762 <write_d>:
    1762:	e0 91 48 01 	lds	r30, 0x0148
    1766:	f0 91 49 01 	lds	r31, 0x0149
    176a:	80 83       	st	Z, r24
    176c:	08 95       	ret

0000176e <oled_home>:
    176e:	10 92 71 03 	sts	0x0371, r1
    1772:	10 92 70 03 	sts	0x0370, r1
    1776:	e0 91 4a 01 	lds	r30, 0x014A
    177a:	f0 91 4b 01 	lds	r31, 0x014B
    177e:	81 e2       	ldi	r24, 0x21	; 33
    1780:	80 83       	st	Z, r24
    1782:	e0 91 4a 01 	lds	r30, 0x014A
    1786:	f0 91 4b 01 	lds	r31, 0x014B
    178a:	10 82       	st	Z, r1
    178c:	e0 91 4a 01 	lds	r30, 0x014A
    1790:	f0 91 4b 01 	lds	r31, 0x014B
    1794:	8f e7       	ldi	r24, 0x7F	; 127
    1796:	80 83       	st	Z, r24
    1798:	e0 91 4a 01 	lds	r30, 0x014A
    179c:	f0 91 4b 01 	lds	r31, 0x014B
    17a0:	82 e2       	ldi	r24, 0x22	; 34
    17a2:	80 83       	st	Z, r24
    17a4:	e0 91 4a 01 	lds	r30, 0x014A
    17a8:	f0 91 4b 01 	lds	r31, 0x014B
    17ac:	10 82       	st	Z, r1
    17ae:	e0 91 4a 01 	lds	r30, 0x014A
    17b2:	f0 91 4b 01 	lds	r31, 0x014B
    17b6:	87 e0       	ldi	r24, 0x07	; 7
    17b8:	80 83       	st	Z, r24
    17ba:	08 95       	ret

000017bc <oled_goto_line>:
    17bc:	cf 93       	push	r28
    17be:	c8 2f       	mov	r28, r24
    17c0:	d6 df       	rcall	.-84     	; 0x176e <oled_home>
    17c2:	c0 93 71 03 	sts	0x0371, r28
    17c6:	8c 2f       	mov	r24, r28
    17c8:	87 70       	andi	r24, 0x07	; 7
    17ca:	89 f0       	breq	.+34     	; 0x17ee <oled_goto_line+0x32>
    17cc:	e0 91 4a 01 	lds	r30, 0x014A
    17d0:	f0 91 4b 01 	lds	r31, 0x014B
    17d4:	10 82       	st	Z, r1
    17d6:	e0 91 4a 01 	lds	r30, 0x014A
    17da:	f0 91 4b 01 	lds	r31, 0x014B
    17de:	80 e1       	ldi	r24, 0x10	; 16
    17e0:	80 83       	st	Z, r24
    17e2:	c0 6b       	ori	r28, 0xB0	; 176
    17e4:	e0 91 4a 01 	lds	r30, 0x014A
    17e8:	f0 91 4b 01 	lds	r31, 0x014B
    17ec:	c0 83       	st	Z, r28
    17ee:	cf 91       	pop	r28
    17f0:	08 95       	ret

000017f2 <oled_goto_column>:
    17f2:	8f 77       	andi	r24, 0x7F	; 127
    17f4:	80 93 70 03 	sts	0x0370, r24
    17f8:	08 95       	ret

000017fa <oled_clear_line>:
}

void oled_clear_line(uint8_t line){
    17fa:	cf 93       	push	r28
    17fc:	c8 2f       	mov	r28, r24
	oled_goto_line(line);
    17fe:	de df       	rcall	.-68     	; 0x17bc <oled_goto_line>
	if(line < 8){
    1800:	c8 30       	cpi	r28, 0x08	; 8
    1802:	48 f4       	brcc	.+18     	; 0x1816 <oled_clear_line+0x1c>
    1804:	80 e0       	ldi	r24, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    1806:	e0 91 48 01 	lds	r30, 0x0148
    180a:	f0 91 49 01 	lds	r31, 0x0149
    180e:	10 82       	st	Z, r1
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	if(line < 8){
		for(uint8_t i = 0; i < 128; i++){
    1810:	8f 5f       	subi	r24, 0xFF	; 255
    1812:	80 38       	cpi	r24, 0x80	; 128
    1814:	c1 f7       	brne	.-16     	; 0x1806 <oled_clear_line+0xc>
			write_d(0b00000000);
		}
	}
    1816:	cf 91       	pop	r28
    1818:	08 95       	ret

0000181a <oled_reset>:
	oled_home();
}


void oled_reset(void)
{		
    181a:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8;i++){
    181c:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(i);
    181e:	8c 2f       	mov	r24, r28
    1820:	ec df       	rcall	.-40     	; 0x17fa <oled_clear_line>
}


void oled_reset(void)
{		
	for(uint8_t i = 0; i < 8;i++){
    1822:	cf 5f       	subi	r28, 0xFF	; 255
    1824:	c8 30       	cpi	r28, 0x08	; 8
    1826:	d9 f7       	brne	.-10     	; 0x181e <oled_reset+0x4>
		oled_clear_line(i);
	}
}
    1828:	cf 91       	pop	r28
    182a:	08 95       	ret

0000182c <oled_ini>:
	
}
void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    182c:	85 b7       	in	r24, 0x35	; 53
    182e:	80 68       	ori	r24, 0x80	; 128
    1830:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1832:	80 b7       	in	r24, 0x30	; 48
    1834:	80 62       	ori	r24, 0x20	; 32
    1836:	80 bf       	out	0x30, r24	; 48

uint8_t page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1838:	e0 91 4a 01 	lds	r30, 0x014A
    183c:	f0 91 4b 01 	lds	r31, 0x014B
    1840:	8e ea       	ldi	r24, 0xAE	; 174
    1842:	80 83       	st	Z, r24
    1844:	e0 91 4a 01 	lds	r30, 0x014A
    1848:	f0 91 4b 01 	lds	r31, 0x014B
    184c:	81 ea       	ldi	r24, 0xA1	; 161
    184e:	80 83       	st	Z, r24
    1850:	e0 91 4a 01 	lds	r30, 0x014A
    1854:	f0 91 4b 01 	lds	r31, 0x014B
    1858:	8a ed       	ldi	r24, 0xDA	; 218
    185a:	80 83       	st	Z, r24
    185c:	e0 91 4a 01 	lds	r30, 0x014A
    1860:	f0 91 4b 01 	lds	r31, 0x014B
    1864:	82 e1       	ldi	r24, 0x12	; 18
    1866:	80 83       	st	Z, r24
    1868:	e0 91 4a 01 	lds	r30, 0x014A
    186c:	f0 91 4b 01 	lds	r31, 0x014B
    1870:	88 ec       	ldi	r24, 0xC8	; 200
    1872:	80 83       	st	Z, r24
    1874:	e0 91 4a 01 	lds	r30, 0x014A
    1878:	f0 91 4b 01 	lds	r31, 0x014B
    187c:	88 ea       	ldi	r24, 0xA8	; 168
    187e:	80 83       	st	Z, r24
    1880:	e0 91 4a 01 	lds	r30, 0x014A
    1884:	f0 91 4b 01 	lds	r31, 0x014B
    1888:	8f e3       	ldi	r24, 0x3F	; 63
    188a:	80 83       	st	Z, r24
    188c:	e0 91 4a 01 	lds	r30, 0x014A
    1890:	f0 91 4b 01 	lds	r31, 0x014B
    1894:	85 ed       	ldi	r24, 0xD5	; 213
    1896:	80 83       	st	Z, r24
    1898:	e0 91 4a 01 	lds	r30, 0x014A
    189c:	f0 91 4b 01 	lds	r31, 0x014B
    18a0:	80 e8       	ldi	r24, 0x80	; 128
    18a2:	80 83       	st	Z, r24
    18a4:	e0 91 4a 01 	lds	r30, 0x014A
    18a8:	f0 91 4b 01 	lds	r31, 0x014B
    18ac:	81 e8       	ldi	r24, 0x81	; 129
    18ae:	80 83       	st	Z, r24
    18b0:	e0 91 4a 01 	lds	r30, 0x014A
    18b4:	f0 91 4b 01 	lds	r31, 0x014B
    18b8:	80 e5       	ldi	r24, 0x50	; 80
    18ba:	80 83       	st	Z, r24
    18bc:	e0 91 4a 01 	lds	r30, 0x014A
    18c0:	f0 91 4b 01 	lds	r31, 0x014B
    18c4:	89 ed       	ldi	r24, 0xD9	; 217
    18c6:	80 83       	st	Z, r24
    18c8:	e0 91 4a 01 	lds	r30, 0x014A
    18cc:	f0 91 4b 01 	lds	r31, 0x014B
    18d0:	81 e2       	ldi	r24, 0x21	; 33
    18d2:	80 83       	st	Z, r24
    18d4:	e0 91 4a 01 	lds	r30, 0x014A
    18d8:	f0 91 4b 01 	lds	r31, 0x014B
    18dc:	80 e2       	ldi	r24, 0x20	; 32
    18de:	80 83       	st	Z, r24
    18e0:	e0 91 4a 01 	lds	r30, 0x014A
    18e4:	f0 91 4b 01 	lds	r31, 0x014B
    18e8:	10 82       	st	Z, r1
    18ea:	e0 91 4a 01 	lds	r30, 0x014A
    18ee:	f0 91 4b 01 	lds	r31, 0x014B
    18f2:	8b ed       	ldi	r24, 0xDB	; 219
    18f4:	80 83       	st	Z, r24
    18f6:	e0 91 4a 01 	lds	r30, 0x014A
    18fa:	f0 91 4b 01 	lds	r31, 0x014B
    18fe:	80 e3       	ldi	r24, 0x30	; 48
    1900:	80 83       	st	Z, r24
    1902:	e0 91 4a 01 	lds	r30, 0x014A
    1906:	f0 91 4b 01 	lds	r31, 0x014B
    190a:	8d ea       	ldi	r24, 0xAD	; 173
    190c:	80 83       	st	Z, r24
    190e:	e0 91 4a 01 	lds	r30, 0x014A
    1912:	f0 91 4b 01 	lds	r31, 0x014B
    1916:	10 82       	st	Z, r1
    1918:	e0 91 4a 01 	lds	r30, 0x014A
    191c:	f0 91 4b 01 	lds	r31, 0x014B
    1920:	84 ea       	ldi	r24, 0xA4	; 164
    1922:	80 83       	st	Z, r24
    1924:	e0 91 4a 01 	lds	r30, 0x014A
    1928:	f0 91 4b 01 	lds	r31, 0x014B
    192c:	86 ea       	ldi	r24, 0xA6	; 166
    192e:	80 83       	st	Z, r24
    1930:	e0 91 4a 01 	lds	r30, 0x014A
    1934:	f0 91 4b 01 	lds	r31, 0x014B
    1938:	8f ea       	ldi	r24, 0xAF	; 175
    193a:	80 83       	st	Z, r24
	write_c(0x00);
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	oled_reset();
    193c:	6e df       	rcall	.-292    	; 0x181a <oled_reset>
	oled_home();
    193e:	17 cf       	rjmp	.-466    	; 0x176e <oled_home>
    1940:	08 95       	ret

00001942 <sram_write_char>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
    1942:	8a 30       	cpi	r24, 0x0A	; 10
    1944:	61 f4       	brne	.+24     	; 0x195e <sram_write_char+0x1c>
    1946:	80 91 71 03 	lds	r24, 0x0371
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	01 96       	adiw	r24, 0x01	; 1
    194e:	87 70       	andi	r24, 0x07	; 7
    1950:	90 78       	andi	r25, 0x80	; 128
    1952:	80 93 71 03 	sts	0x0371, r24
    1956:	10 92 70 03 	sts	0x0370, r1
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	08 95       	ret
    195e:	88 23       	and	r24, r24
    1960:	39 f1       	breq	.+78     	; 0x19b0 <sram_write_char+0x6e>
    1962:	e8 2f       	mov	r30, r24
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	ee 0f       	add	r30, r30
    196c:	ff 1f       	adc	r31, r31
    196e:	ee 0f       	add	r30, r30
    1970:	ff 1f       	adc	r31, r31
    1972:	ee 5e       	subi	r30, 0xEE	; 238
    1974:	ff 4f       	sbci	r31, 0xFF	; 255
    1976:	28 e0       	ldi	r18, 0x08	; 8
    1978:	80 91 71 03 	lds	r24, 0x0371
    197c:	a0 91 70 03 	lds	r26, 0x0370
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	90 e8       	ldi	r25, 0x80	; 128
    1984:	89 9f       	mul	r24, r25
    1986:	a0 0d       	add	r26, r0
    1988:	b1 1d       	adc	r27, r1
    198a:	11 24       	eor	r1, r1
    198c:	80 91 4c 01 	lds	r24, 0x014C
    1990:	90 91 4d 01 	lds	r25, 0x014D
    1994:	a8 0f       	add	r26, r24
    1996:	b9 1f       	adc	r27, r25
    1998:	84 91       	lpm	r24, Z
    199a:	8c 93       	st	X, r24
    199c:	80 91 70 03 	lds	r24, 0x0370
    19a0:	8f 5f       	subi	r24, 0xFF	; 255
    19a2:	80 93 70 03 	sts	0x0370, r24
    19a6:	21 50       	subi	r18, 0x01	; 1
    19a8:	31 96       	adiw	r30, 0x01	; 1
    19aa:	21 11       	cpse	r18, r1
    19ac:	e5 cf       	rjmp	.-54     	; 0x1978 <sram_write_char+0x36>
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <sram_write_char+0x72>
    19b0:	80 e0       	ldi	r24, 0x00	; 0
    19b2:	08 95       	ret
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	08 95       	ret

000019b8 <sram_goto_line>:
    19b8:	cf 93       	push	r28
    19ba:	c8 2f       	mov	r28, r24
    19bc:	ff de       	rcall	.-514    	; 0x17bc <oled_goto_line>
    19be:	c0 93 71 03 	sts	0x0371, r28
    19c2:	cf 91       	pop	r28
    19c4:	08 95       	ret

000019c6 <sram_goto_column>:
    19c6:	cf 93       	push	r28
    19c8:	c8 2f       	mov	r28, r24
    19ca:	13 df       	rcall	.-474    	; 0x17f2 <oled_goto_column>
    19cc:	c0 93 70 03 	sts	0x0370, r28
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <sram_write_string>:
    19d4:	1f 93       	push	r17
    19d6:	cf 93       	push	r28
    19d8:	df 93       	push	r29
    19da:	ec 01       	movw	r28, r24
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	11 e0       	ldi	r17, 0x01	; 1
    19e0:	18 0f       	add	r17, r24
    19e2:	fe 01       	movw	r30, r28
    19e4:	e8 0f       	add	r30, r24
    19e6:	f1 1d       	adc	r31, r1
    19e8:	80 81       	ld	r24, Z
    19ea:	ab df       	rcall	.-170    	; 0x1942 <sram_write_char>
    19ec:	88 23       	and	r24, r24
    19ee:	11 f0       	breq	.+4      	; 0x19f4 <sram_write_string+0x20>
    19f0:	81 2f       	mov	r24, r17
    19f2:	f5 cf       	rjmp	.-22     	; 0x19de <sram_write_string+0xa>
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	08 95       	ret

000019fc <sram_write_int>:
    19fc:	cf 93       	push	r28
    19fe:	18 16       	cp	r1, r24
    1a00:	19 06       	cpc	r1, r25
    1a02:	4c f4       	brge	.+18     	; 0x1a16 <sram_write_int+0x1a>
    1a04:	6a e0       	ldi	r22, 0x0A	; 10
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	cc d5       	rcall	.+2968   	; 0x25a2 <__divmodhi4>
    1a0a:	c8 2f       	mov	r28, r24
    1a0c:	cb 01       	movw	r24, r22
    1a0e:	f6 df       	rcall	.-20     	; 0x19fc <sram_write_int>
    1a10:	80 e3       	ldi	r24, 0x30	; 48
    1a12:	8c 0f       	add	r24, r28
    1a14:	96 df       	rcall	.-212    	; 0x1942 <sram_write_char>
    1a16:	cf 91       	pop	r28
    1a18:	08 95       	ret

00001a1a <sram_read>:
    1a1a:	87 70       	andi	r24, 0x07	; 7
    1a1c:	6f 77       	andi	r22, 0x7F	; 127
    1a1e:	e6 2f       	mov	r30, r22
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	90 e8       	ldi	r25, 0x80	; 128
    1a24:	89 9f       	mul	r24, r25
    1a26:	e0 0d       	add	r30, r0
    1a28:	f1 1d       	adc	r31, r1
    1a2a:	11 24       	eor	r1, r1
    1a2c:	80 91 4c 01 	lds	r24, 0x014C
    1a30:	90 91 4d 01 	lds	r25, 0x014D
    1a34:	e8 0f       	add	r30, r24
    1a36:	f9 1f       	adc	r31, r25
    1a38:	80 81       	ld	r24, Z
    1a3a:	08 95       	ret

00001a3c <sram_write_and>:
    1a3c:	87 70       	andi	r24, 0x07	; 7
    1a3e:	6f 77       	andi	r22, 0x7F	; 127
    1a40:	e6 2f       	mov	r30, r22
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	90 e8       	ldi	r25, 0x80	; 128
    1a46:	89 9f       	mul	r24, r25
    1a48:	e0 0d       	add	r30, r0
    1a4a:	f1 1d       	adc	r31, r1
    1a4c:	11 24       	eor	r1, r1
    1a4e:	80 91 4c 01 	lds	r24, 0x014C
    1a52:	90 91 4d 01 	lds	r25, 0x014D
    1a56:	e8 0f       	add	r30, r24
    1a58:	f9 1f       	adc	r31, r25
    1a5a:	80 81       	ld	r24, Z
    1a5c:	48 23       	and	r20, r24
    1a5e:	40 83       	st	Z, r20
    1a60:	08 95       	ret

00001a62 <sram_write_or>:
    1a62:	87 70       	andi	r24, 0x07	; 7
    1a64:	6f 77       	andi	r22, 0x7F	; 127
    1a66:	e6 2f       	mov	r30, r22
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	90 e8       	ldi	r25, 0x80	; 128
    1a6c:	89 9f       	mul	r24, r25
    1a6e:	e0 0d       	add	r30, r0
    1a70:	f1 1d       	adc	r31, r1
    1a72:	11 24       	eor	r1, r1
    1a74:	80 91 4c 01 	lds	r24, 0x014C
    1a78:	90 91 4d 01 	lds	r25, 0x014D
    1a7c:	e8 0f       	add	r30, r24
    1a7e:	f9 1f       	adc	r31, r25
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2b       	or	r20, r24
    1a84:	40 83       	st	Z, r20
    1a86:	08 95       	ret

00001a88 <sram_pixel>:
    1a88:	96 2f       	mov	r25, r22
    1a8a:	88 23       	and	r24, r24
    1a8c:	ac f0       	brlt	.+42     	; 0x1ab8 <sram_pixel+0x30>
    1a8e:	60 34       	cpi	r22, 0x40	; 64
    1a90:	a8 f4       	brcc	.+42     	; 0x1abc <sram_pixel+0x34>
    1a92:	46 2f       	mov	r20, r22
    1a94:	47 70       	andi	r20, 0x07	; 7
    1a96:	21 e0       	ldi	r18, 0x01	; 1
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	b9 01       	movw	r22, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <sram_pixel+0x1a>
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	4a 95       	dec	r20
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <sram_pixel+0x16>
    1aa6:	ab 01       	movw	r20, r22
    1aa8:	68 2f       	mov	r22, r24
    1aaa:	89 2f       	mov	r24, r25
    1aac:	86 95       	lsr	r24
    1aae:	86 95       	lsr	r24
    1ab0:	86 95       	lsr	r24
    1ab2:	d7 df       	rcall	.-82     	; 0x1a62 <sram_write_or>
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	08 95       	ret
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	08 95       	ret
    1abc:	80 e0       	ldi	r24, 0x00	; 0
    1abe:	08 95       	ret

00001ac0 <sram_draw_new_line>:
    1ac0:	2f 92       	push	r2
    1ac2:	3f 92       	push	r3
    1ac4:	4f 92       	push	r4
    1ac6:	5f 92       	push	r5
    1ac8:	6f 92       	push	r6
    1aca:	7f 92       	push	r7
    1acc:	8f 92       	push	r8
    1ace:	9f 92       	push	r9
    1ad0:	af 92       	push	r10
    1ad2:	bf 92       	push	r11
    1ad4:	cf 92       	push	r12
    1ad6:	df 92       	push	r13
    1ad8:	ef 92       	push	r14
    1ada:	ff 92       	push	r15
    1adc:	0f 93       	push	r16
    1ade:	1f 93       	push	r17
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	2c 97       	sbiw	r28, 0x0c	; 12
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	38 2e       	mov	r3, r24
    1af6:	26 2e       	mov	r2, r22
    1af8:	04 2f       	mov	r16, r20
    1afa:	12 2f       	mov	r17, r18
    1afc:	48 17       	cp	r20, r24
    1afe:	08 f4       	brcc	.+2      	; 0x1b02 <sram_draw_new_line+0x42>
    1b00:	90 c0       	rjmp	.+288    	; 0x1c22 <sram_draw_new_line+0x162>
    1b02:	84 17       	cp	r24, r20
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <sram_draw_new_line+0x48>
    1b06:	79 c0       	rjmp	.+242    	; 0x1bfa <sram_draw_new_line+0x13a>
    1b08:	86 2e       	mov	r8, r22
    1b0a:	91 2c       	mov	r9, r1
    1b0c:	a4 2e       	mov	r10, r20
    1b0e:	b1 2c       	mov	r11, r1
    1b10:	48 2e       	mov	r4, r24
    1b12:	51 2c       	mov	r5, r1
    1b14:	62 2f       	mov	r22, r18
    1b16:	70 e0       	ldi	r23, 0x00	; 0
    1b18:	68 19       	sub	r22, r8
    1b1a:	79 09       	sbc	r23, r9
    1b1c:	88 27       	eor	r24, r24
    1b1e:	77 fd       	sbrc	r23, 7
    1b20:	80 95       	com	r24
    1b22:	98 2f       	mov	r25, r24
    1b24:	27 d4       	rcall	.+2126   	; 0x2374 <__floatsisf>
    1b26:	6b 01       	movw	r12, r22
    1b28:	7c 01       	movw	r14, r24
    1b2a:	b5 01       	movw	r22, r10
    1b2c:	64 19       	sub	r22, r4
    1b2e:	75 09       	sbc	r23, r5
    1b30:	88 27       	eor	r24, r24
    1b32:	77 fd       	sbrc	r23, 7
    1b34:	80 95       	com	r24
    1b36:	98 2f       	mov	r25, r24
    1b38:	1d d4       	rcall	.+2106   	; 0x2374 <__floatsisf>
    1b3a:	9b 01       	movw	r18, r22
    1b3c:	ac 01       	movw	r20, r24
    1b3e:	c7 01       	movw	r24, r14
    1b40:	b6 01       	movw	r22, r12
    1b42:	7d d3       	rcall	.+1786   	; 0x223e <__divsf3>
    1b44:	6d 83       	std	Y+5, r22	; 0x05
    1b46:	7e 83       	std	Y+6, r23	; 0x06
    1b48:	8f 83       	std	Y+7, r24	; 0x07
    1b4a:	98 87       	std	Y+8, r25	; 0x08
    1b4c:	63 2d       	mov	r22, r3
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0d d4       	rcall	.+2074   	; 0x2370 <__floatunsisf>
    1b56:	6b 01       	movw	r12, r22
    1b58:	7c 01       	movw	r14, r24
    1b5a:	b5 01       	movw	r22, r10
    1b5c:	88 27       	eor	r24, r24
    1b5e:	77 fd       	sbrc	r23, 7
    1b60:	80 95       	com	r24
    1b62:	98 2f       	mov	r25, r24
    1b64:	07 d4       	rcall	.+2062   	; 0x2374 <__floatsisf>
    1b66:	69 83       	std	Y+1, r22	; 0x01
    1b68:	7a 83       	std	Y+2, r23	; 0x02
    1b6a:	8b 83       	std	Y+3, r24	; 0x03
    1b6c:	9c 83       	std	Y+4, r25	; 0x04
    1b6e:	9b 01       	movw	r18, r22
    1b70:	ac 01       	movw	r20, r24
    1b72:	c7 01       	movw	r24, r14
    1b74:	b6 01       	movw	r22, r12
    1b76:	5f d3       	rcall	.+1726   	; 0x2236 <__cmpsf2>
    1b78:	88 23       	and	r24, r24
    1b7a:	0c f0       	brlt	.+2      	; 0x1b7e <sram_draw_new_line+0xbe>
    1b7c:	3e c0       	rjmp	.+124    	; 0x1bfa <sram_draw_new_line+0x13a>
    1b7e:	66 24       	eor	r6, r6
    1b80:	57 fc       	sbrc	r5, 7
    1b82:	60 94       	com	r6
    1b84:	76 2c       	mov	r7, r6
    1b86:	c4 01       	movw	r24, r8
    1b88:	aa 27       	eor	r26, r26
    1b8a:	97 fd       	sbrc	r25, 7
    1b8c:	a0 95       	com	r26
    1b8e:	ba 2f       	mov	r27, r26
    1b90:	89 87       	std	Y+9, r24	; 0x09
    1b92:	9a 87       	std	Y+10, r25	; 0x0a
    1b94:	ab 87       	std	Y+11, r26	; 0x0b
    1b96:	bc 87       	std	Y+12, r27	; 0x0c
    1b98:	c3 01       	movw	r24, r6
    1b9a:	b2 01       	movw	r22, r4
    1b9c:	eb d3       	rcall	.+2006   	; 0x2374 <__floatsisf>
    1b9e:	9b 01       	movw	r18, r22
    1ba0:	ac 01       	movw	r20, r24
    1ba2:	c7 01       	movw	r24, r14
    1ba4:	b6 01       	movw	r22, r12
    1ba6:	e2 d2       	rcall	.+1476   	; 0x216c <__subsf3>
    1ba8:	2d 81       	ldd	r18, Y+5	; 0x05
    1baa:	3e 81       	ldd	r19, Y+6	; 0x06
    1bac:	4f 81       	ldd	r20, Y+7	; 0x07
    1bae:	58 85       	ldd	r21, Y+8	; 0x08
    1bb0:	95 d4       	rcall	.+2346   	; 0x24dc <__mulsf3>
    1bb2:	4b 01       	movw	r8, r22
    1bb4:	5c 01       	movw	r10, r24
    1bb6:	69 85       	ldd	r22, Y+9	; 0x09
    1bb8:	7a 85       	ldd	r23, Y+10	; 0x0a
    1bba:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bbc:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bbe:	da d3       	rcall	.+1972   	; 0x2374 <__floatsisf>
    1bc0:	9b 01       	movw	r18, r22
    1bc2:	ac 01       	movw	r20, r24
    1bc4:	c5 01       	movw	r24, r10
    1bc6:	b4 01       	movw	r22, r8
    1bc8:	d2 d2       	rcall	.+1444   	; 0x216e <__addsf3>
    1bca:	a6 d3       	rcall	.+1868   	; 0x2318 <__fixunssfsi>
    1bcc:	b6 2e       	mov	r11, r22
    1bce:	c7 01       	movw	r24, r14
    1bd0:	b6 01       	movw	r22, r12
    1bd2:	a2 d3       	rcall	.+1860   	; 0x2318 <__fixunssfsi>
    1bd4:	86 2f       	mov	r24, r22
    1bd6:	6b 2d       	mov	r22, r11
    1bd8:	57 df       	rcall	.-338    	; 0x1a88 <sram_pixel>
    1bda:	2d ec       	ldi	r18, 0xCD	; 205
    1bdc:	3c ec       	ldi	r19, 0xCC	; 204
    1bde:	4c ec       	ldi	r20, 0xCC	; 204
    1be0:	5d e3       	ldi	r21, 0x3D	; 61
    1be2:	c7 01       	movw	r24, r14
    1be4:	b6 01       	movw	r22, r12
    1be6:	c3 d2       	rcall	.+1414   	; 0x216e <__addsf3>
    1be8:	6b 01       	movw	r12, r22
    1bea:	7c 01       	movw	r14, r24
    1bec:	29 81       	ldd	r18, Y+1	; 0x01
    1bee:	3a 81       	ldd	r19, Y+2	; 0x02
    1bf0:	4b 81       	ldd	r20, Y+3	; 0x03
    1bf2:	5c 81       	ldd	r21, Y+4	; 0x04
    1bf4:	20 d3       	rcall	.+1600   	; 0x2236 <__cmpsf2>
    1bf6:	88 23       	and	r24, r24
    1bf8:	7c f2       	brlt	.-98     	; 0x1b98 <sram_draw_new_line+0xd8>
    1bfa:	12 15       	cp	r17, r2
    1bfc:	c8 f1       	brcs	.+114    	; 0x1c70 <sram_draw_new_line+0x1b0>
    1bfe:	30 12       	cpse	r3, r16
    1c00:	39 c0       	rjmp	.+114    	; 0x1c74 <sram_draw_new_line+0x1b4>
    1c02:	21 16       	cp	r2, r17
    1c04:	30 f0       	brcs	.+12     	; 0x1c12 <sram_draw_new_line+0x152>
    1c06:	36 c0       	rjmp	.+108    	; 0x1c74 <sram_draw_new_line+0x1b4>
    1c08:	82 2d       	mov	r24, r2
    1c0a:	21 2e       	mov	r2, r17
    1c0c:	18 2f       	mov	r17, r24
    1c0e:	02 2d       	mov	r16, r2
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <sram_draw_new_line+0x154>
    1c12:	02 2d       	mov	r16, r2
    1c14:	60 2f       	mov	r22, r16
    1c16:	83 2d       	mov	r24, r3
    1c18:	37 df       	rcall	.-402    	; 0x1a88 <sram_pixel>
    1c1a:	0f 5f       	subi	r16, 0xFF	; 255
    1c1c:	01 17       	cp	r16, r17
    1c1e:	d0 f3       	brcs	.-12     	; 0x1c14 <sram_draw_new_line+0x154>
    1c20:	29 c0       	rjmp	.+82     	; 0x1c74 <sram_draw_new_line+0x1b4>
    1c22:	82 2e       	mov	r8, r18
    1c24:	91 2c       	mov	r9, r1
    1c26:	a8 2e       	mov	r10, r24
    1c28:	b1 2c       	mov	r11, r1
    1c2a:	44 2e       	mov	r4, r20
    1c2c:	51 2c       	mov	r5, r1
    1c2e:	70 e0       	ldi	r23, 0x00	; 0
    1c30:	68 19       	sub	r22, r8
    1c32:	79 09       	sbc	r23, r9
    1c34:	88 27       	eor	r24, r24
    1c36:	77 fd       	sbrc	r23, 7
    1c38:	80 95       	com	r24
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	9b d3       	rcall	.+1846   	; 0x2374 <__floatsisf>
    1c3e:	6b 01       	movw	r12, r22
    1c40:	7c 01       	movw	r14, r24
    1c42:	b5 01       	movw	r22, r10
    1c44:	64 19       	sub	r22, r4
    1c46:	75 09       	sbc	r23, r5
    1c48:	88 27       	eor	r24, r24
    1c4a:	77 fd       	sbrc	r23, 7
    1c4c:	80 95       	com	r24
    1c4e:	98 2f       	mov	r25, r24
    1c50:	91 d3       	rcall	.+1826   	; 0x2374 <__floatsisf>
    1c52:	9b 01       	movw	r18, r22
    1c54:	ac 01       	movw	r20, r24
    1c56:	c7 01       	movw	r24, r14
    1c58:	b6 01       	movw	r22, r12
    1c5a:	f1 d2       	rcall	.+1506   	; 0x223e <__divsf3>
    1c5c:	6d 83       	std	Y+5, r22	; 0x05
    1c5e:	7e 83       	std	Y+6, r23	; 0x06
    1c60:	8f 83       	std	Y+7, r24	; 0x07
    1c62:	98 87       	std	Y+8, r25	; 0x08
    1c64:	82 2d       	mov	r24, r2
    1c66:	21 2e       	mov	r2, r17
    1c68:	18 2f       	mov	r17, r24
    1c6a:	30 2e       	mov	r3, r16
    1c6c:	0a 2d       	mov	r16, r10
    1c6e:	6e cf       	rjmp	.-292    	; 0x1b4c <sram_draw_new_line+0x8c>
    1c70:	30 16       	cp	r3, r16
    1c72:	51 f2       	breq	.-108    	; 0x1c08 <sram_draw_new_line+0x148>
    1c74:	2c 96       	adiw	r28, 0x0c	; 12
    1c76:	0f b6       	in	r0, 0x3f	; 63
    1c78:	f8 94       	cli
    1c7a:	de bf       	out	0x3e, r29	; 62
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	cd bf       	out	0x3d, r28	; 61
    1c80:	df 91       	pop	r29
    1c82:	cf 91       	pop	r28
    1c84:	1f 91       	pop	r17
    1c86:	0f 91       	pop	r16
    1c88:	ff 90       	pop	r15
    1c8a:	ef 90       	pop	r14
    1c8c:	df 90       	pop	r13
    1c8e:	cf 90       	pop	r12
    1c90:	bf 90       	pop	r11
    1c92:	af 90       	pop	r10
    1c94:	9f 90       	pop	r9
    1c96:	8f 90       	pop	r8
    1c98:	7f 90       	pop	r7
    1c9a:	6f 90       	pop	r6
    1c9c:	5f 90       	pop	r5
    1c9e:	4f 90       	pop	r4
    1ca0:	3f 90       	pop	r3
    1ca2:	2f 90       	pop	r2
    1ca4:	08 95       	ret

00001ca6 <sram_draw_line>:
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	d8 2f       	mov	r29, r24
    1cac:	c6 2f       	mov	r28, r22
    1cae:	26 2f       	mov	r18, r22
    1cb0:	48 2f       	mov	r20, r24
    1cb2:	60 91 7a 03 	lds	r22, 0x037A
    1cb6:	80 91 7b 03 	lds	r24, 0x037B
    1cba:	02 df       	rcall	.-508    	; 0x1ac0 <sram_draw_new_line>
    1cbc:	d0 93 7b 03 	sts	0x037B, r29
    1cc0:	c0 93 7a 03 	sts	0x037A, r28
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <sram_push_line>:
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	df 93       	push	r29
    1cd2:	08 2f       	mov	r16, r24
    1cd4:	71 de       	rcall	.-798    	; 0x19b8 <sram_goto_line>
    1cd6:	80 e8       	ldi	r24, 0x80	; 128
    1cd8:	08 9f       	mul	r16, r24
    1cda:	80 01       	movw	r16, r0
    1cdc:	11 24       	eor	r1, r1
    1cde:	c0 e8       	ldi	r28, 0x80	; 128
    1ce0:	d0 e0       	ldi	r29, 0x00	; 0
    1ce2:	00 58       	subi	r16, 0x80	; 128
    1ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ce6:	c8 01       	movw	r24, r16
    1ce8:	8c 1b       	sub	r24, r28
    1cea:	9d 0b       	sbc	r25, r29
    1cec:	e0 91 4c 01 	lds	r30, 0x014C
    1cf0:	f0 91 4d 01 	lds	r31, 0x014D
    1cf4:	e8 0f       	add	r30, r24
    1cf6:	f9 1f       	adc	r31, r25
    1cf8:	80 81       	ld	r24, Z
    1cfa:	33 dd       	rcall	.-1434   	; 0x1762 <write_d>
    1cfc:	21 97       	sbiw	r28, 0x01	; 1
    1cfe:	20 97       	sbiw	r28, 0x00	; 0
    1d00:	91 f7       	brne	.-28     	; 0x1ce6 <sram_push_line+0x1c>
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	0f 91       	pop	r16
    1d0a:	08 95       	ret

00001d0c <sram_update_oled>:
    1d0c:	cf 93       	push	r28
    1d0e:	c0 e0       	ldi	r28, 0x00	; 0
    1d10:	8c 2f       	mov	r24, r28
    1d12:	db df       	rcall	.-74     	; 0x1cca <sram_push_line>
    1d14:	cf 5f       	subi	r28, 0xFF	; 255
    1d16:	c8 30       	cpi	r28, 0x08	; 8
    1d18:	d9 f7       	brne	.-10     	; 0x1d10 <sram_update_oled+0x4>
    1d1a:	cf 91       	pop	r28
    1d1c:	08 95       	ret

00001d1e <sram_init>:
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	30 e0       	ldi	r19, 0x00	; 0
    1d22:	b0 e8       	ldi	r27, 0x80	; 128
    1d24:	a0 e0       	ldi	r26, 0x00	; 0
    1d26:	11 c0       	rjmp	.+34     	; 0x1d4a <sram_init+0x2c>
    1d28:	a9 01       	movw	r20, r18
    1d2a:	48 1b       	sub	r20, r24
    1d2c:	59 0b       	sbc	r21, r25
    1d2e:	e0 91 4c 01 	lds	r30, 0x014C
    1d32:	f0 91 4d 01 	lds	r31, 0x014D
    1d36:	e4 0f       	add	r30, r20
    1d38:	f5 1f       	adc	r31, r21
    1d3a:	10 82       	st	Z, r1
    1d3c:	01 97       	sbiw	r24, 0x01	; 1
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	99 f7       	brne	.-26     	; 0x1d28 <sram_init+0xa>
    1d42:	21 15       	cp	r18, r1
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	38 07       	cpc	r19, r24
    1d48:	29 f0       	breq	.+10     	; 0x1d54 <sram_init+0x36>
    1d4a:	8b 2f       	mov	r24, r27
    1d4c:	9a 2f       	mov	r25, r26
    1d4e:	20 58       	subi	r18, 0x80	; 128
    1d50:	3f 4f       	sbci	r19, 0xFF	; 255
    1d52:	ea cf       	rjmp	.-44     	; 0x1d28 <sram_init+0xa>
    1d54:	10 92 71 03 	sts	0x0371, r1
    1d58:	10 92 70 03 	sts	0x0370, r1
    1d5c:	d7 cf       	rjmp	.-82     	; 0x1d0c <sram_update_oled>
    1d5e:	08 95       	ret

00001d60 <sram_clear_line>:
    1d60:	cf 93       	push	r28
    1d62:	c8 2f       	mov	r28, r24
    1d64:	2b dd       	rcall	.-1450   	; 0x17bc <oled_goto_line>
    1d66:	c8 30       	cpi	r28, 0x08	; 8
    1d68:	b8 f4       	brcc	.+46     	; 0x1d98 <sram_clear_line+0x38>
    1d6a:	20 e8       	ldi	r18, 0x80	; 128
    1d6c:	c2 9f       	mul	r28, r18
    1d6e:	c0 01       	movw	r24, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	20 e8       	ldi	r18, 0x80	; 128
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	80 58       	subi	r24, 0x80	; 128
    1d78:	9f 4f       	sbci	r25, 0xFF	; 255
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	42 1b       	sub	r20, r18
    1d7e:	53 0b       	sbc	r21, r19
    1d80:	e0 91 4c 01 	lds	r30, 0x014C
    1d84:	f0 91 4d 01 	lds	r31, 0x014D
    1d88:	e4 0f       	add	r30, r20
    1d8a:	f5 1f       	adc	r31, r21
    1d8c:	10 82       	st	Z, r1
    1d8e:	21 50       	subi	r18, 0x01	; 1
    1d90:	31 09       	sbc	r19, r1
    1d92:	21 15       	cp	r18, r1
    1d94:	31 05       	cpc	r19, r1
    1d96:	89 f7       	brne	.-30     	; 0x1d7a <sram_clear_line+0x1a>
    1d98:	cf 91       	pop	r28
    1d9a:	08 95       	ret

00001d9c <sram_scroll_horizontally>:
    1d9c:	ef 92       	push	r14
    1d9e:	ff 92       	push	r15
    1da0:	0f 93       	push	r16
    1da2:	1f 93       	push	r17
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	22 23       	and	r18, r18
    1daa:	09 f4       	brne	.+2      	; 0x1dae <sram_scroll_horizontally+0x12>
    1dac:	50 c0       	rjmp	.+160    	; 0x1e4e <sram_scroll_horizontally+0xb2>
    1dae:	a0 91 4c 01 	lds	r26, 0x014C
    1db2:	b0 91 4d 01 	lds	r27, 0x014D
    1db6:	90 e8       	ldi	r25, 0x80	; 128
    1db8:	89 9f       	mul	r24, r25
    1dba:	a0 0d       	add	r26, r0
    1dbc:	b1 1d       	adc	r27, r1
    1dbe:	11 24       	eor	r1, r1
    1dc0:	62 e7       	ldi	r22, 0x72	; 114
    1dc2:	73 e0       	ldi	r23, 0x03	; 3
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	9d 91       	ld	r25, X+
    1dc8:	91 93       	st	Z+, r25
    1dca:	9e 2f       	mov	r25, r30
    1dcc:	96 1b       	sub	r25, r22
    1dce:	92 17       	cp	r25, r18
    1dd0:	d0 f3       	brcs	.-12     	; 0x1dc6 <sram_scroll_horizontally+0x2a>
    1dd2:	a2 2f       	mov	r26, r18
    1dd4:	b0 e0       	ldi	r27, 0x00	; 0
    1dd6:	c0 e8       	ldi	r28, 0x80	; 128
    1dd8:	d0 e0       	ldi	r29, 0x00	; 0
    1dda:	7e 01       	movw	r14, r28
    1ddc:	ea 1a       	sub	r14, r26
    1dde:	fb 0a       	sbc	r15, r27
    1de0:	1e 14       	cp	r1, r14
    1de2:	1f 04       	cpc	r1, r15
    1de4:	d4 f1       	brlt	.+116    	; 0x1e5a <sram_scroll_horizontally+0xbe>
    1de6:	18 c0       	rjmp	.+48     	; 0x1e18 <sram_scroll_horizontally+0x7c>
    1de8:	60 91 4c 01 	lds	r22, 0x014C
    1dec:	70 91 4d 01 	lds	r23, 0x014D
    1df0:	40 0f       	add	r20, r16
    1df2:	51 1f       	adc	r21, r17
    1df4:	fb 01       	movw	r30, r22
    1df6:	e4 0f       	add	r30, r20
    1df8:	f5 1f       	adc	r31, r21
    1dfa:	4a 0f       	add	r20, r26
    1dfc:	5b 1f       	adc	r21, r27
    1dfe:	64 0f       	add	r22, r20
    1e00:	75 1f       	adc	r23, r21
    1e02:	eb 01       	movw	r28, r22
    1e04:	38 81       	ld	r19, Y
    1e06:	30 83       	st	Z, r19
    1e08:	9f 5f       	subi	r25, 0xFF	; 255
    1e0a:	49 2f       	mov	r20, r25
    1e0c:	50 e0       	ldi	r21, 0x00	; 0
    1e0e:	4e 15       	cp	r20, r14
    1e10:	5f 05       	cpc	r21, r15
    1e12:	54 f3       	brlt	.-44     	; 0x1de8 <sram_scroll_horizontally+0x4c>
    1e14:	22 23       	and	r18, r18
    1e16:	49 f1       	breq	.+82     	; 0x1e6a <sram_scroll_horizontally+0xce>
    1e18:	d0 e8       	ldi	r29, 0x80	; 128
    1e1a:	8d 9f       	mul	r24, r29
    1e1c:	a0 01       	movw	r20, r0
    1e1e:	11 24       	eor	r1, r1
    1e20:	4a 1b       	sub	r20, r26
    1e22:	5b 0b       	sbc	r21, r27
    1e24:	62 e7       	ldi	r22, 0x72	; 114
    1e26:	73 e0       	ldi	r23, 0x03	; 3
    1e28:	fb 01       	movw	r30, r22
    1e2a:	43 5f       	subi	r20, 0xF3	; 243
    1e2c:	52 40       	sbci	r21, 0x02	; 2
    1e2e:	ca 01       	movw	r24, r20
    1e30:	8e 0f       	add	r24, r30
    1e32:	9f 1f       	adc	r25, r31
    1e34:	a0 91 4c 01 	lds	r26, 0x014C
    1e38:	b0 91 4d 01 	lds	r27, 0x014D
    1e3c:	a8 0f       	add	r26, r24
    1e3e:	b9 1f       	adc	r27, r25
    1e40:	81 91       	ld	r24, Z+
    1e42:	8c 93       	st	X, r24
    1e44:	8e 2f       	mov	r24, r30
    1e46:	86 1b       	sub	r24, r22
    1e48:	82 17       	cp	r24, r18
    1e4a:	88 f3       	brcs	.-30     	; 0x1e2e <sram_scroll_horizontally+0x92>
    1e4c:	0e c0       	rjmp	.+28     	; 0x1e6a <sram_scroll_horizontally+0xce>
    1e4e:	68 94       	set
    1e50:	ee 24       	eor	r14, r14
    1e52:	e7 f8       	bld	r14, 7
    1e54:	f1 2c       	mov	r15, r1
    1e56:	a0 e0       	ldi	r26, 0x00	; 0
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	90 e8       	ldi	r25, 0x80	; 128
    1e5c:	89 9f       	mul	r24, r25
    1e5e:	80 01       	movw	r16, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	40 e0       	ldi	r20, 0x00	; 0
    1e64:	50 e0       	ldi	r21, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	bf cf       	rjmp	.-130    	; 0x1de8 <sram_scroll_horizontally+0x4c>
    1e6a:	df 91       	pop	r29
    1e6c:	cf 91       	pop	r28
    1e6e:	1f 91       	pop	r17
    1e70:	0f 91       	pop	r16
    1e72:	ff 90       	pop	r15
    1e74:	ef 90       	pop	r14
    1e76:	08 95       	ret

00001e78 <sram_scroll_line>:
    1e78:	cf 93       	push	r28
    1e7a:	df 93       	push	r29
    1e7c:	d8 2f       	mov	r29, r24
    1e7e:	c6 2f       	mov	r28, r22
    1e80:	69 30       	cpi	r22, 0x09	; 9
    1e82:	18 f0       	brcs	.+6      	; 0x1e8a <sram_scroll_line+0x12>
    1e84:	c8 50       	subi	r28, 0x08	; 8
    1e86:	6c 2f       	mov	r22, r28
    1e88:	f7 df       	rcall	.-18     	; 0x1e78 <sram_scroll_line>
    1e8a:	2c 2f       	mov	r18, r28
    1e8c:	4f e7       	ldi	r20, 0x7F	; 127
    1e8e:	60 e0       	ldi	r22, 0x00	; 0
    1e90:	8d 2f       	mov	r24, r29
    1e92:	84 df       	rcall	.-248    	; 0x1d9c <sram_scroll_horizontally>
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <sram_scroll_vertically>:
    1e9a:	2f 92       	push	r2
    1e9c:	3f 92       	push	r3
    1e9e:	4f 92       	push	r4
    1ea0:	5f 92       	push	r5
    1ea2:	6f 92       	push	r6
    1ea4:	7f 92       	push	r7
    1ea6:	8f 92       	push	r8
    1ea8:	9f 92       	push	r9
    1eaa:	af 92       	push	r10
    1eac:	bf 92       	push	r11
    1eae:	cf 92       	push	r12
    1eb0:	df 92       	push	r13
    1eb2:	ef 92       	push	r14
    1eb4:	ff 92       	push	r15
    1eb6:	0f 93       	push	r16
    1eb8:	1f 93       	push	r17
    1eba:	cf 93       	push	r28
    1ebc:	df 93       	push	r29
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <sram_scroll_vertically+0x26>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <sram_scroll_vertically+0x28>
    1ec2:	1f 92       	push	r1
    1ec4:	cd b7       	in	r28, 0x3d	; 61
    1ec6:	de b7       	in	r29, 0x3e	; 62
    1ec8:	c8 2e       	mov	r12, r24
    1eca:	f6 2e       	mov	r15, r22
    1ecc:	24 2e       	mov	r2, r20
    1ece:	29 83       	std	Y+1, r18	; 0x01
    1ed0:	40 2e       	mov	r4, r16
    1ed2:	0f 2e       	mov	r0, r31
    1ed4:	f7 e0       	ldi	r31, 0x07	; 7
    1ed6:	af 2e       	mov	r10, r31
    1ed8:	f0 2d       	mov	r31, r0
    1eda:	51 2c       	mov	r5, r1
    1edc:	61 2c       	mov	r6, r1
    1ede:	71 2c       	mov	r7, r1
    1ee0:	81 2c       	mov	r8, r1
    1ee2:	10 e0       	ldi	r17, 0x00	; 0
    1ee4:	1a 82       	std	Y+2, r1	; 0x02
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	a0 e0       	ldi	r26, 0x00	; 0
    1eea:	25 2d       	mov	r18, r5
    1eec:	36 2d       	mov	r19, r6
    1eee:	47 2d       	mov	r20, r7
    1ef0:	58 2d       	mov	r21, r8
    1ef2:	61 2f       	mov	r22, r17
    1ef4:	7a 81       	ldd	r23, Y+2	; 0x02
    1ef6:	8b 2f       	mov	r24, r27
    1ef8:	9a 2f       	mov	r25, r26
    1efa:	08 e0       	ldi	r16, 0x08	; 8
    1efc:	81 d3       	rcall	.+1794   	; 0x2600 <__ashldi3>
    1efe:	52 2e       	mov	r5, r18
    1f00:	63 2e       	mov	r6, r19
    1f02:	74 2e       	mov	r7, r20
    1f04:	85 2e       	mov	r8, r21
    1f06:	16 2f       	mov	r17, r22
    1f08:	b7 2e       	mov	r11, r23
    1f0a:	d8 2e       	mov	r13, r24
    1f0c:	e9 2e       	mov	r14, r25
    1f0e:	6c 2d       	mov	r22, r12
    1f10:	8a 2d       	mov	r24, r10
    1f12:	83 dd       	rcall	.-1274   	; 0x1a1a <sram_read>
    1f14:	58 2a       	or	r5, r24
    1f16:	ba 82       	std	Y+2, r11	; 0x02
    1f18:	bd 2d       	mov	r27, r13
    1f1a:	ae 2d       	mov	r26, r14
    1f1c:	aa 94       	dec	r10
    1f1e:	8f ef       	ldi	r24, 0xFF	; 255
    1f20:	a8 12       	cpse	r10, r24
    1f22:	e3 cf       	rjmp	.-58     	; 0x1eea <sram_scroll_vertically+0x50>
    1f24:	31 2c       	mov	r3, r1
    1f26:	ef e3       	ldi	r30, 0x3F	; 63
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	e2 19       	sub	r30, r2
    1f2c:	f3 09       	sbc	r31, r3
    1f2e:	2f ef       	ldi	r18, 0xFF	; 255
    1f30:	3f ef       	ldi	r19, 0xFF	; 255
    1f32:	4f ef       	ldi	r20, 0xFF	; 255
    1f34:	5f ef       	ldi	r21, 0xFF	; 255
    1f36:	6f ef       	ldi	r22, 0xFF	; 255
    1f38:	7f ef       	ldi	r23, 0xFF	; 255
    1f3a:	9f ef       	ldi	r25, 0xFF	; 255
    1f3c:	0e 2f       	mov	r16, r30
    1f3e:	60 d3       	rcall	.+1728   	; 0x2600 <__ashldi3>
    1f40:	ef 0d       	add	r30, r15
    1f42:	f1 1d       	adc	r31, r1
    1f44:	0e 2f       	mov	r16, r30
    1f46:	77 d3       	rcall	.+1774   	; 0x2636 <__lshrdi3>
    1f48:	0f 2d       	mov	r16, r15
    1f4a:	5a d3       	rcall	.+1716   	; 0x2600 <__ashldi3>
    1f4c:	e2 2f       	mov	r30, r18
    1f4e:	93 2e       	mov	r9, r19
    1f50:	a4 2e       	mov	r10, r20
    1f52:	b5 2e       	mov	r11, r21
    1f54:	6b 83       	std	Y+3, r22	; 0x03
    1f56:	d7 2e       	mov	r13, r23
    1f58:	e8 2e       	mov	r14, r24
    1f5a:	f9 2f       	mov	r31, r25
    1f5c:	44 20       	and	r4, r4
    1f5e:	d9 f0       	breq	.+54     	; 0x1f96 <sram_scroll_vertically+0xfc>
    1f60:	89 81       	ldd	r24, Y+1	; 0x01
    1f62:	28 1a       	sub	r2, r24
    1f64:	31 08       	sbc	r3, r1
    1f66:	87 fd       	sbrc	r24, 7
    1f68:	33 94       	inc	r3
    1f6a:	25 2d       	mov	r18, r5
    1f6c:	36 2d       	mov	r19, r6
    1f6e:	47 2d       	mov	r20, r7
    1f70:	58 2d       	mov	r21, r8
    1f72:	61 2f       	mov	r22, r17
    1f74:	7a 81       	ldd	r23, Y+2	; 0x02
    1f76:	8b 2f       	mov	r24, r27
    1f78:	9a 2f       	mov	r25, r26
    1f7a:	02 2d       	mov	r16, r2
    1f7c:	5c d3       	rcall	.+1720   	; 0x2636 <__lshrdi3>
    1f7e:	81 e0       	ldi	r24, 0x01	; 1
    1f80:	90 e0       	ldi	r25, 0x00	; 0
    1f82:	09 80       	ldd	r0, Y+1	; 0x01
    1f84:	02 c0       	rjmp	.+4      	; 0x1f8a <sram_scroll_vertically+0xf0>
    1f86:	88 0f       	add	r24, r24
    1f88:	99 1f       	adc	r25, r25
    1f8a:	0a 94       	dec	r0
    1f8c:	e2 f7       	brpl	.-8      	; 0x1f86 <sram_scroll_vertically+0xec>
    1f8e:	44 24       	eor	r4, r4
    1f90:	4a 94       	dec	r4
    1f92:	48 0e       	add	r4, r24
    1f94:	42 22       	and	r4, r18
    1f96:	25 2d       	mov	r18, r5
    1f98:	2e 23       	and	r18, r30
    1f9a:	36 2d       	mov	r19, r6
    1f9c:	39 21       	and	r19, r9
    1f9e:	47 2d       	mov	r20, r7
    1fa0:	4a 21       	and	r20, r10
    1fa2:	58 2d       	mov	r21, r8
    1fa4:	5b 21       	and	r21, r11
    1fa6:	6b 81       	ldd	r22, Y+3	; 0x03
    1fa8:	61 23       	and	r22, r17
    1faa:	7a 81       	ldd	r23, Y+2	; 0x02
    1fac:	7d 21       	and	r23, r13
    1fae:	8b 2f       	mov	r24, r27
    1fb0:	8e 21       	and	r24, r14
    1fb2:	9f 2f       	mov	r25, r31
    1fb4:	9a 23       	and	r25, r26
    1fb6:	09 81       	ldd	r16, Y+1	; 0x01
    1fb8:	23 d3       	rcall	.+1606   	; 0x2600 <__ashldi3>
    1fba:	0f 2d       	mov	r16, r15
    1fbc:	3c d3       	rcall	.+1656   	; 0x2636 <__lshrdi3>
    1fbe:	24 29       	or	r18, r4
    1fc0:	1f d3       	rcall	.+1598   	; 0x2600 <__ashldi3>
    1fc2:	12 2f       	mov	r17, r18
    1fc4:	1e 23       	and	r17, r30
    1fc6:	23 2e       	mov	r2, r19
    1fc8:	29 20       	and	r2, r9
    1fca:	34 2e       	mov	r3, r20
    1fcc:	3a 20       	and	r3, r10
    1fce:	45 2e       	mov	r4, r21
    1fd0:	4b 20       	and	r4, r11
    1fd2:	5b 80       	ldd	r5, Y+3	; 0x03
    1fd4:	56 22       	and	r5, r22
    1fd6:	67 2e       	mov	r6, r23
    1fd8:	6d 20       	and	r6, r13
    1fda:	78 2e       	mov	r7, r24
    1fdc:	7e 20       	and	r7, r14
    1fde:	8f 2e       	mov	r8, r31
    1fe0:	89 22       	and	r8, r25
    1fe2:	e0 95       	com	r30
    1fe4:	ed 83       	std	Y+5, r30	; 0x05
    1fe6:	90 94       	com	r9
    1fe8:	a0 94       	com	r10
    1fea:	b0 94       	com	r11
    1fec:	eb 81       	ldd	r30, Y+3	; 0x03
    1fee:	e0 95       	com	r30
    1ff0:	e9 83       	std	Y+1, r30	; 0x01
    1ff2:	d0 94       	com	r13
    1ff4:	e0 94       	com	r14
    1ff6:	ff 2e       	mov	r15, r31
    1ff8:	f0 94       	com	r15
    1ffa:	1a 82       	std	Y+2, r1	; 0x02
    1ffc:	4d 81       	ldd	r20, Y+5	; 0x05
    1ffe:	6c 2d       	mov	r22, r12
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	1c dd       	rcall	.-1480   	; 0x1a3c <sram_write_and>
    2004:	2d 81       	ldd	r18, Y+5	; 0x05
    2006:	39 2d       	mov	r19, r9
    2008:	4a 2d       	mov	r20, r10
    200a:	5b 2d       	mov	r21, r11
    200c:	69 81       	ldd	r22, Y+1	; 0x01
    200e:	7d 2d       	mov	r23, r13
    2010:	8e 2d       	mov	r24, r14
    2012:	9f 2d       	mov	r25, r15
    2014:	08 e0       	ldi	r16, 0x08	; 8
    2016:	0f d3       	rcall	.+1566   	; 0x2636 <__lshrdi3>
    2018:	2d 83       	std	Y+5, r18	; 0x05
    201a:	93 2e       	mov	r9, r19
    201c:	a4 2e       	mov	r10, r20
    201e:	b5 2e       	mov	r11, r21
    2020:	69 83       	std	Y+1, r22	; 0x01
    2022:	d7 2e       	mov	r13, r23
    2024:	e8 2e       	mov	r14, r24
    2026:	f9 2e       	mov	r15, r25
    2028:	41 2f       	mov	r20, r17
    202a:	6c 2d       	mov	r22, r12
    202c:	8a 81       	ldd	r24, Y+2	; 0x02
    202e:	19 dd       	rcall	.-1486   	; 0x1a62 <sram_write_or>
    2030:	21 2f       	mov	r18, r17
    2032:	32 2d       	mov	r19, r2
    2034:	43 2d       	mov	r20, r3
    2036:	54 2d       	mov	r21, r4
    2038:	65 2d       	mov	r22, r5
    203a:	76 2d       	mov	r23, r6
    203c:	87 2d       	mov	r24, r7
    203e:	98 2d       	mov	r25, r8
    2040:	fa d2       	rcall	.+1524   	; 0x2636 <__lshrdi3>
    2042:	12 2f       	mov	r17, r18
    2044:	23 2e       	mov	r2, r19
    2046:	34 2e       	mov	r3, r20
    2048:	45 2e       	mov	r4, r21
    204a:	56 2e       	mov	r5, r22
    204c:	67 2e       	mov	r6, r23
    204e:	78 2e       	mov	r7, r24
    2050:	89 2e       	mov	r8, r25
    2052:	fa 81       	ldd	r31, Y+2	; 0x02
    2054:	ff 5f       	subi	r31, 0xFF	; 255
    2056:	fa 83       	std	Y+2, r31	; 0x02
    2058:	f8 30       	cpi	r31, 0x08	; 8
    205a:	81 f6       	brne	.-96     	; 0x1ffc <sram_scroll_vertically+0x162>
    205c:	0f 90       	pop	r0
    205e:	0f 90       	pop	r0
    2060:	0f 90       	pop	r0
    2062:	0f 90       	pop	r0
    2064:	0f 90       	pop	r0
    2066:	df 91       	pop	r29
    2068:	cf 91       	pop	r28
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ff 90       	pop	r15
    2070:	ef 90       	pop	r14
    2072:	df 90       	pop	r13
    2074:	cf 90       	pop	r12
    2076:	bf 90       	pop	r11
    2078:	af 90       	pop	r10
    207a:	9f 90       	pop	r9
    207c:	8f 90       	pop	r8
    207e:	7f 90       	pop	r7
    2080:	6f 90       	pop	r6
    2082:	5f 90       	pop	r5
    2084:	4f 90       	pop	r4
    2086:	3f 90       	pop	r3
    2088:	2f 90       	pop	r2
    208a:	08 95       	ret

0000208c <sram_set_point>:
    208c:	80 93 7b 03 	sts	0x037B, r24
    2090:	60 93 7a 03 	sts	0x037A, r22
    2094:	08 95       	ret

00002096 <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
    209e:	c8 2f       	mov	r28, r24
    20a0:	d6 2f       	mov	r29, r22
    20a2:	14 2f       	mov	r17, r20
    20a4:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    20a6:	80 93 7b 03 	sts	0x037B, r24
	prev_y = y0;
    20aa:	60 93 7a 03 	sts	0x037A, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    20ae:	62 2f       	mov	r22, r18
    20b0:	fa dd       	rcall	.-1036   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x1,y1);
    20b2:	60 2f       	mov	r22, r16
    20b4:	81 2f       	mov	r24, r17
    20b6:	f7 dd       	rcall	.-1042   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x1,y0);
    20b8:	6d 2f       	mov	r22, r29
    20ba:	81 2f       	mov	r24, r17
    20bc:	f4 dd       	rcall	.-1048   	; 0x1ca6 <sram_draw_line>
	sram_draw_line(x0,y0);
    20be:	6d 2f       	mov	r22, r29
    20c0:	8c 2f       	mov	r24, r28
    20c2:	f1 dd       	rcall	.-1054   	; 0x1ca6 <sram_draw_line>
}
    20c4:	df 91       	pop	r29
    20c6:	cf 91       	pop	r28
    20c8:	1f 91       	pop	r17
    20ca:	0f 91       	pop	r16
    20cc:	08 95       	ret

000020ce <initialize_timer>:

#include "timer.h"

uint8_t FLAG_timer_1_complete;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    20ce:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    20d0:	89 b7       	in	r24, 0x39	; 57
    20d2:	81 60       	ori	r24, 0x01	; 1
    20d4:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    20d6:	83 b7       	in	r24, 0x33	; 51
    20d8:	8d 60       	ori	r24, 0x0D	; 13
    20da:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e0       	ldi	r20, 0x00	; 0
    20e0:	50 e0       	ldi	r21, 0x00	; 0
    20e2:	60 ec       	ldi	r22, 0xC0	; 192
    20e4:	72 e1       	ldi	r23, 0x12	; 18
    20e6:	80 e0       	ldi	r24, 0x00	; 0
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	6e d2       	rcall	.+1244   	; 0x25c8 <__divmodsi4>
    20ec:	21 bf       	out	0x31, r18	; 49
	FLAG_timer_1_complete = 1;//since we are initializing we want to refresh the page
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	80 93 7c 03 	sts	0x037C, r24
    20f4:	08 95       	ret

000020f6 <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_timer_1_complete == 1)
    20f6:	80 91 7c 03 	lds	r24, 0x037C
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	19 f4       	brne	.+6      	; 0x2104 <timer_check_flag+0xe>
	{
		FLAG_timer_1_complete = 0;
    20fe:	10 92 7c 03 	sts	0x037C, r1
		return 1;
    2102:	08 95       	ret
	}
	return 0;
    2104:	80 e0       	ldi	r24, 0x00	; 0
}
    2106:	08 95       	ret

00002108 <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_timer_1_complete = 0;
    2108:	10 92 7c 03 	sts	0x037C, r1
    210c:	08 95       	ret

0000210e <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    210e:	1f 92       	push	r1
    2110:	0f 92       	push	r0
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	0f 92       	push	r0
    2116:	11 24       	eor	r1, r1
    2118:	8f 93       	push	r24
	FLAG_timer_1_complete = 1;
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	80 93 7c 03 	sts	0x037C, r24
}
    2120:	8f 91       	pop	r24
    2122:	0f 90       	pop	r0
    2124:	0f be       	out	0x3f, r0	; 63
    2126:	0f 90       	pop	r0
    2128:	1f 90       	pop	r1
    212a:	18 95       	reti

0000212c <timer_delay>:

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
    212c:	cf 93       	push	r28
    212e:	df 93       	push	r29
	timer_ms = (FPS*((double)timer_ms/1000));
    2130:	bc 01       	movw	r22, r24
    2132:	88 27       	eor	r24, r24
    2134:	77 fd       	sbrc	r23, 7
    2136:	80 95       	com	r24
    2138:	98 2f       	mov	r25, r24
    213a:	1c d1       	rcall	.+568    	; 0x2374 <__floatsisf>
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	4a e7       	ldi	r20, 0x7A	; 122
    2142:	54 e4       	ldi	r21, 0x44	; 68
    2144:	7c d0       	rcall	.+248    	; 0x223e <__divsf3>
    2146:	20 e0       	ldi	r18, 0x00	; 0
    2148:	30 e0       	ldi	r19, 0x00	; 0
    214a:	40 e7       	ldi	r20, 0x70	; 112
    214c:	52 e4       	ldi	r21, 0x42	; 66
    214e:	c6 d1       	rcall	.+908    	; 0x24dc <__mulsf3>
    2150:	de d0       	rcall	.+444    	; 0x230e <__fixsfsi>
    2152:	eb 01       	movw	r28, r22
	while(timer_ms>0){
    2154:	1c 16       	cp	r1, r28
    2156:	1d 06       	cpc	r1, r29
    2158:	34 f4       	brge	.+12     	; 0x2166 <timer_delay+0x3a>
		if (timer_check_flag())
    215a:	cd df       	rcall	.-102    	; 0x20f6 <timer_check_flag>
    215c:	81 11       	cpse	r24, r1
		{
			timer_ms--;
    215e:	21 97       	sbiw	r28, 0x01	; 1
	FLAG_timer_1_complete = 1;
}

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
	timer_ms = (FPS*((double)timer_ms/1000));
	while(timer_ms>0){
    2160:	1c 16       	cp	r1, r28
    2162:	1d 06       	cpc	r1, r29
    2164:	d4 f3       	brlt	.-12     	; 0x215a <timer_delay+0x2e>
		if (timer_check_flag())
		{
			timer_ms--;
		}
	}
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <__subsf3>:
    216c:	50 58       	subi	r21, 0x80	; 128

0000216e <__addsf3>:
    216e:	bb 27       	eor	r27, r27
    2170:	aa 27       	eor	r26, r26
    2172:	0e d0       	rcall	.+28     	; 0x2190 <__addsf3x>
    2174:	75 c1       	rjmp	.+746    	; 0x2460 <__fp_round>
    2176:	66 d1       	rcall	.+716    	; 0x2444 <__fp_pscA>
    2178:	30 f0       	brcs	.+12     	; 0x2186 <__addsf3+0x18>
    217a:	6b d1       	rcall	.+726    	; 0x2452 <__fp_pscB>
    217c:	20 f0       	brcs	.+8      	; 0x2186 <__addsf3+0x18>
    217e:	31 f4       	brne	.+12     	; 0x218c <__addsf3+0x1e>
    2180:	9f 3f       	cpi	r25, 0xFF	; 255
    2182:	11 f4       	brne	.+4      	; 0x2188 <__addsf3+0x1a>
    2184:	1e f4       	brtc	.+6      	; 0x218c <__addsf3+0x1e>
    2186:	5b c1       	rjmp	.+694    	; 0x243e <__fp_nan>
    2188:	0e f4       	brtc	.+2      	; 0x218c <__addsf3+0x1e>
    218a:	e0 95       	com	r30
    218c:	e7 fb       	bst	r30, 7
    218e:	51 c1       	rjmp	.+674    	; 0x2432 <__fp_inf>

00002190 <__addsf3x>:
    2190:	e9 2f       	mov	r30, r25
    2192:	77 d1       	rcall	.+750    	; 0x2482 <__fp_split3>
    2194:	80 f3       	brcs	.-32     	; 0x2176 <__addsf3+0x8>
    2196:	ba 17       	cp	r27, r26
    2198:	62 07       	cpc	r22, r18
    219a:	73 07       	cpc	r23, r19
    219c:	84 07       	cpc	r24, r20
    219e:	95 07       	cpc	r25, r21
    21a0:	18 f0       	brcs	.+6      	; 0x21a8 <__addsf3x+0x18>
    21a2:	71 f4       	brne	.+28     	; 0x21c0 <__addsf3x+0x30>
    21a4:	9e f5       	brtc	.+102    	; 0x220c <__addsf3x+0x7c>
    21a6:	8f c1       	rjmp	.+798    	; 0x24c6 <__fp_zero>
    21a8:	0e f4       	brtc	.+2      	; 0x21ac <__addsf3x+0x1c>
    21aa:	e0 95       	com	r30
    21ac:	0b 2e       	mov	r0, r27
    21ae:	ba 2f       	mov	r27, r26
    21b0:	a0 2d       	mov	r26, r0
    21b2:	0b 01       	movw	r0, r22
    21b4:	b9 01       	movw	r22, r18
    21b6:	90 01       	movw	r18, r0
    21b8:	0c 01       	movw	r0, r24
    21ba:	ca 01       	movw	r24, r20
    21bc:	a0 01       	movw	r20, r0
    21be:	11 24       	eor	r1, r1
    21c0:	ff 27       	eor	r31, r31
    21c2:	59 1b       	sub	r21, r25
    21c4:	99 f0       	breq	.+38     	; 0x21ec <__addsf3x+0x5c>
    21c6:	59 3f       	cpi	r21, 0xF9	; 249
    21c8:	50 f4       	brcc	.+20     	; 0x21de <__addsf3x+0x4e>
    21ca:	50 3e       	cpi	r21, 0xE0	; 224
    21cc:	68 f1       	brcs	.+90     	; 0x2228 <__addsf3x+0x98>
    21ce:	1a 16       	cp	r1, r26
    21d0:	f0 40       	sbci	r31, 0x00	; 0
    21d2:	a2 2f       	mov	r26, r18
    21d4:	23 2f       	mov	r18, r19
    21d6:	34 2f       	mov	r19, r20
    21d8:	44 27       	eor	r20, r20
    21da:	58 5f       	subi	r21, 0xF8	; 248
    21dc:	f3 cf       	rjmp	.-26     	; 0x21c4 <__addsf3x+0x34>
    21de:	46 95       	lsr	r20
    21e0:	37 95       	ror	r19
    21e2:	27 95       	ror	r18
    21e4:	a7 95       	ror	r26
    21e6:	f0 40       	sbci	r31, 0x00	; 0
    21e8:	53 95       	inc	r21
    21ea:	c9 f7       	brne	.-14     	; 0x21de <__addsf3x+0x4e>
    21ec:	7e f4       	brtc	.+30     	; 0x220c <__addsf3x+0x7c>
    21ee:	1f 16       	cp	r1, r31
    21f0:	ba 0b       	sbc	r27, r26
    21f2:	62 0b       	sbc	r22, r18
    21f4:	73 0b       	sbc	r23, r19
    21f6:	84 0b       	sbc	r24, r20
    21f8:	ba f0       	brmi	.+46     	; 0x2228 <__addsf3x+0x98>
    21fa:	91 50       	subi	r25, 0x01	; 1
    21fc:	a1 f0       	breq	.+40     	; 0x2226 <__addsf3x+0x96>
    21fe:	ff 0f       	add	r31, r31
    2200:	bb 1f       	adc	r27, r27
    2202:	66 1f       	adc	r22, r22
    2204:	77 1f       	adc	r23, r23
    2206:	88 1f       	adc	r24, r24
    2208:	c2 f7       	brpl	.-16     	; 0x21fa <__addsf3x+0x6a>
    220a:	0e c0       	rjmp	.+28     	; 0x2228 <__addsf3x+0x98>
    220c:	ba 0f       	add	r27, r26
    220e:	62 1f       	adc	r22, r18
    2210:	73 1f       	adc	r23, r19
    2212:	84 1f       	adc	r24, r20
    2214:	48 f4       	brcc	.+18     	; 0x2228 <__addsf3x+0x98>
    2216:	87 95       	ror	r24
    2218:	77 95       	ror	r23
    221a:	67 95       	ror	r22
    221c:	b7 95       	ror	r27
    221e:	f7 95       	ror	r31
    2220:	9e 3f       	cpi	r25, 0xFE	; 254
    2222:	08 f0       	brcs	.+2      	; 0x2226 <__addsf3x+0x96>
    2224:	b3 cf       	rjmp	.-154    	; 0x218c <__addsf3+0x1e>
    2226:	93 95       	inc	r25
    2228:	88 0f       	add	r24, r24
    222a:	08 f0       	brcs	.+2      	; 0x222e <__addsf3x+0x9e>
    222c:	99 27       	eor	r25, r25
    222e:	ee 0f       	add	r30, r30
    2230:	97 95       	ror	r25
    2232:	87 95       	ror	r24
    2234:	08 95       	ret

00002236 <__cmpsf2>:
    2236:	d9 d0       	rcall	.+434    	; 0x23ea <__fp_cmp>
    2238:	08 f4       	brcc	.+2      	; 0x223c <__cmpsf2+0x6>
    223a:	81 e0       	ldi	r24, 0x01	; 1
    223c:	08 95       	ret

0000223e <__divsf3>:
    223e:	0c d0       	rcall	.+24     	; 0x2258 <__divsf3x>
    2240:	0f c1       	rjmp	.+542    	; 0x2460 <__fp_round>
    2242:	07 d1       	rcall	.+526    	; 0x2452 <__fp_pscB>
    2244:	40 f0       	brcs	.+16     	; 0x2256 <__divsf3+0x18>
    2246:	fe d0       	rcall	.+508    	; 0x2444 <__fp_pscA>
    2248:	30 f0       	brcs	.+12     	; 0x2256 <__divsf3+0x18>
    224a:	21 f4       	brne	.+8      	; 0x2254 <__divsf3+0x16>
    224c:	5f 3f       	cpi	r21, 0xFF	; 255
    224e:	19 f0       	breq	.+6      	; 0x2256 <__divsf3+0x18>
    2250:	f0 c0       	rjmp	.+480    	; 0x2432 <__fp_inf>
    2252:	51 11       	cpse	r21, r1
    2254:	39 c1       	rjmp	.+626    	; 0x24c8 <__fp_szero>
    2256:	f3 c0       	rjmp	.+486    	; 0x243e <__fp_nan>

00002258 <__divsf3x>:
    2258:	14 d1       	rcall	.+552    	; 0x2482 <__fp_split3>
    225a:	98 f3       	brcs	.-26     	; 0x2242 <__divsf3+0x4>

0000225c <__divsf3_pse>:
    225c:	99 23       	and	r25, r25
    225e:	c9 f3       	breq	.-14     	; 0x2252 <__divsf3+0x14>
    2260:	55 23       	and	r21, r21
    2262:	b1 f3       	breq	.-20     	; 0x2250 <__divsf3+0x12>
    2264:	95 1b       	sub	r25, r21
    2266:	55 0b       	sbc	r21, r21
    2268:	bb 27       	eor	r27, r27
    226a:	aa 27       	eor	r26, r26
    226c:	62 17       	cp	r22, r18
    226e:	73 07       	cpc	r23, r19
    2270:	84 07       	cpc	r24, r20
    2272:	38 f0       	brcs	.+14     	; 0x2282 <__divsf3_pse+0x26>
    2274:	9f 5f       	subi	r25, 0xFF	; 255
    2276:	5f 4f       	sbci	r21, 0xFF	; 255
    2278:	22 0f       	add	r18, r18
    227a:	33 1f       	adc	r19, r19
    227c:	44 1f       	adc	r20, r20
    227e:	aa 1f       	adc	r26, r26
    2280:	a9 f3       	breq	.-22     	; 0x226c <__divsf3_pse+0x10>
    2282:	33 d0       	rcall	.+102    	; 0x22ea <__divsf3_pse+0x8e>
    2284:	0e 2e       	mov	r0, r30
    2286:	3a f0       	brmi	.+14     	; 0x2296 <__divsf3_pse+0x3a>
    2288:	e0 e8       	ldi	r30, 0x80	; 128
    228a:	30 d0       	rcall	.+96     	; 0x22ec <__divsf3_pse+0x90>
    228c:	91 50       	subi	r25, 0x01	; 1
    228e:	50 40       	sbci	r21, 0x00	; 0
    2290:	e6 95       	lsr	r30
    2292:	00 1c       	adc	r0, r0
    2294:	ca f7       	brpl	.-14     	; 0x2288 <__divsf3_pse+0x2c>
    2296:	29 d0       	rcall	.+82     	; 0x22ea <__divsf3_pse+0x8e>
    2298:	fe 2f       	mov	r31, r30
    229a:	27 d0       	rcall	.+78     	; 0x22ea <__divsf3_pse+0x8e>
    229c:	66 0f       	add	r22, r22
    229e:	77 1f       	adc	r23, r23
    22a0:	88 1f       	adc	r24, r24
    22a2:	bb 1f       	adc	r27, r27
    22a4:	26 17       	cp	r18, r22
    22a6:	37 07       	cpc	r19, r23
    22a8:	48 07       	cpc	r20, r24
    22aa:	ab 07       	cpc	r26, r27
    22ac:	b0 e8       	ldi	r27, 0x80	; 128
    22ae:	09 f0       	breq	.+2      	; 0x22b2 <__divsf3_pse+0x56>
    22b0:	bb 0b       	sbc	r27, r27
    22b2:	80 2d       	mov	r24, r0
    22b4:	bf 01       	movw	r22, r30
    22b6:	ff 27       	eor	r31, r31
    22b8:	93 58       	subi	r25, 0x83	; 131
    22ba:	5f 4f       	sbci	r21, 0xFF	; 255
    22bc:	2a f0       	brmi	.+10     	; 0x22c8 <__divsf3_pse+0x6c>
    22be:	9e 3f       	cpi	r25, 0xFE	; 254
    22c0:	51 05       	cpc	r21, r1
    22c2:	68 f0       	brcs	.+26     	; 0x22de <__divsf3_pse+0x82>
    22c4:	b6 c0       	rjmp	.+364    	; 0x2432 <__fp_inf>
    22c6:	00 c1       	rjmp	.+512    	; 0x24c8 <__fp_szero>
    22c8:	5f 3f       	cpi	r21, 0xFF	; 255
    22ca:	ec f3       	brlt	.-6      	; 0x22c6 <__divsf3_pse+0x6a>
    22cc:	98 3e       	cpi	r25, 0xE8	; 232
    22ce:	dc f3       	brlt	.-10     	; 0x22c6 <__divsf3_pse+0x6a>
    22d0:	86 95       	lsr	r24
    22d2:	77 95       	ror	r23
    22d4:	67 95       	ror	r22
    22d6:	b7 95       	ror	r27
    22d8:	f7 95       	ror	r31
    22da:	9f 5f       	subi	r25, 0xFF	; 255
    22dc:	c9 f7       	brne	.-14     	; 0x22d0 <__divsf3_pse+0x74>
    22de:	88 0f       	add	r24, r24
    22e0:	91 1d       	adc	r25, r1
    22e2:	96 95       	lsr	r25
    22e4:	87 95       	ror	r24
    22e6:	97 f9       	bld	r25, 7
    22e8:	08 95       	ret
    22ea:	e1 e0       	ldi	r30, 0x01	; 1
    22ec:	66 0f       	add	r22, r22
    22ee:	77 1f       	adc	r23, r23
    22f0:	88 1f       	adc	r24, r24
    22f2:	bb 1f       	adc	r27, r27
    22f4:	62 17       	cp	r22, r18
    22f6:	73 07       	cpc	r23, r19
    22f8:	84 07       	cpc	r24, r20
    22fa:	ba 07       	cpc	r27, r26
    22fc:	20 f0       	brcs	.+8      	; 0x2306 <__divsf3_pse+0xaa>
    22fe:	62 1b       	sub	r22, r18
    2300:	73 0b       	sbc	r23, r19
    2302:	84 0b       	sbc	r24, r20
    2304:	ba 0b       	sbc	r27, r26
    2306:	ee 1f       	adc	r30, r30
    2308:	88 f7       	brcc	.-30     	; 0x22ec <__divsf3_pse+0x90>
    230a:	e0 95       	com	r30
    230c:	08 95       	ret

0000230e <__fixsfsi>:
    230e:	04 d0       	rcall	.+8      	; 0x2318 <__fixunssfsi>
    2310:	68 94       	set
    2312:	b1 11       	cpse	r27, r1
    2314:	d9 c0       	rjmp	.+434    	; 0x24c8 <__fp_szero>
    2316:	08 95       	ret

00002318 <__fixunssfsi>:
    2318:	bc d0       	rcall	.+376    	; 0x2492 <__fp_splitA>
    231a:	88 f0       	brcs	.+34     	; 0x233e <__fixunssfsi+0x26>
    231c:	9f 57       	subi	r25, 0x7F	; 127
    231e:	90 f0       	brcs	.+36     	; 0x2344 <__fixunssfsi+0x2c>
    2320:	b9 2f       	mov	r27, r25
    2322:	99 27       	eor	r25, r25
    2324:	b7 51       	subi	r27, 0x17	; 23
    2326:	a0 f0       	brcs	.+40     	; 0x2350 <__fixunssfsi+0x38>
    2328:	d1 f0       	breq	.+52     	; 0x235e <__fixunssfsi+0x46>
    232a:	66 0f       	add	r22, r22
    232c:	77 1f       	adc	r23, r23
    232e:	88 1f       	adc	r24, r24
    2330:	99 1f       	adc	r25, r25
    2332:	1a f0       	brmi	.+6      	; 0x233a <__fixunssfsi+0x22>
    2334:	ba 95       	dec	r27
    2336:	c9 f7       	brne	.-14     	; 0x232a <__fixunssfsi+0x12>
    2338:	12 c0       	rjmp	.+36     	; 0x235e <__fixunssfsi+0x46>
    233a:	b1 30       	cpi	r27, 0x01	; 1
    233c:	81 f0       	breq	.+32     	; 0x235e <__fixunssfsi+0x46>
    233e:	c3 d0       	rcall	.+390    	; 0x24c6 <__fp_zero>
    2340:	b1 e0       	ldi	r27, 0x01	; 1
    2342:	08 95       	ret
    2344:	c0 c0       	rjmp	.+384    	; 0x24c6 <__fp_zero>
    2346:	67 2f       	mov	r22, r23
    2348:	78 2f       	mov	r23, r24
    234a:	88 27       	eor	r24, r24
    234c:	b8 5f       	subi	r27, 0xF8	; 248
    234e:	39 f0       	breq	.+14     	; 0x235e <__fixunssfsi+0x46>
    2350:	b9 3f       	cpi	r27, 0xF9	; 249
    2352:	cc f3       	brlt	.-14     	; 0x2346 <__fixunssfsi+0x2e>
    2354:	86 95       	lsr	r24
    2356:	77 95       	ror	r23
    2358:	67 95       	ror	r22
    235a:	b3 95       	inc	r27
    235c:	d9 f7       	brne	.-10     	; 0x2354 <__fixunssfsi+0x3c>
    235e:	3e f4       	brtc	.+14     	; 0x236e <__fixunssfsi+0x56>
    2360:	90 95       	com	r25
    2362:	80 95       	com	r24
    2364:	70 95       	com	r23
    2366:	61 95       	neg	r22
    2368:	7f 4f       	sbci	r23, 0xFF	; 255
    236a:	8f 4f       	sbci	r24, 0xFF	; 255
    236c:	9f 4f       	sbci	r25, 0xFF	; 255
    236e:	08 95       	ret

00002370 <__floatunsisf>:
    2370:	e8 94       	clt
    2372:	09 c0       	rjmp	.+18     	; 0x2386 <__floatsisf+0x12>

00002374 <__floatsisf>:
    2374:	97 fb       	bst	r25, 7
    2376:	3e f4       	brtc	.+14     	; 0x2386 <__floatsisf+0x12>
    2378:	90 95       	com	r25
    237a:	80 95       	com	r24
    237c:	70 95       	com	r23
    237e:	61 95       	neg	r22
    2380:	7f 4f       	sbci	r23, 0xFF	; 255
    2382:	8f 4f       	sbci	r24, 0xFF	; 255
    2384:	9f 4f       	sbci	r25, 0xFF	; 255
    2386:	99 23       	and	r25, r25
    2388:	a9 f0       	breq	.+42     	; 0x23b4 <__floatsisf+0x40>
    238a:	f9 2f       	mov	r31, r25
    238c:	96 e9       	ldi	r25, 0x96	; 150
    238e:	bb 27       	eor	r27, r27
    2390:	93 95       	inc	r25
    2392:	f6 95       	lsr	r31
    2394:	87 95       	ror	r24
    2396:	77 95       	ror	r23
    2398:	67 95       	ror	r22
    239a:	b7 95       	ror	r27
    239c:	f1 11       	cpse	r31, r1
    239e:	f8 cf       	rjmp	.-16     	; 0x2390 <__floatsisf+0x1c>
    23a0:	fa f4       	brpl	.+62     	; 0x23e0 <__floatsisf+0x6c>
    23a2:	bb 0f       	add	r27, r27
    23a4:	11 f4       	brne	.+4      	; 0x23aa <__floatsisf+0x36>
    23a6:	60 ff       	sbrs	r22, 0
    23a8:	1b c0       	rjmp	.+54     	; 0x23e0 <__floatsisf+0x6c>
    23aa:	6f 5f       	subi	r22, 0xFF	; 255
    23ac:	7f 4f       	sbci	r23, 0xFF	; 255
    23ae:	8f 4f       	sbci	r24, 0xFF	; 255
    23b0:	9f 4f       	sbci	r25, 0xFF	; 255
    23b2:	16 c0       	rjmp	.+44     	; 0x23e0 <__floatsisf+0x6c>
    23b4:	88 23       	and	r24, r24
    23b6:	11 f0       	breq	.+4      	; 0x23bc <__floatsisf+0x48>
    23b8:	96 e9       	ldi	r25, 0x96	; 150
    23ba:	11 c0       	rjmp	.+34     	; 0x23de <__floatsisf+0x6a>
    23bc:	77 23       	and	r23, r23
    23be:	21 f0       	breq	.+8      	; 0x23c8 <__floatsisf+0x54>
    23c0:	9e e8       	ldi	r25, 0x8E	; 142
    23c2:	87 2f       	mov	r24, r23
    23c4:	76 2f       	mov	r23, r22
    23c6:	05 c0       	rjmp	.+10     	; 0x23d2 <__floatsisf+0x5e>
    23c8:	66 23       	and	r22, r22
    23ca:	71 f0       	breq	.+28     	; 0x23e8 <__floatsisf+0x74>
    23cc:	96 e8       	ldi	r25, 0x86	; 134
    23ce:	86 2f       	mov	r24, r22
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	60 e0       	ldi	r22, 0x00	; 0
    23d4:	2a f0       	brmi	.+10     	; 0x23e0 <__floatsisf+0x6c>
    23d6:	9a 95       	dec	r25
    23d8:	66 0f       	add	r22, r22
    23da:	77 1f       	adc	r23, r23
    23dc:	88 1f       	adc	r24, r24
    23de:	da f7       	brpl	.-10     	; 0x23d6 <__floatsisf+0x62>
    23e0:	88 0f       	add	r24, r24
    23e2:	96 95       	lsr	r25
    23e4:	87 95       	ror	r24
    23e6:	97 f9       	bld	r25, 7
    23e8:	08 95       	ret

000023ea <__fp_cmp>:
    23ea:	99 0f       	add	r25, r25
    23ec:	00 08       	sbc	r0, r0
    23ee:	55 0f       	add	r21, r21
    23f0:	aa 0b       	sbc	r26, r26
    23f2:	e0 e8       	ldi	r30, 0x80	; 128
    23f4:	fe ef       	ldi	r31, 0xFE	; 254
    23f6:	16 16       	cp	r1, r22
    23f8:	17 06       	cpc	r1, r23
    23fa:	e8 07       	cpc	r30, r24
    23fc:	f9 07       	cpc	r31, r25
    23fe:	c0 f0       	brcs	.+48     	; 0x2430 <__fp_cmp+0x46>
    2400:	12 16       	cp	r1, r18
    2402:	13 06       	cpc	r1, r19
    2404:	e4 07       	cpc	r30, r20
    2406:	f5 07       	cpc	r31, r21
    2408:	98 f0       	brcs	.+38     	; 0x2430 <__fp_cmp+0x46>
    240a:	62 1b       	sub	r22, r18
    240c:	73 0b       	sbc	r23, r19
    240e:	84 0b       	sbc	r24, r20
    2410:	95 0b       	sbc	r25, r21
    2412:	39 f4       	brne	.+14     	; 0x2422 <__fp_cmp+0x38>
    2414:	0a 26       	eor	r0, r26
    2416:	61 f0       	breq	.+24     	; 0x2430 <__fp_cmp+0x46>
    2418:	23 2b       	or	r18, r19
    241a:	24 2b       	or	r18, r20
    241c:	25 2b       	or	r18, r21
    241e:	21 f4       	brne	.+8      	; 0x2428 <__fp_cmp+0x3e>
    2420:	08 95       	ret
    2422:	0a 26       	eor	r0, r26
    2424:	09 f4       	brne	.+2      	; 0x2428 <__fp_cmp+0x3e>
    2426:	a1 40       	sbci	r26, 0x01	; 1
    2428:	a6 95       	lsr	r26
    242a:	8f ef       	ldi	r24, 0xFF	; 255
    242c:	81 1d       	adc	r24, r1
    242e:	81 1d       	adc	r24, r1
    2430:	08 95       	ret

00002432 <__fp_inf>:
    2432:	97 f9       	bld	r25, 7
    2434:	9f 67       	ori	r25, 0x7F	; 127
    2436:	80 e8       	ldi	r24, 0x80	; 128
    2438:	70 e0       	ldi	r23, 0x00	; 0
    243a:	60 e0       	ldi	r22, 0x00	; 0
    243c:	08 95       	ret

0000243e <__fp_nan>:
    243e:	9f ef       	ldi	r25, 0xFF	; 255
    2440:	80 ec       	ldi	r24, 0xC0	; 192
    2442:	08 95       	ret

00002444 <__fp_pscA>:
    2444:	00 24       	eor	r0, r0
    2446:	0a 94       	dec	r0
    2448:	16 16       	cp	r1, r22
    244a:	17 06       	cpc	r1, r23
    244c:	18 06       	cpc	r1, r24
    244e:	09 06       	cpc	r0, r25
    2450:	08 95       	ret

00002452 <__fp_pscB>:
    2452:	00 24       	eor	r0, r0
    2454:	0a 94       	dec	r0
    2456:	12 16       	cp	r1, r18
    2458:	13 06       	cpc	r1, r19
    245a:	14 06       	cpc	r1, r20
    245c:	05 06       	cpc	r0, r21
    245e:	08 95       	ret

00002460 <__fp_round>:
    2460:	09 2e       	mov	r0, r25
    2462:	03 94       	inc	r0
    2464:	00 0c       	add	r0, r0
    2466:	11 f4       	brne	.+4      	; 0x246c <__fp_round+0xc>
    2468:	88 23       	and	r24, r24
    246a:	52 f0       	brmi	.+20     	; 0x2480 <__fp_round+0x20>
    246c:	bb 0f       	add	r27, r27
    246e:	40 f4       	brcc	.+16     	; 0x2480 <__fp_round+0x20>
    2470:	bf 2b       	or	r27, r31
    2472:	11 f4       	brne	.+4      	; 0x2478 <__fp_round+0x18>
    2474:	60 ff       	sbrs	r22, 0
    2476:	04 c0       	rjmp	.+8      	; 0x2480 <__fp_round+0x20>
    2478:	6f 5f       	subi	r22, 0xFF	; 255
    247a:	7f 4f       	sbci	r23, 0xFF	; 255
    247c:	8f 4f       	sbci	r24, 0xFF	; 255
    247e:	9f 4f       	sbci	r25, 0xFF	; 255
    2480:	08 95       	ret

00002482 <__fp_split3>:
    2482:	57 fd       	sbrc	r21, 7
    2484:	90 58       	subi	r25, 0x80	; 128
    2486:	44 0f       	add	r20, r20
    2488:	55 1f       	adc	r21, r21
    248a:	59 f0       	breq	.+22     	; 0x24a2 <__fp_splitA+0x10>
    248c:	5f 3f       	cpi	r21, 0xFF	; 255
    248e:	71 f0       	breq	.+28     	; 0x24ac <__fp_splitA+0x1a>
    2490:	47 95       	ror	r20

00002492 <__fp_splitA>:
    2492:	88 0f       	add	r24, r24
    2494:	97 fb       	bst	r25, 7
    2496:	99 1f       	adc	r25, r25
    2498:	61 f0       	breq	.+24     	; 0x24b2 <__fp_splitA+0x20>
    249a:	9f 3f       	cpi	r25, 0xFF	; 255
    249c:	79 f0       	breq	.+30     	; 0x24bc <__fp_splitA+0x2a>
    249e:	87 95       	ror	r24
    24a0:	08 95       	ret
    24a2:	12 16       	cp	r1, r18
    24a4:	13 06       	cpc	r1, r19
    24a6:	14 06       	cpc	r1, r20
    24a8:	55 1f       	adc	r21, r21
    24aa:	f2 cf       	rjmp	.-28     	; 0x2490 <__fp_split3+0xe>
    24ac:	46 95       	lsr	r20
    24ae:	f1 df       	rcall	.-30     	; 0x2492 <__fp_splitA>
    24b0:	08 c0       	rjmp	.+16     	; 0x24c2 <__fp_splitA+0x30>
    24b2:	16 16       	cp	r1, r22
    24b4:	17 06       	cpc	r1, r23
    24b6:	18 06       	cpc	r1, r24
    24b8:	99 1f       	adc	r25, r25
    24ba:	f1 cf       	rjmp	.-30     	; 0x249e <__fp_splitA+0xc>
    24bc:	86 95       	lsr	r24
    24be:	71 05       	cpc	r23, r1
    24c0:	61 05       	cpc	r22, r1
    24c2:	08 94       	sec
    24c4:	08 95       	ret

000024c6 <__fp_zero>:
    24c6:	e8 94       	clt

000024c8 <__fp_szero>:
    24c8:	bb 27       	eor	r27, r27
    24ca:	66 27       	eor	r22, r22
    24cc:	77 27       	eor	r23, r23
    24ce:	cb 01       	movw	r24, r22
    24d0:	97 f9       	bld	r25, 7
    24d2:	08 95       	ret

000024d4 <__gesf2>:
    24d4:	8a df       	rcall	.-236    	; 0x23ea <__fp_cmp>
    24d6:	08 f4       	brcc	.+2      	; 0x24da <__gesf2+0x6>
    24d8:	8f ef       	ldi	r24, 0xFF	; 255
    24da:	08 95       	ret

000024dc <__mulsf3>:
    24dc:	0b d0       	rcall	.+22     	; 0x24f4 <__mulsf3x>
    24de:	c0 cf       	rjmp	.-128    	; 0x2460 <__fp_round>
    24e0:	b1 df       	rcall	.-158    	; 0x2444 <__fp_pscA>
    24e2:	28 f0       	brcs	.+10     	; 0x24ee <__mulsf3+0x12>
    24e4:	b6 df       	rcall	.-148    	; 0x2452 <__fp_pscB>
    24e6:	18 f0       	brcs	.+6      	; 0x24ee <__mulsf3+0x12>
    24e8:	95 23       	and	r25, r21
    24ea:	09 f0       	breq	.+2      	; 0x24ee <__mulsf3+0x12>
    24ec:	a2 cf       	rjmp	.-188    	; 0x2432 <__fp_inf>
    24ee:	a7 cf       	rjmp	.-178    	; 0x243e <__fp_nan>
    24f0:	11 24       	eor	r1, r1
    24f2:	ea cf       	rjmp	.-44     	; 0x24c8 <__fp_szero>

000024f4 <__mulsf3x>:
    24f4:	c6 df       	rcall	.-116    	; 0x2482 <__fp_split3>
    24f6:	a0 f3       	brcs	.-24     	; 0x24e0 <__mulsf3+0x4>

000024f8 <__mulsf3_pse>:
    24f8:	95 9f       	mul	r25, r21
    24fa:	d1 f3       	breq	.-12     	; 0x24f0 <__mulsf3+0x14>
    24fc:	95 0f       	add	r25, r21
    24fe:	50 e0       	ldi	r21, 0x00	; 0
    2500:	55 1f       	adc	r21, r21
    2502:	62 9f       	mul	r22, r18
    2504:	f0 01       	movw	r30, r0
    2506:	72 9f       	mul	r23, r18
    2508:	bb 27       	eor	r27, r27
    250a:	f0 0d       	add	r31, r0
    250c:	b1 1d       	adc	r27, r1
    250e:	63 9f       	mul	r22, r19
    2510:	aa 27       	eor	r26, r26
    2512:	f0 0d       	add	r31, r0
    2514:	b1 1d       	adc	r27, r1
    2516:	aa 1f       	adc	r26, r26
    2518:	64 9f       	mul	r22, r20
    251a:	66 27       	eor	r22, r22
    251c:	b0 0d       	add	r27, r0
    251e:	a1 1d       	adc	r26, r1
    2520:	66 1f       	adc	r22, r22
    2522:	82 9f       	mul	r24, r18
    2524:	22 27       	eor	r18, r18
    2526:	b0 0d       	add	r27, r0
    2528:	a1 1d       	adc	r26, r1
    252a:	62 1f       	adc	r22, r18
    252c:	73 9f       	mul	r23, r19
    252e:	b0 0d       	add	r27, r0
    2530:	a1 1d       	adc	r26, r1
    2532:	62 1f       	adc	r22, r18
    2534:	83 9f       	mul	r24, r19
    2536:	a0 0d       	add	r26, r0
    2538:	61 1d       	adc	r22, r1
    253a:	22 1f       	adc	r18, r18
    253c:	74 9f       	mul	r23, r20
    253e:	33 27       	eor	r19, r19
    2540:	a0 0d       	add	r26, r0
    2542:	61 1d       	adc	r22, r1
    2544:	23 1f       	adc	r18, r19
    2546:	84 9f       	mul	r24, r20
    2548:	60 0d       	add	r22, r0
    254a:	21 1d       	adc	r18, r1
    254c:	82 2f       	mov	r24, r18
    254e:	76 2f       	mov	r23, r22
    2550:	6a 2f       	mov	r22, r26
    2552:	11 24       	eor	r1, r1
    2554:	9f 57       	subi	r25, 0x7F	; 127
    2556:	50 40       	sbci	r21, 0x00	; 0
    2558:	8a f0       	brmi	.+34     	; 0x257c <__mulsf3_pse+0x84>
    255a:	e1 f0       	breq	.+56     	; 0x2594 <__mulsf3_pse+0x9c>
    255c:	88 23       	and	r24, r24
    255e:	4a f0       	brmi	.+18     	; 0x2572 <__mulsf3_pse+0x7a>
    2560:	ee 0f       	add	r30, r30
    2562:	ff 1f       	adc	r31, r31
    2564:	bb 1f       	adc	r27, r27
    2566:	66 1f       	adc	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	91 50       	subi	r25, 0x01	; 1
    256e:	50 40       	sbci	r21, 0x00	; 0
    2570:	a9 f7       	brne	.-22     	; 0x255c <__mulsf3_pse+0x64>
    2572:	9e 3f       	cpi	r25, 0xFE	; 254
    2574:	51 05       	cpc	r21, r1
    2576:	70 f0       	brcs	.+28     	; 0x2594 <__mulsf3_pse+0x9c>
    2578:	5c cf       	rjmp	.-328    	; 0x2432 <__fp_inf>
    257a:	a6 cf       	rjmp	.-180    	; 0x24c8 <__fp_szero>
    257c:	5f 3f       	cpi	r21, 0xFF	; 255
    257e:	ec f3       	brlt	.-6      	; 0x257a <__mulsf3_pse+0x82>
    2580:	98 3e       	cpi	r25, 0xE8	; 232
    2582:	dc f3       	brlt	.-10     	; 0x257a <__mulsf3_pse+0x82>
    2584:	86 95       	lsr	r24
    2586:	77 95       	ror	r23
    2588:	67 95       	ror	r22
    258a:	b7 95       	ror	r27
    258c:	f7 95       	ror	r31
    258e:	e7 95       	ror	r30
    2590:	9f 5f       	subi	r25, 0xFF	; 255
    2592:	c1 f7       	brne	.-16     	; 0x2584 <__mulsf3_pse+0x8c>
    2594:	fe 2b       	or	r31, r30
    2596:	88 0f       	add	r24, r24
    2598:	91 1d       	adc	r25, r1
    259a:	96 95       	lsr	r25
    259c:	87 95       	ror	r24
    259e:	97 f9       	bld	r25, 7
    25a0:	08 95       	ret

000025a2 <__divmodhi4>:
    25a2:	97 fb       	bst	r25, 7
    25a4:	07 2e       	mov	r0, r23
    25a6:	16 f4       	brtc	.+4      	; 0x25ac <__divmodhi4+0xa>
    25a8:	00 94       	com	r0
    25aa:	06 d0       	rcall	.+12     	; 0x25b8 <__divmodhi4_neg1>
    25ac:	77 fd       	sbrc	r23, 7
    25ae:	08 d0       	rcall	.+16     	; 0x25c0 <__divmodhi4_neg2>
    25b0:	5e d0       	rcall	.+188    	; 0x266e <__udivmodhi4>
    25b2:	07 fc       	sbrc	r0, 7
    25b4:	05 d0       	rcall	.+10     	; 0x25c0 <__divmodhi4_neg2>
    25b6:	3e f4       	brtc	.+14     	; 0x25c6 <__divmodhi4_exit>

000025b8 <__divmodhi4_neg1>:
    25b8:	90 95       	com	r25
    25ba:	81 95       	neg	r24
    25bc:	9f 4f       	sbci	r25, 0xFF	; 255
    25be:	08 95       	ret

000025c0 <__divmodhi4_neg2>:
    25c0:	70 95       	com	r23
    25c2:	61 95       	neg	r22
    25c4:	7f 4f       	sbci	r23, 0xFF	; 255

000025c6 <__divmodhi4_exit>:
    25c6:	08 95       	ret

000025c8 <__divmodsi4>:
    25c8:	05 2e       	mov	r0, r21
    25ca:	97 fb       	bst	r25, 7
    25cc:	16 f4       	brtc	.+4      	; 0x25d2 <__divmodsi4+0xa>
    25ce:	00 94       	com	r0
    25d0:	0f d0       	rcall	.+30     	; 0x25f0 <__negsi2>
    25d2:	57 fd       	sbrc	r21, 7
    25d4:	05 d0       	rcall	.+10     	; 0x25e0 <__divmodsi4_neg2>
    25d6:	5f d0       	rcall	.+190    	; 0x2696 <__udivmodsi4>
    25d8:	07 fc       	sbrc	r0, 7
    25da:	02 d0       	rcall	.+4      	; 0x25e0 <__divmodsi4_neg2>
    25dc:	46 f4       	brtc	.+16     	; 0x25ee <__divmodsi4_exit>
    25de:	08 c0       	rjmp	.+16     	; 0x25f0 <__negsi2>

000025e0 <__divmodsi4_neg2>:
    25e0:	50 95       	com	r21
    25e2:	40 95       	com	r20
    25e4:	30 95       	com	r19
    25e6:	21 95       	neg	r18
    25e8:	3f 4f       	sbci	r19, 0xFF	; 255
    25ea:	4f 4f       	sbci	r20, 0xFF	; 255
    25ec:	5f 4f       	sbci	r21, 0xFF	; 255

000025ee <__divmodsi4_exit>:
    25ee:	08 95       	ret

000025f0 <__negsi2>:
    25f0:	90 95       	com	r25
    25f2:	80 95       	com	r24
    25f4:	70 95       	com	r23
    25f6:	61 95       	neg	r22
    25f8:	7f 4f       	sbci	r23, 0xFF	; 255
    25fa:	8f 4f       	sbci	r24, 0xFF	; 255
    25fc:	9f 4f       	sbci	r25, 0xFF	; 255
    25fe:	08 95       	ret

00002600 <__ashldi3>:
    2600:	0f 93       	push	r16
    2602:	08 30       	cpi	r16, 0x08	; 8
    2604:	90 f0       	brcs	.+36     	; 0x262a <__ashldi3+0x2a>
    2606:	98 2f       	mov	r25, r24
    2608:	87 2f       	mov	r24, r23
    260a:	76 2f       	mov	r23, r22
    260c:	65 2f       	mov	r22, r21
    260e:	54 2f       	mov	r21, r20
    2610:	43 2f       	mov	r20, r19
    2612:	32 2f       	mov	r19, r18
    2614:	22 27       	eor	r18, r18
    2616:	08 50       	subi	r16, 0x08	; 8
    2618:	f4 cf       	rjmp	.-24     	; 0x2602 <__ashldi3+0x2>
    261a:	22 0f       	add	r18, r18
    261c:	33 1f       	adc	r19, r19
    261e:	44 1f       	adc	r20, r20
    2620:	55 1f       	adc	r21, r21
    2622:	66 1f       	adc	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	88 1f       	adc	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	0a 95       	dec	r16
    262c:	b2 f7       	brpl	.-20     	; 0x261a <__ashldi3+0x1a>
    262e:	0f 91       	pop	r16
    2630:	08 95       	ret

00002632 <__ashrdi3>:
    2632:	97 fb       	bst	r25, 7
    2634:	10 f8       	bld	r1, 0

00002636 <__lshrdi3>:
    2636:	16 94       	lsr	r1
    2638:	00 08       	sbc	r0, r0
    263a:	0f 93       	push	r16
    263c:	08 30       	cpi	r16, 0x08	; 8
    263e:	98 f0       	brcs	.+38     	; 0x2666 <__lshrdi3+0x30>
    2640:	08 50       	subi	r16, 0x08	; 8
    2642:	23 2f       	mov	r18, r19
    2644:	34 2f       	mov	r19, r20
    2646:	45 2f       	mov	r20, r21
    2648:	56 2f       	mov	r21, r22
    264a:	67 2f       	mov	r22, r23
    264c:	78 2f       	mov	r23, r24
    264e:	89 2f       	mov	r24, r25
    2650:	90 2d       	mov	r25, r0
    2652:	f4 cf       	rjmp	.-24     	; 0x263c <__lshrdi3+0x6>
    2654:	05 94       	asr	r0
    2656:	97 95       	ror	r25
    2658:	87 95       	ror	r24
    265a:	77 95       	ror	r23
    265c:	67 95       	ror	r22
    265e:	57 95       	ror	r21
    2660:	47 95       	ror	r20
    2662:	37 95       	ror	r19
    2664:	27 95       	ror	r18
    2666:	0a 95       	dec	r16
    2668:	aa f7       	brpl	.-22     	; 0x2654 <__lshrdi3+0x1e>
    266a:	0f 91       	pop	r16
    266c:	08 95       	ret

0000266e <__udivmodhi4>:
    266e:	aa 1b       	sub	r26, r26
    2670:	bb 1b       	sub	r27, r27
    2672:	51 e1       	ldi	r21, 0x11	; 17
    2674:	07 c0       	rjmp	.+14     	; 0x2684 <__udivmodhi4_ep>

00002676 <__udivmodhi4_loop>:
    2676:	aa 1f       	adc	r26, r26
    2678:	bb 1f       	adc	r27, r27
    267a:	a6 17       	cp	r26, r22
    267c:	b7 07       	cpc	r27, r23
    267e:	10 f0       	brcs	.+4      	; 0x2684 <__udivmodhi4_ep>
    2680:	a6 1b       	sub	r26, r22
    2682:	b7 0b       	sbc	r27, r23

00002684 <__udivmodhi4_ep>:
    2684:	88 1f       	adc	r24, r24
    2686:	99 1f       	adc	r25, r25
    2688:	5a 95       	dec	r21
    268a:	a9 f7       	brne	.-22     	; 0x2676 <__udivmodhi4_loop>
    268c:	80 95       	com	r24
    268e:	90 95       	com	r25
    2690:	bc 01       	movw	r22, r24
    2692:	cd 01       	movw	r24, r26
    2694:	08 95       	ret

00002696 <__udivmodsi4>:
    2696:	a1 e2       	ldi	r26, 0x21	; 33
    2698:	1a 2e       	mov	r1, r26
    269a:	aa 1b       	sub	r26, r26
    269c:	bb 1b       	sub	r27, r27
    269e:	fd 01       	movw	r30, r26
    26a0:	0d c0       	rjmp	.+26     	; 0x26bc <__udivmodsi4_ep>

000026a2 <__udivmodsi4_loop>:
    26a2:	aa 1f       	adc	r26, r26
    26a4:	bb 1f       	adc	r27, r27
    26a6:	ee 1f       	adc	r30, r30
    26a8:	ff 1f       	adc	r31, r31
    26aa:	a2 17       	cp	r26, r18
    26ac:	b3 07       	cpc	r27, r19
    26ae:	e4 07       	cpc	r30, r20
    26b0:	f5 07       	cpc	r31, r21
    26b2:	20 f0       	brcs	.+8      	; 0x26bc <__udivmodsi4_ep>
    26b4:	a2 1b       	sub	r26, r18
    26b6:	b3 0b       	sbc	r27, r19
    26b8:	e4 0b       	sbc	r30, r20
    26ba:	f5 0b       	sbc	r31, r21

000026bc <__udivmodsi4_ep>:
    26bc:	66 1f       	adc	r22, r22
    26be:	77 1f       	adc	r23, r23
    26c0:	88 1f       	adc	r24, r24
    26c2:	99 1f       	adc	r25, r25
    26c4:	1a 94       	dec	r1
    26c6:	69 f7       	brne	.-38     	; 0x26a2 <__udivmodsi4_loop>
    26c8:	60 95       	com	r22
    26ca:	70 95       	com	r23
    26cc:	80 95       	com	r24
    26ce:	90 95       	com	r25
    26d0:	9b 01       	movw	r18, r22
    26d2:	ac 01       	movw	r20, r24
    26d4:	bd 01       	movw	r22, r26
    26d6:	cf 01       	movw	r24, r30
    26d8:	08 95       	ret

000026da <do_rand>:
    26da:	8f 92       	push	r8
    26dc:	9f 92       	push	r9
    26de:	af 92       	push	r10
    26e0:	bf 92       	push	r11
    26e2:	cf 92       	push	r12
    26e4:	df 92       	push	r13
    26e6:	ef 92       	push	r14
    26e8:	ff 92       	push	r15
    26ea:	cf 93       	push	r28
    26ec:	df 93       	push	r29
    26ee:	ec 01       	movw	r28, r24
    26f0:	68 81       	ld	r22, Y
    26f2:	79 81       	ldd	r23, Y+1	; 0x01
    26f4:	8a 81       	ldd	r24, Y+2	; 0x02
    26f6:	9b 81       	ldd	r25, Y+3	; 0x03
    26f8:	61 15       	cp	r22, r1
    26fa:	71 05       	cpc	r23, r1
    26fc:	81 05       	cpc	r24, r1
    26fe:	91 05       	cpc	r25, r1
    2700:	21 f4       	brne	.+8      	; 0x270a <do_rand+0x30>
    2702:	64 e2       	ldi	r22, 0x24	; 36
    2704:	79 ed       	ldi	r23, 0xD9	; 217
    2706:	8b e5       	ldi	r24, 0x5B	; 91
    2708:	97 e0       	ldi	r25, 0x07	; 7
    270a:	2d e1       	ldi	r18, 0x1D	; 29
    270c:	33 ef       	ldi	r19, 0xF3	; 243
    270e:	41 e0       	ldi	r20, 0x01	; 1
    2710:	50 e0       	ldi	r21, 0x00	; 0
    2712:	5a df       	rcall	.-332    	; 0x25c8 <__divmodsi4>
    2714:	49 01       	movw	r8, r18
    2716:	5a 01       	movw	r10, r20
    2718:	9b 01       	movw	r18, r22
    271a:	ac 01       	movw	r20, r24
    271c:	a7 ea       	ldi	r26, 0xA7	; 167
    271e:	b1 e4       	ldi	r27, 0x41	; 65
    2720:	46 d4       	rcall	.+2188   	; 0x2fae <__muluhisi3>
    2722:	6b 01       	movw	r12, r22
    2724:	7c 01       	movw	r14, r24
    2726:	ac ee       	ldi	r26, 0xEC	; 236
    2728:	b4 ef       	ldi	r27, 0xF4	; 244
    272a:	a5 01       	movw	r20, r10
    272c:	94 01       	movw	r18, r8
    272e:	4b d4       	rcall	.+2198   	; 0x2fc6 <__mulohisi3>
    2730:	c6 0e       	add	r12, r22
    2732:	d7 1e       	adc	r13, r23
    2734:	e8 1e       	adc	r14, r24
    2736:	f9 1e       	adc	r15, r25
    2738:	f7 fe       	sbrs	r15, 7
    273a:	06 c0       	rjmp	.+12     	; 0x2748 <do_rand+0x6e>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	c8 1a       	sub	r12, r24
    2740:	d1 08       	sbc	r13, r1
    2742:	e1 08       	sbc	r14, r1
    2744:	80 e8       	ldi	r24, 0x80	; 128
    2746:	f8 0a       	sbc	r15, r24
    2748:	c8 82       	st	Y, r12
    274a:	d9 82       	std	Y+1, r13	; 0x01
    274c:	ea 82       	std	Y+2, r14	; 0x02
    274e:	fb 82       	std	Y+3, r15	; 0x03
    2750:	c6 01       	movw	r24, r12
    2752:	9f 77       	andi	r25, 0x7F	; 127
    2754:	df 91       	pop	r29
    2756:	cf 91       	pop	r28
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	df 90       	pop	r13
    275e:	cf 90       	pop	r12
    2760:	bf 90       	pop	r11
    2762:	af 90       	pop	r10
    2764:	9f 90       	pop	r9
    2766:	8f 90       	pop	r8
    2768:	08 95       	ret

0000276a <rand_r>:
    276a:	b7 cf       	rjmp	.-146    	; 0x26da <do_rand>

0000276c <rand>:
    276c:	80 e0       	ldi	r24, 0x00	; 0
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	b4 cf       	rjmp	.-152    	; 0x26da <do_rand>

00002772 <srand>:
    2772:	a0 e0       	ldi	r26, 0x00	; 0
    2774:	b0 e0       	ldi	r27, 0x00	; 0
    2776:	80 93 00 01 	sts	0x0100, r24
    277a:	90 93 01 01 	sts	0x0101, r25
    277e:	a0 93 02 01 	sts	0x0102, r26
    2782:	b0 93 03 01 	sts	0x0103, r27
    2786:	08 95       	ret

00002788 <strcpy_P>:
    2788:	fb 01       	movw	r30, r22
    278a:	dc 01       	movw	r26, r24
    278c:	05 90       	lpm	r0, Z+
    278e:	0d 92       	st	X+, r0
    2790:	00 20       	and	r0, r0
    2792:	e1 f7       	brne	.-8      	; 0x278c <strcpy_P+0x4>
    2794:	08 95       	ret

00002796 <fdevopen>:
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	df 93       	push	r29
    279e:	ec 01       	movw	r28, r24
    27a0:	8b 01       	movw	r16, r22
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	31 f4       	brne	.+12     	; 0x27b2 <fdevopen+0x1c>
    27a6:	61 15       	cp	r22, r1
    27a8:	71 05       	cpc	r23, r1
    27aa:	19 f4       	brne	.+6      	; 0x27b2 <fdevopen+0x1c>
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	37 c0       	rjmp	.+110    	; 0x2820 <fdevopen+0x8a>
    27b2:	6e e0       	ldi	r22, 0x0E	; 14
    27b4:	70 e0       	ldi	r23, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	0b d2       	rcall	.+1046   	; 0x2bd2 <calloc>
    27bc:	fc 01       	movw	r30, r24
    27be:	00 97       	sbiw	r24, 0x00	; 0
    27c0:	a9 f3       	breq	.-22     	; 0x27ac <fdevopen+0x16>
    27c2:	80 e8       	ldi	r24, 0x80	; 128
    27c4:	83 83       	std	Z+3, r24	; 0x03
    27c6:	01 15       	cp	r16, r1
    27c8:	11 05       	cpc	r17, r1
    27ca:	71 f0       	breq	.+28     	; 0x27e8 <fdevopen+0x52>
    27cc:	13 87       	std	Z+11, r17	; 0x0b
    27ce:	02 87       	std	Z+10, r16	; 0x0a
    27d0:	81 e8       	ldi	r24, 0x81	; 129
    27d2:	83 83       	std	Z+3, r24	; 0x03
    27d4:	80 91 7d 03 	lds	r24, 0x037D
    27d8:	90 91 7e 03 	lds	r25, 0x037E
    27dc:	89 2b       	or	r24, r25
    27de:	21 f4       	brne	.+8      	; 0x27e8 <fdevopen+0x52>
    27e0:	f0 93 7e 03 	sts	0x037E, r31
    27e4:	e0 93 7d 03 	sts	0x037D, r30
    27e8:	20 97       	sbiw	r28, 0x00	; 0
    27ea:	c9 f0       	breq	.+50     	; 0x281e <fdevopen+0x88>
    27ec:	d1 87       	std	Z+9, r29	; 0x09
    27ee:	c0 87       	std	Z+8, r28	; 0x08
    27f0:	83 81       	ldd	r24, Z+3	; 0x03
    27f2:	82 60       	ori	r24, 0x02	; 2
    27f4:	83 83       	std	Z+3, r24	; 0x03
    27f6:	80 91 7f 03 	lds	r24, 0x037F
    27fa:	90 91 80 03 	lds	r25, 0x0380
    27fe:	89 2b       	or	r24, r25
    2800:	71 f4       	brne	.+28     	; 0x281e <fdevopen+0x88>
    2802:	f0 93 80 03 	sts	0x0380, r31
    2806:	e0 93 7f 03 	sts	0x037F, r30
    280a:	80 91 81 03 	lds	r24, 0x0381
    280e:	90 91 82 03 	lds	r25, 0x0382
    2812:	89 2b       	or	r24, r25
    2814:	21 f4       	brne	.+8      	; 0x281e <fdevopen+0x88>
    2816:	f0 93 82 03 	sts	0x0382, r31
    281a:	e0 93 81 03 	sts	0x0381, r30
    281e:	cf 01       	movw	r24, r30
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	1f 91       	pop	r17
    2826:	0f 91       	pop	r16
    2828:	08 95       	ret

0000282a <printf>:
    282a:	a0 e0       	ldi	r26, 0x00	; 0
    282c:	b0 e0       	ldi	r27, 0x00	; 0
    282e:	ea e1       	ldi	r30, 0x1A	; 26
    2830:	f4 e1       	ldi	r31, 0x14	; 20
    2832:	dd c3       	rjmp	.+1978   	; 0x2fee <__prologue_saves__+0x20>
    2834:	fe 01       	movw	r30, r28
    2836:	35 96       	adiw	r30, 0x05	; 5
    2838:	61 91       	ld	r22, Z+
    283a:	71 91       	ld	r23, Z+
    283c:	af 01       	movw	r20, r30
    283e:	80 91 7f 03 	lds	r24, 0x037F
    2842:	90 91 80 03 	lds	r25, 0x0380
    2846:	02 d0       	rcall	.+4      	; 0x284c <vfprintf>
    2848:	e2 e0       	ldi	r30, 0x02	; 2
    284a:	ed c3       	rjmp	.+2010   	; 0x3026 <__epilogue_restores__+0x20>

0000284c <vfprintf>:
    284c:	ac e0       	ldi	r26, 0x0C	; 12
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	eb e2       	ldi	r30, 0x2B	; 43
    2852:	f4 e1       	ldi	r31, 0x14	; 20
    2854:	bc c3       	rjmp	.+1912   	; 0x2fce <__prologue_saves__>
    2856:	7c 01       	movw	r14, r24
    2858:	6b 01       	movw	r12, r22
    285a:	8a 01       	movw	r16, r20
    285c:	fc 01       	movw	r30, r24
    285e:	17 82       	std	Z+7, r1	; 0x07
    2860:	16 82       	std	Z+6, r1	; 0x06
    2862:	83 81       	ldd	r24, Z+3	; 0x03
    2864:	81 ff       	sbrs	r24, 1
    2866:	b0 c1       	rjmp	.+864    	; 0x2bc8 <vfprintf+0x37c>
    2868:	ce 01       	movw	r24, r28
    286a:	01 96       	adiw	r24, 0x01	; 1
    286c:	4c 01       	movw	r8, r24
    286e:	f7 01       	movw	r30, r14
    2870:	93 81       	ldd	r25, Z+3	; 0x03
    2872:	f6 01       	movw	r30, r12
    2874:	93 fd       	sbrc	r25, 3
    2876:	85 91       	lpm	r24, Z+
    2878:	93 ff       	sbrs	r25, 3
    287a:	81 91       	ld	r24, Z+
    287c:	6f 01       	movw	r12, r30
    287e:	88 23       	and	r24, r24
    2880:	09 f4       	brne	.+2      	; 0x2884 <vfprintf+0x38>
    2882:	9e c1       	rjmp	.+828    	; 0x2bc0 <vfprintf+0x374>
    2884:	85 32       	cpi	r24, 0x25	; 37
    2886:	39 f4       	brne	.+14     	; 0x2896 <vfprintf+0x4a>
    2888:	93 fd       	sbrc	r25, 3
    288a:	85 91       	lpm	r24, Z+
    288c:	93 ff       	sbrs	r25, 3
    288e:	81 91       	ld	r24, Z+
    2890:	6f 01       	movw	r12, r30
    2892:	85 32       	cpi	r24, 0x25	; 37
    2894:	21 f4       	brne	.+8      	; 0x289e <vfprintf+0x52>
    2896:	b7 01       	movw	r22, r14
    2898:	90 e0       	ldi	r25, 0x00	; 0
    289a:	f9 d2       	rcall	.+1522   	; 0x2e8e <fputc>
    289c:	e8 cf       	rjmp	.-48     	; 0x286e <vfprintf+0x22>
    289e:	51 2c       	mov	r5, r1
    28a0:	31 2c       	mov	r3, r1
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	20 32       	cpi	r18, 0x20	; 32
    28a6:	a0 f4       	brcc	.+40     	; 0x28d0 <vfprintf+0x84>
    28a8:	8b 32       	cpi	r24, 0x2B	; 43
    28aa:	69 f0       	breq	.+26     	; 0x28c6 <vfprintf+0x7a>
    28ac:	30 f4       	brcc	.+12     	; 0x28ba <vfprintf+0x6e>
    28ae:	80 32       	cpi	r24, 0x20	; 32
    28b0:	59 f0       	breq	.+22     	; 0x28c8 <vfprintf+0x7c>
    28b2:	83 32       	cpi	r24, 0x23	; 35
    28b4:	69 f4       	brne	.+26     	; 0x28d0 <vfprintf+0x84>
    28b6:	20 61       	ori	r18, 0x10	; 16
    28b8:	2c c0       	rjmp	.+88     	; 0x2912 <vfprintf+0xc6>
    28ba:	8d 32       	cpi	r24, 0x2D	; 45
    28bc:	39 f0       	breq	.+14     	; 0x28cc <vfprintf+0x80>
    28be:	80 33       	cpi	r24, 0x30	; 48
    28c0:	39 f4       	brne	.+14     	; 0x28d0 <vfprintf+0x84>
    28c2:	21 60       	ori	r18, 0x01	; 1
    28c4:	26 c0       	rjmp	.+76     	; 0x2912 <vfprintf+0xc6>
    28c6:	22 60       	ori	r18, 0x02	; 2
    28c8:	24 60       	ori	r18, 0x04	; 4
    28ca:	23 c0       	rjmp	.+70     	; 0x2912 <vfprintf+0xc6>
    28cc:	28 60       	ori	r18, 0x08	; 8
    28ce:	21 c0       	rjmp	.+66     	; 0x2912 <vfprintf+0xc6>
    28d0:	27 fd       	sbrc	r18, 7
    28d2:	27 c0       	rjmp	.+78     	; 0x2922 <vfprintf+0xd6>
    28d4:	30 ed       	ldi	r19, 0xD0	; 208
    28d6:	38 0f       	add	r19, r24
    28d8:	3a 30       	cpi	r19, 0x0A	; 10
    28da:	78 f4       	brcc	.+30     	; 0x28fa <vfprintf+0xae>
    28dc:	26 ff       	sbrs	r18, 6
    28de:	06 c0       	rjmp	.+12     	; 0x28ec <vfprintf+0xa0>
    28e0:	fa e0       	ldi	r31, 0x0A	; 10
    28e2:	5f 9e       	mul	r5, r31
    28e4:	30 0d       	add	r19, r0
    28e6:	11 24       	eor	r1, r1
    28e8:	53 2e       	mov	r5, r19
    28ea:	13 c0       	rjmp	.+38     	; 0x2912 <vfprintf+0xc6>
    28ec:	8a e0       	ldi	r24, 0x0A	; 10
    28ee:	38 9e       	mul	r3, r24
    28f0:	30 0d       	add	r19, r0
    28f2:	11 24       	eor	r1, r1
    28f4:	33 2e       	mov	r3, r19
    28f6:	20 62       	ori	r18, 0x20	; 32
    28f8:	0c c0       	rjmp	.+24     	; 0x2912 <vfprintf+0xc6>
    28fa:	8e 32       	cpi	r24, 0x2E	; 46
    28fc:	21 f4       	brne	.+8      	; 0x2906 <vfprintf+0xba>
    28fe:	26 fd       	sbrc	r18, 6
    2900:	5f c1       	rjmp	.+702    	; 0x2bc0 <vfprintf+0x374>
    2902:	20 64       	ori	r18, 0x40	; 64
    2904:	06 c0       	rjmp	.+12     	; 0x2912 <vfprintf+0xc6>
    2906:	8c 36       	cpi	r24, 0x6C	; 108
    2908:	11 f4       	brne	.+4      	; 0x290e <vfprintf+0xc2>
    290a:	20 68       	ori	r18, 0x80	; 128
    290c:	02 c0       	rjmp	.+4      	; 0x2912 <vfprintf+0xc6>
    290e:	88 36       	cpi	r24, 0x68	; 104
    2910:	41 f4       	brne	.+16     	; 0x2922 <vfprintf+0xd6>
    2912:	f6 01       	movw	r30, r12
    2914:	93 fd       	sbrc	r25, 3
    2916:	85 91       	lpm	r24, Z+
    2918:	93 ff       	sbrs	r25, 3
    291a:	81 91       	ld	r24, Z+
    291c:	6f 01       	movw	r12, r30
    291e:	81 11       	cpse	r24, r1
    2920:	c1 cf       	rjmp	.-126    	; 0x28a4 <vfprintf+0x58>
    2922:	98 2f       	mov	r25, r24
    2924:	9f 7d       	andi	r25, 0xDF	; 223
    2926:	95 54       	subi	r25, 0x45	; 69
    2928:	93 30       	cpi	r25, 0x03	; 3
    292a:	28 f4       	brcc	.+10     	; 0x2936 <vfprintf+0xea>
    292c:	0c 5f       	subi	r16, 0xFC	; 252
    292e:	1f 4f       	sbci	r17, 0xFF	; 255
    2930:	ff e3       	ldi	r31, 0x3F	; 63
    2932:	f9 83       	std	Y+1, r31	; 0x01
    2934:	0d c0       	rjmp	.+26     	; 0x2950 <vfprintf+0x104>
    2936:	83 36       	cpi	r24, 0x63	; 99
    2938:	31 f0       	breq	.+12     	; 0x2946 <vfprintf+0xfa>
    293a:	83 37       	cpi	r24, 0x73	; 115
    293c:	71 f0       	breq	.+28     	; 0x295a <vfprintf+0x10e>
    293e:	83 35       	cpi	r24, 0x53	; 83
    2940:	09 f0       	breq	.+2      	; 0x2944 <vfprintf+0xf8>
    2942:	57 c0       	rjmp	.+174    	; 0x29f2 <vfprintf+0x1a6>
    2944:	21 c0       	rjmp	.+66     	; 0x2988 <vfprintf+0x13c>
    2946:	f8 01       	movw	r30, r16
    2948:	80 81       	ld	r24, Z
    294a:	89 83       	std	Y+1, r24	; 0x01
    294c:	0e 5f       	subi	r16, 0xFE	; 254
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	44 24       	eor	r4, r4
    2952:	43 94       	inc	r4
    2954:	51 2c       	mov	r5, r1
    2956:	54 01       	movw	r10, r8
    2958:	14 c0       	rjmp	.+40     	; 0x2982 <vfprintf+0x136>
    295a:	38 01       	movw	r6, r16
    295c:	f2 e0       	ldi	r31, 0x02	; 2
    295e:	6f 0e       	add	r6, r31
    2960:	71 1c       	adc	r7, r1
    2962:	f8 01       	movw	r30, r16
    2964:	a0 80       	ld	r10, Z
    2966:	b1 80       	ldd	r11, Z+1	; 0x01
    2968:	26 ff       	sbrs	r18, 6
    296a:	03 c0       	rjmp	.+6      	; 0x2972 <vfprintf+0x126>
    296c:	65 2d       	mov	r22, r5
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	02 c0       	rjmp	.+4      	; 0x2976 <vfprintf+0x12a>
    2972:	6f ef       	ldi	r22, 0xFF	; 255
    2974:	7f ef       	ldi	r23, 0xFF	; 255
    2976:	c5 01       	movw	r24, r10
    2978:	2c 87       	std	Y+12, r18	; 0x0c
    297a:	7e d2       	rcall	.+1276   	; 0x2e78 <strnlen>
    297c:	2c 01       	movw	r4, r24
    297e:	83 01       	movw	r16, r6
    2980:	2c 85       	ldd	r18, Y+12	; 0x0c
    2982:	2f 77       	andi	r18, 0x7F	; 127
    2984:	22 2e       	mov	r2, r18
    2986:	16 c0       	rjmp	.+44     	; 0x29b4 <vfprintf+0x168>
    2988:	38 01       	movw	r6, r16
    298a:	f2 e0       	ldi	r31, 0x02	; 2
    298c:	6f 0e       	add	r6, r31
    298e:	71 1c       	adc	r7, r1
    2990:	f8 01       	movw	r30, r16
    2992:	a0 80       	ld	r10, Z
    2994:	b1 80       	ldd	r11, Z+1	; 0x01
    2996:	26 ff       	sbrs	r18, 6
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <vfprintf+0x154>
    299a:	65 2d       	mov	r22, r5
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	02 c0       	rjmp	.+4      	; 0x29a4 <vfprintf+0x158>
    29a0:	6f ef       	ldi	r22, 0xFF	; 255
    29a2:	7f ef       	ldi	r23, 0xFF	; 255
    29a4:	c5 01       	movw	r24, r10
    29a6:	2c 87       	std	Y+12, r18	; 0x0c
    29a8:	55 d2       	rcall	.+1194   	; 0x2e54 <strnlen_P>
    29aa:	2c 01       	movw	r4, r24
    29ac:	2c 85       	ldd	r18, Y+12	; 0x0c
    29ae:	20 68       	ori	r18, 0x80	; 128
    29b0:	22 2e       	mov	r2, r18
    29b2:	83 01       	movw	r16, r6
    29b4:	23 fc       	sbrc	r2, 3
    29b6:	19 c0       	rjmp	.+50     	; 0x29ea <vfprintf+0x19e>
    29b8:	83 2d       	mov	r24, r3
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	48 16       	cp	r4, r24
    29be:	59 06       	cpc	r5, r25
    29c0:	a0 f4       	brcc	.+40     	; 0x29ea <vfprintf+0x19e>
    29c2:	b7 01       	movw	r22, r14
    29c4:	80 e2       	ldi	r24, 0x20	; 32
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	62 d2       	rcall	.+1220   	; 0x2e8e <fputc>
    29ca:	3a 94       	dec	r3
    29cc:	f5 cf       	rjmp	.-22     	; 0x29b8 <vfprintf+0x16c>
    29ce:	f5 01       	movw	r30, r10
    29d0:	27 fc       	sbrc	r2, 7
    29d2:	85 91       	lpm	r24, Z+
    29d4:	27 fe       	sbrs	r2, 7
    29d6:	81 91       	ld	r24, Z+
    29d8:	5f 01       	movw	r10, r30
    29da:	b7 01       	movw	r22, r14
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	57 d2       	rcall	.+1198   	; 0x2e8e <fputc>
    29e0:	31 10       	cpse	r3, r1
    29e2:	3a 94       	dec	r3
    29e4:	f1 e0       	ldi	r31, 0x01	; 1
    29e6:	4f 1a       	sub	r4, r31
    29e8:	51 08       	sbc	r5, r1
    29ea:	41 14       	cp	r4, r1
    29ec:	51 04       	cpc	r5, r1
    29ee:	79 f7       	brne	.-34     	; 0x29ce <vfprintf+0x182>
    29f0:	de c0       	rjmp	.+444    	; 0x2bae <vfprintf+0x362>
    29f2:	84 36       	cpi	r24, 0x64	; 100
    29f4:	11 f0       	breq	.+4      	; 0x29fa <vfprintf+0x1ae>
    29f6:	89 36       	cpi	r24, 0x69	; 105
    29f8:	31 f5       	brne	.+76     	; 0x2a46 <vfprintf+0x1fa>
    29fa:	f8 01       	movw	r30, r16
    29fc:	27 ff       	sbrs	r18, 7
    29fe:	07 c0       	rjmp	.+14     	; 0x2a0e <vfprintf+0x1c2>
    2a00:	60 81       	ld	r22, Z
    2a02:	71 81       	ldd	r23, Z+1	; 0x01
    2a04:	82 81       	ldd	r24, Z+2	; 0x02
    2a06:	93 81       	ldd	r25, Z+3	; 0x03
    2a08:	0c 5f       	subi	r16, 0xFC	; 252
    2a0a:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0c:	08 c0       	rjmp	.+16     	; 0x2a1e <vfprintf+0x1d2>
    2a0e:	60 81       	ld	r22, Z
    2a10:	71 81       	ldd	r23, Z+1	; 0x01
    2a12:	88 27       	eor	r24, r24
    2a14:	77 fd       	sbrc	r23, 7
    2a16:	80 95       	com	r24
    2a18:	98 2f       	mov	r25, r24
    2a1a:	0e 5f       	subi	r16, 0xFE	; 254
    2a1c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a1e:	2f 76       	andi	r18, 0x6F	; 111
    2a20:	b2 2e       	mov	r11, r18
    2a22:	97 ff       	sbrs	r25, 7
    2a24:	09 c0       	rjmp	.+18     	; 0x2a38 <vfprintf+0x1ec>
    2a26:	90 95       	com	r25
    2a28:	80 95       	com	r24
    2a2a:	70 95       	com	r23
    2a2c:	61 95       	neg	r22
    2a2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2a30:	8f 4f       	sbci	r24, 0xFF	; 255
    2a32:	9f 4f       	sbci	r25, 0xFF	; 255
    2a34:	20 68       	ori	r18, 0x80	; 128
    2a36:	b2 2e       	mov	r11, r18
    2a38:	2a e0       	ldi	r18, 0x0A	; 10
    2a3a:	30 e0       	ldi	r19, 0x00	; 0
    2a3c:	a4 01       	movw	r20, r8
    2a3e:	59 d2       	rcall	.+1202   	; 0x2ef2 <__ultoa_invert>
    2a40:	a8 2e       	mov	r10, r24
    2a42:	a8 18       	sub	r10, r8
    2a44:	43 c0       	rjmp	.+134    	; 0x2acc <vfprintf+0x280>
    2a46:	85 37       	cpi	r24, 0x75	; 117
    2a48:	29 f4       	brne	.+10     	; 0x2a54 <vfprintf+0x208>
    2a4a:	2f 7e       	andi	r18, 0xEF	; 239
    2a4c:	b2 2e       	mov	r11, r18
    2a4e:	2a e0       	ldi	r18, 0x0A	; 10
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	25 c0       	rjmp	.+74     	; 0x2a9e <vfprintf+0x252>
    2a54:	f2 2f       	mov	r31, r18
    2a56:	f9 7f       	andi	r31, 0xF9	; 249
    2a58:	bf 2e       	mov	r11, r31
    2a5a:	8f 36       	cpi	r24, 0x6F	; 111
    2a5c:	c1 f0       	breq	.+48     	; 0x2a8e <vfprintf+0x242>
    2a5e:	18 f4       	brcc	.+6      	; 0x2a66 <vfprintf+0x21a>
    2a60:	88 35       	cpi	r24, 0x58	; 88
    2a62:	79 f0       	breq	.+30     	; 0x2a82 <vfprintf+0x236>
    2a64:	ad c0       	rjmp	.+346    	; 0x2bc0 <vfprintf+0x374>
    2a66:	80 37       	cpi	r24, 0x70	; 112
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <vfprintf+0x224>
    2a6a:	88 37       	cpi	r24, 0x78	; 120
    2a6c:	21 f0       	breq	.+8      	; 0x2a76 <vfprintf+0x22a>
    2a6e:	a8 c0       	rjmp	.+336    	; 0x2bc0 <vfprintf+0x374>
    2a70:	2f 2f       	mov	r18, r31
    2a72:	20 61       	ori	r18, 0x10	; 16
    2a74:	b2 2e       	mov	r11, r18
    2a76:	b4 fe       	sbrs	r11, 4
    2a78:	0d c0       	rjmp	.+26     	; 0x2a94 <vfprintf+0x248>
    2a7a:	8b 2d       	mov	r24, r11
    2a7c:	84 60       	ori	r24, 0x04	; 4
    2a7e:	b8 2e       	mov	r11, r24
    2a80:	09 c0       	rjmp	.+18     	; 0x2a94 <vfprintf+0x248>
    2a82:	24 ff       	sbrs	r18, 4
    2a84:	0a c0       	rjmp	.+20     	; 0x2a9a <vfprintf+0x24e>
    2a86:	9f 2f       	mov	r25, r31
    2a88:	96 60       	ori	r25, 0x06	; 6
    2a8a:	b9 2e       	mov	r11, r25
    2a8c:	06 c0       	rjmp	.+12     	; 0x2a9a <vfprintf+0x24e>
    2a8e:	28 e0       	ldi	r18, 0x08	; 8
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	05 c0       	rjmp	.+10     	; 0x2a9e <vfprintf+0x252>
    2a94:	20 e1       	ldi	r18, 0x10	; 16
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	02 c0       	rjmp	.+4      	; 0x2a9e <vfprintf+0x252>
    2a9a:	20 e1       	ldi	r18, 0x10	; 16
    2a9c:	32 e0       	ldi	r19, 0x02	; 2
    2a9e:	f8 01       	movw	r30, r16
    2aa0:	b7 fe       	sbrs	r11, 7
    2aa2:	07 c0       	rjmp	.+14     	; 0x2ab2 <vfprintf+0x266>
    2aa4:	60 81       	ld	r22, Z
    2aa6:	71 81       	ldd	r23, Z+1	; 0x01
    2aa8:	82 81       	ldd	r24, Z+2	; 0x02
    2aaa:	93 81       	ldd	r25, Z+3	; 0x03
    2aac:	0c 5f       	subi	r16, 0xFC	; 252
    2aae:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab0:	06 c0       	rjmp	.+12     	; 0x2abe <vfprintf+0x272>
    2ab2:	60 81       	ld	r22, Z
    2ab4:	71 81       	ldd	r23, Z+1	; 0x01
    2ab6:	80 e0       	ldi	r24, 0x00	; 0
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	0e 5f       	subi	r16, 0xFE	; 254
    2abc:	1f 4f       	sbci	r17, 0xFF	; 255
    2abe:	a4 01       	movw	r20, r8
    2ac0:	18 d2       	rcall	.+1072   	; 0x2ef2 <__ultoa_invert>
    2ac2:	a8 2e       	mov	r10, r24
    2ac4:	a8 18       	sub	r10, r8
    2ac6:	fb 2d       	mov	r31, r11
    2ac8:	ff 77       	andi	r31, 0x7F	; 127
    2aca:	bf 2e       	mov	r11, r31
    2acc:	b6 fe       	sbrs	r11, 6
    2ace:	0b c0       	rjmp	.+22     	; 0x2ae6 <vfprintf+0x29a>
    2ad0:	2b 2d       	mov	r18, r11
    2ad2:	2e 7f       	andi	r18, 0xFE	; 254
    2ad4:	a5 14       	cp	r10, r5
    2ad6:	50 f4       	brcc	.+20     	; 0x2aec <vfprintf+0x2a0>
    2ad8:	b4 fe       	sbrs	r11, 4
    2ada:	0a c0       	rjmp	.+20     	; 0x2af0 <vfprintf+0x2a4>
    2adc:	b2 fc       	sbrc	r11, 2
    2ade:	08 c0       	rjmp	.+16     	; 0x2af0 <vfprintf+0x2a4>
    2ae0:	2b 2d       	mov	r18, r11
    2ae2:	2e 7e       	andi	r18, 0xEE	; 238
    2ae4:	05 c0       	rjmp	.+10     	; 0x2af0 <vfprintf+0x2a4>
    2ae6:	7a 2c       	mov	r7, r10
    2ae8:	2b 2d       	mov	r18, r11
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <vfprintf+0x2a6>
    2aec:	7a 2c       	mov	r7, r10
    2aee:	01 c0       	rjmp	.+2      	; 0x2af2 <vfprintf+0x2a6>
    2af0:	75 2c       	mov	r7, r5
    2af2:	24 ff       	sbrs	r18, 4
    2af4:	0d c0       	rjmp	.+26     	; 0x2b10 <vfprintf+0x2c4>
    2af6:	fe 01       	movw	r30, r28
    2af8:	ea 0d       	add	r30, r10
    2afa:	f1 1d       	adc	r31, r1
    2afc:	80 81       	ld	r24, Z
    2afe:	80 33       	cpi	r24, 0x30	; 48
    2b00:	11 f4       	brne	.+4      	; 0x2b06 <vfprintf+0x2ba>
    2b02:	29 7e       	andi	r18, 0xE9	; 233
    2b04:	09 c0       	rjmp	.+18     	; 0x2b18 <vfprintf+0x2cc>
    2b06:	22 ff       	sbrs	r18, 2
    2b08:	06 c0       	rjmp	.+12     	; 0x2b16 <vfprintf+0x2ca>
    2b0a:	73 94       	inc	r7
    2b0c:	73 94       	inc	r7
    2b0e:	04 c0       	rjmp	.+8      	; 0x2b18 <vfprintf+0x2cc>
    2b10:	82 2f       	mov	r24, r18
    2b12:	86 78       	andi	r24, 0x86	; 134
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <vfprintf+0x2cc>
    2b16:	73 94       	inc	r7
    2b18:	23 fd       	sbrc	r18, 3
    2b1a:	12 c0       	rjmp	.+36     	; 0x2b40 <vfprintf+0x2f4>
    2b1c:	20 ff       	sbrs	r18, 0
    2b1e:	06 c0       	rjmp	.+12     	; 0x2b2c <vfprintf+0x2e0>
    2b20:	5a 2c       	mov	r5, r10
    2b22:	73 14       	cp	r7, r3
    2b24:	18 f4       	brcc	.+6      	; 0x2b2c <vfprintf+0x2e0>
    2b26:	53 0c       	add	r5, r3
    2b28:	57 18       	sub	r5, r7
    2b2a:	73 2c       	mov	r7, r3
    2b2c:	73 14       	cp	r7, r3
    2b2e:	60 f4       	brcc	.+24     	; 0x2b48 <vfprintf+0x2fc>
    2b30:	b7 01       	movw	r22, r14
    2b32:	80 e2       	ldi	r24, 0x20	; 32
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	2c 87       	std	Y+12, r18	; 0x0c
    2b38:	aa d1       	rcall	.+852    	; 0x2e8e <fputc>
    2b3a:	73 94       	inc	r7
    2b3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b3e:	f6 cf       	rjmp	.-20     	; 0x2b2c <vfprintf+0x2e0>
    2b40:	73 14       	cp	r7, r3
    2b42:	10 f4       	brcc	.+4      	; 0x2b48 <vfprintf+0x2fc>
    2b44:	37 18       	sub	r3, r7
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <vfprintf+0x2fe>
    2b48:	31 2c       	mov	r3, r1
    2b4a:	24 ff       	sbrs	r18, 4
    2b4c:	11 c0       	rjmp	.+34     	; 0x2b70 <vfprintf+0x324>
    2b4e:	b7 01       	movw	r22, r14
    2b50:	80 e3       	ldi	r24, 0x30	; 48
    2b52:	90 e0       	ldi	r25, 0x00	; 0
    2b54:	2c 87       	std	Y+12, r18	; 0x0c
    2b56:	9b d1       	rcall	.+822    	; 0x2e8e <fputc>
    2b58:	2c 85       	ldd	r18, Y+12	; 0x0c
    2b5a:	22 ff       	sbrs	r18, 2
    2b5c:	16 c0       	rjmp	.+44     	; 0x2b8a <vfprintf+0x33e>
    2b5e:	21 ff       	sbrs	r18, 1
    2b60:	03 c0       	rjmp	.+6      	; 0x2b68 <vfprintf+0x31c>
    2b62:	88 e5       	ldi	r24, 0x58	; 88
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	02 c0       	rjmp	.+4      	; 0x2b6c <vfprintf+0x320>
    2b68:	88 e7       	ldi	r24, 0x78	; 120
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	b7 01       	movw	r22, r14
    2b6e:	0c c0       	rjmp	.+24     	; 0x2b88 <vfprintf+0x33c>
    2b70:	82 2f       	mov	r24, r18
    2b72:	86 78       	andi	r24, 0x86	; 134
    2b74:	51 f0       	breq	.+20     	; 0x2b8a <vfprintf+0x33e>
    2b76:	21 fd       	sbrc	r18, 1
    2b78:	02 c0       	rjmp	.+4      	; 0x2b7e <vfprintf+0x332>
    2b7a:	80 e2       	ldi	r24, 0x20	; 32
    2b7c:	01 c0       	rjmp	.+2      	; 0x2b80 <vfprintf+0x334>
    2b7e:	8b e2       	ldi	r24, 0x2B	; 43
    2b80:	27 fd       	sbrc	r18, 7
    2b82:	8d e2       	ldi	r24, 0x2D	; 45
    2b84:	b7 01       	movw	r22, r14
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	82 d1       	rcall	.+772    	; 0x2e8e <fputc>
    2b8a:	a5 14       	cp	r10, r5
    2b8c:	30 f4       	brcc	.+12     	; 0x2b9a <vfprintf+0x34e>
    2b8e:	b7 01       	movw	r22, r14
    2b90:	80 e3       	ldi	r24, 0x30	; 48
    2b92:	90 e0       	ldi	r25, 0x00	; 0
    2b94:	7c d1       	rcall	.+760    	; 0x2e8e <fputc>
    2b96:	5a 94       	dec	r5
    2b98:	f8 cf       	rjmp	.-16     	; 0x2b8a <vfprintf+0x33e>
    2b9a:	aa 94       	dec	r10
    2b9c:	f4 01       	movw	r30, r8
    2b9e:	ea 0d       	add	r30, r10
    2ba0:	f1 1d       	adc	r31, r1
    2ba2:	80 81       	ld	r24, Z
    2ba4:	b7 01       	movw	r22, r14
    2ba6:	90 e0       	ldi	r25, 0x00	; 0
    2ba8:	72 d1       	rcall	.+740    	; 0x2e8e <fputc>
    2baa:	a1 10       	cpse	r10, r1
    2bac:	f6 cf       	rjmp	.-20     	; 0x2b9a <vfprintf+0x34e>
    2bae:	33 20       	and	r3, r3
    2bb0:	09 f4       	brne	.+2      	; 0x2bb4 <vfprintf+0x368>
    2bb2:	5d ce       	rjmp	.-838    	; 0x286e <vfprintf+0x22>
    2bb4:	b7 01       	movw	r22, r14
    2bb6:	80 e2       	ldi	r24, 0x20	; 32
    2bb8:	90 e0       	ldi	r25, 0x00	; 0
    2bba:	69 d1       	rcall	.+722    	; 0x2e8e <fputc>
    2bbc:	3a 94       	dec	r3
    2bbe:	f7 cf       	rjmp	.-18     	; 0x2bae <vfprintf+0x362>
    2bc0:	f7 01       	movw	r30, r14
    2bc2:	86 81       	ldd	r24, Z+6	; 0x06
    2bc4:	97 81       	ldd	r25, Z+7	; 0x07
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <vfprintf+0x380>
    2bc8:	8f ef       	ldi	r24, 0xFF	; 255
    2bca:	9f ef       	ldi	r25, 0xFF	; 255
    2bcc:	2c 96       	adiw	r28, 0x0c	; 12
    2bce:	e2 e1       	ldi	r30, 0x12	; 18
    2bd0:	1a c2       	rjmp	.+1076   	; 0x3006 <__epilogue_restores__>

00002bd2 <calloc>:
    2bd2:	0f 93       	push	r16
    2bd4:	1f 93       	push	r17
    2bd6:	cf 93       	push	r28
    2bd8:	df 93       	push	r29
    2bda:	86 9f       	mul	r24, r22
    2bdc:	80 01       	movw	r16, r0
    2bde:	87 9f       	mul	r24, r23
    2be0:	10 0d       	add	r17, r0
    2be2:	96 9f       	mul	r25, r22
    2be4:	10 0d       	add	r17, r0
    2be6:	11 24       	eor	r1, r1
    2be8:	c8 01       	movw	r24, r16
    2bea:	0d d0       	rcall	.+26     	; 0x2c06 <malloc>
    2bec:	ec 01       	movw	r28, r24
    2bee:	00 97       	sbiw	r24, 0x00	; 0
    2bf0:	21 f0       	breq	.+8      	; 0x2bfa <calloc+0x28>
    2bf2:	a8 01       	movw	r20, r16
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	38 d1       	rcall	.+624    	; 0x2e6a <memset>
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	08 95       	ret

00002c06 <malloc>:
    2c06:	cf 93       	push	r28
    2c08:	df 93       	push	r29
    2c0a:	82 30       	cpi	r24, 0x02	; 2
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	10 f4       	brcc	.+4      	; 0x2c14 <malloc+0xe>
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	e0 91 85 03 	lds	r30, 0x0385
    2c18:	f0 91 86 03 	lds	r31, 0x0386
    2c1c:	20 e0       	ldi	r18, 0x00	; 0
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	a0 e0       	ldi	r26, 0x00	; 0
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	30 97       	sbiw	r30, 0x00	; 0
    2c26:	39 f1       	breq	.+78     	; 0x2c76 <malloc+0x70>
    2c28:	40 81       	ld	r20, Z
    2c2a:	51 81       	ldd	r21, Z+1	; 0x01
    2c2c:	48 17       	cp	r20, r24
    2c2e:	59 07       	cpc	r21, r25
    2c30:	b8 f0       	brcs	.+46     	; 0x2c60 <malloc+0x5a>
    2c32:	48 17       	cp	r20, r24
    2c34:	59 07       	cpc	r21, r25
    2c36:	71 f4       	brne	.+28     	; 0x2c54 <malloc+0x4e>
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	10 97       	sbiw	r26, 0x00	; 0
    2c3e:	29 f0       	breq	.+10     	; 0x2c4a <malloc+0x44>
    2c40:	13 96       	adiw	r26, 0x03	; 3
    2c42:	9c 93       	st	X, r25
    2c44:	8e 93       	st	-X, r24
    2c46:	12 97       	sbiw	r26, 0x02	; 2
    2c48:	2c c0       	rjmp	.+88     	; 0x2ca2 <malloc+0x9c>
    2c4a:	90 93 86 03 	sts	0x0386, r25
    2c4e:	80 93 85 03 	sts	0x0385, r24
    2c52:	27 c0       	rjmp	.+78     	; 0x2ca2 <malloc+0x9c>
    2c54:	21 15       	cp	r18, r1
    2c56:	31 05       	cpc	r19, r1
    2c58:	31 f0       	breq	.+12     	; 0x2c66 <malloc+0x60>
    2c5a:	42 17       	cp	r20, r18
    2c5c:	53 07       	cpc	r21, r19
    2c5e:	18 f0       	brcs	.+6      	; 0x2c66 <malloc+0x60>
    2c60:	a9 01       	movw	r20, r18
    2c62:	db 01       	movw	r26, r22
    2c64:	01 c0       	rjmp	.+2      	; 0x2c68 <malloc+0x62>
    2c66:	ef 01       	movw	r28, r30
    2c68:	9a 01       	movw	r18, r20
    2c6a:	bd 01       	movw	r22, r26
    2c6c:	df 01       	movw	r26, r30
    2c6e:	02 80       	ldd	r0, Z+2	; 0x02
    2c70:	f3 81       	ldd	r31, Z+3	; 0x03
    2c72:	e0 2d       	mov	r30, r0
    2c74:	d7 cf       	rjmp	.-82     	; 0x2c24 <malloc+0x1e>
    2c76:	21 15       	cp	r18, r1
    2c78:	31 05       	cpc	r19, r1
    2c7a:	f9 f0       	breq	.+62     	; 0x2cba <malloc+0xb4>
    2c7c:	28 1b       	sub	r18, r24
    2c7e:	39 0b       	sbc	r19, r25
    2c80:	24 30       	cpi	r18, 0x04	; 4
    2c82:	31 05       	cpc	r19, r1
    2c84:	80 f4       	brcc	.+32     	; 0x2ca6 <malloc+0xa0>
    2c86:	8a 81       	ldd	r24, Y+2	; 0x02
    2c88:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8a:	61 15       	cp	r22, r1
    2c8c:	71 05       	cpc	r23, r1
    2c8e:	21 f0       	breq	.+8      	; 0x2c98 <malloc+0x92>
    2c90:	fb 01       	movw	r30, r22
    2c92:	93 83       	std	Z+3, r25	; 0x03
    2c94:	82 83       	std	Z+2, r24	; 0x02
    2c96:	04 c0       	rjmp	.+8      	; 0x2ca0 <malloc+0x9a>
    2c98:	90 93 86 03 	sts	0x0386, r25
    2c9c:	80 93 85 03 	sts	0x0385, r24
    2ca0:	fe 01       	movw	r30, r28
    2ca2:	32 96       	adiw	r30, 0x02	; 2
    2ca4:	44 c0       	rjmp	.+136    	; 0x2d2e <malloc+0x128>
    2ca6:	fe 01       	movw	r30, r28
    2ca8:	e2 0f       	add	r30, r18
    2caa:	f3 1f       	adc	r31, r19
    2cac:	81 93       	st	Z+, r24
    2cae:	91 93       	st	Z+, r25
    2cb0:	22 50       	subi	r18, 0x02	; 2
    2cb2:	31 09       	sbc	r19, r1
    2cb4:	39 83       	std	Y+1, r19	; 0x01
    2cb6:	28 83       	st	Y, r18
    2cb8:	3a c0       	rjmp	.+116    	; 0x2d2e <malloc+0x128>
    2cba:	20 91 83 03 	lds	r18, 0x0383
    2cbe:	30 91 84 03 	lds	r19, 0x0384
    2cc2:	23 2b       	or	r18, r19
    2cc4:	41 f4       	brne	.+16     	; 0x2cd6 <malloc+0xd0>
    2cc6:	20 91 06 01 	lds	r18, 0x0106
    2cca:	30 91 07 01 	lds	r19, 0x0107
    2cce:	30 93 84 03 	sts	0x0384, r19
    2cd2:	20 93 83 03 	sts	0x0383, r18
    2cd6:	20 91 04 01 	lds	r18, 0x0104
    2cda:	30 91 05 01 	lds	r19, 0x0105
    2cde:	21 15       	cp	r18, r1
    2ce0:	31 05       	cpc	r19, r1
    2ce2:	41 f4       	brne	.+16     	; 0x2cf4 <malloc+0xee>
    2ce4:	2d b7       	in	r18, 0x3d	; 61
    2ce6:	3e b7       	in	r19, 0x3e	; 62
    2ce8:	40 91 08 01 	lds	r20, 0x0108
    2cec:	50 91 09 01 	lds	r21, 0x0109
    2cf0:	24 1b       	sub	r18, r20
    2cf2:	35 0b       	sbc	r19, r21
    2cf4:	e0 91 83 03 	lds	r30, 0x0383
    2cf8:	f0 91 84 03 	lds	r31, 0x0384
    2cfc:	e2 17       	cp	r30, r18
    2cfe:	f3 07       	cpc	r31, r19
    2d00:	a0 f4       	brcc	.+40     	; 0x2d2a <malloc+0x124>
    2d02:	2e 1b       	sub	r18, r30
    2d04:	3f 0b       	sbc	r19, r31
    2d06:	28 17       	cp	r18, r24
    2d08:	39 07       	cpc	r19, r25
    2d0a:	78 f0       	brcs	.+30     	; 0x2d2a <malloc+0x124>
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	4e 5f       	subi	r20, 0xFE	; 254
    2d10:	5f 4f       	sbci	r21, 0xFF	; 255
    2d12:	24 17       	cp	r18, r20
    2d14:	35 07       	cpc	r19, r21
    2d16:	48 f0       	brcs	.+18     	; 0x2d2a <malloc+0x124>
    2d18:	4e 0f       	add	r20, r30
    2d1a:	5f 1f       	adc	r21, r31
    2d1c:	50 93 84 03 	sts	0x0384, r21
    2d20:	40 93 83 03 	sts	0x0383, r20
    2d24:	81 93       	st	Z+, r24
    2d26:	91 93       	st	Z+, r25
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <malloc+0x128>
    2d2a:	e0 e0       	ldi	r30, 0x00	; 0
    2d2c:	f0 e0       	ldi	r31, 0x00	; 0
    2d2e:	cf 01       	movw	r24, r30
    2d30:	df 91       	pop	r29
    2d32:	cf 91       	pop	r28
    2d34:	08 95       	ret

00002d36 <free>:
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    2d3a:	00 97       	sbiw	r24, 0x00	; 0
    2d3c:	09 f4       	brne	.+2      	; 0x2d40 <free+0xa>
    2d3e:	87 c0       	rjmp	.+270    	; 0x2e4e <free+0x118>
    2d40:	fc 01       	movw	r30, r24
    2d42:	32 97       	sbiw	r30, 0x02	; 2
    2d44:	13 82       	std	Z+3, r1	; 0x03
    2d46:	12 82       	std	Z+2, r1	; 0x02
    2d48:	c0 91 85 03 	lds	r28, 0x0385
    2d4c:	d0 91 86 03 	lds	r29, 0x0386
    2d50:	20 97       	sbiw	r28, 0x00	; 0
    2d52:	81 f4       	brne	.+32     	; 0x2d74 <free+0x3e>
    2d54:	20 81       	ld	r18, Z
    2d56:	31 81       	ldd	r19, Z+1	; 0x01
    2d58:	28 0f       	add	r18, r24
    2d5a:	39 1f       	adc	r19, r25
    2d5c:	80 91 83 03 	lds	r24, 0x0383
    2d60:	90 91 84 03 	lds	r25, 0x0384
    2d64:	82 17       	cp	r24, r18
    2d66:	93 07       	cpc	r25, r19
    2d68:	79 f5       	brne	.+94     	; 0x2dc8 <free+0x92>
    2d6a:	f0 93 84 03 	sts	0x0384, r31
    2d6e:	e0 93 83 03 	sts	0x0383, r30
    2d72:	6d c0       	rjmp	.+218    	; 0x2e4e <free+0x118>
    2d74:	de 01       	movw	r26, r28
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	ae 17       	cp	r26, r30
    2d7c:	bf 07       	cpc	r27, r31
    2d7e:	50 f4       	brcc	.+20     	; 0x2d94 <free+0x5e>
    2d80:	12 96       	adiw	r26, 0x02	; 2
    2d82:	4d 91       	ld	r20, X+
    2d84:	5c 91       	ld	r21, X
    2d86:	13 97       	sbiw	r26, 0x03	; 3
    2d88:	9d 01       	movw	r18, r26
    2d8a:	41 15       	cp	r20, r1
    2d8c:	51 05       	cpc	r21, r1
    2d8e:	09 f1       	breq	.+66     	; 0x2dd2 <free+0x9c>
    2d90:	da 01       	movw	r26, r20
    2d92:	f3 cf       	rjmp	.-26     	; 0x2d7a <free+0x44>
    2d94:	b3 83       	std	Z+3, r27	; 0x03
    2d96:	a2 83       	std	Z+2, r26	; 0x02
    2d98:	40 81       	ld	r20, Z
    2d9a:	51 81       	ldd	r21, Z+1	; 0x01
    2d9c:	84 0f       	add	r24, r20
    2d9e:	95 1f       	adc	r25, r21
    2da0:	8a 17       	cp	r24, r26
    2da2:	9b 07       	cpc	r25, r27
    2da4:	71 f4       	brne	.+28     	; 0x2dc2 <free+0x8c>
    2da6:	8d 91       	ld	r24, X+
    2da8:	9c 91       	ld	r25, X
    2daa:	11 97       	sbiw	r26, 0x01	; 1
    2dac:	84 0f       	add	r24, r20
    2dae:	95 1f       	adc	r25, r21
    2db0:	02 96       	adiw	r24, 0x02	; 2
    2db2:	91 83       	std	Z+1, r25	; 0x01
    2db4:	80 83       	st	Z, r24
    2db6:	12 96       	adiw	r26, 0x02	; 2
    2db8:	8d 91       	ld	r24, X+
    2dba:	9c 91       	ld	r25, X
    2dbc:	13 97       	sbiw	r26, 0x03	; 3
    2dbe:	93 83       	std	Z+3, r25	; 0x03
    2dc0:	82 83       	std	Z+2, r24	; 0x02
    2dc2:	21 15       	cp	r18, r1
    2dc4:	31 05       	cpc	r19, r1
    2dc6:	29 f4       	brne	.+10     	; 0x2dd2 <free+0x9c>
    2dc8:	f0 93 86 03 	sts	0x0386, r31
    2dcc:	e0 93 85 03 	sts	0x0385, r30
    2dd0:	3e c0       	rjmp	.+124    	; 0x2e4e <free+0x118>
    2dd2:	d9 01       	movw	r26, r18
    2dd4:	13 96       	adiw	r26, 0x03	; 3
    2dd6:	fc 93       	st	X, r31
    2dd8:	ee 93       	st	-X, r30
    2dda:	12 97       	sbiw	r26, 0x02	; 2
    2ddc:	4d 91       	ld	r20, X+
    2dde:	5d 91       	ld	r21, X+
    2de0:	a4 0f       	add	r26, r20
    2de2:	b5 1f       	adc	r27, r21
    2de4:	ea 17       	cp	r30, r26
    2de6:	fb 07       	cpc	r31, r27
    2de8:	79 f4       	brne	.+30     	; 0x2e08 <free+0xd2>
    2dea:	80 81       	ld	r24, Z
    2dec:	91 81       	ldd	r25, Z+1	; 0x01
    2dee:	84 0f       	add	r24, r20
    2df0:	95 1f       	adc	r25, r21
    2df2:	02 96       	adiw	r24, 0x02	; 2
    2df4:	d9 01       	movw	r26, r18
    2df6:	11 96       	adiw	r26, 0x01	; 1
    2df8:	9c 93       	st	X, r25
    2dfa:	8e 93       	st	-X, r24
    2dfc:	82 81       	ldd	r24, Z+2	; 0x02
    2dfe:	93 81       	ldd	r25, Z+3	; 0x03
    2e00:	13 96       	adiw	r26, 0x03	; 3
    2e02:	9c 93       	st	X, r25
    2e04:	8e 93       	st	-X, r24
    2e06:	12 97       	sbiw	r26, 0x02	; 2
    2e08:	e0 e0       	ldi	r30, 0x00	; 0
    2e0a:	f0 e0       	ldi	r31, 0x00	; 0
    2e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	19 f0       	breq	.+6      	; 0x2e1a <free+0xe4>
    2e14:	fe 01       	movw	r30, r28
    2e16:	ec 01       	movw	r28, r24
    2e18:	f9 cf       	rjmp	.-14     	; 0x2e0c <free+0xd6>
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	02 96       	adiw	r24, 0x02	; 2
    2e1e:	28 81       	ld	r18, Y
    2e20:	39 81       	ldd	r19, Y+1	; 0x01
    2e22:	82 0f       	add	r24, r18
    2e24:	93 1f       	adc	r25, r19
    2e26:	20 91 83 03 	lds	r18, 0x0383
    2e2a:	30 91 84 03 	lds	r19, 0x0384
    2e2e:	28 17       	cp	r18, r24
    2e30:	39 07       	cpc	r19, r25
    2e32:	69 f4       	brne	.+26     	; 0x2e4e <free+0x118>
    2e34:	30 97       	sbiw	r30, 0x00	; 0
    2e36:	29 f4       	brne	.+10     	; 0x2e42 <free+0x10c>
    2e38:	10 92 86 03 	sts	0x0386, r1
    2e3c:	10 92 85 03 	sts	0x0385, r1
    2e40:	02 c0       	rjmp	.+4      	; 0x2e46 <free+0x110>
    2e42:	13 82       	std	Z+3, r1	; 0x03
    2e44:	12 82       	std	Z+2, r1	; 0x02
    2e46:	d0 93 84 03 	sts	0x0384, r29
    2e4a:	c0 93 83 03 	sts	0x0383, r28
    2e4e:	df 91       	pop	r29
    2e50:	cf 91       	pop	r28
    2e52:	08 95       	ret

00002e54 <strnlen_P>:
    2e54:	fc 01       	movw	r30, r24
    2e56:	05 90       	lpm	r0, Z+
    2e58:	61 50       	subi	r22, 0x01	; 1
    2e5a:	70 40       	sbci	r23, 0x00	; 0
    2e5c:	01 10       	cpse	r0, r1
    2e5e:	d8 f7       	brcc	.-10     	; 0x2e56 <strnlen_P+0x2>
    2e60:	80 95       	com	r24
    2e62:	90 95       	com	r25
    2e64:	8e 0f       	add	r24, r30
    2e66:	9f 1f       	adc	r25, r31
    2e68:	08 95       	ret

00002e6a <memset>:
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	01 c0       	rjmp	.+2      	; 0x2e70 <memset+0x6>
    2e6e:	6d 93       	st	X+, r22
    2e70:	41 50       	subi	r20, 0x01	; 1
    2e72:	50 40       	sbci	r21, 0x00	; 0
    2e74:	e0 f7       	brcc	.-8      	; 0x2e6e <memset+0x4>
    2e76:	08 95       	ret

00002e78 <strnlen>:
    2e78:	fc 01       	movw	r30, r24
    2e7a:	61 50       	subi	r22, 0x01	; 1
    2e7c:	70 40       	sbci	r23, 0x00	; 0
    2e7e:	01 90       	ld	r0, Z+
    2e80:	01 10       	cpse	r0, r1
    2e82:	d8 f7       	brcc	.-10     	; 0x2e7a <strnlen+0x2>
    2e84:	80 95       	com	r24
    2e86:	90 95       	com	r25
    2e88:	8e 0f       	add	r24, r30
    2e8a:	9f 1f       	adc	r25, r31
    2e8c:	08 95       	ret

00002e8e <fputc>:
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
    2e92:	cf 93       	push	r28
    2e94:	df 93       	push	r29
    2e96:	18 2f       	mov	r17, r24
    2e98:	09 2f       	mov	r16, r25
    2e9a:	eb 01       	movw	r28, r22
    2e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e9e:	81 fd       	sbrc	r24, 1
    2ea0:	03 c0       	rjmp	.+6      	; 0x2ea8 <fputc+0x1a>
    2ea2:	8f ef       	ldi	r24, 0xFF	; 255
    2ea4:	9f ef       	ldi	r25, 0xFF	; 255
    2ea6:	20 c0       	rjmp	.+64     	; 0x2ee8 <fputc+0x5a>
    2ea8:	82 ff       	sbrs	r24, 2
    2eaa:	10 c0       	rjmp	.+32     	; 0x2ecc <fputc+0x3e>
    2eac:	4e 81       	ldd	r20, Y+6	; 0x06
    2eae:	5f 81       	ldd	r21, Y+7	; 0x07
    2eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb4:	42 17       	cp	r20, r18
    2eb6:	53 07       	cpc	r21, r19
    2eb8:	7c f4       	brge	.+30     	; 0x2ed8 <fputc+0x4a>
    2eba:	e8 81       	ld	r30, Y
    2ebc:	f9 81       	ldd	r31, Y+1	; 0x01
    2ebe:	9f 01       	movw	r18, r30
    2ec0:	2f 5f       	subi	r18, 0xFF	; 255
    2ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec4:	39 83       	std	Y+1, r19	; 0x01
    2ec6:	28 83       	st	Y, r18
    2ec8:	10 83       	st	Z, r17
    2eca:	06 c0       	rjmp	.+12     	; 0x2ed8 <fputc+0x4a>
    2ecc:	e8 85       	ldd	r30, Y+8	; 0x08
    2ece:	f9 85       	ldd	r31, Y+9	; 0x09
    2ed0:	81 2f       	mov	r24, r17
    2ed2:	09 95       	icall
    2ed4:	89 2b       	or	r24, r25
    2ed6:	29 f7       	brne	.-54     	; 0x2ea2 <fputc+0x14>
    2ed8:	2e 81       	ldd	r18, Y+6	; 0x06
    2eda:	3f 81       	ldd	r19, Y+7	; 0x07
    2edc:	2f 5f       	subi	r18, 0xFF	; 255
    2ede:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee0:	3f 83       	std	Y+7, r19	; 0x07
    2ee2:	2e 83       	std	Y+6, r18	; 0x06
    2ee4:	81 2f       	mov	r24, r17
    2ee6:	90 2f       	mov	r25, r16
    2ee8:	df 91       	pop	r29
    2eea:	cf 91       	pop	r28
    2eec:	1f 91       	pop	r17
    2eee:	0f 91       	pop	r16
    2ef0:	08 95       	ret

00002ef2 <__ultoa_invert>:
    2ef2:	fa 01       	movw	r30, r20
    2ef4:	aa 27       	eor	r26, r26
    2ef6:	28 30       	cpi	r18, 0x08	; 8
    2ef8:	51 f1       	breq	.+84     	; 0x2f4e <__ultoa_invert+0x5c>
    2efa:	20 31       	cpi	r18, 0x10	; 16
    2efc:	81 f1       	breq	.+96     	; 0x2f5e <__ultoa_invert+0x6c>
    2efe:	e8 94       	clt
    2f00:	6f 93       	push	r22
    2f02:	6e 7f       	andi	r22, 0xFE	; 254
    2f04:	6e 5f       	subi	r22, 0xFE	; 254
    2f06:	7f 4f       	sbci	r23, 0xFF	; 255
    2f08:	8f 4f       	sbci	r24, 0xFF	; 255
    2f0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2f0c:	af 4f       	sbci	r26, 0xFF	; 255
    2f0e:	b1 e0       	ldi	r27, 0x01	; 1
    2f10:	3e d0       	rcall	.+124    	; 0x2f8e <__ultoa_invert+0x9c>
    2f12:	b4 e0       	ldi	r27, 0x04	; 4
    2f14:	3c d0       	rcall	.+120    	; 0x2f8e <__ultoa_invert+0x9c>
    2f16:	67 0f       	add	r22, r23
    2f18:	78 1f       	adc	r23, r24
    2f1a:	89 1f       	adc	r24, r25
    2f1c:	9a 1f       	adc	r25, r26
    2f1e:	a1 1d       	adc	r26, r1
    2f20:	68 0f       	add	r22, r24
    2f22:	79 1f       	adc	r23, r25
    2f24:	8a 1f       	adc	r24, r26
    2f26:	91 1d       	adc	r25, r1
    2f28:	a1 1d       	adc	r26, r1
    2f2a:	6a 0f       	add	r22, r26
    2f2c:	71 1d       	adc	r23, r1
    2f2e:	81 1d       	adc	r24, r1
    2f30:	91 1d       	adc	r25, r1
    2f32:	a1 1d       	adc	r26, r1
    2f34:	20 d0       	rcall	.+64     	; 0x2f76 <__ultoa_invert+0x84>
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <__ultoa_invert+0x48>
    2f38:	68 94       	set
    2f3a:	3f 91       	pop	r19
    2f3c:	2a e0       	ldi	r18, 0x0A	; 10
    2f3e:	26 9f       	mul	r18, r22
    2f40:	11 24       	eor	r1, r1
    2f42:	30 19       	sub	r19, r0
    2f44:	30 5d       	subi	r19, 0xD0	; 208
    2f46:	31 93       	st	Z+, r19
    2f48:	de f6       	brtc	.-74     	; 0x2f00 <__ultoa_invert+0xe>
    2f4a:	cf 01       	movw	r24, r30
    2f4c:	08 95       	ret
    2f4e:	46 2f       	mov	r20, r22
    2f50:	47 70       	andi	r20, 0x07	; 7
    2f52:	40 5d       	subi	r20, 0xD0	; 208
    2f54:	41 93       	st	Z+, r20
    2f56:	b3 e0       	ldi	r27, 0x03	; 3
    2f58:	0f d0       	rcall	.+30     	; 0x2f78 <__ultoa_invert+0x86>
    2f5a:	c9 f7       	brne	.-14     	; 0x2f4e <__ultoa_invert+0x5c>
    2f5c:	f6 cf       	rjmp	.-20     	; 0x2f4a <__ultoa_invert+0x58>
    2f5e:	46 2f       	mov	r20, r22
    2f60:	4f 70       	andi	r20, 0x0F	; 15
    2f62:	40 5d       	subi	r20, 0xD0	; 208
    2f64:	4a 33       	cpi	r20, 0x3A	; 58
    2f66:	18 f0       	brcs	.+6      	; 0x2f6e <__ultoa_invert+0x7c>
    2f68:	49 5d       	subi	r20, 0xD9	; 217
    2f6a:	31 fd       	sbrc	r19, 1
    2f6c:	40 52       	subi	r20, 0x20	; 32
    2f6e:	41 93       	st	Z+, r20
    2f70:	02 d0       	rcall	.+4      	; 0x2f76 <__ultoa_invert+0x84>
    2f72:	a9 f7       	brne	.-22     	; 0x2f5e <__ultoa_invert+0x6c>
    2f74:	ea cf       	rjmp	.-44     	; 0x2f4a <__ultoa_invert+0x58>
    2f76:	b4 e0       	ldi	r27, 0x04	; 4
    2f78:	a6 95       	lsr	r26
    2f7a:	97 95       	ror	r25
    2f7c:	87 95       	ror	r24
    2f7e:	77 95       	ror	r23
    2f80:	67 95       	ror	r22
    2f82:	ba 95       	dec	r27
    2f84:	c9 f7       	brne	.-14     	; 0x2f78 <__ultoa_invert+0x86>
    2f86:	00 97       	sbiw	r24, 0x00	; 0
    2f88:	61 05       	cpc	r22, r1
    2f8a:	71 05       	cpc	r23, r1
    2f8c:	08 95       	ret
    2f8e:	9b 01       	movw	r18, r22
    2f90:	ac 01       	movw	r20, r24
    2f92:	0a 2e       	mov	r0, r26
    2f94:	06 94       	lsr	r0
    2f96:	57 95       	ror	r21
    2f98:	47 95       	ror	r20
    2f9a:	37 95       	ror	r19
    2f9c:	27 95       	ror	r18
    2f9e:	ba 95       	dec	r27
    2fa0:	c9 f7       	brne	.-14     	; 0x2f94 <__ultoa_invert+0xa2>
    2fa2:	62 0f       	add	r22, r18
    2fa4:	73 1f       	adc	r23, r19
    2fa6:	84 1f       	adc	r24, r20
    2fa8:	95 1f       	adc	r25, r21
    2faa:	a0 1d       	adc	r26, r0
    2fac:	08 95       	ret

00002fae <__muluhisi3>:
    2fae:	46 d0       	rcall	.+140    	; 0x303c <__umulhisi3>
    2fb0:	a5 9f       	mul	r26, r21
    2fb2:	90 0d       	add	r25, r0
    2fb4:	b4 9f       	mul	r27, r20
    2fb6:	90 0d       	add	r25, r0
    2fb8:	a4 9f       	mul	r26, r20
    2fba:	80 0d       	add	r24, r0
    2fbc:	91 1d       	adc	r25, r1
    2fbe:	11 24       	eor	r1, r1
    2fc0:	08 95       	ret

00002fc2 <__mulshisi3>:
    2fc2:	b7 ff       	sbrs	r27, 7
    2fc4:	f4 cf       	rjmp	.-24     	; 0x2fae <__muluhisi3>

00002fc6 <__mulohisi3>:
    2fc6:	f3 df       	rcall	.-26     	; 0x2fae <__muluhisi3>
    2fc8:	82 1b       	sub	r24, r18
    2fca:	93 0b       	sbc	r25, r19
    2fcc:	08 95       	ret

00002fce <__prologue_saves__>:
    2fce:	2f 92       	push	r2
    2fd0:	3f 92       	push	r3
    2fd2:	4f 92       	push	r4
    2fd4:	5f 92       	push	r5
    2fd6:	6f 92       	push	r6
    2fd8:	7f 92       	push	r7
    2fda:	8f 92       	push	r8
    2fdc:	9f 92       	push	r9
    2fde:	af 92       	push	r10
    2fe0:	bf 92       	push	r11
    2fe2:	cf 92       	push	r12
    2fe4:	df 92       	push	r13
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	0f 93       	push	r16
    2fec:	1f 93       	push	r17
    2fee:	cf 93       	push	r28
    2ff0:	df 93       	push	r29
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	ca 1b       	sub	r28, r26
    2ff8:	db 0b       	sbc	r29, r27
    2ffa:	0f b6       	in	r0, 0x3f	; 63
    2ffc:	f8 94       	cli
    2ffe:	de bf       	out	0x3e, r29	; 62
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	cd bf       	out	0x3d, r28	; 61
    3004:	09 94       	ijmp

00003006 <__epilogue_restores__>:
    3006:	2a 88       	ldd	r2, Y+18	; 0x12
    3008:	39 88       	ldd	r3, Y+17	; 0x11
    300a:	48 88       	ldd	r4, Y+16	; 0x10
    300c:	5f 84       	ldd	r5, Y+15	; 0x0f
    300e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3010:	7d 84       	ldd	r7, Y+13	; 0x0d
    3012:	8c 84       	ldd	r8, Y+12	; 0x0c
    3014:	9b 84       	ldd	r9, Y+11	; 0x0b
    3016:	aa 84       	ldd	r10, Y+10	; 0x0a
    3018:	b9 84       	ldd	r11, Y+9	; 0x09
    301a:	c8 84       	ldd	r12, Y+8	; 0x08
    301c:	df 80       	ldd	r13, Y+7	; 0x07
    301e:	ee 80       	ldd	r14, Y+6	; 0x06
    3020:	fd 80       	ldd	r15, Y+5	; 0x05
    3022:	0c 81       	ldd	r16, Y+4	; 0x04
    3024:	1b 81       	ldd	r17, Y+3	; 0x03
    3026:	aa 81       	ldd	r26, Y+2	; 0x02
    3028:	b9 81       	ldd	r27, Y+1	; 0x01
    302a:	ce 0f       	add	r28, r30
    302c:	d1 1d       	adc	r29, r1
    302e:	0f b6       	in	r0, 0x3f	; 63
    3030:	f8 94       	cli
    3032:	de bf       	out	0x3e, r29	; 62
    3034:	0f be       	out	0x3f, r0	; 63
    3036:	cd bf       	out	0x3d, r28	; 61
    3038:	ed 01       	movw	r28, r26
    303a:	08 95       	ret

0000303c <__umulhisi3>:
    303c:	a2 9f       	mul	r26, r18
    303e:	b0 01       	movw	r22, r0
    3040:	b3 9f       	mul	r27, r19
    3042:	c0 01       	movw	r24, r0
    3044:	a3 9f       	mul	r26, r19
    3046:	70 0d       	add	r23, r0
    3048:	81 1d       	adc	r24, r1
    304a:	11 24       	eor	r1, r1
    304c:	91 1d       	adc	r25, r1
    304e:	b2 9f       	mul	r27, r18
    3050:	70 0d       	add	r23, r0
    3052:	81 1d       	adc	r24, r1
    3054:	11 24       	eor	r1, r1
    3056:	91 1d       	adc	r25, r1
    3058:	08 95       	ret

0000305a <_exit>:
    305a:	f8 94       	cli

0000305c <__stop_program>:
    305c:	ff cf       	rjmp	.-2      	; 0x305c <__stop_program>
