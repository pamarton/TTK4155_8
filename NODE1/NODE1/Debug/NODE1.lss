
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000128  00800100  00003688  0000371c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000104  00800228  00800228  00003844  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003844  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000510  00000000  00000000  000038a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000059a9  00000000  00000000  00003db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000017c2  00000000  00000000  00009759  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002dec  00000000  00000000  0000af1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ef8  00000000  00000000  0000dd08  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000111c  00000000  00000000  0000ec00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000042f3  00000000  00000000  0000fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000558  00000000  00000000  0001400f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	27 c2       	rjmp	.+1102   	; 0x450 <__ctors_end>
       2:	00 00       	nop
       4:	a7 c4       	rjmp	.+2382   	; 0x954 <__vector_1>
       6:	00 00       	nop
       8:	b4 c4       	rjmp	.+2408   	; 0x972 <__vector_2>
       a:	00 00       	nop
       c:	a9 c2       	rjmp	.+1362   	; 0x560 <__vector_3>
       e:	00 00       	nop
      10:	3c c2       	rjmp	.+1144   	; 0x48a <__bad_interrupt>
      12:	00 00       	nop
      14:	3a c2       	rjmp	.+1140   	; 0x48a <__bad_interrupt>
      16:	00 00       	nop
      18:	38 c2       	rjmp	.+1136   	; 0x48a <__bad_interrupt>
      1a:	00 00       	nop
      1c:	36 c2       	rjmp	.+1132   	; 0x48a <__bad_interrupt>
      1e:	00 00       	nop
      20:	34 c2       	rjmp	.+1128   	; 0x48a <__bad_interrupt>
      22:	00 00       	nop
      24:	32 c2       	rjmp	.+1124   	; 0x48a <__bad_interrupt>
      26:	00 00       	nop
      28:	30 c2       	rjmp	.+1120   	; 0x48a <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2e c2       	rjmp	.+1116   	; 0x48a <__bad_interrupt>
      2e:	00 00       	nop
      30:	2c c2       	rjmp	.+1112   	; 0x48a <__bad_interrupt>
      32:	00 00       	nop
      34:	2a c2       	rjmp	.+1108   	; 0x48a <__bad_interrupt>
      36:	00 00       	nop
      38:	28 c2       	rjmp	.+1104   	; 0x48a <__bad_interrupt>
      3a:	00 00       	nop
      3c:	26 c2       	rjmp	.+1100   	; 0x48a <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 d6 12 	jmp	0x25ac	; 0x25ac <__vector_16>
      44:	22 c2       	rjmp	.+1092   	; 0x48a <__bad_interrupt>
      46:	00 00       	nop
      48:	20 c2       	rjmp	.+1088   	; 0x48a <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1e c2       	rjmp	.+1084   	; 0x48a <__bad_interrupt>
      4e:	00 00       	nop
      50:	1c c2       	rjmp	.+1080   	; 0x48a <__bad_interrupt>
      52:	00 00       	nop
      54:	1a c2       	rjmp	.+1076   	; 0x48a <__bad_interrupt>
      56:	00 00       	nop
      58:	18 c2       	rjmp	.+1072   	; 0x48a <__bad_interrupt>
      5a:	00 00       	nop
      5c:	16 c2       	rjmp	.+1068   	; 0x48a <__bad_interrupt>
      5e:	00 00       	nop
      60:	14 c2       	rjmp	.+1064   	; 0x48a <__bad_interrupt>
      62:	00 00       	nop
      64:	12 c2       	rjmp	.+1060   	; 0x48a <__bad_interrupt>
      66:	00 00       	nop
      68:	10 c2       	rjmp	.+1056   	; 0x48a <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0e c2       	rjmp	.+1052   	; 0x48a <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_options>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_debug>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_start>:
      ea:	53 74 61 72 74 00                                   Start.

000000f0 <game_entry_1>:
      f0:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

000000fd <game_entry_0>:
      fd:	53 71 75 61 73 68 2d 73 69 6d 00                    Squash-sim.

00000108 <mainmenu_entry_games>:
     108:	47 61 6d 65 73 00                                   Games.

0000010e <highscore_entry_1>:
     10e:	46 6c 61 70 70 79 20 50 69 78 65 6c 00              Flappy Pixel.

0000011b <highscore_entry_0>:
     11b:	53 71 75 61 73 68 2d 73 69 6d 00                    Squash-sim.

00000126 <mainmenu_entry_highscore>:
     126:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

00000130 <font>:
	...
     138:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     148:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     158:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     168:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     178:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     188:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     198:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     1a8:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     1b8:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     1c8:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     1d8:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1e8:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1f8:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     208:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     218:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     228:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     238:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     248:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     258:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     268:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     278:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     288:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     298:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     2a8:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     2b8:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     2c8:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     2d8:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2e8:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2f8:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     308:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     318:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     328:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     338:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     348:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     358:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     368:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     378:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     388:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     398:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     3a8:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     3b8:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     3c8:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     3d8:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3e8:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3f8:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     408:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     418:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     428:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     438:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     448:	01 01 01 01 01 01 01 ff                             ........

00000450 <__ctors_end>:
     450:	11 24       	eor	r1, r1
     452:	1f be       	out	0x3f, r1	; 63
     454:	cf ef       	ldi	r28, 0xFF	; 255
     456:	d4 e0       	ldi	r29, 0x04	; 4
     458:	de bf       	out	0x3e, r29	; 62
     45a:	cd bf       	out	0x3d, r28	; 61

0000045c <__do_copy_data>:
     45c:	12 e0       	ldi	r17, 0x02	; 2
     45e:	a0 e0       	ldi	r26, 0x00	; 0
     460:	b1 e0       	ldi	r27, 0x01	; 1
     462:	e8 e8       	ldi	r30, 0x88	; 136
     464:	f6 e3       	ldi	r31, 0x36	; 54
     466:	02 c0       	rjmp	.+4      	; 0x46c <__do_copy_data+0x10>
     468:	05 90       	lpm	r0, Z+
     46a:	0d 92       	st	X+, r0
     46c:	a8 32       	cpi	r26, 0x28	; 40
     46e:	b1 07       	cpc	r27, r17
     470:	d9 f7       	brne	.-10     	; 0x468 <__do_copy_data+0xc>

00000472 <__do_clear_bss>:
     472:	23 e0       	ldi	r18, 0x03	; 3
     474:	a8 e2       	ldi	r26, 0x28	; 40
     476:	b2 e0       	ldi	r27, 0x02	; 2
     478:	01 c0       	rjmp	.+2      	; 0x47c <.do_clear_bss_start>

0000047a <.do_clear_bss_loop>:
     47a:	1d 92       	st	X+, r1

0000047c <.do_clear_bss_start>:
     47c:	ac 32       	cpi	r26, 0x2C	; 44
     47e:	b2 07       	cpc	r27, r18
     480:	e1 f7       	brne	.-8      	; 0x47a <.do_clear_bss_loop>
     482:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <main>
     486:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <_exit>

0000048a <__bad_interrupt>:
     48a:	ba cd       	rjmp	.-1164   	; 0x0 <__vectors>

0000048c <CAN_message_receive>:
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}
     48c:	84 e3       	ldi	r24, 0x34	; 52
     48e:	92 e0       	ldi	r25, 0x02	; 2
     490:	08 95       	ret

00000492 <CAN_construct_message>:
     492:	90 93 2a 02 	sts	0x022A, r25
     496:	80 93 29 02 	sts	0x0229, r24
     49a:	60 93 2b 02 	sts	0x022B, r22
     49e:	66 23       	and	r22, r22
     4a0:	41 f0       	breq	.+16     	; 0x4b2 <CAN_construct_message+0x20>
     4a2:	8c e2       	ldi	r24, 0x2C	; 44
     4a4:	92 e0       	ldi	r25, 0x02	; 2
     4a6:	fc 01       	movw	r30, r24
     4a8:	11 92       	st	Z+, r1
     4aa:	2e 2f       	mov	r18, r30
     4ac:	28 1b       	sub	r18, r24
     4ae:	26 17       	cp	r18, r22
     4b0:	d8 f3       	brcs	.-10     	; 0x4a8 <CAN_construct_message+0x16>
     4b2:	08 95       	ret

000004b4 <CAN_print>:
		return 1;
	}
	return 0;
}

void CAN_print(CAN_message_t message){
     4b4:	cf 92       	push	r12
     4b6:	df 92       	push	r13
     4b8:	ef 92       	push	r14
     4ba:	ff 92       	push	r15
     4bc:	0f 93       	push	r16
     4be:	1f 93       	push	r17
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	2b 97       	sbiw	r28, 0x0b	; 11
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	e9 82       	std	Y+1, r14	; 0x01
     4d6:	fa 82       	std	Y+2, r15	; 0x02
     4d8:	c0 2e       	mov	r12, r16
     4da:	0b 83       	std	Y+3, r16	; 0x03
     4dc:	1c 83       	std	Y+4, r17	; 0x04
     4de:	2d 83       	std	Y+5, r18	; 0x05
     4e0:	3e 83       	std	Y+6, r19	; 0x06
     4e2:	4f 83       	std	Y+7, r20	; 0x07
     4e4:	58 87       	std	Y+8, r21	; 0x08
     4e6:	69 87       	std	Y+9, r22	; 0x09
     4e8:	7a 87       	std	Y+10, r23	; 0x0a
     4ea:	8b 87       	std	Y+11, r24	; 0x0b
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
     4ec:	1f 92       	push	r1
     4ee:	0f 93       	push	r16
     4f0:	8a 81       	ldd	r24, Y+2	; 0x02
     4f2:	8f 93       	push	r24
     4f4:	89 81       	ldd	r24, Y+1	; 0x01
     4f6:	8f 93       	push	r24
     4f8:	87 e5       	ldi	r24, 0x57	; 87
     4fa:	91 e0       	ldi	r25, 0x01	; 1
     4fc:	9f 93       	push	r25
     4fe:	8f 93       	push	r24
     500:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
	for(uint8_t i = 0; i < message.length; i++){
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	0f 90       	pop	r0
     50c:	0f 90       	pop	r0
     50e:	0f 90       	pop	r0
     510:	00 23       	and	r16, r16
     512:	b9 f0       	breq	.+46     	; 0x542 <__stack+0x43>
     514:	7e 01       	movw	r14, r28
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	e8 0e       	add	r14, r24
     51a:	f1 1c       	adc	r15, r1
     51c:	d1 2c       	mov	r13, r1
		printf("%i\t",message.data[i]);
     51e:	0b e6       	ldi	r16, 0x6B	; 107
     520:	11 e0       	ldi	r17, 0x01	; 1
     522:	f7 01       	movw	r30, r14
     524:	81 91       	ld	r24, Z+
     526:	7f 01       	movw	r14, r30
     528:	1f 92       	push	r1
     52a:	8f 93       	push	r24
     52c:	1f 93       	push	r17
     52e:	0f 93       	push	r16
     530:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
	return 0;
}

void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
     534:	d3 94       	inc	r13
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	dc 10       	cpse	r13, r12
     540:	f0 cf       	rjmp	.-32     	; 0x522 <__stack+0x23>
		printf("%i\t",message.data[i]);
	}
}
     542:	2b 96       	adiw	r28, 0x0b	; 11
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	cf 90       	pop	r12
     55e:	08 95       	ret

00000560 <__vector_3>:

#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
     560:	1f 92       	push	r1
     562:	0f 92       	push	r0
     564:	0f b6       	in	r0, 0x3f	; 63
     566:	0f 92       	push	r0
     568:	11 24       	eor	r1, r1
     56a:	8f 93       	push	r24
	receive_flag = 1;
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	80 93 28 02 	sts	0x0228, r24
}
     572:	8f 91       	pop	r24
     574:	0f 90       	pop	r0
     576:	0f be       	out	0x3f, r0	; 63
     578:	0f 90       	pop	r0
     57a:	1f 90       	pop	r1
     57c:	18 95       	reti

0000057e <CAN_interrupt_setup>:
}
#endif

	
void CAN_interrupt_setup(void){
	cli();
     57e:	f8 94       	cli
	#if NODE == 1
		//Extended MCU Control Register bit 0 ....turned off?
		EMCUCR &= ~(1<<ISC2);
     580:	86 b7       	in	r24, 0x36	; 54
     582:	8e 7f       	andi	r24, 0xFE	; 254
     584:	86 bf       	out	0x36, r24	; 54
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
     586:	8b b7       	in	r24, 0x3b	; 59
     588:	80 62       	ori	r24, 0x20	; 32
     58a:	8b bf       	out	0x3b, r24	; 59
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);

		//Enable global interrupt.
	#endif
	sei();
     58c:	78 94       	sei
     58e:	08 95       	ret

00000590 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     590:	5f d1       	rcall	.+702    	; 0x850 <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     592:	68 e0       	ldi	r22, 0x08	; 8
     594:	84 e1       	ldi	r24, 0x14	; 20
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	7c df       	rcall	.-264    	; 0x492 <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     59a:	4f ef       	ldi	r20, 0xFF	; 255
     59c:	50 e0       	ldi	r21, 0x00	; 0
     59e:	64 e6       	ldi	r22, 0x64	; 100
     5a0:	80 e6       	ldi	r24, 0x60	; 96
     5a2:	3d d1       	rcall	.+634    	; 0x81e <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     5a4:	4f ef       	ldi	r20, 0xFF	; 255
     5a6:	50 e0       	ldi	r21, 0x00	; 0
     5a8:	64 e6       	ldi	r22, 0x64	; 100
     5aa:	80 e7       	ldi	r24, 0x70	; 112
     5ac:	38 d1       	rcall	.+624    	; 0x81e <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     5ae:	41 e0       	ldi	r20, 0x01	; 1
     5b0:	50 e0       	ldi	r21, 0x00	; 0
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	8b e2       	ldi	r24, 0x2B	; 43
     5b6:	33 d1       	rcall	.+614    	; 0x81e <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
     5b8:	41 e0       	ldi	r20, 0x01	; 1
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	62 e0       	ldi	r22, 0x02	; 2
     5be:	8b e2       	ldi	r24, 0x2B	; 43
     5c0:	2e d1       	rcall	.+604    	; 0x81e <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	60 ee       	ldi	r22, 0xE0	; 224
     5c8:	8f e0       	ldi	r24, 0x0F	; 15
     5ca:	29 d1       	rcall	.+594    	; 0x81e <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     5cc:	d8 cf       	rjmp	.-80     	; 0x57e <CAN_interrupt_setup>
     5ce:	08 95       	ret

000005d0 <CAN_reception_complete>:

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     5d0:	04 c0       	rjmp	.+8      	; 0x5da <CAN_reception_complete+0xa>
		printf("CAN_reception_complete is stuck\n");
     5d2:	8f e6       	ldi	r24, 0x6F	; 111
     5d4:	91 e0       	ldi	r25, 0x01	; 1
     5d6:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <puts>

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     5da:	8c e2       	ldi	r24, 0x2C	; 44
     5dc:	02 d1       	rcall	.+516    	; 0x7e2 <MCP2515_read>
     5de:	80 fd       	sbrc	r24, 0
     5e0:	04 c0       	rjmp	.+8      	; 0x5ea <CAN_reception_complete+0x1a>
     5e2:	8c e2       	ldi	r24, 0x2C	; 44
     5e4:	fe d0       	rcall	.+508    	; 0x7e2 <MCP2515_read>
     5e6:	81 ff       	sbrs	r24, 1
     5e8:	f4 cf       	rjmp	.-24     	; 0x5d2 <CAN_reception_complete+0x2>
		};
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     5ea:	8c e2       	ldi	r24, 0x2C	; 44
     5ec:	fa d0       	rcall	.+500    	; 0x7e2 <MCP2515_read>
     5ee:	80 ff       	sbrs	r24, 0
     5f0:	07 c0       	rjmp	.+14     	; 0x600 <CAN_reception_complete+0x30>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	50 e0       	ldi	r21, 0x00	; 0
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	8c e2       	ldi	r24, 0x2C	; 44
     5fa:	11 d1       	rcall	.+546    	; 0x81e <MCP2515_bit_modify>
		return 0;
     5fc:	80 e0       	ldi	r24, 0x00	; 0
     5fe:	08 95       	ret
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     600:	8c e2       	ldi	r24, 0x2C	; 44
     602:	ef d0       	rcall	.+478    	; 0x7e2 <MCP2515_read>
     604:	81 ff       	sbrs	r24, 1
     606:	07 c0       	rjmp	.+14     	; 0x616 <CAN_reception_complete+0x46>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	62 e0       	ldi	r22, 0x02	; 2
     60e:	8c e2       	ldi	r24, 0x2C	; 44
     610:	06 d1       	rcall	.+524    	; 0x81e <MCP2515_bit_modify>
		return 1;
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	08 95       	ret
	}
	return -1;
     616:	8f ef       	ldi	r24, 0xFF	; 255
}
     618:	08 95       	ret

0000061a <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     61a:	ef 92       	push	r14
     61c:	ff 92       	push	r15
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
	if(receive_flag){
     626:	80 91 28 02 	lds	r24, 0x0228
     62a:	88 23       	and	r24, r24
     62c:	09 f4       	brne	.+2      	; 0x630 <CAN_data_receive+0x16>
     62e:	54 c0       	rjmp	.+168    	; 0x6d8 <CAN_data_receive+0xbe>
		receive_flag = 0;
     630:	10 92 28 02 	sts	0x0228, r1
		uint8_t n = CAN_reception_complete();
     634:	cd df       	rcall	.-102    	; 0x5d0 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     636:	18 2f       	mov	r17, r24
     638:	12 95       	swap	r17
     63a:	10 7f       	andi	r17, 0xF0	; 240
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     63c:	81 e6       	ldi	r24, 0x61	; 97
     63e:	81 0f       	add	r24, r17
     640:	d0 d0       	rcall	.+416    	; 0x7e2 <MCP2515_read>
     642:	ec 01       	movw	r28, r24
     644:	82 e6       	ldi	r24, 0x62	; 98
     646:	81 0f       	add	r24, r17
     648:	cc d0       	rcall	.+408    	; 0x7e2 <MCP2515_read>
uint8_t CAN_data_receive(void) {
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     64a:	82 95       	swap	r24
     64c:	86 95       	lsr	r24
     64e:	87 70       	andi	r24, 0x07	; 7
     650:	dd 27       	eor	r29, r29
     652:	cc 0f       	add	r28, r28
     654:	dd 1f       	adc	r29, r29
     656:	cc 0f       	add	r28, r28
     658:	dd 1f       	adc	r29, r29
     65a:	cc 0f       	add	r28, r28
     65c:	dd 1f       	adc	r29, r29
     65e:	c8 2b       	or	r28, r24
     660:	d0 93 35 02 	sts	0x0235, r29
     664:	c0 93 34 02 	sts	0x0234, r28
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     668:	85 e6       	ldi	r24, 0x65	; 101
     66a:	81 0f       	add	r24, r17
     66c:	ba d0       	rcall	.+372    	; 0x7e2 <MCP2515_read>
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     66e:	8f 70       	andi	r24, 0x0F	; 15
     670:	80 93 36 02 	sts	0x0236, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     674:	88 23       	and	r24, r24
     676:	79 f0       	breq	.+30     	; 0x696 <CAN_data_receive+0x7c>
     678:	10 e0       	ldi	r17, 0x00	; 0
     67a:	c6 e3       	ldi	r28, 0x36	; 54
     67c:	d2 e0       	ldi	r29, 0x02	; 2
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     67e:	86 e6       	ldi	r24, 0x66	; 102
     680:	81 0f       	add	r24, r17
     682:	af d0       	rcall	.+350    	; 0x7e2 <MCP2515_read>
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     684:	e1 2f       	mov	r30, r17
     686:	f0 e0       	ldi	r31, 0x00	; 0
     688:	ec 5c       	subi	r30, 0xCC	; 204
     68a:	fd 4f       	sbci	r31, 0xFD	; 253
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     68c:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     68e:	1f 5f       	subi	r17, 0xFF	; 255
     690:	88 81       	ld	r24, Y
     692:	18 17       	cp	r17, r24
     694:	a0 f3       	brcs	.-24     	; 0x67e <CAN_data_receive+0x64>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		#if 1//UART_ENABLE
			printf("\nRECIVED MESSAGE:");
     696:	8f e8       	ldi	r24, 0x8F	; 143
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	9f 93       	push	r25
     69c:	8f 93       	push	r24
     69e:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
			CAN_print(CAN_receive_buffer);
     6a2:	e0 90 34 02 	lds	r14, 0x0234
     6a6:	f0 90 35 02 	lds	r15, 0x0235
     6aa:	00 91 36 02 	lds	r16, 0x0236
     6ae:	10 91 37 02 	lds	r17, 0x0237
     6b2:	20 91 38 02 	lds	r18, 0x0238
     6b6:	30 91 39 02 	lds	r19, 0x0239
     6ba:	40 91 3a 02 	lds	r20, 0x023A
     6be:	50 91 3b 02 	lds	r21, 0x023B
     6c2:	60 91 3c 02 	lds	r22, 0x023C
     6c6:	70 91 3d 02 	lds	r23, 0x023D
     6ca:	80 91 3e 02 	lds	r24, 0x023E
     6ce:	f2 de       	rcall	.-540    	; 0x4b4 <CAN_print>
		#endif
		return 1;
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <CAN_data_receive+0xc0>
	}
	return 0;
     6d8:	80 e0       	ldi	r24, 0x00	; 0
}
     6da:	df 91       	pop	r29
     6dc:	cf 91       	pop	r28
     6de:	1f 91       	pop	r17
     6e0:	0f 91       	pop	r16
     6e2:	ff 90       	pop	r15
     6e4:	ef 90       	pop	r14
     6e6:	08 95       	ret

000006e8 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     6e8:	cf 93       	push	r28
     6ea:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     6ec:	c4 e0       	ldi	r28, 0x04	; 4
     6ee:	d0 e0       	ldi	r29, 0x00	; 0
     6f0:	02 c0       	rjmp	.+4      	; 0x6f6 <CAN_transmission_complete+0xe>
     6f2:	cc 0f       	add	r28, r28
     6f4:	dd 1f       	adc	r29, r29
     6f6:	8a 95       	dec	r24
     6f8:	e2 f7       	brpl	.-8      	; 0x6f2 <CAN_transmission_complete+0xa>
     6fa:	8c e2       	ldi	r24, 0x2C	; 44
     6fc:	72 d0       	rcall	.+228    	; 0x7e2 <MCP2515_read>
     6fe:	8c 23       	and	r24, r28
     700:	9d 23       	and	r25, r29
     702:	89 2b       	or	r24, r25
     704:	d1 f3       	breq	.-12     	; 0x6fa <CAN_transmission_complete+0x12>
	return 1;
}
     706:	81 e0       	ldi	r24, 0x01	; 1
     708:	df 91       	pop	r29
     70a:	cf 91       	pop	r28
     70c:	08 95       	ret

0000070e <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     70e:	ff 92       	push	r15
     710:	0f 93       	push	r16
     712:	1f 93       	push	r17
     714:	cf 93       	push	r28
     716:	df 93       	push	r29
     718:	ec 01       	movw	r28, r24
     71a:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     71c:	f6 2e       	mov	r15, r22
     71e:	ff 0c       	add	r15, r15
     720:	ff 0c       	add	r15, r15
     722:	ff 0c       	add	r15, r15
     724:	ff 0c       	add	r15, r15
     726:	28 81       	ld	r18, Y
     728:	39 81       	ldd	r19, Y+1	; 0x01
     72a:	b9 01       	movw	r22, r18
     72c:	75 95       	asr	r23
     72e:	67 95       	ror	r22
     730:	75 95       	asr	r23
     732:	67 95       	ror	r22
     734:	75 95       	asr	r23
     736:	67 95       	ror	r22
     738:	81 e3       	ldi	r24, 0x31	; 49
     73a:	8f 0d       	add	r24, r15
     73c:	43 d0       	rcall	.+134    	; 0x7c4 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     73e:	28 81       	ld	r18, Y
     740:	39 81       	ldd	r19, Y+1	; 0x01
     742:	b9 01       	movw	r22, r18
     744:	66 0f       	add	r22, r22
     746:	77 1f       	adc	r23, r23
     748:	62 95       	swap	r22
     74a:	72 95       	swap	r23
     74c:	70 7f       	andi	r23, 0xF0	; 240
     74e:	76 27       	eor	r23, r22
     750:	60 7f       	andi	r22, 0xF0	; 240
     752:	76 27       	eor	r23, r22
     754:	82 e3       	ldi	r24, 0x32	; 50
     756:	8f 0d       	add	r24, r15
     758:	35 d0       	rcall	.+106    	; 0x7c4 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     75a:	6a 81       	ldd	r22, Y+2	; 0x02
     75c:	6f 70       	andi	r22, 0x0F	; 15
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	85 e3       	ldi	r24, 0x35	; 53
     762:	8f 0d       	add	r24, r15
     764:	2f d0       	rcall	.+94     	; 0x7c4 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     766:	8a 81       	ldd	r24, Y+2	; 0x02
     768:	88 23       	and	r24, r24
     76a:	79 f0       	breq	.+30     	; 0x78a <CAN_send_byte+0x7c>
     76c:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     76e:	86 e3       	ldi	r24, 0x36	; 54
     770:	f8 0e       	add	r15, r24
     772:	fe 01       	movw	r30, r28
     774:	e1 0f       	add	r30, r17
     776:	f1 1d       	adc	r31, r1
     778:	63 81       	ldd	r22, Z+3	; 0x03
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	8f 2d       	mov	r24, r15
     77e:	81 0f       	add	r24, r17
     780:	21 d0       	rcall	.+66     	; 0x7c4 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     782:	1f 5f       	subi	r17, 0xFF	; 255
     784:	8a 81       	ldd	r24, Y+2	; 0x02
     786:	18 17       	cp	r17, r24
     788:	a0 f3       	brcs	.-24     	; 0x772 <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     78a:	80 2f       	mov	r24, r16
     78c:	38 d0       	rcall	.+112    	; 0x7fe <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     78e:	80 2f       	mov	r24, r16
     790:	ab df       	rcall	.-170    	; 0x6e8 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     792:	df 91       	pop	r29
     794:	cf 91       	pop	r28
     796:	1f 91       	pop	r17
     798:	0f 91       	pop	r16
     79a:	ff 90       	pop	r15
     79c:	08 95       	ret

0000079e <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     79e:	20 91 2b 02 	lds	r18, 0x022B
     7a2:	22 23       	and	r18, r18
     7a4:	59 f0       	breq	.+22     	; 0x7bc <CAN_message_send+0x1e>
     7a6:	38 2f       	mov	r19, r24
     7a8:	ac e2       	ldi	r26, 0x2C	; 44
     7aa:	b2 e0       	ldi	r27, 0x02	; 2
     7ac:	e8 2f       	mov	r30, r24
     7ae:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     7b0:	81 91       	ld	r24, Z+
     7b2:	8d 93       	st	X+, r24
     7b4:	8e 2f       	mov	r24, r30
     7b6:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     7b8:	82 17       	cp	r24, r18
     7ba:	d0 f3       	brcs	.-12     	; 0x7b0 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     7bc:	89 e2       	ldi	r24, 0x29	; 41
     7be:	92 e0       	ldi	r25, 0x02	; 2
     7c0:	a6 cf       	rjmp	.-180    	; 0x70e <CAN_send_byte>
     7c2:	08 95       	ret

000007c4 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	d8 2f       	mov	r29, r24
     7ca:	c6 2f       	mov	r28, r22
     7cc:	4e d0       	rcall	.+156    	; 0x86a <SPI_select>
     7ce:	82 e0       	ldi	r24, 0x02	; 2
     7d0:	42 d0       	rcall	.+132    	; 0x856 <SPI_send>
     7d2:	8d 2f       	mov	r24, r29
     7d4:	40 d0       	rcall	.+128    	; 0x856 <SPI_send>
     7d6:	8c 2f       	mov	r24, r28
     7d8:	3e d0       	rcall	.+124    	; 0x856 <SPI_send>
     7da:	49 d0       	rcall	.+146    	; 0x86e <SPI_deselect>
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <MCP2515_read>:
     7e2:	cf 93       	push	r28
     7e4:	c8 2f       	mov	r28, r24
     7e6:	41 d0       	rcall	.+130    	; 0x86a <SPI_select>
     7e8:	83 e0       	ldi	r24, 0x03	; 3
     7ea:	35 d0       	rcall	.+106    	; 0x856 <SPI_send>
     7ec:	8c 2f       	mov	r24, r28
     7ee:	33 d0       	rcall	.+102    	; 0x856 <SPI_send>
     7f0:	36 d0       	rcall	.+108    	; 0x85e <SPI_receive>
     7f2:	c8 2f       	mov	r28, r24
     7f4:	3c d0       	rcall	.+120    	; 0x86e <SPI_deselect>
     7f6:	8c 2f       	mov	r24, r28
     7f8:	90 e0       	ldi	r25, 0x00	; 0
     7fa:	cf 91       	pop	r28
     7fc:	08 95       	ret

000007fe <MCP2515_request_to_send>:
     7fe:	cf 93       	push	r28
     800:	c8 2f       	mov	r28, r24
     802:	33 d0       	rcall	.+102    	; 0x86a <SPI_select>
     804:	21 e0       	ldi	r18, 0x01	; 1
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	c9 01       	movw	r24, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <MCP2515_request_to_send+0x12>
     80c:	88 0f       	add	r24, r24
     80e:	99 1f       	adc	r25, r25
     810:	ca 95       	dec	r28
     812:	e2 f7       	brpl	.-8      	; 0x80c <MCP2515_request_to_send+0xe>
     814:	80 68       	ori	r24, 0x80	; 128
     816:	1f d0       	rcall	.+62     	; 0x856 <SPI_send>
     818:	2a d0       	rcall	.+84     	; 0x86e <SPI_deselect>
     81a:	cf 91       	pop	r28
     81c:	08 95       	ret

0000081e <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     81e:	1f 93       	push	r17
     820:	cf 93       	push	r28
     822:	df 93       	push	r29
     824:	18 2f       	mov	r17, r24
     826:	d6 2f       	mov	r29, r22
     828:	c4 2f       	mov	r28, r20
	SPI_select();
     82a:	1f d0       	rcall	.+62     	; 0x86a <SPI_select>
	SPI_send(MCP_BITMOD);
     82c:	85 e0       	ldi	r24, 0x05	; 5
     82e:	13 d0       	rcall	.+38     	; 0x856 <SPI_send>
	SPI_send(adr);
     830:	81 2f       	mov	r24, r17
     832:	11 d0       	rcall	.+34     	; 0x856 <SPI_send>
	SPI_send(mask);
     834:	8d 2f       	mov	r24, r29
     836:	0f d0       	rcall	.+30     	; 0x856 <SPI_send>
	SPI_send(data);
     838:	8c 2f       	mov	r24, r28
     83a:	0d d0       	rcall	.+26     	; 0x856 <SPI_send>
	SPI_deselect();
     83c:	18 d0       	rcall	.+48     	; 0x86e <SPI_deselect>
}
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	1f 91       	pop	r17
     844:	08 95       	ret

00000846 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     846:	11 d0       	rcall	.+34     	; 0x86a <SPI_select>
	SPI_send(MCP_RESET);
     848:	80 ec       	ldi	r24, 0xC0	; 192
     84a:	05 d0       	rcall	.+10     	; 0x856 <SPI_send>
	SPI_deselect();
     84c:	10 c0       	rjmp	.+32     	; 0x86e <SPI_deselect>
     84e:	08 95       	ret

00000850 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     850:	10 d0       	rcall	.+32     	; 0x872 <SPI_initialize>
	MCP2515_reset();
     852:	f9 cf       	rjmp	.-14     	; 0x846 <MCP2515_reset>
     854:	08 95       	ret

00000856 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     856:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     858:	77 9b       	sbis	0x0e, 7	; 14
     85a:	fe cf       	rjmp	.-4      	; 0x858 <SPI_send+0x2>

}
     85c:	08 95       	ret

0000085e <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     85e:	80 e0       	ldi	r24, 0x00	; 0
     860:	fa df       	rcall	.-12     	; 0x856 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     862:	77 9b       	sbis	0x0e, 7	; 14
     864:	fe cf       	rjmp	.-4      	; 0x862 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     866:	8f b1       	in	r24, 0x0f	; 15
}
     868:	08 95       	ret

0000086a <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     86a:	c4 98       	cbi	0x18, 4	; 24
     86c:	08 95       	ret

0000086e <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     86e:	c4 9a       	sbi	0x18, 4	; 24
     870:	08 95       	ret

00000872 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     872:	be 98       	cbi	0x17, 6	; 23
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     874:	87 b3       	in	r24, 0x17	; 23
     876:	80 6b       	ori	r24, 0xB0	; 176
     878:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     87a:	8d b1       	in	r24, 0x0d	; 13
     87c:	80 65       	ori	r24, 0x50	; 80
     87e:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     880:	f6 cf       	rjmp	.-20     	; 0x86e <SPI_deselect>
     882:	08 95       	ret

00000884 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     884:	5d 9b       	sbis	0x0b, 5	; 11
     886:	fe cf       	rjmp	.-4      	; 0x884 <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     888:	8c b9       	out	0x0c, r24	; 12
     88a:	08 95       	ret

0000088c <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     88c:	5f 9b       	sbis	0x0b, 7	; 11
     88e:	fe cf       	rjmp	.-4      	; 0x88c <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     890:	8c b1       	in	r24, 0x0c	; 12
}
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	08 95       	ret

00000896 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     896:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     898:	8f e1       	ldi	r24, 0x1F	; 31
     89a:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     89c:	88 e1       	ldi	r24, 0x18	; 24
     89e:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     8a0:	66 e4       	ldi	r22, 0x46	; 70
     8a2:	74 e0       	ldi	r23, 0x04	; 4
     8a4:	82 e4       	ldi	r24, 0x42	; 66
     8a6:	94 e0       	ldi	r25, 0x04	; 4
     8a8:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <fdevopen>
     8ac:	08 95       	ret

000008ae <readADC>:
     8ae:	82 30       	cpi	r24, 0x02	; 2
     8b0:	91 05       	cpc	r25, r1
     8b2:	71 f0       	breq	.+28     	; 0x8d0 <readADC+0x22>
     8b4:	1c f4       	brge	.+6      	; 0x8bc <readADC+0xe>
     8b6:	01 97       	sbiw	r24, 0x01	; 1
     8b8:	39 f0       	breq	.+14     	; 0x8c8 <readADC+0x1a>
     8ba:	1c c0       	rjmp	.+56     	; 0x8f4 <readADC+0x46>
     8bc:	83 30       	cpi	r24, 0x03	; 3
     8be:	91 05       	cpc	r25, r1
     8c0:	59 f0       	breq	.+22     	; 0x8d8 <readADC+0x2a>
     8c2:	04 97       	sbiw	r24, 0x04	; 4
     8c4:	69 f0       	breq	.+26     	; 0x8e0 <readADC+0x32>
     8c6:	16 c0       	rjmp	.+44     	; 0x8f4 <readADC+0x46>
     8c8:	84 e1       	ldi	r24, 0x14	; 20
     8ca:	80 93 00 14 	sts	0x1400, r24
     8ce:	0b c0       	rjmp	.+22     	; 0x8e6 <readADC+0x38>
     8d0:	85 e1       	ldi	r24, 0x15	; 21
     8d2:	80 93 00 14 	sts	0x1400, r24
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <readADC+0x38>
     8d8:	86 e1       	ldi	r24, 0x16	; 22
     8da:	80 93 00 14 	sts	0x1400, r24
     8de:	03 c0       	rjmp	.+6      	; 0x8e6 <readADC+0x38>
     8e0:	87 e1       	ldi	r24, 0x17	; 23
     8e2:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e6:	82 e5       	ldi	r24, 0x52	; 82
     8e8:	8a 95       	dec	r24
     8ea:	f1 f7       	brne	.-4      	; 0x8e8 <readADC+0x3a>
     8ec:	80 91 00 14 	lds	r24, 0x1400
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	08 95       	ret
     8f4:	80 e0       	ldi	r24, 0x00	; 0
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	08 95       	ret

000008fa <initalize_interrupts>:
 */ 
#include "buttons.h"
uint8_t flag_left_button, flag_right_button;

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     8fa:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     8fc:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     8fe:	85 b7       	in	r24, 0x35	; 53
     900:	81 60       	ori	r24, 0x01	; 1
     902:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     904:	85 b7       	in	r24, 0x35	; 53
     906:	82 60       	ori	r24, 0x02	; 2
     908:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     90a:	85 b7       	in	r24, 0x35	; 53
     90c:	84 60       	ori	r24, 0x04	; 4
     90e:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     910:	85 b7       	in	r24, 0x35	; 53
     912:	88 60       	ori	r24, 0x08	; 8
     914:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     916:	8b b7       	in	r24, 0x3b	; 59
     918:	80 64       	ori	r24, 0x40	; 64
     91a:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     91c:	8b b7       	in	r24, 0x3b	; 59
     91e:	80 68       	ori	r24, 0x80	; 128
     920:	8b bf       	out	0x3b, r24	; 59
	
	BIT_ON(PORTB,PB1);//enabling the pins for the joystick reading
     922:	c1 9a       	sbi	0x18, 1	; 24
	BIT_OFF(DDRB,PB1);
     924:	b9 98       	cbi	0x17, 1	; 23
	
	//BIT_ON(SFIOR,PUD);//internal pull-ups enabled
	
	flag_right_button = 0;
     926:	10 92 73 02 	sts	0x0273, r1
	flag_left_button = 0;
     92a:	10 92 74 02 	sts	0x0274, r1
     92e:	08 95       	ret

00000930 <check_flag_left>:
}

uint8_t check_flag_left(void){
	if (flag_left_button == 1)
     930:	80 91 74 02 	lds	r24, 0x0274
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	19 f4       	brne	.+6      	; 0x93e <check_flag_left+0xe>
	{
		flag_left_button = 0;
     938:	10 92 74 02 	sts	0x0274, r1
		return 1;
     93c:	08 95       	ret
	}
	return 0;
     93e:	80 e0       	ldi	r24, 0x00	; 0
}
     940:	08 95       	ret

00000942 <check_flag_right>:

uint8_t check_flag_right(void){
	if (flag_right_button == 1)
     942:	80 91 73 02 	lds	r24, 0x0273
     946:	81 30       	cpi	r24, 0x01	; 1
     948:	19 f4       	brne	.+6      	; 0x950 <check_flag_right+0xe>
	{
		flag_right_button = 0;
     94a:	10 92 73 02 	sts	0x0273, r1
		return 1;
     94e:	08 95       	ret
	}
	return 0;
     950:	80 e0       	ldi	r24, 0x00	; 0
}
     952:	08 95       	ret

00000954 <__vector_1>:

ISR(INT0_vect){//interrupt button Right
     954:	1f 92       	push	r1
     956:	0f 92       	push	r0
     958:	0f b6       	in	r0, 0x3f	; 63
     95a:	0f 92       	push	r0
     95c:	11 24       	eor	r1, r1
     95e:	8f 93       	push	r24
	#if UART_ENABLE
		printf("R_INT\t");
	#endif
	flag_right_button = 1;
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 73 02 	sts	0x0273, r24
}
     966:	8f 91       	pop	r24
     968:	0f 90       	pop	r0
     96a:	0f be       	out	0x3f, r0	; 63
     96c:	0f 90       	pop	r0
     96e:	1f 90       	pop	r1
     970:	18 95       	reti

00000972 <__vector_2>:

ISR(INT1_vect){//interrupt button Left
     972:	1f 92       	push	r1
     974:	0f 92       	push	r0
     976:	0f b6       	in	r0, 0x3f	; 63
     978:	0f 92       	push	r0
     97a:	11 24       	eor	r1, r1
     97c:	8f 93       	push	r24
	#if UART_ENABLE
	printf("L_INT\t");
	#endif
	flag_left_button = 1;
     97e:	81 e0       	ldi	r24, 0x01	; 1
     980:	80 93 74 02 	sts	0x0274, r24
}
     984:	8f 91       	pop	r24
     986:	0f 90       	pop	r0
     988:	0f be       	out	0x3f, r0	; 63
     98a:	0f 90       	pop	r0
     98c:	1f 90       	pop	r1
     98e:	18 95       	reti

00000990 <joystick_pressed>:

uint8_t joystick_pressed(void){
	return !(PINB & (1<<PINB1));//return 0 if the joystick is not pressed, return 1 if the joystic is pressed
     990:	86 b3       	in	r24, 0x16	; 22
     992:	86 95       	lsr	r24
     994:	81 70       	andi	r24, 0x01	; 1
}
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	89 27       	eor	r24, r25
     99a:	08 95       	ret

0000099c <button_pressed>:

uint8_t button_pressed(void){
	return (joystick_pressed() || check_flag_left() || check_flag_right());
     99c:	f9 df       	rcall	.-14     	; 0x990 <joystick_pressed>
     99e:	81 11       	cpse	r24, r1
     9a0:	0a c0       	rjmp	.+20     	; 0x9b6 <button_pressed+0x1a>
     9a2:	c6 df       	rcall	.-116    	; 0x930 <check_flag_left>
     9a4:	81 11       	cpse	r24, r1
     9a6:	09 c0       	rjmp	.+18     	; 0x9ba <button_pressed+0x1e>
     9a8:	cc df       	rcall	.-104    	; 0x942 <check_flag_right>
     9aa:	91 e0       	ldi	r25, 0x01	; 1
     9ac:	81 11       	cpse	r24, r1
     9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <button_pressed+0x16>
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	89 2f       	mov	r24, r25
     9b4:	08 95       	ret
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	08 95       	ret
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	08 95       	ret

000009be <flappy_restart>:
	
	flappy_restart();
}

void flappy_restart(void){
	sram_goto_line(7);
     9be:	87 e0       	ldi	r24, 0x07	; 7
     9c0:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sram_goto_line>
	sram_write_string("BACK        PLAY");
     9c4:	81 ea       	ldi	r24, 0xA1	; 161
     9c6:	91 e0       	ldi	r25, 0x01	; 1
     9c8:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <sram_write_string>
	sram_update_oled();
     9cc:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
	quit = 0;
     9d0:	10 92 49 02 	sts	0x0249, r1
	printf("MP");
     9d4:	82 eb       	ldi	r24, 0xB2	; 178
     9d6:	91 e0       	ldi	r25, 0x01	; 1
     9d8:	9f 93       	push	r25
     9da:	8f 93       	push	r24
     9dc:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
	while (!(quit | check_flag_right()))
     9e0:	0f 90       	pop	r0
     9e2:	0f 90       	pop	r0
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <flappy_restart+0x2e>
	{
		quit = check_flag_left();
     9e6:	a4 df       	rcall	.-184    	; 0x930 <check_flag_left>
     9e8:	80 93 49 02 	sts	0x0249, r24
	sram_goto_line(7);
	sram_write_string("BACK        PLAY");
	sram_update_oled();
	quit = 0;
	printf("MP");
	while (!(quit | check_flag_right()))
     9ec:	aa df       	rcall	.-172    	; 0x942 <check_flag_right>
     9ee:	90 91 49 02 	lds	r25, 0x0249
     9f2:	89 2b       	or	r24, r25
     9f4:	c1 f3       	breq	.-16     	; 0x9e6 <flappy_restart+0x28>
	{
		quit = check_flag_left();
	}
	
	sram_init();
     9f6:	0c 94 de 10 	jmp	0x21bc	; 0x21bc <sram_init>
     9fa:	08 95       	ret

000009fc <flappy_loading_screen>:
	}
	
	return 0;
}

void flappy_loading_screen(void){
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	cf 93       	push	r28
     a02:	df 93       	push	r29
	sram_init();
     a04:	0e 94 de 10 	call	0x21bc	; 0x21bc <sram_init>
	sram_goto_line(0);
     a08:	80 e0       	ldi	r24, 0x00	; 0
     a0a:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sram_goto_line>
	sram_write_string("  FLAPPY BIRD");
     a0e:	85 eb       	ldi	r24, 0xB5	; 181
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <sram_write_string>
	sram_update_oled();
     a16:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
	
	timer_delay(1000);
     a1a:	88 ee       	ldi	r24, 0xE8	; 232
     a1c:	93 e0       	ldi	r25, 0x03	; 3
     a1e:	0e 94 e5 12 	call	0x25ca	; 0x25ca <timer_delay>
	
	sram_draw_new_line(8*FONT_WIDTH+4,8,13*FONT_WIDTH+4,0);
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	4c e6       	ldi	r20, 0x6C	; 108
     a26:	68 e0       	ldi	r22, 0x08	; 8
     a28:	84 e4       	ldi	r24, 0x44	; 68
     a2a:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sram_draw_new_line>
	sram_draw_new_line(8*FONT_WIDTH+4,0,13*FONT_WIDTH+4,8);
     a2e:	28 e0       	ldi	r18, 0x08	; 8
     a30:	4c e6       	ldi	r20, 0x6C	; 108
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	84 e4       	ldi	r24, 0x44	; 68
     a36:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sram_draw_new_line>
	sram_update_oled();
     a3a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
	
	timer_delay(1000);
     a3e:	88 ee       	ldi	r24, 0xE8	; 232
     a40:	93 e0       	ldi	r25, 0x03	; 3
     a42:	0e 94 e5 12 	call	0x25ca	; 0x25ca <timer_delay>
	
	sram_goto_line(2);
     a46:	82 e0       	ldi	r24, 0x02	; 2
     a48:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*8+4);
     a4c:	84 e4       	ldi	r24, 0x44	; 68
     a4e:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sram_goto_column>
	sram_write_string("PIXEL");
     a52:	83 ec       	ldi	r24, 0xC3	; 195
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	0e 94 39 0f 	call	0x1e72	; 0x1e72 <sram_write_string>
	sram_update_oled();
     a5a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
	
	timer_delay(500);
     a5e:	84 ef       	ldi	r24, 0xF4	; 244
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	0e 94 e5 12 	call	0x25ca	; 0x25ca <timer_delay>
     a66:	d0 e1       	ldi	r29, 0x10	; 16
	}
	
	return 0;
}

void flappy_loading_screen(void){
     a68:	10 e1       	ldi	r17, 0x10	; 16
     a6a:	12 c0       	rjmp	.+36     	; 0xa90 <flappy_loading_screen+0x94>
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
     a6c:	00 e0       	ldi	r16, 0x00	; 0
     a6e:	21 e0       	ldi	r18, 0x01	; 1
     a70:	48 e1       	ldi	r20, 0x18	; 24
     a72:	60 e0       	ldi	r22, 0x00	; 0
     a74:	8c 2f       	mov	r24, r28
     a76:	0e 94 9c 11 	call	0x2338	; 0x2338 <sram_scroll_vertically>
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
	{
		for (uint8_t x = FONT_WIDTH*2; x < FONT_WIDTH*8; x++){
     a7a:	cf 5f       	subi	r28, 0xFF	; 255
     a7c:	c0 34       	cpi	r28, 0x40	; 64
     a7e:	b1 f7       	brne	.-20     	; 0xa6c <flappy_loading_screen+0x70>
			sram_scroll_vertically(x,0,FONT_WIDTH*3,1,0);
		}
		timer_delay(30);
     a80:	8e e1       	ldi	r24, 0x1E	; 30
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	0e 94 e5 12 	call	0x25ca	; 0x25ca <timer_delay>
		sram_update_oled();
     a88:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
     a8c:	d1 50       	subi	r29, 0x01	; 1
	sram_write_string("PIXEL");
	sram_update_oled();
	
	timer_delay(500);
	
	for (uint8_t i = 0; i < FONT_WIDTH*2; i++)
     a8e:	11 f0       	breq	.+4      	; 0xa94 <flappy_loading_screen+0x98>
	}
	
	return 0;
}

void flappy_loading_screen(void){
     a90:	c1 2f       	mov	r28, r17
     a92:	ec cf       	rjmp	.-40     	; 0xa6c <flappy_loading_screen+0x70>
		sram_update_oled();
	}
	
	//sram
	
	flappy_restart();
     a94:	94 df       	rcall	.-216    	; 0x9be <flappy_restart>
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	1f 91       	pop	r17
     a9c:	0f 91       	pop	r16
     a9e:	08 95       	ret

00000aa0 <flappy_render_wall>:
	sram_write_string("SCORE: ");
	sram_write_int(score);
	sram_update_oled();
}

void flappy_render_wall(uint8_t selected_wall, uint8_t pos){
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	d8 2f       	mov	r29, r24
     aa6:	c6 2f       	mov	r28, r22
	if (selected_wall > SCREEN_HEIGHT-1 -WALL_HOLE){
     aa8:	8c 32       	cpi	r24, 0x2C	; 44
     aaa:	38 f0       	brcs	.+14     	; 0xaba <flappy_render_wall+0x1a>
		sram_draw_new_line(pos, 0, pos, SCREEN_HEIGHT-1 -WALL_HOLE);
     aac:	2b e2       	ldi	r18, 0x2B	; 43
     aae:	46 2f       	mov	r20, r22
     ab0:	60 e0       	ldi	r22, 0x00	; 0
     ab2:	8c 2f       	mov	r24, r28
     ab4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sram_draw_new_line>
     ab8:	17 c0       	rjmp	.+46     	; 0xae8 <flappy_render_wall+0x48>
	}else if(selected_wall < WALL_HOLE){ 
     aba:	84 31       	cpi	r24, 0x14	; 20
     abc:	38 f4       	brcc	.+14     	; 0xacc <flappy_render_wall+0x2c>
		sram_draw_new_line(pos, WALL_HOLE, pos , SCREEN_HEIGHT-1);
     abe:	2f e3       	ldi	r18, 0x3F	; 63
     ac0:	46 2f       	mov	r20, r22
     ac2:	64 e1       	ldi	r22, 0x14	; 20
     ac4:	8c 2f       	mov	r24, r28
     ac6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sram_draw_new_line>
     aca:	0e c0       	rjmp	.+28     	; 0xae8 <flappy_render_wall+0x48>
	}else{
		sram_draw_new_line(pos, 0, pos, selected_wall-WALL_HOLE/2);
     acc:	26 ef       	ldi	r18, 0xF6	; 246
     ace:	28 0f       	add	r18, r24
     ad0:	46 2f       	mov	r20, r22
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	8c 2f       	mov	r24, r28
     ad6:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sram_draw_new_line>
		sram_draw_new_line(pos, selected_wall + WALL_HOLE/2, pos , SCREEN_HEIGHT-1);
     ada:	6a e0       	ldi	r22, 0x0A	; 10
     adc:	6d 0f       	add	r22, r29
     ade:	2f e3       	ldi	r18, 0x3F	; 63
     ae0:	4c 2f       	mov	r20, r28
     ae2:	8c 2f       	mov	r24, r28
     ae4:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <sram_draw_new_line>
	}
}
     ae8:	df 91       	pop	r29
     aea:	cf 91       	pop	r28
     aec:	08 95       	ret

00000aee <flappy_controll>:

void flappy_controll(void){
     aee:	cf 92       	push	r12
     af0:	df 92       	push	r13
     af2:	ef 92       	push	r14
     af4:	ff 92       	push	r15
	velocity += acceleration;
     af6:	20 91 0c 01 	lds	r18, 0x010C
     afa:	30 91 0d 01 	lds	r19, 0x010D
     afe:	40 91 0e 01 	lds	r20, 0x010E
     b02:	50 91 0f 01 	lds	r21, 0x010F
     b06:	60 91 43 02 	lds	r22, 0x0243
     b0a:	70 91 44 02 	lds	r23, 0x0244
     b0e:	80 91 45 02 	lds	r24, 0x0245
     b12:	90 91 46 02 	lds	r25, 0x0246
     b16:	0e 94 9a 13 	call	0x2734	; 0x2734 <__addsf3>
     b1a:	60 93 43 02 	sts	0x0243, r22
     b1e:	70 93 44 02 	sts	0x0244, r23
     b22:	80 93 45 02 	sts	0x0245, r24
     b26:	90 93 46 02 	sts	0x0246, r25
	if(check_flag_left() | check_flag_right()){
     b2a:	02 df       	rcall	.-508    	; 0x930 <check_flag_left>
     b2c:	f8 2e       	mov	r15, r24
     b2e:	09 df       	rcall	.-494    	; 0x942 <check_flag_right>
     b30:	8f 29       	or	r24, r15
     b32:	b1 f0       	breq	.+44     	; 0xb60 <flappy_controll+0x72>
		velocity -= 1;
     b34:	20 e0       	ldi	r18, 0x00	; 0
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	40 e8       	ldi	r20, 0x80	; 128
     b3a:	5f e3       	ldi	r21, 0x3F	; 63
     b3c:	60 91 43 02 	lds	r22, 0x0243
     b40:	70 91 44 02 	lds	r23, 0x0244
     b44:	80 91 45 02 	lds	r24, 0x0245
     b48:	90 91 46 02 	lds	r25, 0x0246
     b4c:	0e 94 99 13 	call	0x2732	; 0x2732 <__subsf3>
     b50:	60 93 43 02 	sts	0x0243, r22
     b54:	70 93 44 02 	sts	0x0244, r23
     b58:	80 93 45 02 	sts	0x0245, r24
     b5c:	90 93 46 02 	sts	0x0246, r25
	}
	if(velocity > 1){
     b60:	c0 90 43 02 	lds	r12, 0x0243
     b64:	d0 90 44 02 	lds	r13, 0x0244
     b68:	e0 90 45 02 	lds	r14, 0x0245
     b6c:	f0 90 46 02 	lds	r15, 0x0246
     b70:	20 e0       	ldi	r18, 0x00	; 0
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e8       	ldi	r20, 0x80	; 128
     b76:	5f e3       	ldi	r21, 0x3F	; 63
     b78:	c7 01       	movw	r24, r14
     b7a:	b6 01       	movw	r22, r12
     b7c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__gesf2>
     b80:	18 16       	cp	r1, r24
     b82:	6c f4       	brge	.+26     	; 0xb9e <flappy_controll+0xb0>
		velocity = 1;
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	a0 e8       	ldi	r26, 0x80	; 128
     b8a:	bf e3       	ldi	r27, 0x3F	; 63
     b8c:	80 93 43 02 	sts	0x0243, r24
     b90:	90 93 44 02 	sts	0x0244, r25
     b94:	a0 93 45 02 	sts	0x0245, r26
     b98:	b0 93 46 02 	sts	0x0246, r27
     b9c:	16 c0       	rjmp	.+44     	; 0xbca <flappy_controll+0xdc>
	}else if(velocity < -1){
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e8       	ldi	r20, 0x80	; 128
     ba4:	5f eb       	ldi	r21, 0xBF	; 191
     ba6:	c7 01       	movw	r24, r14
     ba8:	b6 01       	movw	r22, r12
     baa:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
     bae:	88 23       	and	r24, r24
     bb0:	64 f4       	brge	.+24     	; 0xbca <flappy_controll+0xdc>
		velocity = -1;
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e8       	ldi	r26, 0x80	; 128
     bb8:	bf eb       	ldi	r27, 0xBF	; 191
     bba:	80 93 43 02 	sts	0x0243, r24
     bbe:	90 93 44 02 	sts	0x0244, r25
     bc2:	a0 93 45 02 	sts	0x0245, r26
     bc6:	b0 93 46 02 	sts	0x0246, r27
	}
	player_height_accurate += velocity;
     bca:	20 91 43 02 	lds	r18, 0x0243
     bce:	30 91 44 02 	lds	r19, 0x0244
     bd2:	40 91 45 02 	lds	r20, 0x0245
     bd6:	50 91 46 02 	lds	r21, 0x0246
     bda:	60 91 3f 02 	lds	r22, 0x023F
     bde:	70 91 40 02 	lds	r23, 0x0240
     be2:	80 91 41 02 	lds	r24, 0x0241
     be6:	90 91 42 02 	lds	r25, 0x0242
     bea:	0e 94 9a 13 	call	0x2734	; 0x2734 <__addsf3>
     bee:	6b 01       	movw	r12, r22
     bf0:	7c 01       	movw	r14, r24
     bf2:	60 93 3f 02 	sts	0x023F, r22
     bf6:	70 93 40 02 	sts	0x0240, r23
     bfa:	80 93 41 02 	sts	0x0241, r24
     bfe:	90 93 42 02 	sts	0x0242, r25
	if(player_height_accurate >= SCREEN_HEIGHT-1){
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	4c e7       	ldi	r20, 0x7C	; 124
     c08:	52 e4       	ldi	r21, 0x42	; 66
     c0a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <__gesf2>
     c0e:	88 23       	and	r24, r24
     c10:	24 f0       	brlt	.+8      	; 0xc1a <flappy_controll+0x12c>
		game_over = 1;
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	80 93 47 02 	sts	0x0247, r24
     c18:	0c c0       	rjmp	.+24     	; 0xc32 <flappy_controll+0x144>
	}else if(player_height_accurate<= 0){
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	a9 01       	movw	r20, r18
     c20:	c7 01       	movw	r24, r14
     c22:	b6 01       	movw	r22, r12
     c24:	0e 94 fe 13 	call	0x27fc	; 0x27fc <__cmpsf2>
     c28:	18 16       	cp	r1, r24
     c2a:	1c f0       	brlt	.+6      	; 0xc32 <flappy_controll+0x144>
		game_over = 1;
     c2c:	81 e0       	ldi	r24, 0x01	; 1
     c2e:	80 93 47 02 	sts	0x0247, r24
	}
	player_height = (int)player_height_accurate;
     c32:	c7 01       	movw	r24, r14
     c34:	b6 01       	movw	r22, r12
     c36:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fixsfsi>
     c3a:	60 93 48 02 	sts	0x0248, r22
}
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	08 95       	ret

00000c48 <flappy_pixel_collision>:

uint8_t flappy_pixel_collision(void){
	if (ext_ram_adress[PLAYER_POS+((player_height-player_height%8)/8)*128] & (1<<player_height%8)){
     c48:	80 91 48 02 	lds	r24, 0x0248
     c4c:	e8 2f       	mov	r30, r24
     c4e:	f0 e0       	ldi	r31, 0x00	; 0
     c50:	f5 95       	asr	r31
     c52:	e7 95       	ror	r30
     c54:	f5 95       	asr	r31
     c56:	e7 95       	ror	r30
     c58:	f5 95       	asr	r31
     c5a:	e7 95       	ror	r30
     c5c:	f6 95       	lsr	r31
     c5e:	fe 2f       	mov	r31, r30
     c60:	ee 27       	eor	r30, r30
     c62:	f7 95       	ror	r31
     c64:	e7 95       	ror	r30
     c66:	3a 96       	adiw	r30, 0x0a	; 10
     c68:	20 91 10 01 	lds	r18, 0x0110
     c6c:	30 91 11 01 	lds	r19, 0x0111
     c70:	e2 0f       	add	r30, r18
     c72:	f3 1f       	adc	r31, r19
     c74:	20 81       	ld	r18, Z
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	87 70       	andi	r24, 0x07	; 7
     c7a:	a9 01       	movw	r20, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <flappy_pixel_collision+0x3a>
     c7e:	55 95       	asr	r21
     c80:	47 95       	ror	r20
     c82:	8a 95       	dec	r24
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <flappy_pixel_collision+0x36>
     c86:	ca 01       	movw	r24, r20
		return 1;
	}
	return 0;
}
     c88:	81 70       	andi	r24, 0x01	; 1
     c8a:	08 95       	ret

00000c8c <flappy_scroll_wall>:

void flappy_scroll_wall(void){
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
     c94:	e0 91 10 01 	lds	r30, 0x0110
     c98:	f0 91 11 01 	lds	r31, 0x0111
     c9c:	e8 0f       	add	r30, r24
     c9e:	f9 1f       	adc	r31, r25
     ca0:	10 82       	st	Z, r1
     ca2:	80 58       	subi	r24, 0x80	; 128
     ca4:	9f 4f       	sbci	r25, 0xFF	; 255
	return 0;
}

void flappy_scroll_wall(void){
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
     ca6:	81 15       	cp	r24, r1
     ca8:	24 e0       	ldi	r18, 0x04	; 4
     caa:	92 07       	cpc	r25, r18
     cac:	99 f7       	brne	.-26     	; 0xc94 <flappy_scroll_wall+0x8>
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     cb2:	b8 e0       	ldi	r27, 0x08	; 8
     cb4:	19 c0       	rjmp	.+50     	; 0xce8 <flappy_scroll_wall+0x5c>
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
     cb6:	20 91 10 01 	lds	r18, 0x0110
     cba:	30 91 11 01 	lds	r19, 0x0111
     cbe:	f9 01       	movw	r30, r18
     cc0:	e8 0f       	add	r30, r24
     cc2:	f9 1f       	adc	r31, r25
     cc4:	ac 01       	movw	r20, r24
     cc6:	4f 5f       	subi	r20, 0xFF	; 255
     cc8:	5f 4f       	sbci	r21, 0xFF	; 255
     cca:	e9 01       	movw	r28, r18
     ccc:	c4 0f       	add	r28, r20
     cce:	d5 1f       	adc	r29, r21
     cd0:	28 81       	ld	r18, Y
     cd2:	20 83       	st	Z, r18
     cd4:	a1 50       	subi	r26, 0x01	; 1
     cd6:	80 58       	subi	r24, 0x80	; 128
     cd8:	9f 4f       	sbci	r25, 0xFF	; 255
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
		for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     cda:	a1 11       	cpse	r26, r1
     cdc:	ec cf       	rjmp	.-40     	; 0xcb6 <flappy_scroll_wall+0x2a>
     cde:	6f 5f       	subi	r22, 0xFF	; 255
     ce0:	7f 4f       	sbci	r23, 0xFF	; 255
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     ce2:	6f 37       	cpi	r22, 0x7F	; 127
     ce4:	71 05       	cpc	r23, r1
     ce6:	19 f0       	breq	.+6      	; 0xcee <flappy_scroll_wall+0x62>
     ce8:	cb 01       	movw	r24, r22
		return 1;
	}
	return 0;
}

void flappy_scroll_wall(void){
     cea:	ab 2f       	mov	r26, r27
     cec:	e4 cf       	rjmp	.-56     	; 0xcb6 <flappy_scroll_wall+0x2a>
	
	for (uint8_t line = 0; line < 8; line++)//remove the left-most collumn (it must dissapear)
	{
		ext_ram_adress[line*SCREEN_WIDTH] = 0;
	}
	for(uint8_t wall_pos = 0; wall_pos < SCREEN_WIDTH-1; wall_pos++){
     cee:	8f e7       	ldi	r24, 0x7F	; 127
     cf0:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
     cf2:	e0 91 10 01 	lds	r30, 0x0110
     cf6:	f0 91 11 01 	lds	r31, 0x0111
     cfa:	e8 0f       	add	r30, r24
     cfc:	f9 1f       	adc	r31, r25
     cfe:	10 82       	st	Z, r1
     d00:	80 58       	subi	r24, 0x80	; 128
     d02:	9f 4f       	sbci	r25, 0xFF	; 255
		{
			ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)] = ext_ram_adress[wall_pos + (line*SCREEN_WIDTH)+1];
		}
	}
	
	for (uint8_t line = 0; line < 8; line++)//move the collumn to the left
     d04:	8f 37       	cpi	r24, 0x7F	; 127
     d06:	24 e0       	ldi	r18, 0x04	; 4
     d08:	92 07       	cpc	r25, r18
     d0a:	99 f7       	brne	.-26     	; 0xcf2 <flappy_scroll_wall+0x66>
	{
		ext_ram_adress[(SCREEN_WIDTH - 1 + line*SCREEN_WIDTH)] = 0x00;
	}
	if(new_wall >= difficulity){//if a wall has been removed a new one must be made
     d0c:	80 91 0a 01 	lds	r24, 0x010A
     d10:	90 91 0b 01 	lds	r25, 0x010B
     d14:	89 17       	cp	r24, r25
     d16:	a8 f0       	brcs	.+42     	; 0xd42 <flappy_scroll_wall+0xb6>
		flappy_render_wall(rand()%(SCREEN_HEIGHT-WALL_HOLE/2)+WALL_HOLE/4,127);
     d18:	0e 94 99 16 	call	0x2d32	; 0x2d32 <rand>
     d1c:	66 e3       	ldi	r22, 0x36	; 54
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divmodhi4>
     d24:	6f e7       	ldi	r22, 0x7F	; 127
     d26:	8b 5f       	subi	r24, 0xFB	; 251
     d28:	bb de       	rcall	.-650    	; 0xaa0 <flappy_render_wall>
		new_wall = 0;
     d2a:	10 92 0a 01 	sts	0x010A, r1
		score++;
     d2e:	80 91 4a 02 	lds	r24, 0x024A
     d32:	90 91 4b 02 	lds	r25, 0x024B
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	90 93 4b 02 	sts	0x024B, r25
     d3c:	80 93 4a 02 	sts	0x024A, r24
     d40:	03 c0       	rjmp	.+6      	; 0xd48 <flappy_scroll_wall+0xbc>
	}else{
		new_wall++;
     d42:	8f 5f       	subi	r24, 0xFF	; 255
     d44:	80 93 0a 01 	sts	0x010A, r24
	}
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	08 95       	ret

00000d4e <flappy_game>:
	}
	
	sram_init();
}

void flappy_game(void){
     d4e:	8f 92       	push	r8
     d50:	9f 92       	push	r9
     d52:	af 92       	push	r10
     d54:	bf 92       	push	r11
     d56:	cf 92       	push	r12
     d58:	df 92       	push	r13
     d5a:	ef 92       	push	r14
     d5c:	ff 92       	push	r15
     d5e:	0f 93       	push	r16
     d60:	1f 93       	push	r17
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
	sram_update_oled();
     d66:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
	printf("M1");
     d6a:	89 ec       	ldi	r24, 0xC9	; 201
     d6c:	91 e0       	ldi	r25, 0x01	; 1
     d6e:	9f 93       	push	r25
     d70:	8f 93       	push	r24
     d72:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
	while (!flappy_pixel_collision() && !game_over)
     d76:	0f 90       	pop	r0
     d78:	0f 90       	pop	r0
		if(check_flag_left()){//PAUSE
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f2 eb       	ldi	r31, 0xB2	; 178
     d7e:	cf 2e       	mov	r12, r31
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	df 2e       	mov	r13, r31
     d84:	f0 2d       	mov	r31, r0
			for (uint8_t i = 5; i > 1; i--)
     d86:	0f 2e       	mov	r0, r31
     d88:	f5 e0       	ldi	r31, 0x05	; 5
     d8a:	8f 2e       	mov	r8, r31
     d8c:	f0 2d       	mov	r31, r0
			{
				sram_goto_line(i);
				sram_goto_column(0);
				if(tempscore != 0){
					sram_write_char('0'+(tempscore%10));
     d8e:	0a e0       	ldi	r16, 0x0A	; 10
     d90:	10 e0       	ldi	r17, 0x00	; 0
			sram_write_char('P');
			sram_update_oled();
			while(!(check_flag_left() | check_flag_right())){
				
			}
			printf("MR");
     d92:	0f 2e       	mov	r0, r31
     d94:	fc ec       	ldi	r31, 0xCC	; 204
     d96:	ef 2e       	mov	r14, r31
     d98:	f1 e0       	ldi	r31, 0x01	; 1
     d9a:	ff 2e       	mov	r15, r31
     d9c:	f0 2d       	mov	r31, r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     d9e:	55 c0       	rjmp	.+170    	; 0xe4a <flappy_game+0xfc>
	
	{
		if(timer_check_flag()){
     da0:	0e 94 ca 12 	call	0x2594	; 0x2594 <timer_check_flag>
     da4:	88 23       	and	r24, r24
     da6:	49 f0       	breq	.+18     	; 0xdba <flappy_game+0x6c>
			flappy_controll();
     da8:	a2 de       	rcall	.-700    	; 0xaee <flappy_controll>
			sram_pixel(PLAYER_POS,player_height);
     daa:	60 91 48 02 	lds	r22, 0x0248
     dae:	8a e0       	ldi	r24, 0x0A	; 10
     db0:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <sram_pixel>
			flappy_scroll_wall();
     db4:	6b df       	rcall	.-298    	; 0xc8c <flappy_scroll_wall>
			sram_update_oled();
     db6:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
		}
		if(check_flag_left()){//PAUSE
     dba:	ba dd       	rcall	.-1164   	; 0x930 <check_flag_left>
     dbc:	88 23       	and	r24, r24
     dbe:	09 f4       	brne	.+2      	; 0xdc2 <flappy_game+0x74>
     dc0:	44 c0       	rjmp	.+136    	; 0xe4a <flappy_game+0xfc>
			sram_goto_line(0);
     dc2:	80 e0       	ldi	r24, 0x00	; 0
     dc4:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sram_goto_line>
			sram_goto_column(0);
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sram_goto_column>
			sram_write_char('S');
     dce:	83 e5       	ldi	r24, 0x53	; 83
     dd0:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <sram_write_char>
			int tempscore = score;
     dd4:	c0 91 4a 02 	lds	r28, 0x024A
     dd8:	d0 91 4b 02 	lds	r29, 0x024B
			printf("MP");
     ddc:	df 92       	push	r13
     dde:	cf 92       	push	r12
     de0:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
			for (uint8_t i = 5; i > 1; i--)
     de8:	98 2c       	mov	r9, r8
			{
				sram_goto_line(i);
     dea:	89 2d       	mov	r24, r9
     dec:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sram_goto_line>
				sram_goto_column(0);
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sram_goto_column>
				if(tempscore != 0){
     df6:	20 97       	sbiw	r28, 0x00	; 0
     df8:	79 f0       	breq	.+30     	; 0xe18 <flappy_game+0xca>
					sram_write_char('0'+(tempscore%10));
     dfa:	ce 01       	movw	r24, r28
     dfc:	b8 01       	movw	r22, r16
     dfe:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divmodhi4>
     e02:	5c 01       	movw	r10, r24
     e04:	80 e3       	ldi	r24, 0x30	; 48
     e06:	8a 0d       	add	r24, r10
     e08:	eb d7       	rcall	.+4054   	; 0x1de0 <sram_write_char>
					tempscore -= tempscore%10;
     e0a:	ce 01       	movw	r24, r28
     e0c:	8a 19       	sub	r24, r10
     e0e:	9b 09       	sbc	r25, r11
					tempscore /= 10;
     e10:	b8 01       	movw	r22, r16
     e12:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divmodhi4>
     e16:	eb 01       	movw	r28, r22
			sram_goto_line(0);
			sram_goto_column(0);
			sram_write_char('S');
			int tempscore = score;
			printf("MP");
			for (uint8_t i = 5; i > 1; i--)
     e18:	9a 94       	dec	r9
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	98 12       	cpse	r9, r24
     e1e:	e5 cf       	rjmp	.-54     	; 0xdea <flappy_game+0x9c>
					tempscore -= tempscore%10;
					tempscore /= 10;
				}
				
			}
			sram_goto_line(7);
     e20:	87 e0       	ldi	r24, 0x07	; 7
     e22:	0e 94 2b 0f 	call	0x1e56	; 0x1e56 <sram_goto_line>
			sram_goto_column(0);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 32 0f 	call	0x1e64	; 0x1e64 <sram_goto_column>
			sram_write_char('P');
     e2c:	80 e5       	ldi	r24, 0x50	; 80
     e2e:	d8 d7       	rcall	.+4016   	; 0x1de0 <sram_write_char>
			sram_update_oled();
     e30:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
			while(!(check_flag_left() | check_flag_right())){
     e34:	7d dd       	rcall	.-1286   	; 0x930 <check_flag_left>
     e36:	c8 2f       	mov	r28, r24
     e38:	84 dd       	rcall	.-1272   	; 0x942 <check_flag_right>
     e3a:	8c 2b       	or	r24, r28
     e3c:	d9 f3       	breq	.-10     	; 0xe34 <flappy_game+0xe6>
				
			}
			printf("MR");
     e3e:	ff 92       	push	r15
     e40:	ef 92       	push	r14
     e42:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
     e46:	0f 90       	pop	r0
     e48:	0f 90       	pop	r0
}

void flappy_game(void){
	sram_update_oled();
	printf("M1");
	while (!flappy_pixel_collision() && !game_over)
     e4a:	fe de       	rcall	.-516    	; 0xc48 <flappy_pixel_collision>
     e4c:	81 11       	cpse	r24, r1
     e4e:	05 c0       	rjmp	.+10     	; 0xe5a <flappy_game+0x10c>
     e50:	80 91 47 02 	lds	r24, 0x0247
     e54:	88 23       	and	r24, r24
     e56:	09 f4       	brne	.+2      	; 0xe5a <flappy_game+0x10c>
     e58:	a3 cf       	rjmp	.-186    	; 0xda0 <flappy_game+0x52>
				
			}
			printf("MR");
		}
	}
	printf("M2");
     e5a:	8f ec       	ldi	r24, 0xCF	; 207
     e5c:	91 e0       	ldi	r25, 0x01	; 1
     e5e:	9f 93       	push	r25
     e60:	8f 93       	push	r24
     e62:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <printf>
	timer_delay(1000);
     e66:	88 ee       	ldi	r24, 0xE8	; 232
     e68:	93 e0       	ldi	r25, 0x03	; 3
     e6a:	0e 94 e5 12 	call	0x25ca	; 0x25ca <timer_delay>
	sram_init();
     e6e:	0e 94 de 10 	call	0x21bc	; 0x21bc <sram_init>
	sram_goto_line(0);
     e72:	80 e0       	ldi	r24, 0x00	; 0
     e74:	f0 d7       	rcall	.+4064   	; 0x1e56 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*3);
     e76:	88 e1       	ldi	r24, 0x18	; 24
     e78:	f5 d7       	rcall	.+4074   	; 0x1e64 <sram_goto_column>
	sram_write_string("GAME  OVER");
     e7a:	82 ed       	ldi	r24, 0xD2	; 210
     e7c:	91 e0       	ldi	r25, 0x01	; 1
     e7e:	f9 d7       	rcall	.+4082   	; 0x1e72 <sram_write_string>
	sram_goto_line(1);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	e9 d7       	rcall	.+4050   	; 0x1e56 <sram_goto_line>
	sram_goto_column(FONT_WIDTH*4);
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	ee d7       	rcall	.+4060   	; 0x1e64 <sram_goto_column>
	sram_write_string("SCORE: ");
     e88:	8d ed       	ldi	r24, 0xDD	; 221
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	f2 d7       	rcall	.+4068   	; 0x1e72 <sram_write_string>
	sram_write_int(score);
     e8e:	80 91 4a 02 	lds	r24, 0x024A
     e92:	90 91 4b 02 	lds	r25, 0x024B
     e96:	0e 94 4d 0f 	call	0x1e9a	; 0x1e9a <sram_write_int>
	sram_update_oled();
     e9a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
     e9e:	0f 90       	pop	r0
     ea0:	0f 90       	pop	r0
}
     ea2:	df 91       	pop	r29
     ea4:	cf 91       	pop	r28
     ea6:	1f 91       	pop	r17
     ea8:	0f 91       	pop	r16
     eaa:	ff 90       	pop	r15
     eac:	ef 90       	pop	r14
     eae:	df 90       	pop	r13
     eb0:	cf 90       	pop	r12
     eb2:	bf 90       	pop	r11
     eb4:	af 90       	pop	r10
     eb6:	9f 90       	pop	r9
     eb8:	8f 90       	pop	r8
     eba:	08 95       	ret

00000ebc <flappy_main>:
double acceleration = 0.03;
double player_height_accurate = 0;
uint8_t difficulity = 100;
uint8_t new_wall = 100;

int flappy_main(void){
     ebc:	cf 92       	push	r12
     ebe:	df 92       	push	r13
     ec0:	ef 92       	push	r14
     ec2:	ff 92       	push	r15
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
     ec8:	82 b7       	in	r24, 0x32	; 50
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <srand>
	quit = 0;
     ed0:	10 92 49 02 	sts	0x0249, r1
	flappy_loading_screen();
     ed4:	93 dd       	rcall	.-1242   	; 0x9fc <flappy_loading_screen>

	while (quit != 1){
     ed6:	80 91 49 02 	lds	r24, 0x0249
     eda:	81 30       	cpi	r24, 0x01	; 1
     edc:	79 f1       	breq	.+94     	; 0xf3c <flappy_main+0x80>
		game_over = 0;
		
		player_height_accurate = 1;
     ede:	0f 2e       	mov	r0, r31
     ee0:	c1 2c       	mov	r12, r1
     ee2:	d1 2c       	mov	r13, r1
     ee4:	f0 e8       	ldi	r31, 0x80	; 128
     ee6:	ef 2e       	mov	r14, r31
     ee8:	ff e3       	ldi	r31, 0x3F	; 63
     eea:	ff 2e       	mov	r15, r31
     eec:	f0 2d       	mov	r31, r0
		player_height = 1;
     eee:	d1 e0       	ldi	r29, 0x01	; 1
		velocity = 0;
		difficulity = 100;
     ef0:	c4 e6       	ldi	r28, 0x64	; 100
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
		game_over = 0;
     ef2:	10 92 47 02 	sts	0x0247, r1
		
		player_height_accurate = 1;
     ef6:	c0 92 3f 02 	sts	0x023F, r12
     efa:	d0 92 40 02 	sts	0x0240, r13
     efe:	e0 92 41 02 	sts	0x0241, r14
     f02:	f0 92 42 02 	sts	0x0242, r15
		player_height = 1;
     f06:	d0 93 48 02 	sts	0x0248, r29
		velocity = 0;
     f0a:	10 92 43 02 	sts	0x0243, r1
     f0e:	10 92 44 02 	sts	0x0244, r1
     f12:	10 92 45 02 	sts	0x0245, r1
     f16:	10 92 46 02 	sts	0x0246, r1
		difficulity = 100;
     f1a:	c0 93 0b 01 	sts	0x010B, r28
		score = 0;
     f1e:	10 92 4b 02 	sts	0x024B, r1
     f22:	10 92 4a 02 	sts	0x024A, r1
		flappy_game();
     f26:	13 df       	rcall	.-474    	; 0xd4e <flappy_game>
		sram_goto_line(6);
     f28:	86 e0       	ldi	r24, 0x06	; 6
     f2a:	95 d7       	rcall	.+3882   	; 0x1e56 <sram_goto_line>
		sram_write_string("   TRY AGAIN?");
     f2c:	85 ee       	ldi	r24, 0xE5	; 229
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	a0 d7       	rcall	.+3904   	; 0x1e72 <sram_write_string>
		flappy_restart();
     f32:	45 dd       	rcall	.-1398   	; 0x9be <flappy_restart>
int flappy_main(void){
	srand(TCNT0); //using the clock counter for this, to give an approximated random value each time
	quit = 0;
	flappy_loading_screen();

	while (quit != 1){
     f34:	80 91 49 02 	lds	r24, 0x0249
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	d9 f6       	brne	.-74     	; 0xef2 <flappy_main+0x36>
		sram_write_string("   TRY AGAIN?");
		flappy_restart();
	}
	
	return 0;
}
     f3c:	80 e0       	ldi	r24, 0x00	; 0
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	ff 90       	pop	r15
     f46:	ef 90       	pop	r14
     f48:	df 90       	pop	r13
     f4a:	cf 90       	pop	r12
     f4c:	08 95       	ret

00000f4e <update_score>:
	while (!button_pressed())//wait for button to be pressed to show the score
	{
		
	}
}
void update_score(void){
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
	if(CAN_data_receive()){
     f52:	63 db       	rcall	.-2362   	; 0x61a <CAN_data_receive>
     f54:	88 23       	and	r24, r24
     f56:	31 f1       	breq	.+76     	; 0xfa4 <update_score+0x56>
		if(CAN_message_receive()->id == CAN_GAME_SCORE_ID){
     f58:	99 da       	rcall	.-2766   	; 0x48c <CAN_message_receive>
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	91 81       	ldd	r25, Z+1	; 0x01
     f60:	4e 97       	sbiw	r24, 0x1e	; 30
     f62:	01 f5       	brne	.+64     	; 0xfa4 <update_score+0x56>
			sram_init();
     f64:	0e 94 de 10 	call	0x21bc	; 0x21bc <sram_init>
			sram_goto_line(0);
     f68:	80 e0       	ldi	r24, 0x00	; 0
     f6a:	75 d7       	rcall	.+3818   	; 0x1e56 <sram_goto_line>
			sram_write_string("SQUASH SIMULATOR");
     f6c:	83 ef       	ldi	r24, 0xF3	; 243
     f6e:	91 e0       	ldi	r25, 0x01	; 1
     f70:	80 d7       	rcall	.+3840   	; 0x1e72 <sram_write_string>
			sram_update_oled();
     f72:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
			sram_goto_line(3);
     f76:	83 e0       	ldi	r24, 0x03	; 3
     f78:	6e d7       	rcall	.+3804   	; 0x1e56 <sram_goto_line>
			sram_write_string("SCORE: ");
     f7a:	8d ed       	ldi	r24, 0xDD	; 221
     f7c:	91 e0       	ldi	r25, 0x01	; 1
     f7e:	79 d7       	rcall	.+3826   	; 0x1e72 <sram_write_string>
			sram_write_int(((CAN_message_receive()->data[0]<<8)|CAN_message_receive()->data[1]));
     f80:	85 da       	rcall	.-2806   	; 0x48c <CAN_message_receive>
     f82:	fc 01       	movw	r30, r24
     f84:	c3 81       	ldd	r28, Z+3	; 0x03
     f86:	d0 e0       	ldi	r29, 0x00	; 0
     f88:	dc 2f       	mov	r29, r28
     f8a:	cc 27       	eor	r28, r28
     f8c:	7f da       	rcall	.-2818   	; 0x48c <CAN_message_receive>
     f8e:	fc 01       	movw	r30, r24
     f90:	84 81       	ldd	r24, Z+4	; 0x04
     f92:	9e 01       	movw	r18, r28
     f94:	28 2b       	or	r18, r24
     f96:	c9 01       	movw	r24, r18
     f98:	80 d7       	rcall	.+3840   	; 0x1e9a <sram_write_int>
			sram_update_oled();
     f9a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
			Game_Over = 1;
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	80 93 4f 02 	sts	0x024F, r24
		}
	}
}
     fa4:	df 91       	pop	r29
     fa6:	cf 91       	pop	r28
     fa8:	08 95       	ret

00000faa <game_send_data>:


void game_send_data(void){//sends a can message if there is an update
	send_can = 0;
     faa:	10 92 12 01 	sts	0x0112, r1
	temp_reading = read_control_input('X');
     fae:	88 e5       	ldi	r24, 0x58	; 88
     fb0:	eb d1       	rcall	.+982    	; 0x1388 <read_control_input>
     fb2:	90 93 7e 02 	sts	0x027E, r25
     fb6:	80 93 7d 02 	sts	0x027D, r24
	if (temp_reading != X_reading)
     fba:	20 91 53 02 	lds	r18, 0x0253
     fbe:	33 27       	eor	r19, r19
     fc0:	27 fd       	sbrc	r18, 7
     fc2:	30 95       	com	r19
     fc4:	82 17       	cp	r24, r18
     fc6:	93 07       	cpc	r25, r19
     fc8:	39 f0       	breq	.+14     	; 0xfd8 <game_send_data+0x2e>
	{
		X_reading = temp_reading;
     fca:	80 93 53 02 	sts	0x0253, r24
		data_to_send[0] = temp_reading;
     fce:	80 93 75 02 	sts	0x0275, r24
		send_can = 1;
     fd2:	81 e0       	ldi	r24, 0x01	; 1
     fd4:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = read_control_input('Y');
     fd8:	89 e5       	ldi	r24, 0x59	; 89
     fda:	d6 d1       	rcall	.+940    	; 0x1388 <read_control_input>
     fdc:	90 93 7e 02 	sts	0x027E, r25
     fe0:	80 93 7d 02 	sts	0x027D, r24
	if (temp_reading != Y_reading)
     fe4:	20 91 52 02 	lds	r18, 0x0252
     fe8:	33 27       	eor	r19, r19
     fea:	27 fd       	sbrc	r18, 7
     fec:	30 95       	com	r19
     fee:	82 17       	cp	r24, r18
     ff0:	93 07       	cpc	r25, r19
     ff2:	39 f0       	breq	.+14     	; 0x1002 <game_send_data+0x58>
	{
		Y_reading = temp_reading;
     ff4:	80 93 52 02 	sts	0x0252, r24
		data_to_send[1] = temp_reading;		
     ff8:	80 93 76 02 	sts	0x0276, r24
		send_can = 1;
     ffc:	81 e0       	ldi	r24, 0x01	; 1
     ffe:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = joystick_pressed();
    1002:	c6 dc       	rcall	.-1652   	; 0x990 <joystick_pressed>
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	30 93 7e 02 	sts	0x027E, r19
    100c:	20 93 7d 02 	sts	0x027D, r18
	if (temp_reading != J_btn)
    1010:	40 91 4e 02 	lds	r20, 0x024E
    1014:	50 e0       	ldi	r21, 0x00	; 0
    1016:	24 17       	cp	r18, r20
    1018:	35 07       	cpc	r19, r21
    101a:	39 f0       	breq	.+14     	; 0x102a <game_send_data+0x80>
	{
		J_btn = temp_reading;
    101c:	80 93 4e 02 	sts	0x024E, r24
		data_to_send[2] = temp_reading;
    1020:	80 93 77 02 	sts	0x0277, r24
		send_can = 1;
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = check_flag_left();
    102a:	82 dc       	rcall	.-1788   	; 0x930 <check_flag_left>
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	30 93 7e 02 	sts	0x027E, r19
    1034:	20 93 7d 02 	sts	0x027D, r18
	if (temp_reading != L_btn)
    1038:	40 91 4d 02 	lds	r20, 0x024D
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	24 17       	cp	r18, r20
    1040:	35 07       	cpc	r19, r21
    1042:	39 f0       	breq	.+14     	; 0x1052 <game_send_data+0xa8>
	{
		L_btn = temp_reading;
    1044:	80 93 4d 02 	sts	0x024D, r24
		data_to_send[3] = temp_reading;
    1048:	80 93 78 02 	sts	0x0278, r24
		send_can = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = check_flag_right();
    1052:	77 dc       	rcall	.-1810   	; 0x942 <check_flag_right>
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	30 93 7e 02 	sts	0x027E, r19
    105c:	20 93 7d 02 	sts	0x027D, r18
	if (temp_reading != R_btn)
    1060:	40 91 4c 02 	lds	r20, 0x024C
    1064:	50 e0       	ldi	r21, 0x00	; 0
    1066:	24 17       	cp	r18, r20
    1068:	35 07       	cpc	r19, r21
    106a:	39 f0       	breq	.+14     	; 0x107a <game_send_data+0xd0>
	{
		R_btn = temp_reading;
    106c:	80 93 4c 02 	sts	0x024C, r24
		data_to_send[4] = temp_reading;
    1070:	80 93 79 02 	sts	0x0279, r24
		send_can = 1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	80 93 12 01 	sts	0x0112, r24
	}
	temp_reading = read_control_input('L');
    107a:	8c e4       	ldi	r24, 0x4C	; 76
    107c:	85 d1       	rcall	.+778    	; 0x1388 <read_control_input>
    107e:	90 93 7e 02 	sts	0x027E, r25
    1082:	80 93 7d 02 	sts	0x027D, r24
	if (temp_reading != L_slider)
    1086:	20 91 51 02 	lds	r18, 0x0251
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	82 17       	cp	r24, r18
    108e:	93 07       	cpc	r25, r19
    1090:	41 f0       	breq	.+16     	; 0x10a2 <game_send_data+0xf8>
	{
		L_slider = temp_reading;
    1092:	80 93 51 02 	sts	0x0251, r24
		data_to_send[5] = temp_reading;
    1096:	80 93 7a 02 	sts	0x027A, r24
		send_can = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	80 93 12 01 	sts	0x0112, r24
    10a0:	04 c0       	rjmp	.+8      	; 0x10aa <game_send_data+0x100>
	}
	if (send_can)
    10a2:	80 91 12 01 	lds	r24, 0x0112
    10a6:	88 23       	and	r24, r24
    10a8:	41 f0       	breq	.+16     	; 0x10ba <game_send_data+0x110>
	{
		CAN_construct_message(CAN_GAME_CONTROL_ID,8);
    10aa:	68 e0       	ldi	r22, 0x08	; 8
    10ac:	84 e1       	ldi	r24, 0x14	; 20
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	f0 d9       	rcall	.-3104   	; 0x492 <CAN_construct_message>
		CAN_message_send(data_to_send,0);
    10b2:	60 e0       	ldi	r22, 0x00	; 0
    10b4:	85 e7       	ldi	r24, 0x75	; 117
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	72 cb       	rjmp	.-2332   	; 0x79e <CAN_message_send>
    10ba:	08 95       	ret

000010bc <game_init>:




void game_init(uint8_t controller_type, uint16_t sensitivity){
	data_to_send[0] = (uint8_t)JOYSTICK_MIN;
    10bc:	9c e9       	ldi	r25, 0x9C	; 156
    10be:	90 93 75 02 	sts	0x0275, r25
	data_to_send[1] = (uint8_t)JOYSTICK_MAX;
    10c2:	94 e6       	ldi	r25, 0x64	; 100
    10c4:	90 93 76 02 	sts	0x0276, r25
	data_to_send[2] = (uint8_t)(sensitivity >> 8);
    10c8:	70 93 77 02 	sts	0x0277, r23
	data_to_send[3] = (uint8_t)sensitivity;
    10cc:	60 93 78 02 	sts	0x0278, r22
	data_to_send[4] = (uint8_t)SLIDER_MIN;
    10d0:	10 92 79 02 	sts	0x0279, r1
	data_to_send[5] = (uint8_t)SLIDER_MAX;
    10d4:	90 93 7a 02 	sts	0x027A, r25
	data_to_send[6] = (uint8_t)controller_type;
    10d8:	80 93 7b 02 	sts	0x027B, r24
	
	
	X_reading = read_control_input('X');
    10dc:	88 e5       	ldi	r24, 0x58	; 88
    10de:	54 d1       	rcall	.+680    	; 0x1388 <read_control_input>
    10e0:	80 93 53 02 	sts	0x0253, r24
	Y_reading = read_control_input('Y');
    10e4:	89 e5       	ldi	r24, 0x59	; 89
    10e6:	50 d1       	rcall	.+672    	; 0x1388 <read_control_input>
    10e8:	80 93 52 02 	sts	0x0252, r24
	L_slider = read_control_input('L');
    10ec:	8c e4       	ldi	r24, 0x4C	; 76
    10ee:	4c d1       	rcall	.+664    	; 0x1388 <read_control_input>
    10f0:	80 93 51 02 	sts	0x0251, r24
	R_slider = read_control_input('R');
    10f4:	82 e5       	ldi	r24, 0x52	; 82
    10f6:	48 d1       	rcall	.+656    	; 0x1388 <read_control_input>
    10f8:	80 93 50 02 	sts	0x0250, r24
	
	J_btn = joystick_pressed();
    10fc:	49 dc       	rcall	.-1902   	; 0x990 <joystick_pressed>
    10fe:	80 93 4e 02 	sts	0x024E, r24
	L_btn = check_flag_left();
    1102:	16 dc       	rcall	.-2004   	; 0x930 <check_flag_left>
    1104:	80 93 4d 02 	sts	0x024D, r24
	R_btn = check_flag_right();
    1108:	1c dc       	rcall	.-1992   	; 0x942 <check_flag_right>
    110a:	80 93 4c 02 	sts	0x024C, r24
		
	Game_Over = 0;
    110e:	10 92 4f 02 	sts	0x024F, r1
	
	CAN_construct_message(CAN_GAME_PARAMS_ID,CAN_GAME_PARAMS_LENGTH);
    1112:	67 e0       	ldi	r22, 0x07	; 7
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	bc d9       	rcall	.-3208   	; 0x492 <CAN_construct_message>
	CAN_message_send(data_to_send,0);
    111a:	60 e0       	ldi	r22, 0x00	; 0
    111c:	85 e7       	ldi	r24, 0x75	; 117
    111e:	92 e0       	ldi	r25, 0x02	; 2
    1120:	3e cb       	rjmp	.-2436   	; 0x79e <CAN_message_send>
    1122:	08 95       	ret

00001124 <play_game>:
uint8_t send_can = 1;

int16_t temp_reading;

void play_game(void){
	game_init(CONTROLLER_TYPE_JOYSTICK_ONLY,10);
    1124:	6a e0       	ldi	r22, 0x0A	; 10
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	80 e0       	ldi	r24, 0x00	; 0
    112a:	c8 df       	rcall	.-112    	; 0x10bc <game_init>
	Game_Over = 0;
    112c:	10 92 4f 02 	sts	0x024F, r1
	sram_init();
    1130:	0e 94 de 10 	call	0x21bc	; 0x21bc <sram_init>
	sram_goto_line(0);
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	8f d6       	rcall	.+3358   	; 0x1e56 <sram_goto_line>
	sram_write_string("SQUASH SIMULATOR");
    1138:	83 ef       	ldi	r24, 0xF3	; 243
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	9a d6       	rcall	.+3380   	; 0x1e72 <sram_write_string>
	sram_update_oled();
    113e:	0e 94 d5 10 	call	0x21aa	; 0x21aa <sram_update_oled>
	sram_goto_line(3);
    1142:	83 e0       	ldi	r24, 0x03	; 3
    1144:	88 d6       	rcall	.+3344   	; 0x1e56 <sram_goto_line>
	sram_write_string("SCORE: ");
    1146:	8d ed       	ldi	r24, 0xDD	; 221
    1148:	91 e0       	ldi	r25, 0x01	; 1
    114a:	93 d6       	rcall	.+3366   	; 0x1e72 <sram_write_string>
	sram_write_int(gamescore);
    114c:	80 91 54 02 	lds	r24, 0x0254
    1150:	90 91 55 02 	lds	r25, 0x0255
    1154:	a2 d6       	rcall	.+3396   	; 0x1e9a <sram_write_int>
    1156:	e5 e7       	ldi	r30, 0x75	; 117
    1158:	f2 e0       	ldi	r31, 0x02	; 2
    115a:	8d e7       	ldi	r24, 0x7D	; 125
    115c:	92 e0       	ldi	r25, 0x02	; 2
	
	
	for (int8_t i = 0; i < 8;  i++)//send all zeros to 
	{
		data_to_send[i] = 0;
    115e:	11 92       	st	Z+, r1
	sram_goto_line(3);
	sram_write_string("SCORE: ");
	sram_write_int(gamescore);
	
	
	for (int8_t i = 0; i < 8;  i++)//send all zeros to 
    1160:	e8 17       	cp	r30, r24
    1162:	f9 07       	cpc	r31, r25
    1164:	e1 f7       	brne	.-8      	; 0x115e <play_game+0x3a>
	{
		data_to_send[i] = 0;
	}
	CAN_construct_message(CAN_GAME_CONTROL_ID,8);
    1166:	68 e0       	ldi	r22, 0x08	; 8
    1168:	84 e1       	ldi	r24, 0x14	; 20
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	92 d9       	rcall	.-3292   	; 0x492 <CAN_construct_message>
	CAN_message_send(data_to_send,0);
    116e:	60 e0       	ldi	r22, 0x00	; 0
    1170:	85 e7       	ldi	r24, 0x75	; 117
    1172:	92 e0       	ldi	r25, 0x02	; 2
    1174:	14 db       	rcall	.-2520   	; 0x79e <CAN_message_send>
	
	
	while(!Game_Over){
    1176:	80 91 4f 02 	lds	r24, 0x024F
    117a:	81 11       	cpse	r24, r1
    117c:	06 c0       	rjmp	.+12     	; 0x118a <play_game+0x66>
		game_send_data();//send data_to_send if it is updated
    117e:	15 df       	rcall	.-470    	; 0xfaa <game_send_data>
		
		update_score();//check if the game is over
    1180:	e6 de       	rcall	.-564    	; 0xf4e <update_score>
	}
	CAN_construct_message(CAN_GAME_CONTROL_ID,8);
	CAN_message_send(data_to_send,0);
	
	
	while(!Game_Over){
    1182:	80 91 4f 02 	lds	r24, 0x024F
    1186:	88 23       	and	r24, r24
    1188:	d1 f3       	breq	.-12     	; 0x117e <play_game+0x5a>
		game_send_data();//send data_to_send if it is updated
		
		update_score();//check if the game is over
	}
	while (!button_pressed())//wait for button to be pressed to show the score
    118a:	08 dc       	rcall	.-2032   	; 0x99c <button_pressed>
    118c:	88 23       	and	r24, r24
    118e:	e9 f3       	breq	.-6      	; 0x118a <play_game+0x66>
	{
		
	}
}
    1190:	08 95       	ret

00001192 <calibrate_joystick>:
		printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	c4 e6       	ldi	r28, 0x64	; 100
    119c:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
    119e:	00 91 60 02 	lds	r16, 0x0260
    11a2:	10 91 61 02 	lds	r17, 0x0261
    11a6:	81 e0       	ldi	r24, 0x01	; 1
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	81 db       	rcall	.-2302   	; 0x8ae <readADC>
    11ac:	01 58       	subi	r16, 0x81	; 129
    11ae:	1f 4f       	sbci	r17, 0xFF	; 255
    11b0:	08 1b       	sub	r16, r24
    11b2:	19 0b       	sbc	r17, r25
    11b4:	10 93 61 02 	sts	0x0261, r17
    11b8:	00 93 60 02 	sts	0x0260, r16
		calibrate_y += 127 - readADC(2);
    11bc:	00 91 5e 02 	lds	r16, 0x025E
    11c0:	10 91 5f 02 	lds	r17, 0x025F
    11c4:	82 e0       	ldi	r24, 0x02	; 2
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	72 db       	rcall	.-2332   	; 0x8ae <readADC>
    11ca:	01 58       	subi	r16, 0x81	; 129
    11cc:	1f 4f       	sbci	r17, 0xFF	; 255
    11ce:	08 1b       	sub	r16, r24
    11d0:	19 0b       	sbc	r17, r25
    11d2:	10 93 5f 02 	sts	0x025F, r17
    11d6:	00 93 5e 02 	sts	0x025E, r16
    11da:	21 97       	sbiw	r28, 0x01	; 1
		printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
	#endif
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
    11dc:	20 97       	sbiw	r28, 0x00	; 0
    11de:	f9 f6       	brne	.-66     	; 0x119e <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
    11e0:	80 91 60 02 	lds	r24, 0x0260
    11e4:	90 91 61 02 	lds	r25, 0x0261
    11e8:	24 e6       	ldi	r18, 0x64	; 100
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	b9 01       	movw	r22, r18
    11ee:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divmodhi4>
    11f2:	70 93 61 02 	sts	0x0261, r23
    11f6:	60 93 60 02 	sts	0x0260, r22
	calibrate_y /= CALIBRATE_READINGS;
    11fa:	80 91 5e 02 	lds	r24, 0x025E
    11fe:	90 91 5f 02 	lds	r25, 0x025F
    1202:	b9 01       	movw	r22, r18
    1204:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divmodhi4>
    1208:	70 93 5f 02 	sts	0x025F, r23
    120c:	60 93 5e 02 	sts	0x025E, r22
}
    1210:	df 91       	pop	r29
    1212:	cf 91       	pop	r28
    1214:	1f 91       	pop	r17
    1216:	0f 91       	pop	r16
    1218:	08 95       	ret

0000121a <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
    121a:	2f 92       	push	r2
    121c:	3f 92       	push	r3
    121e:	4f 92       	push	r4
    1220:	5f 92       	push	r5
    1222:	6f 92       	push	r6
    1224:	7f 92       	push	r7
    1226:	8f 92       	push	r8
    1228:	9f 92       	push	r9
    122a:	af 92       	push	r10
    122c:	bf 92       	push	r11
    122e:	cf 92       	push	r12
    1230:	df 92       	push	r13
    1232:	ef 92       	push	r14
    1234:	ff 92       	push	r15
    1236:	0f 93       	push	r16
    1238:	1f 93       	push	r17
    123a:	cf 93       	push	r28
    123c:	df 93       	push	r29
    123e:	00 d0       	rcall	.+0      	; 0x1240 <signal_to_range+0x26>
    1240:	00 d0       	rcall	.+0      	; 0x1242 <signal_to_range+0x28>
    1242:	00 d0       	rcall	.+0      	; 0x1244 <signal_to_range+0x2a>
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
    1248:	3c 01       	movw	r6, r24
    124a:	7a 83       	std	Y+2, r23	; 0x02
    124c:	69 83       	std	Y+1, r22	; 0x01
    124e:	5c 83       	std	Y+4, r21	; 0x04
    1250:	4b 83       	std	Y+3, r20	; 0x03
    1252:	3e 83       	std	Y+6, r19	; 0x06
    1254:	2d 83       	std	Y+5, r18	; 0x05
    1256:	18 01       	movw	r2, r16
    1258:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
    125a:	b9 01       	movw	r22, r18
    125c:	88 27       	eor	r24, r24
    125e:	77 fd       	sbrc	r23, 7
    1260:	80 95       	com	r24
    1262:	98 2f       	mov	r25, r24
    1264:	0e 94 9d 14 	call	0x293a	; 0x293a <__floatsisf>
    1268:	4b 01       	movw	r8, r22
    126a:	5c 01       	movw	r10, r24
    126c:	b3 01       	movw	r22, r6
    126e:	6e 0d       	add	r22, r14
    1270:	7f 1d       	adc	r23, r15
    1272:	29 81       	ldd	r18, Y+1	; 0x01
    1274:	3a 81       	ldd	r19, Y+2	; 0x02
    1276:	62 1b       	sub	r22, r18
    1278:	73 0b       	sbc	r23, r19
    127a:	88 27       	eor	r24, r24
    127c:	77 fd       	sbrc	r23, 7
    127e:	80 95       	com	r24
    1280:	98 2f       	mov	r25, r24
    1282:	0e 94 9d 14 	call	0x293a	; 0x293a <__floatsisf>
    1286:	2b 01       	movw	r4, r22
    1288:	3c 01       	movw	r6, r24
    128a:	b1 01       	movw	r22, r2
    128c:	8d 81       	ldd	r24, Y+5	; 0x05
    128e:	9e 81       	ldd	r25, Y+6	; 0x06
    1290:	68 1b       	sub	r22, r24
    1292:	79 0b       	sbc	r23, r25
    1294:	88 27       	eor	r24, r24
    1296:	77 fd       	sbrc	r23, 7
    1298:	80 95       	com	r24
    129a:	98 2f       	mov	r25, r24
    129c:	0e 94 9d 14 	call	0x293a	; 0x293a <__floatsisf>
    12a0:	9b 01       	movw	r18, r22
    12a2:	ac 01       	movw	r20, r24
    12a4:	c3 01       	movw	r24, r6
    12a6:	b2 01       	movw	r22, r4
    12a8:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <__mulsf3>
    12ac:	2b 01       	movw	r4, r22
    12ae:	3c 01       	movw	r6, r24
    12b0:	6b 81       	ldd	r22, Y+3	; 0x03
    12b2:	7c 81       	ldd	r23, Y+4	; 0x04
    12b4:	e9 81       	ldd	r30, Y+1	; 0x01
    12b6:	fa 81       	ldd	r31, Y+2	; 0x02
    12b8:	6e 1b       	sub	r22, r30
    12ba:	7f 0b       	sbc	r23, r31
    12bc:	88 27       	eor	r24, r24
    12be:	77 fd       	sbrc	r23, 7
    12c0:	80 95       	com	r24
    12c2:	98 2f       	mov	r25, r24
    12c4:	0e 94 9d 14 	call	0x293a	; 0x293a <__floatsisf>
    12c8:	9b 01       	movw	r18, r22
    12ca:	ac 01       	movw	r20, r24
    12cc:	c3 01       	movw	r24, r6
    12ce:	b2 01       	movw	r22, r4
    12d0:	0e 94 02 14 	call	0x2804	; 0x2804 <__divsf3>
    12d4:	9b 01       	movw	r18, r22
    12d6:	ac 01       	movw	r20, r24
    12d8:	c5 01       	movw	r24, r10
    12da:	b4 01       	movw	r22, r8
    12dc:	0e 94 9a 13 	call	0x2734	; 0x2734 <__addsf3>
    12e0:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
    12e4:	c1 01       	movw	r24, r2
    12e6:	80 1b       	sub	r24, r16
    12e8:	91 0b       	sbc	r25, r17
    12ea:	68 17       	cp	r22, r24
    12ec:	79 07       	cpc	r23, r25
    12ee:	74 f5       	brge	.+92     	; 0x134c <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	80 0f       	add	r24, r16
    12f6:	91 1f       	adc	r25, r17
    12f8:	86 17       	cp	r24, r22
    12fa:	97 07       	cpc	r25, r23
    12fc:	4c f5       	brge	.+82     	; 0x1350 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
    12fe:	f8 01       	movw	r30, r16
    1300:	11 23       	and	r17, r17
    1302:	0c f4       	brge	.+2      	; 0x1306 <signal_to_range+0xec>
    1304:	31 96       	adiw	r30, 0x01	; 1
    1306:	f5 95       	asr	r31
    1308:	e7 95       	ror	r30
    130a:	d8 01       	movw	r26, r16
    130c:	12 c0       	rjmp	.+36     	; 0x1332 <signal_to_range+0x118>
    130e:	8a 0f       	add	r24, r26
    1310:	9b 1f       	adc	r25, r27
    1312:	ac 01       	movw	r20, r24
    1314:	4e 0f       	add	r20, r30
    1316:	5f 1f       	adc	r21, r31
    1318:	64 17       	cp	r22, r20
    131a:	75 07       	cpc	r23, r21
    131c:	14 f0       	brlt	.+4      	; 0x1322 <signal_to_range+0x108>
				reference += step;
    131e:	69 01       	movw	r12, r18
    1320:	0b c0       	rjmp	.+22     	; 0x1338 <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
    1322:	c6 01       	movw	r24, r12
    1324:	8e 1b       	sub	r24, r30
    1326:	9f 0b       	sbc	r25, r31
    1328:	86 17       	cp	r24, r22
    132a:	97 07       	cpc	r25, r23
    132c:	14 f0       	brlt	.+4      	; 0x1332 <signal_to_range+0x118>
				reference -= step;
    132e:	c0 1a       	sub	r12, r16
    1330:	d1 0a       	sbc	r13, r17
    1332:	c6 01       	movw	r24, r12
    1334:	80 1b       	sub	r24, r16
    1336:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
    1338:	96 01       	movw	r18, r12
    133a:	20 0f       	add	r18, r16
    133c:	31 1f       	adc	r19, r17
    133e:	62 17       	cp	r22, r18
    1340:	73 07       	cpc	r23, r19
    1342:	2c f7       	brge	.-54     	; 0x130e <signal_to_range+0xf4>
    1344:	86 17       	cp	r24, r22
    1346:	97 07       	cpc	r25, r23
    1348:	14 f7       	brge	.-60     	; 0x130e <signal_to_range+0xf4>
    134a:	04 c0       	rjmp	.+8      	; 0x1354 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
    134c:	61 01       	movw	r12, r2
    134e:	02 c0       	rjmp	.+4      	; 0x1354 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
    1350:	cd 80       	ldd	r12, Y+5	; 0x05
    1352:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
    1354:	c6 01       	movw	r24, r12
    1356:	26 96       	adiw	r28, 0x06	; 6
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	de bf       	out	0x3e, r29	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	cd bf       	out	0x3d, r28	; 61
    1362:	df 91       	pop	r29
    1364:	cf 91       	pop	r28
    1366:	1f 91       	pop	r17
    1368:	0f 91       	pop	r16
    136a:	ff 90       	pop	r15
    136c:	ef 90       	pop	r14
    136e:	df 90       	pop	r13
    1370:	cf 90       	pop	r12
    1372:	bf 90       	pop	r11
    1374:	af 90       	pop	r10
    1376:	9f 90       	pop	r9
    1378:	8f 90       	pop	r8
    137a:	7f 90       	pop	r7
    137c:	6f 90       	pop	r6
    137e:	5f 90       	pop	r5
    1380:	4f 90       	pop	r4
    1382:	3f 90       	pop	r3
    1384:	2f 90       	pop	r2
    1386:	08 95       	ret

00001388 <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
    1388:	af 92       	push	r10
    138a:	bf 92       	push	r11
    138c:	cf 92       	push	r12
    138e:	df 92       	push	r13
    1390:	ef 92       	push	r14
    1392:	ff 92       	push	r15
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
	switch(channel){
    1398:	82 35       	cpi	r24, 0x52	; 82
    139a:	09 f4       	brne	.+2      	; 0x139e <read_control_input+0x16>
    139c:	6e c0       	rjmp	.+220    	; 0x147a <read_control_input+0xf2>
    139e:	20 f4       	brcc	.+8      	; 0x13a8 <read_control_input+0x20>
    13a0:	8c 34       	cpi	r24, 0x4C	; 76
    13a2:	09 f4       	brne	.+2      	; 0x13a6 <read_control_input+0x1e>
    13a4:	4a c0       	rjmp	.+148    	; 0x143a <read_control_input+0xb2>
    13a6:	89 c0       	rjmp	.+274    	; 0x14ba <read_control_input+0x132>
    13a8:	88 35       	cpi	r24, 0x58	; 88
    13aa:	19 f0       	breq	.+6      	; 0x13b2 <read_control_input+0x2a>
    13ac:	89 35       	cpi	r24, 0x59	; 89
    13ae:	19 f1       	breq	.+70     	; 0x13f6 <read_control_input+0x6e>
    13b0:	84 c0       	rjmp	.+264    	; 0x14ba <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(ADC_CHANNEL_X), SIGNAL_MIN, SIGNAL_MAX, JOYSTICK_MIN, JOYSTICK_MAX, calibrate_x, ref_X, RESOLUTION); 
    13b2:	c0 90 5c 02 	lds	r12, 0x025C
    13b6:	d0 90 5d 02 	lds	r13, 0x025D
    13ba:	e0 90 60 02 	lds	r14, 0x0260
    13be:	f0 90 61 02 	lds	r15, 0x0261
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	73 da       	rcall	.-2842   	; 0x8ae <readADC>
    13c8:	0f 2e       	mov	r0, r31
    13ca:	fa e0       	ldi	r31, 0x0A	; 10
    13cc:	af 2e       	mov	r10, r31
    13ce:	b1 2c       	mov	r11, r1
    13d0:	f0 2d       	mov	r31, r0
    13d2:	04 e6       	ldi	r16, 0x64	; 100
    13d4:	10 e0       	ldi	r17, 0x00	; 0
    13d6:	2c e9       	ldi	r18, 0x9C	; 156
    13d8:	3f ef       	ldi	r19, 0xFF	; 255
    13da:	4f ef       	ldi	r20, 0xFF	; 255
    13dc:	50 e0       	ldi	r21, 0x00	; 0
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	1b df       	rcall	.-458    	; 0x121a <signal_to_range>
    13e4:	90 93 5d 02 	sts	0x025D, r25
    13e8:	80 93 5c 02 	sts	0x025C, r24
			return ref_X;
    13ec:	80 91 5c 02 	lds	r24, 0x025C
    13f0:	90 91 5d 02 	lds	r25, 0x025D
    13f4:	64 c0       	rjmp	.+200    	; 0x14be <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(ADC_CHANNEL_Y), SIGNAL_MIN, SIGNAL_MAX, JOYSTICK_MIN, JOYSTICK_MAX, calibrate_y, ref_Y, RESOLUTION);
    13f6:	c0 90 5a 02 	lds	r12, 0x025A
    13fa:	d0 90 5b 02 	lds	r13, 0x025B
    13fe:	e0 90 5e 02 	lds	r14, 0x025E
    1402:	f0 90 5f 02 	lds	r15, 0x025F
    1406:	82 e0       	ldi	r24, 0x02	; 2
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	51 da       	rcall	.-2910   	; 0x8ae <readADC>
    140c:	0f 2e       	mov	r0, r31
    140e:	fa e0       	ldi	r31, 0x0A	; 10
    1410:	af 2e       	mov	r10, r31
    1412:	b1 2c       	mov	r11, r1
    1414:	f0 2d       	mov	r31, r0
    1416:	04 e6       	ldi	r16, 0x64	; 100
    1418:	10 e0       	ldi	r17, 0x00	; 0
    141a:	2c e9       	ldi	r18, 0x9C	; 156
    141c:	3f ef       	ldi	r19, 0xFF	; 255
    141e:	4f ef       	ldi	r20, 0xFF	; 255
    1420:	50 e0       	ldi	r21, 0x00	; 0
    1422:	60 e0       	ldi	r22, 0x00	; 0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	f9 de       	rcall	.-526    	; 0x121a <signal_to_range>
    1428:	90 93 5b 02 	sts	0x025B, r25
    142c:	80 93 5a 02 	sts	0x025A, r24
			return ref_Y;
    1430:	80 91 5a 02 	lds	r24, 0x025A
    1434:	90 91 5b 02 	lds	r25, 0x025B
    1438:	42 c0       	rjmp	.+132    	; 0x14be <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(ADC_CHANNEL_L), SIGNAL_MIN, SIGNAL_MAX, SLIDER_MIN, SLIDER_MAX, 0, ref_L, RESOLUTION);
    143a:	c0 90 58 02 	lds	r12, 0x0258
    143e:	d0 90 59 02 	lds	r13, 0x0259
    1442:	83 e0       	ldi	r24, 0x03	; 3
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	33 da       	rcall	.-2970   	; 0x8ae <readADC>
    1448:	0f 2e       	mov	r0, r31
    144a:	fa e0       	ldi	r31, 0x0A	; 10
    144c:	af 2e       	mov	r10, r31
    144e:	b1 2c       	mov	r11, r1
    1450:	f0 2d       	mov	r31, r0
    1452:	e1 2c       	mov	r14, r1
    1454:	f1 2c       	mov	r15, r1
    1456:	04 e6       	ldi	r16, 0x64	; 100
    1458:	10 e0       	ldi	r17, 0x00	; 0
    145a:	20 e0       	ldi	r18, 0x00	; 0
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	4f ef       	ldi	r20, 0xFF	; 255
    1460:	50 e0       	ldi	r21, 0x00	; 0
    1462:	60 e0       	ldi	r22, 0x00	; 0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	d9 de       	rcall	.-590    	; 0x121a <signal_to_range>
    1468:	90 93 59 02 	sts	0x0259, r25
    146c:	80 93 58 02 	sts	0x0258, r24
		return ref_L;
    1470:	80 91 58 02 	lds	r24, 0x0258
    1474:	90 91 59 02 	lds	r25, 0x0259
    1478:	22 c0       	rjmp	.+68     	; 0x14be <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(ADC_CHANNEL_R), SIGNAL_MIN, SIGNAL_MAX, SLIDER_MIN, SLIDER_MAX, 0, ref_R, RESOLUTION);
    147a:	c0 90 56 02 	lds	r12, 0x0256
    147e:	d0 90 57 02 	lds	r13, 0x0257
    1482:	84 e0       	ldi	r24, 0x04	; 4
    1484:	90 e0       	ldi	r25, 0x00	; 0
    1486:	13 da       	rcall	.-3034   	; 0x8ae <readADC>
    1488:	0f 2e       	mov	r0, r31
    148a:	fa e0       	ldi	r31, 0x0A	; 10
    148c:	af 2e       	mov	r10, r31
    148e:	b1 2c       	mov	r11, r1
    1490:	f0 2d       	mov	r31, r0
    1492:	e1 2c       	mov	r14, r1
    1494:	f1 2c       	mov	r15, r1
    1496:	04 e6       	ldi	r16, 0x64	; 100
    1498:	10 e0       	ldi	r17, 0x00	; 0
    149a:	20 e0       	ldi	r18, 0x00	; 0
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	4f ef       	ldi	r20, 0xFF	; 255
    14a0:	50 e0       	ldi	r21, 0x00	; 0
    14a2:	60 e0       	ldi	r22, 0x00	; 0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	b9 de       	rcall	.-654    	; 0x121a <signal_to_range>
    14a8:	90 93 57 02 	sts	0x0257, r25
    14ac:	80 93 56 02 	sts	0x0256, r24
			return ref_R;
    14b0:	80 91 56 02 	lds	r24, 0x0256
    14b4:	90 91 57 02 	lds	r25, 0x0257
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <read_control_input+0x136>
	}
	return 0;
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
}
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	08 95       	ret

000014d0 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
    14d0:	60 de       	rcall	.-832    	; 0x1192 <calibrate_joystick>
	ref_X = read_control_input('X');
    14d2:	88 e5       	ldi	r24, 0x58	; 88
    14d4:	59 df       	rcall	.-334    	; 0x1388 <read_control_input>
    14d6:	90 93 5d 02 	sts	0x025D, r25
    14da:	80 93 5c 02 	sts	0x025C, r24
	ref_Y = read_control_input('Y');
    14de:	89 e5       	ldi	r24, 0x59	; 89
    14e0:	53 df       	rcall	.-346    	; 0x1388 <read_control_input>
    14e2:	90 93 5b 02 	sts	0x025B, r25
    14e6:	80 93 5a 02 	sts	0x025A, r24
	ref_L = read_control_input('L');
    14ea:	8c e4       	ldi	r24, 0x4C	; 76
    14ec:	4d df       	rcall	.-358    	; 0x1388 <read_control_input>
    14ee:	90 93 59 02 	sts	0x0259, r25
    14f2:	80 93 58 02 	sts	0x0258, r24
	ref_R = read_control_input('R');
    14f6:	82 e5       	ldi	r24, 0x52	; 82
    14f8:	47 df       	rcall	.-370    	; 0x1388 <read_control_input>
    14fa:	90 93 57 02 	sts	0x0257, r25
    14fe:	80 93 56 02 	sts	0x0256, r24
    1502:	08 95       	ret

00001504 <initialize_menu>:
	&debug_0
};

char temp[16];

void initialize_menu(void){
    1504:	8f 92       	push	r8
    1506:	9f 92       	push	r9
    1508:	af 92       	push	r10
    150a:	bf 92       	push	r11
    150c:	cf 92       	push	r12
    150e:	df 92       	push	r13
    1510:	ef 92       	push	r14
    1512:	ff 92       	push	r15
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	0f 2e       	mov	r0, r31
    151e:	fd e1       	ldi	r31, 0x1D	; 29
    1520:	cf 2e       	mov	r12, r31
    1522:	f1 e0       	ldi	r31, 0x01	; 1
    1524:	df 2e       	mov	r13, r31
    1526:	f0 2d       	mov	r31, r0
    1528:	0f 2e       	mov	r0, r31
    152a:	f3 e1       	ldi	r31, 0x13	; 19
    152c:	ef 2e       	mov	r14, r31
    152e:	f1 e0       	ldi	r31, 0x01	; 1
    1530:	ff 2e       	mov	r15, r31
    1532:	f0 2d       	mov	r31, r0
    1534:	07 e2       	ldi	r16, 0x27	; 39
    1536:	11 e0       	ldi	r17, 0x01	; 1
    1538:	21 e0       	ldi	r18, 0x01	; 1
    153a:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
    153c:	c5 e0       	ldi	r28, 0x05	; 5
    153e:	d0 e0       	ldi	r29, 0x00	; 0
    1540:	d6 01       	movw	r26, r12
    1542:	ad 90       	ld	r10, X+
    1544:	bd 90       	ld	r11, X+
    1546:	6d 01       	movw	r12, r26
    1548:	f7 01       	movw	r30, r14
    154a:	81 90       	ld	r8, Z+
    154c:	91 90       	ld	r9, Z+
    154e:	7f 01       	movw	r14, r30
    1550:	c9 01       	movw	r24, r18
    1552:	be 01       	movw	r22, r28
    1554:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <__divmodhi4>
    1558:	fc 01       	movw	r30, r24
    155a:	ee 0f       	add	r30, r30
    155c:	ff 1f       	adc	r31, r31
    155e:	e9 5d       	subi	r30, 0xD9	; 217
    1560:	fe 4f       	sbci	r31, 0xFE	; 254
    1562:	80 81       	ld	r24, Z
    1564:	91 81       	ldd	r25, Z+1	; 0x01
    1566:	d8 01       	movw	r26, r16
    1568:	ed 91       	ld	r30, X+
    156a:	fd 91       	ld	r31, X+
    156c:	8d 01       	movw	r16, r26
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    156e:	95 83       	std	Z+5, r25	; 0x05
    1570:	84 83       	std	Z+4, r24	; 0x04
	new_menu->ptr_child = ptr_child;
    1572:	97 82       	std	Z+7, r9	; 0x07
    1574:	86 82       	std	Z+6, r8	; 0x06
	new_menu->ptr_parent = ptr_parent;
    1576:	11 86       	std	Z+9, r1	; 0x09
    1578:	10 86       	std	Z+8, r1	; 0x08
	
	new_menu->title = title;
    157a:	b1 82       	std	Z+1, r11	; 0x01
    157c:	a0 82       	st	Z, r10
	new_menu->n_sib = n_sib;
    157e:	d3 83       	std	Z+3, r29	; 0x03
    1580:	c2 83       	std	Z+2, r28	; 0x02
    1582:	2f 5f       	subi	r18, 0xFF	; 255
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
};

char temp[16];

void initialize_menu(void){
	for (uint8_t m = 0; m < TOTAL_MAINMENU; m++)
    1586:	26 30       	cpi	r18, 0x06	; 6
    1588:	31 05       	cpc	r19, r1
    158a:	d1 f6       	brne	.-76     	; 0x1540 <initialize_menu+0x3c>
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    158c:	80 91 41 01 	lds	r24, 0x0141
    1590:	90 91 42 01 	lds	r25, 0x0142
    1594:	60 91 6b 02 	lds	r22, 0x026B
    1598:	70 91 6c 02 	lds	r23, 0x026C
    159c:	e7 e2       	ldi	r30, 0x27	; 39
    159e:	f1 e0       	ldi	r31, 0x01	; 1
    15a0:	40 81       	ld	r20, Z
    15a2:	51 81       	ldd	r21, Z+1	; 0x01
    15a4:	0f 2e       	mov	r0, r31
    15a6:	f5 e4       	ldi	r31, 0x45	; 69
    15a8:	ef 2e       	mov	r14, r31
    15aa:	f1 e0       	ldi	r31, 0x01	; 1
    15ac:	ff 2e       	mov	r15, r31
    15ae:	f0 2d       	mov	r31, r0
    15b0:	e7 01       	movw	r28, r14
    15b2:	a8 81       	ld	r26, Y
    15b4:	b9 81       	ldd	r27, Y+1	; 0x01
    15b6:	27 e4       	ldi	r18, 0x47	; 71
    15b8:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    15ba:	e9 01       	movw	r28, r18
    15bc:	08 81       	ld	r16, Y
    15be:	19 81       	ldd	r17, Y+1	; 0x01
    15c0:	15 96       	adiw	r26, 0x05	; 5
    15c2:	1c 93       	st	X, r17
    15c4:	0e 93       	st	-X, r16
    15c6:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    15c8:	17 96       	adiw	r26, 0x07	; 7
    15ca:	7c 93       	st	X, r23
    15cc:	6e 93       	st	-X, r22
    15ce:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    15d0:	19 96       	adiw	r26, 0x09	; 9
    15d2:	5c 93       	st	X, r21
    15d4:	4e 93       	st	-X, r20
    15d6:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    15d8:	11 96       	adiw	r26, 0x01	; 1
    15da:	9c 93       	st	X, r25
    15dc:	8e 93       	st	-X, r24
	new_menu->n_sib = n_sib;
    15de:	82 e0       	ldi	r24, 0x02	; 2
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	13 96       	adiw	r26, 0x03	; 3
    15e4:	9c 93       	st	X, r25
    15e6:	8e 93       	st	-X, r24
    15e8:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(mainmenu_list[m],mainmenu_list[(m+1)%TOTAL_MAINMENU],NULL,mainmenu_ptr_list[m],TOTAL_MAINMENU,mainmenu_entry_list[m]);
	}
	for (uint8_t o = 0; o < TOTAL_OPTION; o++)
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
    15ea:	40 91 43 01 	lds	r20, 0x0143
    15ee:	50 91 44 01 	lds	r21, 0x0144
    15f2:	00 91 6d 02 	lds	r16, 0x026D
    15f6:	10 91 6e 02 	lds	r17, 0x026E
    15fa:	60 81       	ld	r22, Z
    15fc:	71 81       	ldd	r23, Z+1	; 0x01
    15fe:	a8 81       	ld	r26, Y
    1600:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1602:	e7 01       	movw	r28, r14
    1604:	28 81       	ld	r18, Y
    1606:	39 81       	ldd	r19, Y+1	; 0x01
    1608:	15 96       	adiw	r26, 0x05	; 5
    160a:	3c 93       	st	X, r19
    160c:	2e 93       	st	-X, r18
    160e:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1610:	17 96       	adiw	r26, 0x07	; 7
    1612:	1c 93       	st	X, r17
    1614:	0e 93       	st	-X, r16
    1616:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1618:	19 96       	adiw	r26, 0x09	; 9
    161a:	7c 93       	st	X, r23
    161c:	6e 93       	st	-X, r22
    161e:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	5c 93       	st	X, r21
    1624:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1626:	13 96       	adiw	r26, 0x03	; 3
    1628:	9c 93       	st	X, r25
    162a:	8e 93       	st	-X, r24
    162c:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    162e:	40 91 49 01 	lds	r20, 0x0149
    1632:	50 91 4a 01 	lds	r21, 0x014A
    1636:	00 91 6f 02 	lds	r16, 0x026F
    163a:	10 91 70 02 	lds	r17, 0x0270
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	0f 2e       	mov	r0, r31
    1644:	fd e4       	ldi	r31, 0x4D	; 77
    1646:	cf 2e       	mov	r12, r31
    1648:	f1 e0       	ldi	r31, 0x01	; 1
    164a:	df 2e       	mov	r13, r31
    164c:	f0 2d       	mov	r31, r0
    164e:	e6 01       	movw	r28, r12
    1650:	a8 81       	ld	r26, Y
    1652:	b9 81       	ldd	r27, Y+1	; 0x01
    1654:	2f e4       	ldi	r18, 0x4F	; 79
    1656:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1658:	e9 01       	movw	r28, r18
    165a:	e8 80       	ld	r14, Y
    165c:	f9 80       	ldd	r15, Y+1	; 0x01
    165e:	15 96       	adiw	r26, 0x05	; 5
    1660:	fc 92       	st	X, r15
    1662:	ee 92       	st	-X, r14
    1664:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1666:	17 96       	adiw	r26, 0x07	; 7
    1668:	1c 93       	st	X, r17
    166a:	0e 93       	st	-X, r16
    166c:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    166e:	19 96       	adiw	r26, 0x09	; 9
    1670:	7c 93       	st	X, r23
    1672:	6e 93       	st	-X, r22
    1674:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1676:	11 96       	adiw	r26, 0x01	; 1
    1678:	5c 93       	st	X, r21
    167a:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    167c:	13 96       	adiw	r26, 0x03	; 3
    167e:	9c 93       	st	X, r25
    1680:	8e 93       	st	-X, r24
    1682:	12 97       	sbiw	r26, 0x02	; 2
	{
		setup_menu(option_list[o],option_list[(o+1)%TOTAL_OPTION],mainmenu_list[0],option_ptr_list[o],TOTAL_OPTION,option_entry_list[o]);
	}
	for (uint8_t d = 0; d < TOTAL_DEBUG; d++)
	{
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
    1684:	40 91 4b 01 	lds	r20, 0x014B
    1688:	50 91 4c 01 	lds	r21, 0x014C
    168c:	00 91 71 02 	lds	r16, 0x0271
    1690:	10 91 72 02 	lds	r17, 0x0272
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	a8 81       	ld	r26, Y
    169a:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    169c:	e6 01       	movw	r28, r12
    169e:	28 81       	ld	r18, Y
    16a0:	39 81       	ldd	r19, Y+1	; 0x01
    16a2:	15 96       	adiw	r26, 0x05	; 5
    16a4:	3c 93       	st	X, r19
    16a6:	2e 93       	st	-X, r18
    16a8:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    16aa:	17 96       	adiw	r26, 0x07	; 7
    16ac:	1c 93       	st	X, r17
    16ae:	0e 93       	st	-X, r16
    16b0:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    16b2:	19 96       	adiw	r26, 0x09	; 9
    16b4:	7c 93       	st	X, r23
    16b6:	6e 93       	st	-X, r22
    16b8:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    16ba:	11 96       	adiw	r26, 0x01	; 1
    16bc:	5c 93       	st	X, r21
    16be:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    16c0:	13 96       	adiw	r26, 0x03	; 3
    16c2:	9c 93       	st	X, r25
    16c4:	8e 93       	st	-X, r24
    16c6:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    16c8:	40 91 39 01 	lds	r20, 0x0139
    16cc:	50 91 3a 01 	lds	r21, 0x013A
    16d0:	00 91 67 02 	lds	r16, 0x0267
    16d4:	10 91 68 02 	lds	r17, 0x0268
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	0f 2e       	mov	r0, r31
    16de:	fd e3       	ldi	r31, 0x3D	; 61
    16e0:	cf 2e       	mov	r12, r31
    16e2:	f1 e0       	ldi	r31, 0x01	; 1
    16e4:	df 2e       	mov	r13, r31
    16e6:	f0 2d       	mov	r31, r0
    16e8:	e6 01       	movw	r28, r12
    16ea:	a8 81       	ld	r26, Y
    16ec:	b9 81       	ldd	r27, Y+1	; 0x01
    16ee:	2f e3       	ldi	r18, 0x3F	; 63
    16f0:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    16f2:	e9 01       	movw	r28, r18
    16f4:	e8 80       	ld	r14, Y
    16f6:	f9 80       	ldd	r15, Y+1	; 0x01
    16f8:	15 96       	adiw	r26, 0x05	; 5
    16fa:	fc 92       	st	X, r15
    16fc:	ee 92       	st	-X, r14
    16fe:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1700:	17 96       	adiw	r26, 0x07	; 7
    1702:	1c 93       	st	X, r17
    1704:	0e 93       	st	-X, r16
    1706:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    1708:	19 96       	adiw	r26, 0x09	; 9
    170a:	7c 93       	st	X, r23
    170c:	6e 93       	st	-X, r22
    170e:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1710:	11 96       	adiw	r26, 0x01	; 1
    1712:	5c 93       	st	X, r21
    1714:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    1716:	13 96       	adiw	r26, 0x03	; 3
    1718:	9c 93       	st	X, r25
    171a:	8e 93       	st	-X, r24
    171c:	12 97       	sbiw	r26, 0x02	; 2
		setup_menu(debug_list[d],debug_list[(d+1)%TOTAL_DEBUG],mainmenu_list[0],debug_ptr_list[d],TOTAL_DEBUG,debug_entry_list[d]);
	}
	#if TOTAL_GAMES > 0
	for (uint8_t g = 0; g < TOTAL_GAMES; g++)
	{
		setup_menu(game_list[g],game_list[(g+1)%TOTAL_GAMES],mainmenu_list[0],game_ptr_list[g],TOTAL_GAMES,game_entry_list[g]);
    171e:	40 91 3b 01 	lds	r20, 0x013B
    1722:	50 91 3c 01 	lds	r21, 0x013C
    1726:	00 91 69 02 	lds	r16, 0x0269
    172a:	10 91 6a 02 	lds	r17, 0x026A
    172e:	60 81       	ld	r22, Z
    1730:	71 81       	ldd	r23, Z+1	; 0x01
    1732:	a8 81       	ld	r26, Y
    1734:	b9 81       	ldd	r27, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    1736:	e6 01       	movw	r28, r12
    1738:	28 81       	ld	r18, Y
    173a:	39 81       	ldd	r19, Y+1	; 0x01
    173c:	15 96       	adiw	r26, 0x05	; 5
    173e:	3c 93       	st	X, r19
    1740:	2e 93       	st	-X, r18
    1742:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    1744:	17 96       	adiw	r26, 0x07	; 7
    1746:	1c 93       	st	X, r17
    1748:	0e 93       	st	-X, r16
    174a:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    174c:	19 96       	adiw	r26, 0x09	; 9
    174e:	7c 93       	st	X, r23
    1750:	6e 93       	st	-X, r22
    1752:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    1754:	11 96       	adiw	r26, 0x01	; 1
    1756:	5c 93       	st	X, r21
    1758:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    175a:	13 96       	adiw	r26, 0x03	; 3
    175c:	9c 93       	st	X, r25
    175e:	8e 93       	st	-X, r24
    1760:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if HIGHSCORE_ENABLE
	for (uint8_t h = 0; h < TOTAL_HIGHSCORE; h++)
	{
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_HIGHSCORE],mainmenu_list[0],highscore_ptr_list[h],TOTAL_HIGHSCORE,highscore_entry_list[h]);
    1762:	40 91 31 01 	lds	r20, 0x0131
    1766:	50 91 32 01 	lds	r21, 0x0132
    176a:	00 91 63 02 	lds	r16, 0x0263
    176e:	10 91 64 02 	lds	r17, 0x0264
    1772:	60 81       	ld	r22, Z
    1774:	71 81       	ldd	r23, Z+1	; 0x01
    1776:	0f 2e       	mov	r0, r31
    1778:	f5 e3       	ldi	r31, 0x35	; 53
    177a:	cf 2e       	mov	r12, r31
    177c:	f1 e0       	ldi	r31, 0x01	; 1
    177e:	df 2e       	mov	r13, r31
    1780:	f0 2d       	mov	r31, r0
    1782:	e6 01       	movw	r28, r12
    1784:	a8 81       	ld	r26, Y
    1786:	b9 81       	ldd	r27, Y+1	; 0x01
    1788:	27 e3       	ldi	r18, 0x37	; 55
    178a:	31 e0       	ldi	r19, 0x01	; 1
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    178c:	e9 01       	movw	r28, r18
    178e:	e8 80       	ld	r14, Y
    1790:	f9 80       	ldd	r15, Y+1	; 0x01
    1792:	15 96       	adiw	r26, 0x05	; 5
    1794:	fc 92       	st	X, r15
    1796:	ee 92       	st	-X, r14
    1798:	14 97       	sbiw	r26, 0x04	; 4
	new_menu->ptr_child = ptr_child;
    179a:	17 96       	adiw	r26, 0x07	; 7
    179c:	1c 93       	st	X, r17
    179e:	0e 93       	st	-X, r16
    17a0:	16 97       	sbiw	r26, 0x06	; 6
	new_menu->ptr_parent = ptr_parent;
    17a2:	19 96       	adiw	r26, 0x09	; 9
    17a4:	7c 93       	st	X, r23
    17a6:	6e 93       	st	-X, r22
    17a8:	18 97       	sbiw	r26, 0x08	; 8
	
	new_menu->title = title;
    17aa:	11 96       	adiw	r26, 0x01	; 1
    17ac:	5c 93       	st	X, r21
    17ae:	4e 93       	st	-X, r20
	new_menu->n_sib = n_sib;
    17b0:	13 96       	adiw	r26, 0x03	; 3
    17b2:	9c 93       	st	X, r25
    17b4:	8e 93       	st	-X, r24
    17b6:	12 97       	sbiw	r26, 0x02	; 2
	}
	#endif
	#if HIGHSCORE_ENABLE
	for (uint8_t h = 0; h < TOTAL_HIGHSCORE; h++)
	{
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_HIGHSCORE],mainmenu_list[0],highscore_ptr_list[h],TOTAL_HIGHSCORE,highscore_entry_list[h]);
    17b8:	40 91 33 01 	lds	r20, 0x0133
    17bc:	50 91 34 01 	lds	r21, 0x0134
    17c0:	a0 91 65 02 	lds	r26, 0x0265
    17c4:	b0 91 66 02 	lds	r27, 0x0266
    17c8:	60 81       	ld	r22, Z
    17ca:	71 81       	ldd	r23, Z+1	; 0x01
    17cc:	e8 81       	ld	r30, Y
    17ce:	f9 81       	ldd	r31, Y+1	; 0x01
menu* current_selected;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
    17d0:	e6 01       	movw	r28, r12
    17d2:	28 81       	ld	r18, Y
    17d4:	39 81       	ldd	r19, Y+1	; 0x01
    17d6:	35 83       	std	Z+5, r19	; 0x05
    17d8:	24 83       	std	Z+4, r18	; 0x04
	new_menu->ptr_child = ptr_child;
    17da:	b7 83       	std	Z+7, r27	; 0x07
    17dc:	a6 83       	std	Z+6, r26	; 0x06
	new_menu->ptr_parent = ptr_parent;
    17de:	71 87       	std	Z+9, r23	; 0x09
    17e0:	60 87       	std	Z+8, r22	; 0x08
	
	new_menu->title = title;
    17e2:	51 83       	std	Z+1, r21	; 0x01
    17e4:	40 83       	st	Z, r20
	new_menu->n_sib = n_sib;
    17e6:	93 83       	std	Z+3, r25	; 0x03
    17e8:	82 83       	std	Z+2, r24	; 0x02
		setup_menu(highscore_list[h],highscore_list[(h+1)%TOTAL_HIGHSCORE],mainmenu_list[0],highscore_ptr_list[h],TOTAL_HIGHSCORE,highscore_entry_list[h]);
	}
	#endif
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_start;
    17ea:	87 ef       	ldi	r24, 0xF7	; 247
    17ec:	92 e0       	ldi	r25, 0x02	; 2
    17ee:	90 93 80 02 	sts	0x0280, r25
    17f2:	80 93 7f 02 	sts	0x027F, r24
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_start;
    17f6:	90 93 82 02 	sts	0x0282, r25
    17fa:	80 93 81 02 	sts	0x0281, r24
	
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	ff 90       	pop	r15
    1808:	ef 90       	pop	r14
    180a:	df 90       	pop	r13
    180c:	cf 90       	pop	r12
    180e:	bf 90       	pop	r11
    1810:	af 90       	pop	r10
    1812:	9f 90       	pop	r9
    1814:	8f 90       	pop	r8
    1816:	08 95       	ret

00001818 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
    1818:	80 e0       	ldi	r24, 0x00	; 0
    181a:	1f d2       	rcall	.+1086   	; 0x1c5a <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
    181c:	60 ea       	ldi	r22, 0xA0	; 160
    181e:	70 e0       	ldi	r23, 0x00	; 0
    1820:	81 ea       	ldi	r24, 0xA1	; 161
    1822:	92 e0       	ldi	r25, 0x02	; 2
    1824:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
	sram_write_string(temp);
    1828:	81 ea       	ldi	r24, 0xA1	; 161
    182a:	92 e0       	ldi	r25, 0x02	; 2
    182c:	22 d3       	rcall	.+1604   	; 0x1e72 <sram_write_string>
	sram_clear_line(1);
    182e:	81 e0       	ldi	r24, 0x01	; 1
    1830:	e6 d4       	rcall	.+2508   	; 0x21fe <sram_clear_line>
	oled_goto_line(2);
    1832:	82 e0       	ldi	r24, 0x02	; 2
    1834:	12 d2       	rcall	.+1060   	; 0x1c5a <oled_goto_line>
	strcpy_P(temp,btn_1);
    1836:	60 eb       	ldi	r22, 0xB0	; 176
    1838:	70 e0       	ldi	r23, 0x00	; 0
    183a:	81 ea       	ldi	r24, 0xA1	; 161
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
	sram_write_string(temp);
    1842:	81 ea       	ldi	r24, 0xA1	; 161
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	15 d3       	rcall	.+1578   	; 0x1e72 <sram_write_string>
	sram_update_oled();
    1848:	b0 d4       	rcall	.+2400   	; 0x21aa <sram_update_oled>
	while (!check_flag_right()){
    184a:	08 c0       	rjmp	.+16     	; 0x185c <menu_set_contrast+0x44>
		write_c(0x81);
    184c:	81 e8       	ldi	r24, 0x81	; 129
    184e:	d2 d1       	rcall	.+932    	; 0x1bf4 <write_c>
		write_c(readADC(3)/2);
    1850:	83 e0       	ldi	r24, 0x03	; 3
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	2c d8       	rcall	.-4008   	; 0x8ae <readADC>
    1856:	96 95       	lsr	r25
    1858:	87 95       	ror	r24
    185a:	cc d1       	rcall	.+920    	; 0x1bf4 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_update_oled();
	while (!check_flag_right()){
    185c:	72 d8       	rcall	.-3868   	; 0x942 <check_flag_right>
    185e:	88 23       	and	r24, r24
    1860:	a9 f3       	breq	.-22     	; 0x184c <menu_set_contrast+0x34>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
}
    1862:	08 95       	ret

00001864 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
    1864:	0f 93       	push	r16
    1866:	1f 93       	push	r17
    1868:	cf 93       	push	r28
    186a:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
    186c:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
    186e:	8c 2f       	mov	r24, r28
    1870:	c6 d4       	rcall	.+2444   	; 0x21fe <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
    1872:	cf 5f       	subi	r28, 0xFF	; 255
    1874:	c7 30       	cpi	r28, 0x07	; 7
    1876:	d9 f7       	brne	.-10     	; 0x186e <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
    1878:	80 e0       	ldi	r24, 0x00	; 0
    187a:	ef d1       	rcall	.+990    	; 0x1c5a <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
    187c:	69 e9       	ldi	r22, 0x99	; 153
    187e:	70 e0       	ldi	r23, 0x00	; 0
    1880:	81 ea       	ldi	r24, 0xA1	; 161
    1882:	92 e0       	ldi	r25, 0x02	; 2
    1884:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
	sram_write_string(temp);
    1888:	81 ea       	ldi	r24, 0xA1	; 161
    188a:	92 e0       	ldi	r25, 0x02	; 2
    188c:	f2 d2       	rcall	.+1508   	; 0x1e72 <sram_write_string>
	oled_goto_line(2);
    188e:	82 e0       	ldi	r24, 0x02	; 2
    1890:	e4 d1       	rcall	.+968    	; 0x1c5a <oled_goto_line>
	strcpy_P(temp,btn_1);
    1892:	60 eb       	ldi	r22, 0xB0	; 176
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	81 ea       	ldi	r24, 0xA1	; 161
    1898:	92 e0       	ldi	r25, 0x02	; 2
    189a:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
	sram_write_string(temp);
    189e:	81 ea       	ldi	r24, 0xA1	; 161
    18a0:	92 e0       	ldi	r25, 0x02	; 2
    18a2:	e7 d2       	rcall	.+1486   	; 0x1e72 <sram_write_string>
	sram_update_oled();
    18a4:	82 d4       	rcall	.+2308   	; 0x21aa <sram_update_oled>
	while (!check_flag_right()){
    18a6:	4d d8       	rcall	.-3942   	; 0x942 <check_flag_right>
    18a8:	88 23       	and	r24, r24
    18aa:	e9 f3       	breq	.-6      	; 0x18a6 <menu_calibrate_joystick+0x42>
		
	}
	
	
	oled_clear_line(0);
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	f4 d1       	rcall	.+1000   	; 0x1c98 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
    18b0:	6b e8       	ldi	r22, 0x8B	; 139
    18b2:	70 e0       	ldi	r23, 0x00	; 0
    18b4:	81 ea       	ldi	r24, 0xA1	; 161
    18b6:	92 e0       	ldi	r25, 0x02	; 2
    18b8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
	sram_write_string(temp);
    18bc:	81 ea       	ldi	r24, 0xA1	; 161
    18be:	92 e0       	ldi	r25, 0x02	; 2
    18c0:	d8 d2       	rcall	.+1456   	; 0x1e72 <sram_write_string>
    18c2:	c0 e7       	ldi	r28, 0x70	; 112
    18c4:	d0 e0       	ldi	r29, 0x00	; 0
    18c6:	08 e7       	ldi	r16, 0x78	; 120
    18c8:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	e5 d1       	rcall	.+970    	; 0x1c98 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
    18ce:	fe 01       	movw	r30, r28
    18d0:	65 91       	lpm	r22, Z+
    18d2:	74 91       	lpm	r23, Z
    18d4:	81 ea       	ldi	r24, 0xA1	; 161
    18d6:	92 e0       	ldi	r25, 0x02	; 2
    18d8:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
		sram_write_string(temp);
    18dc:	81 ea       	ldi	r24, 0xA1	; 161
    18de:	92 e0       	ldi	r25, 0x02	; 2
    18e0:	c8 d2       	rcall	.+1424   	; 0x1e72 <sram_write_string>
		sram_update_oled();
    18e2:	63 d4       	rcall	.+2246   	; 0x21aa <sram_update_oled>
		while (!check_flag_right()){
    18e4:	2e d8       	rcall	.-4004   	; 0x942 <check_flag_right>
    18e6:	88 23       	and	r24, r24
    18e8:	e9 f3       	breq	.-6      	; 0x18e4 <menu_calibrate_joystick+0x80>
    18ea:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
    18ec:	c0 17       	cp	r28, r16
    18ee:	d1 07       	cpc	r29, r17
    18f0:	61 f7       	brne	.-40     	; 0x18ca <menu_calibrate_joystick+0x66>
		while (!check_flag_right()){
			
		}
		
	}
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	1f 91       	pop	r17
    18f8:	0f 91       	pop	r16
    18fa:	08 95       	ret

000018fc <menu_function_selected>:
	return 0;
	
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    18fc:	80 91 81 02 	lds	r24, 0x0281
    1900:	90 91 82 02 	lds	r25, 0x0282
    1904:	22 e0       	ldi	r18, 0x02	; 2
    1906:	8b 3b       	cpi	r24, 0xBB	; 187
    1908:	92 07       	cpc	r25, r18
    190a:	11 f4       	brne	.+4      	; 0x1910 <menu_function_selected+0x14>
		menu_set_contrast();
    190c:	85 cf       	rjmp	.-246    	; 0x1818 <menu_set_contrast>
    190e:	08 95       	ret
	}else if(current_selected == &debug_1){
    1910:	22 e0       	ldi	r18, 0x02	; 2
    1912:	8d 3e       	cpi	r24, 0xED	; 237
    1914:	92 07       	cpc	r25, r18
    1916:	11 f4       	brne	.+4      	; 0x191c <menu_function_selected+0x20>
		menu_calibrate_joystick();
    1918:	a5 cf       	rjmp	.-182    	; 0x1864 <menu_calibrate_joystick>
    191a:	08 95       	ret
	}
	#if FLAPPY == 1
	else if(current_selected == &game_1){
    191c:	22 e0       	ldi	r18, 0x02	; 2
    191e:	87 39       	cpi	r24, 0x97	; 151
    1920:	92 07       	cpc	r25, r18
    1922:	11 f4       	brne	.+4      	; 0x1928 <menu_function_selected+0x2c>
		flappy_main();
    1924:	cb ca       	rjmp	.-2666   	; 0xebc <flappy_main>
    1926:	08 95       	ret
	}
	#endif
	
	#if SQUASH_SIM == 1
	else if(current_selected == &game_0){
    1928:	22 e0       	ldi	r18, 0x02	; 2
    192a:	83 3e       	cpi	r24, 0xE3	; 227
    192c:	92 07       	cpc	r25, r18
    192e:	11 f4       	brne	.+4      	; 0x1934 <menu_function_selected+0x38>
		play_game();
    1930:	f9 cb       	rjmp	.-2062   	; 0x1124 <play_game>
    1932:	08 95       	ret
	}
	#endif
	
	#if HIGHSCORE_ENABLE
	else if(current_selected == &highscore_0){
    1934:	23 e0       	ldi	r18, 0x03	; 3
    1936:	8b 30       	cpi	r24, 0x0B	; 11
    1938:	92 07       	cpc	r25, r18
    193a:	59 f4       	brne	.+22     	; 0x1952 <menu_function_selected+0x56>
		print_highscore(SCOREBOARD_MAIN_GAME);
    193c:	88 e0       	ldi	r24, 0x08	; 8
    193e:	6b d6       	rcall	.+3286   	; 0x2616 <print_highscore>
		while (!(check_flag_left()||check_flag_right()))
    1940:	0e 94 98 04 	call	0x930	; 0x930 <check_flag_left>
    1944:	81 11       	cpse	r24, r1
    1946:	12 c0       	rjmp	.+36     	; 0x196c <menu_function_selected+0x70>
    1948:	0e 94 a1 04 	call	0x942	; 0x942 <check_flag_right>
    194c:	88 23       	and	r24, r24
    194e:	c1 f3       	breq	.-16     	; 0x1940 <menu_function_selected+0x44>
    1950:	08 95       	ret
		{
			
		}
	}
	
	else if(current_selected == &highscore_1){
    1952:	81 50       	subi	r24, 0x01	; 1
    1954:	93 40       	sbci	r25, 0x03	; 3
    1956:	51 f4       	brne	.+20     	; 0x196c <menu_function_selected+0x70>
		print_highscore(SCOREBOARD_FLAPPY_BIRD);
    1958:	80 e0       	ldi	r24, 0x00	; 0
    195a:	5d d6       	rcall	.+3258   	; 0x2616 <print_highscore>
		while (!(check_flag_left()||check_flag_right()))
    195c:	0e 94 98 04 	call	0x930	; 0x930 <check_flag_left>
    1960:	81 11       	cpse	r24, r1
    1962:	04 c0       	rjmp	.+8      	; 0x196c <menu_function_selected+0x70>
    1964:	0e 94 a1 04 	call	0x942	; 0x942 <check_flag_right>
    1968:	88 23       	and	r24, r24
    196a:	c1 f3       	breq	.-16     	; 0x195c <menu_function_selected+0x60>
    196c:	08 95       	ret

0000196e <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
    196e:	89 e5       	ldi	r24, 0x59	; 89
    1970:	0b dd       	rcall	.-1514   	; 0x1388 <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
    1972:	87 34       	cpi	r24, 0x47	; 71
    1974:	91 05       	cpc	r25, r1
    1976:	14 f1       	brlt	.+68     	; 0x19bc <navigate_menu+0x4e>
    1978:	20 91 62 02 	lds	r18, 0x0262
    197c:	24 31       	cpi	r18, 0x14	; 20
    197e:	f4 f0       	brlt	.+60     	; 0x19bc <navigate_menu+0x4e>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    1980:	e0 91 81 02 	lds	r30, 0x0281
    1984:	f0 91 82 02 	lds	r31, 0x0282
    1988:	82 81       	ldd	r24, Z+2	; 0x02
    198a:	93 81       	ldd	r25, Z+3	; 0x03
    198c:	01 97       	sbiw	r24, 0x01	; 1
    198e:	18 16       	cp	r1, r24
    1990:	19 06       	cpc	r1, r25
    1992:	8c f4       	brge	.+34     	; 0x19b6 <navigate_menu+0x48>
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    1998:	04 80       	ldd	r0, Z+4	; 0x04
    199a:	f5 81       	ldd	r31, Z+5	; 0x05
    199c:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    199e:	01 96       	adiw	r24, 0x01	; 1
    19a0:	22 81       	ldd	r18, Z+2	; 0x02
    19a2:	33 81       	ldd	r19, Z+3	; 0x03
    19a4:	21 50       	subi	r18, 0x01	; 1
    19a6:	31 09       	sbc	r19, r1
    19a8:	82 17       	cp	r24, r18
    19aa:	93 07       	cpc	r25, r19
    19ac:	ac f3       	brlt	.-22     	; 0x1998 <navigate_menu+0x2a>
    19ae:	f0 93 82 02 	sts	0x0282, r31
    19b2:	e0 93 81 02 	sts	0x0281, r30
			current_selected = current_selected->ptr_sib_down;
		}
		navigation_counter = 0;
    19b6:	10 92 62 02 	sts	0x0262, r1
    19ba:	1d c0       	rjmp	.+58     	; 0x19f6 <navigate_menu+0x88>
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && navigation_counter >= NAVIGATION_COUNTER_MAX)
    19bc:	8a 3b       	cpi	r24, 0xBA	; 186
    19be:	2f ef       	ldi	r18, 0xFF	; 255
    19c0:	92 07       	cpc	r25, r18
    19c2:	8c f4       	brge	.+34     	; 0x19e6 <navigate_menu+0x78>
    19c4:	20 91 62 02 	lds	r18, 0x0262
    19c8:	24 31       	cpi	r18, 0x14	; 20
    19ca:	6c f0       	brlt	.+26     	; 0x19e6 <navigate_menu+0x78>
	{
		current_selected = current_selected->ptr_sib_down;
    19cc:	e0 91 81 02 	lds	r30, 0x0281
    19d0:	f0 91 82 02 	lds	r31, 0x0282
    19d4:	84 81       	ldd	r24, Z+4	; 0x04
    19d6:	95 81       	ldd	r25, Z+5	; 0x05
    19d8:	90 93 82 02 	sts	0x0282, r25
    19dc:	80 93 81 02 	sts	0x0281, r24
		navigation_counter = 0;
    19e0:	10 92 62 02 	sts	0x0262, r1
    19e4:	08 c0       	rjmp	.+16     	; 0x19f6 <navigate_menu+0x88>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    19e6:	8b 5b       	subi	r24, 0xBB	; 187
    19e8:	9f 4f       	sbci	r25, 0xFF	; 255
    19ea:	8b 38       	cpi	r24, 0x8B	; 139
    19ec:	91 05       	cpc	r25, r1
    19ee:	18 f4       	brcc	.+6      	; 0x19f6 <navigate_menu+0x88>
		navigation_counter = NAVIGATION_COUNTER_MAX - 1;
    19f0:	83 e1       	ldi	r24, 0x13	; 19
    19f2:	80 93 62 02 	sts	0x0262, r24
	}
	if (check_flag_right())
    19f6:	0e 94 a1 04 	call	0x942	; 0x942 <check_flag_right>
    19fa:	88 23       	and	r24, r24
    19fc:	99 f0       	breq	.+38     	; 0x1a24 <navigate_menu+0xb6>
	{
		if(current_selected->ptr_child != NULL){
    19fe:	e0 91 81 02 	lds	r30, 0x0281
    1a02:	f0 91 82 02 	lds	r31, 0x0282
    1a06:	86 81       	ldd	r24, Z+6	; 0x06
    1a08:	97 81       	ldd	r25, Z+7	; 0x07
    1a0a:	00 97       	sbiw	r24, 0x00	; 0
    1a0c:	49 f0       	breq	.+18     	; 0x1a20 <navigate_menu+0xb2>
			current_head = current_selected->ptr_child;
    1a0e:	90 93 80 02 	sts	0x0280, r25
    1a12:	80 93 7f 02 	sts	0x027F, r24
			current_selected = current_selected->ptr_child;
    1a16:	90 93 82 02 	sts	0x0282, r25
    1a1a:	80 93 81 02 	sts	0x0281, r24
    1a1e:	1c c0       	rjmp	.+56     	; 0x1a58 <navigate_menu+0xea>
		}else{
			menu_function_selected();
    1a20:	6d df       	rcall	.-294    	; 0x18fc <menu_function_selected>
    1a22:	1a c0       	rjmp	.+52     	; 0x1a58 <navigate_menu+0xea>
		}
	}else if (check_flag_left()){
    1a24:	0e 94 98 04 	call	0x930	; 0x930 <check_flag_left>
    1a28:	88 23       	and	r24, r24
    1a2a:	b1 f0       	breq	.+44     	; 0x1a58 <navigate_menu+0xea>
		if (current_selected->ptr_parent != NULL){
    1a2c:	e0 91 81 02 	lds	r30, 0x0281
    1a30:	f0 91 82 02 	lds	r31, 0x0282
    1a34:	80 85       	ldd	r24, Z+8	; 0x08
    1a36:	91 85       	ldd	r25, Z+9	; 0x09
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	71 f0       	breq	.+28     	; 0x1a58 <navigate_menu+0xea>
			current_head = current_head->ptr_parent;
    1a3c:	e0 91 7f 02 	lds	r30, 0x027F
    1a40:	f0 91 80 02 	lds	r31, 0x0280
    1a44:	20 85       	ldd	r18, Z+8	; 0x08
    1a46:	31 85       	ldd	r19, Z+9	; 0x09
    1a48:	30 93 80 02 	sts	0x0280, r19
    1a4c:	20 93 7f 02 	sts	0x027F, r18
			current_selected = current_selected->ptr_parent;
    1a50:	90 93 82 02 	sts	0x0282, r25
    1a54:	80 93 81 02 	sts	0x0281, r24
		}
	}
	return 0;
	
}
    1a58:	80 e0       	ldi	r24, 0x00	; 0
    1a5a:	90 e0       	ldi	r25, 0x00	; 0
    1a5c:	08 95       	ret

00001a5e <menu_update>:
	current_selected = &mainmenu_start;
	
}

int8_t navigation_counter = 0;
void menu_update(void){
    1a5e:	0f 93       	push	r16
    1a60:	1f 93       	push	r17
    1a62:	cf 93       	push	r28
    1a64:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    1a66:	83 df       	rcall	.-250    	; 0x196e <navigate_menu>
    1a68:	89 2b       	or	r24, r25
    1a6a:	09 f0       	breq	.+2      	; 0x1a6e <menu_update+0x10>
    1a6c:	44 c0       	rjmp	.+136    	; 0x1af6 <menu_update+0x98>
    1a6e:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    1a70:	8c 2f       	mov	r24, r28
    1a72:	c5 d3       	rcall	.+1930   	; 0x21fe <sram_clear_line>
    1a74:	cf 5f       	subi	r28, 0xFF	; 255
int8_t navigation_counter = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    1a76:	c7 30       	cpi	r28, 0x07	; 7
    1a78:	d9 f7       	brne	.-10     	; 0x1a70 <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    1a7a:	e0 91 7f 02 	lds	r30, 0x027F
    1a7e:	f0 91 80 02 	lds	r31, 0x0280
    1a82:	82 81       	ldd	r24, Z+2	; 0x02
    1a84:	93 81       	ldd	r25, Z+3	; 0x03
    1a86:	18 16       	cp	r1, r24
    1a88:	19 06       	cpc	r1, r25
    1a8a:	ac f5       	brge	.+106    	; 0x1af6 <menu_update+0x98>
    1a8c:	c0 e0       	ldi	r28, 0x00	; 0
    1a8e:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1a90:	10 e8       	ldi	r17, 0x80	; 128
    1a92:	01 e8       	ldi	r16, 0x81	; 129
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    1a94:	8c 2f       	mov	r24, r28
    1a96:	e1 d0       	rcall	.+450    	; 0x1c5a <oled_goto_line>
			oled_goto_column(0);
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	fa d0       	rcall	.+500    	; 0x1c90 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    1a9c:	e0 91 7f 02 	lds	r30, 0x027F
    1aa0:	f0 91 80 02 	lds	r31, 0x0280
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	81 ea       	ldi	r24, 0xA1	; 161
    1aaa:	92 e0       	ldi	r25, 0x02	; 2
    1aac:	0e 94 a7 16 	call	0x2d4e	; 0x2d4e <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    1ab0:	20 91 7f 02 	lds	r18, 0x027F
    1ab4:	30 91 80 02 	lds	r19, 0x0280
    1ab8:	80 91 81 02 	lds	r24, 0x0281
    1abc:	90 91 82 02 	lds	r25, 0x0282
    1ac0:	28 17       	cp	r18, r24
    1ac2:	39 07       	cpc	r19, r25
    1ac4:	11 f4       	brne	.+4      	; 0x1aca <menu_update+0x6c>
    1ac6:	80 2f       	mov	r24, r16
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <menu_update+0x6e>
    1aca:	81 2f       	mov	r24, r17
    1acc:	89 d1       	rcall	.+786    	; 0x1de0 <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    1ace:	81 ea       	ldi	r24, 0xA1	; 161
    1ad0:	92 e0       	ldi	r25, 0x02	; 2
    1ad2:	cf d1       	rcall	.+926    	; 0x1e72 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    1ad4:	e0 91 7f 02 	lds	r30, 0x027F
    1ad8:	f0 91 80 02 	lds	r31, 0x0280
    1adc:	04 80       	ldd	r0, Z+4	; 0x04
    1ade:	f5 81       	ldd	r31, Z+5	; 0x05
    1ae0:	e0 2d       	mov	r30, r0
    1ae2:	f0 93 80 02 	sts	0x0280, r31
    1ae6:	e0 93 7f 02 	sts	0x027F, r30
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		for (int i = 0; i < current_head->n_sib; i++)
    1aea:	21 96       	adiw	r28, 0x01	; 1
    1aec:	82 81       	ldd	r24, Z+2	; 0x02
    1aee:	93 81       	ldd	r25, Z+3	; 0x03
    1af0:	c8 17       	cp	r28, r24
    1af2:	d9 07       	cpc	r29, r25
    1af4:	7c f2       	brlt	.-98     	; 0x1a94 <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    1af6:	4e d5       	rcall	.+2716   	; 0x2594 <timer_check_flag>
    1af8:	88 23       	and	r24, r24
    1afa:	51 f0       	breq	.+20     	; 0x1b10 <menu_update+0xb2>
		navigation_counter++;
    1afc:	80 91 62 02 	lds	r24, 0x0262
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 62 02 	sts	0x0262, r24
		sram_update_oled();
    1b06:	51 d3       	rcall	.+1698   	; 0x21aa <sram_update_oled>
		timer_disable_flag();
    1b08:	4e d5       	rcall	.+2716   	; 0x25a6 <timer_disable_flag>
		sram_scroll_line(7,1);
    1b0a:	61 e0       	ldi	r22, 0x01	; 1
    1b0c:	87 e0       	ldi	r24, 0x07	; 7
    1b0e:	03 d4       	rcall	.+2054   	; 0x2316 <sram_scroll_line>
	}
}
    1b10:	df 91       	pop	r29
    1b12:	cf 91       	pop	r28
    1b14:	1f 91       	pop	r17
    1b16:	0f 91       	pop	r16
    1b18:	08 95       	ret

00001b1a <bootscreen>:

void bootscreen(void){
	int x = 24;
	int y = 61;
	
	sram_set_point(x-15,y);
    1b1a:	6d e3       	ldi	r22, 0x3D	; 61
    1b1c:	89 e0       	ldi	r24, 0x09	; 9
    1b1e:	05 d5       	rcall	.+2570   	; 0x252a <sram_set_point>
	sram_draw_line(x-15,y-60);//letter G
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	89 e0       	ldi	r24, 0x09	; 9
    1b24:	0f d3       	rcall	.+1566   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+15,y-60);
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	87 e2       	ldi	r24, 0x27	; 39
    1b2a:	0c d3       	rcall	.+1560   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+15,y-48);
    1b2c:	6d e0       	ldi	r22, 0x0D	; 13
    1b2e:	87 e2       	ldi	r24, 0x27	; 39
    1b30:	09 d3       	rcall	.+1554   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-6,y-48);
    1b32:	6d e0       	ldi	r22, 0x0D	; 13
    1b34:	82 e1       	ldi	r24, 0x12	; 18
    1b36:	06 d3       	rcall	.+1548   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-6,y-12);
    1b38:	61 e3       	ldi	r22, 0x31	; 49
    1b3a:	82 e1       	ldi	r24, 0x12	; 18
    1b3c:	03 d3       	rcall	.+1542   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+6,y-12);
    1b3e:	61 e3       	ldi	r22, 0x31	; 49
    1b40:	8e e1       	ldi	r24, 0x1E	; 30
    1b42:	00 d3       	rcall	.+1536   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+6,y-36);
    1b44:	69 e1       	ldi	r22, 0x19	; 25
    1b46:	8e e1       	ldi	r24, 0x1E	; 30
    1b48:	fd d2       	rcall	.+1530   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+15,y-36);
    1b4a:	69 e1       	ldi	r22, 0x19	; 25
    1b4c:	87 e2       	ldi	r24, 0x27	; 39
    1b4e:	fa d2       	rcall	.+1524   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+15,y);
    1b50:	6d e3       	ldi	r22, 0x3D	; 61
    1b52:	87 e2       	ldi	r24, 0x27	; 39
    1b54:	f7 d2       	rcall	.+1518   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-15,y);//end of letter
    1b56:	6d e3       	ldi	r22, 0x3D	; 61
    1b58:	89 e0       	ldi	r24, 0x09	; 9
    1b5a:	f4 d2       	rcall	.+1512   	; 0x2144 <sram_draw_line>
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    1b5c:	21 e0       	ldi	r18, 0x01	; 1
    1b5e:	45 e4       	ldi	r20, 0x45	; 69
    1b60:	6d e3       	ldi	r22, 0x3D	; 61
    1b62:	8b e3       	ldi	r24, 0x3B	; 59
    1b64:	e7 d4       	rcall	.+2510   	; 0x2534 <sram_draw_rectangle>

	x += 40;
	sram_set_point(x+15,y-60);//number 7
    1b66:	61 e0       	ldi	r22, 0x01	; 1
    1b68:	87 e7       	ldi	r24, 0x77	; 119
    1b6a:	df d4       	rcall	.+2494   	; 0x252a <sram_set_point>
	sram_draw_line(x-15,y-60);
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	89 e5       	ldi	r24, 0x59	; 89
    1b70:	e9 d2       	rcall	.+1490   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-12,y-48);
    1b72:	6d e0       	ldi	r22, 0x0D	; 13
    1b74:	8c e5       	ldi	r24, 0x5C	; 92
    1b76:	e6 d2       	rcall	.+1484   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+6,y-48);
    1b78:	6d e0       	ldi	r22, 0x0D	; 13
    1b7a:	8e e6       	ldi	r24, 0x6E	; 110
    1b7c:	e3 d2       	rcall	.+1478   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+3,y-36);
    1b7e:	69 e1       	ldi	r22, 0x19	; 25
    1b80:	8b e6       	ldi	r24, 0x6B	; 107
    1b82:	e0 d2       	rcall	.+1472   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-9,y-36);
    1b84:	69 e1       	ldi	r22, 0x19	; 25
    1b86:	8f e5       	ldi	r24, 0x5F	; 95
    1b88:	dd d2       	rcall	.+1466   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-6,y-24);
    1b8a:	65 e2       	ldi	r22, 0x25	; 37
    1b8c:	82 e6       	ldi	r24, 0x62	; 98
    1b8e:	da d2       	rcall	.+1460   	; 0x2144 <sram_draw_line>
	sram_draw_line(x,y-24);
    1b90:	65 e2       	ldi	r22, 0x25	; 37
    1b92:	88 e6       	ldi	r24, 0x68	; 104
    1b94:	d7 d2       	rcall	.+1454   	; 0x2144 <sram_draw_line>
	sram_draw_line(x-3,y-12);
    1b96:	61 e3       	ldi	r22, 0x31	; 49
    1b98:	85 e6       	ldi	r24, 0x65	; 101
    1b9a:	d4 d2       	rcall	.+1448   	; 0x2144 <sram_draw_line>
	sram_draw_line(x,y);
    1b9c:	6d e3       	ldi	r22, 0x3D	; 61
    1b9e:	88 e6       	ldi	r24, 0x68	; 104
    1ba0:	d1 d2       	rcall	.+1442   	; 0x2144 <sram_draw_line>
	sram_draw_line(x+15,y-60);//end of number
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	87 e7       	ldi	r24, 0x77	; 119
    1ba6:	ce d2       	rcall	.+1436   	; 0x2144 <sram_draw_line>
	
	sram_update_oled();
    1ba8:	00 d3       	rcall	.+1536   	; 0x21aa <sram_update_oled>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1baa:	2f ef       	ldi	r18, 0xFF	; 255
    1bac:	8f ef       	ldi	r24, 0xFF	; 255
    1bae:	9e e0       	ldi	r25, 0x0E	; 14
    1bb0:	21 50       	subi	r18, 0x01	; 1
    1bb2:	80 40       	sbci	r24, 0x00	; 0
    1bb4:	90 40       	sbci	r25, 0x00	; 0
    1bb6:	e1 f7       	brne	.-8      	; 0x1bb0 <bootscreen+0x96>
    1bb8:	00 c0       	rjmp	.+0      	; 0x1bba <bootscreen+0xa0>
    1bba:	00 00       	nop
	_delay_ms(1000);
	sram_init();
    1bbc:	ff d2       	rcall	.+1534   	; 0x21bc <sram_init>
	sram_update_oled();
    1bbe:	f5 c2       	rjmp	.+1514   	; 0x21aa <sram_update_oled>
    1bc0:	08 95       	ret

00001bc2 <init_all>:
    }
    
}

void init_all(void){
	cli();
    1bc2:	f8 94       	cli
	init_UART();
    1bc4:	0e 94 4b 04 	call	0x896	; 0x896 <init_UART>
	#if UART_ENABLE
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
	#endif
	BIT_ON(MCUCR,SRE);
    1bc8:	85 b7       	in	r24, 0x35	; 53
    1bca:	80 68       	ori	r24, 0x80	; 128
    1bcc:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);
    1bce:	80 b7       	in	r24, 0x30	; 48
    1bd0:	80 62       	ori	r24, 0x20	; 32
    1bd2:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    1bd4:	7a d0       	rcall	.+244    	; 0x1cca <oled_ini>
	sram_init();
    1bd6:	f2 d2       	rcall	.+1508   	; 0x21bc <sram_init>
	bootscreen();
    1bd8:	a0 df       	rcall	.-192    	; 0x1b1a <bootscreen>
	
	initialize_menu();
    1bda:	94 dc       	rcall	.-1752   	; 0x1504 <initialize_menu>
	
	initialize_control_input();
    1bdc:	79 dc       	rcall	.-1806   	; 0x14d0 <initialize_control_input>
	
	initalize_interrupts();
    1bde:	0e 94 7d 04 	call	0x8fa	; 0x8fa <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    1be2:	8c e3       	ldi	r24, 0x3C	; 60
    1be4:	c3 d4       	rcall	.+2438   	; 0x256c <initialize_timer>
	
	CAN_initialize();
    1be6:	0e 94 c8 02 	call	0x590	; 0x590 <CAN_initialize>
	
	sei();//enable interrupts
    1bea:	78 94       	sei
    1bec:	08 95       	ret

00001bee <main>:


#include "../../common_library/uart.h" //remove
int main(void)
{
	init_all();
    1bee:	e9 df       	rcall	.-46     	; 0x1bc2 <init_all>
	while(1){
		menu_update();
    1bf0:	36 df       	rcall	.-404    	; 0x1a5e <menu_update>
    1bf2:	fe cf       	rjmp	.-4      	; 0x1bf0 <main+0x2>

00001bf4 <write_c>:
void oled_goto_column(uint8_t column){
	col = column%128;
}
void oled_pos(uint8_t row,uint8_t column){
	oled_goto_column(column);
	oled_goto_line(row);
    1bf4:	e0 91 53 01 	lds	r30, 0x0153
    1bf8:	f0 91 54 01 	lds	r31, 0x0154
    1bfc:	80 83       	st	Z, r24
    1bfe:	08 95       	ret

00001c00 <write_d>:
    1c00:	e0 91 51 01 	lds	r30, 0x0151
    1c04:	f0 91 52 01 	lds	r31, 0x0152
    1c08:	80 83       	st	Z, r24
    1c0a:	08 95       	ret

00001c0c <oled_home>:
    1c0c:	10 92 16 03 	sts	0x0316, r1
    1c10:	10 92 15 03 	sts	0x0315, r1
    1c14:	e0 91 53 01 	lds	r30, 0x0153
    1c18:	f0 91 54 01 	lds	r31, 0x0154
    1c1c:	81 e2       	ldi	r24, 0x21	; 33
    1c1e:	80 83       	st	Z, r24
    1c20:	e0 91 53 01 	lds	r30, 0x0153
    1c24:	f0 91 54 01 	lds	r31, 0x0154
    1c28:	10 82       	st	Z, r1
    1c2a:	e0 91 53 01 	lds	r30, 0x0153
    1c2e:	f0 91 54 01 	lds	r31, 0x0154
    1c32:	8f e7       	ldi	r24, 0x7F	; 127
    1c34:	80 83       	st	Z, r24
    1c36:	e0 91 53 01 	lds	r30, 0x0153
    1c3a:	f0 91 54 01 	lds	r31, 0x0154
    1c3e:	82 e2       	ldi	r24, 0x22	; 34
    1c40:	80 83       	st	Z, r24
    1c42:	e0 91 53 01 	lds	r30, 0x0153
    1c46:	f0 91 54 01 	lds	r31, 0x0154
    1c4a:	10 82       	st	Z, r1
    1c4c:	e0 91 53 01 	lds	r30, 0x0153
    1c50:	f0 91 54 01 	lds	r31, 0x0154
    1c54:	87 e0       	ldi	r24, 0x07	; 7
    1c56:	80 83       	st	Z, r24
    1c58:	08 95       	ret

00001c5a <oled_goto_line>:
    1c5a:	cf 93       	push	r28
    1c5c:	c8 2f       	mov	r28, r24
    1c5e:	d6 df       	rcall	.-84     	; 0x1c0c <oled_home>
    1c60:	c0 93 16 03 	sts	0x0316, r28
    1c64:	8c 2f       	mov	r24, r28
    1c66:	87 70       	andi	r24, 0x07	; 7
    1c68:	89 f0       	breq	.+34     	; 0x1c8c <oled_goto_line+0x32>
    1c6a:	e0 91 53 01 	lds	r30, 0x0153
    1c6e:	f0 91 54 01 	lds	r31, 0x0154
    1c72:	10 82       	st	Z, r1
    1c74:	e0 91 53 01 	lds	r30, 0x0153
    1c78:	f0 91 54 01 	lds	r31, 0x0154
    1c7c:	80 e1       	ldi	r24, 0x10	; 16
    1c7e:	80 83       	st	Z, r24
    1c80:	c0 6b       	ori	r28, 0xB0	; 176
    1c82:	e0 91 53 01 	lds	r30, 0x0153
    1c86:	f0 91 54 01 	lds	r31, 0x0154
    1c8a:	c0 83       	st	Z, r28
    1c8c:	cf 91       	pop	r28
    1c8e:	08 95       	ret

00001c90 <oled_goto_column>:
    1c90:	8f 77       	andi	r24, 0x7F	; 127
    1c92:	80 93 15 03 	sts	0x0315, r24
    1c96:	08 95       	ret

00001c98 <oled_clear_line>:
}

void oled_clear_line(uint8_t line){
    1c98:	cf 93       	push	r28
    1c9a:	c8 2f       	mov	r28, r24
	oled_goto_line(line);
    1c9c:	de df       	rcall	.-68     	; 0x1c5a <oled_goto_line>
	if(line < 8){
    1c9e:	c8 30       	cpi	r28, 0x08	; 8
    1ca0:	48 f4       	brcc	.+18     	; 0x1cb4 <oled_clear_line+0x1c>
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
}


void write_d(uint8_t data)
{
	*oled_data = data;
    1ca4:	e0 91 51 01 	lds	r30, 0x0151
    1ca8:	f0 91 52 01 	lds	r31, 0x0152
    1cac:	10 82       	st	Z, r1
}

void oled_clear_line(uint8_t line){
	oled_goto_line(line);
	if(line < 8){
		for(uint8_t i = 0; i < 128; i++){
    1cae:	8f 5f       	subi	r24, 0xFF	; 255
    1cb0:	80 38       	cpi	r24, 0x80	; 128
    1cb2:	c1 f7       	brne	.-16     	; 0x1ca4 <oled_clear_line+0xc>
			write_d(0b00000000);
		}
	}
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <oled_reset>:
	oled_home();
}


void oled_reset(void)
{		
    1cb8:	cf 93       	push	r28
	for(uint8_t i = 0; i < 8;i++){
    1cba:	c0 e0       	ldi	r28, 0x00	; 0
		oled_clear_line(i);
    1cbc:	8c 2f       	mov	r24, r28
    1cbe:	ec df       	rcall	.-40     	; 0x1c98 <oled_clear_line>
}


void oled_reset(void)
{		
	for(uint8_t i = 0; i < 8;i++){
    1cc0:	cf 5f       	subi	r28, 0xFF	; 255
    1cc2:	c8 30       	cpi	r28, 0x08	; 8
    1cc4:	d9 f7       	brne	.-10     	; 0x1cbc <oled_reset+0x4>
		oled_clear_line(i);
	}
}
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <oled_ini>:
	
}
void oled_ini(void)
{
	//Enable the external memory interface
	MCUCR |= (1<<SRE);
    1cca:	85 b7       	in	r24, 0x35	; 53
    1ccc:	80 68       	ori	r24, 0x80	; 128
    1cce:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
    1cd0:	80 b7       	in	r24, 0x30	; 48
    1cd2:	80 62       	ori	r24, 0x20	; 32
    1cd4:	80 bf       	out	0x30, r24	; 48

uint8_t page,col;

void write_c(uint8_t cmd)
{
	*oled_cmd = cmd;
    1cd6:	e0 91 53 01 	lds	r30, 0x0153
    1cda:	f0 91 54 01 	lds	r31, 0x0154
    1cde:	8e ea       	ldi	r24, 0xAE	; 174
    1ce0:	80 83       	st	Z, r24
    1ce2:	e0 91 53 01 	lds	r30, 0x0153
    1ce6:	f0 91 54 01 	lds	r31, 0x0154
    1cea:	81 ea       	ldi	r24, 0xA1	; 161
    1cec:	80 83       	st	Z, r24
    1cee:	e0 91 53 01 	lds	r30, 0x0153
    1cf2:	f0 91 54 01 	lds	r31, 0x0154
    1cf6:	8a ed       	ldi	r24, 0xDA	; 218
    1cf8:	80 83       	st	Z, r24
    1cfa:	e0 91 53 01 	lds	r30, 0x0153
    1cfe:	f0 91 54 01 	lds	r31, 0x0154
    1d02:	82 e1       	ldi	r24, 0x12	; 18
    1d04:	80 83       	st	Z, r24
    1d06:	e0 91 53 01 	lds	r30, 0x0153
    1d0a:	f0 91 54 01 	lds	r31, 0x0154
    1d0e:	88 ec       	ldi	r24, 0xC8	; 200
    1d10:	80 83       	st	Z, r24
    1d12:	e0 91 53 01 	lds	r30, 0x0153
    1d16:	f0 91 54 01 	lds	r31, 0x0154
    1d1a:	88 ea       	ldi	r24, 0xA8	; 168
    1d1c:	80 83       	st	Z, r24
    1d1e:	e0 91 53 01 	lds	r30, 0x0153
    1d22:	f0 91 54 01 	lds	r31, 0x0154
    1d26:	8f e3       	ldi	r24, 0x3F	; 63
    1d28:	80 83       	st	Z, r24
    1d2a:	e0 91 53 01 	lds	r30, 0x0153
    1d2e:	f0 91 54 01 	lds	r31, 0x0154
    1d32:	85 ed       	ldi	r24, 0xD5	; 213
    1d34:	80 83       	st	Z, r24
    1d36:	e0 91 53 01 	lds	r30, 0x0153
    1d3a:	f0 91 54 01 	lds	r31, 0x0154
    1d3e:	80 e8       	ldi	r24, 0x80	; 128
    1d40:	80 83       	st	Z, r24
    1d42:	e0 91 53 01 	lds	r30, 0x0153
    1d46:	f0 91 54 01 	lds	r31, 0x0154
    1d4a:	81 e8       	ldi	r24, 0x81	; 129
    1d4c:	80 83       	st	Z, r24
    1d4e:	e0 91 53 01 	lds	r30, 0x0153
    1d52:	f0 91 54 01 	lds	r31, 0x0154
    1d56:	80 e5       	ldi	r24, 0x50	; 80
    1d58:	80 83       	st	Z, r24
    1d5a:	e0 91 53 01 	lds	r30, 0x0153
    1d5e:	f0 91 54 01 	lds	r31, 0x0154
    1d62:	89 ed       	ldi	r24, 0xD9	; 217
    1d64:	80 83       	st	Z, r24
    1d66:	e0 91 53 01 	lds	r30, 0x0153
    1d6a:	f0 91 54 01 	lds	r31, 0x0154
    1d6e:	81 e2       	ldi	r24, 0x21	; 33
    1d70:	80 83       	st	Z, r24
    1d72:	e0 91 53 01 	lds	r30, 0x0153
    1d76:	f0 91 54 01 	lds	r31, 0x0154
    1d7a:	80 e2       	ldi	r24, 0x20	; 32
    1d7c:	80 83       	st	Z, r24
    1d7e:	e0 91 53 01 	lds	r30, 0x0153
    1d82:	f0 91 54 01 	lds	r31, 0x0154
    1d86:	10 82       	st	Z, r1
    1d88:	e0 91 53 01 	lds	r30, 0x0153
    1d8c:	f0 91 54 01 	lds	r31, 0x0154
    1d90:	8b ed       	ldi	r24, 0xDB	; 219
    1d92:	80 83       	st	Z, r24
    1d94:	e0 91 53 01 	lds	r30, 0x0153
    1d98:	f0 91 54 01 	lds	r31, 0x0154
    1d9c:	80 e3       	ldi	r24, 0x30	; 48
    1d9e:	80 83       	st	Z, r24
    1da0:	e0 91 53 01 	lds	r30, 0x0153
    1da4:	f0 91 54 01 	lds	r31, 0x0154
    1da8:	8d ea       	ldi	r24, 0xAD	; 173
    1daa:	80 83       	st	Z, r24
    1dac:	e0 91 53 01 	lds	r30, 0x0153
    1db0:	f0 91 54 01 	lds	r31, 0x0154
    1db4:	10 82       	st	Z, r1
    1db6:	e0 91 53 01 	lds	r30, 0x0153
    1dba:	f0 91 54 01 	lds	r31, 0x0154
    1dbe:	84 ea       	ldi	r24, 0xA4	; 164
    1dc0:	80 83       	st	Z, r24
    1dc2:	e0 91 53 01 	lds	r30, 0x0153
    1dc6:	f0 91 54 01 	lds	r31, 0x0154
    1dca:	86 ea       	ldi	r24, 0xA6	; 166
    1dcc:	80 83       	st	Z, r24
    1dce:	e0 91 53 01 	lds	r30, 0x0153
    1dd2:	f0 91 54 01 	lds	r31, 0x0154
    1dd6:	8f ea       	ldi	r24, 0xAF	; 175
    1dd8:	80 83       	st	Z, r24
	write_c(0x00);
	write_c(0xa4);        //out  follows  RAM  content
	write_c(0xa6);        //set  normal  display
	write_c(0xaf);        //  display  on
	
	oled_reset();
    1dda:	6e df       	rcall	.-292    	; 0x1cb8 <oled_reset>
	oled_home();
    1ddc:	17 cf       	rjmp	.-466    	; 0x1c0c <oled_home>
    1dde:	08 95       	ret

00001de0 <sram_write_char>:
void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_set_point(x0,y0);
	sram_draw_line(x1,y1);
	sram_draw_line(x2,y2);
	sram_draw_line(x0,y0);
}
    1de0:	8a 30       	cpi	r24, 0x0A	; 10
    1de2:	61 f4       	brne	.+24     	; 0x1dfc <sram_write_char+0x1c>
    1de4:	80 91 16 03 	lds	r24, 0x0316
    1de8:	90 e0       	ldi	r25, 0x00	; 0
    1dea:	01 96       	adiw	r24, 0x01	; 1
    1dec:	87 70       	andi	r24, 0x07	; 7
    1dee:	90 78       	andi	r25, 0x80	; 128
    1df0:	80 93 16 03 	sts	0x0316, r24
    1df4:	10 92 15 03 	sts	0x0315, r1
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	08 95       	ret
    1dfc:	88 23       	and	r24, r24
    1dfe:	39 f1       	breq	.+78     	; 0x1e4e <sram_write_char+0x6e>
    1e00:	e8 2f       	mov	r30, r24
    1e02:	f0 e0       	ldi	r31, 0x00	; 0
    1e04:	ee 0f       	add	r30, r30
    1e06:	ff 1f       	adc	r31, r31
    1e08:	ee 0f       	add	r30, r30
    1e0a:	ff 1f       	adc	r31, r31
    1e0c:	ee 0f       	add	r30, r30
    1e0e:	ff 1f       	adc	r31, r31
    1e10:	e0 5d       	subi	r30, 0xD0	; 208
    1e12:	ff 4f       	sbci	r31, 0xFF	; 255
    1e14:	28 e0       	ldi	r18, 0x08	; 8
    1e16:	80 91 16 03 	lds	r24, 0x0316
    1e1a:	a0 91 15 03 	lds	r26, 0x0315
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	90 e8       	ldi	r25, 0x80	; 128
    1e22:	89 9f       	mul	r24, r25
    1e24:	a0 0d       	add	r26, r0
    1e26:	b1 1d       	adc	r27, r1
    1e28:	11 24       	eor	r1, r1
    1e2a:	80 91 55 01 	lds	r24, 0x0155
    1e2e:	90 91 56 01 	lds	r25, 0x0156
    1e32:	a8 0f       	add	r26, r24
    1e34:	b9 1f       	adc	r27, r25
    1e36:	84 91       	lpm	r24, Z
    1e38:	8c 93       	st	X, r24
    1e3a:	80 91 15 03 	lds	r24, 0x0315
    1e3e:	8f 5f       	subi	r24, 0xFF	; 255
    1e40:	80 93 15 03 	sts	0x0315, r24
    1e44:	21 50       	subi	r18, 0x01	; 1
    1e46:	31 96       	adiw	r30, 0x01	; 1
    1e48:	21 11       	cpse	r18, r1
    1e4a:	e5 cf       	rjmp	.-54     	; 0x1e16 <sram_write_char+0x36>
    1e4c:	02 c0       	rjmp	.+4      	; 0x1e52 <sram_write_char+0x72>
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	08 95       	ret
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	08 95       	ret

00001e56 <sram_goto_line>:
    1e56:	cf 93       	push	r28
    1e58:	c8 2f       	mov	r28, r24
    1e5a:	ff de       	rcall	.-514    	; 0x1c5a <oled_goto_line>
    1e5c:	c0 93 16 03 	sts	0x0316, r28
    1e60:	cf 91       	pop	r28
    1e62:	08 95       	ret

00001e64 <sram_goto_column>:
    1e64:	cf 93       	push	r28
    1e66:	c8 2f       	mov	r28, r24
    1e68:	13 df       	rcall	.-474    	; 0x1c90 <oled_goto_column>
    1e6a:	c0 93 15 03 	sts	0x0315, r28
    1e6e:	cf 91       	pop	r28
    1e70:	08 95       	ret

00001e72 <sram_write_string>:
    1e72:	1f 93       	push	r17
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	11 e0       	ldi	r17, 0x01	; 1
    1e7e:	18 0f       	add	r17, r24
    1e80:	fe 01       	movw	r30, r28
    1e82:	e8 0f       	add	r30, r24
    1e84:	f1 1d       	adc	r31, r1
    1e86:	80 81       	ld	r24, Z
    1e88:	ab df       	rcall	.-170    	; 0x1de0 <sram_write_char>
    1e8a:	88 23       	and	r24, r24
    1e8c:	11 f0       	breq	.+4      	; 0x1e92 <sram_write_string+0x20>
    1e8e:	81 2f       	mov	r24, r17
    1e90:	f5 cf       	rjmp	.-22     	; 0x1e7c <sram_write_string+0xa>
    1e92:	df 91       	pop	r29
    1e94:	cf 91       	pop	r28
    1e96:	1f 91       	pop	r17
    1e98:	08 95       	ret

00001e9a <sram_write_int>:
    1e9a:	cf 93       	push	r28
    1e9c:	18 16       	cp	r1, r24
    1e9e:	19 06       	cpc	r1, r25
    1ea0:	4c f4       	brge	.+18     	; 0x1eb4 <sram_write_int+0x1a>
    1ea2:	6a e0       	ldi	r22, 0x0A	; 10
    1ea4:	70 e0       	ldi	r23, 0x00	; 0
    1ea6:	60 d6       	rcall	.+3264   	; 0x2b68 <__divmodhi4>
    1ea8:	c8 2f       	mov	r28, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	f6 df       	rcall	.-20     	; 0x1e9a <sram_write_int>
    1eae:	80 e3       	ldi	r24, 0x30	; 48
    1eb0:	8c 0f       	add	r24, r28
    1eb2:	96 df       	rcall	.-212    	; 0x1de0 <sram_write_char>
    1eb4:	cf 91       	pop	r28
    1eb6:	08 95       	ret

00001eb8 <sram_read>:
    1eb8:	87 70       	andi	r24, 0x07	; 7
    1eba:	6f 77       	andi	r22, 0x7F	; 127
    1ebc:	e6 2f       	mov	r30, r22
    1ebe:	f0 e0       	ldi	r31, 0x00	; 0
    1ec0:	90 e8       	ldi	r25, 0x80	; 128
    1ec2:	89 9f       	mul	r24, r25
    1ec4:	e0 0d       	add	r30, r0
    1ec6:	f1 1d       	adc	r31, r1
    1ec8:	11 24       	eor	r1, r1
    1eca:	80 91 55 01 	lds	r24, 0x0155
    1ece:	90 91 56 01 	lds	r25, 0x0156
    1ed2:	e8 0f       	add	r30, r24
    1ed4:	f9 1f       	adc	r31, r25
    1ed6:	80 81       	ld	r24, Z
    1ed8:	08 95       	ret

00001eda <sram_write_and>:
    1eda:	87 70       	andi	r24, 0x07	; 7
    1edc:	6f 77       	andi	r22, 0x7F	; 127
    1ede:	e6 2f       	mov	r30, r22
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	90 e8       	ldi	r25, 0x80	; 128
    1ee4:	89 9f       	mul	r24, r25
    1ee6:	e0 0d       	add	r30, r0
    1ee8:	f1 1d       	adc	r31, r1
    1eea:	11 24       	eor	r1, r1
    1eec:	80 91 55 01 	lds	r24, 0x0155
    1ef0:	90 91 56 01 	lds	r25, 0x0156
    1ef4:	e8 0f       	add	r30, r24
    1ef6:	f9 1f       	adc	r31, r25
    1ef8:	80 81       	ld	r24, Z
    1efa:	48 23       	and	r20, r24
    1efc:	40 83       	st	Z, r20
    1efe:	08 95       	ret

00001f00 <sram_write_or>:
    1f00:	87 70       	andi	r24, 0x07	; 7
    1f02:	6f 77       	andi	r22, 0x7F	; 127
    1f04:	e6 2f       	mov	r30, r22
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	90 e8       	ldi	r25, 0x80	; 128
    1f0a:	89 9f       	mul	r24, r25
    1f0c:	e0 0d       	add	r30, r0
    1f0e:	f1 1d       	adc	r31, r1
    1f10:	11 24       	eor	r1, r1
    1f12:	80 91 55 01 	lds	r24, 0x0155
    1f16:	90 91 56 01 	lds	r25, 0x0156
    1f1a:	e8 0f       	add	r30, r24
    1f1c:	f9 1f       	adc	r31, r25
    1f1e:	80 81       	ld	r24, Z
    1f20:	48 2b       	or	r20, r24
    1f22:	40 83       	st	Z, r20
    1f24:	08 95       	ret

00001f26 <sram_pixel>:
    1f26:	96 2f       	mov	r25, r22
    1f28:	88 23       	and	r24, r24
    1f2a:	ac f0       	brlt	.+42     	; 0x1f56 <sram_pixel+0x30>
    1f2c:	60 34       	cpi	r22, 0x40	; 64
    1f2e:	a8 f4       	brcc	.+42     	; 0x1f5a <sram_pixel+0x34>
    1f30:	46 2f       	mov	r20, r22
    1f32:	47 70       	andi	r20, 0x07	; 7
    1f34:	21 e0       	ldi	r18, 0x01	; 1
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	b9 01       	movw	r22, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <sram_pixel+0x1a>
    1f3c:	66 0f       	add	r22, r22
    1f3e:	77 1f       	adc	r23, r23
    1f40:	4a 95       	dec	r20
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <sram_pixel+0x16>
    1f44:	ab 01       	movw	r20, r22
    1f46:	68 2f       	mov	r22, r24
    1f48:	89 2f       	mov	r24, r25
    1f4a:	86 95       	lsr	r24
    1f4c:	86 95       	lsr	r24
    1f4e:	86 95       	lsr	r24
    1f50:	d7 df       	rcall	.-82     	; 0x1f00 <sram_write_or>
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	08 95       	ret
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	08 95       	ret
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	08 95       	ret

00001f5e <sram_draw_new_line>:
    1f5e:	2f 92       	push	r2
    1f60:	3f 92       	push	r3
    1f62:	4f 92       	push	r4
    1f64:	5f 92       	push	r5
    1f66:	6f 92       	push	r6
    1f68:	7f 92       	push	r7
    1f6a:	8f 92       	push	r8
    1f6c:	9f 92       	push	r9
    1f6e:	af 92       	push	r10
    1f70:	bf 92       	push	r11
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	2c 97       	sbiw	r28, 0x0c	; 12
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	de bf       	out	0x3e, r29	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	cd bf       	out	0x3d, r28	; 61
    1f92:	38 2e       	mov	r3, r24
    1f94:	26 2e       	mov	r2, r22
    1f96:	04 2f       	mov	r16, r20
    1f98:	12 2f       	mov	r17, r18
    1f9a:	48 17       	cp	r20, r24
    1f9c:	08 f4       	brcc	.+2      	; 0x1fa0 <sram_draw_new_line+0x42>
    1f9e:	90 c0       	rjmp	.+288    	; 0x20c0 <sram_draw_new_line+0x162>
    1fa0:	84 17       	cp	r24, r20
    1fa2:	09 f4       	brne	.+2      	; 0x1fa6 <sram_draw_new_line+0x48>
    1fa4:	79 c0       	rjmp	.+242    	; 0x2098 <sram_draw_new_line+0x13a>
    1fa6:	86 2e       	mov	r8, r22
    1fa8:	91 2c       	mov	r9, r1
    1faa:	a4 2e       	mov	r10, r20
    1fac:	b1 2c       	mov	r11, r1
    1fae:	48 2e       	mov	r4, r24
    1fb0:	51 2c       	mov	r5, r1
    1fb2:	62 2f       	mov	r22, r18
    1fb4:	70 e0       	ldi	r23, 0x00	; 0
    1fb6:	68 19       	sub	r22, r8
    1fb8:	79 09       	sbc	r23, r9
    1fba:	88 27       	eor	r24, r24
    1fbc:	77 fd       	sbrc	r23, 7
    1fbe:	80 95       	com	r24
    1fc0:	98 2f       	mov	r25, r24
    1fc2:	bb d4       	rcall	.+2422   	; 0x293a <__floatsisf>
    1fc4:	6b 01       	movw	r12, r22
    1fc6:	7c 01       	movw	r14, r24
    1fc8:	b5 01       	movw	r22, r10
    1fca:	64 19       	sub	r22, r4
    1fcc:	75 09       	sbc	r23, r5
    1fce:	88 27       	eor	r24, r24
    1fd0:	77 fd       	sbrc	r23, 7
    1fd2:	80 95       	com	r24
    1fd4:	98 2f       	mov	r25, r24
    1fd6:	b1 d4       	rcall	.+2402   	; 0x293a <__floatsisf>
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	c7 01       	movw	r24, r14
    1fde:	b6 01       	movw	r22, r12
    1fe0:	11 d4       	rcall	.+2082   	; 0x2804 <__divsf3>
    1fe2:	6d 83       	std	Y+5, r22	; 0x05
    1fe4:	7e 83       	std	Y+6, r23	; 0x06
    1fe6:	8f 83       	std	Y+7, r24	; 0x07
    1fe8:	98 87       	std	Y+8, r25	; 0x08
    1fea:	63 2d       	mov	r22, r3
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	80 e0       	ldi	r24, 0x00	; 0
    1ff0:	90 e0       	ldi	r25, 0x00	; 0
    1ff2:	a1 d4       	rcall	.+2370   	; 0x2936 <__floatunsisf>
    1ff4:	6b 01       	movw	r12, r22
    1ff6:	7c 01       	movw	r14, r24
    1ff8:	b5 01       	movw	r22, r10
    1ffa:	88 27       	eor	r24, r24
    1ffc:	77 fd       	sbrc	r23, 7
    1ffe:	80 95       	com	r24
    2000:	98 2f       	mov	r25, r24
    2002:	9b d4       	rcall	.+2358   	; 0x293a <__floatsisf>
    2004:	69 83       	std	Y+1, r22	; 0x01
    2006:	7a 83       	std	Y+2, r23	; 0x02
    2008:	8b 83       	std	Y+3, r24	; 0x03
    200a:	9c 83       	std	Y+4, r25	; 0x04
    200c:	9b 01       	movw	r18, r22
    200e:	ac 01       	movw	r20, r24
    2010:	c7 01       	movw	r24, r14
    2012:	b6 01       	movw	r22, r12
    2014:	f3 d3       	rcall	.+2022   	; 0x27fc <__cmpsf2>
    2016:	88 23       	and	r24, r24
    2018:	0c f0       	brlt	.+2      	; 0x201c <sram_draw_new_line+0xbe>
    201a:	3e c0       	rjmp	.+124    	; 0x2098 <sram_draw_new_line+0x13a>
    201c:	66 24       	eor	r6, r6
    201e:	57 fc       	sbrc	r5, 7
    2020:	60 94       	com	r6
    2022:	76 2c       	mov	r7, r6
    2024:	c4 01       	movw	r24, r8
    2026:	aa 27       	eor	r26, r26
    2028:	97 fd       	sbrc	r25, 7
    202a:	a0 95       	com	r26
    202c:	ba 2f       	mov	r27, r26
    202e:	89 87       	std	Y+9, r24	; 0x09
    2030:	9a 87       	std	Y+10, r25	; 0x0a
    2032:	ab 87       	std	Y+11, r26	; 0x0b
    2034:	bc 87       	std	Y+12, r27	; 0x0c
    2036:	c3 01       	movw	r24, r6
    2038:	b2 01       	movw	r22, r4
    203a:	7f d4       	rcall	.+2302   	; 0x293a <__floatsisf>
    203c:	9b 01       	movw	r18, r22
    203e:	ac 01       	movw	r20, r24
    2040:	c7 01       	movw	r24, r14
    2042:	b6 01       	movw	r22, r12
    2044:	76 d3       	rcall	.+1772   	; 0x2732 <__subsf3>
    2046:	2d 81       	ldd	r18, Y+5	; 0x05
    2048:	3e 81       	ldd	r19, Y+6	; 0x06
    204a:	4f 81       	ldd	r20, Y+7	; 0x07
    204c:	58 85       	ldd	r21, Y+8	; 0x08
    204e:	29 d5       	rcall	.+2642   	; 0x2aa2 <__mulsf3>
    2050:	4b 01       	movw	r8, r22
    2052:	5c 01       	movw	r10, r24
    2054:	69 85       	ldd	r22, Y+9	; 0x09
    2056:	7a 85       	ldd	r23, Y+10	; 0x0a
    2058:	8b 85       	ldd	r24, Y+11	; 0x0b
    205a:	9c 85       	ldd	r25, Y+12	; 0x0c
    205c:	6e d4       	rcall	.+2268   	; 0x293a <__floatsisf>
    205e:	9b 01       	movw	r18, r22
    2060:	ac 01       	movw	r20, r24
    2062:	c5 01       	movw	r24, r10
    2064:	b4 01       	movw	r22, r8
    2066:	66 d3       	rcall	.+1740   	; 0x2734 <__addsf3>
    2068:	3a d4       	rcall	.+2164   	; 0x28de <__fixunssfsi>
    206a:	b6 2e       	mov	r11, r22
    206c:	c7 01       	movw	r24, r14
    206e:	b6 01       	movw	r22, r12
    2070:	36 d4       	rcall	.+2156   	; 0x28de <__fixunssfsi>
    2072:	86 2f       	mov	r24, r22
    2074:	6b 2d       	mov	r22, r11
    2076:	57 df       	rcall	.-338    	; 0x1f26 <sram_pixel>
    2078:	2d ec       	ldi	r18, 0xCD	; 205
    207a:	3c ec       	ldi	r19, 0xCC	; 204
    207c:	4c ec       	ldi	r20, 0xCC	; 204
    207e:	5d e3       	ldi	r21, 0x3D	; 61
    2080:	c7 01       	movw	r24, r14
    2082:	b6 01       	movw	r22, r12
    2084:	57 d3       	rcall	.+1710   	; 0x2734 <__addsf3>
    2086:	6b 01       	movw	r12, r22
    2088:	7c 01       	movw	r14, r24
    208a:	29 81       	ldd	r18, Y+1	; 0x01
    208c:	3a 81       	ldd	r19, Y+2	; 0x02
    208e:	4b 81       	ldd	r20, Y+3	; 0x03
    2090:	5c 81       	ldd	r21, Y+4	; 0x04
    2092:	b4 d3       	rcall	.+1896   	; 0x27fc <__cmpsf2>
    2094:	88 23       	and	r24, r24
    2096:	7c f2       	brlt	.-98     	; 0x2036 <sram_draw_new_line+0xd8>
    2098:	12 15       	cp	r17, r2
    209a:	c8 f1       	brcs	.+114    	; 0x210e <sram_draw_new_line+0x1b0>
    209c:	30 12       	cpse	r3, r16
    209e:	39 c0       	rjmp	.+114    	; 0x2112 <sram_draw_new_line+0x1b4>
    20a0:	21 16       	cp	r2, r17
    20a2:	30 f0       	brcs	.+12     	; 0x20b0 <sram_draw_new_line+0x152>
    20a4:	36 c0       	rjmp	.+108    	; 0x2112 <sram_draw_new_line+0x1b4>
    20a6:	82 2d       	mov	r24, r2
    20a8:	21 2e       	mov	r2, r17
    20aa:	18 2f       	mov	r17, r24
    20ac:	02 2d       	mov	r16, r2
    20ae:	01 c0       	rjmp	.+2      	; 0x20b2 <sram_draw_new_line+0x154>
    20b0:	02 2d       	mov	r16, r2
    20b2:	60 2f       	mov	r22, r16
    20b4:	83 2d       	mov	r24, r3
    20b6:	37 df       	rcall	.-402    	; 0x1f26 <sram_pixel>
    20b8:	0f 5f       	subi	r16, 0xFF	; 255
    20ba:	01 17       	cp	r16, r17
    20bc:	d0 f3       	brcs	.-12     	; 0x20b2 <sram_draw_new_line+0x154>
    20be:	29 c0       	rjmp	.+82     	; 0x2112 <sram_draw_new_line+0x1b4>
    20c0:	82 2e       	mov	r8, r18
    20c2:	91 2c       	mov	r9, r1
    20c4:	a8 2e       	mov	r10, r24
    20c6:	b1 2c       	mov	r11, r1
    20c8:	44 2e       	mov	r4, r20
    20ca:	51 2c       	mov	r5, r1
    20cc:	70 e0       	ldi	r23, 0x00	; 0
    20ce:	68 19       	sub	r22, r8
    20d0:	79 09       	sbc	r23, r9
    20d2:	88 27       	eor	r24, r24
    20d4:	77 fd       	sbrc	r23, 7
    20d6:	80 95       	com	r24
    20d8:	98 2f       	mov	r25, r24
    20da:	2f d4       	rcall	.+2142   	; 0x293a <__floatsisf>
    20dc:	6b 01       	movw	r12, r22
    20de:	7c 01       	movw	r14, r24
    20e0:	b5 01       	movw	r22, r10
    20e2:	64 19       	sub	r22, r4
    20e4:	75 09       	sbc	r23, r5
    20e6:	88 27       	eor	r24, r24
    20e8:	77 fd       	sbrc	r23, 7
    20ea:	80 95       	com	r24
    20ec:	98 2f       	mov	r25, r24
    20ee:	25 d4       	rcall	.+2122   	; 0x293a <__floatsisf>
    20f0:	9b 01       	movw	r18, r22
    20f2:	ac 01       	movw	r20, r24
    20f4:	c7 01       	movw	r24, r14
    20f6:	b6 01       	movw	r22, r12
    20f8:	85 d3       	rcall	.+1802   	; 0x2804 <__divsf3>
    20fa:	6d 83       	std	Y+5, r22	; 0x05
    20fc:	7e 83       	std	Y+6, r23	; 0x06
    20fe:	8f 83       	std	Y+7, r24	; 0x07
    2100:	98 87       	std	Y+8, r25	; 0x08
    2102:	82 2d       	mov	r24, r2
    2104:	21 2e       	mov	r2, r17
    2106:	18 2f       	mov	r17, r24
    2108:	30 2e       	mov	r3, r16
    210a:	0a 2d       	mov	r16, r10
    210c:	6e cf       	rjmp	.-292    	; 0x1fea <sram_draw_new_line+0x8c>
    210e:	30 16       	cp	r3, r16
    2110:	51 f2       	breq	.-108    	; 0x20a6 <sram_draw_new_line+0x148>
    2112:	2c 96       	adiw	r28, 0x0c	; 12
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
    211e:	df 91       	pop	r29
    2120:	cf 91       	pop	r28
    2122:	1f 91       	pop	r17
    2124:	0f 91       	pop	r16
    2126:	ff 90       	pop	r15
    2128:	ef 90       	pop	r14
    212a:	df 90       	pop	r13
    212c:	cf 90       	pop	r12
    212e:	bf 90       	pop	r11
    2130:	af 90       	pop	r10
    2132:	9f 90       	pop	r9
    2134:	8f 90       	pop	r8
    2136:	7f 90       	pop	r7
    2138:	6f 90       	pop	r6
    213a:	5f 90       	pop	r5
    213c:	4f 90       	pop	r4
    213e:	3f 90       	pop	r3
    2140:	2f 90       	pop	r2
    2142:	08 95       	ret

00002144 <sram_draw_line>:
    2144:	cf 93       	push	r28
    2146:	df 93       	push	r29
    2148:	d8 2f       	mov	r29, r24
    214a:	c6 2f       	mov	r28, r22
    214c:	26 2f       	mov	r18, r22
    214e:	48 2f       	mov	r20, r24
    2150:	60 91 1f 03 	lds	r22, 0x031F
    2154:	80 91 20 03 	lds	r24, 0x0320
    2158:	02 df       	rcall	.-508    	; 0x1f5e <sram_draw_new_line>
    215a:	d0 93 20 03 	sts	0x0320, r29
    215e:	c0 93 1f 03 	sts	0x031F, r28
    2162:	df 91       	pop	r29
    2164:	cf 91       	pop	r28
    2166:	08 95       	ret

00002168 <sram_push_line>:
    2168:	0f 93       	push	r16
    216a:	1f 93       	push	r17
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	08 2f       	mov	r16, r24
    2172:	71 de       	rcall	.-798    	; 0x1e56 <sram_goto_line>
    2174:	80 e8       	ldi	r24, 0x80	; 128
    2176:	08 9f       	mul	r16, r24
    2178:	80 01       	movw	r16, r0
    217a:	11 24       	eor	r1, r1
    217c:	c0 e8       	ldi	r28, 0x80	; 128
    217e:	d0 e0       	ldi	r29, 0x00	; 0
    2180:	00 58       	subi	r16, 0x80	; 128
    2182:	1f 4f       	sbci	r17, 0xFF	; 255
    2184:	c8 01       	movw	r24, r16
    2186:	8c 1b       	sub	r24, r28
    2188:	9d 0b       	sbc	r25, r29
    218a:	e0 91 55 01 	lds	r30, 0x0155
    218e:	f0 91 56 01 	lds	r31, 0x0156
    2192:	e8 0f       	add	r30, r24
    2194:	f9 1f       	adc	r31, r25
    2196:	80 81       	ld	r24, Z
    2198:	33 dd       	rcall	.-1434   	; 0x1c00 <write_d>
    219a:	21 97       	sbiw	r28, 0x01	; 1
    219c:	20 97       	sbiw	r28, 0x00	; 0
    219e:	91 f7       	brne	.-28     	; 0x2184 <sram_push_line+0x1c>
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <sram_update_oled>:
    21aa:	cf 93       	push	r28
    21ac:	c0 e0       	ldi	r28, 0x00	; 0
    21ae:	8c 2f       	mov	r24, r28
    21b0:	db df       	rcall	.-74     	; 0x2168 <sram_push_line>
    21b2:	cf 5f       	subi	r28, 0xFF	; 255
    21b4:	c8 30       	cpi	r28, 0x08	; 8
    21b6:	d9 f7       	brne	.-10     	; 0x21ae <sram_update_oled+0x4>
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <sram_init>:
    21bc:	20 e0       	ldi	r18, 0x00	; 0
    21be:	30 e0       	ldi	r19, 0x00	; 0
    21c0:	b0 e8       	ldi	r27, 0x80	; 128
    21c2:	a0 e0       	ldi	r26, 0x00	; 0
    21c4:	11 c0       	rjmp	.+34     	; 0x21e8 <sram_init+0x2c>
    21c6:	a9 01       	movw	r20, r18
    21c8:	48 1b       	sub	r20, r24
    21ca:	59 0b       	sbc	r21, r25
    21cc:	e0 91 55 01 	lds	r30, 0x0155
    21d0:	f0 91 56 01 	lds	r31, 0x0156
    21d4:	e4 0f       	add	r30, r20
    21d6:	f5 1f       	adc	r31, r21
    21d8:	10 82       	st	Z, r1
    21da:	01 97       	sbiw	r24, 0x01	; 1
    21dc:	00 97       	sbiw	r24, 0x00	; 0
    21de:	99 f7       	brne	.-26     	; 0x21c6 <sram_init+0xa>
    21e0:	21 15       	cp	r18, r1
    21e2:	84 e0       	ldi	r24, 0x04	; 4
    21e4:	38 07       	cpc	r19, r24
    21e6:	29 f0       	breq	.+10     	; 0x21f2 <sram_init+0x36>
    21e8:	8b 2f       	mov	r24, r27
    21ea:	9a 2f       	mov	r25, r26
    21ec:	20 58       	subi	r18, 0x80	; 128
    21ee:	3f 4f       	sbci	r19, 0xFF	; 255
    21f0:	ea cf       	rjmp	.-44     	; 0x21c6 <sram_init+0xa>
    21f2:	10 92 16 03 	sts	0x0316, r1
    21f6:	10 92 15 03 	sts	0x0315, r1
    21fa:	d7 cf       	rjmp	.-82     	; 0x21aa <sram_update_oled>
    21fc:	08 95       	ret

000021fe <sram_clear_line>:
    21fe:	cf 93       	push	r28
    2200:	c8 2f       	mov	r28, r24
    2202:	2b dd       	rcall	.-1450   	; 0x1c5a <oled_goto_line>
    2204:	c8 30       	cpi	r28, 0x08	; 8
    2206:	b8 f4       	brcc	.+46     	; 0x2236 <sram_clear_line+0x38>
    2208:	20 e8       	ldi	r18, 0x80	; 128
    220a:	c2 9f       	mul	r28, r18
    220c:	c0 01       	movw	r24, r0
    220e:	11 24       	eor	r1, r1
    2210:	20 e8       	ldi	r18, 0x80	; 128
    2212:	30 e0       	ldi	r19, 0x00	; 0
    2214:	80 58       	subi	r24, 0x80	; 128
    2216:	9f 4f       	sbci	r25, 0xFF	; 255
    2218:	ac 01       	movw	r20, r24
    221a:	42 1b       	sub	r20, r18
    221c:	53 0b       	sbc	r21, r19
    221e:	e0 91 55 01 	lds	r30, 0x0155
    2222:	f0 91 56 01 	lds	r31, 0x0156
    2226:	e4 0f       	add	r30, r20
    2228:	f5 1f       	adc	r31, r21
    222a:	10 82       	st	Z, r1
    222c:	21 50       	subi	r18, 0x01	; 1
    222e:	31 09       	sbc	r19, r1
    2230:	21 15       	cp	r18, r1
    2232:	31 05       	cpc	r19, r1
    2234:	89 f7       	brne	.-30     	; 0x2218 <sram_clear_line+0x1a>
    2236:	cf 91       	pop	r28
    2238:	08 95       	ret

0000223a <sram_scroll_horizontally>:
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	cf 93       	push	r28
    2244:	df 93       	push	r29
    2246:	22 23       	and	r18, r18
    2248:	09 f4       	brne	.+2      	; 0x224c <sram_scroll_horizontally+0x12>
    224a:	50 c0       	rjmp	.+160    	; 0x22ec <sram_scroll_horizontally+0xb2>
    224c:	a0 91 55 01 	lds	r26, 0x0155
    2250:	b0 91 56 01 	lds	r27, 0x0156
    2254:	90 e8       	ldi	r25, 0x80	; 128
    2256:	89 9f       	mul	r24, r25
    2258:	a0 0d       	add	r26, r0
    225a:	b1 1d       	adc	r27, r1
    225c:	11 24       	eor	r1, r1
    225e:	67 e1       	ldi	r22, 0x17	; 23
    2260:	73 e0       	ldi	r23, 0x03	; 3
    2262:	fb 01       	movw	r30, r22
    2264:	9d 91       	ld	r25, X+
    2266:	91 93       	st	Z+, r25
    2268:	9e 2f       	mov	r25, r30
    226a:	96 1b       	sub	r25, r22
    226c:	92 17       	cp	r25, r18
    226e:	d0 f3       	brcs	.-12     	; 0x2264 <sram_scroll_horizontally+0x2a>
    2270:	a2 2f       	mov	r26, r18
    2272:	b0 e0       	ldi	r27, 0x00	; 0
    2274:	c0 e8       	ldi	r28, 0x80	; 128
    2276:	d0 e0       	ldi	r29, 0x00	; 0
    2278:	7e 01       	movw	r14, r28
    227a:	ea 1a       	sub	r14, r26
    227c:	fb 0a       	sbc	r15, r27
    227e:	1e 14       	cp	r1, r14
    2280:	1f 04       	cpc	r1, r15
    2282:	d4 f1       	brlt	.+116    	; 0x22f8 <sram_scroll_horizontally+0xbe>
    2284:	18 c0       	rjmp	.+48     	; 0x22b6 <sram_scroll_horizontally+0x7c>
    2286:	60 91 55 01 	lds	r22, 0x0155
    228a:	70 91 56 01 	lds	r23, 0x0156
    228e:	40 0f       	add	r20, r16
    2290:	51 1f       	adc	r21, r17
    2292:	fb 01       	movw	r30, r22
    2294:	e4 0f       	add	r30, r20
    2296:	f5 1f       	adc	r31, r21
    2298:	4a 0f       	add	r20, r26
    229a:	5b 1f       	adc	r21, r27
    229c:	64 0f       	add	r22, r20
    229e:	75 1f       	adc	r23, r21
    22a0:	eb 01       	movw	r28, r22
    22a2:	38 81       	ld	r19, Y
    22a4:	30 83       	st	Z, r19
    22a6:	9f 5f       	subi	r25, 0xFF	; 255
    22a8:	49 2f       	mov	r20, r25
    22aa:	50 e0       	ldi	r21, 0x00	; 0
    22ac:	4e 15       	cp	r20, r14
    22ae:	5f 05       	cpc	r21, r15
    22b0:	54 f3       	brlt	.-44     	; 0x2286 <sram_scroll_horizontally+0x4c>
    22b2:	22 23       	and	r18, r18
    22b4:	49 f1       	breq	.+82     	; 0x2308 <sram_scroll_horizontally+0xce>
    22b6:	d0 e8       	ldi	r29, 0x80	; 128
    22b8:	8d 9f       	mul	r24, r29
    22ba:	a0 01       	movw	r20, r0
    22bc:	11 24       	eor	r1, r1
    22be:	4a 1b       	sub	r20, r26
    22c0:	5b 0b       	sbc	r21, r27
    22c2:	67 e1       	ldi	r22, 0x17	; 23
    22c4:	73 e0       	ldi	r23, 0x03	; 3
    22c6:	fb 01       	movw	r30, r22
    22c8:	48 59       	subi	r20, 0x98	; 152
    22ca:	52 40       	sbci	r21, 0x02	; 2
    22cc:	ca 01       	movw	r24, r20
    22ce:	8e 0f       	add	r24, r30
    22d0:	9f 1f       	adc	r25, r31
    22d2:	a0 91 55 01 	lds	r26, 0x0155
    22d6:	b0 91 56 01 	lds	r27, 0x0156
    22da:	a8 0f       	add	r26, r24
    22dc:	b9 1f       	adc	r27, r25
    22de:	81 91       	ld	r24, Z+
    22e0:	8c 93       	st	X, r24
    22e2:	8e 2f       	mov	r24, r30
    22e4:	86 1b       	sub	r24, r22
    22e6:	82 17       	cp	r24, r18
    22e8:	88 f3       	brcs	.-30     	; 0x22cc <sram_scroll_horizontally+0x92>
    22ea:	0e c0       	rjmp	.+28     	; 0x2308 <sram_scroll_horizontally+0xce>
    22ec:	68 94       	set
    22ee:	ee 24       	eor	r14, r14
    22f0:	e7 f8       	bld	r14, 7
    22f2:	f1 2c       	mov	r15, r1
    22f4:	a0 e0       	ldi	r26, 0x00	; 0
    22f6:	b0 e0       	ldi	r27, 0x00	; 0
    22f8:	90 e8       	ldi	r25, 0x80	; 128
    22fa:	89 9f       	mul	r24, r25
    22fc:	80 01       	movw	r16, r0
    22fe:	11 24       	eor	r1, r1
    2300:	40 e0       	ldi	r20, 0x00	; 0
    2302:	50 e0       	ldi	r21, 0x00	; 0
    2304:	90 e0       	ldi	r25, 0x00	; 0
    2306:	bf cf       	rjmp	.-130    	; 0x2286 <sram_scroll_horizontally+0x4c>
    2308:	df 91       	pop	r29
    230a:	cf 91       	pop	r28
    230c:	1f 91       	pop	r17
    230e:	0f 91       	pop	r16
    2310:	ff 90       	pop	r15
    2312:	ef 90       	pop	r14
    2314:	08 95       	ret

00002316 <sram_scroll_line>:
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	d8 2f       	mov	r29, r24
    231c:	c6 2f       	mov	r28, r22
    231e:	69 30       	cpi	r22, 0x09	; 9
    2320:	18 f0       	brcs	.+6      	; 0x2328 <sram_scroll_line+0x12>
    2322:	c8 50       	subi	r28, 0x08	; 8
    2324:	6c 2f       	mov	r22, r28
    2326:	f7 df       	rcall	.-18     	; 0x2316 <sram_scroll_line>
    2328:	2c 2f       	mov	r18, r28
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	60 e0       	ldi	r22, 0x00	; 0
    232e:	8d 2f       	mov	r24, r29
    2330:	84 df       	rcall	.-248    	; 0x223a <sram_scroll_horizontally>
    2332:	df 91       	pop	r29
    2334:	cf 91       	pop	r28
    2336:	08 95       	ret

00002338 <sram_scroll_vertically>:
    2338:	2f 92       	push	r2
    233a:	3f 92       	push	r3
    233c:	4f 92       	push	r4
    233e:	5f 92       	push	r5
    2340:	6f 92       	push	r6
    2342:	7f 92       	push	r7
    2344:	8f 92       	push	r8
    2346:	9f 92       	push	r9
    2348:	af 92       	push	r10
    234a:	bf 92       	push	r11
    234c:	cf 92       	push	r12
    234e:	df 92       	push	r13
    2350:	ef 92       	push	r14
    2352:	ff 92       	push	r15
    2354:	0f 93       	push	r16
    2356:	1f 93       	push	r17
    2358:	cf 93       	push	r28
    235a:	df 93       	push	r29
    235c:	00 d0       	rcall	.+0      	; 0x235e <sram_scroll_vertically+0x26>
    235e:	00 d0       	rcall	.+0      	; 0x2360 <sram_scroll_vertically+0x28>
    2360:	1f 92       	push	r1
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	c8 2e       	mov	r12, r24
    2368:	f6 2e       	mov	r15, r22
    236a:	24 2e       	mov	r2, r20
    236c:	29 83       	std	Y+1, r18	; 0x01
    236e:	40 2e       	mov	r4, r16
    2370:	0f 2e       	mov	r0, r31
    2372:	f7 e0       	ldi	r31, 0x07	; 7
    2374:	af 2e       	mov	r10, r31
    2376:	f0 2d       	mov	r31, r0
    2378:	51 2c       	mov	r5, r1
    237a:	61 2c       	mov	r6, r1
    237c:	71 2c       	mov	r7, r1
    237e:	81 2c       	mov	r8, r1
    2380:	10 e0       	ldi	r17, 0x00	; 0
    2382:	1a 82       	std	Y+2, r1	; 0x02
    2384:	b0 e0       	ldi	r27, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	25 2d       	mov	r18, r5
    238a:	36 2d       	mov	r19, r6
    238c:	47 2d       	mov	r20, r7
    238e:	58 2d       	mov	r21, r8
    2390:	61 2f       	mov	r22, r17
    2392:	7a 81       	ldd	r23, Y+2	; 0x02
    2394:	8b 2f       	mov	r24, r27
    2396:	9a 2f       	mov	r25, r26
    2398:	08 e0       	ldi	r16, 0x08	; 8
    239a:	15 d4       	rcall	.+2090   	; 0x2bc6 <__ashldi3>
    239c:	52 2e       	mov	r5, r18
    239e:	63 2e       	mov	r6, r19
    23a0:	74 2e       	mov	r7, r20
    23a2:	85 2e       	mov	r8, r21
    23a4:	16 2f       	mov	r17, r22
    23a6:	b7 2e       	mov	r11, r23
    23a8:	d8 2e       	mov	r13, r24
    23aa:	e9 2e       	mov	r14, r25
    23ac:	6c 2d       	mov	r22, r12
    23ae:	8a 2d       	mov	r24, r10
    23b0:	83 dd       	rcall	.-1274   	; 0x1eb8 <sram_read>
    23b2:	58 2a       	or	r5, r24
    23b4:	ba 82       	std	Y+2, r11	; 0x02
    23b6:	bd 2d       	mov	r27, r13
    23b8:	ae 2d       	mov	r26, r14
    23ba:	aa 94       	dec	r10
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	a8 12       	cpse	r10, r24
    23c0:	e3 cf       	rjmp	.-58     	; 0x2388 <sram_scroll_vertically+0x50>
    23c2:	31 2c       	mov	r3, r1
    23c4:	ef e3       	ldi	r30, 0x3F	; 63
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	e2 19       	sub	r30, r2
    23ca:	f3 09       	sbc	r31, r3
    23cc:	2f ef       	ldi	r18, 0xFF	; 255
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f ef       	ldi	r20, 0xFF	; 255
    23d2:	5f ef       	ldi	r21, 0xFF	; 255
    23d4:	6f ef       	ldi	r22, 0xFF	; 255
    23d6:	7f ef       	ldi	r23, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	0e 2f       	mov	r16, r30
    23dc:	f4 d3       	rcall	.+2024   	; 0x2bc6 <__ashldi3>
    23de:	ef 0d       	add	r30, r15
    23e0:	f1 1d       	adc	r31, r1
    23e2:	0e 2f       	mov	r16, r30
    23e4:	0b d4       	rcall	.+2070   	; 0x2bfc <__lshrdi3>
    23e6:	0f 2d       	mov	r16, r15
    23e8:	ee d3       	rcall	.+2012   	; 0x2bc6 <__ashldi3>
    23ea:	e2 2f       	mov	r30, r18
    23ec:	93 2e       	mov	r9, r19
    23ee:	a4 2e       	mov	r10, r20
    23f0:	b5 2e       	mov	r11, r21
    23f2:	6b 83       	std	Y+3, r22	; 0x03
    23f4:	d7 2e       	mov	r13, r23
    23f6:	e8 2e       	mov	r14, r24
    23f8:	f9 2f       	mov	r31, r25
    23fa:	44 20       	and	r4, r4
    23fc:	d9 f0       	breq	.+54     	; 0x2434 <sram_scroll_vertically+0xfc>
    23fe:	89 81       	ldd	r24, Y+1	; 0x01
    2400:	28 1a       	sub	r2, r24
    2402:	31 08       	sbc	r3, r1
    2404:	87 fd       	sbrc	r24, 7
    2406:	33 94       	inc	r3
    2408:	25 2d       	mov	r18, r5
    240a:	36 2d       	mov	r19, r6
    240c:	47 2d       	mov	r20, r7
    240e:	58 2d       	mov	r21, r8
    2410:	61 2f       	mov	r22, r17
    2412:	7a 81       	ldd	r23, Y+2	; 0x02
    2414:	8b 2f       	mov	r24, r27
    2416:	9a 2f       	mov	r25, r26
    2418:	02 2d       	mov	r16, r2
    241a:	f0 d3       	rcall	.+2016   	; 0x2bfc <__lshrdi3>
    241c:	81 e0       	ldi	r24, 0x01	; 1
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	09 80       	ldd	r0, Y+1	; 0x01
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <sram_scroll_vertically+0xf0>
    2424:	88 0f       	add	r24, r24
    2426:	99 1f       	adc	r25, r25
    2428:	0a 94       	dec	r0
    242a:	e2 f7       	brpl	.-8      	; 0x2424 <sram_scroll_vertically+0xec>
    242c:	44 24       	eor	r4, r4
    242e:	4a 94       	dec	r4
    2430:	48 0e       	add	r4, r24
    2432:	42 22       	and	r4, r18
    2434:	25 2d       	mov	r18, r5
    2436:	2e 23       	and	r18, r30
    2438:	36 2d       	mov	r19, r6
    243a:	39 21       	and	r19, r9
    243c:	47 2d       	mov	r20, r7
    243e:	4a 21       	and	r20, r10
    2440:	58 2d       	mov	r21, r8
    2442:	5b 21       	and	r21, r11
    2444:	6b 81       	ldd	r22, Y+3	; 0x03
    2446:	61 23       	and	r22, r17
    2448:	7a 81       	ldd	r23, Y+2	; 0x02
    244a:	7d 21       	and	r23, r13
    244c:	8b 2f       	mov	r24, r27
    244e:	8e 21       	and	r24, r14
    2450:	9f 2f       	mov	r25, r31
    2452:	9a 23       	and	r25, r26
    2454:	09 81       	ldd	r16, Y+1	; 0x01
    2456:	b7 d3       	rcall	.+1902   	; 0x2bc6 <__ashldi3>
    2458:	0f 2d       	mov	r16, r15
    245a:	d0 d3       	rcall	.+1952   	; 0x2bfc <__lshrdi3>
    245c:	24 29       	or	r18, r4
    245e:	b3 d3       	rcall	.+1894   	; 0x2bc6 <__ashldi3>
    2460:	12 2f       	mov	r17, r18
    2462:	1e 23       	and	r17, r30
    2464:	23 2e       	mov	r2, r19
    2466:	29 20       	and	r2, r9
    2468:	34 2e       	mov	r3, r20
    246a:	3a 20       	and	r3, r10
    246c:	45 2e       	mov	r4, r21
    246e:	4b 20       	and	r4, r11
    2470:	5b 80       	ldd	r5, Y+3	; 0x03
    2472:	56 22       	and	r5, r22
    2474:	67 2e       	mov	r6, r23
    2476:	6d 20       	and	r6, r13
    2478:	78 2e       	mov	r7, r24
    247a:	7e 20       	and	r7, r14
    247c:	8f 2e       	mov	r8, r31
    247e:	89 22       	and	r8, r25
    2480:	e0 95       	com	r30
    2482:	ed 83       	std	Y+5, r30	; 0x05
    2484:	90 94       	com	r9
    2486:	a0 94       	com	r10
    2488:	b0 94       	com	r11
    248a:	eb 81       	ldd	r30, Y+3	; 0x03
    248c:	e0 95       	com	r30
    248e:	e9 83       	std	Y+1, r30	; 0x01
    2490:	d0 94       	com	r13
    2492:	e0 94       	com	r14
    2494:	ff 2e       	mov	r15, r31
    2496:	f0 94       	com	r15
    2498:	1a 82       	std	Y+2, r1	; 0x02
    249a:	4d 81       	ldd	r20, Y+5	; 0x05
    249c:	6c 2d       	mov	r22, r12
    249e:	8a 81       	ldd	r24, Y+2	; 0x02
    24a0:	1c dd       	rcall	.-1480   	; 0x1eda <sram_write_and>
    24a2:	2d 81       	ldd	r18, Y+5	; 0x05
    24a4:	39 2d       	mov	r19, r9
    24a6:	4a 2d       	mov	r20, r10
    24a8:	5b 2d       	mov	r21, r11
    24aa:	69 81       	ldd	r22, Y+1	; 0x01
    24ac:	7d 2d       	mov	r23, r13
    24ae:	8e 2d       	mov	r24, r14
    24b0:	9f 2d       	mov	r25, r15
    24b2:	08 e0       	ldi	r16, 0x08	; 8
    24b4:	a3 d3       	rcall	.+1862   	; 0x2bfc <__lshrdi3>
    24b6:	2d 83       	std	Y+5, r18	; 0x05
    24b8:	93 2e       	mov	r9, r19
    24ba:	a4 2e       	mov	r10, r20
    24bc:	b5 2e       	mov	r11, r21
    24be:	69 83       	std	Y+1, r22	; 0x01
    24c0:	d7 2e       	mov	r13, r23
    24c2:	e8 2e       	mov	r14, r24
    24c4:	f9 2e       	mov	r15, r25
    24c6:	41 2f       	mov	r20, r17
    24c8:	6c 2d       	mov	r22, r12
    24ca:	8a 81       	ldd	r24, Y+2	; 0x02
    24cc:	19 dd       	rcall	.-1486   	; 0x1f00 <sram_write_or>
    24ce:	21 2f       	mov	r18, r17
    24d0:	32 2d       	mov	r19, r2
    24d2:	43 2d       	mov	r20, r3
    24d4:	54 2d       	mov	r21, r4
    24d6:	65 2d       	mov	r22, r5
    24d8:	76 2d       	mov	r23, r6
    24da:	87 2d       	mov	r24, r7
    24dc:	98 2d       	mov	r25, r8
    24de:	8e d3       	rcall	.+1820   	; 0x2bfc <__lshrdi3>
    24e0:	12 2f       	mov	r17, r18
    24e2:	23 2e       	mov	r2, r19
    24e4:	34 2e       	mov	r3, r20
    24e6:	45 2e       	mov	r4, r21
    24e8:	56 2e       	mov	r5, r22
    24ea:	67 2e       	mov	r6, r23
    24ec:	78 2e       	mov	r7, r24
    24ee:	89 2e       	mov	r8, r25
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	ff 5f       	subi	r31, 0xFF	; 255
    24f4:	fa 83       	std	Y+2, r31	; 0x02
    24f6:	f8 30       	cpi	r31, 0x08	; 8
    24f8:	81 f6       	brne	.-96     	; 0x249a <sram_scroll_vertically+0x162>
    24fa:	0f 90       	pop	r0
    24fc:	0f 90       	pop	r0
    24fe:	0f 90       	pop	r0
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
    250a:	0f 91       	pop	r16
    250c:	ff 90       	pop	r15
    250e:	ef 90       	pop	r14
    2510:	df 90       	pop	r13
    2512:	cf 90       	pop	r12
    2514:	bf 90       	pop	r11
    2516:	af 90       	pop	r10
    2518:	9f 90       	pop	r9
    251a:	8f 90       	pop	r8
    251c:	7f 90       	pop	r7
    251e:	6f 90       	pop	r6
    2520:	5f 90       	pop	r5
    2522:	4f 90       	pop	r4
    2524:	3f 90       	pop	r3
    2526:	2f 90       	pop	r2
    2528:	08 95       	ret

0000252a <sram_set_point>:
    252a:	80 93 20 03 	sts	0x0320, r24
    252e:	60 93 1f 03 	sts	0x031F, r22
    2532:	08 95       	ret

00002534 <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
    253c:	c8 2f       	mov	r28, r24
    253e:	d6 2f       	mov	r29, r22
    2540:	14 2f       	mov	r17, r20
    2542:	02 2f       	mov	r16, r18
}



void sram_set_point(uint8_t x0,uint8_t y0){
	prev_x = x0;
    2544:	80 93 20 03 	sts	0x0320, r24
	prev_y = y0;
    2548:	60 93 1f 03 	sts	0x031F, r22
}


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
	sram_set_point(x0,y0);
	sram_draw_line(x0,y1);
    254c:	62 2f       	mov	r22, r18
    254e:	fa dd       	rcall	.-1036   	; 0x2144 <sram_draw_line>
	sram_draw_line(x1,y1);
    2550:	60 2f       	mov	r22, r16
    2552:	81 2f       	mov	r24, r17
    2554:	f7 dd       	rcall	.-1042   	; 0x2144 <sram_draw_line>
	sram_draw_line(x1,y0);
    2556:	6d 2f       	mov	r22, r29
    2558:	81 2f       	mov	r24, r17
    255a:	f4 dd       	rcall	.-1048   	; 0x2144 <sram_draw_line>
	sram_draw_line(x0,y0);
    255c:	6d 2f       	mov	r22, r29
    255e:	8c 2f       	mov	r24, r28
    2560:	f1 dd       	rcall	.-1054   	; 0x2144 <sram_draw_line>
}
    2562:	df 91       	pop	r29
    2564:	cf 91       	pop	r28
    2566:	1f 91       	pop	r17
    2568:	0f 91       	pop	r16
    256a:	08 95       	ret

0000256c <initialize_timer>:

#include "timer.h"

uint8_t FLAG_timer_1_complete;

void initialize_timer(uint8_t fps){	//	Function for initialization of the timers
    256c:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    256e:	89 b7       	in	r24, 0x39	; 57
    2570:	81 60       	ori	r24, 0x01	; 1
    2572:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    2574:	83 b7       	in	r24, 0x33	; 51
    2576:	8d 60       	ori	r24, 0x0D	; 13
    2578:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	40 e0       	ldi	r20, 0x00	; 0
    257e:	50 e0       	ldi	r21, 0x00	; 0
    2580:	60 ec       	ldi	r22, 0xC0	; 192
    2582:	72 e1       	ldi	r23, 0x12	; 18
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	02 d3       	rcall	.+1540   	; 0x2b8e <__divmodsi4>
    258a:	21 bf       	out	0x31, r18	; 49
	FLAG_timer_1_complete = 1;//since we are initializing we want to refresh the page
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	80 93 21 03 	sts	0x0321, r24
    2592:	08 95       	ret

00002594 <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	if (FLAG_timer_1_complete == 1)
    2594:	80 91 21 03 	lds	r24, 0x0321
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	19 f4       	brne	.+6      	; 0x25a2 <timer_check_flag+0xe>
	{
		FLAG_timer_1_complete = 0;
    259c:	10 92 21 03 	sts	0x0321, r1
		return 1;
    25a0:	08 95       	ret
	}
	return 0;
    25a2:	80 e0       	ldi	r24, 0x00	; 0
}
    25a4:	08 95       	ret

000025a6 <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_timer_1_complete = 0;
    25a6:	10 92 21 03 	sts	0x0321, r1
    25aa:	08 95       	ret

000025ac <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    25ac:	1f 92       	push	r1
    25ae:	0f 92       	push	r0
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	0f 92       	push	r0
    25b4:	11 24       	eor	r1, r1
    25b6:	8f 93       	push	r24
	FLAG_timer_1_complete = 1;
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	80 93 21 03 	sts	0x0321, r24
}
    25be:	8f 91       	pop	r24
    25c0:	0f 90       	pop	r0
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	0f 90       	pop	r0
    25c6:	1f 90       	pop	r1
    25c8:	18 95       	reti

000025ca <timer_delay>:

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
    25ca:	cf 93       	push	r28
    25cc:	df 93       	push	r29
	timer_ms = (FPS*((double)timer_ms/1000));
    25ce:	bc 01       	movw	r22, r24
    25d0:	88 27       	eor	r24, r24
    25d2:	77 fd       	sbrc	r23, 7
    25d4:	80 95       	com	r24
    25d6:	98 2f       	mov	r25, r24
    25d8:	b0 d1       	rcall	.+864    	; 0x293a <__floatsisf>
    25da:	20 e0       	ldi	r18, 0x00	; 0
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	4a e7       	ldi	r20, 0x7A	; 122
    25e0:	54 e4       	ldi	r21, 0x44	; 68
    25e2:	10 d1       	rcall	.+544    	; 0x2804 <__divsf3>
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e7       	ldi	r20, 0x70	; 112
    25ea:	52 e4       	ldi	r21, 0x42	; 66
    25ec:	5a d2       	rcall	.+1204   	; 0x2aa2 <__mulsf3>
    25ee:	72 d1       	rcall	.+740    	; 0x28d4 <__fixsfsi>
    25f0:	eb 01       	movw	r28, r22
	while(timer_ms>0){
    25f2:	1c 16       	cp	r1, r28
    25f4:	1d 06       	cpc	r1, r29
    25f6:	34 f4       	brge	.+12     	; 0x2604 <timer_delay+0x3a>
		if (timer_check_flag())
    25f8:	cd df       	rcall	.-102    	; 0x2594 <timer_check_flag>
    25fa:	81 11       	cpse	r24, r1
		{
			timer_ms--;
    25fc:	21 97       	sbiw	r28, 0x01	; 1
	FLAG_timer_1_complete = 1;
}

void timer_delay(int timer_ms){ //simple delay function, in miliseconds
	timer_ms = (FPS*((double)timer_ms/1000));
	while(timer_ms>0){
    25fe:	1c 16       	cp	r1, r28
    2600:	1d 06       	cpc	r1, r29
    2602:	d4 f3       	brlt	.-12     	; 0x25f8 <timer_delay+0x2e>
		if (timer_check_flag())
		{
			timer_ms--;
		}
	}
    2604:	df 91       	pop	r29
    2606:	cf 91       	pop	r28
    2608:	08 95       	ret

0000260a <decode_hex>:
	}
	
}

uint8_t decode_hex(char hex){
	if (hex >= 'A')
    260a:	81 34       	cpi	r24, 0x41	; 65
    260c:	10 f0       	brcs	.+4      	; 0x2612 <decode_hex+0x8>
	{
		return 10 + hex - 'A';
    260e:	87 53       	subi	r24, 0x37	; 55
    2610:	08 95       	ret
	}else{
		return hex - '0';
    2612:	80 53       	subi	r24, 0x30	; 48
	}
}
    2614:	08 95       	ret

00002616 <print_highscore>:
 *  Author: pamarton
 */ 
#include "uart_exchange.h"


void print_highscore(uint8_t game){//retrives the highscore from the SD
    2616:	7f 92       	push	r7
    2618:	8f 92       	push	r8
    261a:	9f 92       	push	r9
    261c:	af 92       	push	r10
    261e:	bf 92       	push	r11
    2620:	cf 92       	push	r12
    2622:	df 92       	push	r13
    2624:	ef 92       	push	r14
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	cf 93       	push	r28
    262e:	df 93       	push	r29
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	2a 97       	sbiw	r28, 0x0a	; 10
    2636:	0f b6       	in	r0, 0x3f	; 63
    2638:	f8 94       	cli
    263a:	de bf       	out	0x3e, r29	; 62
    263c:	0f be       	out	0x3f, r0	; 63
    263e:	cd bf       	out	0x3d, r28	; 61
	sram_init();
    2640:	bd dd       	rcall	.-1158   	; 0x21bc <sram_init>
    2642:	0f 2e       	mov	r0, r31
    2644:	f0 e3       	ldi	r31, 0x30	; 48
    2646:	cf 2e       	mov	r12, r31
    2648:	d1 2c       	mov	r13, r1
    264a:	f0 2d       	mov	r31, r0
	{
		sram_goto_line(b);
		sram_write_char('1'+b);
		sram_write_char(' ');
		
		printf("S0R");
    264c:	0f 2e       	mov	r0, r31
    264e:	f4 e0       	ldi	r31, 0x04	; 4
    2650:	8f 2e       	mov	r8, r31
    2652:	f2 e0       	ldi	r31, 0x02	; 2
    2654:	9f 2e       	mov	r9, r31
    2656:	f0 2d       	mov	r31, r0
    2658:	5e 01       	movw	r10, r28
    265a:	45 e0       	ldi	r20, 0x05	; 5
    265c:	a4 0e       	add	r10, r20
    265e:	b1 1c       	adc	r11, r1
    2660:	ee 24       	eor	r14, r14
    2662:	e3 94       	inc	r14
    2664:	f1 2c       	mov	r15, r1
    2666:	ec 0e       	add	r14, r28
    2668:	fd 1e       	adc	r15, r29
    266a:	88 e0       	ldi	r24, 0x08	; 8
    266c:	e8 0e       	add	r14, r24
    266e:	f1 1c       	adc	r15, r1
void print_highscore(uint8_t game){//retrives the highscore from the SD
	sram_init();
	char a[10];
	for (uint8_t b = 0; b <8; b++)
	{
		sram_goto_line(b);
    2670:	80 ed       	ldi	r24, 0xD0	; 208
    2672:	8c 0d       	add	r24, r12
    2674:	f0 db       	rcall	.-2080   	; 0x1e56 <sram_goto_line>
		sram_write_char('1'+b);
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	8c 0d       	add	r24, r12
    267a:	b2 db       	rcall	.-2204   	; 0x1de0 <sram_write_char>
		sram_write_char(' ');
    267c:	80 e2       	ldi	r24, 0x20	; 32
    267e:	b0 db       	rcall	.-2208   	; 0x1de0 <sram_write_char>
		
		printf("S0R");
    2680:	9f 92       	push	r9
    2682:	8f 92       	push	r8
    2684:	b5 d3       	rcall	.+1898   	; 0x2df0 <printf>
		printf("%c",'0'+b);
    2686:	c6 01       	movw	r24, r12
    2688:	c4 d3       	rcall	.+1928   	; 0x2e12 <putchar>
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	8e 01       	movw	r16, r28
    2690:	0f 5f       	subi	r16, 0xFF	; 255
    2692:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (unsigned int i = 0; i< 4;i++)
		{
			a[i] = recieve_UART();
    2694:	0e 94 46 04 	call	0x88c	; 0x88c <recieve_UART>
    2698:	f8 01       	movw	r30, r16
    269a:	81 93       	st	Z+, r24
    269c:	8f 01       	movw	r16, r30
		sram_write_char(' ');
		
		printf("S0R");
		printf("%c",'0'+b);
		
		for (unsigned int i = 0; i< 4;i++)
    269e:	ea 15       	cp	r30, r10
    26a0:	fb 05       	cpc	r31, r11
    26a2:	c1 f7       	brne	.-16     	; 0x2694 <print_highscore+0x7e>
		{
			a[i] = recieve_UART();
		}
		uint16_t temp = decode_hex(a[0])<<12 | decode_hex(a[1])<<8 | decode_hex(a[2])<<4 | decode_hex(a[3]);
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	b1 df       	rcall	.-158    	; 0x260a <decode_hex>
    26a8:	78 2e       	mov	r7, r24
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	ae df       	rcall	.-164    	; 0x260a <decode_hex>
    26ae:	08 2f       	mov	r16, r24
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	ab df       	rcall	.-170    	; 0x260a <decode_hex>
    26b4:	18 2f       	mov	r17, r24
    26b6:	8c 81       	ldd	r24, Y+4	; 0x04
    26b8:	a8 df       	rcall	.-176    	; 0x260a <decode_hex>
    26ba:	27 2d       	mov	r18, r7
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	32 2f       	mov	r19, r18
    26c0:	22 27       	eor	r18, r18
    26c2:	32 95       	swap	r19
    26c4:	30 7f       	andi	r19, 0xF0	; 240
    26c6:	30 2b       	or	r19, r16
    26c8:	28 2b       	or	r18, r24
    26ca:	f0 e1       	ldi	r31, 0x10	; 16
    26cc:	1f 9f       	mul	r17, r31
    26ce:	c0 01       	movw	r24, r0
    26d0:	11 24       	eor	r1, r1
		sram_write_int(temp);
    26d2:	82 2b       	or	r24, r18
    26d4:	93 2b       	or	r25, r19
    26d6:	e1 db       	rcall	.-2110   	; 0x1e9a <sram_write_int>
		sram_goto_column(63);
    26d8:	8f e3       	ldi	r24, 0x3F	; 63
    26da:	c4 db       	rcall	.-2168   	; 0x1e64 <sram_goto_column>
    26dc:	8e 01       	movw	r16, r28
    26de:	0f 5f       	subi	r16, 0xFF	; 255
    26e0:	1f 4f       	sbci	r17, 0xFF	; 255
		
		for (unsigned int i = 0; i< 8;i++)
		{
			a[i] = recieve_UART();
    26e2:	0e 94 46 04 	call	0x88c	; 0x88c <recieve_UART>
    26e6:	f8 01       	movw	r30, r16
    26e8:	81 93       	st	Z+, r24
    26ea:	8f 01       	movw	r16, r30
		}
		uint16_t temp = decode_hex(a[0])<<12 | decode_hex(a[1])<<8 | decode_hex(a[2])<<4 | decode_hex(a[3]);
		sram_write_int(temp);
		sram_goto_column(63);
		
		for (unsigned int i = 0; i< 8;i++)
    26ec:	ee 15       	cp	r30, r14
    26ee:	ff 05       	cpc	r31, r15
    26f0:	c1 f7       	brne	.-16     	; 0x26e2 <print_highscore+0xcc>
		{
			a[i] = recieve_UART();
		}
		sram_write_string(a);
    26f2:	ce 01       	movw	r24, r28
    26f4:	01 96       	adiw	r24, 0x01	; 1
    26f6:	bd db       	rcall	.-2182   	; 0x1e72 <sram_write_string>
		sram_update_oled();
    26f8:	58 dd       	rcall	.-1360   	; 0x21aa <sram_update_oled>
    26fa:	ff ef       	ldi	r31, 0xFF	; 255
    26fc:	cf 1a       	sub	r12, r31
    26fe:	df 0a       	sbc	r13, r31


void print_highscore(uint8_t game){//retrives the highscore from the SD
	sram_init();
	char a[10];
	for (uint8_t b = 0; b <8; b++)
    2700:	48 e3       	ldi	r20, 0x38	; 56
    2702:	c4 16       	cp	r12, r20
    2704:	d1 04       	cpc	r13, r1
    2706:	09 f0       	breq	.+2      	; 0x270a <print_highscore+0xf4>
    2708:	b3 cf       	rjmp	.-154    	; 0x2670 <print_highscore+0x5a>
		}
		sram_write_string(a);
		sram_update_oled();
	}
	
}
    270a:	2a 96       	adiw	r28, 0x0a	; 10
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	de bf       	out	0x3e, r29	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	cd bf       	out	0x3d, r28	; 61
    2716:	df 91       	pop	r29
    2718:	cf 91       	pop	r28
    271a:	1f 91       	pop	r17
    271c:	0f 91       	pop	r16
    271e:	ff 90       	pop	r15
    2720:	ef 90       	pop	r14
    2722:	df 90       	pop	r13
    2724:	cf 90       	pop	r12
    2726:	bf 90       	pop	r11
    2728:	af 90       	pop	r10
    272a:	9f 90       	pop	r9
    272c:	8f 90       	pop	r8
    272e:	7f 90       	pop	r7
    2730:	08 95       	ret

00002732 <__subsf3>:
    2732:	50 58       	subi	r21, 0x80	; 128

00002734 <__addsf3>:
    2734:	bb 27       	eor	r27, r27
    2736:	aa 27       	eor	r26, r26
    2738:	0e d0       	rcall	.+28     	; 0x2756 <__addsf3x>
    273a:	75 c1       	rjmp	.+746    	; 0x2a26 <__fp_round>
    273c:	66 d1       	rcall	.+716    	; 0x2a0a <__fp_pscA>
    273e:	30 f0       	brcs	.+12     	; 0x274c <__addsf3+0x18>
    2740:	6b d1       	rcall	.+726    	; 0x2a18 <__fp_pscB>
    2742:	20 f0       	brcs	.+8      	; 0x274c <__addsf3+0x18>
    2744:	31 f4       	brne	.+12     	; 0x2752 <__addsf3+0x1e>
    2746:	9f 3f       	cpi	r25, 0xFF	; 255
    2748:	11 f4       	brne	.+4      	; 0x274e <__addsf3+0x1a>
    274a:	1e f4       	brtc	.+6      	; 0x2752 <__addsf3+0x1e>
    274c:	5b c1       	rjmp	.+694    	; 0x2a04 <__fp_nan>
    274e:	0e f4       	brtc	.+2      	; 0x2752 <__addsf3+0x1e>
    2750:	e0 95       	com	r30
    2752:	e7 fb       	bst	r30, 7
    2754:	51 c1       	rjmp	.+674    	; 0x29f8 <__fp_inf>

00002756 <__addsf3x>:
    2756:	e9 2f       	mov	r30, r25
    2758:	77 d1       	rcall	.+750    	; 0x2a48 <__fp_split3>
    275a:	80 f3       	brcs	.-32     	; 0x273c <__addsf3+0x8>
    275c:	ba 17       	cp	r27, r26
    275e:	62 07       	cpc	r22, r18
    2760:	73 07       	cpc	r23, r19
    2762:	84 07       	cpc	r24, r20
    2764:	95 07       	cpc	r25, r21
    2766:	18 f0       	brcs	.+6      	; 0x276e <__addsf3x+0x18>
    2768:	71 f4       	brne	.+28     	; 0x2786 <__addsf3x+0x30>
    276a:	9e f5       	brtc	.+102    	; 0x27d2 <__addsf3x+0x7c>
    276c:	8f c1       	rjmp	.+798    	; 0x2a8c <__fp_zero>
    276e:	0e f4       	brtc	.+2      	; 0x2772 <__addsf3x+0x1c>
    2770:	e0 95       	com	r30
    2772:	0b 2e       	mov	r0, r27
    2774:	ba 2f       	mov	r27, r26
    2776:	a0 2d       	mov	r26, r0
    2778:	0b 01       	movw	r0, r22
    277a:	b9 01       	movw	r22, r18
    277c:	90 01       	movw	r18, r0
    277e:	0c 01       	movw	r0, r24
    2780:	ca 01       	movw	r24, r20
    2782:	a0 01       	movw	r20, r0
    2784:	11 24       	eor	r1, r1
    2786:	ff 27       	eor	r31, r31
    2788:	59 1b       	sub	r21, r25
    278a:	99 f0       	breq	.+38     	; 0x27b2 <__addsf3x+0x5c>
    278c:	59 3f       	cpi	r21, 0xF9	; 249
    278e:	50 f4       	brcc	.+20     	; 0x27a4 <__addsf3x+0x4e>
    2790:	50 3e       	cpi	r21, 0xE0	; 224
    2792:	68 f1       	brcs	.+90     	; 0x27ee <__addsf3x+0x98>
    2794:	1a 16       	cp	r1, r26
    2796:	f0 40       	sbci	r31, 0x00	; 0
    2798:	a2 2f       	mov	r26, r18
    279a:	23 2f       	mov	r18, r19
    279c:	34 2f       	mov	r19, r20
    279e:	44 27       	eor	r20, r20
    27a0:	58 5f       	subi	r21, 0xF8	; 248
    27a2:	f3 cf       	rjmp	.-26     	; 0x278a <__addsf3x+0x34>
    27a4:	46 95       	lsr	r20
    27a6:	37 95       	ror	r19
    27a8:	27 95       	ror	r18
    27aa:	a7 95       	ror	r26
    27ac:	f0 40       	sbci	r31, 0x00	; 0
    27ae:	53 95       	inc	r21
    27b0:	c9 f7       	brne	.-14     	; 0x27a4 <__addsf3x+0x4e>
    27b2:	7e f4       	brtc	.+30     	; 0x27d2 <__addsf3x+0x7c>
    27b4:	1f 16       	cp	r1, r31
    27b6:	ba 0b       	sbc	r27, r26
    27b8:	62 0b       	sbc	r22, r18
    27ba:	73 0b       	sbc	r23, r19
    27bc:	84 0b       	sbc	r24, r20
    27be:	ba f0       	brmi	.+46     	; 0x27ee <__addsf3x+0x98>
    27c0:	91 50       	subi	r25, 0x01	; 1
    27c2:	a1 f0       	breq	.+40     	; 0x27ec <__addsf3x+0x96>
    27c4:	ff 0f       	add	r31, r31
    27c6:	bb 1f       	adc	r27, r27
    27c8:	66 1f       	adc	r22, r22
    27ca:	77 1f       	adc	r23, r23
    27cc:	88 1f       	adc	r24, r24
    27ce:	c2 f7       	brpl	.-16     	; 0x27c0 <__addsf3x+0x6a>
    27d0:	0e c0       	rjmp	.+28     	; 0x27ee <__addsf3x+0x98>
    27d2:	ba 0f       	add	r27, r26
    27d4:	62 1f       	adc	r22, r18
    27d6:	73 1f       	adc	r23, r19
    27d8:	84 1f       	adc	r24, r20
    27da:	48 f4       	brcc	.+18     	; 0x27ee <__addsf3x+0x98>
    27dc:	87 95       	ror	r24
    27de:	77 95       	ror	r23
    27e0:	67 95       	ror	r22
    27e2:	b7 95       	ror	r27
    27e4:	f7 95       	ror	r31
    27e6:	9e 3f       	cpi	r25, 0xFE	; 254
    27e8:	08 f0       	brcs	.+2      	; 0x27ec <__addsf3x+0x96>
    27ea:	b3 cf       	rjmp	.-154    	; 0x2752 <__addsf3+0x1e>
    27ec:	93 95       	inc	r25
    27ee:	88 0f       	add	r24, r24
    27f0:	08 f0       	brcs	.+2      	; 0x27f4 <__addsf3x+0x9e>
    27f2:	99 27       	eor	r25, r25
    27f4:	ee 0f       	add	r30, r30
    27f6:	97 95       	ror	r25
    27f8:	87 95       	ror	r24
    27fa:	08 95       	ret

000027fc <__cmpsf2>:
    27fc:	d9 d0       	rcall	.+434    	; 0x29b0 <__fp_cmp>
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <__cmpsf2+0x6>
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	08 95       	ret

00002804 <__divsf3>:
    2804:	0c d0       	rcall	.+24     	; 0x281e <__divsf3x>
    2806:	0f c1       	rjmp	.+542    	; 0x2a26 <__fp_round>
    2808:	07 d1       	rcall	.+526    	; 0x2a18 <__fp_pscB>
    280a:	40 f0       	brcs	.+16     	; 0x281c <__divsf3+0x18>
    280c:	fe d0       	rcall	.+508    	; 0x2a0a <__fp_pscA>
    280e:	30 f0       	brcs	.+12     	; 0x281c <__divsf3+0x18>
    2810:	21 f4       	brne	.+8      	; 0x281a <__divsf3+0x16>
    2812:	5f 3f       	cpi	r21, 0xFF	; 255
    2814:	19 f0       	breq	.+6      	; 0x281c <__divsf3+0x18>
    2816:	f0 c0       	rjmp	.+480    	; 0x29f8 <__fp_inf>
    2818:	51 11       	cpse	r21, r1
    281a:	39 c1       	rjmp	.+626    	; 0x2a8e <__fp_szero>
    281c:	f3 c0       	rjmp	.+486    	; 0x2a04 <__fp_nan>

0000281e <__divsf3x>:
    281e:	14 d1       	rcall	.+552    	; 0x2a48 <__fp_split3>
    2820:	98 f3       	brcs	.-26     	; 0x2808 <__divsf3+0x4>

00002822 <__divsf3_pse>:
    2822:	99 23       	and	r25, r25
    2824:	c9 f3       	breq	.-14     	; 0x2818 <__divsf3+0x14>
    2826:	55 23       	and	r21, r21
    2828:	b1 f3       	breq	.-20     	; 0x2816 <__divsf3+0x12>
    282a:	95 1b       	sub	r25, r21
    282c:	55 0b       	sbc	r21, r21
    282e:	bb 27       	eor	r27, r27
    2830:	aa 27       	eor	r26, r26
    2832:	62 17       	cp	r22, r18
    2834:	73 07       	cpc	r23, r19
    2836:	84 07       	cpc	r24, r20
    2838:	38 f0       	brcs	.+14     	; 0x2848 <__divsf3_pse+0x26>
    283a:	9f 5f       	subi	r25, 0xFF	; 255
    283c:	5f 4f       	sbci	r21, 0xFF	; 255
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	44 1f       	adc	r20, r20
    2844:	aa 1f       	adc	r26, r26
    2846:	a9 f3       	breq	.-22     	; 0x2832 <__divsf3_pse+0x10>
    2848:	33 d0       	rcall	.+102    	; 0x28b0 <__divsf3_pse+0x8e>
    284a:	0e 2e       	mov	r0, r30
    284c:	3a f0       	brmi	.+14     	; 0x285c <__divsf3_pse+0x3a>
    284e:	e0 e8       	ldi	r30, 0x80	; 128
    2850:	30 d0       	rcall	.+96     	; 0x28b2 <__divsf3_pse+0x90>
    2852:	91 50       	subi	r25, 0x01	; 1
    2854:	50 40       	sbci	r21, 0x00	; 0
    2856:	e6 95       	lsr	r30
    2858:	00 1c       	adc	r0, r0
    285a:	ca f7       	brpl	.-14     	; 0x284e <__divsf3_pse+0x2c>
    285c:	29 d0       	rcall	.+82     	; 0x28b0 <__divsf3_pse+0x8e>
    285e:	fe 2f       	mov	r31, r30
    2860:	27 d0       	rcall	.+78     	; 0x28b0 <__divsf3_pse+0x8e>
    2862:	66 0f       	add	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	88 1f       	adc	r24, r24
    2868:	bb 1f       	adc	r27, r27
    286a:	26 17       	cp	r18, r22
    286c:	37 07       	cpc	r19, r23
    286e:	48 07       	cpc	r20, r24
    2870:	ab 07       	cpc	r26, r27
    2872:	b0 e8       	ldi	r27, 0x80	; 128
    2874:	09 f0       	breq	.+2      	; 0x2878 <__divsf3_pse+0x56>
    2876:	bb 0b       	sbc	r27, r27
    2878:	80 2d       	mov	r24, r0
    287a:	bf 01       	movw	r22, r30
    287c:	ff 27       	eor	r31, r31
    287e:	93 58       	subi	r25, 0x83	; 131
    2880:	5f 4f       	sbci	r21, 0xFF	; 255
    2882:	2a f0       	brmi	.+10     	; 0x288e <__divsf3_pse+0x6c>
    2884:	9e 3f       	cpi	r25, 0xFE	; 254
    2886:	51 05       	cpc	r21, r1
    2888:	68 f0       	brcs	.+26     	; 0x28a4 <__divsf3_pse+0x82>
    288a:	b6 c0       	rjmp	.+364    	; 0x29f8 <__fp_inf>
    288c:	00 c1       	rjmp	.+512    	; 0x2a8e <__fp_szero>
    288e:	5f 3f       	cpi	r21, 0xFF	; 255
    2890:	ec f3       	brlt	.-6      	; 0x288c <__divsf3_pse+0x6a>
    2892:	98 3e       	cpi	r25, 0xE8	; 232
    2894:	dc f3       	brlt	.-10     	; 0x288c <__divsf3_pse+0x6a>
    2896:	86 95       	lsr	r24
    2898:	77 95       	ror	r23
    289a:	67 95       	ror	r22
    289c:	b7 95       	ror	r27
    289e:	f7 95       	ror	r31
    28a0:	9f 5f       	subi	r25, 0xFF	; 255
    28a2:	c9 f7       	brne	.-14     	; 0x2896 <__divsf3_pse+0x74>
    28a4:	88 0f       	add	r24, r24
    28a6:	91 1d       	adc	r25, r1
    28a8:	96 95       	lsr	r25
    28aa:	87 95       	ror	r24
    28ac:	97 f9       	bld	r25, 7
    28ae:	08 95       	ret
    28b0:	e1 e0       	ldi	r30, 0x01	; 1
    28b2:	66 0f       	add	r22, r22
    28b4:	77 1f       	adc	r23, r23
    28b6:	88 1f       	adc	r24, r24
    28b8:	bb 1f       	adc	r27, r27
    28ba:	62 17       	cp	r22, r18
    28bc:	73 07       	cpc	r23, r19
    28be:	84 07       	cpc	r24, r20
    28c0:	ba 07       	cpc	r27, r26
    28c2:	20 f0       	brcs	.+8      	; 0x28cc <__divsf3_pse+0xaa>
    28c4:	62 1b       	sub	r22, r18
    28c6:	73 0b       	sbc	r23, r19
    28c8:	84 0b       	sbc	r24, r20
    28ca:	ba 0b       	sbc	r27, r26
    28cc:	ee 1f       	adc	r30, r30
    28ce:	88 f7       	brcc	.-30     	; 0x28b2 <__divsf3_pse+0x90>
    28d0:	e0 95       	com	r30
    28d2:	08 95       	ret

000028d4 <__fixsfsi>:
    28d4:	04 d0       	rcall	.+8      	; 0x28de <__fixunssfsi>
    28d6:	68 94       	set
    28d8:	b1 11       	cpse	r27, r1
    28da:	d9 c0       	rjmp	.+434    	; 0x2a8e <__fp_szero>
    28dc:	08 95       	ret

000028de <__fixunssfsi>:
    28de:	bc d0       	rcall	.+376    	; 0x2a58 <__fp_splitA>
    28e0:	88 f0       	brcs	.+34     	; 0x2904 <__fixunssfsi+0x26>
    28e2:	9f 57       	subi	r25, 0x7F	; 127
    28e4:	90 f0       	brcs	.+36     	; 0x290a <__fixunssfsi+0x2c>
    28e6:	b9 2f       	mov	r27, r25
    28e8:	99 27       	eor	r25, r25
    28ea:	b7 51       	subi	r27, 0x17	; 23
    28ec:	a0 f0       	brcs	.+40     	; 0x2916 <__fixunssfsi+0x38>
    28ee:	d1 f0       	breq	.+52     	; 0x2924 <__fixunssfsi+0x46>
    28f0:	66 0f       	add	r22, r22
    28f2:	77 1f       	adc	r23, r23
    28f4:	88 1f       	adc	r24, r24
    28f6:	99 1f       	adc	r25, r25
    28f8:	1a f0       	brmi	.+6      	; 0x2900 <__fixunssfsi+0x22>
    28fa:	ba 95       	dec	r27
    28fc:	c9 f7       	brne	.-14     	; 0x28f0 <__fixunssfsi+0x12>
    28fe:	12 c0       	rjmp	.+36     	; 0x2924 <__fixunssfsi+0x46>
    2900:	b1 30       	cpi	r27, 0x01	; 1
    2902:	81 f0       	breq	.+32     	; 0x2924 <__fixunssfsi+0x46>
    2904:	c3 d0       	rcall	.+390    	; 0x2a8c <__fp_zero>
    2906:	b1 e0       	ldi	r27, 0x01	; 1
    2908:	08 95       	ret
    290a:	c0 c0       	rjmp	.+384    	; 0x2a8c <__fp_zero>
    290c:	67 2f       	mov	r22, r23
    290e:	78 2f       	mov	r23, r24
    2910:	88 27       	eor	r24, r24
    2912:	b8 5f       	subi	r27, 0xF8	; 248
    2914:	39 f0       	breq	.+14     	; 0x2924 <__fixunssfsi+0x46>
    2916:	b9 3f       	cpi	r27, 0xF9	; 249
    2918:	cc f3       	brlt	.-14     	; 0x290c <__fixunssfsi+0x2e>
    291a:	86 95       	lsr	r24
    291c:	77 95       	ror	r23
    291e:	67 95       	ror	r22
    2920:	b3 95       	inc	r27
    2922:	d9 f7       	brne	.-10     	; 0x291a <__fixunssfsi+0x3c>
    2924:	3e f4       	brtc	.+14     	; 0x2934 <__fixunssfsi+0x56>
    2926:	90 95       	com	r25
    2928:	80 95       	com	r24
    292a:	70 95       	com	r23
    292c:	61 95       	neg	r22
    292e:	7f 4f       	sbci	r23, 0xFF	; 255
    2930:	8f 4f       	sbci	r24, 0xFF	; 255
    2932:	9f 4f       	sbci	r25, 0xFF	; 255
    2934:	08 95       	ret

00002936 <__floatunsisf>:
    2936:	e8 94       	clt
    2938:	09 c0       	rjmp	.+18     	; 0x294c <__floatsisf+0x12>

0000293a <__floatsisf>:
    293a:	97 fb       	bst	r25, 7
    293c:	3e f4       	brtc	.+14     	; 0x294c <__floatsisf+0x12>
    293e:	90 95       	com	r25
    2940:	80 95       	com	r24
    2942:	70 95       	com	r23
    2944:	61 95       	neg	r22
    2946:	7f 4f       	sbci	r23, 0xFF	; 255
    2948:	8f 4f       	sbci	r24, 0xFF	; 255
    294a:	9f 4f       	sbci	r25, 0xFF	; 255
    294c:	99 23       	and	r25, r25
    294e:	a9 f0       	breq	.+42     	; 0x297a <__floatsisf+0x40>
    2950:	f9 2f       	mov	r31, r25
    2952:	96 e9       	ldi	r25, 0x96	; 150
    2954:	bb 27       	eor	r27, r27
    2956:	93 95       	inc	r25
    2958:	f6 95       	lsr	r31
    295a:	87 95       	ror	r24
    295c:	77 95       	ror	r23
    295e:	67 95       	ror	r22
    2960:	b7 95       	ror	r27
    2962:	f1 11       	cpse	r31, r1
    2964:	f8 cf       	rjmp	.-16     	; 0x2956 <__floatsisf+0x1c>
    2966:	fa f4       	brpl	.+62     	; 0x29a6 <__floatsisf+0x6c>
    2968:	bb 0f       	add	r27, r27
    296a:	11 f4       	brne	.+4      	; 0x2970 <__floatsisf+0x36>
    296c:	60 ff       	sbrs	r22, 0
    296e:	1b c0       	rjmp	.+54     	; 0x29a6 <__floatsisf+0x6c>
    2970:	6f 5f       	subi	r22, 0xFF	; 255
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	8f 4f       	sbci	r24, 0xFF	; 255
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	16 c0       	rjmp	.+44     	; 0x29a6 <__floatsisf+0x6c>
    297a:	88 23       	and	r24, r24
    297c:	11 f0       	breq	.+4      	; 0x2982 <__floatsisf+0x48>
    297e:	96 e9       	ldi	r25, 0x96	; 150
    2980:	11 c0       	rjmp	.+34     	; 0x29a4 <__floatsisf+0x6a>
    2982:	77 23       	and	r23, r23
    2984:	21 f0       	breq	.+8      	; 0x298e <__floatsisf+0x54>
    2986:	9e e8       	ldi	r25, 0x8E	; 142
    2988:	87 2f       	mov	r24, r23
    298a:	76 2f       	mov	r23, r22
    298c:	05 c0       	rjmp	.+10     	; 0x2998 <__floatsisf+0x5e>
    298e:	66 23       	and	r22, r22
    2990:	71 f0       	breq	.+28     	; 0x29ae <__floatsisf+0x74>
    2992:	96 e8       	ldi	r25, 0x86	; 134
    2994:	86 2f       	mov	r24, r22
    2996:	70 e0       	ldi	r23, 0x00	; 0
    2998:	60 e0       	ldi	r22, 0x00	; 0
    299a:	2a f0       	brmi	.+10     	; 0x29a6 <__floatsisf+0x6c>
    299c:	9a 95       	dec	r25
    299e:	66 0f       	add	r22, r22
    29a0:	77 1f       	adc	r23, r23
    29a2:	88 1f       	adc	r24, r24
    29a4:	da f7       	brpl	.-10     	; 0x299c <__floatsisf+0x62>
    29a6:	88 0f       	add	r24, r24
    29a8:	96 95       	lsr	r25
    29aa:	87 95       	ror	r24
    29ac:	97 f9       	bld	r25, 7
    29ae:	08 95       	ret

000029b0 <__fp_cmp>:
    29b0:	99 0f       	add	r25, r25
    29b2:	00 08       	sbc	r0, r0
    29b4:	55 0f       	add	r21, r21
    29b6:	aa 0b       	sbc	r26, r26
    29b8:	e0 e8       	ldi	r30, 0x80	; 128
    29ba:	fe ef       	ldi	r31, 0xFE	; 254
    29bc:	16 16       	cp	r1, r22
    29be:	17 06       	cpc	r1, r23
    29c0:	e8 07       	cpc	r30, r24
    29c2:	f9 07       	cpc	r31, r25
    29c4:	c0 f0       	brcs	.+48     	; 0x29f6 <__fp_cmp+0x46>
    29c6:	12 16       	cp	r1, r18
    29c8:	13 06       	cpc	r1, r19
    29ca:	e4 07       	cpc	r30, r20
    29cc:	f5 07       	cpc	r31, r21
    29ce:	98 f0       	brcs	.+38     	; 0x29f6 <__fp_cmp+0x46>
    29d0:	62 1b       	sub	r22, r18
    29d2:	73 0b       	sbc	r23, r19
    29d4:	84 0b       	sbc	r24, r20
    29d6:	95 0b       	sbc	r25, r21
    29d8:	39 f4       	brne	.+14     	; 0x29e8 <__fp_cmp+0x38>
    29da:	0a 26       	eor	r0, r26
    29dc:	61 f0       	breq	.+24     	; 0x29f6 <__fp_cmp+0x46>
    29de:	23 2b       	or	r18, r19
    29e0:	24 2b       	or	r18, r20
    29e2:	25 2b       	or	r18, r21
    29e4:	21 f4       	brne	.+8      	; 0x29ee <__fp_cmp+0x3e>
    29e6:	08 95       	ret
    29e8:	0a 26       	eor	r0, r26
    29ea:	09 f4       	brne	.+2      	; 0x29ee <__fp_cmp+0x3e>
    29ec:	a1 40       	sbci	r26, 0x01	; 1
    29ee:	a6 95       	lsr	r26
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	81 1d       	adc	r24, r1
    29f4:	81 1d       	adc	r24, r1
    29f6:	08 95       	ret

000029f8 <__fp_inf>:
    29f8:	97 f9       	bld	r25, 7
    29fa:	9f 67       	ori	r25, 0x7F	; 127
    29fc:	80 e8       	ldi	r24, 0x80	; 128
    29fe:	70 e0       	ldi	r23, 0x00	; 0
    2a00:	60 e0       	ldi	r22, 0x00	; 0
    2a02:	08 95       	ret

00002a04 <__fp_nan>:
    2a04:	9f ef       	ldi	r25, 0xFF	; 255
    2a06:	80 ec       	ldi	r24, 0xC0	; 192
    2a08:	08 95       	ret

00002a0a <__fp_pscA>:
    2a0a:	00 24       	eor	r0, r0
    2a0c:	0a 94       	dec	r0
    2a0e:	16 16       	cp	r1, r22
    2a10:	17 06       	cpc	r1, r23
    2a12:	18 06       	cpc	r1, r24
    2a14:	09 06       	cpc	r0, r25
    2a16:	08 95       	ret

00002a18 <__fp_pscB>:
    2a18:	00 24       	eor	r0, r0
    2a1a:	0a 94       	dec	r0
    2a1c:	12 16       	cp	r1, r18
    2a1e:	13 06       	cpc	r1, r19
    2a20:	14 06       	cpc	r1, r20
    2a22:	05 06       	cpc	r0, r21
    2a24:	08 95       	ret

00002a26 <__fp_round>:
    2a26:	09 2e       	mov	r0, r25
    2a28:	03 94       	inc	r0
    2a2a:	00 0c       	add	r0, r0
    2a2c:	11 f4       	brne	.+4      	; 0x2a32 <__fp_round+0xc>
    2a2e:	88 23       	and	r24, r24
    2a30:	52 f0       	brmi	.+20     	; 0x2a46 <__fp_round+0x20>
    2a32:	bb 0f       	add	r27, r27
    2a34:	40 f4       	brcc	.+16     	; 0x2a46 <__fp_round+0x20>
    2a36:	bf 2b       	or	r27, r31
    2a38:	11 f4       	brne	.+4      	; 0x2a3e <__fp_round+0x18>
    2a3a:	60 ff       	sbrs	r22, 0
    2a3c:	04 c0       	rjmp	.+8      	; 0x2a46 <__fp_round+0x20>
    2a3e:	6f 5f       	subi	r22, 0xFF	; 255
    2a40:	7f 4f       	sbci	r23, 0xFF	; 255
    2a42:	8f 4f       	sbci	r24, 0xFF	; 255
    2a44:	9f 4f       	sbci	r25, 0xFF	; 255
    2a46:	08 95       	ret

00002a48 <__fp_split3>:
    2a48:	57 fd       	sbrc	r21, 7
    2a4a:	90 58       	subi	r25, 0x80	; 128
    2a4c:	44 0f       	add	r20, r20
    2a4e:	55 1f       	adc	r21, r21
    2a50:	59 f0       	breq	.+22     	; 0x2a68 <__fp_splitA+0x10>
    2a52:	5f 3f       	cpi	r21, 0xFF	; 255
    2a54:	71 f0       	breq	.+28     	; 0x2a72 <__fp_splitA+0x1a>
    2a56:	47 95       	ror	r20

00002a58 <__fp_splitA>:
    2a58:	88 0f       	add	r24, r24
    2a5a:	97 fb       	bst	r25, 7
    2a5c:	99 1f       	adc	r25, r25
    2a5e:	61 f0       	breq	.+24     	; 0x2a78 <__fp_splitA+0x20>
    2a60:	9f 3f       	cpi	r25, 0xFF	; 255
    2a62:	79 f0       	breq	.+30     	; 0x2a82 <__fp_splitA+0x2a>
    2a64:	87 95       	ror	r24
    2a66:	08 95       	ret
    2a68:	12 16       	cp	r1, r18
    2a6a:	13 06       	cpc	r1, r19
    2a6c:	14 06       	cpc	r1, r20
    2a6e:	55 1f       	adc	r21, r21
    2a70:	f2 cf       	rjmp	.-28     	; 0x2a56 <__fp_split3+0xe>
    2a72:	46 95       	lsr	r20
    2a74:	f1 df       	rcall	.-30     	; 0x2a58 <__fp_splitA>
    2a76:	08 c0       	rjmp	.+16     	; 0x2a88 <__fp_splitA+0x30>
    2a78:	16 16       	cp	r1, r22
    2a7a:	17 06       	cpc	r1, r23
    2a7c:	18 06       	cpc	r1, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	f1 cf       	rjmp	.-30     	; 0x2a64 <__fp_splitA+0xc>
    2a82:	86 95       	lsr	r24
    2a84:	71 05       	cpc	r23, r1
    2a86:	61 05       	cpc	r22, r1
    2a88:	08 94       	sec
    2a8a:	08 95       	ret

00002a8c <__fp_zero>:
    2a8c:	e8 94       	clt

00002a8e <__fp_szero>:
    2a8e:	bb 27       	eor	r27, r27
    2a90:	66 27       	eor	r22, r22
    2a92:	77 27       	eor	r23, r23
    2a94:	cb 01       	movw	r24, r22
    2a96:	97 f9       	bld	r25, 7
    2a98:	08 95       	ret

00002a9a <__gesf2>:
    2a9a:	8a df       	rcall	.-236    	; 0x29b0 <__fp_cmp>
    2a9c:	08 f4       	brcc	.+2      	; 0x2aa0 <__gesf2+0x6>
    2a9e:	8f ef       	ldi	r24, 0xFF	; 255
    2aa0:	08 95       	ret

00002aa2 <__mulsf3>:
    2aa2:	0b d0       	rcall	.+22     	; 0x2aba <__mulsf3x>
    2aa4:	c0 cf       	rjmp	.-128    	; 0x2a26 <__fp_round>
    2aa6:	b1 df       	rcall	.-158    	; 0x2a0a <__fp_pscA>
    2aa8:	28 f0       	brcs	.+10     	; 0x2ab4 <__mulsf3+0x12>
    2aaa:	b6 df       	rcall	.-148    	; 0x2a18 <__fp_pscB>
    2aac:	18 f0       	brcs	.+6      	; 0x2ab4 <__mulsf3+0x12>
    2aae:	95 23       	and	r25, r21
    2ab0:	09 f0       	breq	.+2      	; 0x2ab4 <__mulsf3+0x12>
    2ab2:	a2 cf       	rjmp	.-188    	; 0x29f8 <__fp_inf>
    2ab4:	a7 cf       	rjmp	.-178    	; 0x2a04 <__fp_nan>
    2ab6:	11 24       	eor	r1, r1
    2ab8:	ea cf       	rjmp	.-44     	; 0x2a8e <__fp_szero>

00002aba <__mulsf3x>:
    2aba:	c6 df       	rcall	.-116    	; 0x2a48 <__fp_split3>
    2abc:	a0 f3       	brcs	.-24     	; 0x2aa6 <__mulsf3+0x4>

00002abe <__mulsf3_pse>:
    2abe:	95 9f       	mul	r25, r21
    2ac0:	d1 f3       	breq	.-12     	; 0x2ab6 <__mulsf3+0x14>
    2ac2:	95 0f       	add	r25, r21
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	55 1f       	adc	r21, r21
    2ac8:	62 9f       	mul	r22, r18
    2aca:	f0 01       	movw	r30, r0
    2acc:	72 9f       	mul	r23, r18
    2ace:	bb 27       	eor	r27, r27
    2ad0:	f0 0d       	add	r31, r0
    2ad2:	b1 1d       	adc	r27, r1
    2ad4:	63 9f       	mul	r22, r19
    2ad6:	aa 27       	eor	r26, r26
    2ad8:	f0 0d       	add	r31, r0
    2ada:	b1 1d       	adc	r27, r1
    2adc:	aa 1f       	adc	r26, r26
    2ade:	64 9f       	mul	r22, r20
    2ae0:	66 27       	eor	r22, r22
    2ae2:	b0 0d       	add	r27, r0
    2ae4:	a1 1d       	adc	r26, r1
    2ae6:	66 1f       	adc	r22, r22
    2ae8:	82 9f       	mul	r24, r18
    2aea:	22 27       	eor	r18, r18
    2aec:	b0 0d       	add	r27, r0
    2aee:	a1 1d       	adc	r26, r1
    2af0:	62 1f       	adc	r22, r18
    2af2:	73 9f       	mul	r23, r19
    2af4:	b0 0d       	add	r27, r0
    2af6:	a1 1d       	adc	r26, r1
    2af8:	62 1f       	adc	r22, r18
    2afa:	83 9f       	mul	r24, r19
    2afc:	a0 0d       	add	r26, r0
    2afe:	61 1d       	adc	r22, r1
    2b00:	22 1f       	adc	r18, r18
    2b02:	74 9f       	mul	r23, r20
    2b04:	33 27       	eor	r19, r19
    2b06:	a0 0d       	add	r26, r0
    2b08:	61 1d       	adc	r22, r1
    2b0a:	23 1f       	adc	r18, r19
    2b0c:	84 9f       	mul	r24, r20
    2b0e:	60 0d       	add	r22, r0
    2b10:	21 1d       	adc	r18, r1
    2b12:	82 2f       	mov	r24, r18
    2b14:	76 2f       	mov	r23, r22
    2b16:	6a 2f       	mov	r22, r26
    2b18:	11 24       	eor	r1, r1
    2b1a:	9f 57       	subi	r25, 0x7F	; 127
    2b1c:	50 40       	sbci	r21, 0x00	; 0
    2b1e:	8a f0       	brmi	.+34     	; 0x2b42 <__mulsf3_pse+0x84>
    2b20:	e1 f0       	breq	.+56     	; 0x2b5a <__mulsf3_pse+0x9c>
    2b22:	88 23       	and	r24, r24
    2b24:	4a f0       	brmi	.+18     	; 0x2b38 <__mulsf3_pse+0x7a>
    2b26:	ee 0f       	add	r30, r30
    2b28:	ff 1f       	adc	r31, r31
    2b2a:	bb 1f       	adc	r27, r27
    2b2c:	66 1f       	adc	r22, r22
    2b2e:	77 1f       	adc	r23, r23
    2b30:	88 1f       	adc	r24, r24
    2b32:	91 50       	subi	r25, 0x01	; 1
    2b34:	50 40       	sbci	r21, 0x00	; 0
    2b36:	a9 f7       	brne	.-22     	; 0x2b22 <__mulsf3_pse+0x64>
    2b38:	9e 3f       	cpi	r25, 0xFE	; 254
    2b3a:	51 05       	cpc	r21, r1
    2b3c:	70 f0       	brcs	.+28     	; 0x2b5a <__mulsf3_pse+0x9c>
    2b3e:	5c cf       	rjmp	.-328    	; 0x29f8 <__fp_inf>
    2b40:	a6 cf       	rjmp	.-180    	; 0x2a8e <__fp_szero>
    2b42:	5f 3f       	cpi	r21, 0xFF	; 255
    2b44:	ec f3       	brlt	.-6      	; 0x2b40 <__mulsf3_pse+0x82>
    2b46:	98 3e       	cpi	r25, 0xE8	; 232
    2b48:	dc f3       	brlt	.-10     	; 0x2b40 <__mulsf3_pse+0x82>
    2b4a:	86 95       	lsr	r24
    2b4c:	77 95       	ror	r23
    2b4e:	67 95       	ror	r22
    2b50:	b7 95       	ror	r27
    2b52:	f7 95       	ror	r31
    2b54:	e7 95       	ror	r30
    2b56:	9f 5f       	subi	r25, 0xFF	; 255
    2b58:	c1 f7       	brne	.-16     	; 0x2b4a <__mulsf3_pse+0x8c>
    2b5a:	fe 2b       	or	r31, r30
    2b5c:	88 0f       	add	r24, r24
    2b5e:	91 1d       	adc	r25, r1
    2b60:	96 95       	lsr	r25
    2b62:	87 95       	ror	r24
    2b64:	97 f9       	bld	r25, 7
    2b66:	08 95       	ret

00002b68 <__divmodhi4>:
    2b68:	97 fb       	bst	r25, 7
    2b6a:	07 2e       	mov	r0, r23
    2b6c:	16 f4       	brtc	.+4      	; 0x2b72 <__divmodhi4+0xa>
    2b6e:	00 94       	com	r0
    2b70:	06 d0       	rcall	.+12     	; 0x2b7e <__divmodhi4_neg1>
    2b72:	77 fd       	sbrc	r23, 7
    2b74:	08 d0       	rcall	.+16     	; 0x2b86 <__divmodhi4_neg2>
    2b76:	5e d0       	rcall	.+188    	; 0x2c34 <__udivmodhi4>
    2b78:	07 fc       	sbrc	r0, 7
    2b7a:	05 d0       	rcall	.+10     	; 0x2b86 <__divmodhi4_neg2>
    2b7c:	3e f4       	brtc	.+14     	; 0x2b8c <__divmodhi4_exit>

00002b7e <__divmodhi4_neg1>:
    2b7e:	90 95       	com	r25
    2b80:	81 95       	neg	r24
    2b82:	9f 4f       	sbci	r25, 0xFF	; 255
    2b84:	08 95       	ret

00002b86 <__divmodhi4_neg2>:
    2b86:	70 95       	com	r23
    2b88:	61 95       	neg	r22
    2b8a:	7f 4f       	sbci	r23, 0xFF	; 255

00002b8c <__divmodhi4_exit>:
    2b8c:	08 95       	ret

00002b8e <__divmodsi4>:
    2b8e:	05 2e       	mov	r0, r21
    2b90:	97 fb       	bst	r25, 7
    2b92:	16 f4       	brtc	.+4      	; 0x2b98 <__divmodsi4+0xa>
    2b94:	00 94       	com	r0
    2b96:	0f d0       	rcall	.+30     	; 0x2bb6 <__negsi2>
    2b98:	57 fd       	sbrc	r21, 7
    2b9a:	05 d0       	rcall	.+10     	; 0x2ba6 <__divmodsi4_neg2>
    2b9c:	5f d0       	rcall	.+190    	; 0x2c5c <__udivmodsi4>
    2b9e:	07 fc       	sbrc	r0, 7
    2ba0:	02 d0       	rcall	.+4      	; 0x2ba6 <__divmodsi4_neg2>
    2ba2:	46 f4       	brtc	.+16     	; 0x2bb4 <__divmodsi4_exit>
    2ba4:	08 c0       	rjmp	.+16     	; 0x2bb6 <__negsi2>

00002ba6 <__divmodsi4_neg2>:
    2ba6:	50 95       	com	r21
    2ba8:	40 95       	com	r20
    2baa:	30 95       	com	r19
    2bac:	21 95       	neg	r18
    2bae:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb0:	4f 4f       	sbci	r20, 0xFF	; 255
    2bb2:	5f 4f       	sbci	r21, 0xFF	; 255

00002bb4 <__divmodsi4_exit>:
    2bb4:	08 95       	ret

00002bb6 <__negsi2>:
    2bb6:	90 95       	com	r25
    2bb8:	80 95       	com	r24
    2bba:	70 95       	com	r23
    2bbc:	61 95       	neg	r22
    2bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc4:	08 95       	ret

00002bc6 <__ashldi3>:
    2bc6:	0f 93       	push	r16
    2bc8:	08 30       	cpi	r16, 0x08	; 8
    2bca:	90 f0       	brcs	.+36     	; 0x2bf0 <__ashldi3+0x2a>
    2bcc:	98 2f       	mov	r25, r24
    2bce:	87 2f       	mov	r24, r23
    2bd0:	76 2f       	mov	r23, r22
    2bd2:	65 2f       	mov	r22, r21
    2bd4:	54 2f       	mov	r21, r20
    2bd6:	43 2f       	mov	r20, r19
    2bd8:	32 2f       	mov	r19, r18
    2bda:	22 27       	eor	r18, r18
    2bdc:	08 50       	subi	r16, 0x08	; 8
    2bde:	f4 cf       	rjmp	.-24     	; 0x2bc8 <__ashldi3+0x2>
    2be0:	22 0f       	add	r18, r18
    2be2:	33 1f       	adc	r19, r19
    2be4:	44 1f       	adc	r20, r20
    2be6:	55 1f       	adc	r21, r21
    2be8:	66 1f       	adc	r22, r22
    2bea:	77 1f       	adc	r23, r23
    2bec:	88 1f       	adc	r24, r24
    2bee:	99 1f       	adc	r25, r25
    2bf0:	0a 95       	dec	r16
    2bf2:	b2 f7       	brpl	.-20     	; 0x2be0 <__ashldi3+0x1a>
    2bf4:	0f 91       	pop	r16
    2bf6:	08 95       	ret

00002bf8 <__ashrdi3>:
    2bf8:	97 fb       	bst	r25, 7
    2bfa:	10 f8       	bld	r1, 0

00002bfc <__lshrdi3>:
    2bfc:	16 94       	lsr	r1
    2bfe:	00 08       	sbc	r0, r0
    2c00:	0f 93       	push	r16
    2c02:	08 30       	cpi	r16, 0x08	; 8
    2c04:	98 f0       	brcs	.+38     	; 0x2c2c <__lshrdi3+0x30>
    2c06:	08 50       	subi	r16, 0x08	; 8
    2c08:	23 2f       	mov	r18, r19
    2c0a:	34 2f       	mov	r19, r20
    2c0c:	45 2f       	mov	r20, r21
    2c0e:	56 2f       	mov	r21, r22
    2c10:	67 2f       	mov	r22, r23
    2c12:	78 2f       	mov	r23, r24
    2c14:	89 2f       	mov	r24, r25
    2c16:	90 2d       	mov	r25, r0
    2c18:	f4 cf       	rjmp	.-24     	; 0x2c02 <__lshrdi3+0x6>
    2c1a:	05 94       	asr	r0
    2c1c:	97 95       	ror	r25
    2c1e:	87 95       	ror	r24
    2c20:	77 95       	ror	r23
    2c22:	67 95       	ror	r22
    2c24:	57 95       	ror	r21
    2c26:	47 95       	ror	r20
    2c28:	37 95       	ror	r19
    2c2a:	27 95       	ror	r18
    2c2c:	0a 95       	dec	r16
    2c2e:	aa f7       	brpl	.-22     	; 0x2c1a <__lshrdi3+0x1e>
    2c30:	0f 91       	pop	r16
    2c32:	08 95       	ret

00002c34 <__udivmodhi4>:
    2c34:	aa 1b       	sub	r26, r26
    2c36:	bb 1b       	sub	r27, r27
    2c38:	51 e1       	ldi	r21, 0x11	; 17
    2c3a:	07 c0       	rjmp	.+14     	; 0x2c4a <__udivmodhi4_ep>

00002c3c <__udivmodhi4_loop>:
    2c3c:	aa 1f       	adc	r26, r26
    2c3e:	bb 1f       	adc	r27, r27
    2c40:	a6 17       	cp	r26, r22
    2c42:	b7 07       	cpc	r27, r23
    2c44:	10 f0       	brcs	.+4      	; 0x2c4a <__udivmodhi4_ep>
    2c46:	a6 1b       	sub	r26, r22
    2c48:	b7 0b       	sbc	r27, r23

00002c4a <__udivmodhi4_ep>:
    2c4a:	88 1f       	adc	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	5a 95       	dec	r21
    2c50:	a9 f7       	brne	.-22     	; 0x2c3c <__udivmodhi4_loop>
    2c52:	80 95       	com	r24
    2c54:	90 95       	com	r25
    2c56:	bc 01       	movw	r22, r24
    2c58:	cd 01       	movw	r24, r26
    2c5a:	08 95       	ret

00002c5c <__udivmodsi4>:
    2c5c:	a1 e2       	ldi	r26, 0x21	; 33
    2c5e:	1a 2e       	mov	r1, r26
    2c60:	aa 1b       	sub	r26, r26
    2c62:	bb 1b       	sub	r27, r27
    2c64:	fd 01       	movw	r30, r26
    2c66:	0d c0       	rjmp	.+26     	; 0x2c82 <__udivmodsi4_ep>

00002c68 <__udivmodsi4_loop>:
    2c68:	aa 1f       	adc	r26, r26
    2c6a:	bb 1f       	adc	r27, r27
    2c6c:	ee 1f       	adc	r30, r30
    2c6e:	ff 1f       	adc	r31, r31
    2c70:	a2 17       	cp	r26, r18
    2c72:	b3 07       	cpc	r27, r19
    2c74:	e4 07       	cpc	r30, r20
    2c76:	f5 07       	cpc	r31, r21
    2c78:	20 f0       	brcs	.+8      	; 0x2c82 <__udivmodsi4_ep>
    2c7a:	a2 1b       	sub	r26, r18
    2c7c:	b3 0b       	sbc	r27, r19
    2c7e:	e4 0b       	sbc	r30, r20
    2c80:	f5 0b       	sbc	r31, r21

00002c82 <__udivmodsi4_ep>:
    2c82:	66 1f       	adc	r22, r22
    2c84:	77 1f       	adc	r23, r23
    2c86:	88 1f       	adc	r24, r24
    2c88:	99 1f       	adc	r25, r25
    2c8a:	1a 94       	dec	r1
    2c8c:	69 f7       	brne	.-38     	; 0x2c68 <__udivmodsi4_loop>
    2c8e:	60 95       	com	r22
    2c90:	70 95       	com	r23
    2c92:	80 95       	com	r24
    2c94:	90 95       	com	r25
    2c96:	9b 01       	movw	r18, r22
    2c98:	ac 01       	movw	r20, r24
    2c9a:	bd 01       	movw	r22, r26
    2c9c:	cf 01       	movw	r24, r30
    2c9e:	08 95       	ret

00002ca0 <do_rand>:
    2ca0:	8f 92       	push	r8
    2ca2:	9f 92       	push	r9
    2ca4:	af 92       	push	r10
    2ca6:	bf 92       	push	r11
    2ca8:	cf 92       	push	r12
    2caa:	df 92       	push	r13
    2cac:	ef 92       	push	r14
    2cae:	ff 92       	push	r15
    2cb0:	cf 93       	push	r28
    2cb2:	df 93       	push	r29
    2cb4:	ec 01       	movw	r28, r24
    2cb6:	68 81       	ld	r22, Y
    2cb8:	79 81       	ldd	r23, Y+1	; 0x01
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbe:	61 15       	cp	r22, r1
    2cc0:	71 05       	cpc	r23, r1
    2cc2:	81 05       	cpc	r24, r1
    2cc4:	91 05       	cpc	r25, r1
    2cc6:	21 f4       	brne	.+8      	; 0x2cd0 <do_rand+0x30>
    2cc8:	64 e2       	ldi	r22, 0x24	; 36
    2cca:	79 ed       	ldi	r23, 0xD9	; 217
    2ccc:	8b e5       	ldi	r24, 0x5B	; 91
    2cce:	97 e0       	ldi	r25, 0x07	; 7
    2cd0:	2d e1       	ldi	r18, 0x1D	; 29
    2cd2:	33 ef       	ldi	r19, 0xF3	; 243
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	50 e0       	ldi	r21, 0x00	; 0
    2cd8:	5a df       	rcall	.-332    	; 0x2b8e <__divmodsi4>
    2cda:	49 01       	movw	r8, r18
    2cdc:	5a 01       	movw	r10, r20
    2cde:	9b 01       	movw	r18, r22
    2ce0:	ac 01       	movw	r20, r24
    2ce2:	a7 ea       	ldi	r26, 0xA7	; 167
    2ce4:	b1 e4       	ldi	r27, 0x41	; 65
    2ce6:	78 d4       	rcall	.+2288   	; 0x35d8 <__muluhisi3>
    2ce8:	6b 01       	movw	r12, r22
    2cea:	7c 01       	movw	r14, r24
    2cec:	ac ee       	ldi	r26, 0xEC	; 236
    2cee:	b4 ef       	ldi	r27, 0xF4	; 244
    2cf0:	a5 01       	movw	r20, r10
    2cf2:	94 01       	movw	r18, r8
    2cf4:	7d d4       	rcall	.+2298   	; 0x35f0 <__mulohisi3>
    2cf6:	c6 0e       	add	r12, r22
    2cf8:	d7 1e       	adc	r13, r23
    2cfa:	e8 1e       	adc	r14, r24
    2cfc:	f9 1e       	adc	r15, r25
    2cfe:	f7 fe       	sbrs	r15, 7
    2d00:	06 c0       	rjmp	.+12     	; 0x2d0e <do_rand+0x6e>
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	c8 1a       	sub	r12, r24
    2d06:	d1 08       	sbc	r13, r1
    2d08:	e1 08       	sbc	r14, r1
    2d0a:	80 e8       	ldi	r24, 0x80	; 128
    2d0c:	f8 0a       	sbc	r15, r24
    2d0e:	c8 82       	st	Y, r12
    2d10:	d9 82       	std	Y+1, r13	; 0x01
    2d12:	ea 82       	std	Y+2, r14	; 0x02
    2d14:	fb 82       	std	Y+3, r15	; 0x03
    2d16:	c6 01       	movw	r24, r12
    2d18:	9f 77       	andi	r25, 0x7F	; 127
    2d1a:	df 91       	pop	r29
    2d1c:	cf 91       	pop	r28
    2d1e:	ff 90       	pop	r15
    2d20:	ef 90       	pop	r14
    2d22:	df 90       	pop	r13
    2d24:	cf 90       	pop	r12
    2d26:	bf 90       	pop	r11
    2d28:	af 90       	pop	r10
    2d2a:	9f 90       	pop	r9
    2d2c:	8f 90       	pop	r8
    2d2e:	08 95       	ret

00002d30 <rand_r>:
    2d30:	b7 cf       	rjmp	.-146    	; 0x2ca0 <do_rand>

00002d32 <rand>:
    2d32:	80 e0       	ldi	r24, 0x00	; 0
    2d34:	91 e0       	ldi	r25, 0x01	; 1
    2d36:	b4 cf       	rjmp	.-152    	; 0x2ca0 <do_rand>

00002d38 <srand>:
    2d38:	a0 e0       	ldi	r26, 0x00	; 0
    2d3a:	b0 e0       	ldi	r27, 0x00	; 0
    2d3c:	80 93 00 01 	sts	0x0100, r24
    2d40:	90 93 01 01 	sts	0x0101, r25
    2d44:	a0 93 02 01 	sts	0x0102, r26
    2d48:	b0 93 03 01 	sts	0x0103, r27
    2d4c:	08 95       	ret

00002d4e <strcpy_P>:
    2d4e:	fb 01       	movw	r30, r22
    2d50:	dc 01       	movw	r26, r24
    2d52:	05 90       	lpm	r0, Z+
    2d54:	0d 92       	st	X+, r0
    2d56:	00 20       	and	r0, r0
    2d58:	e1 f7       	brne	.-8      	; 0x2d52 <strcpy_P+0x4>
    2d5a:	08 95       	ret

00002d5c <fdevopen>:
    2d5c:	0f 93       	push	r16
    2d5e:	1f 93       	push	r17
    2d60:	cf 93       	push	r28
    2d62:	df 93       	push	r29
    2d64:	ec 01       	movw	r28, r24
    2d66:	8b 01       	movw	r16, r22
    2d68:	00 97       	sbiw	r24, 0x00	; 0
    2d6a:	31 f4       	brne	.+12     	; 0x2d78 <fdevopen+0x1c>
    2d6c:	61 15       	cp	r22, r1
    2d6e:	71 05       	cpc	r23, r1
    2d70:	19 f4       	brne	.+6      	; 0x2d78 <fdevopen+0x1c>
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	90 e0       	ldi	r25, 0x00	; 0
    2d76:	37 c0       	rjmp	.+110    	; 0x2de6 <fdevopen+0x8a>
    2d78:	6e e0       	ldi	r22, 0x0E	; 14
    2d7a:	70 e0       	ldi	r23, 0x00	; 0
    2d7c:	81 e0       	ldi	r24, 0x01	; 1
    2d7e:	90 e0       	ldi	r25, 0x00	; 0
    2d80:	3d d2       	rcall	.+1146   	; 0x31fc <calloc>
    2d82:	fc 01       	movw	r30, r24
    2d84:	00 97       	sbiw	r24, 0x00	; 0
    2d86:	a9 f3       	breq	.-22     	; 0x2d72 <fdevopen+0x16>
    2d88:	80 e8       	ldi	r24, 0x80	; 128
    2d8a:	83 83       	std	Z+3, r24	; 0x03
    2d8c:	01 15       	cp	r16, r1
    2d8e:	11 05       	cpc	r17, r1
    2d90:	71 f0       	breq	.+28     	; 0x2dae <fdevopen+0x52>
    2d92:	13 87       	std	Z+11, r17	; 0x0b
    2d94:	02 87       	std	Z+10, r16	; 0x0a
    2d96:	81 e8       	ldi	r24, 0x81	; 129
    2d98:	83 83       	std	Z+3, r24	; 0x03
    2d9a:	80 91 22 03 	lds	r24, 0x0322
    2d9e:	90 91 23 03 	lds	r25, 0x0323
    2da2:	89 2b       	or	r24, r25
    2da4:	21 f4       	brne	.+8      	; 0x2dae <fdevopen+0x52>
    2da6:	f0 93 23 03 	sts	0x0323, r31
    2daa:	e0 93 22 03 	sts	0x0322, r30
    2dae:	20 97       	sbiw	r28, 0x00	; 0
    2db0:	c9 f0       	breq	.+50     	; 0x2de4 <fdevopen+0x88>
    2db2:	d1 87       	std	Z+9, r29	; 0x09
    2db4:	c0 87       	std	Z+8, r28	; 0x08
    2db6:	83 81       	ldd	r24, Z+3	; 0x03
    2db8:	82 60       	ori	r24, 0x02	; 2
    2dba:	83 83       	std	Z+3, r24	; 0x03
    2dbc:	80 91 24 03 	lds	r24, 0x0324
    2dc0:	90 91 25 03 	lds	r25, 0x0325
    2dc4:	89 2b       	or	r24, r25
    2dc6:	71 f4       	brne	.+28     	; 0x2de4 <fdevopen+0x88>
    2dc8:	f0 93 25 03 	sts	0x0325, r31
    2dcc:	e0 93 24 03 	sts	0x0324, r30
    2dd0:	80 91 26 03 	lds	r24, 0x0326
    2dd4:	90 91 27 03 	lds	r25, 0x0327
    2dd8:	89 2b       	or	r24, r25
    2dda:	21 f4       	brne	.+8      	; 0x2de4 <fdevopen+0x88>
    2ddc:	f0 93 27 03 	sts	0x0327, r31
    2de0:	e0 93 26 03 	sts	0x0326, r30
    2de4:	cf 01       	movw	r24, r30
    2de6:	df 91       	pop	r29
    2de8:	cf 91       	pop	r28
    2dea:	1f 91       	pop	r17
    2dec:	0f 91       	pop	r16
    2dee:	08 95       	ret

00002df0 <printf>:
    2df0:	a0 e0       	ldi	r26, 0x00	; 0
    2df2:	b0 e0       	ldi	r27, 0x00	; 0
    2df4:	ed ef       	ldi	r30, 0xFD	; 253
    2df6:	f6 e1       	ldi	r31, 0x16	; 22
    2df8:	0f c4       	rjmp	.+2078   	; 0x3618 <__prologue_saves__+0x20>
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	35 96       	adiw	r30, 0x05	; 5
    2dfe:	61 91       	ld	r22, Z+
    2e00:	71 91       	ld	r23, Z+
    2e02:	af 01       	movw	r20, r30
    2e04:	80 91 24 03 	lds	r24, 0x0324
    2e08:	90 91 25 03 	lds	r25, 0x0325
    2e0c:	34 d0       	rcall	.+104    	; 0x2e76 <vfprintf>
    2e0e:	e2 e0       	ldi	r30, 0x02	; 2
    2e10:	1f c4       	rjmp	.+2110   	; 0x3650 <__epilogue_restores__+0x20>

00002e12 <putchar>:
    2e12:	60 91 24 03 	lds	r22, 0x0324
    2e16:	70 91 25 03 	lds	r23, 0x0325
    2e1a:	4e c3       	rjmp	.+1692   	; 0x34b8 <fputc>

00002e1c <puts>:
    2e1c:	0f 93       	push	r16
    2e1e:	1f 93       	push	r17
    2e20:	cf 93       	push	r28
    2e22:	df 93       	push	r29
    2e24:	e0 91 24 03 	lds	r30, 0x0324
    2e28:	f0 91 25 03 	lds	r31, 0x0325
    2e2c:	23 81       	ldd	r18, Z+3	; 0x03
    2e2e:	21 ff       	sbrs	r18, 1
    2e30:	1b c0       	rjmp	.+54     	; 0x2e68 <puts+0x4c>
    2e32:	ec 01       	movw	r28, r24
    2e34:	00 e0       	ldi	r16, 0x00	; 0
    2e36:	10 e0       	ldi	r17, 0x00	; 0
    2e38:	89 91       	ld	r24, Y+
    2e3a:	60 91 24 03 	lds	r22, 0x0324
    2e3e:	70 91 25 03 	lds	r23, 0x0325
    2e42:	db 01       	movw	r26, r22
    2e44:	18 96       	adiw	r26, 0x08	; 8
    2e46:	ed 91       	ld	r30, X+
    2e48:	fc 91       	ld	r31, X
    2e4a:	19 97       	sbiw	r26, 0x09	; 9
    2e4c:	88 23       	and	r24, r24
    2e4e:	31 f0       	breq	.+12     	; 0x2e5c <puts+0x40>
    2e50:	09 95       	icall
    2e52:	89 2b       	or	r24, r25
    2e54:	89 f3       	breq	.-30     	; 0x2e38 <puts+0x1c>
    2e56:	0f ef       	ldi	r16, 0xFF	; 255
    2e58:	1f ef       	ldi	r17, 0xFF	; 255
    2e5a:	ee cf       	rjmp	.-36     	; 0x2e38 <puts+0x1c>
    2e5c:	8a e0       	ldi	r24, 0x0A	; 10
    2e5e:	09 95       	icall
    2e60:	89 2b       	or	r24, r25
    2e62:	11 f4       	brne	.+4      	; 0x2e68 <puts+0x4c>
    2e64:	c8 01       	movw	r24, r16
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <puts+0x50>
    2e68:	8f ef       	ldi	r24, 0xFF	; 255
    2e6a:	9f ef       	ldi	r25, 0xFF	; 255
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	08 95       	ret

00002e76 <vfprintf>:
    2e76:	ac e0       	ldi	r26, 0x0C	; 12
    2e78:	b0 e0       	ldi	r27, 0x00	; 0
    2e7a:	e0 e4       	ldi	r30, 0x40	; 64
    2e7c:	f7 e1       	ldi	r31, 0x17	; 23
    2e7e:	bc c3       	rjmp	.+1912   	; 0x35f8 <__prologue_saves__>
    2e80:	7c 01       	movw	r14, r24
    2e82:	6b 01       	movw	r12, r22
    2e84:	8a 01       	movw	r16, r20
    2e86:	fc 01       	movw	r30, r24
    2e88:	17 82       	std	Z+7, r1	; 0x07
    2e8a:	16 82       	std	Z+6, r1	; 0x06
    2e8c:	83 81       	ldd	r24, Z+3	; 0x03
    2e8e:	81 ff       	sbrs	r24, 1
    2e90:	b0 c1       	rjmp	.+864    	; 0x31f2 <vfprintf+0x37c>
    2e92:	ce 01       	movw	r24, r28
    2e94:	01 96       	adiw	r24, 0x01	; 1
    2e96:	4c 01       	movw	r8, r24
    2e98:	f7 01       	movw	r30, r14
    2e9a:	93 81       	ldd	r25, Z+3	; 0x03
    2e9c:	f6 01       	movw	r30, r12
    2e9e:	93 fd       	sbrc	r25, 3
    2ea0:	85 91       	lpm	r24, Z+
    2ea2:	93 ff       	sbrs	r25, 3
    2ea4:	81 91       	ld	r24, Z+
    2ea6:	6f 01       	movw	r12, r30
    2ea8:	88 23       	and	r24, r24
    2eaa:	09 f4       	brne	.+2      	; 0x2eae <vfprintf+0x38>
    2eac:	9e c1       	rjmp	.+828    	; 0x31ea <vfprintf+0x374>
    2eae:	85 32       	cpi	r24, 0x25	; 37
    2eb0:	39 f4       	brne	.+14     	; 0x2ec0 <vfprintf+0x4a>
    2eb2:	93 fd       	sbrc	r25, 3
    2eb4:	85 91       	lpm	r24, Z+
    2eb6:	93 ff       	sbrs	r25, 3
    2eb8:	81 91       	ld	r24, Z+
    2eba:	6f 01       	movw	r12, r30
    2ebc:	85 32       	cpi	r24, 0x25	; 37
    2ebe:	21 f4       	brne	.+8      	; 0x2ec8 <vfprintf+0x52>
    2ec0:	b7 01       	movw	r22, r14
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	f9 d2       	rcall	.+1522   	; 0x34b8 <fputc>
    2ec6:	e8 cf       	rjmp	.-48     	; 0x2e98 <vfprintf+0x22>
    2ec8:	51 2c       	mov	r5, r1
    2eca:	31 2c       	mov	r3, r1
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	20 32       	cpi	r18, 0x20	; 32
    2ed0:	a0 f4       	brcc	.+40     	; 0x2efa <vfprintf+0x84>
    2ed2:	8b 32       	cpi	r24, 0x2B	; 43
    2ed4:	69 f0       	breq	.+26     	; 0x2ef0 <vfprintf+0x7a>
    2ed6:	30 f4       	brcc	.+12     	; 0x2ee4 <vfprintf+0x6e>
    2ed8:	80 32       	cpi	r24, 0x20	; 32
    2eda:	59 f0       	breq	.+22     	; 0x2ef2 <vfprintf+0x7c>
    2edc:	83 32       	cpi	r24, 0x23	; 35
    2ede:	69 f4       	brne	.+26     	; 0x2efa <vfprintf+0x84>
    2ee0:	20 61       	ori	r18, 0x10	; 16
    2ee2:	2c c0       	rjmp	.+88     	; 0x2f3c <vfprintf+0xc6>
    2ee4:	8d 32       	cpi	r24, 0x2D	; 45
    2ee6:	39 f0       	breq	.+14     	; 0x2ef6 <vfprintf+0x80>
    2ee8:	80 33       	cpi	r24, 0x30	; 48
    2eea:	39 f4       	brne	.+14     	; 0x2efa <vfprintf+0x84>
    2eec:	21 60       	ori	r18, 0x01	; 1
    2eee:	26 c0       	rjmp	.+76     	; 0x2f3c <vfprintf+0xc6>
    2ef0:	22 60       	ori	r18, 0x02	; 2
    2ef2:	24 60       	ori	r18, 0x04	; 4
    2ef4:	23 c0       	rjmp	.+70     	; 0x2f3c <vfprintf+0xc6>
    2ef6:	28 60       	ori	r18, 0x08	; 8
    2ef8:	21 c0       	rjmp	.+66     	; 0x2f3c <vfprintf+0xc6>
    2efa:	27 fd       	sbrc	r18, 7
    2efc:	27 c0       	rjmp	.+78     	; 0x2f4c <vfprintf+0xd6>
    2efe:	30 ed       	ldi	r19, 0xD0	; 208
    2f00:	38 0f       	add	r19, r24
    2f02:	3a 30       	cpi	r19, 0x0A	; 10
    2f04:	78 f4       	brcc	.+30     	; 0x2f24 <vfprintf+0xae>
    2f06:	26 ff       	sbrs	r18, 6
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <vfprintf+0xa0>
    2f0a:	fa e0       	ldi	r31, 0x0A	; 10
    2f0c:	5f 9e       	mul	r5, r31
    2f0e:	30 0d       	add	r19, r0
    2f10:	11 24       	eor	r1, r1
    2f12:	53 2e       	mov	r5, r19
    2f14:	13 c0       	rjmp	.+38     	; 0x2f3c <vfprintf+0xc6>
    2f16:	8a e0       	ldi	r24, 0x0A	; 10
    2f18:	38 9e       	mul	r3, r24
    2f1a:	30 0d       	add	r19, r0
    2f1c:	11 24       	eor	r1, r1
    2f1e:	33 2e       	mov	r3, r19
    2f20:	20 62       	ori	r18, 0x20	; 32
    2f22:	0c c0       	rjmp	.+24     	; 0x2f3c <vfprintf+0xc6>
    2f24:	8e 32       	cpi	r24, 0x2E	; 46
    2f26:	21 f4       	brne	.+8      	; 0x2f30 <vfprintf+0xba>
    2f28:	26 fd       	sbrc	r18, 6
    2f2a:	5f c1       	rjmp	.+702    	; 0x31ea <vfprintf+0x374>
    2f2c:	20 64       	ori	r18, 0x40	; 64
    2f2e:	06 c0       	rjmp	.+12     	; 0x2f3c <vfprintf+0xc6>
    2f30:	8c 36       	cpi	r24, 0x6C	; 108
    2f32:	11 f4       	brne	.+4      	; 0x2f38 <vfprintf+0xc2>
    2f34:	20 68       	ori	r18, 0x80	; 128
    2f36:	02 c0       	rjmp	.+4      	; 0x2f3c <vfprintf+0xc6>
    2f38:	88 36       	cpi	r24, 0x68	; 104
    2f3a:	41 f4       	brne	.+16     	; 0x2f4c <vfprintf+0xd6>
    2f3c:	f6 01       	movw	r30, r12
    2f3e:	93 fd       	sbrc	r25, 3
    2f40:	85 91       	lpm	r24, Z+
    2f42:	93 ff       	sbrs	r25, 3
    2f44:	81 91       	ld	r24, Z+
    2f46:	6f 01       	movw	r12, r30
    2f48:	81 11       	cpse	r24, r1
    2f4a:	c1 cf       	rjmp	.-126    	; 0x2ece <vfprintf+0x58>
    2f4c:	98 2f       	mov	r25, r24
    2f4e:	9f 7d       	andi	r25, 0xDF	; 223
    2f50:	95 54       	subi	r25, 0x45	; 69
    2f52:	93 30       	cpi	r25, 0x03	; 3
    2f54:	28 f4       	brcc	.+10     	; 0x2f60 <vfprintf+0xea>
    2f56:	0c 5f       	subi	r16, 0xFC	; 252
    2f58:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5a:	ff e3       	ldi	r31, 0x3F	; 63
    2f5c:	f9 83       	std	Y+1, r31	; 0x01
    2f5e:	0d c0       	rjmp	.+26     	; 0x2f7a <vfprintf+0x104>
    2f60:	83 36       	cpi	r24, 0x63	; 99
    2f62:	31 f0       	breq	.+12     	; 0x2f70 <vfprintf+0xfa>
    2f64:	83 37       	cpi	r24, 0x73	; 115
    2f66:	71 f0       	breq	.+28     	; 0x2f84 <vfprintf+0x10e>
    2f68:	83 35       	cpi	r24, 0x53	; 83
    2f6a:	09 f0       	breq	.+2      	; 0x2f6e <vfprintf+0xf8>
    2f6c:	57 c0       	rjmp	.+174    	; 0x301c <vfprintf+0x1a6>
    2f6e:	21 c0       	rjmp	.+66     	; 0x2fb2 <vfprintf+0x13c>
    2f70:	f8 01       	movw	r30, r16
    2f72:	80 81       	ld	r24, Z
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	0e 5f       	subi	r16, 0xFE	; 254
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7a:	44 24       	eor	r4, r4
    2f7c:	43 94       	inc	r4
    2f7e:	51 2c       	mov	r5, r1
    2f80:	54 01       	movw	r10, r8
    2f82:	14 c0       	rjmp	.+40     	; 0x2fac <vfprintf+0x136>
    2f84:	38 01       	movw	r6, r16
    2f86:	f2 e0       	ldi	r31, 0x02	; 2
    2f88:	6f 0e       	add	r6, r31
    2f8a:	71 1c       	adc	r7, r1
    2f8c:	f8 01       	movw	r30, r16
    2f8e:	a0 80       	ld	r10, Z
    2f90:	b1 80       	ldd	r11, Z+1	; 0x01
    2f92:	26 ff       	sbrs	r18, 6
    2f94:	03 c0       	rjmp	.+6      	; 0x2f9c <vfprintf+0x126>
    2f96:	65 2d       	mov	r22, r5
    2f98:	70 e0       	ldi	r23, 0x00	; 0
    2f9a:	02 c0       	rjmp	.+4      	; 0x2fa0 <vfprintf+0x12a>
    2f9c:	6f ef       	ldi	r22, 0xFF	; 255
    2f9e:	7f ef       	ldi	r23, 0xFF	; 255
    2fa0:	c5 01       	movw	r24, r10
    2fa2:	2c 87       	std	Y+12, r18	; 0x0c
    2fa4:	7e d2       	rcall	.+1276   	; 0x34a2 <strnlen>
    2fa6:	2c 01       	movw	r4, r24
    2fa8:	83 01       	movw	r16, r6
    2faa:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fac:	2f 77       	andi	r18, 0x7F	; 127
    2fae:	22 2e       	mov	r2, r18
    2fb0:	16 c0       	rjmp	.+44     	; 0x2fde <vfprintf+0x168>
    2fb2:	38 01       	movw	r6, r16
    2fb4:	f2 e0       	ldi	r31, 0x02	; 2
    2fb6:	6f 0e       	add	r6, r31
    2fb8:	71 1c       	adc	r7, r1
    2fba:	f8 01       	movw	r30, r16
    2fbc:	a0 80       	ld	r10, Z
    2fbe:	b1 80       	ldd	r11, Z+1	; 0x01
    2fc0:	26 ff       	sbrs	r18, 6
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <vfprintf+0x154>
    2fc4:	65 2d       	mov	r22, r5
    2fc6:	70 e0       	ldi	r23, 0x00	; 0
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <vfprintf+0x158>
    2fca:	6f ef       	ldi	r22, 0xFF	; 255
    2fcc:	7f ef       	ldi	r23, 0xFF	; 255
    2fce:	c5 01       	movw	r24, r10
    2fd0:	2c 87       	std	Y+12, r18	; 0x0c
    2fd2:	55 d2       	rcall	.+1194   	; 0x347e <strnlen_P>
    2fd4:	2c 01       	movw	r4, r24
    2fd6:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fd8:	20 68       	ori	r18, 0x80	; 128
    2fda:	22 2e       	mov	r2, r18
    2fdc:	83 01       	movw	r16, r6
    2fde:	23 fc       	sbrc	r2, 3
    2fe0:	19 c0       	rjmp	.+50     	; 0x3014 <vfprintf+0x19e>
    2fe2:	83 2d       	mov	r24, r3
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	48 16       	cp	r4, r24
    2fe8:	59 06       	cpc	r5, r25
    2fea:	a0 f4       	brcc	.+40     	; 0x3014 <vfprintf+0x19e>
    2fec:	b7 01       	movw	r22, r14
    2fee:	80 e2       	ldi	r24, 0x20	; 32
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	62 d2       	rcall	.+1220   	; 0x34b8 <fputc>
    2ff4:	3a 94       	dec	r3
    2ff6:	f5 cf       	rjmp	.-22     	; 0x2fe2 <vfprintf+0x16c>
    2ff8:	f5 01       	movw	r30, r10
    2ffa:	27 fc       	sbrc	r2, 7
    2ffc:	85 91       	lpm	r24, Z+
    2ffe:	27 fe       	sbrs	r2, 7
    3000:	81 91       	ld	r24, Z+
    3002:	5f 01       	movw	r10, r30
    3004:	b7 01       	movw	r22, r14
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	57 d2       	rcall	.+1198   	; 0x34b8 <fputc>
    300a:	31 10       	cpse	r3, r1
    300c:	3a 94       	dec	r3
    300e:	f1 e0       	ldi	r31, 0x01	; 1
    3010:	4f 1a       	sub	r4, r31
    3012:	51 08       	sbc	r5, r1
    3014:	41 14       	cp	r4, r1
    3016:	51 04       	cpc	r5, r1
    3018:	79 f7       	brne	.-34     	; 0x2ff8 <vfprintf+0x182>
    301a:	de c0       	rjmp	.+444    	; 0x31d8 <vfprintf+0x362>
    301c:	84 36       	cpi	r24, 0x64	; 100
    301e:	11 f0       	breq	.+4      	; 0x3024 <vfprintf+0x1ae>
    3020:	89 36       	cpi	r24, 0x69	; 105
    3022:	31 f5       	brne	.+76     	; 0x3070 <vfprintf+0x1fa>
    3024:	f8 01       	movw	r30, r16
    3026:	27 ff       	sbrs	r18, 7
    3028:	07 c0       	rjmp	.+14     	; 0x3038 <vfprintf+0x1c2>
    302a:	60 81       	ld	r22, Z
    302c:	71 81       	ldd	r23, Z+1	; 0x01
    302e:	82 81       	ldd	r24, Z+2	; 0x02
    3030:	93 81       	ldd	r25, Z+3	; 0x03
    3032:	0c 5f       	subi	r16, 0xFC	; 252
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	08 c0       	rjmp	.+16     	; 0x3048 <vfprintf+0x1d2>
    3038:	60 81       	ld	r22, Z
    303a:	71 81       	ldd	r23, Z+1	; 0x01
    303c:	88 27       	eor	r24, r24
    303e:	77 fd       	sbrc	r23, 7
    3040:	80 95       	com	r24
    3042:	98 2f       	mov	r25, r24
    3044:	0e 5f       	subi	r16, 0xFE	; 254
    3046:	1f 4f       	sbci	r17, 0xFF	; 255
    3048:	2f 76       	andi	r18, 0x6F	; 111
    304a:	b2 2e       	mov	r11, r18
    304c:	97 ff       	sbrs	r25, 7
    304e:	09 c0       	rjmp	.+18     	; 0x3062 <vfprintf+0x1ec>
    3050:	90 95       	com	r25
    3052:	80 95       	com	r24
    3054:	70 95       	com	r23
    3056:	61 95       	neg	r22
    3058:	7f 4f       	sbci	r23, 0xFF	; 255
    305a:	8f 4f       	sbci	r24, 0xFF	; 255
    305c:	9f 4f       	sbci	r25, 0xFF	; 255
    305e:	20 68       	ori	r18, 0x80	; 128
    3060:	b2 2e       	mov	r11, r18
    3062:	2a e0       	ldi	r18, 0x0A	; 10
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	a4 01       	movw	r20, r8
    3068:	59 d2       	rcall	.+1202   	; 0x351c <__ultoa_invert>
    306a:	a8 2e       	mov	r10, r24
    306c:	a8 18       	sub	r10, r8
    306e:	43 c0       	rjmp	.+134    	; 0x30f6 <vfprintf+0x280>
    3070:	85 37       	cpi	r24, 0x75	; 117
    3072:	29 f4       	brne	.+10     	; 0x307e <vfprintf+0x208>
    3074:	2f 7e       	andi	r18, 0xEF	; 239
    3076:	b2 2e       	mov	r11, r18
    3078:	2a e0       	ldi	r18, 0x0A	; 10
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	25 c0       	rjmp	.+74     	; 0x30c8 <vfprintf+0x252>
    307e:	f2 2f       	mov	r31, r18
    3080:	f9 7f       	andi	r31, 0xF9	; 249
    3082:	bf 2e       	mov	r11, r31
    3084:	8f 36       	cpi	r24, 0x6F	; 111
    3086:	c1 f0       	breq	.+48     	; 0x30b8 <vfprintf+0x242>
    3088:	18 f4       	brcc	.+6      	; 0x3090 <vfprintf+0x21a>
    308a:	88 35       	cpi	r24, 0x58	; 88
    308c:	79 f0       	breq	.+30     	; 0x30ac <vfprintf+0x236>
    308e:	ad c0       	rjmp	.+346    	; 0x31ea <vfprintf+0x374>
    3090:	80 37       	cpi	r24, 0x70	; 112
    3092:	19 f0       	breq	.+6      	; 0x309a <vfprintf+0x224>
    3094:	88 37       	cpi	r24, 0x78	; 120
    3096:	21 f0       	breq	.+8      	; 0x30a0 <vfprintf+0x22a>
    3098:	a8 c0       	rjmp	.+336    	; 0x31ea <vfprintf+0x374>
    309a:	2f 2f       	mov	r18, r31
    309c:	20 61       	ori	r18, 0x10	; 16
    309e:	b2 2e       	mov	r11, r18
    30a0:	b4 fe       	sbrs	r11, 4
    30a2:	0d c0       	rjmp	.+26     	; 0x30be <vfprintf+0x248>
    30a4:	8b 2d       	mov	r24, r11
    30a6:	84 60       	ori	r24, 0x04	; 4
    30a8:	b8 2e       	mov	r11, r24
    30aa:	09 c0       	rjmp	.+18     	; 0x30be <vfprintf+0x248>
    30ac:	24 ff       	sbrs	r18, 4
    30ae:	0a c0       	rjmp	.+20     	; 0x30c4 <vfprintf+0x24e>
    30b0:	9f 2f       	mov	r25, r31
    30b2:	96 60       	ori	r25, 0x06	; 6
    30b4:	b9 2e       	mov	r11, r25
    30b6:	06 c0       	rjmp	.+12     	; 0x30c4 <vfprintf+0x24e>
    30b8:	28 e0       	ldi	r18, 0x08	; 8
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	05 c0       	rjmp	.+10     	; 0x30c8 <vfprintf+0x252>
    30be:	20 e1       	ldi	r18, 0x10	; 16
    30c0:	30 e0       	ldi	r19, 0x00	; 0
    30c2:	02 c0       	rjmp	.+4      	; 0x30c8 <vfprintf+0x252>
    30c4:	20 e1       	ldi	r18, 0x10	; 16
    30c6:	32 e0       	ldi	r19, 0x02	; 2
    30c8:	f8 01       	movw	r30, r16
    30ca:	b7 fe       	sbrs	r11, 7
    30cc:	07 c0       	rjmp	.+14     	; 0x30dc <vfprintf+0x266>
    30ce:	60 81       	ld	r22, Z
    30d0:	71 81       	ldd	r23, Z+1	; 0x01
    30d2:	82 81       	ldd	r24, Z+2	; 0x02
    30d4:	93 81       	ldd	r25, Z+3	; 0x03
    30d6:	0c 5f       	subi	r16, 0xFC	; 252
    30d8:	1f 4f       	sbci	r17, 0xFF	; 255
    30da:	06 c0       	rjmp	.+12     	; 0x30e8 <vfprintf+0x272>
    30dc:	60 81       	ld	r22, Z
    30de:	71 81       	ldd	r23, Z+1	; 0x01
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	90 e0       	ldi	r25, 0x00	; 0
    30e4:	0e 5f       	subi	r16, 0xFE	; 254
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	a4 01       	movw	r20, r8
    30ea:	18 d2       	rcall	.+1072   	; 0x351c <__ultoa_invert>
    30ec:	a8 2e       	mov	r10, r24
    30ee:	a8 18       	sub	r10, r8
    30f0:	fb 2d       	mov	r31, r11
    30f2:	ff 77       	andi	r31, 0x7F	; 127
    30f4:	bf 2e       	mov	r11, r31
    30f6:	b6 fe       	sbrs	r11, 6
    30f8:	0b c0       	rjmp	.+22     	; 0x3110 <vfprintf+0x29a>
    30fa:	2b 2d       	mov	r18, r11
    30fc:	2e 7f       	andi	r18, 0xFE	; 254
    30fe:	a5 14       	cp	r10, r5
    3100:	50 f4       	brcc	.+20     	; 0x3116 <vfprintf+0x2a0>
    3102:	b4 fe       	sbrs	r11, 4
    3104:	0a c0       	rjmp	.+20     	; 0x311a <vfprintf+0x2a4>
    3106:	b2 fc       	sbrc	r11, 2
    3108:	08 c0       	rjmp	.+16     	; 0x311a <vfprintf+0x2a4>
    310a:	2b 2d       	mov	r18, r11
    310c:	2e 7e       	andi	r18, 0xEE	; 238
    310e:	05 c0       	rjmp	.+10     	; 0x311a <vfprintf+0x2a4>
    3110:	7a 2c       	mov	r7, r10
    3112:	2b 2d       	mov	r18, r11
    3114:	03 c0       	rjmp	.+6      	; 0x311c <vfprintf+0x2a6>
    3116:	7a 2c       	mov	r7, r10
    3118:	01 c0       	rjmp	.+2      	; 0x311c <vfprintf+0x2a6>
    311a:	75 2c       	mov	r7, r5
    311c:	24 ff       	sbrs	r18, 4
    311e:	0d c0       	rjmp	.+26     	; 0x313a <vfprintf+0x2c4>
    3120:	fe 01       	movw	r30, r28
    3122:	ea 0d       	add	r30, r10
    3124:	f1 1d       	adc	r31, r1
    3126:	80 81       	ld	r24, Z
    3128:	80 33       	cpi	r24, 0x30	; 48
    312a:	11 f4       	brne	.+4      	; 0x3130 <vfprintf+0x2ba>
    312c:	29 7e       	andi	r18, 0xE9	; 233
    312e:	09 c0       	rjmp	.+18     	; 0x3142 <vfprintf+0x2cc>
    3130:	22 ff       	sbrs	r18, 2
    3132:	06 c0       	rjmp	.+12     	; 0x3140 <vfprintf+0x2ca>
    3134:	73 94       	inc	r7
    3136:	73 94       	inc	r7
    3138:	04 c0       	rjmp	.+8      	; 0x3142 <vfprintf+0x2cc>
    313a:	82 2f       	mov	r24, r18
    313c:	86 78       	andi	r24, 0x86	; 134
    313e:	09 f0       	breq	.+2      	; 0x3142 <vfprintf+0x2cc>
    3140:	73 94       	inc	r7
    3142:	23 fd       	sbrc	r18, 3
    3144:	12 c0       	rjmp	.+36     	; 0x316a <vfprintf+0x2f4>
    3146:	20 ff       	sbrs	r18, 0
    3148:	06 c0       	rjmp	.+12     	; 0x3156 <vfprintf+0x2e0>
    314a:	5a 2c       	mov	r5, r10
    314c:	73 14       	cp	r7, r3
    314e:	18 f4       	brcc	.+6      	; 0x3156 <vfprintf+0x2e0>
    3150:	53 0c       	add	r5, r3
    3152:	57 18       	sub	r5, r7
    3154:	73 2c       	mov	r7, r3
    3156:	73 14       	cp	r7, r3
    3158:	60 f4       	brcc	.+24     	; 0x3172 <vfprintf+0x2fc>
    315a:	b7 01       	movw	r22, r14
    315c:	80 e2       	ldi	r24, 0x20	; 32
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	2c 87       	std	Y+12, r18	; 0x0c
    3162:	aa d1       	rcall	.+852    	; 0x34b8 <fputc>
    3164:	73 94       	inc	r7
    3166:	2c 85       	ldd	r18, Y+12	; 0x0c
    3168:	f6 cf       	rjmp	.-20     	; 0x3156 <vfprintf+0x2e0>
    316a:	73 14       	cp	r7, r3
    316c:	10 f4       	brcc	.+4      	; 0x3172 <vfprintf+0x2fc>
    316e:	37 18       	sub	r3, r7
    3170:	01 c0       	rjmp	.+2      	; 0x3174 <vfprintf+0x2fe>
    3172:	31 2c       	mov	r3, r1
    3174:	24 ff       	sbrs	r18, 4
    3176:	11 c0       	rjmp	.+34     	; 0x319a <vfprintf+0x324>
    3178:	b7 01       	movw	r22, r14
    317a:	80 e3       	ldi	r24, 0x30	; 48
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	2c 87       	std	Y+12, r18	; 0x0c
    3180:	9b d1       	rcall	.+822    	; 0x34b8 <fputc>
    3182:	2c 85       	ldd	r18, Y+12	; 0x0c
    3184:	22 ff       	sbrs	r18, 2
    3186:	16 c0       	rjmp	.+44     	; 0x31b4 <vfprintf+0x33e>
    3188:	21 ff       	sbrs	r18, 1
    318a:	03 c0       	rjmp	.+6      	; 0x3192 <vfprintf+0x31c>
    318c:	88 e5       	ldi	r24, 0x58	; 88
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	02 c0       	rjmp	.+4      	; 0x3196 <vfprintf+0x320>
    3192:	88 e7       	ldi	r24, 0x78	; 120
    3194:	90 e0       	ldi	r25, 0x00	; 0
    3196:	b7 01       	movw	r22, r14
    3198:	0c c0       	rjmp	.+24     	; 0x31b2 <vfprintf+0x33c>
    319a:	82 2f       	mov	r24, r18
    319c:	86 78       	andi	r24, 0x86	; 134
    319e:	51 f0       	breq	.+20     	; 0x31b4 <vfprintf+0x33e>
    31a0:	21 fd       	sbrc	r18, 1
    31a2:	02 c0       	rjmp	.+4      	; 0x31a8 <vfprintf+0x332>
    31a4:	80 e2       	ldi	r24, 0x20	; 32
    31a6:	01 c0       	rjmp	.+2      	; 0x31aa <vfprintf+0x334>
    31a8:	8b e2       	ldi	r24, 0x2B	; 43
    31aa:	27 fd       	sbrc	r18, 7
    31ac:	8d e2       	ldi	r24, 0x2D	; 45
    31ae:	b7 01       	movw	r22, r14
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	82 d1       	rcall	.+772    	; 0x34b8 <fputc>
    31b4:	a5 14       	cp	r10, r5
    31b6:	30 f4       	brcc	.+12     	; 0x31c4 <vfprintf+0x34e>
    31b8:	b7 01       	movw	r22, r14
    31ba:	80 e3       	ldi	r24, 0x30	; 48
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	7c d1       	rcall	.+760    	; 0x34b8 <fputc>
    31c0:	5a 94       	dec	r5
    31c2:	f8 cf       	rjmp	.-16     	; 0x31b4 <vfprintf+0x33e>
    31c4:	aa 94       	dec	r10
    31c6:	f4 01       	movw	r30, r8
    31c8:	ea 0d       	add	r30, r10
    31ca:	f1 1d       	adc	r31, r1
    31cc:	80 81       	ld	r24, Z
    31ce:	b7 01       	movw	r22, r14
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	72 d1       	rcall	.+740    	; 0x34b8 <fputc>
    31d4:	a1 10       	cpse	r10, r1
    31d6:	f6 cf       	rjmp	.-20     	; 0x31c4 <vfprintf+0x34e>
    31d8:	33 20       	and	r3, r3
    31da:	09 f4       	brne	.+2      	; 0x31de <vfprintf+0x368>
    31dc:	5d ce       	rjmp	.-838    	; 0x2e98 <vfprintf+0x22>
    31de:	b7 01       	movw	r22, r14
    31e0:	80 e2       	ldi	r24, 0x20	; 32
    31e2:	90 e0       	ldi	r25, 0x00	; 0
    31e4:	69 d1       	rcall	.+722    	; 0x34b8 <fputc>
    31e6:	3a 94       	dec	r3
    31e8:	f7 cf       	rjmp	.-18     	; 0x31d8 <vfprintf+0x362>
    31ea:	f7 01       	movw	r30, r14
    31ec:	86 81       	ldd	r24, Z+6	; 0x06
    31ee:	97 81       	ldd	r25, Z+7	; 0x07
    31f0:	02 c0       	rjmp	.+4      	; 0x31f6 <vfprintf+0x380>
    31f2:	8f ef       	ldi	r24, 0xFF	; 255
    31f4:	9f ef       	ldi	r25, 0xFF	; 255
    31f6:	2c 96       	adiw	r28, 0x0c	; 12
    31f8:	e2 e1       	ldi	r30, 0x12	; 18
    31fa:	1a c2       	rjmp	.+1076   	; 0x3630 <__epilogue_restores__>

000031fc <calloc>:
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	86 9f       	mul	r24, r22
    3206:	80 01       	movw	r16, r0
    3208:	87 9f       	mul	r24, r23
    320a:	10 0d       	add	r17, r0
    320c:	96 9f       	mul	r25, r22
    320e:	10 0d       	add	r17, r0
    3210:	11 24       	eor	r1, r1
    3212:	c8 01       	movw	r24, r16
    3214:	0d d0       	rcall	.+26     	; 0x3230 <malloc>
    3216:	ec 01       	movw	r28, r24
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	21 f0       	breq	.+8      	; 0x3224 <calloc+0x28>
    321c:	a8 01       	movw	r20, r16
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	38 d1       	rcall	.+624    	; 0x3494 <memset>
    3224:	ce 01       	movw	r24, r28
    3226:	df 91       	pop	r29
    3228:	cf 91       	pop	r28
    322a:	1f 91       	pop	r17
    322c:	0f 91       	pop	r16
    322e:	08 95       	ret

00003230 <malloc>:
    3230:	cf 93       	push	r28
    3232:	df 93       	push	r29
    3234:	82 30       	cpi	r24, 0x02	; 2
    3236:	91 05       	cpc	r25, r1
    3238:	10 f4       	brcc	.+4      	; 0x323e <malloc+0xe>
    323a:	82 e0       	ldi	r24, 0x02	; 2
    323c:	90 e0       	ldi	r25, 0x00	; 0
    323e:	e0 91 2a 03 	lds	r30, 0x032A
    3242:	f0 91 2b 03 	lds	r31, 0x032B
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	a0 e0       	ldi	r26, 0x00	; 0
    324c:	b0 e0       	ldi	r27, 0x00	; 0
    324e:	30 97       	sbiw	r30, 0x00	; 0
    3250:	39 f1       	breq	.+78     	; 0x32a0 <malloc+0x70>
    3252:	40 81       	ld	r20, Z
    3254:	51 81       	ldd	r21, Z+1	; 0x01
    3256:	48 17       	cp	r20, r24
    3258:	59 07       	cpc	r21, r25
    325a:	b8 f0       	brcs	.+46     	; 0x328a <malloc+0x5a>
    325c:	48 17       	cp	r20, r24
    325e:	59 07       	cpc	r21, r25
    3260:	71 f4       	brne	.+28     	; 0x327e <malloc+0x4e>
    3262:	82 81       	ldd	r24, Z+2	; 0x02
    3264:	93 81       	ldd	r25, Z+3	; 0x03
    3266:	10 97       	sbiw	r26, 0x00	; 0
    3268:	29 f0       	breq	.+10     	; 0x3274 <malloc+0x44>
    326a:	13 96       	adiw	r26, 0x03	; 3
    326c:	9c 93       	st	X, r25
    326e:	8e 93       	st	-X, r24
    3270:	12 97       	sbiw	r26, 0x02	; 2
    3272:	2c c0       	rjmp	.+88     	; 0x32cc <malloc+0x9c>
    3274:	90 93 2b 03 	sts	0x032B, r25
    3278:	80 93 2a 03 	sts	0x032A, r24
    327c:	27 c0       	rjmp	.+78     	; 0x32cc <malloc+0x9c>
    327e:	21 15       	cp	r18, r1
    3280:	31 05       	cpc	r19, r1
    3282:	31 f0       	breq	.+12     	; 0x3290 <malloc+0x60>
    3284:	42 17       	cp	r20, r18
    3286:	53 07       	cpc	r21, r19
    3288:	18 f0       	brcs	.+6      	; 0x3290 <malloc+0x60>
    328a:	a9 01       	movw	r20, r18
    328c:	db 01       	movw	r26, r22
    328e:	01 c0       	rjmp	.+2      	; 0x3292 <malloc+0x62>
    3290:	ef 01       	movw	r28, r30
    3292:	9a 01       	movw	r18, r20
    3294:	bd 01       	movw	r22, r26
    3296:	df 01       	movw	r26, r30
    3298:	02 80       	ldd	r0, Z+2	; 0x02
    329a:	f3 81       	ldd	r31, Z+3	; 0x03
    329c:	e0 2d       	mov	r30, r0
    329e:	d7 cf       	rjmp	.-82     	; 0x324e <malloc+0x1e>
    32a0:	21 15       	cp	r18, r1
    32a2:	31 05       	cpc	r19, r1
    32a4:	f9 f0       	breq	.+62     	; 0x32e4 <malloc+0xb4>
    32a6:	28 1b       	sub	r18, r24
    32a8:	39 0b       	sbc	r19, r25
    32aa:	24 30       	cpi	r18, 0x04	; 4
    32ac:	31 05       	cpc	r19, r1
    32ae:	80 f4       	brcc	.+32     	; 0x32d0 <malloc+0xa0>
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	61 15       	cp	r22, r1
    32b6:	71 05       	cpc	r23, r1
    32b8:	21 f0       	breq	.+8      	; 0x32c2 <malloc+0x92>
    32ba:	fb 01       	movw	r30, r22
    32bc:	93 83       	std	Z+3, r25	; 0x03
    32be:	82 83       	std	Z+2, r24	; 0x02
    32c0:	04 c0       	rjmp	.+8      	; 0x32ca <malloc+0x9a>
    32c2:	90 93 2b 03 	sts	0x032B, r25
    32c6:	80 93 2a 03 	sts	0x032A, r24
    32ca:	fe 01       	movw	r30, r28
    32cc:	32 96       	adiw	r30, 0x02	; 2
    32ce:	44 c0       	rjmp	.+136    	; 0x3358 <malloc+0x128>
    32d0:	fe 01       	movw	r30, r28
    32d2:	e2 0f       	add	r30, r18
    32d4:	f3 1f       	adc	r31, r19
    32d6:	81 93       	st	Z+, r24
    32d8:	91 93       	st	Z+, r25
    32da:	22 50       	subi	r18, 0x02	; 2
    32dc:	31 09       	sbc	r19, r1
    32de:	39 83       	std	Y+1, r19	; 0x01
    32e0:	28 83       	st	Y, r18
    32e2:	3a c0       	rjmp	.+116    	; 0x3358 <malloc+0x128>
    32e4:	20 91 28 03 	lds	r18, 0x0328
    32e8:	30 91 29 03 	lds	r19, 0x0329
    32ec:	23 2b       	or	r18, r19
    32ee:	41 f4       	brne	.+16     	; 0x3300 <malloc+0xd0>
    32f0:	20 91 06 01 	lds	r18, 0x0106
    32f4:	30 91 07 01 	lds	r19, 0x0107
    32f8:	30 93 29 03 	sts	0x0329, r19
    32fc:	20 93 28 03 	sts	0x0328, r18
    3300:	20 91 04 01 	lds	r18, 0x0104
    3304:	30 91 05 01 	lds	r19, 0x0105
    3308:	21 15       	cp	r18, r1
    330a:	31 05       	cpc	r19, r1
    330c:	41 f4       	brne	.+16     	; 0x331e <malloc+0xee>
    330e:	2d b7       	in	r18, 0x3d	; 61
    3310:	3e b7       	in	r19, 0x3e	; 62
    3312:	40 91 08 01 	lds	r20, 0x0108
    3316:	50 91 09 01 	lds	r21, 0x0109
    331a:	24 1b       	sub	r18, r20
    331c:	35 0b       	sbc	r19, r21
    331e:	e0 91 28 03 	lds	r30, 0x0328
    3322:	f0 91 29 03 	lds	r31, 0x0329
    3326:	e2 17       	cp	r30, r18
    3328:	f3 07       	cpc	r31, r19
    332a:	a0 f4       	brcc	.+40     	; 0x3354 <malloc+0x124>
    332c:	2e 1b       	sub	r18, r30
    332e:	3f 0b       	sbc	r19, r31
    3330:	28 17       	cp	r18, r24
    3332:	39 07       	cpc	r19, r25
    3334:	78 f0       	brcs	.+30     	; 0x3354 <malloc+0x124>
    3336:	ac 01       	movw	r20, r24
    3338:	4e 5f       	subi	r20, 0xFE	; 254
    333a:	5f 4f       	sbci	r21, 0xFF	; 255
    333c:	24 17       	cp	r18, r20
    333e:	35 07       	cpc	r19, r21
    3340:	48 f0       	brcs	.+18     	; 0x3354 <malloc+0x124>
    3342:	4e 0f       	add	r20, r30
    3344:	5f 1f       	adc	r21, r31
    3346:	50 93 29 03 	sts	0x0329, r21
    334a:	40 93 28 03 	sts	0x0328, r20
    334e:	81 93       	st	Z+, r24
    3350:	91 93       	st	Z+, r25
    3352:	02 c0       	rjmp	.+4      	; 0x3358 <malloc+0x128>
    3354:	e0 e0       	ldi	r30, 0x00	; 0
    3356:	f0 e0       	ldi	r31, 0x00	; 0
    3358:	cf 01       	movw	r24, r30
    335a:	df 91       	pop	r29
    335c:	cf 91       	pop	r28
    335e:	08 95       	ret

00003360 <free>:
    3360:	cf 93       	push	r28
    3362:	df 93       	push	r29
    3364:	00 97       	sbiw	r24, 0x00	; 0
    3366:	09 f4       	brne	.+2      	; 0x336a <free+0xa>
    3368:	87 c0       	rjmp	.+270    	; 0x3478 <free+0x118>
    336a:	fc 01       	movw	r30, r24
    336c:	32 97       	sbiw	r30, 0x02	; 2
    336e:	13 82       	std	Z+3, r1	; 0x03
    3370:	12 82       	std	Z+2, r1	; 0x02
    3372:	c0 91 2a 03 	lds	r28, 0x032A
    3376:	d0 91 2b 03 	lds	r29, 0x032B
    337a:	20 97       	sbiw	r28, 0x00	; 0
    337c:	81 f4       	brne	.+32     	; 0x339e <free+0x3e>
    337e:	20 81       	ld	r18, Z
    3380:	31 81       	ldd	r19, Z+1	; 0x01
    3382:	28 0f       	add	r18, r24
    3384:	39 1f       	adc	r19, r25
    3386:	80 91 28 03 	lds	r24, 0x0328
    338a:	90 91 29 03 	lds	r25, 0x0329
    338e:	82 17       	cp	r24, r18
    3390:	93 07       	cpc	r25, r19
    3392:	79 f5       	brne	.+94     	; 0x33f2 <free+0x92>
    3394:	f0 93 29 03 	sts	0x0329, r31
    3398:	e0 93 28 03 	sts	0x0328, r30
    339c:	6d c0       	rjmp	.+218    	; 0x3478 <free+0x118>
    339e:	de 01       	movw	r26, r28
    33a0:	20 e0       	ldi	r18, 0x00	; 0
    33a2:	30 e0       	ldi	r19, 0x00	; 0
    33a4:	ae 17       	cp	r26, r30
    33a6:	bf 07       	cpc	r27, r31
    33a8:	50 f4       	brcc	.+20     	; 0x33be <free+0x5e>
    33aa:	12 96       	adiw	r26, 0x02	; 2
    33ac:	4d 91       	ld	r20, X+
    33ae:	5c 91       	ld	r21, X
    33b0:	13 97       	sbiw	r26, 0x03	; 3
    33b2:	9d 01       	movw	r18, r26
    33b4:	41 15       	cp	r20, r1
    33b6:	51 05       	cpc	r21, r1
    33b8:	09 f1       	breq	.+66     	; 0x33fc <free+0x9c>
    33ba:	da 01       	movw	r26, r20
    33bc:	f3 cf       	rjmp	.-26     	; 0x33a4 <free+0x44>
    33be:	b3 83       	std	Z+3, r27	; 0x03
    33c0:	a2 83       	std	Z+2, r26	; 0x02
    33c2:	40 81       	ld	r20, Z
    33c4:	51 81       	ldd	r21, Z+1	; 0x01
    33c6:	84 0f       	add	r24, r20
    33c8:	95 1f       	adc	r25, r21
    33ca:	8a 17       	cp	r24, r26
    33cc:	9b 07       	cpc	r25, r27
    33ce:	71 f4       	brne	.+28     	; 0x33ec <free+0x8c>
    33d0:	8d 91       	ld	r24, X+
    33d2:	9c 91       	ld	r25, X
    33d4:	11 97       	sbiw	r26, 0x01	; 1
    33d6:	84 0f       	add	r24, r20
    33d8:	95 1f       	adc	r25, r21
    33da:	02 96       	adiw	r24, 0x02	; 2
    33dc:	91 83       	std	Z+1, r25	; 0x01
    33de:	80 83       	st	Z, r24
    33e0:	12 96       	adiw	r26, 0x02	; 2
    33e2:	8d 91       	ld	r24, X+
    33e4:	9c 91       	ld	r25, X
    33e6:	13 97       	sbiw	r26, 0x03	; 3
    33e8:	93 83       	std	Z+3, r25	; 0x03
    33ea:	82 83       	std	Z+2, r24	; 0x02
    33ec:	21 15       	cp	r18, r1
    33ee:	31 05       	cpc	r19, r1
    33f0:	29 f4       	brne	.+10     	; 0x33fc <free+0x9c>
    33f2:	f0 93 2b 03 	sts	0x032B, r31
    33f6:	e0 93 2a 03 	sts	0x032A, r30
    33fa:	3e c0       	rjmp	.+124    	; 0x3478 <free+0x118>
    33fc:	d9 01       	movw	r26, r18
    33fe:	13 96       	adiw	r26, 0x03	; 3
    3400:	fc 93       	st	X, r31
    3402:	ee 93       	st	-X, r30
    3404:	12 97       	sbiw	r26, 0x02	; 2
    3406:	4d 91       	ld	r20, X+
    3408:	5d 91       	ld	r21, X+
    340a:	a4 0f       	add	r26, r20
    340c:	b5 1f       	adc	r27, r21
    340e:	ea 17       	cp	r30, r26
    3410:	fb 07       	cpc	r31, r27
    3412:	79 f4       	brne	.+30     	; 0x3432 <free+0xd2>
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	84 0f       	add	r24, r20
    341a:	95 1f       	adc	r25, r21
    341c:	02 96       	adiw	r24, 0x02	; 2
    341e:	d9 01       	movw	r26, r18
    3420:	11 96       	adiw	r26, 0x01	; 1
    3422:	9c 93       	st	X, r25
    3424:	8e 93       	st	-X, r24
    3426:	82 81       	ldd	r24, Z+2	; 0x02
    3428:	93 81       	ldd	r25, Z+3	; 0x03
    342a:	13 96       	adiw	r26, 0x03	; 3
    342c:	9c 93       	st	X, r25
    342e:	8e 93       	st	-X, r24
    3430:	12 97       	sbiw	r26, 0x02	; 2
    3432:	e0 e0       	ldi	r30, 0x00	; 0
    3434:	f0 e0       	ldi	r31, 0x00	; 0
    3436:	8a 81       	ldd	r24, Y+2	; 0x02
    3438:	9b 81       	ldd	r25, Y+3	; 0x03
    343a:	00 97       	sbiw	r24, 0x00	; 0
    343c:	19 f0       	breq	.+6      	; 0x3444 <free+0xe4>
    343e:	fe 01       	movw	r30, r28
    3440:	ec 01       	movw	r28, r24
    3442:	f9 cf       	rjmp	.-14     	; 0x3436 <free+0xd6>
    3444:	ce 01       	movw	r24, r28
    3446:	02 96       	adiw	r24, 0x02	; 2
    3448:	28 81       	ld	r18, Y
    344a:	39 81       	ldd	r19, Y+1	; 0x01
    344c:	82 0f       	add	r24, r18
    344e:	93 1f       	adc	r25, r19
    3450:	20 91 28 03 	lds	r18, 0x0328
    3454:	30 91 29 03 	lds	r19, 0x0329
    3458:	28 17       	cp	r18, r24
    345a:	39 07       	cpc	r19, r25
    345c:	69 f4       	brne	.+26     	; 0x3478 <free+0x118>
    345e:	30 97       	sbiw	r30, 0x00	; 0
    3460:	29 f4       	brne	.+10     	; 0x346c <free+0x10c>
    3462:	10 92 2b 03 	sts	0x032B, r1
    3466:	10 92 2a 03 	sts	0x032A, r1
    346a:	02 c0       	rjmp	.+4      	; 0x3470 <free+0x110>
    346c:	13 82       	std	Z+3, r1	; 0x03
    346e:	12 82       	std	Z+2, r1	; 0x02
    3470:	d0 93 29 03 	sts	0x0329, r29
    3474:	c0 93 28 03 	sts	0x0328, r28
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <strnlen_P>:
    347e:	fc 01       	movw	r30, r24
    3480:	05 90       	lpm	r0, Z+
    3482:	61 50       	subi	r22, 0x01	; 1
    3484:	70 40       	sbci	r23, 0x00	; 0
    3486:	01 10       	cpse	r0, r1
    3488:	d8 f7       	brcc	.-10     	; 0x3480 <strnlen_P+0x2>
    348a:	80 95       	com	r24
    348c:	90 95       	com	r25
    348e:	8e 0f       	add	r24, r30
    3490:	9f 1f       	adc	r25, r31
    3492:	08 95       	ret

00003494 <memset>:
    3494:	dc 01       	movw	r26, r24
    3496:	01 c0       	rjmp	.+2      	; 0x349a <memset+0x6>
    3498:	6d 93       	st	X+, r22
    349a:	41 50       	subi	r20, 0x01	; 1
    349c:	50 40       	sbci	r21, 0x00	; 0
    349e:	e0 f7       	brcc	.-8      	; 0x3498 <memset+0x4>
    34a0:	08 95       	ret

000034a2 <strnlen>:
    34a2:	fc 01       	movw	r30, r24
    34a4:	61 50       	subi	r22, 0x01	; 1
    34a6:	70 40       	sbci	r23, 0x00	; 0
    34a8:	01 90       	ld	r0, Z+
    34aa:	01 10       	cpse	r0, r1
    34ac:	d8 f7       	brcc	.-10     	; 0x34a4 <strnlen+0x2>
    34ae:	80 95       	com	r24
    34b0:	90 95       	com	r25
    34b2:	8e 0f       	add	r24, r30
    34b4:	9f 1f       	adc	r25, r31
    34b6:	08 95       	ret

000034b8 <fputc>:
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	18 2f       	mov	r17, r24
    34c2:	09 2f       	mov	r16, r25
    34c4:	eb 01       	movw	r28, r22
    34c6:	8b 81       	ldd	r24, Y+3	; 0x03
    34c8:	81 fd       	sbrc	r24, 1
    34ca:	03 c0       	rjmp	.+6      	; 0x34d2 <fputc+0x1a>
    34cc:	8f ef       	ldi	r24, 0xFF	; 255
    34ce:	9f ef       	ldi	r25, 0xFF	; 255
    34d0:	20 c0       	rjmp	.+64     	; 0x3512 <fputc+0x5a>
    34d2:	82 ff       	sbrs	r24, 2
    34d4:	10 c0       	rjmp	.+32     	; 0x34f6 <fputc+0x3e>
    34d6:	4e 81       	ldd	r20, Y+6	; 0x06
    34d8:	5f 81       	ldd	r21, Y+7	; 0x07
    34da:	2c 81       	ldd	r18, Y+4	; 0x04
    34dc:	3d 81       	ldd	r19, Y+5	; 0x05
    34de:	42 17       	cp	r20, r18
    34e0:	53 07       	cpc	r21, r19
    34e2:	7c f4       	brge	.+30     	; 0x3502 <fputc+0x4a>
    34e4:	e8 81       	ld	r30, Y
    34e6:	f9 81       	ldd	r31, Y+1	; 0x01
    34e8:	9f 01       	movw	r18, r30
    34ea:	2f 5f       	subi	r18, 0xFF	; 255
    34ec:	3f 4f       	sbci	r19, 0xFF	; 255
    34ee:	39 83       	std	Y+1, r19	; 0x01
    34f0:	28 83       	st	Y, r18
    34f2:	10 83       	st	Z, r17
    34f4:	06 c0       	rjmp	.+12     	; 0x3502 <fputc+0x4a>
    34f6:	e8 85       	ldd	r30, Y+8	; 0x08
    34f8:	f9 85       	ldd	r31, Y+9	; 0x09
    34fa:	81 2f       	mov	r24, r17
    34fc:	09 95       	icall
    34fe:	89 2b       	or	r24, r25
    3500:	29 f7       	brne	.-54     	; 0x34cc <fputc+0x14>
    3502:	2e 81       	ldd	r18, Y+6	; 0x06
    3504:	3f 81       	ldd	r19, Y+7	; 0x07
    3506:	2f 5f       	subi	r18, 0xFF	; 255
    3508:	3f 4f       	sbci	r19, 0xFF	; 255
    350a:	3f 83       	std	Y+7, r19	; 0x07
    350c:	2e 83       	std	Y+6, r18	; 0x06
    350e:	81 2f       	mov	r24, r17
    3510:	90 2f       	mov	r25, r16
    3512:	df 91       	pop	r29
    3514:	cf 91       	pop	r28
    3516:	1f 91       	pop	r17
    3518:	0f 91       	pop	r16
    351a:	08 95       	ret

0000351c <__ultoa_invert>:
    351c:	fa 01       	movw	r30, r20
    351e:	aa 27       	eor	r26, r26
    3520:	28 30       	cpi	r18, 0x08	; 8
    3522:	51 f1       	breq	.+84     	; 0x3578 <__ultoa_invert+0x5c>
    3524:	20 31       	cpi	r18, 0x10	; 16
    3526:	81 f1       	breq	.+96     	; 0x3588 <__ultoa_invert+0x6c>
    3528:	e8 94       	clt
    352a:	6f 93       	push	r22
    352c:	6e 7f       	andi	r22, 0xFE	; 254
    352e:	6e 5f       	subi	r22, 0xFE	; 254
    3530:	7f 4f       	sbci	r23, 0xFF	; 255
    3532:	8f 4f       	sbci	r24, 0xFF	; 255
    3534:	9f 4f       	sbci	r25, 0xFF	; 255
    3536:	af 4f       	sbci	r26, 0xFF	; 255
    3538:	b1 e0       	ldi	r27, 0x01	; 1
    353a:	3e d0       	rcall	.+124    	; 0x35b8 <__ultoa_invert+0x9c>
    353c:	b4 e0       	ldi	r27, 0x04	; 4
    353e:	3c d0       	rcall	.+120    	; 0x35b8 <__ultoa_invert+0x9c>
    3540:	67 0f       	add	r22, r23
    3542:	78 1f       	adc	r23, r24
    3544:	89 1f       	adc	r24, r25
    3546:	9a 1f       	adc	r25, r26
    3548:	a1 1d       	adc	r26, r1
    354a:	68 0f       	add	r22, r24
    354c:	79 1f       	adc	r23, r25
    354e:	8a 1f       	adc	r24, r26
    3550:	91 1d       	adc	r25, r1
    3552:	a1 1d       	adc	r26, r1
    3554:	6a 0f       	add	r22, r26
    3556:	71 1d       	adc	r23, r1
    3558:	81 1d       	adc	r24, r1
    355a:	91 1d       	adc	r25, r1
    355c:	a1 1d       	adc	r26, r1
    355e:	20 d0       	rcall	.+64     	; 0x35a0 <__ultoa_invert+0x84>
    3560:	09 f4       	brne	.+2      	; 0x3564 <__ultoa_invert+0x48>
    3562:	68 94       	set
    3564:	3f 91       	pop	r19
    3566:	2a e0       	ldi	r18, 0x0A	; 10
    3568:	26 9f       	mul	r18, r22
    356a:	11 24       	eor	r1, r1
    356c:	30 19       	sub	r19, r0
    356e:	30 5d       	subi	r19, 0xD0	; 208
    3570:	31 93       	st	Z+, r19
    3572:	de f6       	brtc	.-74     	; 0x352a <__ultoa_invert+0xe>
    3574:	cf 01       	movw	r24, r30
    3576:	08 95       	ret
    3578:	46 2f       	mov	r20, r22
    357a:	47 70       	andi	r20, 0x07	; 7
    357c:	40 5d       	subi	r20, 0xD0	; 208
    357e:	41 93       	st	Z+, r20
    3580:	b3 e0       	ldi	r27, 0x03	; 3
    3582:	0f d0       	rcall	.+30     	; 0x35a2 <__ultoa_invert+0x86>
    3584:	c9 f7       	brne	.-14     	; 0x3578 <__ultoa_invert+0x5c>
    3586:	f6 cf       	rjmp	.-20     	; 0x3574 <__ultoa_invert+0x58>
    3588:	46 2f       	mov	r20, r22
    358a:	4f 70       	andi	r20, 0x0F	; 15
    358c:	40 5d       	subi	r20, 0xD0	; 208
    358e:	4a 33       	cpi	r20, 0x3A	; 58
    3590:	18 f0       	brcs	.+6      	; 0x3598 <__ultoa_invert+0x7c>
    3592:	49 5d       	subi	r20, 0xD9	; 217
    3594:	31 fd       	sbrc	r19, 1
    3596:	40 52       	subi	r20, 0x20	; 32
    3598:	41 93       	st	Z+, r20
    359a:	02 d0       	rcall	.+4      	; 0x35a0 <__ultoa_invert+0x84>
    359c:	a9 f7       	brne	.-22     	; 0x3588 <__ultoa_invert+0x6c>
    359e:	ea cf       	rjmp	.-44     	; 0x3574 <__ultoa_invert+0x58>
    35a0:	b4 e0       	ldi	r27, 0x04	; 4
    35a2:	a6 95       	lsr	r26
    35a4:	97 95       	ror	r25
    35a6:	87 95       	ror	r24
    35a8:	77 95       	ror	r23
    35aa:	67 95       	ror	r22
    35ac:	ba 95       	dec	r27
    35ae:	c9 f7       	brne	.-14     	; 0x35a2 <__ultoa_invert+0x86>
    35b0:	00 97       	sbiw	r24, 0x00	; 0
    35b2:	61 05       	cpc	r22, r1
    35b4:	71 05       	cpc	r23, r1
    35b6:	08 95       	ret
    35b8:	9b 01       	movw	r18, r22
    35ba:	ac 01       	movw	r20, r24
    35bc:	0a 2e       	mov	r0, r26
    35be:	06 94       	lsr	r0
    35c0:	57 95       	ror	r21
    35c2:	47 95       	ror	r20
    35c4:	37 95       	ror	r19
    35c6:	27 95       	ror	r18
    35c8:	ba 95       	dec	r27
    35ca:	c9 f7       	brne	.-14     	; 0x35be <__ultoa_invert+0xa2>
    35cc:	62 0f       	add	r22, r18
    35ce:	73 1f       	adc	r23, r19
    35d0:	84 1f       	adc	r24, r20
    35d2:	95 1f       	adc	r25, r21
    35d4:	a0 1d       	adc	r26, r0
    35d6:	08 95       	ret

000035d8 <__muluhisi3>:
    35d8:	46 d0       	rcall	.+140    	; 0x3666 <__umulhisi3>
    35da:	a5 9f       	mul	r26, r21
    35dc:	90 0d       	add	r25, r0
    35de:	b4 9f       	mul	r27, r20
    35e0:	90 0d       	add	r25, r0
    35e2:	a4 9f       	mul	r26, r20
    35e4:	80 0d       	add	r24, r0
    35e6:	91 1d       	adc	r25, r1
    35e8:	11 24       	eor	r1, r1
    35ea:	08 95       	ret

000035ec <__mulshisi3>:
    35ec:	b7 ff       	sbrs	r27, 7
    35ee:	f4 cf       	rjmp	.-24     	; 0x35d8 <__muluhisi3>

000035f0 <__mulohisi3>:
    35f0:	f3 df       	rcall	.-26     	; 0x35d8 <__muluhisi3>
    35f2:	82 1b       	sub	r24, r18
    35f4:	93 0b       	sbc	r25, r19
    35f6:	08 95       	ret

000035f8 <__prologue_saves__>:
    35f8:	2f 92       	push	r2
    35fa:	3f 92       	push	r3
    35fc:	4f 92       	push	r4
    35fe:	5f 92       	push	r5
    3600:	6f 92       	push	r6
    3602:	7f 92       	push	r7
    3604:	8f 92       	push	r8
    3606:	9f 92       	push	r9
    3608:	af 92       	push	r10
    360a:	bf 92       	push	r11
    360c:	cf 92       	push	r12
    360e:	df 92       	push	r13
    3610:	ef 92       	push	r14
    3612:	ff 92       	push	r15
    3614:	0f 93       	push	r16
    3616:	1f 93       	push	r17
    3618:	cf 93       	push	r28
    361a:	df 93       	push	r29
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
    3620:	ca 1b       	sub	r28, r26
    3622:	db 0b       	sbc	r29, r27
    3624:	0f b6       	in	r0, 0x3f	; 63
    3626:	f8 94       	cli
    3628:	de bf       	out	0x3e, r29	; 62
    362a:	0f be       	out	0x3f, r0	; 63
    362c:	cd bf       	out	0x3d, r28	; 61
    362e:	09 94       	ijmp

00003630 <__epilogue_restores__>:
    3630:	2a 88       	ldd	r2, Y+18	; 0x12
    3632:	39 88       	ldd	r3, Y+17	; 0x11
    3634:	48 88       	ldd	r4, Y+16	; 0x10
    3636:	5f 84       	ldd	r5, Y+15	; 0x0f
    3638:	6e 84       	ldd	r6, Y+14	; 0x0e
    363a:	7d 84       	ldd	r7, Y+13	; 0x0d
    363c:	8c 84       	ldd	r8, Y+12	; 0x0c
    363e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3640:	aa 84       	ldd	r10, Y+10	; 0x0a
    3642:	b9 84       	ldd	r11, Y+9	; 0x09
    3644:	c8 84       	ldd	r12, Y+8	; 0x08
    3646:	df 80       	ldd	r13, Y+7	; 0x07
    3648:	ee 80       	ldd	r14, Y+6	; 0x06
    364a:	fd 80       	ldd	r15, Y+5	; 0x05
    364c:	0c 81       	ldd	r16, Y+4	; 0x04
    364e:	1b 81       	ldd	r17, Y+3	; 0x03
    3650:	aa 81       	ldd	r26, Y+2	; 0x02
    3652:	b9 81       	ldd	r27, Y+1	; 0x01
    3654:	ce 0f       	add	r28, r30
    3656:	d1 1d       	adc	r29, r1
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	ed 01       	movw	r28, r26
    3664:	08 95       	ret

00003666 <__umulhisi3>:
    3666:	a2 9f       	mul	r26, r18
    3668:	b0 01       	movw	r22, r0
    366a:	b3 9f       	mul	r27, r19
    366c:	c0 01       	movw	r24, r0
    366e:	a3 9f       	mul	r26, r19
    3670:	70 0d       	add	r23, r0
    3672:	81 1d       	adc	r24, r1
    3674:	11 24       	eor	r1, r1
    3676:	91 1d       	adc	r25, r1
    3678:	b2 9f       	mul	r27, r18
    367a:	70 0d       	add	r23, r0
    367c:	81 1d       	adc	r24, r1
    367e:	11 24       	eor	r1, r1
    3680:	91 1d       	adc	r25, r1
    3682:	08 95       	ret

00003684 <_exit>:
    3684:	f8 94       	cli

00003686 <__stop_program>:
    3686:	ff cf       	rjmp	.-2      	; 0x3686 <__stop_program>
