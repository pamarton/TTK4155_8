
NODE1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000027e  00800100  00002a6e  00002b02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002a6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009d  0080037e  0080037e  00002d80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d80  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00002ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003df8  00000000  00000000  0000316c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000113c  00000000  00000000  00006f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001dfd  00000000  00000000  000080a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000b28  00000000  00000000  00009ea0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000ba5  00000000  00000000  0000a9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000028d9  00000000  00000000  0000b56d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  0000de46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	09 c2       	rjmp	.+1042   	; 0x414 <__ctors_end>
       2:	00 00       	nop
       4:	b2 c4       	rjmp	.+2404   	; 0x96a <__vector_1>
       6:	00 00       	nop
       8:	d3 c4       	rjmp	.+2470   	; 0x9b0 <__vector_2>
       a:	00 00       	nop
       c:	8d c2       	rjmp	.+1306   	; 0x528 <__vector_3>
       e:	00 00       	nop
      10:	1d c2       	rjmp	.+1082   	; 0x44c <__bad_interrupt>
      12:	00 00       	nop
      14:	1b c2       	rjmp	.+1078   	; 0x44c <__bad_interrupt>
      16:	00 00       	nop
      18:	19 c2       	rjmp	.+1074   	; 0x44c <__bad_interrupt>
      1a:	00 00       	nop
      1c:	17 c2       	rjmp	.+1070   	; 0x44c <__bad_interrupt>
      1e:	00 00       	nop
      20:	15 c2       	rjmp	.+1066   	; 0x44c <__bad_interrupt>
      22:	00 00       	nop
      24:	13 c2       	rjmp	.+1062   	; 0x44c <__bad_interrupt>
      26:	00 00       	nop
      28:	11 c2       	rjmp	.+1058   	; 0x44c <__bad_interrupt>
      2a:	00 00       	nop
      2c:	0f c2       	rjmp	.+1054   	; 0x44c <__bad_interrupt>
      2e:	00 00       	nop
      30:	0d c2       	rjmp	.+1050   	; 0x44c <__bad_interrupt>
      32:	00 00       	nop
      34:	0b c2       	rjmp	.+1046   	; 0x44c <__bad_interrupt>
      36:	00 00       	nop
      38:	09 c2       	rjmp	.+1042   	; 0x44c <__bad_interrupt>
      3a:	00 00       	nop
      3c:	07 c2       	rjmp	.+1038   	; 0x44c <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 33 0e 	jmp	0x1c66	; 0x1c66 <__vector_16>
      44:	03 c2       	rjmp	.+1030   	; 0x44c <__bad_interrupt>
      46:	00 00       	nop
      48:	01 c2       	rjmp	.+1026   	; 0x44c <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ff c1       	rjmp	.+1022   	; 0x44c <__bad_interrupt>
      4e:	00 00       	nop
      50:	fd c1       	rjmp	.+1018   	; 0x44c <__bad_interrupt>
      52:	00 00       	nop
      54:	fb c1       	rjmp	.+1014   	; 0x44c <__bad_interrupt>
      56:	00 00       	nop
      58:	f9 c1       	rjmp	.+1010   	; 0x44c <__bad_interrupt>
      5a:	00 00       	nop
      5c:	f7 c1       	rjmp	.+1006   	; 0x44c <__bad_interrupt>
      5e:	00 00       	nop
      60:	f5 c1       	rjmp	.+1002   	; 0x44c <__bad_interrupt>
      62:	00 00       	nop
      64:	f3 c1       	rjmp	.+998    	; 0x44c <__bad_interrupt>
      66:	00 00       	nop
      68:	f1 c1       	rjmp	.+994    	; 0x44c <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ef c1       	rjmp	.+990    	; 0x44c <__bad_interrupt>
	...

00000070 <__trampolines_end>:
      70:	88 00       	.word	0x0088	; ????
      72:	83 00       	.word	0x0083	; ????
      74:	7e 00       	.word	0x007e	; ????
      76:	78 00       	.word	0x0078	; ????

00000078 <calibrate_direction_3>:
      78:	52 49 47 48 54 00                                   RIGHT.

0000007e <calibrate_direction_2>:
      7e:	4c 45 46 54 00                                      LEFT.

00000083 <calibrate_direction_1>:
      83:	44 4f 57 4e 00                                      DOWN.

00000088 <calibrate_direction_0>:
      88:	55 50 00                                            UP.

0000008b <calibrate_text_1>:
      8b:	48 6f 6c 64 20 4a 6f 79 73 74 69 63 6b 00           Hold Joystick.

00000099 <calibrate_text_0>:
      99:	4c 65 74 20 67 6f 00                                Let go.

000000a0 <brightness_text_0>:
      a0:	55 73 65 20 6c 65 66 74 20 73 6c 69 64 65 72 00     Use left slider.

000000b0 <btn_1>:
      b0:	2d 3e 52 5f 42 54 4e 00                             ->R_BTN.

000000b8 <debug_entry_1>:
      b8:	43 61 6c 69 62 72 61 74 65 00                       Calibrate.

000000c2 <debug_entry_0>:
      c2:	66 69 74 20 73 63 72 65 65 6e 00                    fit screen.

000000cd <option_entry_1>:
      cd:	43 6f 6e 74 72 61 73 74 00                          Contrast.

000000d6 <option_entry_0>:
      d6:	4d 75 73 69 63 00                                   Music.

000000dc <mainmenu_entry_3>:
      dc:	4f 70 74 69 6f 6e 73 00                             Options.

000000e4 <mainmenu_entry_2>:
      e4:	44 65 62 75 67 00                                   Debug.

000000ea <mainmenu_entry_1>:
      ea:	48 69 67 68 73 63 6f 72 65 00                       Highscore.

000000f4 <font>:
	...
      fc:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
     10c:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
     11c:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
     12c:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
     13c:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
     14c:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
     15c:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
     16c:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
     17c:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
     18c:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
     19c:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
     1ac:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
     1bc:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
     1cc:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
     1dc:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
     1ec:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
     1fc:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
     20c:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
     21c:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
     22c:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
     23c:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
     24c:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
     25c:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
     26c:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
     27c:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
     28c:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
     29c:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
     2ac:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
     2bc:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
     2cc:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
     2dc:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
     2ec:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
     2fc:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
     30c:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
     31c:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
     32c:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
     33c:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
     34c:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
     35c:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
     36c:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
     37c:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
     38c:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
     39c:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
     3ac:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
     3bc:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
     3cc:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
     3dc:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............
     3ec:	66 86 b0 70 70 b0 86 66 00 7e 42 42 42 42 7e 00     f..pp..f.~BBBB~.
     3fc:	00 7e 7e 7e 7e 7e 7e 00 ff 80 80 80 80 80 80 80     .~~~~~~.........
     40c:	01 01 01 01 01 01 01 ff                             ........

00000414 <__ctors_end>:
     414:	11 24       	eor	r1, r1
     416:	1f be       	out	0x3f, r1	; 63
     418:	cf ef       	ldi	r28, 0xFF	; 255
     41a:	d4 e0       	ldi	r29, 0x04	; 4
     41c:	de bf       	out	0x3e, r29	; 62
     41e:	cd bf       	out	0x3d, r28	; 61

00000420 <__do_copy_data>:
     420:	13 e0       	ldi	r17, 0x03	; 3
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	b1 e0       	ldi	r27, 0x01	; 1
     426:	ee e6       	ldi	r30, 0x6E	; 110
     428:	fa e2       	ldi	r31, 0x2A	; 42
     42a:	02 c0       	rjmp	.+4      	; 0x430 <__do_copy_data+0x10>
     42c:	05 90       	lpm	r0, Z+
     42e:	0d 92       	st	X+, r0
     430:	ae 37       	cpi	r26, 0x7E	; 126
     432:	b1 07       	cpc	r27, r17
     434:	d9 f7       	brne	.-10     	; 0x42c <__do_copy_data+0xc>

00000436 <__do_clear_bss>:
     436:	24 e0       	ldi	r18, 0x04	; 4
     438:	ae e7       	ldi	r26, 0x7E	; 126
     43a:	b3 e0       	ldi	r27, 0x03	; 3
     43c:	01 c0       	rjmp	.+2      	; 0x440 <.do_clear_bss_start>

0000043e <.do_clear_bss_loop>:
     43e:	1d 92       	st	X+, r1

00000440 <.do_clear_bss_start>:
     440:	ab 31       	cpi	r26, 0x1B	; 27
     442:	b2 07       	cpc	r27, r18
     444:	e1 f7       	brne	.-8      	; 0x43e <.do_clear_bss_loop>
     446:	e8 d7       	rcall	.+4048   	; 0x1418 <main>
     448:	0c 94 35 15 	jmp	0x2a6a	; 0x2a6a <_exit>

0000044c <__bad_interrupt>:
     44c:	d9 cd       	rjmp	.-1102   	; 0x0 <__vectors>

0000044e <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){						// What does this step do //NOT NECCECARY, but if we want to reference the recieved data from another part of the program this is necceccary
	return &CAN_receive_buffer;						// What does this step do
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
     44e:	90 93 80 03 	sts	0x0380, r25
     452:	80 93 7f 03 	sts	0x037F, r24
	CAN_send_buffer.length = length;
     456:	60 93 81 03 	sts	0x0381, r22
	for(uint8_t i = 0; i < length; i++){
     45a:	66 23       	and	r22, r22
     45c:	41 f0       	breq	.+16     	; 0x46e <CAN_construct_message+0x20>
     45e:	82 e8       	ldi	r24, 0x82	; 130
     460:	93 e0       	ldi	r25, 0x03	; 3
     462:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
     464:	11 92       	st	Z+, r1
     466:	2e 2f       	mov	r18, r30
     468:	28 1b       	sub	r18, r24
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
     46a:	26 17       	cp	r18, r22
     46c:	d8 f3       	brcs	.-10     	; 0x464 <CAN_construct_message+0x16>
     46e:	08 95       	ret

00000470 <CAN_read>:
	printf("\nSENT MESSAGE:");
	CAN_print(CAN_send_buffer);
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     470:	d3 c1       	rjmp	.+934    	; 0x818 <MCP2515_read>
}
     472:	08 95       	ret

00000474 <CAN_print>:
		printf("\nRECIVED MESSAGE:");
		CAN_print(CAN_receive_buffer);
	}
}

void CAN_print(CAN_message_t message){
     474:	cf 92       	push	r12
     476:	df 92       	push	r13
     478:	ef 92       	push	r14
     47a:	ff 92       	push	r15
     47c:	0f 93       	push	r16
     47e:	1f 93       	push	r17
     480:	cf 93       	push	r28
     482:	df 93       	push	r29
     484:	cd b7       	in	r28, 0x3d	; 61
     486:	de b7       	in	r29, 0x3e	; 62
     488:	2b 97       	sbiw	r28, 0x0b	; 11
     48a:	0f b6       	in	r0, 0x3f	; 63
     48c:	f8 94       	cli
     48e:	de bf       	out	0x3e, r29	; 62
     490:	0f be       	out	0x3f, r0	; 63
     492:	cd bf       	out	0x3d, r28	; 61
     494:	e9 82       	std	Y+1, r14	; 0x01
     496:	fa 82       	std	Y+2, r15	; 0x02
     498:	c0 2e       	mov	r12, r16
     49a:	0b 83       	std	Y+3, r16	; 0x03
     49c:	1c 83       	std	Y+4, r17	; 0x04
     49e:	2d 83       	std	Y+5, r18	; 0x05
     4a0:	3e 83       	std	Y+6, r19	; 0x06
     4a2:	4f 83       	std	Y+7, r20	; 0x07
     4a4:	58 87       	std	Y+8, r21	; 0x08
     4a6:	69 87       	std	Y+9, r22	; 0x09
     4a8:	7a 87       	std	Y+10, r23	; 0x0a
     4aa:	8b 87       	std	Y+11, r24	; 0x0b
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
     4ac:	1f 92       	push	r1
     4ae:	0f 93       	push	r16
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	8f 93       	push	r24
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	8f 93       	push	r24
     4b8:	84 e1       	ldi	r24, 0x14	; 20
     4ba:	91 e0       	ldi	r25, 0x01	; 1
     4bc:	9f 93       	push	r25
     4be:	8f 93       	push	r24
     4c0:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
	for(uint8_t i = 0; i < message.length; i++){
     4c4:	0f 90       	pop	r0
     4c6:	0f 90       	pop	r0
     4c8:	0f 90       	pop	r0
     4ca:	0f 90       	pop	r0
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	00 23       	and	r16, r16
     4d2:	d9 f0       	breq	.+54     	; 0x50a <__stack+0xb>
     4d4:	7e 01       	movw	r14, r28
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	e8 0e       	add	r14, r24
     4da:	f1 1c       	adc	r15, r1
     4dc:	d1 2c       	mov	r13, r1
		printf("%i\t",message.data[i]);
     4de:	08 e2       	ldi	r16, 0x28	; 40
     4e0:	11 e0       	ldi	r17, 0x01	; 1
     4e2:	f7 01       	movw	r30, r14
     4e4:	21 91       	ld	r18, Z+
     4e6:	7f 01       	movw	r14, r30
     4e8:	82 2f       	mov	r24, r18
     4ea:	99 27       	eor	r25, r25
     4ec:	87 fd       	sbrc	r24, 7
     4ee:	90 95       	com	r25
     4f0:	9f 93       	push	r25
     4f2:	2f 93       	push	r18
     4f4:	1f 93       	push	r17
     4f6:	0f 93       	push	r16
     4f8:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
	}
}

void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
     4fc:	d3 94       	inc	r13
     4fe:	0f 90       	pop	r0
     500:	0f 90       	pop	r0
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	dc 10       	cpse	r13, r12
     508:	ec cf       	rjmp	.-40     	; 0x4e2 <CAN_print+0x6e>
		printf("%i\t",message.data[i]);
	}
}
     50a:	2b 96       	adiw	r28, 0x0b	; 11
     50c:	0f b6       	in	r0, 0x3f	; 63
     50e:	f8 94       	cli
     510:	de bf       	out	0x3e, r29	; 62
     512:	0f be       	out	0x3f, r0	; 63
     514:	cd bf       	out	0x3d, r28	; 61
     516:	df 91       	pop	r29
     518:	cf 91       	pop	r28
     51a:	1f 91       	pop	r17
     51c:	0f 91       	pop	r16
     51e:	ff 90       	pop	r15
     520:	ef 90       	pop	r14
     522:	df 90       	pop	r13
     524:	cf 90       	pop	r12
     526:	08 95       	ret

00000528 <__vector_3>:

#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
     528:	1f 92       	push	r1
     52a:	0f 92       	push	r0
     52c:	0f b6       	in	r0, 0x3f	; 63
     52e:	0f 92       	push	r0
     530:	11 24       	eor	r1, r1
     532:	8f 93       	push	r24
	receive_flag = 1;
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 93 7e 03 	sts	0x037E, r24
}
     53a:	8f 91       	pop	r24
     53c:	0f 90       	pop	r0
     53e:	0f be       	out	0x3f, r0	; 63
     540:	0f 90       	pop	r0
     542:	1f 90       	pop	r1
     544:	18 95       	reti

00000546 <CAN_interrupt_setup>:
}
#endif

	
void CAN_interrupt_setup(void){
	cli();
     546:	f8 94       	cli
	#if NODE == 1
		//Extended MCU Control Register bit 0 ....turned off?
		EMCUCR &= ~(1<<ISC2);
     548:	86 b7       	in	r24, 0x36	; 54
     54a:	8e 7f       	andi	r24, 0xFE	; 254
     54c:	86 bf       	out	0x36, r24	; 54
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
     54e:	8b b7       	in	r24, 0x3b	; 59
     550:	80 62       	ori	r24, 0x20	; 32
     552:	8b bf       	out	0x3b, r24	; 59

		//Enable global interrupt.
		
	
	#endif
	sei();
     554:	78 94       	sei
     556:	08 95       	ret

00000558 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     558:	9a d1       	rcall	.+820    	; 0x88e <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     55a:	68 e0       	ldi	r22, 0x08	; 8
     55c:	88 e2       	ldi	r24, 0x28	; 40
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	76 df       	rcall	.-276    	; 0x44e <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     562:	4f ef       	ldi	r20, 0xFF	; 255
     564:	50 e0       	ldi	r21, 0x00	; 0
     566:	64 e6       	ldi	r22, 0x64	; 100
     568:	80 e6       	ldi	r24, 0x60	; 96
     56a:	74 d1       	rcall	.+744    	; 0x854 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     56c:	4f ef       	ldi	r20, 0xFF	; 255
     56e:	50 e0       	ldi	r21, 0x00	; 0
     570:	64 e6       	ldi	r22, 0x64	; 100
     572:	80 e7       	ldi	r24, 0x70	; 112
     574:	6f d1       	rcall	.+734    	; 0x854 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     576:	41 e0       	ldi	r20, 0x01	; 1
     578:	50 e0       	ldi	r21, 0x00	; 0
     57a:	61 e0       	ldi	r22, 0x01	; 1
     57c:	8b e2       	ldi	r24, 0x2B	; 43
     57e:	6a d1       	rcall	.+724    	; 0x854 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	50 e0       	ldi	r21, 0x00	; 0
     584:	60 ee       	ldi	r22, 0xE0	; 224
     586:	8f e0       	ldi	r24, 0x0F	; 15
     588:	65 d1       	rcall	.+714    	; 0x854 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     58a:	dd df       	rcall	.-70     	; 0x546 <CAN_interrupt_setup>
	
	printf("MCP_CANSTAT: %i\n", MCP2515_read(MCP_CANSTAT));//comment out later
     58c:	8e e0       	ldi	r24, 0x0E	; 14
     58e:	44 d1       	rcall	.+648    	; 0x818 <MCP2515_read>
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	8c e2       	ldi	r24, 0x2C	; 44
     596:	91 e0       	ldi	r25, 0x01	; 1
     598:	9f 93       	push	r25
     59a:	8f 93       	push	r24
     59c:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
	printf("CAN initialized.\n\n");
     5a0:	8d e3       	ldi	r24, 0x3D	; 61
     5a2:	91 e0       	ldi	r25, 0x01	; 1
     5a4:	0e 94 20 11 	call	0x2240	; 0x2240 <puts>
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	0f 90       	pop	r0
     5b0:	08 95       	ret

000005b2 <CAN_reception_complete>:
	
	#endif
	sei();
}

int8_t CAN_reception_complete(void){
     5b2:	cf 93       	push	r28
     5b4:	df 93       	push	r29
	printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
     5b6:	8c e2       	ldi	r24, 0x2C	; 44
     5b8:	2f d1       	rcall	.+606    	; 0x818 <MCP2515_read>
     5ba:	9f 93       	push	r25
     5bc:	8f 93       	push	r24
     5be:	8f e4       	ldi	r24, 0x4F	; 79
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	9f 93       	push	r25
     5c4:	8f 93       	push	r24
     5c6:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) | (MCP2515_read(MCP_CANINTF) & MCP_RX1IF)));
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	8c e2       	ldi	r24, 0x2C	; 44
     5d4:	21 d1       	rcall	.+578    	; 0x818 <MCP2515_read>
     5d6:	ec 01       	movw	r28, r24
     5d8:	8c e2       	ldi	r24, 0x2C	; 44
     5da:	1e d1       	rcall	.+572    	; 0x818 <MCP2515_read>
     5dc:	82 70       	andi	r24, 0x02	; 2
     5de:	99 27       	eor	r25, r25
     5e0:	c1 70       	andi	r28, 0x01	; 1
     5e2:	dd 27       	eor	r29, r29
     5e4:	c8 2b       	or	r28, r24
     5e6:	d9 2b       	or	r29, r25
     5e8:	cd 2b       	or	r28, r29
     5ea:	99 f3       	breq	.-26     	; 0x5d2 <CAN_reception_complete+0x20>
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     5ec:	8c e2       	ldi	r24, 0x2C	; 44
     5ee:	14 d1       	rcall	.+552    	; 0x818 <MCP2515_read>
     5f0:	80 ff       	sbrs	r24, 0
     5f2:	07 c0       	rjmp	.+14     	; 0x602 <CAN_reception_complete+0x50>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	61 e0       	ldi	r22, 0x01	; 1
     5fa:	8c e2       	ldi	r24, 0x2C	; 44
     5fc:	2b d1       	rcall	.+598    	; 0x854 <MCP2515_bit_modify>
		return 0;
     5fe:	80 e0       	ldi	r24, 0x00	; 0
     600:	0c c0       	rjmp	.+24     	; 0x61a <CAN_reception_complete+0x68>
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     602:	8c e2       	ldi	r24, 0x2C	; 44
     604:	09 d1       	rcall	.+530    	; 0x818 <MCP2515_read>
     606:	81 ff       	sbrs	r24, 1
     608:	07 c0       	rjmp	.+14     	; 0x618 <CAN_reception_complete+0x66>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     60a:	40 e0       	ldi	r20, 0x00	; 0
     60c:	50 e0       	ldi	r21, 0x00	; 0
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	8c e2       	ldi	r24, 0x2C	; 44
     612:	20 d1       	rcall	.+576    	; 0x854 <MCP2515_bit_modify>
		return 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	01 c0       	rjmp	.+2      	; 0x61a <CAN_reception_complete+0x68>
	}
	return -1;
     618:	8f ef       	ldi	r24, 0xFF	; 255
}
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	08 95       	ret

00000620 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

void CAN_data_receive(void) {
     620:	ef 92       	push	r14
     622:	ff 92       	push	r15
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
	if(receive_flag){
     62c:	80 91 7e 03 	lds	r24, 0x037E
     630:	88 23       	and	r24, r24
     632:	09 f4       	brne	.+2      	; 0x636 <CAN_data_receive+0x16>
     634:	4a c0       	rjmp	.+148    	; 0x6ca <CAN_data_receive+0xaa>
		receive_flag = 0;
     636:	10 92 7e 03 	sts	0x037E, r1
		uint8_t n = CAN_reception_complete();
     63a:	bb df       	rcall	.-138    	; 0x5b2 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     63c:	c8 2f       	mov	r28, r24
     63e:	c2 95       	swap	r28
     640:	c0 7f       	andi	r28, 0xF0	; 240
     642:	82 e6       	ldi	r24, 0x62	; 98
     644:	8c 0f       	add	r24, r28
     646:	14 df       	rcall	.-472    	; 0x470 <CAN_read>
     648:	81 e6       	ldi	r24, 0x61	; 97
     64a:	8c 0f       	add	r24, r28
     64c:	11 df       	rcall	.-478    	; 0x470 <CAN_read>
     64e:	28 e0       	ldi	r18, 0x08	; 8
     650:	82 9f       	mul	r24, r18
     652:	c0 01       	movw	r24, r0
     654:	11 24       	eor	r1, r1
     656:	90 93 8b 03 	sts	0x038B, r25
     65a:	80 93 8a 03 	sts	0x038A, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     65e:	85 e6       	ldi	r24, 0x65	; 101
     660:	8c 0f       	add	r24, r28
     662:	06 df       	rcall	.-500    	; 0x470 <CAN_read>
     664:	8f 70       	andi	r24, 0x0F	; 15
     666:	80 93 8c 03 	sts	0x038C, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     66a:	88 23       	and	r24, r24
     66c:	79 f0       	breq	.+30     	; 0x68c <CAN_data_receive+0x6c>
     66e:	10 e0       	ldi	r17, 0x00	; 0
     670:	cc e8       	ldi	r28, 0x8C	; 140
     672:	d3 e0       	ldi	r29, 0x03	; 3
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     674:	86 e6       	ldi	r24, 0x66	; 102
     676:	81 0f       	add	r24, r17
     678:	fb de       	rcall	.-522    	; 0x470 <CAN_read>
     67a:	e1 2f       	mov	r30, r17
     67c:	f0 e0       	ldi	r31, 0x00	; 0
     67e:	e6 57       	subi	r30, 0x76	; 118
     680:	fc 4f       	sbci	r31, 0xFC	; 252
     682:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     684:	1f 5f       	subi	r17, 0xFF	; 255
     686:	88 81       	ld	r24, Y
     688:	18 17       	cp	r17, r24
     68a:	a0 f3       	brcs	.-24     	; 0x674 <CAN_data_receive+0x54>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		printf("\nRECIVED MESSAGE:");
     68c:	80 e6       	ldi	r24, 0x60	; 96
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	9f 93       	push	r25
     692:	8f 93       	push	r24
     694:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
		CAN_print(CAN_receive_buffer);
     698:	e0 90 8a 03 	lds	r14, 0x038A
     69c:	f0 90 8b 03 	lds	r15, 0x038B
     6a0:	00 91 8c 03 	lds	r16, 0x038C
     6a4:	10 91 8d 03 	lds	r17, 0x038D
     6a8:	20 91 8e 03 	lds	r18, 0x038E
     6ac:	30 91 8f 03 	lds	r19, 0x038F
     6b0:	40 91 90 03 	lds	r20, 0x0390
     6b4:	50 91 91 03 	lds	r21, 0x0391
     6b8:	60 91 92 03 	lds	r22, 0x0392
     6bc:	70 91 93 03 	lds	r23, 0x0393
     6c0:	80 91 94 03 	lds	r24, 0x0394
     6c4:	d7 de       	rcall	.-594    	; 0x474 <CAN_print>
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
	}
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	1f 91       	pop	r17
     6d0:	0f 91       	pop	r16
     6d2:	ff 90       	pop	r15
     6d4:	ef 90       	pop	r14
     6d6:	08 95       	ret

000006d8 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     6dc:	c4 e0       	ldi	r28, 0x04	; 4
     6de:	d0 e0       	ldi	r29, 0x00	; 0
     6e0:	02 c0       	rjmp	.+4      	; 0x6e6 <CAN_transmission_complete+0xe>
     6e2:	cc 0f       	add	r28, r28
     6e4:	dd 1f       	adc	r29, r29
     6e6:	8a 95       	dec	r24
     6e8:	e2 f7       	brpl	.-8      	; 0x6e2 <CAN_transmission_complete+0xa>
     6ea:	8c e2       	ldi	r24, 0x2C	; 44
     6ec:	95 d0       	rcall	.+298    	; 0x818 <MCP2515_read>
     6ee:	8c 23       	and	r24, r28
     6f0:	9d 23       	and	r25, r29
     6f2:	89 2b       	or	r24, r25
     6f4:	d1 f3       	breq	.-12     	; 0x6ea <CAN_transmission_complete+0x12>
	return 1;
}
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	df 91       	pop	r29
     6fa:	cf 91       	pop	r28
     6fc:	08 95       	ret

000006fe <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     6fe:	ef 92       	push	r14
     700:	ff 92       	push	r15
     702:	0f 93       	push	r16
     704:	1f 93       	push	r17
     706:	cf 93       	push	r28
     708:	df 93       	push	r29
     70a:	ec 01       	movw	r28, r24
     70c:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     70e:	f6 2e       	mov	r15, r22
     710:	ff 0c       	add	r15, r15
     712:	ff 0c       	add	r15, r15
     714:	ff 0c       	add	r15, r15
     716:	ff 0c       	add	r15, r15
     718:	28 81       	ld	r18, Y
     71a:	39 81       	ldd	r19, Y+1	; 0x01
     71c:	b9 01       	movw	r22, r18
     71e:	75 95       	asr	r23
     720:	67 95       	ror	r22
     722:	75 95       	asr	r23
     724:	67 95       	ror	r22
     726:	75 95       	asr	r23
     728:	67 95       	ror	r22
     72a:	81 e3       	ldi	r24, 0x31	; 49
     72c:	8f 0d       	add	r24, r15
     72e:	65 d0       	rcall	.+202    	; 0x7fa <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     730:	28 81       	ld	r18, Y
     732:	39 81       	ldd	r19, Y+1	; 0x01
     734:	b9 01       	movw	r22, r18
     736:	66 0f       	add	r22, r22
     738:	77 1f       	adc	r23, r23
     73a:	62 95       	swap	r22
     73c:	72 95       	swap	r23
     73e:	70 7f       	andi	r23, 0xF0	; 240
     740:	76 27       	eor	r23, r22
     742:	60 7f       	andi	r22, 0xF0	; 240
     744:	76 27       	eor	r23, r22
     746:	82 e3       	ldi	r24, 0x32	; 50
     748:	8f 0d       	add	r24, r15
     74a:	57 d0       	rcall	.+174    	; 0x7fa <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     74c:	6a 81       	ldd	r22, Y+2	; 0x02
     74e:	6f 70       	andi	r22, 0x0F	; 15
     750:	70 e0       	ldi	r23, 0x00	; 0
     752:	85 e3       	ldi	r24, 0x35	; 53
     754:	8f 0d       	add	r24, r15
     756:	51 d0       	rcall	.+162    	; 0x7fa <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     758:	8a 81       	ldd	r24, Y+2	; 0x02
     75a:	88 23       	and	r24, r24
     75c:	89 f0       	breq	.+34     	; 0x780 <CAN_send_byte+0x82>
     75e:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     760:	86 e3       	ldi	r24, 0x36	; 54
     762:	f8 0e       	add	r15, r24
     764:	fe 01       	movw	r30, r28
     766:	e1 0f       	add	r30, r17
     768:	f1 1d       	adc	r31, r1
     76a:	63 81       	ldd	r22, Z+3	; 0x03
     76c:	77 27       	eor	r23, r23
     76e:	67 fd       	sbrc	r22, 7
     770:	70 95       	com	r23
     772:	8f 2d       	mov	r24, r15
     774:	81 0f       	add	r24, r17
     776:	41 d0       	rcall	.+130    	; 0x7fa <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     778:	1f 5f       	subi	r17, 0xFF	; 255
     77a:	8a 81       	ldd	r24, Y+2	; 0x02
     77c:	18 17       	cp	r17, r24
     77e:	90 f3       	brcs	.-28     	; 0x764 <CAN_send_byte+0x66>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     780:	80 2f       	mov	r24, r16
     782:	58 d0       	rcall	.+176    	; 0x834 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     784:	80 2f       	mov	r24, r16
     786:	a8 df       	rcall	.-176    	; 0x6d8 <CAN_transmission_complete>
	printf("\nSENT MESSAGE:");
     788:	82 e7       	ldi	r24, 0x72	; 114
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	9f 93       	push	r25
     78e:	8f 93       	push	r24
     790:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
	CAN_print(CAN_send_buffer);
     794:	e0 90 7f 03 	lds	r14, 0x037F
     798:	f0 90 80 03 	lds	r15, 0x0380
     79c:	00 91 81 03 	lds	r16, 0x0381
     7a0:	10 91 82 03 	lds	r17, 0x0382
     7a4:	20 91 83 03 	lds	r18, 0x0383
     7a8:	30 91 84 03 	lds	r19, 0x0384
     7ac:	40 91 85 03 	lds	r20, 0x0385
     7b0:	50 91 86 03 	lds	r21, 0x0386
     7b4:	60 91 87 03 	lds	r22, 0x0387
     7b8:	70 91 88 03 	lds	r23, 0x0388
     7bc:	80 91 89 03 	lds	r24, 0x0389
     7c0:	59 de       	rcall	.-846    	; 0x474 <CAN_print>
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
}
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	1f 91       	pop	r17
     7cc:	0f 91       	pop	r16
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	08 95       	ret

000007d4 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(int8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     7d4:	20 91 81 03 	lds	r18, 0x0381
     7d8:	22 23       	and	r18, r18
     7da:	59 f0       	breq	.+22     	; 0x7f2 <CAN_message_send+0x1e>
     7dc:	38 2f       	mov	r19, r24
     7de:	a2 e8       	ldi	r26, 0x82	; 130
     7e0:	b3 e0       	ldi	r27, 0x03	; 3
     7e2:	e8 2f       	mov	r30, r24
     7e4:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     7e6:	81 91       	ld	r24, Z+
     7e8:	8d 93       	st	X+, r24
     7ea:	8e 2f       	mov	r24, r30
     7ec:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(int8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     7ee:	82 17       	cp	r24, r18
     7f0:	d0 f3       	brcs	.-12     	; 0x7e6 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     7f2:	8f e7       	ldi	r24, 0x7F	; 127
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	83 cf       	rjmp	.-250    	; 0x6fe <CAN_send_byte>
     7f8:	08 95       	ret

000007fa <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     7fa:	cf 93       	push	r28
     7fc:	df 93       	push	r29
     7fe:	d8 2f       	mov	r29, r24
     800:	c6 2f       	mov	r28, r22
     802:	52 d0       	rcall	.+164    	; 0x8a8 <SPI_select>
     804:	82 e0       	ldi	r24, 0x02	; 2
     806:	46 d0       	rcall	.+140    	; 0x894 <SPI_send>
     808:	8d 2f       	mov	r24, r29
     80a:	44 d0       	rcall	.+136    	; 0x894 <SPI_send>
     80c:	8c 2f       	mov	r24, r28
     80e:	42 d0       	rcall	.+132    	; 0x894 <SPI_send>
     810:	4d d0       	rcall	.+154    	; 0x8ac <SPI_deselect>
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	08 95       	ret

00000818 <MCP2515_read>:
     818:	cf 93       	push	r28
     81a:	c8 2f       	mov	r28, r24
     81c:	45 d0       	rcall	.+138    	; 0x8a8 <SPI_select>
     81e:	83 e0       	ldi	r24, 0x03	; 3
     820:	39 d0       	rcall	.+114    	; 0x894 <SPI_send>
     822:	8c 2f       	mov	r24, r28
     824:	37 d0       	rcall	.+110    	; 0x894 <SPI_send>
     826:	3a d0       	rcall	.+116    	; 0x89c <SPI_receive>
     828:	c8 2f       	mov	r28, r24
     82a:	40 d0       	rcall	.+128    	; 0x8ac <SPI_deselect>
     82c:	8c 2f       	mov	r24, r28
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	cf 91       	pop	r28
     832:	08 95       	ret

00000834 <MCP2515_request_to_send>:
     834:	cf 93       	push	r28
     836:	c8 2f       	mov	r28, r24
     838:	37 d0       	rcall	.+110    	; 0x8a8 <SPI_select>
     83a:	21 e0       	ldi	r18, 0x01	; 1
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	c9 01       	movw	r24, r18
     840:	02 c0       	rjmp	.+4      	; 0x846 <MCP2515_request_to_send+0x12>
     842:	88 0f       	add	r24, r24
     844:	99 1f       	adc	r25, r25
     846:	ca 95       	dec	r28
     848:	e2 f7       	brpl	.-8      	; 0x842 <MCP2515_request_to_send+0xe>
     84a:	80 68       	ori	r24, 0x80	; 128
     84c:	23 d0       	rcall	.+70     	; 0x894 <SPI_send>
     84e:	2e d0       	rcall	.+92     	; 0x8ac <SPI_deselect>
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	18 2f       	mov	r17, r24
     85c:	d6 2f       	mov	r29, r22
     85e:	c4 2f       	mov	r28, r20
	SPI_select();
     860:	23 d0       	rcall	.+70     	; 0x8a8 <SPI_select>
	SPI_send(MCP_BITMOD);
     862:	85 e0       	ldi	r24, 0x05	; 5
     864:	17 d0       	rcall	.+46     	; 0x894 <SPI_send>
	SPI_send(adr);
     866:	81 2f       	mov	r24, r17
     868:	15 d0       	rcall	.+42     	; 0x894 <SPI_send>
	SPI_send(mask);
     86a:	8d 2f       	mov	r24, r29
     86c:	13 d0       	rcall	.+38     	; 0x894 <SPI_send>
	SPI_send(data);
     86e:	8c 2f       	mov	r24, r28
     870:	11 d0       	rcall	.+34     	; 0x894 <SPI_send>
	SPI_deselect();
     872:	1c d0       	rcall	.+56     	; 0x8ac <SPI_deselect>
}
     874:	df 91       	pop	r29
     876:	cf 91       	pop	r28
     878:	1f 91       	pop	r17
     87a:	08 95       	ret

0000087c <MCP2515_reset>:


void MCP2515_reset(void){
	printf("Resetting MCP2515\n");
     87c:	83 eb       	ldi	r24, 0xB3	; 179
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	0e 94 20 11 	call	0x2240	; 0x2240 <puts>
	SPI_select();
     884:	11 d0       	rcall	.+34     	; 0x8a8 <SPI_select>
	SPI_send(MCP_RESET);
     886:	80 ec       	ldi	r24, 0xC0	; 192
     888:	05 d0       	rcall	.+10     	; 0x894 <SPI_send>
	SPI_deselect();
     88a:	10 c0       	rjmp	.+32     	; 0x8ac <SPI_deselect>
     88c:	08 95       	ret

0000088e <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     88e:	10 d0       	rcall	.+32     	; 0x8b0 <SPI_initialize>
	MCP2515_reset();
     890:	f5 cf       	rjmp	.-22     	; 0x87c <MCP2515_reset>
     892:	08 95       	ret

00000894 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     894:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     896:	77 9b       	sbis	0x0e, 7	; 14
     898:	fe cf       	rjmp	.-4      	; 0x896 <SPI_send+0x2>

}
     89a:	08 95       	ret

0000089c <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     89c:	80 e0       	ldi	r24, 0x00	; 0
     89e:	fa df       	rcall	.-12     	; 0x894 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     8a0:	77 9b       	sbis	0x0e, 7	; 14
     8a2:	fe cf       	rjmp	.-4      	; 0x8a0 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     8a4:	8f b1       	in	r24, 0x0f	; 15
}
     8a6:	08 95       	ret

000008a8 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     8a8:	c4 98       	cbi	0x18, 4	; 24
     8aa:	08 95       	ret

000008ac <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     8ac:	c4 9a       	sbi	0x18, 4	; 24
     8ae:	08 95       	ret

000008b0 <SPI_initialize>:


void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
     8b0:	be 98       	cbi	0x17, 6	; 23
	#elif NODE == 2
		DDRB |= (1<<PB0);
		SPCR |= (1<<SPR0);
	#endif
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     8b2:	87 b3       	in	r24, 0x17	; 23
     8b4:	80 6b       	ori	r24, 0xB0	; 176
     8b6:	87 bb       	out	0x17, r24	; 23
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     8b8:	8d b1       	in	r24, 0x0d	; 13
     8ba:	80 65       	ori	r24, 0x50	; 80
     8bc:	8d b9       	out	0x0d, r24	; 13
		
	SPI_deselect();
     8be:	f6 df       	rcall	.-20     	; 0x8ac <SPI_deselect>
	printf("SPI communication initialized.\n");
     8c0:	85 ec       	ldi	r24, 0xC5	; 197
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	0c 94 20 11 	jmp	0x2240	; 0x2240 <puts>
     8c8:	08 95       	ret

000008ca <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     8ca:	5d 9b       	sbis	0x0b, 5	; 11
     8cc:	fe cf       	rjmp	.-4      	; 0x8ca <send_UART>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     8ce:	8c b9       	out	0x0c, r24	; 12
     8d0:	08 95       	ret

000008d2 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     8d2:	5f 9b       	sbis	0x0b, 7	; 11
     8d4:	fe cf       	rjmp	.-4      	; 0x8d2 <recieve_UART>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     8d6:	8c b1       	in	r24, 0x0c	; 12
}
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	08 95       	ret

000008dc <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     8dc:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)UBRR;
     8de:	8f e1       	ldi	r24, 0x1F	; 31
     8e0:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     8e2:	88 e1       	ldi	r24, 0x18	; 24
     8e4:	8a b9       	out	0x0a, r24	; 10
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     8e6:	69 e6       	ldi	r22, 0x69	; 105
     8e8:	74 e0       	ldi	r23, 0x04	; 4
     8ea:	85 e6       	ldi	r24, 0x65	; 101
     8ec:	94 e0       	ldi	r25, 0x04	; 4
     8ee:	0c 94 c5 10 	jmp	0x218a	; 0x218a <fdevopen>
     8f2:	08 95       	ret

000008f4 <readADC>:
 */ 
#include "adc.h"

unsigned int readADC(int channel){
	volatile char *adc_on = (char *) 0x1400;
	switch(channel){
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	91 05       	cpc	r25, r1
     8f8:	71 f0       	breq	.+28     	; 0x916 <readADC+0x22>
     8fa:	1c f4       	brge	.+6      	; 0x902 <readADC+0xe>
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	39 f0       	breq	.+14     	; 0x90e <readADC+0x1a>
     900:	1c c0       	rjmp	.+56     	; 0x93a <readADC+0x46>
     902:	83 30       	cpi	r24, 0x03	; 3
     904:	91 05       	cpc	r25, r1
     906:	59 f0       	breq	.+22     	; 0x91e <readADC+0x2a>
     908:	04 97       	sbiw	r24, 0x04	; 4
     90a:	69 f0       	breq	.+26     	; 0x926 <readADC+0x32>
     90c:	16 c0       	rjmp	.+44     	; 0x93a <readADC+0x46>
		case 1:	adc_on[0] = 0b00010100; break; // Joystick X_axis
     90e:	84 e1       	ldi	r24, 0x14	; 20
     910:	80 93 00 14 	sts	0x1400, r24
     914:	0b c0       	rjmp	.+22     	; 0x92c <readADC+0x38>
		case 2:	adc_on[0] = 0b00010101; break; // Joystick Y_axis
     916:	85 e1       	ldi	r24, 0x15	; 21
     918:	80 93 00 14 	sts	0x1400, r24
     91c:	07 c0       	rjmp	.+14     	; 0x92c <readADC+0x38>
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
     91e:	86 e1       	ldi	r24, 0x16	; 22
     920:	80 93 00 14 	sts	0x1400, r24
     924:	03 c0       	rjmp	.+6      	; 0x92c <readADC+0x38>
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
     926:	87 e1       	ldi	r24, 0x17	; 23
     928:	80 93 00 14 	sts	0x1400, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     92c:	82 e5       	ldi	r24, 0x52	; 82
     92e:	8a 95       	dec	r24
     930:	f1 f7       	brne	.-4      	; 0x92e <readADC+0x3a>
	//unsigned int val = (unsigned int)adc_on[0];
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
     932:	80 91 00 14 	lds	r24, 0x1400
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	08 95       	ret
	switch(channel){
		case 1:	adc_on[0] = 0b00010100; break; // Joystick X_axis
		case 2:	adc_on[0] = 0b00010101; break; // Joystick Y_axis
		case 3:	adc_on[0] = 0b00010110; break; // Left Slider
		case 4: adc_on[0] = 0b00010111; break; // Right Slider
		default: return 0;
     93a:	80 e0       	ldi	r24, 0x00	; 0
     93c:	90 e0       	ldi	r25, 0x00	; 0
	_delay_us(50); //TODO, CHANGE THIS TO THE CODE BELLOW
	//while(!(PORTA |= BIT_MASK(PINA5)));
	
	//printf("Value: %i\n",val);
	return (unsigned int)adc_on[0];
}
     93e:	08 95       	ret

00000940 <initalize_interrupts>:
 *  Author: pamarton
 */ 
#include "button_interrupts.h"

void initalize_interrupts(void){
	BIT_ON(DDRB, PD2);//enable input
     940:	ba 9a       	sbi	0x17, 2	; 23
	BIT_ON(DDRB, PD3);
     942:	bb 9a       	sbi	0x17, 3	; 23
	
	BIT_ON(MCUCR, ISC00);//configuring the interrupts for INT0 on rising edge
     944:	85 b7       	in	r24, 0x35	; 53
     946:	81 60       	ori	r24, 0x01	; 1
     948:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC01);
     94a:	85 b7       	in	r24, 0x35	; 53
     94c:	82 60       	ori	r24, 0x02	; 2
     94e:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(MCUCR, ISC10);//configuring the interrupts for INT1 on rising edge
     950:	85 b7       	in	r24, 0x35	; 53
     952:	84 60       	ori	r24, 0x04	; 4
     954:	85 bf       	out	0x35, r24	; 53
	BIT_ON(MCUCR, ISC11);
     956:	85 b7       	in	r24, 0x35	; 53
     958:	88 60       	ori	r24, 0x08	; 8
     95a:	85 bf       	out	0x35, r24	; 53
	
	BIT_ON(GICR, INT0);//enabling the interrupts INT0 and INT1 in the memory ???????????????????? 21.09.17
     95c:	8b b7       	in	r24, 0x3b	; 59
     95e:	80 64       	ori	r24, 0x40	; 64
     960:	8b bf       	out	0x3b, r24	; 59
	BIT_ON(GICR, INT1);
     962:	8b b7       	in	r24, 0x3b	; 59
     964:	80 68       	ori	r24, 0x80	; 128
     966:	8b bf       	out	0x3b, r24	; 59
     968:	08 95       	ret

0000096a <__vector_1>:
}


ISR(INT0_vect){//interrupt button Right
     96a:	1f 92       	push	r1
     96c:	0f 92       	push	r0
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	0f 92       	push	r0
     972:	11 24       	eor	r1, r1
     974:	2f 93       	push	r18
     976:	3f 93       	push	r19
     978:	4f 93       	push	r20
     97a:	5f 93       	push	r21
     97c:	6f 93       	push	r22
     97e:	7f 93       	push	r23
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
     988:	ef 93       	push	r30
     98a:	ff 93       	push	r31
	//printf("Right button pressed, printing values:\t\t");
	//printf("X: %i\tY: %i\tL: %i\tR: %i\n",read_control_input('X'),read_control_input('Y'),read_control_input('L'),read_control_input('R'));//REMOVE THIS AND THE #INCLUDE "input_convercions.h" in button_interrupts.h
	menu_right_button_flag();//sets the interupt flag
     98c:	d7 d2       	rcall	.+1454   	; 0xf3c <menu_right_button_flag>
}
     98e:	ff 91       	pop	r31
     990:	ef 91       	pop	r30
     992:	bf 91       	pop	r27
     994:	af 91       	pop	r26
     996:	9f 91       	pop	r25
     998:	8f 91       	pop	r24
     99a:	7f 91       	pop	r23
     99c:	6f 91       	pop	r22
     99e:	5f 91       	pop	r21
     9a0:	4f 91       	pop	r20
     9a2:	3f 91       	pop	r19
     9a4:	2f 91       	pop	r18
     9a6:	0f 90       	pop	r0
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <__vector_2>:
ISR(INT1_vect){//interrupt button Left
     9b0:	1f 92       	push	r1
     9b2:	0f 92       	push	r0
     9b4:	0f b6       	in	r0, 0x3f	; 63
     9b6:	0f 92       	push	r0
     9b8:	11 24       	eor	r1, r1
     9ba:	2f 93       	push	r18
     9bc:	3f 93       	push	r19
     9be:	4f 93       	push	r20
     9c0:	5f 93       	push	r21
     9c2:	6f 93       	push	r22
     9c4:	7f 93       	push	r23
     9c6:	8f 93       	push	r24
     9c8:	9f 93       	push	r25
     9ca:	af 93       	push	r26
     9cc:	bf 93       	push	r27
     9ce:	ef 93       	push	r30
     9d0:	ff 93       	push	r31
	menu_left_button_flag();//sets the interrupt flag
     9d2:	b0 d2       	rcall	.+1376   	; 0xf34 <menu_left_button_flag>
     9d4:	ff 91       	pop	r31
     9d6:	ef 91       	pop	r30
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	7f 91       	pop	r23
     9e2:	6f 91       	pop	r22
     9e4:	5f 91       	pop	r21
     9e6:	4f 91       	pop	r20
     9e8:	3f 91       	pop	r19
     9ea:	2f 91       	pop	r18
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0
     9f2:	1f 90       	pop	r1
     9f4:	18 95       	reti

000009f6 <calibrate_joystick>:
	ref_R = read_control_input('R');
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	c4 e6       	ldi	r28, 0x64	; 100
     a00:	d0 e0       	ldi	r29, 0x00	; 0
	for (int i = 0; i < CALIBRATE_READINGS; i++){
		calibrate_x += 127 - readADC(1);
     a02:	00 91 9f 03 	lds	r16, 0x039F
     a06:	10 91 a0 03 	lds	r17, 0x03A0
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	72 df       	rcall	.-284    	; 0x8f4 <readADC>
     a10:	01 58       	subi	r16, 0x81	; 129
     a12:	1f 4f       	sbci	r17, 0xFF	; 255
     a14:	08 1b       	sub	r16, r24
     a16:	19 0b       	sbc	r17, r25
     a18:	10 93 a0 03 	sts	0x03A0, r17
     a1c:	00 93 9f 03 	sts	0x039F, r16
		calibrate_y += 127 - readADC(2);
     a20:	00 91 9d 03 	lds	r16, 0x039D
     a24:	10 91 9e 03 	lds	r17, 0x039E
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	63 df       	rcall	.-314    	; 0x8f4 <readADC>
     a2e:	01 58       	subi	r16, 0x81	; 129
     a30:	1f 4f       	sbci	r17, 0xFF	; 255
     a32:	08 1b       	sub	r16, r24
     a34:	19 0b       	sbc	r17, r25
     a36:	10 93 9e 03 	sts	0x039E, r17
     a3a:	00 93 9d 03 	sts	0x039D, r16
     a3e:	21 97       	sbiw	r28, 0x01	; 1
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
}

void calibrate_joystick(void){
	for (int i = 0; i < CALIBRATE_READINGS; i++){
     a40:	20 97       	sbiw	r28, 0x00	; 0
     a42:	f9 f6       	brne	.-66     	; 0xa02 <calibrate_joystick+0xc>
		calibrate_x += 127 - readADC(1);
		calibrate_y += 127 - readADC(2);
	}
	calibrate_x /= CALIBRATE_READINGS;
     a44:	80 91 9f 03 	lds	r24, 0x039F
     a48:	90 91 a0 03 	lds	r25, 0x03A0
     a4c:	24 e6       	ldi	r18, 0x64	; 100
     a4e:	30 e0       	ldi	r19, 0x00	; 0
     a50:	b9 01       	movw	r22, r18
     a52:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__divmodhi4>
     a56:	70 93 a0 03 	sts	0x03A0, r23
     a5a:	60 93 9f 03 	sts	0x039F, r22
	calibrate_y /= CALIBRATE_READINGS;
     a5e:	80 91 9d 03 	lds	r24, 0x039D
     a62:	90 91 9e 03 	lds	r25, 0x039E
     a66:	b9 01       	movw	r22, r18
     a68:	0e 94 59 10 	call	0x20b2	; 0x20b2 <__divmodhi4>
     a6c:	70 93 9e 03 	sts	0x039E, r23
     a70:	60 93 9d 03 	sts	0x039D, r22
}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	1f 91       	pop	r17
     a7a:	0f 91       	pop	r16
     a7c:	08 95       	ret

00000a7e <signal_to_range>:
	}
	return 0;
}


int signal_to_range(int signal, int signal_min, int signal_max, int output_min, int output_max, int calibrate, int reference, int step){
     a7e:	2f 92       	push	r2
     a80:	3f 92       	push	r3
     a82:	4f 92       	push	r4
     a84:	5f 92       	push	r5
     a86:	6f 92       	push	r6
     a88:	7f 92       	push	r7
     a8a:	8f 92       	push	r8
     a8c:	9f 92       	push	r9
     a8e:	af 92       	push	r10
     a90:	bf 92       	push	r11
     a92:	cf 92       	push	r12
     a94:	df 92       	push	r13
     a96:	ef 92       	push	r14
     a98:	ff 92       	push	r15
     a9a:	0f 93       	push	r16
     a9c:	1f 93       	push	r17
     a9e:	cf 93       	push	r28
     aa0:	df 93       	push	r29
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <signal_to_range+0x26>
     aa4:	00 d0       	rcall	.+0      	; 0xaa6 <signal_to_range+0x28>
     aa6:	00 d0       	rcall	.+0      	; 0xaa8 <signal_to_range+0x2a>
     aa8:	cd b7       	in	r28, 0x3d	; 61
     aaa:	de b7       	in	r29, 0x3e	; 62
     aac:	3c 01       	movw	r6, r24
     aae:	7a 83       	std	Y+2, r23	; 0x02
     ab0:	69 83       	std	Y+1, r22	; 0x01
     ab2:	5c 83       	std	Y+4, r21	; 0x04
     ab4:	4b 83       	std	Y+3, r20	; 0x03
     ab6:	3e 83       	std	Y+6, r19	; 0x06
     ab8:	2d 83       	std	Y+5, r18	; 0x05
     aba:	18 01       	movw	r2, r16
     abc:	85 01       	movw	r16, r10
	
	// Linear interpolation to map integer range of the converted joystick/slider signal [signal_min, signal_max] to [output_min, output_max]. 
	// calibrate is an offset which is determined during the auto-calibration process at initialization.
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
     abe:	b9 01       	movw	r22, r18
     ac0:	88 27       	eor	r24, r24
     ac2:	77 fd       	sbrc	r23, 7
     ac4:	80 95       	com	r24
     ac6:	98 2f       	mov	r25, r24
     ac8:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     acc:	4b 01       	movw	r8, r22
     ace:	5c 01       	movw	r10, r24
     ad0:	b3 01       	movw	r22, r6
     ad2:	6e 0d       	add	r22, r14
     ad4:	7f 1d       	adc	r23, r15
     ad6:	29 81       	ldd	r18, Y+1	; 0x01
     ad8:	3a 81       	ldd	r19, Y+2	; 0x02
     ada:	62 1b       	sub	r22, r18
     adc:	73 0b       	sbc	r23, r19
     ade:	88 27       	eor	r24, r24
     ae0:	77 fd       	sbrc	r23, 7
     ae2:	80 95       	com	r24
     ae4:	98 2f       	mov	r25, r24
     ae6:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     aea:	2b 01       	movw	r4, r22
     aec:	3c 01       	movw	r6, r24
     aee:	b1 01       	movw	r22, r2
     af0:	8d 81       	ldd	r24, Y+5	; 0x05
     af2:	9e 81       	ldd	r25, Y+6	; 0x06
     af4:	68 1b       	sub	r22, r24
     af6:	79 0b       	sbc	r23, r25
     af8:	88 27       	eor	r24, r24
     afa:	77 fd       	sbrc	r23, 7
     afc:	80 95       	com	r24
     afe:	98 2f       	mov	r25, r24
     b00:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     b04:	9b 01       	movw	r18, r22
     b06:	ac 01       	movw	r20, r24
     b08:	c3 01       	movw	r24, r6
     b0a:	b2 01       	movw	r22, r4
     b0c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <__mulsf3>
     b10:	2b 01       	movw	r4, r22
     b12:	3c 01       	movw	r6, r24
     b14:	6b 81       	ldd	r22, Y+3	; 0x03
     b16:	7c 81       	ldd	r23, Y+4	; 0x04
     b18:	e9 81       	ldd	r30, Y+1	; 0x01
     b1a:	fa 81       	ldd	r31, Y+2	; 0x02
     b1c:	6e 1b       	sub	r22, r30
     b1e:	7f 0b       	sbc	r23, r31
     b20:	88 27       	eor	r24, r24
     b22:	77 fd       	sbrc	r23, 7
     b24:	80 95       	com	r24
     b26:	98 2f       	mov	r25, r24
     b28:	0e 94 46 0f 	call	0x1e8c	; 0x1e8c <__floatsisf>
     b2c:	9b 01       	movw	r18, r22
     b2e:	ac 01       	movw	r20, r24
     b30:	c3 01       	movw	r24, r6
     b32:	b2 01       	movw	r22, r4
     b34:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <__divsf3>
     b38:	9b 01       	movw	r18, r22
     b3a:	ac 01       	movw	r20, r24
     b3c:	c5 01       	movw	r24, r10
     b3e:	b4 01       	movw	r22, r8
     b40:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__addsf3>
     b44:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <__fixsfsi>
	
		
	
	if (new_signal >= output_max - step){
     b48:	c1 01       	movw	r24, r2
     b4a:	80 1b       	sub	r24, r16
     b4c:	91 0b       	sbc	r25, r17
     b4e:	68 17       	cp	r22, r24
     b50:	79 07       	cpc	r23, r25
     b52:	74 f5       	brge	.+92     	; 0xbb0 <signal_to_range+0x132>
		reference = output_max;
	}else if(new_signal <= output_min + step){
     b54:	8d 81       	ldd	r24, Y+5	; 0x05
     b56:	9e 81       	ldd	r25, Y+6	; 0x06
     b58:	80 0f       	add	r24, r16
     b5a:	91 1f       	adc	r25, r17
     b5c:	86 17       	cp	r24, r22
     b5e:	97 07       	cpc	r25, r23
     b60:	4c f5       	brge	.+82     	; 0xbb4 <signal_to_range+0x136>
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
			if((new_signal >= reference + step/2)){
     b62:	f8 01       	movw	r30, r16
     b64:	11 23       	and	r17, r17
     b66:	0c f4       	brge	.+2      	; 0xb6a <signal_to_range+0xec>
     b68:	31 96       	adiw	r30, 0x01	; 1
     b6a:	f5 95       	asr	r31
     b6c:	e7 95       	ror	r30
     b6e:	d8 01       	movw	r26, r16
     b70:	12 c0       	rjmp	.+36     	; 0xb96 <signal_to_range+0x118>
     b72:	8a 0f       	add	r24, r26
     b74:	9b 1f       	adc	r25, r27
     b76:	ac 01       	movw	r20, r24
     b78:	4e 0f       	add	r20, r30
     b7a:	5f 1f       	adc	r21, r31
     b7c:	64 17       	cp	r22, r20
     b7e:	75 07       	cpc	r23, r21
     b80:	14 f0       	brlt	.+4      	; 0xb86 <signal_to_range+0x108>
				reference += step;
     b82:	69 01       	movw	r12, r18
     b84:	0b c0       	rjmp	.+22     	; 0xb9c <signal_to_range+0x11e>
			}
			else if (new_signal <= reference - step/2){
     b86:	c6 01       	movw	r24, r12
     b88:	8e 1b       	sub	r24, r30
     b8a:	9f 0b       	sbc	r25, r31
     b8c:	86 17       	cp	r24, r22
     b8e:	97 07       	cpc	r25, r23
     b90:	14 f0       	brlt	.+4      	; 0xb96 <signal_to_range+0x118>
				reference -= step;
     b92:	c0 1a       	sub	r12, r16
     b94:	d1 0a       	sbc	r13, r17
     b96:	c6 01       	movw	r24, r12
     b98:	80 1b       	sub	r24, r16
     b9a:	91 0b       	sbc	r25, r17
	if (new_signal >= output_max - step){
		reference = output_max;
	}else if(new_signal <= output_min + step){
		reference = output_min;
	}else{
		while (!(((new_signal < reference + step) && (new_signal > reference - step)))){
     b9c:	96 01       	movw	r18, r12
     b9e:	20 0f       	add	r18, r16
     ba0:	31 1f       	adc	r19, r17
     ba2:	62 17       	cp	r22, r18
     ba4:	73 07       	cpc	r23, r19
     ba6:	2c f7       	brge	.-54     	; 0xb72 <signal_to_range+0xf4>
     ba8:	86 17       	cp	r24, r22
     baa:	97 07       	cpc	r25, r23
     bac:	14 f7       	brge	.-60     	; 0xb72 <signal_to_range+0xf4>
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <signal_to_range+0x13a>
	int new_signal = (int)((double)output_min + (double)(signal + calibrate - signal_min)*(double)(output_max-output_min)/(double)(signal_max-signal_min));
	
		
	
	if (new_signal >= output_max - step){
		reference = output_max;
     bb0:	61 01       	movw	r12, r2
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <signal_to_range+0x13a>
	}else if(new_signal <= output_min + step){
		reference = output_min;
     bb4:	cd 80       	ldd	r12, Y+5	; 0x05
     bb6:	de 80       	ldd	r13, Y+6	; 0x06
	}
	
	//reference = new_signal;
	//printf("VALUE: \t%i\t%i\t%i\n",signal,new_signal, reference);
	return reference;
}
     bb8:	c6 01       	movw	r24, r12
     bba:	26 96       	adiw	r28, 0x06	; 6
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	ff 90       	pop	r15
     bd0:	ef 90       	pop	r14
     bd2:	df 90       	pop	r13
     bd4:	cf 90       	pop	r12
     bd6:	bf 90       	pop	r11
     bd8:	af 90       	pop	r10
     bda:	9f 90       	pop	r9
     bdc:	8f 90       	pop	r8
     bde:	7f 90       	pop	r7
     be0:	6f 90       	pop	r6
     be2:	5f 90       	pop	r5
     be4:	4f 90       	pop	r4
     be6:	3f 90       	pop	r3
     be8:	2f 90       	pop	r2
     bea:	08 95       	ret

00000bec <read_control_input>:
	calibrate_y /= CALIBRATE_READINGS;
}



int read_control_input(char channel){
     bec:	af 92       	push	r10
     bee:	bf 92       	push	r11
     bf0:	cf 92       	push	r12
     bf2:	df 92       	push	r13
     bf4:	ef 92       	push	r14
     bf6:	ff 92       	push	r15
     bf8:	0f 93       	push	r16
     bfa:	1f 93       	push	r17
	switch(channel){
     bfc:	82 35       	cpi	r24, 0x52	; 82
     bfe:	09 f4       	brne	.+2      	; 0xc02 <read_control_input+0x16>
     c00:	6e c0       	rjmp	.+220    	; 0xcde <read_control_input+0xf2>
     c02:	20 f4       	brcc	.+8      	; 0xc0c <read_control_input+0x20>
     c04:	8c 34       	cpi	r24, 0x4C	; 76
     c06:	09 f4       	brne	.+2      	; 0xc0a <read_control_input+0x1e>
     c08:	4a c0       	rjmp	.+148    	; 0xc9e <read_control_input+0xb2>
     c0a:	89 c0       	rjmp	.+274    	; 0xd1e <read_control_input+0x132>
     c0c:	88 35       	cpi	r24, 0x58	; 88
     c0e:	19 f0       	breq	.+6      	; 0xc16 <read_control_input+0x2a>
     c10:	89 35       	cpi	r24, 0x59	; 89
     c12:	19 f1       	breq	.+70     	; 0xc5a <read_control_input+0x6e>
     c14:	84 c0       	rjmp	.+264    	; 0xd1e <read_control_input+0x132>
		case 'X': 
			ref_X = signal_to_range(readADC(1), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_x, ref_X, RESOLUTION); 
     c16:	c0 90 9b 03 	lds	r12, 0x039B
     c1a:	d0 90 9c 03 	lds	r13, 0x039C
     c1e:	e0 90 9f 03 	lds	r14, 0x039F
     c22:	f0 90 a0 03 	lds	r15, 0x03A0
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	64 de       	rcall	.-824    	; 0x8f4 <readADC>
     c2c:	0f 2e       	mov	r0, r31
     c2e:	fa e0       	ldi	r31, 0x0A	; 10
     c30:	af 2e       	mov	r10, r31
     c32:	b1 2c       	mov	r11, r1
     c34:	f0 2d       	mov	r31, r0
     c36:	04 e6       	ldi	r16, 0x64	; 100
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	2c e9       	ldi	r18, 0x9C	; 156
     c3c:	3f ef       	ldi	r19, 0xFF	; 255
     c3e:	4f ef       	ldi	r20, 0xFF	; 255
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	1b df       	rcall	.-458    	; 0xa7e <signal_to_range>
     c48:	90 93 9c 03 	sts	0x039C, r25
     c4c:	80 93 9b 03 	sts	0x039B, r24
			return ref_X;
     c50:	80 91 9b 03 	lds	r24, 0x039B
     c54:	90 91 9c 03 	lds	r25, 0x039C
     c58:	64 c0       	rjmp	.+200    	; 0xd22 <read_control_input+0x136>
		case 'Y': 
			ref_Y = signal_to_range(readADC(2), SIGNAL_MIN, SIGNAL_MAX, RANGE_MIN, RANGE_MAX, calibrate_y, ref_Y, RESOLUTION);
     c5a:	c0 90 99 03 	lds	r12, 0x0399
     c5e:	d0 90 9a 03 	lds	r13, 0x039A
     c62:	e0 90 9d 03 	lds	r14, 0x039D
     c66:	f0 90 9e 03 	lds	r15, 0x039E
     c6a:	82 e0       	ldi	r24, 0x02	; 2
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	42 de       	rcall	.-892    	; 0x8f4 <readADC>
     c70:	0f 2e       	mov	r0, r31
     c72:	fa e0       	ldi	r31, 0x0A	; 10
     c74:	af 2e       	mov	r10, r31
     c76:	b1 2c       	mov	r11, r1
     c78:	f0 2d       	mov	r31, r0
     c7a:	04 e6       	ldi	r16, 0x64	; 100
     c7c:	10 e0       	ldi	r17, 0x00	; 0
     c7e:	2c e9       	ldi	r18, 0x9C	; 156
     c80:	3f ef       	ldi	r19, 0xFF	; 255
     c82:	4f ef       	ldi	r20, 0xFF	; 255
     c84:	50 e0       	ldi	r21, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	f9 de       	rcall	.-526    	; 0xa7e <signal_to_range>
     c8c:	90 93 9a 03 	sts	0x039A, r25
     c90:	80 93 99 03 	sts	0x0399, r24
			return ref_Y;
     c94:	80 91 99 03 	lds	r24, 0x0399
     c98:	90 91 9a 03 	lds	r25, 0x039A
     c9c:	42 c0       	rjmp	.+132    	; 0xd22 <read_control_input+0x136>
		case 'L':
		ref_L = signal_to_range(readADC(3), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_L, RESOLUTION);
     c9e:	c0 90 97 03 	lds	r12, 0x0397
     ca2:	d0 90 98 03 	lds	r13, 0x0398
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	24 de       	rcall	.-952    	; 0x8f4 <readADC>
     cac:	0f 2e       	mov	r0, r31
     cae:	fa e0       	ldi	r31, 0x0A	; 10
     cb0:	af 2e       	mov	r10, r31
     cb2:	b1 2c       	mov	r11, r1
     cb4:	f0 2d       	mov	r31, r0
     cb6:	e1 2c       	mov	r14, r1
     cb8:	f1 2c       	mov	r15, r1
     cba:	04 e6       	ldi	r16, 0x64	; 100
     cbc:	10 e0       	ldi	r17, 0x00	; 0
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	4f ef       	ldi	r20, 0xFF	; 255
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	d9 de       	rcall	.-590    	; 0xa7e <signal_to_range>
     ccc:	90 93 98 03 	sts	0x0398, r25
     cd0:	80 93 97 03 	sts	0x0397, r24
		return ref_L;
     cd4:	80 91 97 03 	lds	r24, 0x0397
     cd8:	90 91 98 03 	lds	r25, 0x0398
     cdc:	22 c0       	rjmp	.+68     	; 0xd22 <read_control_input+0x136>
		case 'R': 
			ref_R = signal_to_range(readADC(4), SIGNAL_MIN, SIGNAL_MAX, 0, RANGE_MAX, 0, ref_R, RESOLUTION);
     cde:	c0 90 95 03 	lds	r12, 0x0395
     ce2:	d0 90 96 03 	lds	r13, 0x0396
     ce6:	84 e0       	ldi	r24, 0x04	; 4
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	04 de       	rcall	.-1016   	; 0x8f4 <readADC>
     cec:	0f 2e       	mov	r0, r31
     cee:	fa e0       	ldi	r31, 0x0A	; 10
     cf0:	af 2e       	mov	r10, r31
     cf2:	b1 2c       	mov	r11, r1
     cf4:	f0 2d       	mov	r31, r0
     cf6:	e1 2c       	mov	r14, r1
     cf8:	f1 2c       	mov	r15, r1
     cfa:	04 e6       	ldi	r16, 0x64	; 100
     cfc:	10 e0       	ldi	r17, 0x00	; 0
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	4f ef       	ldi	r20, 0xFF	; 255
     d04:	50 e0       	ldi	r21, 0x00	; 0
     d06:	60 e0       	ldi	r22, 0x00	; 0
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	b9 de       	rcall	.-654    	; 0xa7e <signal_to_range>
     d0c:	90 93 96 03 	sts	0x0396, r25
     d10:	80 93 95 03 	sts	0x0395, r24
			return ref_R;
     d14:	80 91 95 03 	lds	r24, 0x0395
     d18:	90 91 96 03 	lds	r25, 0x0396
     d1c:	02 c0       	rjmp	.+4      	; 0xd22 <read_control_input+0x136>
	}
	return 0;
     d1e:	80 e0       	ldi	r24, 0x00	; 0
     d20:	90 e0       	ldi	r25, 0x00	; 0
}
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	08 95       	ret

00000d34 <initialize_control_input>:




void initialize_control_input(void){
	calibrate_joystick();
     d34:	60 de       	rcall	.-832    	; 0x9f6 <calibrate_joystick>
	ref_X = read_control_input('X');
     d36:	88 e5       	ldi	r24, 0x58	; 88
     d38:	59 df       	rcall	.-334    	; 0xbec <read_control_input>
     d3a:	90 93 9c 03 	sts	0x039C, r25
     d3e:	80 93 9b 03 	sts	0x039B, r24
	ref_Y = read_control_input('Y');
     d42:	89 e5       	ldi	r24, 0x59	; 89
     d44:	53 df       	rcall	.-346    	; 0xbec <read_control_input>
     d46:	90 93 9a 03 	sts	0x039A, r25
     d4a:	80 93 99 03 	sts	0x0399, r24
	ref_L = read_control_input('L');
     d4e:	8c e4       	ldi	r24, 0x4C	; 76
     d50:	4d df       	rcall	.-358    	; 0xbec <read_control_input>
     d52:	90 93 98 03 	sts	0x0398, r25
     d56:	80 93 97 03 	sts	0x0397, r24
	ref_R = read_control_input('R');
     d5a:	82 e5       	ldi	r24, 0x52	; 82
     d5c:	47 df       	rcall	.-370    	; 0xbec <read_control_input>
     d5e:	90 93 96 03 	sts	0x0396, r25
     d62:	80 93 95 03 	sts	0x0395, r24
	printf("Calibration values: \tcal_X: %i\tcal_Y:%i\n",calibrate_x,calibrate_y);
     d66:	20 91 9d 03 	lds	r18, 0x039D
     d6a:	30 91 9e 03 	lds	r19, 0x039E
     d6e:	80 91 9f 03 	lds	r24, 0x039F
     d72:	90 91 a0 03 	lds	r25, 0x03A0
     d76:	3f 93       	push	r19
     d78:	2f 93       	push	r18
     d7a:	9f 93       	push	r25
     d7c:	8f 93       	push	r24
     d7e:	84 ee       	ldi	r24, 0xE4	; 228
     d80:	91 e0       	ldi	r25, 0x01	; 1
     d82:	9f 93       	push	r25
     d84:	8f 93       	push	r24
     d86:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
	printf("Reference Values: \tX %i\tY %i\tL %i\tR %i\t\n",ref_X,ref_Y,ref_L,ref_R);
     d8a:	60 91 95 03 	lds	r22, 0x0395
     d8e:	70 91 96 03 	lds	r23, 0x0396
     d92:	40 91 97 03 	lds	r20, 0x0397
     d96:	50 91 98 03 	lds	r21, 0x0398
     d9a:	20 91 99 03 	lds	r18, 0x0399
     d9e:	30 91 9a 03 	lds	r19, 0x039A
     da2:	80 91 9b 03 	lds	r24, 0x039B
     da6:	90 91 9c 03 	lds	r25, 0x039C
     daa:	7f 93       	push	r23
     dac:	6f 93       	push	r22
     dae:	5f 93       	push	r21
     db0:	4f 93       	push	r20
     db2:	3f 93       	push	r19
     db4:	2f 93       	push	r18
     db6:	9f 93       	push	r25
     db8:	8f 93       	push	r24
     dba:	8d e0       	ldi	r24, 0x0D	; 13
     dbc:	92 e0       	ldi	r25, 0x02	; 2
     dbe:	9f 93       	push	r25
     dc0:	8f 93       	push	r24
     dc2:	0e 94 0f 11 	call	0x221e	; 0x221e <printf>
     dc6:	8d b7       	in	r24, 0x3d	; 61
     dc8:	9e b7       	in	r25, 0x3e	; 62
     dca:	40 96       	adiw	r24, 0x10	; 16
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	9e bf       	out	0x3e, r25	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	8d bf       	out	0x3d, r24	; 61
     dd6:	08 95       	ret

00000dd8 <initialize_menu>:
menu mainmenu_0;//Highscore
menu mainmenu_1;
menu mainmenu_2;
//menu mainmenu_3;

void initialize_menu(void){
     dd8:	cf 93       	push	r28
     dda:	df 93       	push	r29
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     ddc:	ca ef       	ldi	r28, 0xFA	; 250
     dde:	d3 e0       	ldi	r29, 0x03	; 3
     de0:	d0 93 e1 03 	sts	0x03E1, r29
     de4:	c0 93 e0 03 	sts	0x03E0, r28
	new_menu->ptr_child = ptr_child;
     de8:	10 92 e3 03 	sts	0x03E3, r1
     dec:	10 92 e2 03 	sts	0x03E2, r1
	new_menu->ptr_parent = ptr_parent;
     df0:	10 92 e5 03 	sts	0x03E5, r1
     df4:	10 92 e4 03 	sts	0x03E4, r1
	
	new_menu->title = title;
     df8:	ec ed       	ldi	r30, 0xDC	; 220
     dfa:	f3 e0       	ldi	r31, 0x03	; 3
     dfc:	8a ee       	ldi	r24, 0xEA	; 234
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	91 83       	std	Z+1, r25	; 0x01
     e02:	80 83       	st	Z, r24
	new_menu->n_sib = n_sib;
     e04:	83 e0       	ldi	r24, 0x03	; 3
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	90 93 df 03 	sts	0x03DF, r25
     e0c:	80 93 de 03 	sts	0x03DE, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     e10:	2e ea       	ldi	r18, 0xAE	; 174
     e12:	33 e0       	ldi	r19, 0x03	; 3
     e14:	30 93 ff 03 	sts	0x03FF, r19
     e18:	20 93 fe 03 	sts	0x03FE, r18
	new_menu->ptr_child = ptr_child;
     e1c:	66 ee       	ldi	r22, 0xE6	; 230
     e1e:	73 e0       	ldi	r23, 0x03	; 3
     e20:	70 93 01 04 	sts	0x0401, r23
     e24:	60 93 00 04 	sts	0x0400, r22
	new_menu->ptr_parent = ptr_parent;
     e28:	10 92 03 04 	sts	0x0403, r1
     e2c:	10 92 02 04 	sts	0x0402, r1
	
	new_menu->title = title;
     e30:	44 ee       	ldi	r20, 0xE4	; 228
     e32:	50 e0       	ldi	r21, 0x00	; 0
     e34:	59 83       	std	Y+1, r21	; 0x01
     e36:	48 83       	st	Y, r20
	new_menu->n_sib = n_sib;
     e38:	90 93 fd 03 	sts	0x03FD, r25
     e3c:	80 93 fc 03 	sts	0x03FC, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     e40:	f0 93 b3 03 	sts	0x03B3, r31
     e44:	e0 93 b2 03 	sts	0x03B2, r30
	new_menu->ptr_child = ptr_child;
     e48:	c8 ec       	ldi	r28, 0xC8	; 200
     e4a:	d3 e0       	ldi	r29, 0x03	; 3
     e4c:	d0 93 b5 03 	sts	0x03B5, r29
     e50:	c0 93 b4 03 	sts	0x03B4, r28
	new_menu->ptr_parent = ptr_parent;
     e54:	10 92 b7 03 	sts	0x03B7, r1
     e58:	10 92 b6 03 	sts	0x03B6, r1
	
	new_menu->title = title;
     e5c:	4c ed       	ldi	r20, 0xDC	; 220
     e5e:	50 e0       	ldi	r21, 0x00	; 0
     e60:	d9 01       	movw	r26, r18
     e62:	4d 93       	st	X+, r20
     e64:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     e66:	90 93 b1 03 	sts	0x03B1, r25
     e6a:	80 93 b0 03 	sts	0x03B0, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     e6e:	22 ed       	ldi	r18, 0xD2	; 210
     e70:	33 e0       	ldi	r19, 0x03	; 3
     e72:	30 93 cd 03 	sts	0x03CD, r19
     e76:	20 93 cc 03 	sts	0x03CC, r18
	new_menu->ptr_child = ptr_child;
     e7a:	10 92 cf 03 	sts	0x03CF, r1
     e7e:	10 92 ce 03 	sts	0x03CE, r1
	new_menu->ptr_parent = ptr_parent;
     e82:	f0 93 d1 03 	sts	0x03D1, r31
     e86:	e0 93 d0 03 	sts	0x03D0, r30
	
	new_menu->title = title;
     e8a:	86 ed       	ldi	r24, 0xD6	; 214
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	99 83       	std	Y+1, r25	; 0x01
     e90:	88 83       	st	Y, r24
	new_menu->n_sib = n_sib;
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	90 e0       	ldi	r25, 0x00	; 0
     e96:	90 93 cb 03 	sts	0x03CB, r25
     e9a:	80 93 ca 03 	sts	0x03CA, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     e9e:	d0 93 d7 03 	sts	0x03D7, r29
     ea2:	c0 93 d6 03 	sts	0x03D6, r28
	new_menu->ptr_child = ptr_child;
     ea6:	10 92 d9 03 	sts	0x03D9, r1
     eaa:	10 92 d8 03 	sts	0x03D8, r1
	new_menu->ptr_parent = ptr_parent;
     eae:	f0 93 db 03 	sts	0x03DB, r31
     eb2:	e0 93 da 03 	sts	0x03DA, r30
	
	new_menu->title = title;
     eb6:	4d ec       	ldi	r20, 0xCD	; 205
     eb8:	50 e0       	ldi	r21, 0x00	; 0
     eba:	d9 01       	movw	r26, r18
     ebc:	4d 93       	st	X+, r20
     ebe:	5c 93       	st	X, r21
	new_menu->n_sib = n_sib;
     ec0:	90 93 d5 03 	sts	0x03D5, r25
     ec4:	80 93 d4 03 	sts	0x03D4, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     ec8:	c0 ef       	ldi	r28, 0xF0	; 240
     eca:	d3 e0       	ldi	r29, 0x03	; 3
     ecc:	d0 93 eb 03 	sts	0x03EB, r29
     ed0:	c0 93 ea 03 	sts	0x03EA, r28
	new_menu->ptr_child = ptr_child;
     ed4:	10 92 ed 03 	sts	0x03ED, r1
     ed8:	10 92 ec 03 	sts	0x03EC, r1
	new_menu->ptr_parent = ptr_parent;
     edc:	f0 93 ef 03 	sts	0x03EF, r31
     ee0:	e0 93 ee 03 	sts	0x03EE, r30
	
	new_menu->title = title;
     ee4:	22 ec       	ldi	r18, 0xC2	; 194
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	db 01       	movw	r26, r22
     eea:	2d 93       	st	X+, r18
     eec:	3c 93       	st	X, r19
	new_menu->n_sib = n_sib;
     eee:	90 93 e9 03 	sts	0x03E9, r25
     ef2:	80 93 e8 03 	sts	0x03E8, r24
uint8_t left_button_flag = 0;

void setup_menu(menu * new_menu, menu * ptr_sib_down, menu * ptr_parent, menu * ptr_child, int n_sib, PGM_P title){
	//new_menu->ptr_self = new_menu;
	//new_menu->ptr_sib_up = ptr_sib_up;
	new_menu->ptr_sib_down = ptr_sib_down;
     ef6:	70 93 f5 03 	sts	0x03F5, r23
     efa:	60 93 f4 03 	sts	0x03F4, r22
	new_menu->ptr_child = ptr_child;
     efe:	10 92 f7 03 	sts	0x03F7, r1
     f02:	10 92 f6 03 	sts	0x03F6, r1
	new_menu->ptr_parent = ptr_parent;
     f06:	f0 93 f9 03 	sts	0x03F9, r31
     f0a:	e0 93 f8 03 	sts	0x03F8, r30
	
	new_menu->title = title;
     f0e:	28 eb       	ldi	r18, 0xB8	; 184
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	39 83       	std	Y+1, r19	; 0x01
     f14:	28 83       	st	Y, r18
	new_menu->n_sib = n_sib;
     f16:	90 93 f3 03 	sts	0x03F3, r25
     f1a:	80 93 f2 03 	sts	0x03F2, r24

	setup_menu(&debug_0,&debug_1,&mainmenu_0,NULL,2,debug_entry_0);
	setup_menu(&debug_1,&debug_0,&mainmenu_0,NULL,2,debug_entry_1);
	
	// current_head is the top entry of the current menu.
	current_head = &mainmenu_0;
     f1e:	f0 93 ab 03 	sts	0x03AB, r31
     f22:	e0 93 aa 03 	sts	0x03AA, r30
	
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
     f26:	f0 93 ad 03 	sts	0x03AD, r31
     f2a:	e0 93 ac 03 	sts	0x03AC, r30
	
}
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	08 95       	ret

00000f34 <menu_left_button_flag>:
	return 0;
	
}

void menu_left_button_flag(void){
	left_button_flag = 1;
     f34:	81 e0       	ldi	r24, 0x01	; 1
     f36:	80 93 a3 03 	sts	0x03A3, r24
     f3a:	08 95       	ret

00000f3c <menu_right_button_flag>:
}


void menu_right_button_flag(void){
	right_button_flag = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	80 93 a4 03 	sts	0x03A4, r24
     f42:	08 95       	ret

00000f44 <menu_set_contrast>:

const char brightness_text_0[] PROGMEM = "Use left slider";

void menu_set_contrast(void){
	
	oled_goto_line(0);
     f44:	80 e0       	ldi	r24, 0x00	; 0
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	c6 d2       	rcall	.+1420   	; 0x14d6 <oled_goto_line>
	strcpy_P(temp,brightness_text_0);
     f4a:	60 ea       	ldi	r22, 0xA0	; 160
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	88 eb       	ldi	r24, 0xB8	; 184
     f50:	93 e0       	ldi	r25, 0x03	; 3
     f52:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy_P>
	sram_write_string(temp);
     f56:	88 eb       	ldi	r24, 0xB8	; 184
     f58:	93 e0       	ldi	r25, 0x03	; 3
     f5a:	dc d3       	rcall	.+1976   	; 0x1714 <sram_write_string>
	sram_clear_line(1);
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	97 d5       	rcall	.+2862   	; 0x1a8e <sram_clear_line>
	oled_goto_line(2);
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	b8 d2       	rcall	.+1392   	; 0x14d6 <oled_goto_line>
	strcpy_P(temp,btn_1);
     f66:	60 eb       	ldi	r22, 0xB0	; 176
     f68:	70 e0       	ldi	r23, 0x00	; 0
     f6a:	88 eb       	ldi	r24, 0xB8	; 184
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy_P>
	sram_write_string(temp);
     f72:	88 eb       	ldi	r24, 0xB8	; 184
     f74:	93 e0       	ldi	r25, 0x03	; 3
     f76:	ce d3       	rcall	.+1948   	; 0x1714 <sram_write_string>
	sram_push();
     f78:	63 d5       	rcall	.+2758   	; 0x1a40 <sram_push>
	while (right_button_flag == 0){	
     f7a:	80 91 a4 03 	lds	r24, 0x03A4
     f7e:	81 11       	cpse	r24, r1
     f80:	0c c0       	rjmp	.+24     	; 0xf9a <menu_set_contrast+0x56>
		write_c(0x81);
     f82:	81 e8       	ldi	r24, 0x81	; 129
     f84:	77 d2       	rcall	.+1262   	; 0x1474 <write_c>
		write_c(readADC(3)/2);
     f86:	83 e0       	ldi	r24, 0x03	; 3
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	b4 dc       	rcall	.-1688   	; 0x8f4 <readADC>
     f8c:	96 95       	lsr	r25
     f8e:	87 95       	ror	r24
     f90:	71 d2       	rcall	.+1250   	; 0x1474 <write_c>
	sram_clear_line(1);
	oled_goto_line(2);
	strcpy_P(temp,btn_1);
	sram_write_string(temp);
	sram_push();
	while (right_button_flag == 0){	
     f92:	80 91 a4 03 	lds	r24, 0x03A4
     f96:	88 23       	and	r24, r24
     f98:	a1 f3       	breq	.-24     	; 0xf82 <menu_set_contrast+0x3e>
		write_c(0x81);
		write_c(readADC(3)/2);
	}
	right_button_flag = 0;
     f9a:	10 92 a4 03 	sts	0x03A4, r1
     f9e:	08 95       	ret

00000fa0 <menu_calibrate_joystick>:
const char calibrate_direction_1[] PROGMEM = "DOWN";
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
     fa0:	0f 93       	push	r16
     fa2:	1f 93       	push	r17
     fa4:	cf 93       	push	r28
     fa6:	df 93       	push	r29
	for (uint8_t i = 0; i < 7; i++){
     fa8:	c0 e0       	ldi	r28, 0x00	; 0
		sram_clear_line(i);
     faa:	8c 2f       	mov	r24, r28
     fac:	70 d5       	rcall	.+2784   	; 0x1a8e <sram_clear_line>
const char calibrate_direction_2[] PROGMEM = "LEFT";
const char calibrate_direction_3[] PROGMEM = "RIGHT";
const char* const calibrate_direction_array[] PROGMEM = {calibrate_direction_0,calibrate_direction_1,calibrate_direction_2,calibrate_direction_3};

void menu_calibrate_joystick(void){
	for (uint8_t i = 0; i < 7; i++){
     fae:	cf 5f       	subi	r28, 0xFF	; 255
     fb0:	c7 30       	cpi	r28, 0x07	; 7
     fb2:	d9 f7       	brne	.-10     	; 0xfaa <menu_calibrate_joystick+0xa>
		sram_clear_line(i);
	}
	oled_goto_line(0);
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	8e d2       	rcall	.+1308   	; 0x14d6 <oled_goto_line>
	strcpy_P(temp,calibrate_text_0);
     fba:	69 e9       	ldi	r22, 0x99	; 153
     fbc:	70 e0       	ldi	r23, 0x00	; 0
     fbe:	88 eb       	ldi	r24, 0xB8	; 184
     fc0:	93 e0       	ldi	r25, 0x03	; 3
     fc2:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy_P>
	sram_write_string(temp);
     fc6:	88 eb       	ldi	r24, 0xB8	; 184
     fc8:	93 e0       	ldi	r25, 0x03	; 3
     fca:	a4 d3       	rcall	.+1864   	; 0x1714 <sram_write_string>
	oled_goto_line(2);
     fcc:	82 e0       	ldi	r24, 0x02	; 2
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	82 d2       	rcall	.+1284   	; 0x14d6 <oled_goto_line>
	strcpy_P(temp,btn_1);
     fd2:	60 eb       	ldi	r22, 0xB0	; 176
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	88 eb       	ldi	r24, 0xB8	; 184
     fd8:	93 e0       	ldi	r25, 0x03	; 3
     fda:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy_P>
	sram_write_string(temp);
     fde:	88 eb       	ldi	r24, 0xB8	; 184
     fe0:	93 e0       	ldi	r25, 0x03	; 3
     fe2:	98 d3       	rcall	.+1840   	; 0x1714 <sram_write_string>
	sram_push();
     fe4:	2d d5       	rcall	.+2650   	; 0x1a40 <sram_push>
	while (right_button_flag == 0){
     fe6:	80 91 a4 03 	lds	r24, 0x03A4
     fea:	81 11       	cpse	r24, r1
     fec:	0a c0       	rjmp	.+20     	; 0x1002 <menu_calibrate_joystick+0x62>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fee:	8c ec       	ldi	r24, 0xCC	; 204
     ff0:	94 e0       	ldi	r25, 0x04	; 4
     ff2:	01 97       	sbiw	r24, 0x01	; 1
     ff4:	f1 f7       	brne	.-4      	; 0xff2 <menu_calibrate_joystick+0x52>
     ff6:	00 c0       	rjmp	.+0      	; 0xff8 <menu_calibrate_joystick+0x58>
     ff8:	00 00       	nop
     ffa:	80 91 a4 03 	lds	r24, 0x03A4
     ffe:	88 23       	and	r24, r24
    1000:	b1 f3       	breq	.-20     	; 0xfee <menu_calibrate_joystick+0x4e>
		_delay_ms(1);
	}
	right_button_flag = 0;
    1002:	10 92 a4 03 	sts	0x03A4, r1
	
	
	oled_clear_line(0);
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	8d d2       	rcall	.+1306   	; 0x1526 <oled_clear_line>
	strcpy_P(temp,calibrate_text_1);
    100c:	6b e8       	ldi	r22, 0x8B	; 139
    100e:	70 e0       	ldi	r23, 0x00	; 0
    1010:	88 eb       	ldi	r24, 0xB8	; 184
    1012:	93 e0       	ldi	r25, 0x03	; 3
    1014:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy_P>
	sram_write_string(temp);
    1018:	88 eb       	ldi	r24, 0xB8	; 184
    101a:	93 e0       	ldi	r25, 0x03	; 3
    101c:	7b d3       	rcall	.+1782   	; 0x1714 <sram_write_string>
    101e:	c0 e7       	ldi	r28, 0x70	; 112
    1020:	d0 e0       	ldi	r29, 0x00	; 0
    1022:	08 e7       	ldi	r16, 0x78	; 120
    1024:	10 e0       	ldi	r17, 0x00	; 0
	
	for (uint8_t i = 0; i < 4; i++){
		
		oled_clear_line(1);
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	7d d2       	rcall	.+1274   	; 0x1526 <oled_clear_line>
		strcpy_P(temp,(char*)pgm_read_word(&(calibrate_direction_array[i])));
    102c:	fe 01       	movw	r30, r28
    102e:	65 91       	lpm	r22, Z+
    1030:	74 91       	lpm	r23, Z
    1032:	88 eb       	ldi	r24, 0xB8	; 184
    1034:	93 e0       	ldi	r25, 0x03	; 3
    1036:	0e 94 be 10 	call	0x217c	; 0x217c <strcpy_P>
		sram_write_string(temp);
    103a:	88 eb       	ldi	r24, 0xB8	; 184
    103c:	93 e0       	ldi	r25, 0x03	; 3
    103e:	6a d3       	rcall	.+1748   	; 0x1714 <sram_write_string>
		sram_push();
    1040:	ff d4       	rcall	.+2558   	; 0x1a40 <sram_push>
		while (right_button_flag == 0){
    1042:	80 91 a4 03 	lds	r24, 0x03A4
    1046:	81 11       	cpse	r24, r1
    1048:	0a c0       	rjmp	.+20     	; 0x105e <menu_calibrate_joystick+0xbe>
    104a:	8c ec       	ldi	r24, 0xCC	; 204
    104c:	94 e0       	ldi	r25, 0x04	; 4
    104e:	01 97       	sbiw	r24, 0x01	; 1
    1050:	f1 f7       	brne	.-4      	; 0x104e <menu_calibrate_joystick+0xae>
    1052:	00 c0       	rjmp	.+0      	; 0x1054 <menu_calibrate_joystick+0xb4>
    1054:	00 00       	nop
    1056:	80 91 a4 03 	lds	r24, 0x03A4
    105a:	88 23       	and	r24, r24
    105c:	b1 f3       	breq	.-20     	; 0x104a <menu_calibrate_joystick+0xaa>
			_delay_ms(1);
		}
		right_button_flag = 0;
    105e:	10 92 a4 03 	sts	0x03A4, r1
    1062:	22 96       	adiw	r28, 0x02	; 2
	
	oled_clear_line(0);
	strcpy_P(temp,calibrate_text_1);
	sram_write_string(temp);
	
	for (uint8_t i = 0; i < 4; i++){
    1064:	c0 17       	cp	r28, r16
    1066:	d1 07       	cpc	r29, r17
    1068:	f1 f6       	brne	.-68     	; 0x1026 <menu_calibrate_joystick+0x86>
		while (right_button_flag == 0){
			_delay_ms(1);
		}
		right_button_flag = 0;
	}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	08 95       	ret

00001074 <menu_function_selected>:
void menu_right_button_flag(void){
	right_button_flag = 1;
}

void menu_function_selected(void){
	if(current_selected == &option_1){
    1074:	80 91 ac 03 	lds	r24, 0x03AC
    1078:	90 91 ad 03 	lds	r25, 0x03AD
    107c:	23 e0       	ldi	r18, 0x03	; 3
    107e:	82 3d       	cpi	r24, 0xD2	; 210
    1080:	92 07       	cpc	r25, r18
    1082:	11 f4       	brne	.+4      	; 0x1088 <menu_function_selected+0x14>
		menu_set_contrast();
    1084:	5f cf       	rjmp	.-322    	; 0xf44 <menu_set_contrast>
    1086:	08 95       	ret
	}else if(current_selected == &debug_1){
    1088:	80 5f       	subi	r24, 0xF0	; 240
    108a:	93 40       	sbci	r25, 0x03	; 3
    108c:	09 f4       	brne	.+2      	; 0x1090 <menu_function_selected+0x1c>
		menu_calibrate_joystick();
    108e:	88 cf       	rjmp	.-240    	; 0xfa0 <menu_calibrate_joystick>
    1090:	08 95       	ret

00001092 <navigate_menu>:
	}
	else if (joystick_reading_y < -NAVIGATION_TRHESHOLD){
		current_selected = current_selected->ptr_sib_down;
	}
	*/
	int joystick_reading = read_control_input('Y');
    1092:	89 e5       	ldi	r24, 0x59	; 89
    1094:	ab dd       	rcall	.-1194   	; 0xbec <read_control_input>
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
    1096:	87 34       	cpi	r24, 0x47	; 71
    1098:	91 05       	cpc	r25, r1
    109a:	4c f1       	brlt	.+82     	; 0x10ee <navigate_menu+0x5c>
    109c:	20 91 a1 03 	lds	r18, 0x03A1
    10a0:	30 91 a2 03 	lds	r19, 0x03A2
    10a4:	27 34       	cpi	r18, 0x47	; 71
    10a6:	31 05       	cpc	r19, r1
    10a8:	14 f5       	brge	.+68     	; 0x10ee <navigate_menu+0x5c>
		for(int i = 0; i < current_selected->n_sib-1; i++){
    10aa:	e0 91 ac 03 	lds	r30, 0x03AC
    10ae:	f0 91 ad 03 	lds	r31, 0x03AD
    10b2:	82 81       	ldd	r24, Z+2	; 0x02
    10b4:	93 81       	ldd	r25, Z+3	; 0x03
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	18 16       	cp	r1, r24
    10ba:	19 06       	cpc	r1, r25
    10bc:	8c f4       	brge	.+34     	; 0x10e0 <navigate_menu+0x4e>
    10be:	80 e0       	ldi	r24, 0x00	; 0
    10c0:	90 e0       	ldi	r25, 0x00	; 0
			current_selected = current_selected->ptr_sib_down;
    10c2:	04 80       	ldd	r0, Z+4	; 0x04
    10c4:	f5 81       	ldd	r31, Z+5	; 0x05
    10c6:	e0 2d       	mov	r30, r0
	*/
	int joystick_reading = read_control_input('Y');
	
	// Navigate up.
	if(joystick_reading > NAVIGATION_TRHESHOLD && y_lock <= NAVIGATION_TRHESHOLD){
		for(int i = 0; i < current_selected->n_sib-1; i++){
    10c8:	01 96       	adiw	r24, 0x01	; 1
    10ca:	22 81       	ldd	r18, Z+2	; 0x02
    10cc:	33 81       	ldd	r19, Z+3	; 0x03
    10ce:	21 50       	subi	r18, 0x01	; 1
    10d0:	31 09       	sbc	r19, r1
    10d2:	82 17       	cp	r24, r18
    10d4:	93 07       	cpc	r25, r19
    10d6:	ac f3       	brlt	.-22     	; 0x10c2 <navigate_menu+0x30>
    10d8:	f0 93 ad 03 	sts	0x03AD, r31
    10dc:	e0 93 ac 03 	sts	0x03AC, r30
			current_selected = current_selected->ptr_sib_down;
		}
		y_lock = RANGE_MAX;
    10e0:	84 e6       	ldi	r24, 0x64	; 100
    10e2:	90 e0       	ldi	r25, 0x00	; 0
    10e4:	90 93 a2 03 	sts	0x03A2, r25
    10e8:	80 93 a1 03 	sts	0x03A1, r24
    10ec:	25 c0       	rjmp	.+74     	; 0x1138 <navigate_menu+0xa6>
		
	}else if (joystick_reading < -NAVIGATION_TRHESHOLD && y_lock >= -NAVIGATION_TRHESHOLD)
    10ee:	8a 3b       	cpi	r24, 0xBA	; 186
    10f0:	2f ef       	ldi	r18, 0xFF	; 255
    10f2:	92 07       	cpc	r25, r18
    10f4:	c4 f4       	brge	.+48     	; 0x1126 <navigate_menu+0x94>
    10f6:	20 91 a1 03 	lds	r18, 0x03A1
    10fa:	30 91 a2 03 	lds	r19, 0x03A2
    10fe:	2a 3b       	cpi	r18, 0xBA	; 186
    1100:	3f 4f       	sbci	r19, 0xFF	; 255
    1102:	8c f0       	brlt	.+34     	; 0x1126 <navigate_menu+0x94>
	{
		current_selected = current_selected->ptr_sib_down;
    1104:	e0 91 ac 03 	lds	r30, 0x03AC
    1108:	f0 91 ad 03 	lds	r31, 0x03AD
    110c:	84 81       	ldd	r24, Z+4	; 0x04
    110e:	95 81       	ldd	r25, Z+5	; 0x05
    1110:	90 93 ad 03 	sts	0x03AD, r25
    1114:	80 93 ac 03 	sts	0x03AC, r24
		y_lock = RANGE_MIN;
    1118:	8c e9       	ldi	r24, 0x9C	; 156
    111a:	9f ef       	ldi	r25, 0xFF	; 255
    111c:	90 93 a2 03 	sts	0x03A2, r25
    1120:	80 93 a1 03 	sts	0x03A1, r24
    1124:	09 c0       	rjmp	.+18     	; 0x1138 <navigate_menu+0xa6>
		// No navigation input on y-axis.
	}else if(joystick_reading < NAVIGATION_TRHESHOLD && joystick_reading > -NAVIGATION_TRHESHOLD){
    1126:	8b 5b       	subi	r24, 0xBB	; 187
    1128:	9f 4f       	sbci	r25, 0xFF	; 255
    112a:	8b 38       	cpi	r24, 0x8B	; 139
    112c:	91 05       	cpc	r25, r1
    112e:	20 f4       	brcc	.+8      	; 0x1138 <navigate_menu+0xa6>
		y_lock = 0;
    1130:	10 92 a2 03 	sts	0x03A2, r1
    1134:	10 92 a1 03 	sts	0x03A1, r1
	}
	if (right_button_flag == 1)
    1138:	80 91 a4 03 	lds	r24, 0x03A4
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	a9 f4       	brne	.+42     	; 0x116a <navigate_menu+0xd8>
	{
		right_button_flag = 0;
    1140:	10 92 a4 03 	sts	0x03A4, r1
		if(current_selected->ptr_child != NULL){
    1144:	e0 91 ac 03 	lds	r30, 0x03AC
    1148:	f0 91 ad 03 	lds	r31, 0x03AD
    114c:	86 81       	ldd	r24, Z+6	; 0x06
    114e:	97 81       	ldd	r25, Z+7	; 0x07
    1150:	00 97       	sbiw	r24, 0x00	; 0
    1152:	49 f0       	breq	.+18     	; 0x1166 <navigate_menu+0xd4>
			current_head = current_selected->ptr_child;
    1154:	90 93 ab 03 	sts	0x03AB, r25
    1158:	80 93 aa 03 	sts	0x03AA, r24
			current_selected = current_selected->ptr_child;
    115c:	90 93 ad 03 	sts	0x03AD, r25
    1160:	80 93 ac 03 	sts	0x03AC, r24
    1164:	1e c0       	rjmp	.+60     	; 0x11a2 <navigate_menu+0x110>
		}else{
			menu_function_selected();
    1166:	86 df       	rcall	.-244    	; 0x1074 <menu_function_selected>
    1168:	1c c0       	rjmp	.+56     	; 0x11a2 <navigate_menu+0x110>
		}
	}else if (left_button_flag == 1){
    116a:	80 91 a3 03 	lds	r24, 0x03A3
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	c1 f4       	brne	.+48     	; 0x11a2 <navigate_menu+0x110>
		left_button_flag = 0;
    1172:	10 92 a3 03 	sts	0x03A3, r1
		if (current_selected->ptr_parent != NULL){
    1176:	e0 91 ac 03 	lds	r30, 0x03AC
    117a:	f0 91 ad 03 	lds	r31, 0x03AD
    117e:	80 85       	ldd	r24, Z+8	; 0x08
    1180:	91 85       	ldd	r25, Z+9	; 0x09
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	71 f0       	breq	.+28     	; 0x11a2 <navigate_menu+0x110>
			current_head = current_head->ptr_parent;
    1186:	e0 91 aa 03 	lds	r30, 0x03AA
    118a:	f0 91 ab 03 	lds	r31, 0x03AB
    118e:	20 85       	ldd	r18, Z+8	; 0x08
    1190:	31 85       	ldd	r19, Z+9	; 0x09
    1192:	30 93 ab 03 	sts	0x03AB, r19
    1196:	20 93 aa 03 	sts	0x03AA, r18
			current_selected = current_selected->ptr_parent;
    119a:	90 93 ad 03 	sts	0x03AD, r25
    119e:	80 93 ac 03 	sts	0x03AC, r24
		}
	}
	return 0;
	
}
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	08 95       	ret

000011a8 <menu_update>:
	// current_selected is the selected menu entry of the current menu.
	current_selected = &mainmenu_0;
	
}
int abc = 0;
void menu_update(void){
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
    11b0:	70 df       	rcall	.-288    	; 0x1092 <navigate_menu>
    11b2:	89 2b       	or	r24, r25
    11b4:	09 f0       	breq	.+2      	; 0x11b8 <menu_update+0x10>
    11b6:	44 c0       	rjmp	.+136    	; 0x1240 <menu_update+0x98>
    11b8:	c0 e0       	ldi	r28, 0x00	; 0
		
	}else{
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
    11ba:	8c 2f       	mov	r24, r28
    11bc:	68 d4       	rcall	.+2256   	; 0x1a8e <sram_clear_line>
    11be:	cf 5f       	subi	r28, 0xFF	; 255
int abc = 0;
void menu_update(void){
	if(navigate_menu()){ //if something is selected this is true, else the screen updates
		
	}else{
		for (int j = 0; j < 7; j++)
    11c0:	c7 30       	cpi	r28, 0x07	; 7
    11c2:	d9 f7       	brne	.-10     	; 0x11ba <menu_update+0x12>
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
    11c4:	e0 91 aa 03 	lds	r30, 0x03AA
    11c8:	f0 91 ab 03 	lds	r31, 0x03AB
    11cc:	82 81       	ldd	r24, Z+2	; 0x02
    11ce:	93 81       	ldd	r25, Z+3	; 0x03
    11d0:	18 16       	cp	r1, r24
    11d2:	19 06       	cpc	r1, r25
    11d4:	ac f5       	brge	.+106    	; 0x1240 <menu_update+0x98>
    11d6:	c0 e0       	ldi	r28, 0x00	; 0
    11d8:	d0 e0       	ldi	r29, 0x00	; 0
			oled_goto_column(0);
			strcpy_P(temp,current_head->title);
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    11da:	10 e8       	ldi	r17, 0x80	; 128
    11dc:	01 e8       	ldi	r16, 0x81	; 129
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
		{
			oled_goto_line(i);
    11de:	ce 01       	movw	r24, r28
    11e0:	7a d1       	rcall	.+756    	; 0x14d6 <oled_goto_line>
			oled_goto_column(0);
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	98 d1       	rcall	.+816    	; 0x1518 <oled_goto_column>
			strcpy_P(temp,current_head->title);
    11e8:	e0 91 aa 03 	lds	r30, 0x03AA
    11ec:	f0 91 ab 03 	lds	r31, 0x03AB
    11f0:	60 81       	ld	r22, Z
    11f2:	71 81       	ldd	r23, Z+1	; 0x01
    11f4:	88 eb       	ldi	r24, 0xB8	; 184
    11f6:	93 e0       	ldi	r25, 0x03	; 3
    11f8:	c1 d7       	rcall	.+3970   	; 0x217c <strcpy_P>
			
			
			//oled_print_char(128 + (current_head == current_selected));
			sram_write_char(128 + (current_head == current_selected));
    11fa:	20 91 aa 03 	lds	r18, 0x03AA
    11fe:	30 91 ab 03 	lds	r19, 0x03AB
    1202:	80 91 ac 03 	lds	r24, 0x03AC
    1206:	90 91 ad 03 	lds	r25, 0x03AD
    120a:	28 17       	cp	r18, r24
    120c:	39 07       	cpc	r19, r25
    120e:	11 f4       	brne	.+4      	; 0x1214 <menu_update+0x6c>
    1210:	80 2f       	mov	r24, r16
    1212:	01 c0       	rjmp	.+2      	; 0x1216 <menu_update+0x6e>
    1214:	81 2f       	mov	r24, r17
    1216:	32 d2       	rcall	.+1124   	; 0x167c <sram_write_char>
			//oled_print(temp);
			sram_write_string(temp);
    1218:	88 eb       	ldi	r24, 0xB8	; 184
    121a:	93 e0       	ldi	r25, 0x03	; 3
    121c:	7b d2       	rcall	.+1270   	; 0x1714 <sram_write_string>
			current_head = current_head->ptr_sib_down;
    121e:	e0 91 aa 03 	lds	r30, 0x03AA
    1222:	f0 91 ab 03 	lds	r31, 0x03AB
    1226:	04 80       	ldd	r0, Z+4	; 0x04
    1228:	f5 81       	ldd	r31, Z+5	; 0x05
    122a:	e0 2d       	mov	r30, r0
    122c:	f0 93 ab 03 	sts	0x03AB, r31
    1230:	e0 93 aa 03 	sts	0x03AA, r30
		for (int j = 0; j < 7; j++)
		{
			sram_clear_line(j);
		}
		
		for (int i = 0; i < current_head->n_sib; i++)
    1234:	21 96       	adiw	r28, 0x01	; 1
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	c8 17       	cp	r28, r24
    123c:	d9 07       	cpc	r29, r25
    123e:	7c f2       	brlt	.-98     	; 0x11de <menu_update+0x36>
			current_head = current_head->ptr_sib_down;
		}
		
	}
	
	if(timer_check_flag()){//a timer with frequency of 60Hz ensures a framerate of 60Hz
    1240:	0c d5       	rcall	.+2584   	; 0x1c5a <timer_check_flag>
    1242:	88 23       	and	r24, r24
    1244:	29 f0       	breq	.+10     	; 0x1250 <menu_update+0xa8>
		sram_push();
    1246:	fc d3       	rcall	.+2040   	; 0x1a40 <sram_push>
		timer_disable_flag();
    1248:	0b d5       	rcall	.+2582   	; 0x1c60 <timer_disable_flag>
		sram_scroll_data(7,1);
    124a:	61 e0       	ldi	r22, 0x01	; 1
    124c:	87 e0       	ldi	r24, 0x07	; 7
    124e:	47 d4       	rcall	.+2190   	; 0x1ade <sram_scroll_data>
	}
}
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	1f 91       	pop	r17
    1256:	0f 91       	pop	r16
    1258:	08 95       	ret

0000125a <bootscreen>:


void bootscreen(void){
	int x = 24;
	int y = 61;
	sram_draw_line(x,y,x-15,y-60);//letter G
    125a:	21 e0       	ldi	r18, 0x01	; 1
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	49 e0       	ldi	r20, 0x09	; 9
    1260:	50 e0       	ldi	r21, 0x00	; 0
    1262:	6d e3       	ldi	r22, 0x3D	; 61
    1264:	70 e0       	ldi	r23, 0x00	; 0
    1266:	88 e1       	ldi	r24, 0x18	; 24
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	ad d2       	rcall	.+1370   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
    126c:	21 e0       	ldi	r18, 0x01	; 1
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	47 e2       	ldi	r20, 0x27	; 39
    1272:	50 e0       	ldi	r21, 0x00	; 0
    1274:	61 e0       	ldi	r22, 0x01	; 1
    1276:	70 e0       	ldi	r23, 0x00	; 0
    1278:	89 e0       	ldi	r24, 0x09	; 9
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a4 d2       	rcall	.+1352   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x+15,y-60,x+12,y-48);
    127e:	2d e0       	ldi	r18, 0x0D	; 13
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	44 e2       	ldi	r20, 0x24	; 36
    1284:	50 e0       	ldi	r21, 0x00	; 0
    1286:	61 e0       	ldi	r22, 0x01	; 1
    1288:	70 e0       	ldi	r23, 0x00	; 0
    128a:	87 e2       	ldi	r24, 0x27	; 39
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	9b d2       	rcall	.+1334   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x+12,y-48,x-6,y-48);
    1290:	2d e0       	ldi	r18, 0x0D	; 13
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	42 e1       	ldi	r20, 0x12	; 18
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	6d e0       	ldi	r22, 0x0D	; 13
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	84 e2       	ldi	r24, 0x24	; 36
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	92 d2       	rcall	.+1316   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-6,y-48,x,y-24);
    12a2:	25 e2       	ldi	r18, 0x25	; 37
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	48 e1       	ldi	r20, 0x18	; 24
    12a8:	50 e0       	ldi	r21, 0x00	; 0
    12aa:	6d e0       	ldi	r22, 0x0D	; 13
    12ac:	70 e0       	ldi	r23, 0x00	; 0
    12ae:	82 e1       	ldi	r24, 0x12	; 18
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	89 d2       	rcall	.+1298   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x,y-24,x+3,y-36);
    12b4:	29 e1       	ldi	r18, 0x19	; 25
    12b6:	30 e0       	ldi	r19, 0x00	; 0
    12b8:	4b e1       	ldi	r20, 0x1B	; 27
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	65 e2       	ldi	r22, 0x25	; 37
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	88 e1       	ldi	r24, 0x18	; 24
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	80 d2       	rcall	.+1280   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x+3,y-36,x+9,y-36);
    12c6:	29 e1       	ldi	r18, 0x19	; 25
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	41 e2       	ldi	r20, 0x21	; 33
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	69 e1       	ldi	r22, 0x19	; 25
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	8b e1       	ldi	r24, 0x1B	; 27
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	77 d2       	rcall	.+1262   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x+9,y-36,x,y);//end of letter
    12d8:	2d e3       	ldi	r18, 0x3D	; 61
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	48 e1       	ldi	r20, 0x18	; 24
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	69 e1       	ldi	r22, 0x19	; 25
    12e2:	70 e0       	ldi	r23, 0x00	; 0
    12e4:	81 e2       	ldi	r24, 0x21	; 33
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	6e d2       	rcall	.+1244   	; 0x17c6 <sram_draw_line>
	
	
	
	x += 40;
	sram_draw_rectangle(x-5,y,x+5,y-60);
    12ea:	21 e0       	ldi	r18, 0x01	; 1
    12ec:	45 e4       	ldi	r20, 0x45	; 69
    12ee:	6d e3       	ldi	r22, 0x3D	; 61
    12f0:	8b e3       	ldi	r24, 0x3B	; 59
    12f2:	72 d4       	rcall	.+2276   	; 0x1bd8 <sram_draw_rectangle>

	x += 40;
	sram_draw_line(x,y,x+15,y-60);//number 7
    12f4:	21 e0       	ldi	r18, 0x01	; 1
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	47 e7       	ldi	r20, 0x77	; 119
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	6d e3       	ldi	r22, 0x3D	; 61
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	88 e6       	ldi	r24, 0x68	; 104
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	60 d2       	rcall	.+1216   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-15,y-60,x+15,y-60);
    1306:	21 e0       	ldi	r18, 0x01	; 1
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	47 e7       	ldi	r20, 0x77	; 119
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	61 e0       	ldi	r22, 0x01	; 1
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	89 e5       	ldi	r24, 0x59	; 89
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	57 d2       	rcall	.+1198   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-15,y-60,x-12,y-48);
    1318:	2d e0       	ldi	r18, 0x0D	; 13
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	4c e5       	ldi	r20, 0x5C	; 92
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	61 e0       	ldi	r22, 0x01	; 1
    1322:	70 e0       	ldi	r23, 0x00	; 0
    1324:	89 e5       	ldi	r24, 0x59	; 89
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	4e d2       	rcall	.+1180   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-12,y-48,x+6,y-48);
    132a:	2d e0       	ldi	r18, 0x0D	; 13
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	4e e6       	ldi	r20, 0x6E	; 110
    1330:	50 e0       	ldi	r21, 0x00	; 0
    1332:	6d e0       	ldi	r22, 0x0D	; 13
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	8c e5       	ldi	r24, 0x5C	; 92
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	45 d2       	rcall	.+1162   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x+6,y-48,x+3,y-36);
    133c:	29 e1       	ldi	r18, 0x19	; 25
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	4b e6       	ldi	r20, 0x6B	; 107
    1342:	50 e0       	ldi	r21, 0x00	; 0
    1344:	6d e0       	ldi	r22, 0x0D	; 13
    1346:	70 e0       	ldi	r23, 0x00	; 0
    1348:	8e e6       	ldi	r24, 0x6E	; 110
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	3c d2       	rcall	.+1144   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x+3,y-36,x-9,y-36);
    134e:	29 e1       	ldi	r18, 0x19	; 25
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	4f e5       	ldi	r20, 0x5F	; 95
    1354:	50 e0       	ldi	r21, 0x00	; 0
    1356:	69 e1       	ldi	r22, 0x19	; 25
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	8b e6       	ldi	r24, 0x6B	; 107
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	33 d2       	rcall	.+1126   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-9,y-36,x-6,y-24);
    1360:	25 e2       	ldi	r18, 0x25	; 37
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	42 e6       	ldi	r20, 0x62	; 98
    1366:	50 e0       	ldi	r21, 0x00	; 0
    1368:	69 e1       	ldi	r22, 0x19	; 25
    136a:	70 e0       	ldi	r23, 0x00	; 0
    136c:	8f e5       	ldi	r24, 0x5F	; 95
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	2a d2       	rcall	.+1108   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-6,y-24,x,y-24);
    1372:	25 e2       	ldi	r18, 0x25	; 37
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	48 e6       	ldi	r20, 0x68	; 104
    1378:	50 e0       	ldi	r21, 0x00	; 0
    137a:	65 e2       	ldi	r22, 0x25	; 37
    137c:	70 e0       	ldi	r23, 0x00	; 0
    137e:	82 e6       	ldi	r24, 0x62	; 98
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	21 d2       	rcall	.+1090   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x,y-24,x-3,y-12);
    1384:	21 e3       	ldi	r18, 0x31	; 49
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	45 e6       	ldi	r20, 0x65	; 101
    138a:	50 e0       	ldi	r21, 0x00	; 0
    138c:	65 e2       	ldi	r22, 0x25	; 37
    138e:	70 e0       	ldi	r23, 0x00	; 0
    1390:	88 e6       	ldi	r24, 0x68	; 104
    1392:	90 e0       	ldi	r25, 0x00	; 0
    1394:	18 d2       	rcall	.+1072   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x-3,y-12,x,y);//end of number
    1396:	2d e3       	ldi	r18, 0x3D	; 61
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	48 e6       	ldi	r20, 0x68	; 104
    139c:	50 e0       	ldi	r21, 0x00	; 0
    139e:	61 e3       	ldi	r22, 0x31	; 49
    13a0:	70 e0       	ldi	r23, 0x00	; 0
    13a2:	85 e6       	ldi	r24, 0x65	; 101
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0f d2       	rcall	.+1054   	; 0x17c6 <sram_draw_line>
	sram_push();
    13a8:	4b d3       	rcall	.+1686   	; 0x1a40 <sram_push>
    13aa:	2f ef       	ldi	r18, 0xFF	; 255
    13ac:	8f ef       	ldi	r24, 0xFF	; 255
    13ae:	9e e0       	ldi	r25, 0x0E	; 14
    13b0:	21 50       	subi	r18, 0x01	; 1
    13b2:	80 40       	sbci	r24, 0x00	; 0
    13b4:	90 40       	sbci	r25, 0x00	; 0
    13b6:	e1 f7       	brne	.-8      	; 0x13b0 <bootscreen+0x156>
    13b8:	00 c0       	rjmp	.+0      	; 0x13ba <bootscreen+0x160>
    13ba:	00 00       	nop
    13bc:	08 95       	ret

000013be <init_all>:
    }
    
}

void init_all(void){
	cli();
    13be:	f8 94       	cli
	init_UART();
    13c0:	8d da       	rcall	.-2790   	; 0x8dc <init_UART>
	
	printf("LOADING g17_%s %s %s\nINITIALIZING...\n\nUART successfully initialized\n\n", VERSION,__DATE__,__TIME__);
    13c2:	89 e1       	ldi	r24, 0x19	; 25
    13c4:	93 e0       	ldi	r25, 0x03	; 3
    13c6:	9f 93       	push	r25
    13c8:	8f 93       	push	r24
    13ca:	82 e2       	ldi	r24, 0x22	; 34
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	9f 93       	push	r25
    13d0:	8f 93       	push	r24
    13d2:	8e e2       	ldi	r24, 0x2E	; 46
    13d4:	93 e0       	ldi	r25, 0x03	; 3
    13d6:	9f 93       	push	r25
    13d8:	8f 93       	push	r24
    13da:	83 e3       	ldi	r24, 0x33	; 51
    13dc:	93 e0       	ldi	r25, 0x03	; 3
    13de:	9f 93       	push	r25
    13e0:	8f 93       	push	r24
    13e2:	1d d7       	rcall	.+3642   	; 0x221e <printf>
	
	BIT_ON(MCUCR,SRE); //SET THIS IN SOME INITALIZE FUNBCTION
    13e4:	85 b7       	in	r24, 0x35	; 53
    13e6:	80 68       	ori	r24, 0x80	; 128
    13e8:	85 bf       	out	0x35, r24	; 53
	BIT_ON(SFIOR,XMM2);//HVORFOR GJORDE DE DETTE I OLED?
    13ea:	80 b7       	in	r24, 0x30	; 48
    13ec:	80 62       	ori	r24, 0x20	; 32
    13ee:	80 bf       	out	0x30, r24	; 48

	oled_ini();
    13f0:	ba d0       	rcall	.+372    	; 0x1566 <oled_ini>
	sram_init();
    13f2:	2f d3       	rcall	.+1630   	; 0x1a52 <sram_init>
	bootscreen();
    13f4:	32 df       	rcall	.-412    	; 0x125a <bootscreen>
	sram_push();
    13f6:	24 d3       	rcall	.+1608   	; 0x1a40 <sram_push>
	
	initialize_menu();
    13f8:	ef dc       	rcall	.-1570   	; 0xdd8 <initialize_menu>
	
	initialize_control_input();
    13fa:	9c dc       	rcall	.-1736   	; 0xd34 <initialize_control_input>
	
	initalize_interrupts();
    13fc:	a1 da       	rcall	.-2750   	; 0x940 <initalize_interrupts>
	
	initialize_timer(FPS);//60 FPS
    13fe:	8c e3       	ldi	r24, 0x3C	; 60
    1400:	18 d4       	rcall	.+2096   	; 0x1c32 <initialize_timer>
	
	CAN_initialize();
    1402:	aa d8       	rcall	.-3756   	; 0x558 <CAN_initialize>
	
	sei();//enable interrupts
    1404:	78 94       	sei
    1406:	8d b7       	in	r24, 0x3d	; 61
    1408:	9e b7       	in	r25, 0x3e	; 62
    140a:	08 96       	adiw	r24, 0x08	; 8
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	9e bf       	out	0x3e, r25	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	8d bf       	out	0x3d, r24	; 61
    1416:	08 95       	ret

00001418 <main>:

void init_all(void);
void bootscreen(void);

int main(void)
{
    1418:	cf 93       	push	r28
    141a:	df 93       	push	r29
    141c:	cd b7       	in	r28, 0x3d	; 61
    141e:	de b7       	in	r29, 0x3e	; 62
    1420:	28 97       	sbiw	r28, 0x08	; 8
    1422:	0f b6       	in	r0, 0x3f	; 63
    1424:	f8 94       	cli
    1426:	de bf       	out	0x3e, r29	; 62
    1428:	0f be       	out	0x3f, r0	; 63
    142a:	cd bf       	out	0x3d, r28	; 61
	init_all();
    142c:	c8 df       	rcall	.-112    	; 0x13be <init_all>
	printf("test");
    142e:	89 e7       	ldi	r24, 0x79	; 121
    1430:	93 e0       	ldi	r25, 0x03	; 3
    1432:	9f 93       	push	r25
    1434:	8f 93       	push	r24
    1436:	f3 d6       	rcall	.+3558   	; 0x221e <printf>
	int8_t temp[8] = {1,2,3,4,5,6,7,8};
    1438:	88 e0       	ldi	r24, 0x08	; 8
    143a:	ec e0       	ldi	r30, 0x0C	; 12
    143c:	f1 e0       	ldi	r31, 0x01	; 1
    143e:	de 01       	movw	r26, r28
    1440:	11 96       	adiw	r26, 0x01	; 1
    1442:	01 90       	ld	r0, Z+
    1444:	0d 92       	st	X+, r0
    1446:	8a 95       	dec	r24
    1448:	e1 f7       	brne	.-8      	; 0x1442 <main+0x2a>
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    uint8_t sendCAN = 1;

    while(1){
	    if(sendCAN){
		    
		    CAN_message_send(data,0);
    144e:	60 e0       	ldi	r22, 0x00	; 0
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	bf d9       	rcall	.-3202   	; 0x7d4 <CAN_message_send>
			data[7]--;
    1456:	88 85       	ldd	r24, Y+8	; 0x08
    1458:	81 50       	subi	r24, 0x01	; 1
    145a:	88 87       	std	Y+8, r24	; 0x08
    145c:	2f ef       	ldi	r18, 0xFF	; 255
    145e:	8f ef       	ldi	r24, 0xFF	; 255
    1460:	9e e0       	ldi	r25, 0x0E	; 14
    1462:	21 50       	subi	r18, 0x01	; 1
    1464:	80 40       	sbci	r24, 0x00	; 0
    1466:	90 40       	sbci	r25, 0x00	; 0
    1468:	e1 f7       	brne	.-8      	; 0x1462 <main+0x4a>
    146a:	00 c0       	rjmp	.+0      	; 0x146c <main+0x54>
    146c:	00 00       	nop
			_delay_ms(1000);
	    }
	    
	    
	    if(~sendCAN){
		    CAN_data_receive();
    146e:	d8 d8       	rcall	.-3664   	; 0x620 <CAN_data_receive>
	    }
		menu_update();
    1470:	9b de       	rcall	.-714    	; 0x11a8 <menu_update>
    1472:	ed cf       	rjmp	.-38     	; 0x144e <main+0x36>

00001474 <write_c>:

void sram_draw_triangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2){
	sram_draw_line(x0,y0,x1,y1);
	sram_draw_line(x1,y1,x2,y2);
	sram_draw_line(x2,y2,x0,y0);
}
    1474:	e0 91 0a 01 	lds	r30, 0x010A
    1478:	f0 91 0b 01 	lds	r31, 0x010B
    147c:	80 83       	st	Z, r24
    147e:	08 95       	ret

00001480 <oled_home>:
    1480:	10 92 a9 03 	sts	0x03A9, r1
    1484:	10 92 a8 03 	sts	0x03A8, r1
    1488:	10 92 a7 03 	sts	0x03A7, r1
    148c:	10 92 a6 03 	sts	0x03A6, r1
    1490:	e0 91 0a 01 	lds	r30, 0x010A
    1494:	f0 91 0b 01 	lds	r31, 0x010B
    1498:	81 e2       	ldi	r24, 0x21	; 33
    149a:	80 83       	st	Z, r24
    149c:	e0 91 0a 01 	lds	r30, 0x010A
    14a0:	f0 91 0b 01 	lds	r31, 0x010B
    14a4:	10 82       	st	Z, r1
    14a6:	e0 91 0a 01 	lds	r30, 0x010A
    14aa:	f0 91 0b 01 	lds	r31, 0x010B
    14ae:	8f e7       	ldi	r24, 0x7F	; 127
    14b0:	80 83       	st	Z, r24
    14b2:	e0 91 0a 01 	lds	r30, 0x010A
    14b6:	f0 91 0b 01 	lds	r31, 0x010B
    14ba:	82 e2       	ldi	r24, 0x22	; 34
    14bc:	80 83       	st	Z, r24
    14be:	e0 91 0a 01 	lds	r30, 0x010A
    14c2:	f0 91 0b 01 	lds	r31, 0x010B
    14c6:	10 82       	st	Z, r1
    14c8:	e0 91 0a 01 	lds	r30, 0x010A
    14cc:	f0 91 0b 01 	lds	r31, 0x010B
    14d0:	87 e0       	ldi	r24, 0x07	; 7
    14d2:	80 83       	st	Z, r24
    14d4:	08 95       	ret

000014d6 <oled_goto_line>:
    14d6:	cf 93       	push	r28
    14d8:	df 93       	push	r29
    14da:	ec 01       	movw	r28, r24
    14dc:	d1 df       	rcall	.-94     	; 0x1480 <oled_home>
    14de:	d0 93 a9 03 	sts	0x03A9, r29
    14e2:	c0 93 a8 03 	sts	0x03A8, r28
    14e6:	ce 01       	movw	r24, r28
    14e8:	87 70       	andi	r24, 0x07	; 7
    14ea:	99 27       	eor	r25, r25
    14ec:	89 2b       	or	r24, r25
    14ee:	89 f0       	breq	.+34     	; 0x1512 <oled_goto_line+0x3c>
    14f0:	e0 91 0a 01 	lds	r30, 0x010A
    14f4:	f0 91 0b 01 	lds	r31, 0x010B
    14f8:	10 82       	st	Z, r1
    14fa:	e0 91 0a 01 	lds	r30, 0x010A
    14fe:	f0 91 0b 01 	lds	r31, 0x010B
    1502:	80 e1       	ldi	r24, 0x10	; 16
    1504:	80 83       	st	Z, r24
    1506:	c0 6b       	ori	r28, 0xB0	; 176
    1508:	e0 91 0a 01 	lds	r30, 0x010A
    150c:	f0 91 0b 01 	lds	r31, 0x010B
    1510:	c0 83       	st	Z, r28
    1512:	df 91       	pop	r29
    1514:	cf 91       	pop	r28
    1516:	08 95       	ret

00001518 <oled_goto_column>:
    1518:	8f 77       	andi	r24, 0x7F	; 127
    151a:	99 27       	eor	r25, r25
    151c:	90 93 a7 03 	sts	0x03A7, r25
    1520:	80 93 a6 03 	sts	0x03A6, r24
    1524:	08 95       	ret

00001526 <oled_clear_line>:
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	ec 01       	movw	r28, r24
    152c:	d4 df       	rcall	.-88     	; 0x14d6 <oled_goto_line>
    152e:	28 97       	sbiw	r28, 0x08	; 8
    1530:	50 f4       	brcc	.+20     	; 0x1546 <oled_clear_line+0x20>
    1532:	80 e8       	ldi	r24, 0x80	; 128
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	e0 91 08 01 	lds	r30, 0x0108
    153a:	f0 91 09 01 	lds	r31, 0x0109
    153e:	10 82       	st	Z, r1
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	00 97       	sbiw	r24, 0x00	; 0
    1544:	c1 f7       	brne	.-16     	; 0x1536 <oled_clear_line+0x10>
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	08 95       	ret

0000154c <oled_reset>:
    154c:	cf 93       	push	r28
    154e:	df 93       	push	r29
    1550:	c0 e0       	ldi	r28, 0x00	; 0
    1552:	d0 e0       	ldi	r29, 0x00	; 0
    1554:	ce 01       	movw	r24, r28
    1556:	e7 df       	rcall	.-50     	; 0x1526 <oled_clear_line>
    1558:	21 96       	adiw	r28, 0x01	; 1
    155a:	c8 30       	cpi	r28, 0x08	; 8
    155c:	d1 05       	cpc	r29, r1
    155e:	d1 f7       	brne	.-12     	; 0x1554 <oled_reset+0x8>
    1560:	df 91       	pop	r29
    1562:	cf 91       	pop	r28
    1564:	08 95       	ret

00001566 <oled_ini>:
    1566:	85 b7       	in	r24, 0x35	; 53
    1568:	80 68       	ori	r24, 0x80	; 128
    156a:	85 bf       	out	0x35, r24	; 53
    156c:	80 b7       	in	r24, 0x30	; 48
    156e:	80 62       	ori	r24, 0x20	; 32
    1570:	80 bf       	out	0x30, r24	; 48
    1572:	e0 91 0a 01 	lds	r30, 0x010A
    1576:	f0 91 0b 01 	lds	r31, 0x010B
    157a:	8e ea       	ldi	r24, 0xAE	; 174
    157c:	80 83       	st	Z, r24
    157e:	e0 91 0a 01 	lds	r30, 0x010A
    1582:	f0 91 0b 01 	lds	r31, 0x010B
    1586:	81 ea       	ldi	r24, 0xA1	; 161
    1588:	80 83       	st	Z, r24
    158a:	e0 91 0a 01 	lds	r30, 0x010A
    158e:	f0 91 0b 01 	lds	r31, 0x010B
    1592:	8a ed       	ldi	r24, 0xDA	; 218
    1594:	80 83       	st	Z, r24
    1596:	e0 91 0a 01 	lds	r30, 0x010A
    159a:	f0 91 0b 01 	lds	r31, 0x010B
    159e:	82 e1       	ldi	r24, 0x12	; 18
    15a0:	80 83       	st	Z, r24
    15a2:	e0 91 0a 01 	lds	r30, 0x010A
    15a6:	f0 91 0b 01 	lds	r31, 0x010B
    15aa:	88 ec       	ldi	r24, 0xC8	; 200
    15ac:	80 83       	st	Z, r24
    15ae:	e0 91 0a 01 	lds	r30, 0x010A
    15b2:	f0 91 0b 01 	lds	r31, 0x010B
    15b6:	88 ea       	ldi	r24, 0xA8	; 168
    15b8:	80 83       	st	Z, r24
    15ba:	e0 91 0a 01 	lds	r30, 0x010A
    15be:	f0 91 0b 01 	lds	r31, 0x010B
    15c2:	8f e3       	ldi	r24, 0x3F	; 63
    15c4:	80 83       	st	Z, r24
    15c6:	e0 91 0a 01 	lds	r30, 0x010A
    15ca:	f0 91 0b 01 	lds	r31, 0x010B
    15ce:	85 ed       	ldi	r24, 0xD5	; 213
    15d0:	80 83       	st	Z, r24
    15d2:	e0 91 0a 01 	lds	r30, 0x010A
    15d6:	f0 91 0b 01 	lds	r31, 0x010B
    15da:	80 e8       	ldi	r24, 0x80	; 128
    15dc:	80 83       	st	Z, r24
    15de:	e0 91 0a 01 	lds	r30, 0x010A
    15e2:	f0 91 0b 01 	lds	r31, 0x010B
    15e6:	81 e8       	ldi	r24, 0x81	; 129
    15e8:	80 83       	st	Z, r24
    15ea:	e0 91 0a 01 	lds	r30, 0x010A
    15ee:	f0 91 0b 01 	lds	r31, 0x010B
    15f2:	80 e5       	ldi	r24, 0x50	; 80
    15f4:	80 83       	st	Z, r24
    15f6:	e0 91 0a 01 	lds	r30, 0x010A
    15fa:	f0 91 0b 01 	lds	r31, 0x010B
    15fe:	89 ed       	ldi	r24, 0xD9	; 217
    1600:	80 83       	st	Z, r24
    1602:	e0 91 0a 01 	lds	r30, 0x010A
    1606:	f0 91 0b 01 	lds	r31, 0x010B
    160a:	81 e2       	ldi	r24, 0x21	; 33
    160c:	80 83       	st	Z, r24
    160e:	e0 91 0a 01 	lds	r30, 0x010A
    1612:	f0 91 0b 01 	lds	r31, 0x010B
    1616:	80 e2       	ldi	r24, 0x20	; 32
    1618:	80 83       	st	Z, r24
    161a:	e0 91 0a 01 	lds	r30, 0x010A
    161e:	f0 91 0b 01 	lds	r31, 0x010B
    1622:	10 82       	st	Z, r1
    1624:	e0 91 0a 01 	lds	r30, 0x010A
    1628:	f0 91 0b 01 	lds	r31, 0x010B
    162c:	8b ed       	ldi	r24, 0xDB	; 219
    162e:	80 83       	st	Z, r24
    1630:	e0 91 0a 01 	lds	r30, 0x010A
    1634:	f0 91 0b 01 	lds	r31, 0x010B
    1638:	80 e3       	ldi	r24, 0x30	; 48
    163a:	80 83       	st	Z, r24
    163c:	e0 91 0a 01 	lds	r30, 0x010A
    1640:	f0 91 0b 01 	lds	r31, 0x010B
    1644:	8d ea       	ldi	r24, 0xAD	; 173
    1646:	80 83       	st	Z, r24
    1648:	e0 91 0a 01 	lds	r30, 0x010A
    164c:	f0 91 0b 01 	lds	r31, 0x010B
    1650:	10 82       	st	Z, r1
    1652:	e0 91 0a 01 	lds	r30, 0x010A
    1656:	f0 91 0b 01 	lds	r31, 0x010B
    165a:	84 ea       	ldi	r24, 0xA4	; 164
    165c:	80 83       	st	Z, r24
    165e:	e0 91 0a 01 	lds	r30, 0x010A
    1662:	f0 91 0b 01 	lds	r31, 0x010B
    1666:	86 ea       	ldi	r24, 0xA6	; 166
    1668:	80 83       	st	Z, r24
    166a:	e0 91 0a 01 	lds	r30, 0x010A
    166e:	f0 91 0b 01 	lds	r31, 0x010B
    1672:	8f ea       	ldi	r24, 0xAF	; 175
    1674:	80 83       	st	Z, r24
    1676:	6a df       	rcall	.-300    	; 0x154c <oled_reset>
    1678:	03 cf       	rjmp	.-506    	; 0x1480 <oled_home>
    167a:	08 95       	ret

0000167c <sram_write_char>:
    167c:	8a 30       	cpi	r24, 0x0A	; 10
    167e:	89 f4       	brne	.+34     	; 0x16a2 <sram_write_char+0x26>
    1680:	80 91 a8 03 	lds	r24, 0x03A8
    1684:	90 91 a9 03 	lds	r25, 0x03A9
    1688:	01 96       	adiw	r24, 0x01	; 1
    168a:	87 70       	andi	r24, 0x07	; 7
    168c:	99 27       	eor	r25, r25
    168e:	90 93 a9 03 	sts	0x03A9, r25
    1692:	80 93 a8 03 	sts	0x03A8, r24
    1696:	10 92 a7 03 	sts	0x03A7, r1
    169a:	10 92 a6 03 	sts	0x03A6, r1
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	08 95       	ret
    16a2:	88 23       	and	r24, r24
    16a4:	99 f1       	breq	.+102    	; 0x170c <sram_write_char+0x90>
    16a6:	e8 2f       	mov	r30, r24
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	ee 0f       	add	r30, r30
    16ac:	ff 1f       	adc	r31, r31
    16ae:	ee 0f       	add	r30, r30
    16b0:	ff 1f       	adc	r31, r31
    16b2:	ee 0f       	add	r30, r30
    16b4:	ff 1f       	adc	r31, r31
    16b6:	ec 50       	subi	r30, 0x0C	; 12
    16b8:	f0 40       	sbci	r31, 0x00	; 0
    16ba:	80 e0       	ldi	r24, 0x00	; 0
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	a0 91 a8 03 	lds	r26, 0x03A8
    16c2:	b0 91 a9 03 	lds	r27, 0x03A9
    16c6:	b6 95       	lsr	r27
    16c8:	ba 2f       	mov	r27, r26
    16ca:	aa 27       	eor	r26, r26
    16cc:	b7 95       	ror	r27
    16ce:	a7 95       	ror	r26
    16d0:	20 91 a6 03 	lds	r18, 0x03A6
    16d4:	30 91 a7 03 	lds	r19, 0x03A7
    16d8:	a2 0f       	add	r26, r18
    16da:	b3 1f       	adc	r27, r19
    16dc:	20 91 06 01 	lds	r18, 0x0106
    16e0:	30 91 07 01 	lds	r19, 0x0107
    16e4:	a2 0f       	add	r26, r18
    16e6:	b3 1f       	adc	r27, r19
    16e8:	24 91       	lpm	r18, Z
    16ea:	2c 93       	st	X, r18
    16ec:	20 91 a6 03 	lds	r18, 0x03A6
    16f0:	30 91 a7 03 	lds	r19, 0x03A7
    16f4:	2f 5f       	subi	r18, 0xFF	; 255
    16f6:	3f 4f       	sbci	r19, 0xFF	; 255
    16f8:	30 93 a7 03 	sts	0x03A7, r19
    16fc:	20 93 a6 03 	sts	0x03A6, r18
    1700:	01 96       	adiw	r24, 0x01	; 1
    1702:	31 96       	adiw	r30, 0x01	; 1
    1704:	88 30       	cpi	r24, 0x08	; 8
    1706:	91 05       	cpc	r25, r1
    1708:	d1 f6       	brne	.-76     	; 0x16be <sram_write_char+0x42>
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <sram_write_char+0x94>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	08 95       	ret
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	08 95       	ret

00001714 <sram_write_string>:
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	ec 01       	movw	r28, r24
    171a:	89 91       	ld	r24, Y+
    171c:	af df       	rcall	.-162    	; 0x167c <sram_write_char>
    171e:	81 11       	cpse	r24, r1
    1720:	fc cf       	rjmp	.-8      	; 0x171a <sram_write_string+0x6>
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	08 95       	ret

00001728 <sram_write_or>:
    1728:	87 70       	andi	r24, 0x07	; 7
    172a:	90 78       	andi	r25, 0x80	; 128
    172c:	99 23       	and	r25, r25
    172e:	24 f4       	brge	.+8      	; 0x1738 <sram_write_or+0x10>
    1730:	01 97       	sbiw	r24, 0x01	; 1
    1732:	88 6f       	ori	r24, 0xF8	; 248
    1734:	9f 6f       	ori	r25, 0xFF	; 255
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	fc 01       	movw	r30, r24
    173a:	f6 95       	lsr	r31
    173c:	fe 2f       	mov	r31, r30
    173e:	ee 27       	eor	r30, r30
    1740:	f7 95       	ror	r31
    1742:	e7 95       	ror	r30
    1744:	6f 77       	andi	r22, 0x7F	; 127
    1746:	70 78       	andi	r23, 0x80	; 128
    1748:	77 23       	and	r23, r23
    174a:	34 f4       	brge	.+12     	; 0x1758 <sram_write_or+0x30>
    174c:	61 50       	subi	r22, 0x01	; 1
    174e:	71 09       	sbc	r23, r1
    1750:	60 68       	ori	r22, 0x80	; 128
    1752:	7f 6f       	ori	r23, 0xFF	; 255
    1754:	6f 5f       	subi	r22, 0xFF	; 255
    1756:	7f 4f       	sbci	r23, 0xFF	; 255
    1758:	6e 0f       	add	r22, r30
    175a:	7f 1f       	adc	r23, r31
    175c:	e0 91 06 01 	lds	r30, 0x0106
    1760:	f0 91 07 01 	lds	r31, 0x0107
    1764:	e6 0f       	add	r30, r22
    1766:	f7 1f       	adc	r31, r23
    1768:	80 81       	ld	r24, Z
    176a:	48 2b       	or	r20, r24
    176c:	40 83       	st	Z, r20
    176e:	08 95       	ret

00001770 <sram_pixel>:
    1770:	80 38       	cpi	r24, 0x80	; 128
    1772:	91 05       	cpc	r25, r1
    1774:	20 f5       	brcc	.+72     	; 0x17be <sram_pixel+0x4e>
    1776:	60 34       	cpi	r22, 0x40	; 64
    1778:	71 05       	cpc	r23, r1
    177a:	18 f5       	brcc	.+70     	; 0x17c2 <sram_pixel+0x52>
    177c:	9b 01       	movw	r18, r22
    177e:	27 70       	andi	r18, 0x07	; 7
    1780:	30 78       	andi	r19, 0x80	; 128
    1782:	33 23       	and	r19, r19
    1784:	34 f4       	brge	.+12     	; 0x1792 <sram_pixel+0x22>
    1786:	21 50       	subi	r18, 0x01	; 1
    1788:	31 09       	sbc	r19, r1
    178a:	28 6f       	ori	r18, 0xF8	; 248
    178c:	3f 6f       	ori	r19, 0xFF	; 255
    178e:	2f 5f       	subi	r18, 0xFF	; 255
    1790:	3f 4f       	sbci	r19, 0xFF	; 255
    1792:	41 e0       	ldi	r20, 0x01	; 1
    1794:	50 e0       	ldi	r21, 0x00	; 0
    1796:	02 c0       	rjmp	.+4      	; 0x179c <sram_pixel+0x2c>
    1798:	44 0f       	add	r20, r20
    179a:	55 1f       	adc	r21, r21
    179c:	2a 95       	dec	r18
    179e:	e2 f7       	brpl	.-8      	; 0x1798 <sram_pixel+0x28>
    17a0:	fb 01       	movw	r30, r22
    17a2:	ff 23       	and	r31, r31
    17a4:	0c f4       	brge	.+2      	; 0x17a8 <sram_pixel+0x38>
    17a6:	37 96       	adiw	r30, 0x07	; 7
    17a8:	bc 01       	movw	r22, r24
    17aa:	cf 01       	movw	r24, r30
    17ac:	95 95       	asr	r25
    17ae:	87 95       	ror	r24
    17b0:	95 95       	asr	r25
    17b2:	87 95       	ror	r24
    17b4:	95 95       	asr	r25
    17b6:	87 95       	ror	r24
    17b8:	b7 df       	rcall	.-146    	; 0x1728 <sram_write_or>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	08 95       	ret
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	08 95       	ret

000017c6 <sram_draw_line>:
    17c6:	2f 92       	push	r2
    17c8:	3f 92       	push	r3
    17ca:	4f 92       	push	r4
    17cc:	5f 92       	push	r5
    17ce:	6f 92       	push	r6
    17d0:	7f 92       	push	r7
    17d2:	8f 92       	push	r8
    17d4:	9f 92       	push	r9
    17d6:	af 92       	push	r10
    17d8:	bf 92       	push	r11
    17da:	cf 92       	push	r12
    17dc:	df 92       	push	r13
    17de:	ef 92       	push	r14
    17e0:	ff 92       	push	r15
    17e2:	0f 93       	push	r16
    17e4:	1f 93       	push	r17
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
    17ee:	60 97       	sbiw	r28, 0x10	; 16
    17f0:	0f b6       	in	r0, 0x3f	; 63
    17f2:	f8 94       	cli
    17f4:	de bf       	out	0x3e, r29	; 62
    17f6:	0f be       	out	0x3f, r0	; 63
    17f8:	cd bf       	out	0x3d, r28	; 61
    17fa:	1c 01       	movw	r2, r24
    17fc:	7a 87       	std	Y+10, r23	; 0x0a
    17fe:	69 87       	std	Y+9, r22	; 0x09
    1800:	5c 87       	std	Y+12, r21	; 0x0c
    1802:	4b 87       	std	Y+11, r20	; 0x0b
    1804:	38 87       	std	Y+8, r19	; 0x08
    1806:	2f 83       	std	Y+7, r18	; 0x07
    1808:	48 17       	cp	r20, r24
    180a:	59 07       	cpc	r21, r25
    180c:	0c f4       	brge	.+2      	; 0x1810 <sram_draw_line+0x4a>
    180e:	ae c0       	rjmp	.+348    	; 0x196c <sram_draw_line+0x1a6>
    1810:	84 17       	cp	r24, r20
    1812:	95 07       	cpc	r25, r21
    1814:	09 f4       	brne	.+2      	; 0x1818 <sram_draw_line+0x52>
    1816:	84 c0       	rjmp	.+264    	; 0x1920 <sram_draw_line+0x15a>
    1818:	b9 01       	movw	r22, r18
    181a:	29 85       	ldd	r18, Y+9	; 0x09
    181c:	3a 85       	ldd	r19, Y+10	; 0x0a
    181e:	62 1b       	sub	r22, r18
    1820:	73 0b       	sbc	r23, r19
    1822:	88 27       	eor	r24, r24
    1824:	77 fd       	sbrc	r23, 7
    1826:	80 95       	com	r24
    1828:	98 2f       	mov	r25, r24
    182a:	30 d3       	rcall	.+1632   	; 0x1e8c <__floatsisf>
    182c:	6b 01       	movw	r12, r22
    182e:	7c 01       	movw	r14, r24
    1830:	6b 85       	ldd	r22, Y+11	; 0x0b
    1832:	7c 85       	ldd	r23, Y+12	; 0x0c
    1834:	62 19       	sub	r22, r2
    1836:	73 09       	sbc	r23, r3
    1838:	88 27       	eor	r24, r24
    183a:	77 fd       	sbrc	r23, 7
    183c:	80 95       	com	r24
    183e:	98 2f       	mov	r25, r24
    1840:	25 d3       	rcall	.+1610   	; 0x1e8c <__floatsisf>
    1842:	9b 01       	movw	r18, r22
    1844:	ac 01       	movw	r20, r24
    1846:	c7 01       	movw	r24, r14
    1848:	b6 01       	movw	r22, r12
    184a:	85 d2       	rcall	.+1290   	; 0x1d56 <__divsf3>
    184c:	6b 83       	std	Y+3, r22	; 0x03
    184e:	7c 83       	std	Y+4, r23	; 0x04
    1850:	8d 83       	std	Y+5, r24	; 0x05
    1852:	9e 83       	std	Y+6, r25	; 0x06
    1854:	b1 01       	movw	r22, r2
    1856:	88 27       	eor	r24, r24
    1858:	77 fd       	sbrc	r23, 7
    185a:	80 95       	com	r24
    185c:	98 2f       	mov	r25, r24
    185e:	16 d3       	rcall	.+1580   	; 0x1e8c <__floatsisf>
    1860:	69 83       	std	Y+1, r22	; 0x01
    1862:	7a 83       	std	Y+2, r23	; 0x02
    1864:	e8 2e       	mov	r14, r24
    1866:	f9 2e       	mov	r15, r25
    1868:	eb 85       	ldd	r30, Y+11	; 0x0b
    186a:	fc 85       	ldd	r31, Y+12	; 0x0c
    186c:	bf 01       	movw	r22, r30
    186e:	88 27       	eor	r24, r24
    1870:	77 fd       	sbrc	r23, 7
    1872:	80 95       	com	r24
    1874:	98 2f       	mov	r25, r24
    1876:	0a d3       	rcall	.+1556   	; 0x1e8c <__floatsisf>
    1878:	4b 01       	movw	r8, r22
    187a:	5c 01       	movw	r10, r24
    187c:	9b 01       	movw	r18, r22
    187e:	ac 01       	movw	r20, r24
    1880:	69 81       	ldd	r22, Y+1	; 0x01
    1882:	7a 81       	ldd	r23, Y+2	; 0x02
    1884:	8e 2d       	mov	r24, r14
    1886:	9f 2d       	mov	r25, r15
    1888:	62 d2       	rcall	.+1220   	; 0x1d4e <__cmpsf2>
    188a:	88 23       	and	r24, r24
    188c:	0c f0       	brlt	.+2      	; 0x1890 <sram_draw_line+0xca>
    188e:	48 c0       	rjmp	.+144    	; 0x1920 <sram_draw_line+0x15a>
    1890:	19 81       	ldd	r17, Y+1	; 0x01
    1892:	ca 80       	ldd	r12, Y+2	; 0x02
    1894:	0f 2d       	mov	r16, r15
    1896:	29 85       	ldd	r18, Y+9	; 0x09
    1898:	3a 85       	ldd	r19, Y+10	; 0x0a
    189a:	29 01       	movw	r4, r18
    189c:	66 24       	eor	r6, r6
    189e:	57 fc       	sbrc	r5, 7
    18a0:	60 94       	com	r6
    18a2:	76 2c       	mov	r7, r6
    18a4:	3e 86       	std	Y+14, r3	; 0x0e
    18a6:	2d 86       	std	Y+13, r2	; 0x0d
    18a8:	2e 2c       	mov	r2, r14
    18aa:	3f 2c       	mov	r3, r15
    18ac:	c8 8a       	std	Y+16, r12	; 0x10
    18ae:	ef 86       	std	Y+15, r14	; 0x0f
    18b0:	29 81       	ldd	r18, Y+1	; 0x01
    18b2:	3a 81       	ldd	r19, Y+2	; 0x02
    18b4:	42 2d       	mov	r20, r2
    18b6:	53 2d       	mov	r21, r3
    18b8:	61 2f       	mov	r22, r17
    18ba:	78 89       	ldd	r23, Y+16	; 0x10
    18bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    18be:	90 2f       	mov	r25, r16
    18c0:	e1 d1       	rcall	.+962    	; 0x1c84 <__subsf3>
    18c2:	2b 81       	ldd	r18, Y+3	; 0x03
    18c4:	3c 81       	ldd	r19, Y+4	; 0x04
    18c6:	4d 81       	ldd	r20, Y+5	; 0x05
    18c8:	5e 81       	ldd	r21, Y+6	; 0x06
    18ca:	90 d3       	rcall	.+1824   	; 0x1fec <__mulsf3>
    18cc:	6b 01       	movw	r12, r22
    18ce:	7c 01       	movw	r14, r24
    18d0:	c3 01       	movw	r24, r6
    18d2:	b2 01       	movw	r22, r4
    18d4:	db d2       	rcall	.+1462   	; 0x1e8c <__floatsisf>
    18d6:	9b 01       	movw	r18, r22
    18d8:	ac 01       	movw	r20, r24
    18da:	c7 01       	movw	r24, r14
    18dc:	b6 01       	movw	r22, r12
    18de:	d3 d1       	rcall	.+934    	; 0x1c86 <__addsf3>
    18e0:	a2 d2       	rcall	.+1348   	; 0x1e26 <__fixsfsi>
    18e2:	6b 01       	movw	r12, r22
    18e4:	7c 01       	movw	r14, r24
    18e6:	61 2f       	mov	r22, r17
    18e8:	78 89       	ldd	r23, Y+16	; 0x10
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	90 2f       	mov	r25, r16
    18ee:	9b d2       	rcall	.+1334   	; 0x1e26 <__fixsfsi>
    18f0:	dc 01       	movw	r26, r24
    18f2:	cb 01       	movw	r24, r22
    18f4:	b6 01       	movw	r22, r12
    18f6:	3c df       	rcall	.-392    	; 0x1770 <sram_pixel>
    18f8:	2d ec       	ldi	r18, 0xCD	; 205
    18fa:	3c ec       	ldi	r19, 0xCC	; 204
    18fc:	4c ec       	ldi	r20, 0xCC	; 204
    18fe:	5d e3       	ldi	r21, 0x3D	; 61
    1900:	61 2f       	mov	r22, r17
    1902:	78 89       	ldd	r23, Y+16	; 0x10
    1904:	8f 85       	ldd	r24, Y+15	; 0x0f
    1906:	90 2f       	mov	r25, r16
    1908:	be d1       	rcall	.+892    	; 0x1c86 <__addsf3>
    190a:	16 2f       	mov	r17, r22
    190c:	78 8b       	std	Y+16, r23	; 0x10
    190e:	8f 87       	std	Y+15, r24	; 0x0f
    1910:	09 2f       	mov	r16, r25
    1912:	a5 01       	movw	r20, r10
    1914:	94 01       	movw	r18, r8
    1916:	1b d2       	rcall	.+1078   	; 0x1d4e <__cmpsf2>
    1918:	88 23       	and	r24, r24
    191a:	54 f2       	brlt	.-108    	; 0x18b0 <sram_draw_line+0xea>
    191c:	2d 84       	ldd	r2, Y+13	; 0x0d
    191e:	3e 84       	ldd	r3, Y+14	; 0x0e
    1920:	89 85       	ldd	r24, Y+9	; 0x09
    1922:	9a 85       	ldd	r25, Y+10	; 0x0a
    1924:	ef 81       	ldd	r30, Y+7	; 0x07
    1926:	f8 85       	ldd	r31, Y+8	; 0x08
    1928:	e8 17       	cp	r30, r24
    192a:	f9 07       	cpc	r31, r25
    192c:	34 f4       	brge	.+12     	; 0x193a <sram_draw_line+0x174>
    192e:	99 85       	ldd	r25, Y+9	; 0x09
    1930:	8a 85       	ldd	r24, Y+10	; 0x0a
    1932:	fa 87       	std	Y+10, r31	; 0x0a
    1934:	e9 87       	std	Y+9, r30	; 0x09
    1936:	9f 83       	std	Y+7, r25	; 0x07
    1938:	88 87       	std	Y+8, r24	; 0x08
    193a:	2b 85       	ldd	r18, Y+11	; 0x0b
    193c:	3c 85       	ldd	r19, Y+12	; 0x0c
    193e:	22 16       	cp	r2, r18
    1940:	33 06       	cpc	r3, r19
    1942:	09 f0       	breq	.+2      	; 0x1946 <sram_draw_line+0x180>
    1944:	42 c0       	rjmp	.+132    	; 0x19ca <sram_draw_line+0x204>
    1946:	f9 84       	ldd	r15, Y+9	; 0x09
    1948:	69 85       	ldd	r22, Y+9	; 0x09
    194a:	7a 85       	ldd	r23, Y+10	; 0x0a
    194c:	77 27       	eor	r23, r23
    194e:	8f 81       	ldd	r24, Y+7	; 0x07
    1950:	98 85       	ldd	r25, Y+8	; 0x08
    1952:	68 17       	cp	r22, r24
    1954:	79 07       	cpc	r23, r25
    1956:	cc f5       	brge	.+114    	; 0x19ca <sram_draw_line+0x204>
    1958:	8c 01       	movw	r16, r24
    195a:	c1 01       	movw	r24, r2
    195c:	09 df       	rcall	.-494    	; 0x1770 <sram_pixel>
    195e:	f3 94       	inc	r15
    1960:	6f 2d       	mov	r22, r15
    1962:	70 e0       	ldi	r23, 0x00	; 0
    1964:	60 17       	cp	r22, r16
    1966:	71 07       	cpc	r23, r17
    1968:	c4 f3       	brlt	.-16     	; 0x195a <sram_draw_line+0x194>
    196a:	2f c0       	rjmp	.+94     	; 0x19ca <sram_draw_line+0x204>
    196c:	69 85       	ldd	r22, Y+9	; 0x09
    196e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1970:	ef 81       	ldd	r30, Y+7	; 0x07
    1972:	f8 85       	ldd	r31, Y+8	; 0x08
    1974:	6e 1b       	sub	r22, r30
    1976:	7f 0b       	sbc	r23, r31
    1978:	88 27       	eor	r24, r24
    197a:	77 fd       	sbrc	r23, 7
    197c:	80 95       	com	r24
    197e:	98 2f       	mov	r25, r24
    1980:	85 d2       	rcall	.+1290   	; 0x1e8c <__floatsisf>
    1982:	6b 01       	movw	r12, r22
    1984:	7c 01       	movw	r14, r24
    1986:	b1 01       	movw	r22, r2
    1988:	2b 85       	ldd	r18, Y+11	; 0x0b
    198a:	3c 85       	ldd	r19, Y+12	; 0x0c
    198c:	62 1b       	sub	r22, r18
    198e:	73 0b       	sbc	r23, r19
    1990:	88 27       	eor	r24, r24
    1992:	77 fd       	sbrc	r23, 7
    1994:	80 95       	com	r24
    1996:	98 2f       	mov	r25, r24
    1998:	79 d2       	rcall	.+1266   	; 0x1e8c <__floatsisf>
    199a:	9b 01       	movw	r18, r22
    199c:	ac 01       	movw	r20, r24
    199e:	c7 01       	movw	r24, r14
    19a0:	b6 01       	movw	r22, r12
    19a2:	d9 d1       	rcall	.+946    	; 0x1d56 <__divsf3>
    19a4:	6b 83       	std	Y+3, r22	; 0x03
    19a6:	7c 83       	std	Y+4, r23	; 0x04
    19a8:	8d 83       	std	Y+5, r24	; 0x05
    19aa:	9e 83       	std	Y+6, r25	; 0x06
    19ac:	99 85       	ldd	r25, Y+9	; 0x09
    19ae:	8a 85       	ldd	r24, Y+10	; 0x0a
    19b0:	ef 81       	ldd	r30, Y+7	; 0x07
    19b2:	f8 85       	ldd	r31, Y+8	; 0x08
    19b4:	fa 87       	std	Y+10, r31	; 0x0a
    19b6:	e9 87       	std	Y+9, r30	; 0x09
    19b8:	9f 83       	std	Y+7, r25	; 0x07
    19ba:	88 87       	std	Y+8, r24	; 0x08
    19bc:	92 2d       	mov	r25, r2
    19be:	83 2d       	mov	r24, r3
    19c0:	2b 84       	ldd	r2, Y+11	; 0x0b
    19c2:	3c 84       	ldd	r3, Y+12	; 0x0c
    19c4:	9b 87       	std	Y+11, r25	; 0x0b
    19c6:	8c 87       	std	Y+12, r24	; 0x0c
    19c8:	45 cf       	rjmp	.-374    	; 0x1854 <sram_draw_line+0x8e>
    19ca:	60 96       	adiw	r28, 0x10	; 16
    19cc:	0f b6       	in	r0, 0x3f	; 63
    19ce:	f8 94       	cli
    19d0:	de bf       	out	0x3e, r29	; 62
    19d2:	0f be       	out	0x3f, r0	; 63
    19d4:	cd bf       	out	0x3d, r28	; 61
    19d6:	df 91       	pop	r29
    19d8:	cf 91       	pop	r28
    19da:	1f 91       	pop	r17
    19dc:	0f 91       	pop	r16
    19de:	ff 90       	pop	r15
    19e0:	ef 90       	pop	r14
    19e2:	df 90       	pop	r13
    19e4:	cf 90       	pop	r12
    19e6:	bf 90       	pop	r11
    19e8:	af 90       	pop	r10
    19ea:	9f 90       	pop	r9
    19ec:	8f 90       	pop	r8
    19ee:	7f 90       	pop	r7
    19f0:	6f 90       	pop	r6
    19f2:	5f 90       	pop	r5
    19f4:	4f 90       	pop	r4
    19f6:	3f 90       	pop	r3
    19f8:	2f 90       	pop	r2
    19fa:	08 95       	ret

000019fc <sram_push_line>:
    19fc:	cf 93       	push	r28
    19fe:	df 93       	push	r29
    1a00:	c8 2f       	mov	r28, r24
    1a02:	d0 e0       	ldi	r29, 0x00	; 0
    1a04:	ce 01       	movw	r24, r28
    1a06:	67 dd       	rcall	.-1330   	; 0x14d6 <oled_goto_line>
    1a08:	ce 01       	movw	r24, r28
    1a0a:	96 95       	lsr	r25
    1a0c:	98 2f       	mov	r25, r24
    1a0e:	88 27       	eor	r24, r24
    1a10:	97 95       	ror	r25
    1a12:	87 95       	ror	r24
    1a14:	9c 01       	movw	r18, r24
    1a16:	20 58       	subi	r18, 0x80	; 128
    1a18:	3f 4f       	sbci	r19, 0xFF	; 255
    1a1a:	e0 91 06 01 	lds	r30, 0x0106
    1a1e:	f0 91 07 01 	lds	r31, 0x0107
    1a22:	e8 0f       	add	r30, r24
    1a24:	f9 1f       	adc	r31, r25
    1a26:	40 81       	ld	r20, Z
    1a28:	e0 91 08 01 	lds	r30, 0x0108
    1a2c:	f0 91 09 01 	lds	r31, 0x0109
    1a30:	40 83       	st	Z, r20
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	82 17       	cp	r24, r18
    1a36:	93 07       	cpc	r25, r19
    1a38:	81 f7       	brne	.-32     	; 0x1a1a <sram_push_line+0x1e>
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <sram_push>:
    1a40:	cf 93       	push	r28
    1a42:	c0 e0       	ldi	r28, 0x00	; 0
    1a44:	8c 2f       	mov	r24, r28
    1a46:	da df       	rcall	.-76     	; 0x19fc <sram_push_line>
    1a48:	cf 5f       	subi	r28, 0xFF	; 255
    1a4a:	c8 30       	cpi	r28, 0x08	; 8
    1a4c:	d9 f7       	brne	.-10     	; 0x1a44 <sram_push+0x4>
    1a4e:	cf 91       	pop	r28
    1a50:	08 95       	ret

00001a52 <sram_init>:
    1a52:	40 e0       	ldi	r20, 0x00	; 0
    1a54:	50 e0       	ldi	r21, 0x00	; 0
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	60 e0       	ldi	r22, 0x00	; 0
    1a5a:	14 c0       	rjmp	.+40     	; 0x1a84 <sram_init+0x32>
    1a5c:	9c 01       	movw	r18, r24
    1a5e:	24 0f       	add	r18, r20
    1a60:	35 1f       	adc	r19, r21
    1a62:	e0 91 06 01 	lds	r30, 0x0106
    1a66:	f0 91 07 01 	lds	r31, 0x0107
    1a6a:	e2 0f       	add	r30, r18
    1a6c:	f3 1f       	adc	r31, r19
    1a6e:	10 82       	st	Z, r1
    1a70:	01 96       	adiw	r24, 0x01	; 1
    1a72:	80 38       	cpi	r24, 0x80	; 128
    1a74:	91 05       	cpc	r25, r1
    1a76:	91 f7       	brne	.-28     	; 0x1a5c <sram_init+0xa>
    1a78:	40 58       	subi	r20, 0x80	; 128
    1a7a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7c:	41 15       	cp	r20, r1
    1a7e:	84 e0       	ldi	r24, 0x04	; 4
    1a80:	58 07       	cpc	r21, r24
    1a82:	19 f0       	breq	.+6      	; 0x1a8a <sram_init+0x38>
    1a84:	87 2f       	mov	r24, r23
    1a86:	96 2f       	mov	r25, r22
    1a88:	e9 cf       	rjmp	.-46     	; 0x1a5c <sram_init+0xa>
    1a8a:	da cf       	rjmp	.-76     	; 0x1a40 <sram_push>
    1a8c:	08 95       	ret

00001a8e <sram_clear_line>:
    1a8e:	cf 93       	push	r28
    1a90:	c8 2f       	mov	r28, r24
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	20 dd       	rcall	.-1472   	; 0x14d6 <oled_goto_line>
    1a96:	c8 30       	cpi	r28, 0x08	; 8
    1a98:	00 f5       	brcc	.+64     	; 0x1ada <sram_clear_line+0x4c>
    1a9a:	80 e8       	ldi	r24, 0x80	; 128
    1a9c:	c8 9f       	mul	r28, r24
    1a9e:	90 01       	movw	r18, r0
    1aa0:	11 24       	eor	r1, r1
    1aa2:	a9 01       	movw	r20, r18
    1aa4:	40 58       	subi	r20, 0x80	; 128
    1aa6:	5f 4f       	sbci	r21, 0xFF	; 255
    1aa8:	e0 91 06 01 	lds	r30, 0x0106
    1aac:	f0 91 07 01 	lds	r31, 0x0107
    1ab0:	e2 0f       	add	r30, r18
    1ab2:	f3 1f       	adc	r31, r19
    1ab4:	10 82       	st	Z, r1
    1ab6:	2f 5f       	subi	r18, 0xFF	; 255
    1ab8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aba:	24 17       	cp	r18, r20
    1abc:	35 07       	cpc	r19, r21
    1abe:	a1 f7       	brne	.-24     	; 0x1aa8 <sram_clear_line+0x1a>
    1ac0:	21 e0       	ldi	r18, 0x01	; 1
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	c9 01       	movw	r24, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <sram_clear_line+0x3e>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	ca 95       	dec	r28
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <sram_clear_line+0x3a>
    1ad0:	90 91 a5 03 	lds	r25, 0x03A5
    1ad4:	89 2b       	or	r24, r25
    1ad6:	80 93 a5 03 	sts	0x03A5, r24
    1ada:	cf 91       	pop	r28
    1adc:	08 95       	ret

00001ade <sram_scroll_data>:
    1ade:	ef 92       	push	r14
    1ae0:	ff 92       	push	r15
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	d8 2f       	mov	r29, r24
    1aea:	c6 2f       	mov	r28, r22
    1aec:	69 30       	cpi	r22, 0x09	; 9
    1aee:	18 f0       	brcs	.+6      	; 0x1af6 <sram_scroll_data+0x18>
    1af0:	c8 50       	subi	r28, 0x08	; 8
    1af2:	6c 2f       	mov	r22, r28
    1af4:	f4 df       	rcall	.-24     	; 0x1ade <sram_scroll_data>
    1af6:	cc 23       	and	r28, r28
    1af8:	09 f4       	brne	.+2      	; 0x1afc <sram_scroll_data+0x1e>
    1afa:	5c c0       	rjmp	.+184    	; 0x1bb4 <sram_scroll_data+0xd6>
    1afc:	a0 91 06 01 	lds	r26, 0x0106
    1b00:	b0 91 07 01 	lds	r27, 0x0107
    1b04:	20 e8       	ldi	r18, 0x80	; 128
    1b06:	d2 9f       	mul	r29, r18
    1b08:	a0 0d       	add	r26, r0
    1b0a:	b1 1d       	adc	r27, r1
    1b0c:	11 24       	eor	r1, r1
    1b0e:	84 e0       	ldi	r24, 0x04	; 4
    1b10:	94 e0       	ldi	r25, 0x04	; 4
    1b12:	fc 01       	movw	r30, r24
    1b14:	2d 91       	ld	r18, X+
    1b16:	21 93       	st	Z+, r18
    1b18:	2e 2f       	mov	r18, r30
    1b1a:	28 1b       	sub	r18, r24
    1b1c:	2c 17       	cp	r18, r28
    1b1e:	d0 f3       	brcs	.-12     	; 0x1b14 <sram_scroll_data+0x36>
    1b20:	8c 2f       	mov	r24, r28
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	60 e8       	ldi	r22, 0x80	; 128
    1b26:	70 e0       	ldi	r23, 0x00	; 0
    1b28:	68 1b       	sub	r22, r24
    1b2a:	79 0b       	sbc	r23, r25
    1b2c:	16 16       	cp	r1, r22
    1b2e:	17 06       	cpc	r1, r23
    1b30:	0c f4       	brge	.+2      	; 0x1b34 <sram_scroll_data+0x56>
    1b32:	44 c0       	rjmp	.+136    	; 0x1bbc <sram_scroll_data+0xde>
    1b34:	18 c0       	rjmp	.+48     	; 0x1b66 <sram_scroll_data+0x88>
    1b36:	40 91 06 01 	lds	r20, 0x0106
    1b3a:	50 91 07 01 	lds	r21, 0x0107
    1b3e:	2e 0d       	add	r18, r14
    1b40:	3f 1d       	adc	r19, r15
    1b42:	fa 01       	movw	r30, r20
    1b44:	e2 0f       	add	r30, r18
    1b46:	f3 1f       	adc	r31, r19
    1b48:	28 0f       	add	r18, r24
    1b4a:	39 1f       	adc	r19, r25
    1b4c:	42 0f       	add	r20, r18
    1b4e:	53 1f       	adc	r21, r19
    1b50:	da 01       	movw	r26, r20
    1b52:	2c 91       	ld	r18, X
    1b54:	20 83       	st	Z, r18
    1b56:	1f 5f       	subi	r17, 0xFF	; 255
    1b58:	21 2f       	mov	r18, r17
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	26 17       	cp	r18, r22
    1b5e:	37 07       	cpc	r19, r23
    1b60:	54 f3       	brlt	.-44     	; 0x1b36 <sram_scroll_data+0x58>
    1b62:	cc 23       	and	r28, r28
    1b64:	d1 f0       	breq	.+52     	; 0x1b9a <sram_scroll_data+0xbc>
    1b66:	b0 e8       	ldi	r27, 0x80	; 128
    1b68:	db 9f       	mul	r29, r27
    1b6a:	90 01       	movw	r18, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	28 1b       	sub	r18, r24
    1b70:	39 0b       	sbc	r19, r25
    1b72:	44 e0       	ldi	r20, 0x04	; 4
    1b74:	54 e0       	ldi	r21, 0x04	; 4
    1b76:	fa 01       	movw	r30, r20
    1b78:	25 58       	subi	r18, 0x85	; 133
    1b7a:	33 40       	sbci	r19, 0x03	; 3
    1b7c:	c9 01       	movw	r24, r18
    1b7e:	8e 0f       	add	r24, r30
    1b80:	9f 1f       	adc	r25, r31
    1b82:	a0 91 06 01 	lds	r26, 0x0106
    1b86:	b0 91 07 01 	lds	r27, 0x0107
    1b8a:	a8 0f       	add	r26, r24
    1b8c:	b9 1f       	adc	r27, r25
    1b8e:	81 91       	ld	r24, Z+
    1b90:	8c 93       	st	X, r24
    1b92:	8e 2f       	mov	r24, r30
    1b94:	84 1b       	sub	r24, r20
    1b96:	8c 17       	cp	r24, r28
    1b98:	88 f3       	brcs	.-30     	; 0x1b7c <sram_scroll_data+0x9e>
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <sram_scroll_data+0xc6>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	da 95       	dec	r29
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <sram_scroll_data+0xc2>
    1ba8:	d0 91 a5 03 	lds	r29, 0x03A5
    1bac:	8d 2b       	or	r24, r29
    1bae:	80 93 a5 03 	sts	0x03A5, r24
    1bb2:	0c c0       	rjmp	.+24     	; 0x1bcc <sram_scroll_data+0xee>
    1bb4:	60 e8       	ldi	r22, 0x80	; 128
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	20 e8       	ldi	r18, 0x80	; 128
    1bbe:	d2 9f       	mul	r29, r18
    1bc0:	70 01       	movw	r14, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	10 e0       	ldi	r17, 0x00	; 0
    1bca:	b5 cf       	rjmp	.-150    	; 0x1b36 <sram_scroll_data+0x58>
    1bcc:	df 91       	pop	r29
    1bce:	cf 91       	pop	r28
    1bd0:	1f 91       	pop	r17
    1bd2:	ff 90       	pop	r15
    1bd4:	ef 90       	pop	r14
    1bd6:	08 95       	ret

00001bd8 <sram_draw_rectangle>:


void sram_draw_rectangle(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1){
    1bd8:	cf 92       	push	r12
    1bda:	df 92       	push	r13
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	cf 93       	push	r28
    1be6:	df 93       	push	r29
    1be8:	c4 2f       	mov	r28, r20
	sram_draw_line(x0,y0,x0,y1);
    1bea:	e2 2e       	mov	r14, r18
    1bec:	f1 2c       	mov	r15, r1
    1bee:	06 2f       	mov	r16, r22
    1bf0:	10 e0       	ldi	r17, 0x00	; 0
    1bf2:	c8 2e       	mov	r12, r24
    1bf4:	d1 2c       	mov	r13, r1
    1bf6:	97 01       	movw	r18, r14
    1bf8:	a6 01       	movw	r20, r12
    1bfa:	b8 01       	movw	r22, r16
    1bfc:	c6 01       	movw	r24, r12
    1bfe:	e3 dd       	rcall	.-1082   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x0,y0,x1,y0);
    1c00:	d0 e0       	ldi	r29, 0x00	; 0
    1c02:	98 01       	movw	r18, r16
    1c04:	ae 01       	movw	r20, r28
    1c06:	b8 01       	movw	r22, r16
    1c08:	c6 01       	movw	r24, r12
    1c0a:	dd dd       	rcall	.-1094   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x0,y1,x1,y1);
    1c0c:	97 01       	movw	r18, r14
    1c0e:	ae 01       	movw	r20, r28
    1c10:	b7 01       	movw	r22, r14
    1c12:	c6 01       	movw	r24, r12
    1c14:	d8 dd       	rcall	.-1104   	; 0x17c6 <sram_draw_line>
	sram_draw_line(x1,y0,x1,y1);
    1c16:	97 01       	movw	r18, r14
    1c18:	ae 01       	movw	r20, r28
    1c1a:	b8 01       	movw	r22, r16
    1c1c:	ce 01       	movw	r24, r28
    1c1e:	d3 dd       	rcall	.-1114   	; 0x17c6 <sram_draw_line>
    1c20:	df 91       	pop	r29
    1c22:	cf 91       	pop	r28
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	df 90       	pop	r13
    1c2e:	cf 90       	pop	r12
    1c30:	08 95       	ret

00001c32 <initialize_timer>:

#include "timer.h"

uint8_t FLAG_refresh_screen;

void initialize_timer(uint8_t fps){	//	Function for initilization of the timers
    1c32:	28 2f       	mov	r18, r24
	TIMSK |= (1<<OCIE0);//when timer is the same as OCR0 it sends an interrupt
    1c34:	89 b7       	in	r24, 0x39	; 57
    1c36:	81 60       	ori	r24, 0x01	; 1
    1c38:	89 bf       	out	0x39, r24	; 57
	TCCR0 |= (1<<WGM01)|(1<<CS02)|(1<<CS00);//		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
    1c3a:	83 b7       	in	r24, 0x33	; 51
    1c3c:	8d 60       	ori	r24, 0x0D	; 13
    1c3e:	83 bf       	out	0x33, r24	; 51
	OCR0 = (F_CPU/PRESCALER)/fps;//-> 4800Hz. Then we just need to count to (4800Hz/Desired_Fps) to get the amount we need count to. (60fps -> 80)
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	40 e0       	ldi	r20, 0x00	; 0
    1c44:	50 e0       	ldi	r21, 0x00	; 0
    1c46:	60 ec       	ldi	r22, 0xC0	; 192
    1c48:	72 e1       	ldi	r23, 0x12	; 18
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	44 d2       	rcall	.+1160   	; 0x20d8 <__divmodsi4>
    1c50:	21 bf       	out	0x31, r18	; 49
	FLAG_refresh_screen = 1;//since we are initializing we want to refresh the page
    1c52:	81 e0       	ldi	r24, 0x01	; 1
    1c54:	80 93 10 04 	sts	0x0410, r24
    1c58:	08 95       	ret

00001c5a <timer_check_flag>:
}

uint8_t timer_check_flag(void){	//	function for getting the value of the timer
	return FLAG_refresh_screen;
}
    1c5a:	80 91 10 04 	lds	r24, 0x0410
    1c5e:	08 95       	ret

00001c60 <timer_disable_flag>:

void timer_disable_flag(void){	//	function for getting the value of the timer
	FLAG_refresh_screen = 0;
    1c60:	10 92 10 04 	sts	0x0410, r1
    1c64:	08 95       	ret

00001c66 <__vector_16>:
}

ISR(TIMER0_COMP_vect){//interrupt when Timer_0 is done, resets itself
    1c66:	1f 92       	push	r1
    1c68:	0f 92       	push	r0
    1c6a:	0f b6       	in	r0, 0x3f	; 63
    1c6c:	0f 92       	push	r0
    1c6e:	11 24       	eor	r1, r1
    1c70:	8f 93       	push	r24
	FLAG_refresh_screen = 1;
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	80 93 10 04 	sts	0x0410, r24
}
    1c78:	8f 91       	pop	r24
    1c7a:	0f 90       	pop	r0
    1c7c:	0f be       	out	0x3f, r0	; 63
    1c7e:	0f 90       	pop	r0
    1c80:	1f 90       	pop	r1
    1c82:	18 95       	reti

00001c84 <__subsf3>:
    1c84:	50 58       	subi	r21, 0x80	; 128

00001c86 <__addsf3>:
    1c86:	bb 27       	eor	r27, r27
    1c88:	aa 27       	eor	r26, r26
    1c8a:	0e d0       	rcall	.+28     	; 0x1ca8 <__addsf3x>
    1c8c:	75 c1       	rjmp	.+746    	; 0x1f78 <__fp_round>
    1c8e:	66 d1       	rcall	.+716    	; 0x1f5c <__fp_pscA>
    1c90:	30 f0       	brcs	.+12     	; 0x1c9e <__addsf3+0x18>
    1c92:	6b d1       	rcall	.+726    	; 0x1f6a <__fp_pscB>
    1c94:	20 f0       	brcs	.+8      	; 0x1c9e <__addsf3+0x18>
    1c96:	31 f4       	brne	.+12     	; 0x1ca4 <__addsf3+0x1e>
    1c98:	9f 3f       	cpi	r25, 0xFF	; 255
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <__addsf3+0x1a>
    1c9c:	1e f4       	brtc	.+6      	; 0x1ca4 <__addsf3+0x1e>
    1c9e:	5b c1       	rjmp	.+694    	; 0x1f56 <__fp_nan>
    1ca0:	0e f4       	brtc	.+2      	; 0x1ca4 <__addsf3+0x1e>
    1ca2:	e0 95       	com	r30
    1ca4:	e7 fb       	bst	r30, 7
    1ca6:	51 c1       	rjmp	.+674    	; 0x1f4a <__fp_inf>

00001ca8 <__addsf3x>:
    1ca8:	e9 2f       	mov	r30, r25
    1caa:	77 d1       	rcall	.+750    	; 0x1f9a <__fp_split3>
    1cac:	80 f3       	brcs	.-32     	; 0x1c8e <__addsf3+0x8>
    1cae:	ba 17       	cp	r27, r26
    1cb0:	62 07       	cpc	r22, r18
    1cb2:	73 07       	cpc	r23, r19
    1cb4:	84 07       	cpc	r24, r20
    1cb6:	95 07       	cpc	r25, r21
    1cb8:	18 f0       	brcs	.+6      	; 0x1cc0 <__addsf3x+0x18>
    1cba:	71 f4       	brne	.+28     	; 0x1cd8 <__addsf3x+0x30>
    1cbc:	9e f5       	brtc	.+102    	; 0x1d24 <__addsf3x+0x7c>
    1cbe:	8f c1       	rjmp	.+798    	; 0x1fde <__fp_zero>
    1cc0:	0e f4       	brtc	.+2      	; 0x1cc4 <__addsf3x+0x1c>
    1cc2:	e0 95       	com	r30
    1cc4:	0b 2e       	mov	r0, r27
    1cc6:	ba 2f       	mov	r27, r26
    1cc8:	a0 2d       	mov	r26, r0
    1cca:	0b 01       	movw	r0, r22
    1ccc:	b9 01       	movw	r22, r18
    1cce:	90 01       	movw	r18, r0
    1cd0:	0c 01       	movw	r0, r24
    1cd2:	ca 01       	movw	r24, r20
    1cd4:	a0 01       	movw	r20, r0
    1cd6:	11 24       	eor	r1, r1
    1cd8:	ff 27       	eor	r31, r31
    1cda:	59 1b       	sub	r21, r25
    1cdc:	99 f0       	breq	.+38     	; 0x1d04 <__addsf3x+0x5c>
    1cde:	59 3f       	cpi	r21, 0xF9	; 249
    1ce0:	50 f4       	brcc	.+20     	; 0x1cf6 <__addsf3x+0x4e>
    1ce2:	50 3e       	cpi	r21, 0xE0	; 224
    1ce4:	68 f1       	brcs	.+90     	; 0x1d40 <__addsf3x+0x98>
    1ce6:	1a 16       	cp	r1, r26
    1ce8:	f0 40       	sbci	r31, 0x00	; 0
    1cea:	a2 2f       	mov	r26, r18
    1cec:	23 2f       	mov	r18, r19
    1cee:	34 2f       	mov	r19, r20
    1cf0:	44 27       	eor	r20, r20
    1cf2:	58 5f       	subi	r21, 0xF8	; 248
    1cf4:	f3 cf       	rjmp	.-26     	; 0x1cdc <__addsf3x+0x34>
    1cf6:	46 95       	lsr	r20
    1cf8:	37 95       	ror	r19
    1cfa:	27 95       	ror	r18
    1cfc:	a7 95       	ror	r26
    1cfe:	f0 40       	sbci	r31, 0x00	; 0
    1d00:	53 95       	inc	r21
    1d02:	c9 f7       	brne	.-14     	; 0x1cf6 <__addsf3x+0x4e>
    1d04:	7e f4       	brtc	.+30     	; 0x1d24 <__addsf3x+0x7c>
    1d06:	1f 16       	cp	r1, r31
    1d08:	ba 0b       	sbc	r27, r26
    1d0a:	62 0b       	sbc	r22, r18
    1d0c:	73 0b       	sbc	r23, r19
    1d0e:	84 0b       	sbc	r24, r20
    1d10:	ba f0       	brmi	.+46     	; 0x1d40 <__addsf3x+0x98>
    1d12:	91 50       	subi	r25, 0x01	; 1
    1d14:	a1 f0       	breq	.+40     	; 0x1d3e <__addsf3x+0x96>
    1d16:	ff 0f       	add	r31, r31
    1d18:	bb 1f       	adc	r27, r27
    1d1a:	66 1f       	adc	r22, r22
    1d1c:	77 1f       	adc	r23, r23
    1d1e:	88 1f       	adc	r24, r24
    1d20:	c2 f7       	brpl	.-16     	; 0x1d12 <__addsf3x+0x6a>
    1d22:	0e c0       	rjmp	.+28     	; 0x1d40 <__addsf3x+0x98>
    1d24:	ba 0f       	add	r27, r26
    1d26:	62 1f       	adc	r22, r18
    1d28:	73 1f       	adc	r23, r19
    1d2a:	84 1f       	adc	r24, r20
    1d2c:	48 f4       	brcc	.+18     	; 0x1d40 <__addsf3x+0x98>
    1d2e:	87 95       	ror	r24
    1d30:	77 95       	ror	r23
    1d32:	67 95       	ror	r22
    1d34:	b7 95       	ror	r27
    1d36:	f7 95       	ror	r31
    1d38:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <__addsf3x+0x96>
    1d3c:	b3 cf       	rjmp	.-154    	; 0x1ca4 <__addsf3+0x1e>
    1d3e:	93 95       	inc	r25
    1d40:	88 0f       	add	r24, r24
    1d42:	08 f0       	brcs	.+2      	; 0x1d46 <__addsf3x+0x9e>
    1d44:	99 27       	eor	r25, r25
    1d46:	ee 0f       	add	r30, r30
    1d48:	97 95       	ror	r25
    1d4a:	87 95       	ror	r24
    1d4c:	08 95       	ret

00001d4e <__cmpsf2>:
    1d4e:	d9 d0       	rcall	.+434    	; 0x1f02 <__fp_cmp>
    1d50:	08 f4       	brcc	.+2      	; 0x1d54 <__cmpsf2+0x6>
    1d52:	81 e0       	ldi	r24, 0x01	; 1
    1d54:	08 95       	ret

00001d56 <__divsf3>:
    1d56:	0c d0       	rcall	.+24     	; 0x1d70 <__divsf3x>
    1d58:	0f c1       	rjmp	.+542    	; 0x1f78 <__fp_round>
    1d5a:	07 d1       	rcall	.+526    	; 0x1f6a <__fp_pscB>
    1d5c:	40 f0       	brcs	.+16     	; 0x1d6e <__divsf3+0x18>
    1d5e:	fe d0       	rcall	.+508    	; 0x1f5c <__fp_pscA>
    1d60:	30 f0       	brcs	.+12     	; 0x1d6e <__divsf3+0x18>
    1d62:	21 f4       	brne	.+8      	; 0x1d6c <__divsf3+0x16>
    1d64:	5f 3f       	cpi	r21, 0xFF	; 255
    1d66:	19 f0       	breq	.+6      	; 0x1d6e <__divsf3+0x18>
    1d68:	f0 c0       	rjmp	.+480    	; 0x1f4a <__fp_inf>
    1d6a:	51 11       	cpse	r21, r1
    1d6c:	39 c1       	rjmp	.+626    	; 0x1fe0 <__fp_szero>
    1d6e:	f3 c0       	rjmp	.+486    	; 0x1f56 <__fp_nan>

00001d70 <__divsf3x>:
    1d70:	14 d1       	rcall	.+552    	; 0x1f9a <__fp_split3>
    1d72:	98 f3       	brcs	.-26     	; 0x1d5a <__divsf3+0x4>

00001d74 <__divsf3_pse>:
    1d74:	99 23       	and	r25, r25
    1d76:	c9 f3       	breq	.-14     	; 0x1d6a <__divsf3+0x14>
    1d78:	55 23       	and	r21, r21
    1d7a:	b1 f3       	breq	.-20     	; 0x1d68 <__divsf3+0x12>
    1d7c:	95 1b       	sub	r25, r21
    1d7e:	55 0b       	sbc	r21, r21
    1d80:	bb 27       	eor	r27, r27
    1d82:	aa 27       	eor	r26, r26
    1d84:	62 17       	cp	r22, r18
    1d86:	73 07       	cpc	r23, r19
    1d88:	84 07       	cpc	r24, r20
    1d8a:	38 f0       	brcs	.+14     	; 0x1d9a <__divsf3_pse+0x26>
    1d8c:	9f 5f       	subi	r25, 0xFF	; 255
    1d8e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	44 1f       	adc	r20, r20
    1d96:	aa 1f       	adc	r26, r26
    1d98:	a9 f3       	breq	.-22     	; 0x1d84 <__divsf3_pse+0x10>
    1d9a:	33 d0       	rcall	.+102    	; 0x1e02 <__divsf3_pse+0x8e>
    1d9c:	0e 2e       	mov	r0, r30
    1d9e:	3a f0       	brmi	.+14     	; 0x1dae <__divsf3_pse+0x3a>
    1da0:	e0 e8       	ldi	r30, 0x80	; 128
    1da2:	30 d0       	rcall	.+96     	; 0x1e04 <__divsf3_pse+0x90>
    1da4:	91 50       	subi	r25, 0x01	; 1
    1da6:	50 40       	sbci	r21, 0x00	; 0
    1da8:	e6 95       	lsr	r30
    1daa:	00 1c       	adc	r0, r0
    1dac:	ca f7       	brpl	.-14     	; 0x1da0 <__divsf3_pse+0x2c>
    1dae:	29 d0       	rcall	.+82     	; 0x1e02 <__divsf3_pse+0x8e>
    1db0:	fe 2f       	mov	r31, r30
    1db2:	27 d0       	rcall	.+78     	; 0x1e02 <__divsf3_pse+0x8e>
    1db4:	66 0f       	add	r22, r22
    1db6:	77 1f       	adc	r23, r23
    1db8:	88 1f       	adc	r24, r24
    1dba:	bb 1f       	adc	r27, r27
    1dbc:	26 17       	cp	r18, r22
    1dbe:	37 07       	cpc	r19, r23
    1dc0:	48 07       	cpc	r20, r24
    1dc2:	ab 07       	cpc	r26, r27
    1dc4:	b0 e8       	ldi	r27, 0x80	; 128
    1dc6:	09 f0       	breq	.+2      	; 0x1dca <__divsf3_pse+0x56>
    1dc8:	bb 0b       	sbc	r27, r27
    1dca:	80 2d       	mov	r24, r0
    1dcc:	bf 01       	movw	r22, r30
    1dce:	ff 27       	eor	r31, r31
    1dd0:	93 58       	subi	r25, 0x83	; 131
    1dd2:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd4:	2a f0       	brmi	.+10     	; 0x1de0 <__divsf3_pse+0x6c>
    1dd6:	9e 3f       	cpi	r25, 0xFE	; 254
    1dd8:	51 05       	cpc	r21, r1
    1dda:	68 f0       	brcs	.+26     	; 0x1df6 <__divsf3_pse+0x82>
    1ddc:	b6 c0       	rjmp	.+364    	; 0x1f4a <__fp_inf>
    1dde:	00 c1       	rjmp	.+512    	; 0x1fe0 <__fp_szero>
    1de0:	5f 3f       	cpi	r21, 0xFF	; 255
    1de2:	ec f3       	brlt	.-6      	; 0x1dde <__divsf3_pse+0x6a>
    1de4:	98 3e       	cpi	r25, 0xE8	; 232
    1de6:	dc f3       	brlt	.-10     	; 0x1dde <__divsf3_pse+0x6a>
    1de8:	86 95       	lsr	r24
    1dea:	77 95       	ror	r23
    1dec:	67 95       	ror	r22
    1dee:	b7 95       	ror	r27
    1df0:	f7 95       	ror	r31
    1df2:	9f 5f       	subi	r25, 0xFF	; 255
    1df4:	c9 f7       	brne	.-14     	; 0x1de8 <__divsf3_pse+0x74>
    1df6:	88 0f       	add	r24, r24
    1df8:	91 1d       	adc	r25, r1
    1dfa:	96 95       	lsr	r25
    1dfc:	87 95       	ror	r24
    1dfe:	97 f9       	bld	r25, 7
    1e00:	08 95       	ret
    1e02:	e1 e0       	ldi	r30, 0x01	; 1
    1e04:	66 0f       	add	r22, r22
    1e06:	77 1f       	adc	r23, r23
    1e08:	88 1f       	adc	r24, r24
    1e0a:	bb 1f       	adc	r27, r27
    1e0c:	62 17       	cp	r22, r18
    1e0e:	73 07       	cpc	r23, r19
    1e10:	84 07       	cpc	r24, r20
    1e12:	ba 07       	cpc	r27, r26
    1e14:	20 f0       	brcs	.+8      	; 0x1e1e <__divsf3_pse+0xaa>
    1e16:	62 1b       	sub	r22, r18
    1e18:	73 0b       	sbc	r23, r19
    1e1a:	84 0b       	sbc	r24, r20
    1e1c:	ba 0b       	sbc	r27, r26
    1e1e:	ee 1f       	adc	r30, r30
    1e20:	88 f7       	brcc	.-30     	; 0x1e04 <__divsf3_pse+0x90>
    1e22:	e0 95       	com	r30
    1e24:	08 95       	ret

00001e26 <__fixsfsi>:
    1e26:	04 d0       	rcall	.+8      	; 0x1e30 <__fixunssfsi>
    1e28:	68 94       	set
    1e2a:	b1 11       	cpse	r27, r1
    1e2c:	d9 c0       	rjmp	.+434    	; 0x1fe0 <__fp_szero>
    1e2e:	08 95       	ret

00001e30 <__fixunssfsi>:
    1e30:	bc d0       	rcall	.+376    	; 0x1faa <__fp_splitA>
    1e32:	88 f0       	brcs	.+34     	; 0x1e56 <__fixunssfsi+0x26>
    1e34:	9f 57       	subi	r25, 0x7F	; 127
    1e36:	90 f0       	brcs	.+36     	; 0x1e5c <__fixunssfsi+0x2c>
    1e38:	b9 2f       	mov	r27, r25
    1e3a:	99 27       	eor	r25, r25
    1e3c:	b7 51       	subi	r27, 0x17	; 23
    1e3e:	a0 f0       	brcs	.+40     	; 0x1e68 <__fixunssfsi+0x38>
    1e40:	d1 f0       	breq	.+52     	; 0x1e76 <__fixunssfsi+0x46>
    1e42:	66 0f       	add	r22, r22
    1e44:	77 1f       	adc	r23, r23
    1e46:	88 1f       	adc	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	1a f0       	brmi	.+6      	; 0x1e52 <__fixunssfsi+0x22>
    1e4c:	ba 95       	dec	r27
    1e4e:	c9 f7       	brne	.-14     	; 0x1e42 <__fixunssfsi+0x12>
    1e50:	12 c0       	rjmp	.+36     	; 0x1e76 <__fixunssfsi+0x46>
    1e52:	b1 30       	cpi	r27, 0x01	; 1
    1e54:	81 f0       	breq	.+32     	; 0x1e76 <__fixunssfsi+0x46>
    1e56:	c3 d0       	rcall	.+390    	; 0x1fde <__fp_zero>
    1e58:	b1 e0       	ldi	r27, 0x01	; 1
    1e5a:	08 95       	ret
    1e5c:	c0 c0       	rjmp	.+384    	; 0x1fde <__fp_zero>
    1e5e:	67 2f       	mov	r22, r23
    1e60:	78 2f       	mov	r23, r24
    1e62:	88 27       	eor	r24, r24
    1e64:	b8 5f       	subi	r27, 0xF8	; 248
    1e66:	39 f0       	breq	.+14     	; 0x1e76 <__fixunssfsi+0x46>
    1e68:	b9 3f       	cpi	r27, 0xF9	; 249
    1e6a:	cc f3       	brlt	.-14     	; 0x1e5e <__fixunssfsi+0x2e>
    1e6c:	86 95       	lsr	r24
    1e6e:	77 95       	ror	r23
    1e70:	67 95       	ror	r22
    1e72:	b3 95       	inc	r27
    1e74:	d9 f7       	brne	.-10     	; 0x1e6c <__fixunssfsi+0x3c>
    1e76:	3e f4       	brtc	.+14     	; 0x1e86 <__fixunssfsi+0x56>
    1e78:	90 95       	com	r25
    1e7a:	80 95       	com	r24
    1e7c:	70 95       	com	r23
    1e7e:	61 95       	neg	r22
    1e80:	7f 4f       	sbci	r23, 0xFF	; 255
    1e82:	8f 4f       	sbci	r24, 0xFF	; 255
    1e84:	9f 4f       	sbci	r25, 0xFF	; 255
    1e86:	08 95       	ret

00001e88 <__floatunsisf>:
    1e88:	e8 94       	clt
    1e8a:	09 c0       	rjmp	.+18     	; 0x1e9e <__floatsisf+0x12>

00001e8c <__floatsisf>:
    1e8c:	97 fb       	bst	r25, 7
    1e8e:	3e f4       	brtc	.+14     	; 0x1e9e <__floatsisf+0x12>
    1e90:	90 95       	com	r25
    1e92:	80 95       	com	r24
    1e94:	70 95       	com	r23
    1e96:	61 95       	neg	r22
    1e98:	7f 4f       	sbci	r23, 0xFF	; 255
    1e9a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e9c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e9e:	99 23       	and	r25, r25
    1ea0:	a9 f0       	breq	.+42     	; 0x1ecc <__floatsisf+0x40>
    1ea2:	f9 2f       	mov	r31, r25
    1ea4:	96 e9       	ldi	r25, 0x96	; 150
    1ea6:	bb 27       	eor	r27, r27
    1ea8:	93 95       	inc	r25
    1eaa:	f6 95       	lsr	r31
    1eac:	87 95       	ror	r24
    1eae:	77 95       	ror	r23
    1eb0:	67 95       	ror	r22
    1eb2:	b7 95       	ror	r27
    1eb4:	f1 11       	cpse	r31, r1
    1eb6:	f8 cf       	rjmp	.-16     	; 0x1ea8 <__floatsisf+0x1c>
    1eb8:	fa f4       	brpl	.+62     	; 0x1ef8 <__floatsisf+0x6c>
    1eba:	bb 0f       	add	r27, r27
    1ebc:	11 f4       	brne	.+4      	; 0x1ec2 <__floatsisf+0x36>
    1ebe:	60 ff       	sbrs	r22, 0
    1ec0:	1b c0       	rjmp	.+54     	; 0x1ef8 <__floatsisf+0x6c>
    1ec2:	6f 5f       	subi	r22, 0xFF	; 255
    1ec4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec6:	8f 4f       	sbci	r24, 0xFF	; 255
    1ec8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eca:	16 c0       	rjmp	.+44     	; 0x1ef8 <__floatsisf+0x6c>
    1ecc:	88 23       	and	r24, r24
    1ece:	11 f0       	breq	.+4      	; 0x1ed4 <__floatsisf+0x48>
    1ed0:	96 e9       	ldi	r25, 0x96	; 150
    1ed2:	11 c0       	rjmp	.+34     	; 0x1ef6 <__floatsisf+0x6a>
    1ed4:	77 23       	and	r23, r23
    1ed6:	21 f0       	breq	.+8      	; 0x1ee0 <__floatsisf+0x54>
    1ed8:	9e e8       	ldi	r25, 0x8E	; 142
    1eda:	87 2f       	mov	r24, r23
    1edc:	76 2f       	mov	r23, r22
    1ede:	05 c0       	rjmp	.+10     	; 0x1eea <__floatsisf+0x5e>
    1ee0:	66 23       	and	r22, r22
    1ee2:	71 f0       	breq	.+28     	; 0x1f00 <__floatsisf+0x74>
    1ee4:	96 e8       	ldi	r25, 0x86	; 134
    1ee6:	86 2f       	mov	r24, r22
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	60 e0       	ldi	r22, 0x00	; 0
    1eec:	2a f0       	brmi	.+10     	; 0x1ef8 <__floatsisf+0x6c>
    1eee:	9a 95       	dec	r25
    1ef0:	66 0f       	add	r22, r22
    1ef2:	77 1f       	adc	r23, r23
    1ef4:	88 1f       	adc	r24, r24
    1ef6:	da f7       	brpl	.-10     	; 0x1eee <__floatsisf+0x62>
    1ef8:	88 0f       	add	r24, r24
    1efa:	96 95       	lsr	r25
    1efc:	87 95       	ror	r24
    1efe:	97 f9       	bld	r25, 7
    1f00:	08 95       	ret

00001f02 <__fp_cmp>:
    1f02:	99 0f       	add	r25, r25
    1f04:	00 08       	sbc	r0, r0
    1f06:	55 0f       	add	r21, r21
    1f08:	aa 0b       	sbc	r26, r26
    1f0a:	e0 e8       	ldi	r30, 0x80	; 128
    1f0c:	fe ef       	ldi	r31, 0xFE	; 254
    1f0e:	16 16       	cp	r1, r22
    1f10:	17 06       	cpc	r1, r23
    1f12:	e8 07       	cpc	r30, r24
    1f14:	f9 07       	cpc	r31, r25
    1f16:	c0 f0       	brcs	.+48     	; 0x1f48 <__fp_cmp+0x46>
    1f18:	12 16       	cp	r1, r18
    1f1a:	13 06       	cpc	r1, r19
    1f1c:	e4 07       	cpc	r30, r20
    1f1e:	f5 07       	cpc	r31, r21
    1f20:	98 f0       	brcs	.+38     	; 0x1f48 <__fp_cmp+0x46>
    1f22:	62 1b       	sub	r22, r18
    1f24:	73 0b       	sbc	r23, r19
    1f26:	84 0b       	sbc	r24, r20
    1f28:	95 0b       	sbc	r25, r21
    1f2a:	39 f4       	brne	.+14     	; 0x1f3a <__fp_cmp+0x38>
    1f2c:	0a 26       	eor	r0, r26
    1f2e:	61 f0       	breq	.+24     	; 0x1f48 <__fp_cmp+0x46>
    1f30:	23 2b       	or	r18, r19
    1f32:	24 2b       	or	r18, r20
    1f34:	25 2b       	or	r18, r21
    1f36:	21 f4       	brne	.+8      	; 0x1f40 <__fp_cmp+0x3e>
    1f38:	08 95       	ret
    1f3a:	0a 26       	eor	r0, r26
    1f3c:	09 f4       	brne	.+2      	; 0x1f40 <__fp_cmp+0x3e>
    1f3e:	a1 40       	sbci	r26, 0x01	; 1
    1f40:	a6 95       	lsr	r26
    1f42:	8f ef       	ldi	r24, 0xFF	; 255
    1f44:	81 1d       	adc	r24, r1
    1f46:	81 1d       	adc	r24, r1
    1f48:	08 95       	ret

00001f4a <__fp_inf>:
    1f4a:	97 f9       	bld	r25, 7
    1f4c:	9f 67       	ori	r25, 0x7F	; 127
    1f4e:	80 e8       	ldi	r24, 0x80	; 128
    1f50:	70 e0       	ldi	r23, 0x00	; 0
    1f52:	60 e0       	ldi	r22, 0x00	; 0
    1f54:	08 95       	ret

00001f56 <__fp_nan>:
    1f56:	9f ef       	ldi	r25, 0xFF	; 255
    1f58:	80 ec       	ldi	r24, 0xC0	; 192
    1f5a:	08 95       	ret

00001f5c <__fp_pscA>:
    1f5c:	00 24       	eor	r0, r0
    1f5e:	0a 94       	dec	r0
    1f60:	16 16       	cp	r1, r22
    1f62:	17 06       	cpc	r1, r23
    1f64:	18 06       	cpc	r1, r24
    1f66:	09 06       	cpc	r0, r25
    1f68:	08 95       	ret

00001f6a <__fp_pscB>:
    1f6a:	00 24       	eor	r0, r0
    1f6c:	0a 94       	dec	r0
    1f6e:	12 16       	cp	r1, r18
    1f70:	13 06       	cpc	r1, r19
    1f72:	14 06       	cpc	r1, r20
    1f74:	05 06       	cpc	r0, r21
    1f76:	08 95       	ret

00001f78 <__fp_round>:
    1f78:	09 2e       	mov	r0, r25
    1f7a:	03 94       	inc	r0
    1f7c:	00 0c       	add	r0, r0
    1f7e:	11 f4       	brne	.+4      	; 0x1f84 <__fp_round+0xc>
    1f80:	88 23       	and	r24, r24
    1f82:	52 f0       	brmi	.+20     	; 0x1f98 <__fp_round+0x20>
    1f84:	bb 0f       	add	r27, r27
    1f86:	40 f4       	brcc	.+16     	; 0x1f98 <__fp_round+0x20>
    1f88:	bf 2b       	or	r27, r31
    1f8a:	11 f4       	brne	.+4      	; 0x1f90 <__fp_round+0x18>
    1f8c:	60 ff       	sbrs	r22, 0
    1f8e:	04 c0       	rjmp	.+8      	; 0x1f98 <__fp_round+0x20>
    1f90:	6f 5f       	subi	r22, 0xFF	; 255
    1f92:	7f 4f       	sbci	r23, 0xFF	; 255
    1f94:	8f 4f       	sbci	r24, 0xFF	; 255
    1f96:	9f 4f       	sbci	r25, 0xFF	; 255
    1f98:	08 95       	ret

00001f9a <__fp_split3>:
    1f9a:	57 fd       	sbrc	r21, 7
    1f9c:	90 58       	subi	r25, 0x80	; 128
    1f9e:	44 0f       	add	r20, r20
    1fa0:	55 1f       	adc	r21, r21
    1fa2:	59 f0       	breq	.+22     	; 0x1fba <__fp_splitA+0x10>
    1fa4:	5f 3f       	cpi	r21, 0xFF	; 255
    1fa6:	71 f0       	breq	.+28     	; 0x1fc4 <__fp_splitA+0x1a>
    1fa8:	47 95       	ror	r20

00001faa <__fp_splitA>:
    1faa:	88 0f       	add	r24, r24
    1fac:	97 fb       	bst	r25, 7
    1fae:	99 1f       	adc	r25, r25
    1fb0:	61 f0       	breq	.+24     	; 0x1fca <__fp_splitA+0x20>
    1fb2:	9f 3f       	cpi	r25, 0xFF	; 255
    1fb4:	79 f0       	breq	.+30     	; 0x1fd4 <__fp_splitA+0x2a>
    1fb6:	87 95       	ror	r24
    1fb8:	08 95       	ret
    1fba:	12 16       	cp	r1, r18
    1fbc:	13 06       	cpc	r1, r19
    1fbe:	14 06       	cpc	r1, r20
    1fc0:	55 1f       	adc	r21, r21
    1fc2:	f2 cf       	rjmp	.-28     	; 0x1fa8 <__fp_split3+0xe>
    1fc4:	46 95       	lsr	r20
    1fc6:	f1 df       	rcall	.-30     	; 0x1faa <__fp_splitA>
    1fc8:	08 c0       	rjmp	.+16     	; 0x1fda <__fp_splitA+0x30>
    1fca:	16 16       	cp	r1, r22
    1fcc:	17 06       	cpc	r1, r23
    1fce:	18 06       	cpc	r1, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	f1 cf       	rjmp	.-30     	; 0x1fb6 <__fp_splitA+0xc>
    1fd4:	86 95       	lsr	r24
    1fd6:	71 05       	cpc	r23, r1
    1fd8:	61 05       	cpc	r22, r1
    1fda:	08 94       	sec
    1fdc:	08 95       	ret

00001fde <__fp_zero>:
    1fde:	e8 94       	clt

00001fe0 <__fp_szero>:
    1fe0:	bb 27       	eor	r27, r27
    1fe2:	66 27       	eor	r22, r22
    1fe4:	77 27       	eor	r23, r23
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	97 f9       	bld	r25, 7
    1fea:	08 95       	ret

00001fec <__mulsf3>:
    1fec:	0b d0       	rcall	.+22     	; 0x2004 <__mulsf3x>
    1fee:	c4 cf       	rjmp	.-120    	; 0x1f78 <__fp_round>
    1ff0:	b5 df       	rcall	.-150    	; 0x1f5c <__fp_pscA>
    1ff2:	28 f0       	brcs	.+10     	; 0x1ffe <__mulsf3+0x12>
    1ff4:	ba df       	rcall	.-140    	; 0x1f6a <__fp_pscB>
    1ff6:	18 f0       	brcs	.+6      	; 0x1ffe <__mulsf3+0x12>
    1ff8:	95 23       	and	r25, r21
    1ffa:	09 f0       	breq	.+2      	; 0x1ffe <__mulsf3+0x12>
    1ffc:	a6 cf       	rjmp	.-180    	; 0x1f4a <__fp_inf>
    1ffe:	ab cf       	rjmp	.-170    	; 0x1f56 <__fp_nan>
    2000:	11 24       	eor	r1, r1
    2002:	ee cf       	rjmp	.-36     	; 0x1fe0 <__fp_szero>

00002004 <__mulsf3x>:
    2004:	ca df       	rcall	.-108    	; 0x1f9a <__fp_split3>
    2006:	a0 f3       	brcs	.-24     	; 0x1ff0 <__mulsf3+0x4>

00002008 <__mulsf3_pse>:
    2008:	95 9f       	mul	r25, r21
    200a:	d1 f3       	breq	.-12     	; 0x2000 <__mulsf3+0x14>
    200c:	95 0f       	add	r25, r21
    200e:	50 e0       	ldi	r21, 0x00	; 0
    2010:	55 1f       	adc	r21, r21
    2012:	62 9f       	mul	r22, r18
    2014:	f0 01       	movw	r30, r0
    2016:	72 9f       	mul	r23, r18
    2018:	bb 27       	eor	r27, r27
    201a:	f0 0d       	add	r31, r0
    201c:	b1 1d       	adc	r27, r1
    201e:	63 9f       	mul	r22, r19
    2020:	aa 27       	eor	r26, r26
    2022:	f0 0d       	add	r31, r0
    2024:	b1 1d       	adc	r27, r1
    2026:	aa 1f       	adc	r26, r26
    2028:	64 9f       	mul	r22, r20
    202a:	66 27       	eor	r22, r22
    202c:	b0 0d       	add	r27, r0
    202e:	a1 1d       	adc	r26, r1
    2030:	66 1f       	adc	r22, r22
    2032:	82 9f       	mul	r24, r18
    2034:	22 27       	eor	r18, r18
    2036:	b0 0d       	add	r27, r0
    2038:	a1 1d       	adc	r26, r1
    203a:	62 1f       	adc	r22, r18
    203c:	73 9f       	mul	r23, r19
    203e:	b0 0d       	add	r27, r0
    2040:	a1 1d       	adc	r26, r1
    2042:	62 1f       	adc	r22, r18
    2044:	83 9f       	mul	r24, r19
    2046:	a0 0d       	add	r26, r0
    2048:	61 1d       	adc	r22, r1
    204a:	22 1f       	adc	r18, r18
    204c:	74 9f       	mul	r23, r20
    204e:	33 27       	eor	r19, r19
    2050:	a0 0d       	add	r26, r0
    2052:	61 1d       	adc	r22, r1
    2054:	23 1f       	adc	r18, r19
    2056:	84 9f       	mul	r24, r20
    2058:	60 0d       	add	r22, r0
    205a:	21 1d       	adc	r18, r1
    205c:	82 2f       	mov	r24, r18
    205e:	76 2f       	mov	r23, r22
    2060:	6a 2f       	mov	r22, r26
    2062:	11 24       	eor	r1, r1
    2064:	9f 57       	subi	r25, 0x7F	; 127
    2066:	50 40       	sbci	r21, 0x00	; 0
    2068:	8a f0       	brmi	.+34     	; 0x208c <__mulsf3_pse+0x84>
    206a:	e1 f0       	breq	.+56     	; 0x20a4 <__mulsf3_pse+0x9c>
    206c:	88 23       	and	r24, r24
    206e:	4a f0       	brmi	.+18     	; 0x2082 <__mulsf3_pse+0x7a>
    2070:	ee 0f       	add	r30, r30
    2072:	ff 1f       	adc	r31, r31
    2074:	bb 1f       	adc	r27, r27
    2076:	66 1f       	adc	r22, r22
    2078:	77 1f       	adc	r23, r23
    207a:	88 1f       	adc	r24, r24
    207c:	91 50       	subi	r25, 0x01	; 1
    207e:	50 40       	sbci	r21, 0x00	; 0
    2080:	a9 f7       	brne	.-22     	; 0x206c <__mulsf3_pse+0x64>
    2082:	9e 3f       	cpi	r25, 0xFE	; 254
    2084:	51 05       	cpc	r21, r1
    2086:	70 f0       	brcs	.+28     	; 0x20a4 <__mulsf3_pse+0x9c>
    2088:	60 cf       	rjmp	.-320    	; 0x1f4a <__fp_inf>
    208a:	aa cf       	rjmp	.-172    	; 0x1fe0 <__fp_szero>
    208c:	5f 3f       	cpi	r21, 0xFF	; 255
    208e:	ec f3       	brlt	.-6      	; 0x208a <__mulsf3_pse+0x82>
    2090:	98 3e       	cpi	r25, 0xE8	; 232
    2092:	dc f3       	brlt	.-10     	; 0x208a <__mulsf3_pse+0x82>
    2094:	86 95       	lsr	r24
    2096:	77 95       	ror	r23
    2098:	67 95       	ror	r22
    209a:	b7 95       	ror	r27
    209c:	f7 95       	ror	r31
    209e:	e7 95       	ror	r30
    20a0:	9f 5f       	subi	r25, 0xFF	; 255
    20a2:	c1 f7       	brne	.-16     	; 0x2094 <__mulsf3_pse+0x8c>
    20a4:	fe 2b       	or	r31, r30
    20a6:	88 0f       	add	r24, r24
    20a8:	91 1d       	adc	r25, r1
    20aa:	96 95       	lsr	r25
    20ac:	87 95       	ror	r24
    20ae:	97 f9       	bld	r25, 7
    20b0:	08 95       	ret

000020b2 <__divmodhi4>:
    20b2:	97 fb       	bst	r25, 7
    20b4:	07 2e       	mov	r0, r23
    20b6:	16 f4       	brtc	.+4      	; 0x20bc <__divmodhi4+0xa>
    20b8:	00 94       	com	r0
    20ba:	06 d0       	rcall	.+12     	; 0x20c8 <__divmodhi4_neg1>
    20bc:	77 fd       	sbrc	r23, 7
    20be:	08 d0       	rcall	.+16     	; 0x20d0 <__divmodhi4_neg2>
    20c0:	27 d0       	rcall	.+78     	; 0x2110 <__udivmodhi4>
    20c2:	07 fc       	sbrc	r0, 7
    20c4:	05 d0       	rcall	.+10     	; 0x20d0 <__divmodhi4_neg2>
    20c6:	3e f4       	brtc	.+14     	; 0x20d6 <__divmodhi4_exit>

000020c8 <__divmodhi4_neg1>:
    20c8:	90 95       	com	r25
    20ca:	81 95       	neg	r24
    20cc:	9f 4f       	sbci	r25, 0xFF	; 255
    20ce:	08 95       	ret

000020d0 <__divmodhi4_neg2>:
    20d0:	70 95       	com	r23
    20d2:	61 95       	neg	r22
    20d4:	7f 4f       	sbci	r23, 0xFF	; 255

000020d6 <__divmodhi4_exit>:
    20d6:	08 95       	ret

000020d8 <__divmodsi4>:
    20d8:	05 2e       	mov	r0, r21
    20da:	97 fb       	bst	r25, 7
    20dc:	16 f4       	brtc	.+4      	; 0x20e2 <__divmodsi4+0xa>
    20de:	00 94       	com	r0
    20e0:	0f d0       	rcall	.+30     	; 0x2100 <__negsi2>
    20e2:	57 fd       	sbrc	r21, 7
    20e4:	05 d0       	rcall	.+10     	; 0x20f0 <__divmodsi4_neg2>
    20e6:	28 d0       	rcall	.+80     	; 0x2138 <__udivmodsi4>
    20e8:	07 fc       	sbrc	r0, 7
    20ea:	02 d0       	rcall	.+4      	; 0x20f0 <__divmodsi4_neg2>
    20ec:	46 f4       	brtc	.+16     	; 0x20fe <__divmodsi4_exit>
    20ee:	08 c0       	rjmp	.+16     	; 0x2100 <__negsi2>

000020f0 <__divmodsi4_neg2>:
    20f0:	50 95       	com	r21
    20f2:	40 95       	com	r20
    20f4:	30 95       	com	r19
    20f6:	21 95       	neg	r18
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	4f 4f       	sbci	r20, 0xFF	; 255
    20fc:	5f 4f       	sbci	r21, 0xFF	; 255

000020fe <__divmodsi4_exit>:
    20fe:	08 95       	ret

00002100 <__negsi2>:
    2100:	90 95       	com	r25
    2102:	80 95       	com	r24
    2104:	70 95       	com	r23
    2106:	61 95       	neg	r22
    2108:	7f 4f       	sbci	r23, 0xFF	; 255
    210a:	8f 4f       	sbci	r24, 0xFF	; 255
    210c:	9f 4f       	sbci	r25, 0xFF	; 255
    210e:	08 95       	ret

00002110 <__udivmodhi4>:
    2110:	aa 1b       	sub	r26, r26
    2112:	bb 1b       	sub	r27, r27
    2114:	51 e1       	ldi	r21, 0x11	; 17
    2116:	07 c0       	rjmp	.+14     	; 0x2126 <__udivmodhi4_ep>

00002118 <__udivmodhi4_loop>:
    2118:	aa 1f       	adc	r26, r26
    211a:	bb 1f       	adc	r27, r27
    211c:	a6 17       	cp	r26, r22
    211e:	b7 07       	cpc	r27, r23
    2120:	10 f0       	brcs	.+4      	; 0x2126 <__udivmodhi4_ep>
    2122:	a6 1b       	sub	r26, r22
    2124:	b7 0b       	sbc	r27, r23

00002126 <__udivmodhi4_ep>:
    2126:	88 1f       	adc	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	5a 95       	dec	r21
    212c:	a9 f7       	brne	.-22     	; 0x2118 <__udivmodhi4_loop>
    212e:	80 95       	com	r24
    2130:	90 95       	com	r25
    2132:	bc 01       	movw	r22, r24
    2134:	cd 01       	movw	r24, r26
    2136:	08 95       	ret

00002138 <__udivmodsi4>:
    2138:	a1 e2       	ldi	r26, 0x21	; 33
    213a:	1a 2e       	mov	r1, r26
    213c:	aa 1b       	sub	r26, r26
    213e:	bb 1b       	sub	r27, r27
    2140:	fd 01       	movw	r30, r26
    2142:	0d c0       	rjmp	.+26     	; 0x215e <__udivmodsi4_ep>

00002144 <__udivmodsi4_loop>:
    2144:	aa 1f       	adc	r26, r26
    2146:	bb 1f       	adc	r27, r27
    2148:	ee 1f       	adc	r30, r30
    214a:	ff 1f       	adc	r31, r31
    214c:	a2 17       	cp	r26, r18
    214e:	b3 07       	cpc	r27, r19
    2150:	e4 07       	cpc	r30, r20
    2152:	f5 07       	cpc	r31, r21
    2154:	20 f0       	brcs	.+8      	; 0x215e <__udivmodsi4_ep>
    2156:	a2 1b       	sub	r26, r18
    2158:	b3 0b       	sbc	r27, r19
    215a:	e4 0b       	sbc	r30, r20
    215c:	f5 0b       	sbc	r31, r21

0000215e <__udivmodsi4_ep>:
    215e:	66 1f       	adc	r22, r22
    2160:	77 1f       	adc	r23, r23
    2162:	88 1f       	adc	r24, r24
    2164:	99 1f       	adc	r25, r25
    2166:	1a 94       	dec	r1
    2168:	69 f7       	brne	.-38     	; 0x2144 <__udivmodsi4_loop>
    216a:	60 95       	com	r22
    216c:	70 95       	com	r23
    216e:	80 95       	com	r24
    2170:	90 95       	com	r25
    2172:	9b 01       	movw	r18, r22
    2174:	ac 01       	movw	r20, r24
    2176:	bd 01       	movw	r22, r26
    2178:	cf 01       	movw	r24, r30
    217a:	08 95       	ret

0000217c <strcpy_P>:
    217c:	fb 01       	movw	r30, r22
    217e:	dc 01       	movw	r26, r24
    2180:	05 90       	lpm	r0, Z+
    2182:	0d 92       	st	X+, r0
    2184:	00 20       	and	r0, r0
    2186:	e1 f7       	brne	.-8      	; 0x2180 <strcpy_P+0x4>
    2188:	08 95       	ret

0000218a <fdevopen>:
    218a:	0f 93       	push	r16
    218c:	1f 93       	push	r17
    218e:	cf 93       	push	r28
    2190:	df 93       	push	r29
    2192:	ec 01       	movw	r28, r24
    2194:	8b 01       	movw	r16, r22
    2196:	00 97       	sbiw	r24, 0x00	; 0
    2198:	31 f4       	brne	.+12     	; 0x21a6 <fdevopen+0x1c>
    219a:	61 15       	cp	r22, r1
    219c:	71 05       	cpc	r23, r1
    219e:	19 f4       	brne	.+6      	; 0x21a6 <fdevopen+0x1c>
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	37 c0       	rjmp	.+110    	; 0x2214 <fdevopen+0x8a>
    21a6:	6e e0       	ldi	r22, 0x0E	; 14
    21a8:	70 e0       	ldi	r23, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	38 d2       	rcall	.+1136   	; 0x2620 <calloc>
    21b0:	fc 01       	movw	r30, r24
    21b2:	00 97       	sbiw	r24, 0x00	; 0
    21b4:	a9 f3       	breq	.-22     	; 0x21a0 <fdevopen+0x16>
    21b6:	80 e8       	ldi	r24, 0x80	; 128
    21b8:	83 83       	std	Z+3, r24	; 0x03
    21ba:	01 15       	cp	r16, r1
    21bc:	11 05       	cpc	r17, r1
    21be:	71 f0       	breq	.+28     	; 0x21dc <fdevopen+0x52>
    21c0:	13 87       	std	Z+11, r17	; 0x0b
    21c2:	02 87       	std	Z+10, r16	; 0x0a
    21c4:	81 e8       	ldi	r24, 0x81	; 129
    21c6:	83 83       	std	Z+3, r24	; 0x03
    21c8:	80 91 11 04 	lds	r24, 0x0411
    21cc:	90 91 12 04 	lds	r25, 0x0412
    21d0:	89 2b       	or	r24, r25
    21d2:	21 f4       	brne	.+8      	; 0x21dc <fdevopen+0x52>
    21d4:	f0 93 12 04 	sts	0x0412, r31
    21d8:	e0 93 11 04 	sts	0x0411, r30
    21dc:	20 97       	sbiw	r28, 0x00	; 0
    21de:	c9 f0       	breq	.+50     	; 0x2212 <fdevopen+0x88>
    21e0:	d1 87       	std	Z+9, r29	; 0x09
    21e2:	c0 87       	std	Z+8, r28	; 0x08
    21e4:	83 81       	ldd	r24, Z+3	; 0x03
    21e6:	82 60       	ori	r24, 0x02	; 2
    21e8:	83 83       	std	Z+3, r24	; 0x03
    21ea:	80 91 13 04 	lds	r24, 0x0413
    21ee:	90 91 14 04 	lds	r25, 0x0414
    21f2:	89 2b       	or	r24, r25
    21f4:	71 f4       	brne	.+28     	; 0x2212 <fdevopen+0x88>
    21f6:	f0 93 14 04 	sts	0x0414, r31
    21fa:	e0 93 13 04 	sts	0x0413, r30
    21fe:	80 91 15 04 	lds	r24, 0x0415
    2202:	90 91 16 04 	lds	r25, 0x0416
    2206:	89 2b       	or	r24, r25
    2208:	21 f4       	brne	.+8      	; 0x2212 <fdevopen+0x88>
    220a:	f0 93 16 04 	sts	0x0416, r31
    220e:	e0 93 15 04 	sts	0x0415, r30
    2212:	cf 01       	movw	r24, r30
    2214:	df 91       	pop	r29
    2216:	cf 91       	pop	r28
    2218:	1f 91       	pop	r17
    221a:	0f 91       	pop	r16
    221c:	08 95       	ret

0000221e <printf>:
    221e:	a0 e0       	ldi	r26, 0x00	; 0
    2220:	b0 e0       	ldi	r27, 0x00	; 0
    2222:	e4 e1       	ldi	r30, 0x14	; 20
    2224:	f1 e1       	ldi	r31, 0x11	; 17
    2226:	fa c3       	rjmp	.+2036   	; 0x2a1c <__prologue_saves__+0x20>
    2228:	fe 01       	movw	r30, r28
    222a:	35 96       	adiw	r30, 0x05	; 5
    222c:	61 91       	ld	r22, Z+
    222e:	71 91       	ld	r23, Z+
    2230:	af 01       	movw	r20, r30
    2232:	80 91 13 04 	lds	r24, 0x0413
    2236:	90 91 14 04 	lds	r25, 0x0414
    223a:	2f d0       	rcall	.+94     	; 0x229a <vfprintf>
    223c:	e2 e0       	ldi	r30, 0x02	; 2
    223e:	0a c4       	rjmp	.+2068   	; 0x2a54 <__epilogue_restores__+0x20>

00002240 <puts>:
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	e0 91 13 04 	lds	r30, 0x0413
    224c:	f0 91 14 04 	lds	r31, 0x0414
    2250:	23 81       	ldd	r18, Z+3	; 0x03
    2252:	21 ff       	sbrs	r18, 1
    2254:	1b c0       	rjmp	.+54     	; 0x228c <puts+0x4c>
    2256:	ec 01       	movw	r28, r24
    2258:	00 e0       	ldi	r16, 0x00	; 0
    225a:	10 e0       	ldi	r17, 0x00	; 0
    225c:	89 91       	ld	r24, Y+
    225e:	60 91 13 04 	lds	r22, 0x0413
    2262:	70 91 14 04 	lds	r23, 0x0414
    2266:	db 01       	movw	r26, r22
    2268:	18 96       	adiw	r26, 0x08	; 8
    226a:	ed 91       	ld	r30, X+
    226c:	fc 91       	ld	r31, X
    226e:	19 97       	sbiw	r26, 0x09	; 9
    2270:	88 23       	and	r24, r24
    2272:	31 f0       	breq	.+12     	; 0x2280 <puts+0x40>
    2274:	09 95       	icall
    2276:	89 2b       	or	r24, r25
    2278:	89 f3       	breq	.-30     	; 0x225c <puts+0x1c>
    227a:	0f ef       	ldi	r16, 0xFF	; 255
    227c:	1f ef       	ldi	r17, 0xFF	; 255
    227e:	ee cf       	rjmp	.-36     	; 0x225c <puts+0x1c>
    2280:	8a e0       	ldi	r24, 0x0A	; 10
    2282:	09 95       	icall
    2284:	89 2b       	or	r24, r25
    2286:	11 f4       	brne	.+4      	; 0x228c <puts+0x4c>
    2288:	c8 01       	movw	r24, r16
    228a:	02 c0       	rjmp	.+4      	; 0x2290 <puts+0x50>
    228c:	8f ef       	ldi	r24, 0xFF	; 255
    228e:	9f ef       	ldi	r25, 0xFF	; 255
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	0f 91       	pop	r16
    2298:	08 95       	ret

0000229a <vfprintf>:
    229a:	ac e0       	ldi	r26, 0x0C	; 12
    229c:	b0 e0       	ldi	r27, 0x00	; 0
    229e:	e2 e5       	ldi	r30, 0x52	; 82
    22a0:	f1 e1       	ldi	r31, 0x11	; 17
    22a2:	ac c3       	rjmp	.+1880   	; 0x29fc <__prologue_saves__>
    22a4:	7c 01       	movw	r14, r24
    22a6:	6b 01       	movw	r12, r22
    22a8:	8a 01       	movw	r16, r20
    22aa:	fc 01       	movw	r30, r24
    22ac:	17 82       	std	Z+7, r1	; 0x07
    22ae:	16 82       	std	Z+6, r1	; 0x06
    22b0:	83 81       	ldd	r24, Z+3	; 0x03
    22b2:	81 ff       	sbrs	r24, 1
    22b4:	b0 c1       	rjmp	.+864    	; 0x2616 <vfprintf+0x37c>
    22b6:	ce 01       	movw	r24, r28
    22b8:	01 96       	adiw	r24, 0x01	; 1
    22ba:	4c 01       	movw	r8, r24
    22bc:	f7 01       	movw	r30, r14
    22be:	93 81       	ldd	r25, Z+3	; 0x03
    22c0:	f6 01       	movw	r30, r12
    22c2:	93 fd       	sbrc	r25, 3
    22c4:	85 91       	lpm	r24, Z+
    22c6:	93 ff       	sbrs	r25, 3
    22c8:	81 91       	ld	r24, Z+
    22ca:	6f 01       	movw	r12, r30
    22cc:	88 23       	and	r24, r24
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <vfprintf+0x38>
    22d0:	9e c1       	rjmp	.+828    	; 0x260e <vfprintf+0x374>
    22d2:	85 32       	cpi	r24, 0x25	; 37
    22d4:	39 f4       	brne	.+14     	; 0x22e4 <vfprintf+0x4a>
    22d6:	93 fd       	sbrc	r25, 3
    22d8:	85 91       	lpm	r24, Z+
    22da:	93 ff       	sbrs	r25, 3
    22dc:	81 91       	ld	r24, Z+
    22de:	6f 01       	movw	r12, r30
    22e0:	85 32       	cpi	r24, 0x25	; 37
    22e2:	21 f4       	brne	.+8      	; 0x22ec <vfprintf+0x52>
    22e4:	b7 01       	movw	r22, r14
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	f9 d2       	rcall	.+1522   	; 0x28dc <fputc>
    22ea:	e8 cf       	rjmp	.-48     	; 0x22bc <vfprintf+0x22>
    22ec:	51 2c       	mov	r5, r1
    22ee:	31 2c       	mov	r3, r1
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	20 32       	cpi	r18, 0x20	; 32
    22f4:	a0 f4       	brcc	.+40     	; 0x231e <vfprintf+0x84>
    22f6:	8b 32       	cpi	r24, 0x2B	; 43
    22f8:	69 f0       	breq	.+26     	; 0x2314 <vfprintf+0x7a>
    22fa:	30 f4       	brcc	.+12     	; 0x2308 <vfprintf+0x6e>
    22fc:	80 32       	cpi	r24, 0x20	; 32
    22fe:	59 f0       	breq	.+22     	; 0x2316 <vfprintf+0x7c>
    2300:	83 32       	cpi	r24, 0x23	; 35
    2302:	69 f4       	brne	.+26     	; 0x231e <vfprintf+0x84>
    2304:	20 61       	ori	r18, 0x10	; 16
    2306:	2c c0       	rjmp	.+88     	; 0x2360 <vfprintf+0xc6>
    2308:	8d 32       	cpi	r24, 0x2D	; 45
    230a:	39 f0       	breq	.+14     	; 0x231a <vfprintf+0x80>
    230c:	80 33       	cpi	r24, 0x30	; 48
    230e:	39 f4       	brne	.+14     	; 0x231e <vfprintf+0x84>
    2310:	21 60       	ori	r18, 0x01	; 1
    2312:	26 c0       	rjmp	.+76     	; 0x2360 <vfprintf+0xc6>
    2314:	22 60       	ori	r18, 0x02	; 2
    2316:	24 60       	ori	r18, 0x04	; 4
    2318:	23 c0       	rjmp	.+70     	; 0x2360 <vfprintf+0xc6>
    231a:	28 60       	ori	r18, 0x08	; 8
    231c:	21 c0       	rjmp	.+66     	; 0x2360 <vfprintf+0xc6>
    231e:	27 fd       	sbrc	r18, 7
    2320:	27 c0       	rjmp	.+78     	; 0x2370 <vfprintf+0xd6>
    2322:	30 ed       	ldi	r19, 0xD0	; 208
    2324:	38 0f       	add	r19, r24
    2326:	3a 30       	cpi	r19, 0x0A	; 10
    2328:	78 f4       	brcc	.+30     	; 0x2348 <vfprintf+0xae>
    232a:	26 ff       	sbrs	r18, 6
    232c:	06 c0       	rjmp	.+12     	; 0x233a <vfprintf+0xa0>
    232e:	fa e0       	ldi	r31, 0x0A	; 10
    2330:	5f 9e       	mul	r5, r31
    2332:	30 0d       	add	r19, r0
    2334:	11 24       	eor	r1, r1
    2336:	53 2e       	mov	r5, r19
    2338:	13 c0       	rjmp	.+38     	; 0x2360 <vfprintf+0xc6>
    233a:	8a e0       	ldi	r24, 0x0A	; 10
    233c:	38 9e       	mul	r3, r24
    233e:	30 0d       	add	r19, r0
    2340:	11 24       	eor	r1, r1
    2342:	33 2e       	mov	r3, r19
    2344:	20 62       	ori	r18, 0x20	; 32
    2346:	0c c0       	rjmp	.+24     	; 0x2360 <vfprintf+0xc6>
    2348:	8e 32       	cpi	r24, 0x2E	; 46
    234a:	21 f4       	brne	.+8      	; 0x2354 <vfprintf+0xba>
    234c:	26 fd       	sbrc	r18, 6
    234e:	5f c1       	rjmp	.+702    	; 0x260e <vfprintf+0x374>
    2350:	20 64       	ori	r18, 0x40	; 64
    2352:	06 c0       	rjmp	.+12     	; 0x2360 <vfprintf+0xc6>
    2354:	8c 36       	cpi	r24, 0x6C	; 108
    2356:	11 f4       	brne	.+4      	; 0x235c <vfprintf+0xc2>
    2358:	20 68       	ori	r18, 0x80	; 128
    235a:	02 c0       	rjmp	.+4      	; 0x2360 <vfprintf+0xc6>
    235c:	88 36       	cpi	r24, 0x68	; 104
    235e:	41 f4       	brne	.+16     	; 0x2370 <vfprintf+0xd6>
    2360:	f6 01       	movw	r30, r12
    2362:	93 fd       	sbrc	r25, 3
    2364:	85 91       	lpm	r24, Z+
    2366:	93 ff       	sbrs	r25, 3
    2368:	81 91       	ld	r24, Z+
    236a:	6f 01       	movw	r12, r30
    236c:	81 11       	cpse	r24, r1
    236e:	c1 cf       	rjmp	.-126    	; 0x22f2 <vfprintf+0x58>
    2370:	98 2f       	mov	r25, r24
    2372:	9f 7d       	andi	r25, 0xDF	; 223
    2374:	95 54       	subi	r25, 0x45	; 69
    2376:	93 30       	cpi	r25, 0x03	; 3
    2378:	28 f4       	brcc	.+10     	; 0x2384 <vfprintf+0xea>
    237a:	0c 5f       	subi	r16, 0xFC	; 252
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	ff e3       	ldi	r31, 0x3F	; 63
    2380:	f9 83       	std	Y+1, r31	; 0x01
    2382:	0d c0       	rjmp	.+26     	; 0x239e <vfprintf+0x104>
    2384:	83 36       	cpi	r24, 0x63	; 99
    2386:	31 f0       	breq	.+12     	; 0x2394 <vfprintf+0xfa>
    2388:	83 37       	cpi	r24, 0x73	; 115
    238a:	71 f0       	breq	.+28     	; 0x23a8 <vfprintf+0x10e>
    238c:	83 35       	cpi	r24, 0x53	; 83
    238e:	09 f0       	breq	.+2      	; 0x2392 <vfprintf+0xf8>
    2390:	57 c0       	rjmp	.+174    	; 0x2440 <vfprintf+0x1a6>
    2392:	21 c0       	rjmp	.+66     	; 0x23d6 <vfprintf+0x13c>
    2394:	f8 01       	movw	r30, r16
    2396:	80 81       	ld	r24, Z
    2398:	89 83       	std	Y+1, r24	; 0x01
    239a:	0e 5f       	subi	r16, 0xFE	; 254
    239c:	1f 4f       	sbci	r17, 0xFF	; 255
    239e:	44 24       	eor	r4, r4
    23a0:	43 94       	inc	r4
    23a2:	51 2c       	mov	r5, r1
    23a4:	54 01       	movw	r10, r8
    23a6:	14 c0       	rjmp	.+40     	; 0x23d0 <vfprintf+0x136>
    23a8:	38 01       	movw	r6, r16
    23aa:	f2 e0       	ldi	r31, 0x02	; 2
    23ac:	6f 0e       	add	r6, r31
    23ae:	71 1c       	adc	r7, r1
    23b0:	f8 01       	movw	r30, r16
    23b2:	a0 80       	ld	r10, Z
    23b4:	b1 80       	ldd	r11, Z+1	; 0x01
    23b6:	26 ff       	sbrs	r18, 6
    23b8:	03 c0       	rjmp	.+6      	; 0x23c0 <vfprintf+0x126>
    23ba:	65 2d       	mov	r22, r5
    23bc:	70 e0       	ldi	r23, 0x00	; 0
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <vfprintf+0x12a>
    23c0:	6f ef       	ldi	r22, 0xFF	; 255
    23c2:	7f ef       	ldi	r23, 0xFF	; 255
    23c4:	c5 01       	movw	r24, r10
    23c6:	2c 87       	std	Y+12, r18	; 0x0c
    23c8:	7e d2       	rcall	.+1276   	; 0x28c6 <strnlen>
    23ca:	2c 01       	movw	r4, r24
    23cc:	83 01       	movw	r16, r6
    23ce:	2c 85       	ldd	r18, Y+12	; 0x0c
    23d0:	2f 77       	andi	r18, 0x7F	; 127
    23d2:	22 2e       	mov	r2, r18
    23d4:	16 c0       	rjmp	.+44     	; 0x2402 <vfprintf+0x168>
    23d6:	38 01       	movw	r6, r16
    23d8:	f2 e0       	ldi	r31, 0x02	; 2
    23da:	6f 0e       	add	r6, r31
    23dc:	71 1c       	adc	r7, r1
    23de:	f8 01       	movw	r30, r16
    23e0:	a0 80       	ld	r10, Z
    23e2:	b1 80       	ldd	r11, Z+1	; 0x01
    23e4:	26 ff       	sbrs	r18, 6
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <vfprintf+0x154>
    23e8:	65 2d       	mov	r22, r5
    23ea:	70 e0       	ldi	r23, 0x00	; 0
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <vfprintf+0x158>
    23ee:	6f ef       	ldi	r22, 0xFF	; 255
    23f0:	7f ef       	ldi	r23, 0xFF	; 255
    23f2:	c5 01       	movw	r24, r10
    23f4:	2c 87       	std	Y+12, r18	; 0x0c
    23f6:	55 d2       	rcall	.+1194   	; 0x28a2 <strnlen_P>
    23f8:	2c 01       	movw	r4, r24
    23fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    23fc:	20 68       	ori	r18, 0x80	; 128
    23fe:	22 2e       	mov	r2, r18
    2400:	83 01       	movw	r16, r6
    2402:	23 fc       	sbrc	r2, 3
    2404:	19 c0       	rjmp	.+50     	; 0x2438 <vfprintf+0x19e>
    2406:	83 2d       	mov	r24, r3
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	48 16       	cp	r4, r24
    240c:	59 06       	cpc	r5, r25
    240e:	a0 f4       	brcc	.+40     	; 0x2438 <vfprintf+0x19e>
    2410:	b7 01       	movw	r22, r14
    2412:	80 e2       	ldi	r24, 0x20	; 32
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	62 d2       	rcall	.+1220   	; 0x28dc <fputc>
    2418:	3a 94       	dec	r3
    241a:	f5 cf       	rjmp	.-22     	; 0x2406 <vfprintf+0x16c>
    241c:	f5 01       	movw	r30, r10
    241e:	27 fc       	sbrc	r2, 7
    2420:	85 91       	lpm	r24, Z+
    2422:	27 fe       	sbrs	r2, 7
    2424:	81 91       	ld	r24, Z+
    2426:	5f 01       	movw	r10, r30
    2428:	b7 01       	movw	r22, r14
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	57 d2       	rcall	.+1198   	; 0x28dc <fputc>
    242e:	31 10       	cpse	r3, r1
    2430:	3a 94       	dec	r3
    2432:	f1 e0       	ldi	r31, 0x01	; 1
    2434:	4f 1a       	sub	r4, r31
    2436:	51 08       	sbc	r5, r1
    2438:	41 14       	cp	r4, r1
    243a:	51 04       	cpc	r5, r1
    243c:	79 f7       	brne	.-34     	; 0x241c <vfprintf+0x182>
    243e:	de c0       	rjmp	.+444    	; 0x25fc <vfprintf+0x362>
    2440:	84 36       	cpi	r24, 0x64	; 100
    2442:	11 f0       	breq	.+4      	; 0x2448 <vfprintf+0x1ae>
    2444:	89 36       	cpi	r24, 0x69	; 105
    2446:	31 f5       	brne	.+76     	; 0x2494 <vfprintf+0x1fa>
    2448:	f8 01       	movw	r30, r16
    244a:	27 ff       	sbrs	r18, 7
    244c:	07 c0       	rjmp	.+14     	; 0x245c <vfprintf+0x1c2>
    244e:	60 81       	ld	r22, Z
    2450:	71 81       	ldd	r23, Z+1	; 0x01
    2452:	82 81       	ldd	r24, Z+2	; 0x02
    2454:	93 81       	ldd	r25, Z+3	; 0x03
    2456:	0c 5f       	subi	r16, 0xFC	; 252
    2458:	1f 4f       	sbci	r17, 0xFF	; 255
    245a:	08 c0       	rjmp	.+16     	; 0x246c <vfprintf+0x1d2>
    245c:	60 81       	ld	r22, Z
    245e:	71 81       	ldd	r23, Z+1	; 0x01
    2460:	88 27       	eor	r24, r24
    2462:	77 fd       	sbrc	r23, 7
    2464:	80 95       	com	r24
    2466:	98 2f       	mov	r25, r24
    2468:	0e 5f       	subi	r16, 0xFE	; 254
    246a:	1f 4f       	sbci	r17, 0xFF	; 255
    246c:	2f 76       	andi	r18, 0x6F	; 111
    246e:	b2 2e       	mov	r11, r18
    2470:	97 ff       	sbrs	r25, 7
    2472:	09 c0       	rjmp	.+18     	; 0x2486 <vfprintf+0x1ec>
    2474:	90 95       	com	r25
    2476:	80 95       	com	r24
    2478:	70 95       	com	r23
    247a:	61 95       	neg	r22
    247c:	7f 4f       	sbci	r23, 0xFF	; 255
    247e:	8f 4f       	sbci	r24, 0xFF	; 255
    2480:	9f 4f       	sbci	r25, 0xFF	; 255
    2482:	20 68       	ori	r18, 0x80	; 128
    2484:	b2 2e       	mov	r11, r18
    2486:	2a e0       	ldi	r18, 0x0A	; 10
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	a4 01       	movw	r20, r8
    248c:	59 d2       	rcall	.+1202   	; 0x2940 <__ultoa_invert>
    248e:	a8 2e       	mov	r10, r24
    2490:	a8 18       	sub	r10, r8
    2492:	43 c0       	rjmp	.+134    	; 0x251a <vfprintf+0x280>
    2494:	85 37       	cpi	r24, 0x75	; 117
    2496:	29 f4       	brne	.+10     	; 0x24a2 <vfprintf+0x208>
    2498:	2f 7e       	andi	r18, 0xEF	; 239
    249a:	b2 2e       	mov	r11, r18
    249c:	2a e0       	ldi	r18, 0x0A	; 10
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	25 c0       	rjmp	.+74     	; 0x24ec <vfprintf+0x252>
    24a2:	f2 2f       	mov	r31, r18
    24a4:	f9 7f       	andi	r31, 0xF9	; 249
    24a6:	bf 2e       	mov	r11, r31
    24a8:	8f 36       	cpi	r24, 0x6F	; 111
    24aa:	c1 f0       	breq	.+48     	; 0x24dc <vfprintf+0x242>
    24ac:	18 f4       	brcc	.+6      	; 0x24b4 <vfprintf+0x21a>
    24ae:	88 35       	cpi	r24, 0x58	; 88
    24b0:	79 f0       	breq	.+30     	; 0x24d0 <vfprintf+0x236>
    24b2:	ad c0       	rjmp	.+346    	; 0x260e <vfprintf+0x374>
    24b4:	80 37       	cpi	r24, 0x70	; 112
    24b6:	19 f0       	breq	.+6      	; 0x24be <vfprintf+0x224>
    24b8:	88 37       	cpi	r24, 0x78	; 120
    24ba:	21 f0       	breq	.+8      	; 0x24c4 <vfprintf+0x22a>
    24bc:	a8 c0       	rjmp	.+336    	; 0x260e <vfprintf+0x374>
    24be:	2f 2f       	mov	r18, r31
    24c0:	20 61       	ori	r18, 0x10	; 16
    24c2:	b2 2e       	mov	r11, r18
    24c4:	b4 fe       	sbrs	r11, 4
    24c6:	0d c0       	rjmp	.+26     	; 0x24e2 <vfprintf+0x248>
    24c8:	8b 2d       	mov	r24, r11
    24ca:	84 60       	ori	r24, 0x04	; 4
    24cc:	b8 2e       	mov	r11, r24
    24ce:	09 c0       	rjmp	.+18     	; 0x24e2 <vfprintf+0x248>
    24d0:	24 ff       	sbrs	r18, 4
    24d2:	0a c0       	rjmp	.+20     	; 0x24e8 <vfprintf+0x24e>
    24d4:	9f 2f       	mov	r25, r31
    24d6:	96 60       	ori	r25, 0x06	; 6
    24d8:	b9 2e       	mov	r11, r25
    24da:	06 c0       	rjmp	.+12     	; 0x24e8 <vfprintf+0x24e>
    24dc:	28 e0       	ldi	r18, 0x08	; 8
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <vfprintf+0x252>
    24e2:	20 e1       	ldi	r18, 0x10	; 16
    24e4:	30 e0       	ldi	r19, 0x00	; 0
    24e6:	02 c0       	rjmp	.+4      	; 0x24ec <vfprintf+0x252>
    24e8:	20 e1       	ldi	r18, 0x10	; 16
    24ea:	32 e0       	ldi	r19, 0x02	; 2
    24ec:	f8 01       	movw	r30, r16
    24ee:	b7 fe       	sbrs	r11, 7
    24f0:	07 c0       	rjmp	.+14     	; 0x2500 <vfprintf+0x266>
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	82 81       	ldd	r24, Z+2	; 0x02
    24f8:	93 81       	ldd	r25, Z+3	; 0x03
    24fa:	0c 5f       	subi	r16, 0xFC	; 252
    24fc:	1f 4f       	sbci	r17, 0xFF	; 255
    24fe:	06 c0       	rjmp	.+12     	; 0x250c <vfprintf+0x272>
    2500:	60 81       	ld	r22, Z
    2502:	71 81       	ldd	r23, Z+1	; 0x01
    2504:	80 e0       	ldi	r24, 0x00	; 0
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 5f       	subi	r16, 0xFE	; 254
    250a:	1f 4f       	sbci	r17, 0xFF	; 255
    250c:	a4 01       	movw	r20, r8
    250e:	18 d2       	rcall	.+1072   	; 0x2940 <__ultoa_invert>
    2510:	a8 2e       	mov	r10, r24
    2512:	a8 18       	sub	r10, r8
    2514:	fb 2d       	mov	r31, r11
    2516:	ff 77       	andi	r31, 0x7F	; 127
    2518:	bf 2e       	mov	r11, r31
    251a:	b6 fe       	sbrs	r11, 6
    251c:	0b c0       	rjmp	.+22     	; 0x2534 <vfprintf+0x29a>
    251e:	2b 2d       	mov	r18, r11
    2520:	2e 7f       	andi	r18, 0xFE	; 254
    2522:	a5 14       	cp	r10, r5
    2524:	50 f4       	brcc	.+20     	; 0x253a <vfprintf+0x2a0>
    2526:	b4 fe       	sbrs	r11, 4
    2528:	0a c0       	rjmp	.+20     	; 0x253e <vfprintf+0x2a4>
    252a:	b2 fc       	sbrc	r11, 2
    252c:	08 c0       	rjmp	.+16     	; 0x253e <vfprintf+0x2a4>
    252e:	2b 2d       	mov	r18, r11
    2530:	2e 7e       	andi	r18, 0xEE	; 238
    2532:	05 c0       	rjmp	.+10     	; 0x253e <vfprintf+0x2a4>
    2534:	7a 2c       	mov	r7, r10
    2536:	2b 2d       	mov	r18, r11
    2538:	03 c0       	rjmp	.+6      	; 0x2540 <vfprintf+0x2a6>
    253a:	7a 2c       	mov	r7, r10
    253c:	01 c0       	rjmp	.+2      	; 0x2540 <vfprintf+0x2a6>
    253e:	75 2c       	mov	r7, r5
    2540:	24 ff       	sbrs	r18, 4
    2542:	0d c0       	rjmp	.+26     	; 0x255e <vfprintf+0x2c4>
    2544:	fe 01       	movw	r30, r28
    2546:	ea 0d       	add	r30, r10
    2548:	f1 1d       	adc	r31, r1
    254a:	80 81       	ld	r24, Z
    254c:	80 33       	cpi	r24, 0x30	; 48
    254e:	11 f4       	brne	.+4      	; 0x2554 <vfprintf+0x2ba>
    2550:	29 7e       	andi	r18, 0xE9	; 233
    2552:	09 c0       	rjmp	.+18     	; 0x2566 <vfprintf+0x2cc>
    2554:	22 ff       	sbrs	r18, 2
    2556:	06 c0       	rjmp	.+12     	; 0x2564 <vfprintf+0x2ca>
    2558:	73 94       	inc	r7
    255a:	73 94       	inc	r7
    255c:	04 c0       	rjmp	.+8      	; 0x2566 <vfprintf+0x2cc>
    255e:	82 2f       	mov	r24, r18
    2560:	86 78       	andi	r24, 0x86	; 134
    2562:	09 f0       	breq	.+2      	; 0x2566 <vfprintf+0x2cc>
    2564:	73 94       	inc	r7
    2566:	23 fd       	sbrc	r18, 3
    2568:	12 c0       	rjmp	.+36     	; 0x258e <vfprintf+0x2f4>
    256a:	20 ff       	sbrs	r18, 0
    256c:	06 c0       	rjmp	.+12     	; 0x257a <vfprintf+0x2e0>
    256e:	5a 2c       	mov	r5, r10
    2570:	73 14       	cp	r7, r3
    2572:	18 f4       	brcc	.+6      	; 0x257a <vfprintf+0x2e0>
    2574:	53 0c       	add	r5, r3
    2576:	57 18       	sub	r5, r7
    2578:	73 2c       	mov	r7, r3
    257a:	73 14       	cp	r7, r3
    257c:	60 f4       	brcc	.+24     	; 0x2596 <vfprintf+0x2fc>
    257e:	b7 01       	movw	r22, r14
    2580:	80 e2       	ldi	r24, 0x20	; 32
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	2c 87       	std	Y+12, r18	; 0x0c
    2586:	aa d1       	rcall	.+852    	; 0x28dc <fputc>
    2588:	73 94       	inc	r7
    258a:	2c 85       	ldd	r18, Y+12	; 0x0c
    258c:	f6 cf       	rjmp	.-20     	; 0x257a <vfprintf+0x2e0>
    258e:	73 14       	cp	r7, r3
    2590:	10 f4       	brcc	.+4      	; 0x2596 <vfprintf+0x2fc>
    2592:	37 18       	sub	r3, r7
    2594:	01 c0       	rjmp	.+2      	; 0x2598 <vfprintf+0x2fe>
    2596:	31 2c       	mov	r3, r1
    2598:	24 ff       	sbrs	r18, 4
    259a:	11 c0       	rjmp	.+34     	; 0x25be <vfprintf+0x324>
    259c:	b7 01       	movw	r22, r14
    259e:	80 e3       	ldi	r24, 0x30	; 48
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	2c 87       	std	Y+12, r18	; 0x0c
    25a4:	9b d1       	rcall	.+822    	; 0x28dc <fputc>
    25a6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25a8:	22 ff       	sbrs	r18, 2
    25aa:	16 c0       	rjmp	.+44     	; 0x25d8 <vfprintf+0x33e>
    25ac:	21 ff       	sbrs	r18, 1
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <vfprintf+0x31c>
    25b0:	88 e5       	ldi	r24, 0x58	; 88
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <vfprintf+0x320>
    25b6:	88 e7       	ldi	r24, 0x78	; 120
    25b8:	90 e0       	ldi	r25, 0x00	; 0
    25ba:	b7 01       	movw	r22, r14
    25bc:	0c c0       	rjmp	.+24     	; 0x25d6 <vfprintf+0x33c>
    25be:	82 2f       	mov	r24, r18
    25c0:	86 78       	andi	r24, 0x86	; 134
    25c2:	51 f0       	breq	.+20     	; 0x25d8 <vfprintf+0x33e>
    25c4:	21 fd       	sbrc	r18, 1
    25c6:	02 c0       	rjmp	.+4      	; 0x25cc <vfprintf+0x332>
    25c8:	80 e2       	ldi	r24, 0x20	; 32
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <vfprintf+0x334>
    25cc:	8b e2       	ldi	r24, 0x2B	; 43
    25ce:	27 fd       	sbrc	r18, 7
    25d0:	8d e2       	ldi	r24, 0x2D	; 45
    25d2:	b7 01       	movw	r22, r14
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	82 d1       	rcall	.+772    	; 0x28dc <fputc>
    25d8:	a5 14       	cp	r10, r5
    25da:	30 f4       	brcc	.+12     	; 0x25e8 <vfprintf+0x34e>
    25dc:	b7 01       	movw	r22, r14
    25de:	80 e3       	ldi	r24, 0x30	; 48
    25e0:	90 e0       	ldi	r25, 0x00	; 0
    25e2:	7c d1       	rcall	.+760    	; 0x28dc <fputc>
    25e4:	5a 94       	dec	r5
    25e6:	f8 cf       	rjmp	.-16     	; 0x25d8 <vfprintf+0x33e>
    25e8:	aa 94       	dec	r10
    25ea:	f4 01       	movw	r30, r8
    25ec:	ea 0d       	add	r30, r10
    25ee:	f1 1d       	adc	r31, r1
    25f0:	80 81       	ld	r24, Z
    25f2:	b7 01       	movw	r22, r14
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	72 d1       	rcall	.+740    	; 0x28dc <fputc>
    25f8:	a1 10       	cpse	r10, r1
    25fa:	f6 cf       	rjmp	.-20     	; 0x25e8 <vfprintf+0x34e>
    25fc:	33 20       	and	r3, r3
    25fe:	09 f4       	brne	.+2      	; 0x2602 <vfprintf+0x368>
    2600:	5d ce       	rjmp	.-838    	; 0x22bc <vfprintf+0x22>
    2602:	b7 01       	movw	r22, r14
    2604:	80 e2       	ldi	r24, 0x20	; 32
    2606:	90 e0       	ldi	r25, 0x00	; 0
    2608:	69 d1       	rcall	.+722    	; 0x28dc <fputc>
    260a:	3a 94       	dec	r3
    260c:	f7 cf       	rjmp	.-18     	; 0x25fc <vfprintf+0x362>
    260e:	f7 01       	movw	r30, r14
    2610:	86 81       	ldd	r24, Z+6	; 0x06
    2612:	97 81       	ldd	r25, Z+7	; 0x07
    2614:	02 c0       	rjmp	.+4      	; 0x261a <vfprintf+0x380>
    2616:	8f ef       	ldi	r24, 0xFF	; 255
    2618:	9f ef       	ldi	r25, 0xFF	; 255
    261a:	2c 96       	adiw	r28, 0x0c	; 12
    261c:	e2 e1       	ldi	r30, 0x12	; 18
    261e:	0a c2       	rjmp	.+1044   	; 0x2a34 <__epilogue_restores__>

00002620 <calloc>:
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	86 9f       	mul	r24, r22
    262a:	80 01       	movw	r16, r0
    262c:	87 9f       	mul	r24, r23
    262e:	10 0d       	add	r17, r0
    2630:	96 9f       	mul	r25, r22
    2632:	10 0d       	add	r17, r0
    2634:	11 24       	eor	r1, r1
    2636:	c8 01       	movw	r24, r16
    2638:	0d d0       	rcall	.+26     	; 0x2654 <malloc>
    263a:	ec 01       	movw	r28, r24
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	21 f0       	breq	.+8      	; 0x2648 <calloc+0x28>
    2640:	a8 01       	movw	r20, r16
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	38 d1       	rcall	.+624    	; 0x28b8 <memset>
    2648:	ce 01       	movw	r24, r28
    264a:	df 91       	pop	r29
    264c:	cf 91       	pop	r28
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	08 95       	ret

00002654 <malloc>:
    2654:	cf 93       	push	r28
    2656:	df 93       	push	r29
    2658:	82 30       	cpi	r24, 0x02	; 2
    265a:	91 05       	cpc	r25, r1
    265c:	10 f4       	brcc	.+4      	; 0x2662 <malloc+0xe>
    265e:	82 e0       	ldi	r24, 0x02	; 2
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	e0 91 19 04 	lds	r30, 0x0419
    2666:	f0 91 1a 04 	lds	r31, 0x041A
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	a0 e0       	ldi	r26, 0x00	; 0
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	30 97       	sbiw	r30, 0x00	; 0
    2674:	39 f1       	breq	.+78     	; 0x26c4 <malloc+0x70>
    2676:	40 81       	ld	r20, Z
    2678:	51 81       	ldd	r21, Z+1	; 0x01
    267a:	48 17       	cp	r20, r24
    267c:	59 07       	cpc	r21, r25
    267e:	b8 f0       	brcs	.+46     	; 0x26ae <malloc+0x5a>
    2680:	48 17       	cp	r20, r24
    2682:	59 07       	cpc	r21, r25
    2684:	71 f4       	brne	.+28     	; 0x26a2 <malloc+0x4e>
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	93 81       	ldd	r25, Z+3	; 0x03
    268a:	10 97       	sbiw	r26, 0x00	; 0
    268c:	29 f0       	breq	.+10     	; 0x2698 <malloc+0x44>
    268e:	13 96       	adiw	r26, 0x03	; 3
    2690:	9c 93       	st	X, r25
    2692:	8e 93       	st	-X, r24
    2694:	12 97       	sbiw	r26, 0x02	; 2
    2696:	2c c0       	rjmp	.+88     	; 0x26f0 <malloc+0x9c>
    2698:	90 93 1a 04 	sts	0x041A, r25
    269c:	80 93 19 04 	sts	0x0419, r24
    26a0:	27 c0       	rjmp	.+78     	; 0x26f0 <malloc+0x9c>
    26a2:	21 15       	cp	r18, r1
    26a4:	31 05       	cpc	r19, r1
    26a6:	31 f0       	breq	.+12     	; 0x26b4 <malloc+0x60>
    26a8:	42 17       	cp	r20, r18
    26aa:	53 07       	cpc	r21, r19
    26ac:	18 f0       	brcs	.+6      	; 0x26b4 <malloc+0x60>
    26ae:	a9 01       	movw	r20, r18
    26b0:	db 01       	movw	r26, r22
    26b2:	01 c0       	rjmp	.+2      	; 0x26b6 <malloc+0x62>
    26b4:	ef 01       	movw	r28, r30
    26b6:	9a 01       	movw	r18, r20
    26b8:	bd 01       	movw	r22, r26
    26ba:	df 01       	movw	r26, r30
    26bc:	02 80       	ldd	r0, Z+2	; 0x02
    26be:	f3 81       	ldd	r31, Z+3	; 0x03
    26c0:	e0 2d       	mov	r30, r0
    26c2:	d7 cf       	rjmp	.-82     	; 0x2672 <malloc+0x1e>
    26c4:	21 15       	cp	r18, r1
    26c6:	31 05       	cpc	r19, r1
    26c8:	f9 f0       	breq	.+62     	; 0x2708 <malloc+0xb4>
    26ca:	28 1b       	sub	r18, r24
    26cc:	39 0b       	sbc	r19, r25
    26ce:	24 30       	cpi	r18, 0x04	; 4
    26d0:	31 05       	cpc	r19, r1
    26d2:	80 f4       	brcc	.+32     	; 0x26f4 <malloc+0xa0>
    26d4:	8a 81       	ldd	r24, Y+2	; 0x02
    26d6:	9b 81       	ldd	r25, Y+3	; 0x03
    26d8:	61 15       	cp	r22, r1
    26da:	71 05       	cpc	r23, r1
    26dc:	21 f0       	breq	.+8      	; 0x26e6 <malloc+0x92>
    26de:	fb 01       	movw	r30, r22
    26e0:	93 83       	std	Z+3, r25	; 0x03
    26e2:	82 83       	std	Z+2, r24	; 0x02
    26e4:	04 c0       	rjmp	.+8      	; 0x26ee <malloc+0x9a>
    26e6:	90 93 1a 04 	sts	0x041A, r25
    26ea:	80 93 19 04 	sts	0x0419, r24
    26ee:	fe 01       	movw	r30, r28
    26f0:	32 96       	adiw	r30, 0x02	; 2
    26f2:	44 c0       	rjmp	.+136    	; 0x277c <malloc+0x128>
    26f4:	fe 01       	movw	r30, r28
    26f6:	e2 0f       	add	r30, r18
    26f8:	f3 1f       	adc	r31, r19
    26fa:	81 93       	st	Z+, r24
    26fc:	91 93       	st	Z+, r25
    26fe:	22 50       	subi	r18, 0x02	; 2
    2700:	31 09       	sbc	r19, r1
    2702:	39 83       	std	Y+1, r19	; 0x01
    2704:	28 83       	st	Y, r18
    2706:	3a c0       	rjmp	.+116    	; 0x277c <malloc+0x128>
    2708:	20 91 17 04 	lds	r18, 0x0417
    270c:	30 91 18 04 	lds	r19, 0x0418
    2710:	23 2b       	or	r18, r19
    2712:	41 f4       	brne	.+16     	; 0x2724 <malloc+0xd0>
    2714:	20 91 02 01 	lds	r18, 0x0102
    2718:	30 91 03 01 	lds	r19, 0x0103
    271c:	30 93 18 04 	sts	0x0418, r19
    2720:	20 93 17 04 	sts	0x0417, r18
    2724:	20 91 00 01 	lds	r18, 0x0100
    2728:	30 91 01 01 	lds	r19, 0x0101
    272c:	21 15       	cp	r18, r1
    272e:	31 05       	cpc	r19, r1
    2730:	41 f4       	brne	.+16     	; 0x2742 <malloc+0xee>
    2732:	2d b7       	in	r18, 0x3d	; 61
    2734:	3e b7       	in	r19, 0x3e	; 62
    2736:	40 91 04 01 	lds	r20, 0x0104
    273a:	50 91 05 01 	lds	r21, 0x0105
    273e:	24 1b       	sub	r18, r20
    2740:	35 0b       	sbc	r19, r21
    2742:	e0 91 17 04 	lds	r30, 0x0417
    2746:	f0 91 18 04 	lds	r31, 0x0418
    274a:	e2 17       	cp	r30, r18
    274c:	f3 07       	cpc	r31, r19
    274e:	a0 f4       	brcc	.+40     	; 0x2778 <malloc+0x124>
    2750:	2e 1b       	sub	r18, r30
    2752:	3f 0b       	sbc	r19, r31
    2754:	28 17       	cp	r18, r24
    2756:	39 07       	cpc	r19, r25
    2758:	78 f0       	brcs	.+30     	; 0x2778 <malloc+0x124>
    275a:	ac 01       	movw	r20, r24
    275c:	4e 5f       	subi	r20, 0xFE	; 254
    275e:	5f 4f       	sbci	r21, 0xFF	; 255
    2760:	24 17       	cp	r18, r20
    2762:	35 07       	cpc	r19, r21
    2764:	48 f0       	brcs	.+18     	; 0x2778 <malloc+0x124>
    2766:	4e 0f       	add	r20, r30
    2768:	5f 1f       	adc	r21, r31
    276a:	50 93 18 04 	sts	0x0418, r21
    276e:	40 93 17 04 	sts	0x0417, r20
    2772:	81 93       	st	Z+, r24
    2774:	91 93       	st	Z+, r25
    2776:	02 c0       	rjmp	.+4      	; 0x277c <malloc+0x128>
    2778:	e0 e0       	ldi	r30, 0x00	; 0
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	cf 01       	movw	r24, r30
    277e:	df 91       	pop	r29
    2780:	cf 91       	pop	r28
    2782:	08 95       	ret

00002784 <free>:
    2784:	cf 93       	push	r28
    2786:	df 93       	push	r29
    2788:	00 97       	sbiw	r24, 0x00	; 0
    278a:	09 f4       	brne	.+2      	; 0x278e <free+0xa>
    278c:	87 c0       	rjmp	.+270    	; 0x289c <free+0x118>
    278e:	fc 01       	movw	r30, r24
    2790:	32 97       	sbiw	r30, 0x02	; 2
    2792:	13 82       	std	Z+3, r1	; 0x03
    2794:	12 82       	std	Z+2, r1	; 0x02
    2796:	c0 91 19 04 	lds	r28, 0x0419
    279a:	d0 91 1a 04 	lds	r29, 0x041A
    279e:	20 97       	sbiw	r28, 0x00	; 0
    27a0:	81 f4       	brne	.+32     	; 0x27c2 <free+0x3e>
    27a2:	20 81       	ld	r18, Z
    27a4:	31 81       	ldd	r19, Z+1	; 0x01
    27a6:	28 0f       	add	r18, r24
    27a8:	39 1f       	adc	r19, r25
    27aa:	80 91 17 04 	lds	r24, 0x0417
    27ae:	90 91 18 04 	lds	r25, 0x0418
    27b2:	82 17       	cp	r24, r18
    27b4:	93 07       	cpc	r25, r19
    27b6:	79 f5       	brne	.+94     	; 0x2816 <free+0x92>
    27b8:	f0 93 18 04 	sts	0x0418, r31
    27bc:	e0 93 17 04 	sts	0x0417, r30
    27c0:	6d c0       	rjmp	.+218    	; 0x289c <free+0x118>
    27c2:	de 01       	movw	r26, r28
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	ae 17       	cp	r26, r30
    27ca:	bf 07       	cpc	r27, r31
    27cc:	50 f4       	brcc	.+20     	; 0x27e2 <free+0x5e>
    27ce:	12 96       	adiw	r26, 0x02	; 2
    27d0:	4d 91       	ld	r20, X+
    27d2:	5c 91       	ld	r21, X
    27d4:	13 97       	sbiw	r26, 0x03	; 3
    27d6:	9d 01       	movw	r18, r26
    27d8:	41 15       	cp	r20, r1
    27da:	51 05       	cpc	r21, r1
    27dc:	09 f1       	breq	.+66     	; 0x2820 <free+0x9c>
    27de:	da 01       	movw	r26, r20
    27e0:	f3 cf       	rjmp	.-26     	; 0x27c8 <free+0x44>
    27e2:	b3 83       	std	Z+3, r27	; 0x03
    27e4:	a2 83       	std	Z+2, r26	; 0x02
    27e6:	40 81       	ld	r20, Z
    27e8:	51 81       	ldd	r21, Z+1	; 0x01
    27ea:	84 0f       	add	r24, r20
    27ec:	95 1f       	adc	r25, r21
    27ee:	8a 17       	cp	r24, r26
    27f0:	9b 07       	cpc	r25, r27
    27f2:	71 f4       	brne	.+28     	; 0x2810 <free+0x8c>
    27f4:	8d 91       	ld	r24, X+
    27f6:	9c 91       	ld	r25, X
    27f8:	11 97       	sbiw	r26, 0x01	; 1
    27fa:	84 0f       	add	r24, r20
    27fc:	95 1f       	adc	r25, r21
    27fe:	02 96       	adiw	r24, 0x02	; 2
    2800:	91 83       	std	Z+1, r25	; 0x01
    2802:	80 83       	st	Z, r24
    2804:	12 96       	adiw	r26, 0x02	; 2
    2806:	8d 91       	ld	r24, X+
    2808:	9c 91       	ld	r25, X
    280a:	13 97       	sbiw	r26, 0x03	; 3
    280c:	93 83       	std	Z+3, r25	; 0x03
    280e:	82 83       	std	Z+2, r24	; 0x02
    2810:	21 15       	cp	r18, r1
    2812:	31 05       	cpc	r19, r1
    2814:	29 f4       	brne	.+10     	; 0x2820 <free+0x9c>
    2816:	f0 93 1a 04 	sts	0x041A, r31
    281a:	e0 93 19 04 	sts	0x0419, r30
    281e:	3e c0       	rjmp	.+124    	; 0x289c <free+0x118>
    2820:	d9 01       	movw	r26, r18
    2822:	13 96       	adiw	r26, 0x03	; 3
    2824:	fc 93       	st	X, r31
    2826:	ee 93       	st	-X, r30
    2828:	12 97       	sbiw	r26, 0x02	; 2
    282a:	4d 91       	ld	r20, X+
    282c:	5d 91       	ld	r21, X+
    282e:	a4 0f       	add	r26, r20
    2830:	b5 1f       	adc	r27, r21
    2832:	ea 17       	cp	r30, r26
    2834:	fb 07       	cpc	r31, r27
    2836:	79 f4       	brne	.+30     	; 0x2856 <free+0xd2>
    2838:	80 81       	ld	r24, Z
    283a:	91 81       	ldd	r25, Z+1	; 0x01
    283c:	84 0f       	add	r24, r20
    283e:	95 1f       	adc	r25, r21
    2840:	02 96       	adiw	r24, 0x02	; 2
    2842:	d9 01       	movw	r26, r18
    2844:	11 96       	adiw	r26, 0x01	; 1
    2846:	9c 93       	st	X, r25
    2848:	8e 93       	st	-X, r24
    284a:	82 81       	ldd	r24, Z+2	; 0x02
    284c:	93 81       	ldd	r25, Z+3	; 0x03
    284e:	13 96       	adiw	r26, 0x03	; 3
    2850:	9c 93       	st	X, r25
    2852:	8e 93       	st	-X, r24
    2854:	12 97       	sbiw	r26, 0x02	; 2
    2856:	e0 e0       	ldi	r30, 0x00	; 0
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	8a 81       	ldd	r24, Y+2	; 0x02
    285c:	9b 81       	ldd	r25, Y+3	; 0x03
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	19 f0       	breq	.+6      	; 0x2868 <free+0xe4>
    2862:	fe 01       	movw	r30, r28
    2864:	ec 01       	movw	r28, r24
    2866:	f9 cf       	rjmp	.-14     	; 0x285a <free+0xd6>
    2868:	ce 01       	movw	r24, r28
    286a:	02 96       	adiw	r24, 0x02	; 2
    286c:	28 81       	ld	r18, Y
    286e:	39 81       	ldd	r19, Y+1	; 0x01
    2870:	82 0f       	add	r24, r18
    2872:	93 1f       	adc	r25, r19
    2874:	20 91 17 04 	lds	r18, 0x0417
    2878:	30 91 18 04 	lds	r19, 0x0418
    287c:	28 17       	cp	r18, r24
    287e:	39 07       	cpc	r19, r25
    2880:	69 f4       	brne	.+26     	; 0x289c <free+0x118>
    2882:	30 97       	sbiw	r30, 0x00	; 0
    2884:	29 f4       	brne	.+10     	; 0x2890 <free+0x10c>
    2886:	10 92 1a 04 	sts	0x041A, r1
    288a:	10 92 19 04 	sts	0x0419, r1
    288e:	02 c0       	rjmp	.+4      	; 0x2894 <free+0x110>
    2890:	13 82       	std	Z+3, r1	; 0x03
    2892:	12 82       	std	Z+2, r1	; 0x02
    2894:	d0 93 18 04 	sts	0x0418, r29
    2898:	c0 93 17 04 	sts	0x0417, r28
    289c:	df 91       	pop	r29
    289e:	cf 91       	pop	r28
    28a0:	08 95       	ret

000028a2 <strnlen_P>:
    28a2:	fc 01       	movw	r30, r24
    28a4:	05 90       	lpm	r0, Z+
    28a6:	61 50       	subi	r22, 0x01	; 1
    28a8:	70 40       	sbci	r23, 0x00	; 0
    28aa:	01 10       	cpse	r0, r1
    28ac:	d8 f7       	brcc	.-10     	; 0x28a4 <strnlen_P+0x2>
    28ae:	80 95       	com	r24
    28b0:	90 95       	com	r25
    28b2:	8e 0f       	add	r24, r30
    28b4:	9f 1f       	adc	r25, r31
    28b6:	08 95       	ret

000028b8 <memset>:
    28b8:	dc 01       	movw	r26, r24
    28ba:	01 c0       	rjmp	.+2      	; 0x28be <memset+0x6>
    28bc:	6d 93       	st	X+, r22
    28be:	41 50       	subi	r20, 0x01	; 1
    28c0:	50 40       	sbci	r21, 0x00	; 0
    28c2:	e0 f7       	brcc	.-8      	; 0x28bc <memset+0x4>
    28c4:	08 95       	ret

000028c6 <strnlen>:
    28c6:	fc 01       	movw	r30, r24
    28c8:	61 50       	subi	r22, 0x01	; 1
    28ca:	70 40       	sbci	r23, 0x00	; 0
    28cc:	01 90       	ld	r0, Z+
    28ce:	01 10       	cpse	r0, r1
    28d0:	d8 f7       	brcc	.-10     	; 0x28c8 <strnlen+0x2>
    28d2:	80 95       	com	r24
    28d4:	90 95       	com	r25
    28d6:	8e 0f       	add	r24, r30
    28d8:	9f 1f       	adc	r25, r31
    28da:	08 95       	ret

000028dc <fputc>:
    28dc:	0f 93       	push	r16
    28de:	1f 93       	push	r17
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	18 2f       	mov	r17, r24
    28e6:	09 2f       	mov	r16, r25
    28e8:	eb 01       	movw	r28, r22
    28ea:	8b 81       	ldd	r24, Y+3	; 0x03
    28ec:	81 fd       	sbrc	r24, 1
    28ee:	03 c0       	rjmp	.+6      	; 0x28f6 <fputc+0x1a>
    28f0:	8f ef       	ldi	r24, 0xFF	; 255
    28f2:	9f ef       	ldi	r25, 0xFF	; 255
    28f4:	20 c0       	rjmp	.+64     	; 0x2936 <fputc+0x5a>
    28f6:	82 ff       	sbrs	r24, 2
    28f8:	10 c0       	rjmp	.+32     	; 0x291a <fputc+0x3e>
    28fa:	4e 81       	ldd	r20, Y+6	; 0x06
    28fc:	5f 81       	ldd	r21, Y+7	; 0x07
    28fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2900:	3d 81       	ldd	r19, Y+5	; 0x05
    2902:	42 17       	cp	r20, r18
    2904:	53 07       	cpc	r21, r19
    2906:	7c f4       	brge	.+30     	; 0x2926 <fputc+0x4a>
    2908:	e8 81       	ld	r30, Y
    290a:	f9 81       	ldd	r31, Y+1	; 0x01
    290c:	9f 01       	movw	r18, r30
    290e:	2f 5f       	subi	r18, 0xFF	; 255
    2910:	3f 4f       	sbci	r19, 0xFF	; 255
    2912:	39 83       	std	Y+1, r19	; 0x01
    2914:	28 83       	st	Y, r18
    2916:	10 83       	st	Z, r17
    2918:	06 c0       	rjmp	.+12     	; 0x2926 <fputc+0x4a>
    291a:	e8 85       	ldd	r30, Y+8	; 0x08
    291c:	f9 85       	ldd	r31, Y+9	; 0x09
    291e:	81 2f       	mov	r24, r17
    2920:	09 95       	icall
    2922:	89 2b       	or	r24, r25
    2924:	29 f7       	brne	.-54     	; 0x28f0 <fputc+0x14>
    2926:	2e 81       	ldd	r18, Y+6	; 0x06
    2928:	3f 81       	ldd	r19, Y+7	; 0x07
    292a:	2f 5f       	subi	r18, 0xFF	; 255
    292c:	3f 4f       	sbci	r19, 0xFF	; 255
    292e:	3f 83       	std	Y+7, r19	; 0x07
    2930:	2e 83       	std	Y+6, r18	; 0x06
    2932:	81 2f       	mov	r24, r17
    2934:	90 2f       	mov	r25, r16
    2936:	df 91       	pop	r29
    2938:	cf 91       	pop	r28
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <__ultoa_invert>:
    2940:	fa 01       	movw	r30, r20
    2942:	aa 27       	eor	r26, r26
    2944:	28 30       	cpi	r18, 0x08	; 8
    2946:	51 f1       	breq	.+84     	; 0x299c <__ultoa_invert+0x5c>
    2948:	20 31       	cpi	r18, 0x10	; 16
    294a:	81 f1       	breq	.+96     	; 0x29ac <__ultoa_invert+0x6c>
    294c:	e8 94       	clt
    294e:	6f 93       	push	r22
    2950:	6e 7f       	andi	r22, 0xFE	; 254
    2952:	6e 5f       	subi	r22, 0xFE	; 254
    2954:	7f 4f       	sbci	r23, 0xFF	; 255
    2956:	8f 4f       	sbci	r24, 0xFF	; 255
    2958:	9f 4f       	sbci	r25, 0xFF	; 255
    295a:	af 4f       	sbci	r26, 0xFF	; 255
    295c:	b1 e0       	ldi	r27, 0x01	; 1
    295e:	3e d0       	rcall	.+124    	; 0x29dc <__ultoa_invert+0x9c>
    2960:	b4 e0       	ldi	r27, 0x04	; 4
    2962:	3c d0       	rcall	.+120    	; 0x29dc <__ultoa_invert+0x9c>
    2964:	67 0f       	add	r22, r23
    2966:	78 1f       	adc	r23, r24
    2968:	89 1f       	adc	r24, r25
    296a:	9a 1f       	adc	r25, r26
    296c:	a1 1d       	adc	r26, r1
    296e:	68 0f       	add	r22, r24
    2970:	79 1f       	adc	r23, r25
    2972:	8a 1f       	adc	r24, r26
    2974:	91 1d       	adc	r25, r1
    2976:	a1 1d       	adc	r26, r1
    2978:	6a 0f       	add	r22, r26
    297a:	71 1d       	adc	r23, r1
    297c:	81 1d       	adc	r24, r1
    297e:	91 1d       	adc	r25, r1
    2980:	a1 1d       	adc	r26, r1
    2982:	20 d0       	rcall	.+64     	; 0x29c4 <__ultoa_invert+0x84>
    2984:	09 f4       	brne	.+2      	; 0x2988 <__ultoa_invert+0x48>
    2986:	68 94       	set
    2988:	3f 91       	pop	r19
    298a:	2a e0       	ldi	r18, 0x0A	; 10
    298c:	26 9f       	mul	r18, r22
    298e:	11 24       	eor	r1, r1
    2990:	30 19       	sub	r19, r0
    2992:	30 5d       	subi	r19, 0xD0	; 208
    2994:	31 93       	st	Z+, r19
    2996:	de f6       	brtc	.-74     	; 0x294e <__ultoa_invert+0xe>
    2998:	cf 01       	movw	r24, r30
    299a:	08 95       	ret
    299c:	46 2f       	mov	r20, r22
    299e:	47 70       	andi	r20, 0x07	; 7
    29a0:	40 5d       	subi	r20, 0xD0	; 208
    29a2:	41 93       	st	Z+, r20
    29a4:	b3 e0       	ldi	r27, 0x03	; 3
    29a6:	0f d0       	rcall	.+30     	; 0x29c6 <__ultoa_invert+0x86>
    29a8:	c9 f7       	brne	.-14     	; 0x299c <__ultoa_invert+0x5c>
    29aa:	f6 cf       	rjmp	.-20     	; 0x2998 <__ultoa_invert+0x58>
    29ac:	46 2f       	mov	r20, r22
    29ae:	4f 70       	andi	r20, 0x0F	; 15
    29b0:	40 5d       	subi	r20, 0xD0	; 208
    29b2:	4a 33       	cpi	r20, 0x3A	; 58
    29b4:	18 f0       	brcs	.+6      	; 0x29bc <__ultoa_invert+0x7c>
    29b6:	49 5d       	subi	r20, 0xD9	; 217
    29b8:	31 fd       	sbrc	r19, 1
    29ba:	40 52       	subi	r20, 0x20	; 32
    29bc:	41 93       	st	Z+, r20
    29be:	02 d0       	rcall	.+4      	; 0x29c4 <__ultoa_invert+0x84>
    29c0:	a9 f7       	brne	.-22     	; 0x29ac <__ultoa_invert+0x6c>
    29c2:	ea cf       	rjmp	.-44     	; 0x2998 <__ultoa_invert+0x58>
    29c4:	b4 e0       	ldi	r27, 0x04	; 4
    29c6:	a6 95       	lsr	r26
    29c8:	97 95       	ror	r25
    29ca:	87 95       	ror	r24
    29cc:	77 95       	ror	r23
    29ce:	67 95       	ror	r22
    29d0:	ba 95       	dec	r27
    29d2:	c9 f7       	brne	.-14     	; 0x29c6 <__ultoa_invert+0x86>
    29d4:	00 97       	sbiw	r24, 0x00	; 0
    29d6:	61 05       	cpc	r22, r1
    29d8:	71 05       	cpc	r23, r1
    29da:	08 95       	ret
    29dc:	9b 01       	movw	r18, r22
    29de:	ac 01       	movw	r20, r24
    29e0:	0a 2e       	mov	r0, r26
    29e2:	06 94       	lsr	r0
    29e4:	57 95       	ror	r21
    29e6:	47 95       	ror	r20
    29e8:	37 95       	ror	r19
    29ea:	27 95       	ror	r18
    29ec:	ba 95       	dec	r27
    29ee:	c9 f7       	brne	.-14     	; 0x29e2 <__ultoa_invert+0xa2>
    29f0:	62 0f       	add	r22, r18
    29f2:	73 1f       	adc	r23, r19
    29f4:	84 1f       	adc	r24, r20
    29f6:	95 1f       	adc	r25, r21
    29f8:	a0 1d       	adc	r26, r0
    29fa:	08 95       	ret

000029fc <__prologue_saves__>:
    29fc:	2f 92       	push	r2
    29fe:	3f 92       	push	r3
    2a00:	4f 92       	push	r4
    2a02:	5f 92       	push	r5
    2a04:	6f 92       	push	r6
    2a06:	7f 92       	push	r7
    2a08:	8f 92       	push	r8
    2a0a:	9f 92       	push	r9
    2a0c:	af 92       	push	r10
    2a0e:	bf 92       	push	r11
    2a10:	cf 92       	push	r12
    2a12:	df 92       	push	r13
    2a14:	ef 92       	push	r14
    2a16:	ff 92       	push	r15
    2a18:	0f 93       	push	r16
    2a1a:	1f 93       	push	r17
    2a1c:	cf 93       	push	r28
    2a1e:	df 93       	push	r29
    2a20:	cd b7       	in	r28, 0x3d	; 61
    2a22:	de b7       	in	r29, 0x3e	; 62
    2a24:	ca 1b       	sub	r28, r26
    2a26:	db 0b       	sbc	r29, r27
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	09 94       	ijmp

00002a34 <__epilogue_restores__>:
    2a34:	2a 88       	ldd	r2, Y+18	; 0x12
    2a36:	39 88       	ldd	r3, Y+17	; 0x11
    2a38:	48 88       	ldd	r4, Y+16	; 0x10
    2a3a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a3c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a3e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a40:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a42:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a44:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a46:	b9 84       	ldd	r11, Y+9	; 0x09
    2a48:	c8 84       	ldd	r12, Y+8	; 0x08
    2a4a:	df 80       	ldd	r13, Y+7	; 0x07
    2a4c:	ee 80       	ldd	r14, Y+6	; 0x06
    2a4e:	fd 80       	ldd	r15, Y+5	; 0x05
    2a50:	0c 81       	ldd	r16, Y+4	; 0x04
    2a52:	1b 81       	ldd	r17, Y+3	; 0x03
    2a54:	aa 81       	ldd	r26, Y+2	; 0x02
    2a56:	b9 81       	ldd	r27, Y+1	; 0x01
    2a58:	ce 0f       	add	r28, r30
    2a5a:	d1 1d       	adc	r29, r1
    2a5c:	0f b6       	in	r0, 0x3f	; 63
    2a5e:	f8 94       	cli
    2a60:	de bf       	out	0x3e, r29	; 62
    2a62:	0f be       	out	0x3f, r0	; 63
    2a64:	cd bf       	out	0x3d, r28	; 61
    2a66:	ed 01       	movw	r28, r26
    2a68:	08 95       	ret

00002a6a <_exit>:
    2a6a:	f8 94       	cli

00002a6c <__stop_program>:
    2a6c:	ff cf       	rjmp	.-2      	; 0x2a6c <__stop_program>
