
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000dc  00800200  00000d70  00000e04  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d70  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008002dc  008002dc  00000ee0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ee0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000011df  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007af  00000000  00000000  0000229b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b04  00000000  00000000  00002a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003e4  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000497  00000000  00000000  00003934  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009a5  00000000  00000000  00003dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004770  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	f2 c0       	rjmp	.+484    	; 0x1fa <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 e7       	ldi	r30, 0x70	; 112
  fc:	fd e0       	ldi	r31, 0x0D	; 13
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	ac 3d       	cpi	r26, 0xDC	; 220
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	ac ed       	ldi	r26, 0xDC	; 220
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 3f       	cpi	r26, 0xFD	; 253
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	b8 d1       	rcall	.+880    	; 0x490 <main>
 120:	25 c6       	rjmp	.+3146   	; 0xd6c <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){						// What does this step do //NOT NECCECARY, but if we want to reference the recieved data from another part of the program this is necceccary
	return &CAN_receive_buffer;						// What does this step do
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
 124:	90 93 de 02 	sts	0x02DE, r25
 128:	80 93 dd 02 	sts	0x02DD, r24
	CAN_send_buffer.length = length;
 12c:	60 93 df 02 	sts	0x02DF, r22
	for(uint8_t i = 0; i < length; i++){
 130:	66 23       	and	r22, r22
 132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
 134:	80 ee       	ldi	r24, 0xE0	; 224
 136:	92 e0       	ldi	r25, 0x02	; 2
 138:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
 13a:	11 92       	st	Z+, r1
 13c:	2e 2f       	mov	r18, r30
 13e:	28 1b       	sub	r18, r24
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
 140:	26 17       	cp	r18, r22
 142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
 144:	08 95       	ret

00000146 <CAN_read>:
	printf("\nSENT MESSAGE:");
	CAN_print(CAN_send_buffer);
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
 146:	31 c1       	rjmp	.+610    	; 0x3aa <MCP2515_read>
}
 148:	08 95       	ret

0000014a <CAN_print>:
		printf("\nRECIVED MESSAGE:");
		CAN_print(CAN_receive_buffer);
	}
}

void CAN_print(CAN_message_t message){
 14a:	cf 92       	push	r12
 14c:	df 92       	push	r13
 14e:	ef 92       	push	r14
 150:	ff 92       	push	r15
 152:	0f 93       	push	r16
 154:	1f 93       	push	r17
 156:	cf 93       	push	r28
 158:	df 93       	push	r29
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	2b 97       	sbiw	r28, 0x0b	; 11
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	e9 82       	std	Y+1, r14	; 0x01
 16c:	fa 82       	std	Y+2, r15	; 0x02
 16e:	c0 2e       	mov	r12, r16
 170:	0b 83       	std	Y+3, r16	; 0x03
 172:	1c 83       	std	Y+4, r17	; 0x04
 174:	2d 83       	std	Y+5, r18	; 0x05
 176:	3e 83       	std	Y+6, r19	; 0x06
 178:	4f 83       	std	Y+7, r20	; 0x07
 17a:	58 87       	std	Y+8, r21	; 0x08
 17c:	69 87       	std	Y+9, r22	; 0x09
 17e:	7a 87       	std	Y+10, r23	; 0x0a
 180:	8b 87       	std	Y+11, r24	; 0x0b
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
 182:	1f 92       	push	r1
 184:	0f 93       	push	r16
 186:	8a 81       	ldd	r24, Y+2	; 0x02
 188:	8f 93       	push	r24
 18a:	89 81       	ldd	r24, Y+1	; 0x01
 18c:	8f 93       	push	r24
 18e:	86 e0       	ldi	r24, 0x06	; 6
 190:	92 e0       	ldi	r25, 0x02	; 2
 192:	9f 93       	push	r25
 194:	8f 93       	push	r24
 196:	d0 d1       	rcall	.+928    	; 0x538 <printf>
	for(uint8_t i = 0; i < message.length; i++){
 198:	0f 90       	pop	r0
 19a:	0f 90       	pop	r0
 19c:	0f 90       	pop	r0
 19e:	0f 90       	pop	r0
 1a0:	0f 90       	pop	r0
 1a2:	0f 90       	pop	r0
 1a4:	00 23       	and	r16, r16
 1a6:	d1 f0       	breq	.+52     	; 0x1dc <CAN_print+0x92>
 1a8:	7e 01       	movw	r14, r28
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	e8 0e       	add	r14, r24
 1ae:	f1 1c       	adc	r15, r1
 1b0:	d1 2c       	mov	r13, r1
		printf("%i\t",message.data[i]);
 1b2:	0a e1       	ldi	r16, 0x1A	; 26
 1b4:	12 e0       	ldi	r17, 0x02	; 2
 1b6:	f7 01       	movw	r30, r14
 1b8:	21 91       	ld	r18, Z+
 1ba:	7f 01       	movw	r14, r30
 1bc:	82 2f       	mov	r24, r18
 1be:	99 27       	eor	r25, r25
 1c0:	87 fd       	sbrc	r24, 7
 1c2:	90 95       	com	r25
 1c4:	9f 93       	push	r25
 1c6:	2f 93       	push	r18
 1c8:	1f 93       	push	r17
 1ca:	0f 93       	push	r16
 1cc:	b5 d1       	rcall	.+874    	; 0x538 <printf>
	}
}

void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
 1ce:	d3 94       	inc	r13
 1d0:	0f 90       	pop	r0
 1d2:	0f 90       	pop	r0
 1d4:	0f 90       	pop	r0
 1d6:	0f 90       	pop	r0
 1d8:	dc 10       	cpse	r13, r12
 1da:	ed cf       	rjmp	.-38     	; 0x1b6 <CAN_print+0x6c>
		printf("%i\t",message.data[i]);
	}
}
 1dc:	2b 96       	adiw	r28, 0x0b	; 11
 1de:	0f b6       	in	r0, 0x3f	; 63
 1e0:	f8 94       	cli
 1e2:	de bf       	out	0x3e, r29	; 62
 1e4:	0f be       	out	0x3f, r0	; 63
 1e6:	cd bf       	out	0x3d, r28	; 61
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	0f 91       	pop	r16
 1f0:	ff 90       	pop	r15
 1f2:	ef 90       	pop	r14
 1f4:	df 90       	pop	r13
 1f6:	cf 90       	pop	r12
 1f8:	08 95       	ret

000001fa <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
	receive_flag = 1;
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	80 93 dc 02 	sts	0x02DC, r24
}
 20c:	8f 91       	pop	r24
 20e:	0f 90       	pop	r0
 210:	0f be       	out	0x3f, r0	; 63
 212:	0f 90       	pop	r0
 214:	1f 90       	pop	r1
 216:	18 95       	reti

00000218 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
 218:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
 21a:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
 21c:	ea e6       	ldi	r30, 0x6A	; 106
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	8e 7f       	andi	r24, 0xFE	; 254
 224:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
 226:	80 81       	ld	r24, Z
 228:	82 60       	ori	r24, 0x02	; 2
 22a:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
 22c:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
		
	
	#endif
	sei();
 22e:	78 94       	sei
 230:	08 95       	ret

00000232 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
 232:	e5 d0       	rcall	.+458    	; 0x3fe <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 234:	68 e0       	ldi	r22, 0x08	; 8
 236:	88 e2       	ldi	r24, 0x28	; 40
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	74 df       	rcall	.-280    	; 0x124 <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 23c:	4f ef       	ldi	r20, 0xFF	; 255
 23e:	50 e0       	ldi	r21, 0x00	; 0
 240:	64 e6       	ldi	r22, 0x64	; 100
 242:	80 e6       	ldi	r24, 0x60	; 96
 244:	c0 d0       	rcall	.+384    	; 0x3c6 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
 246:	4f ef       	ldi	r20, 0xFF	; 255
 248:	50 e0       	ldi	r21, 0x00	; 0
 24a:	64 e6       	ldi	r22, 0x64	; 100
 24c:	80 e7       	ldi	r24, 0x70	; 112
 24e:	bb d0       	rcall	.+374    	; 0x3c6 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 250:	41 e0       	ldi	r20, 0x01	; 1
 252:	50 e0       	ldi	r21, 0x00	; 0
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	8b e2       	ldi	r24, 0x2B	; 43
 258:	b6 d0       	rcall	.+364    	; 0x3c6 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
 25a:	40 e0       	ldi	r20, 0x00	; 0
 25c:	50 e0       	ldi	r21, 0x00	; 0
 25e:	60 ee       	ldi	r22, 0xE0	; 224
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	b1 d0       	rcall	.+354    	; 0x3c6 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
 264:	d9 df       	rcall	.-78     	; 0x218 <CAN_interrupt_setup>
	
	printf("MCP_CANSTAT: %i\n", MCP2515_read(MCP_CANSTAT));//comment out later
 266:	8e e0       	ldi	r24, 0x0E	; 14
 268:	a0 d0       	rcall	.+320    	; 0x3aa <MCP2515_read>
 26a:	9f 93       	push	r25
 26c:	8f 93       	push	r24
 26e:	8e e1       	ldi	r24, 0x1E	; 30
 270:	92 e0       	ldi	r25, 0x02	; 2
 272:	9f 93       	push	r25
 274:	8f 93       	push	r24
 276:	60 d1       	rcall	.+704    	; 0x538 <printf>
	printf("CAN initialized.\n\n");
 278:	8f e2       	ldi	r24, 0x2F	; 47
 27a:	92 e0       	ldi	r25, 0x02	; 2
 27c:	6e d1       	rcall	.+732    	; 0x55a <puts>
 27e:	0f 90       	pop	r0
 280:	0f 90       	pop	r0
 282:	0f 90       	pop	r0
 284:	0f 90       	pop	r0
 286:	08 95       	ret

00000288 <CAN_reception_complete>:
	
	#endif
	sei();
}

int8_t CAN_reception_complete(void){
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
	printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
 28c:	8c e2       	ldi	r24, 0x2C	; 44
 28e:	8d d0       	rcall	.+282    	; 0x3aa <MCP2515_read>
 290:	9f 93       	push	r25
 292:	8f 93       	push	r24
 294:	81 e4       	ldi	r24, 0x41	; 65
 296:	92 e0       	ldi	r25, 0x02	; 2
 298:	9f 93       	push	r25
 29a:	8f 93       	push	r24
 29c:	4d d1       	rcall	.+666    	; 0x538 <printf>
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) | (MCP2515_read(MCP_CANINTF) & MCP_RX1IF)));
 29e:	0f 90       	pop	r0
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	8c e2       	ldi	r24, 0x2C	; 44
 2a8:	80 d0       	rcall	.+256    	; 0x3aa <MCP2515_read>
 2aa:	ec 01       	movw	r28, r24
 2ac:	8c e2       	ldi	r24, 0x2C	; 44
 2ae:	7d d0       	rcall	.+250    	; 0x3aa <MCP2515_read>
 2b0:	82 70       	andi	r24, 0x02	; 2
 2b2:	99 27       	eor	r25, r25
 2b4:	c1 70       	andi	r28, 0x01	; 1
 2b6:	dd 27       	eor	r29, r29
 2b8:	c8 2b       	or	r28, r24
 2ba:	d9 2b       	or	r29, r25
 2bc:	cd 2b       	or	r28, r29
 2be:	99 f3       	breq	.-26     	; 0x2a6 <CAN_reception_complete+0x1e>
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
 2c0:	8c e2       	ldi	r24, 0x2C	; 44
 2c2:	73 d0       	rcall	.+230    	; 0x3aa <MCP2515_read>
 2c4:	80 ff       	sbrs	r24, 0
 2c6:	07 c0       	rjmp	.+14     	; 0x2d6 <CAN_reception_complete+0x4e>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
 2c8:	40 e0       	ldi	r20, 0x00	; 0
 2ca:	50 e0       	ldi	r21, 0x00	; 0
 2cc:	61 e0       	ldi	r22, 0x01	; 1
 2ce:	8c e2       	ldi	r24, 0x2C	; 44
 2d0:	7a d0       	rcall	.+244    	; 0x3c6 <MCP2515_bit_modify>
		return 0;
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	0c c0       	rjmp	.+24     	; 0x2ee <CAN_reception_complete+0x66>
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
 2d6:	8c e2       	ldi	r24, 0x2C	; 44
 2d8:	68 d0       	rcall	.+208    	; 0x3aa <MCP2515_read>
 2da:	81 ff       	sbrs	r24, 1
 2dc:	07 c0       	rjmp	.+14     	; 0x2ec <CAN_reception_complete+0x64>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	50 e0       	ldi	r21, 0x00	; 0
 2e2:	62 e0       	ldi	r22, 0x02	; 2
 2e4:	8c e2       	ldi	r24, 0x2C	; 44
 2e6:	6f d0       	rcall	.+222    	; 0x3c6 <MCP2515_bit_modify>
		return 1;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	01 c0       	rjmp	.+2      	; 0x2ee <CAN_reception_complete+0x66>
	}
	return -1;
 2ec:	8f ef       	ldi	r24, 0xFF	; 255
}
 2ee:	df 91       	pop	r29
 2f0:	cf 91       	pop	r28
 2f2:	08 95       	ret

000002f4 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

void CAN_data_receive(void) {
 2f4:	ef 92       	push	r14
 2f6:	ff 92       	push	r15
 2f8:	0f 93       	push	r16
 2fa:	1f 93       	push	r17
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
	if(receive_flag){
 300:	80 91 dc 02 	lds	r24, 0x02DC
 304:	88 23       	and	r24, r24
 306:	09 f4       	brne	.+2      	; 0x30a <CAN_data_receive+0x16>
 308:	49 c0       	rjmp	.+146    	; 0x39c <CAN_data_receive+0xa8>
		receive_flag = 0;
 30a:	10 92 dc 02 	sts	0x02DC, r1
		uint8_t n = CAN_reception_complete();
 30e:	bc df       	rcall	.-136    	; 0x288 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 310:	c8 2f       	mov	r28, r24
 312:	c2 95       	swap	r28
 314:	c0 7f       	andi	r28, 0xF0	; 240
 316:	82 e6       	ldi	r24, 0x62	; 98
 318:	8c 0f       	add	r24, r28
 31a:	15 df       	rcall	.-470    	; 0x146 <CAN_read>
 31c:	81 e6       	ldi	r24, 0x61	; 97
 31e:	8c 0f       	add	r24, r28
 320:	12 df       	rcall	.-476    	; 0x146 <CAN_read>
 322:	28 e0       	ldi	r18, 0x08	; 8
 324:	82 9f       	mul	r24, r18
 326:	c0 01       	movw	r24, r0
 328:	11 24       	eor	r1, r1
 32a:	90 93 e9 02 	sts	0x02E9, r25
 32e:	80 93 e8 02 	sts	0x02E8, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 332:	85 e6       	ldi	r24, 0x65	; 101
 334:	8c 0f       	add	r24, r28
 336:	07 df       	rcall	.-498    	; 0x146 <CAN_read>
 338:	8f 70       	andi	r24, 0x0F	; 15
 33a:	80 93 ea 02 	sts	0x02EA, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 33e:	88 23       	and	r24, r24
 340:	79 f0       	breq	.+30     	; 0x360 <CAN_data_receive+0x6c>
 342:	10 e0       	ldi	r17, 0x00	; 0
 344:	ca ee       	ldi	r28, 0xEA	; 234
 346:	d2 e0       	ldi	r29, 0x02	; 2
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
 348:	86 e6       	ldi	r24, 0x66	; 102
 34a:	81 0f       	add	r24, r17
 34c:	fc de       	rcall	.-520    	; 0x146 <CAN_read>
 34e:	e1 2f       	mov	r30, r17
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	e8 51       	subi	r30, 0x18	; 24
 354:	fd 4f       	sbci	r31, 0xFD	; 253
 356:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 358:	1f 5f       	subi	r17, 0xFF	; 255
 35a:	88 81       	ld	r24, Y
 35c:	18 17       	cp	r17, r24
 35e:	a0 f3       	brcs	.-24     	; 0x348 <CAN_data_receive+0x54>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		printf("\nRECIVED MESSAGE:");
 360:	82 e5       	ldi	r24, 0x52	; 82
 362:	92 e0       	ldi	r25, 0x02	; 2
 364:	9f 93       	push	r25
 366:	8f 93       	push	r24
 368:	e7 d0       	rcall	.+462    	; 0x538 <printf>
		CAN_print(CAN_receive_buffer);
 36a:	e0 90 e8 02 	lds	r14, 0x02E8
 36e:	f0 90 e9 02 	lds	r15, 0x02E9
 372:	00 91 ea 02 	lds	r16, 0x02EA
 376:	10 91 eb 02 	lds	r17, 0x02EB
 37a:	20 91 ec 02 	lds	r18, 0x02EC
 37e:	30 91 ed 02 	lds	r19, 0x02ED
 382:	40 91 ee 02 	lds	r20, 0x02EE
 386:	50 91 ef 02 	lds	r21, 0x02EF
 38a:	60 91 f0 02 	lds	r22, 0x02F0
 38e:	70 91 f1 02 	lds	r23, 0x02F1
 392:	80 91 f2 02 	lds	r24, 0x02F2
 396:	d9 de       	rcall	.-590    	; 0x14a <CAN_print>
 398:	0f 90       	pop	r0
 39a:	0f 90       	pop	r0
	}
}
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	0f 91       	pop	r16
 3a4:	ff 90       	pop	r15
 3a6:	ef 90       	pop	r14
 3a8:	08 95       	ret

000003aa <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
 3aa:	cf 93       	push	r28
 3ac:	c8 2f       	mov	r28, r24
 3ae:	36 d0       	rcall	.+108    	; 0x41c <SPI_select>
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	28 d0       	rcall	.+80     	; 0x404 <SPI_send>
 3b4:	8c 2f       	mov	r24, r28
 3b6:	26 d0       	rcall	.+76     	; 0x404 <SPI_send>
 3b8:	2a d0       	rcall	.+84     	; 0x40e <SPI_receive>
 3ba:	c8 2f       	mov	r28, r24
 3bc:	31 d0       	rcall	.+98     	; 0x420 <SPI_deselect>
 3be:	8c 2f       	mov	r24, r28
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	cf 91       	pop	r28
 3c4:	08 95       	ret

000003c6 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	18 2f       	mov	r17, r24
 3ce:	d6 2f       	mov	r29, r22
 3d0:	c4 2f       	mov	r28, r20
	SPI_select();
 3d2:	24 d0       	rcall	.+72     	; 0x41c <SPI_select>
	SPI_send(MCP_BITMOD);
 3d4:	85 e0       	ldi	r24, 0x05	; 5
 3d6:	16 d0       	rcall	.+44     	; 0x404 <SPI_send>
	SPI_send(adr);
 3d8:	81 2f       	mov	r24, r17
 3da:	14 d0       	rcall	.+40     	; 0x404 <SPI_send>
	SPI_send(mask);
 3dc:	8d 2f       	mov	r24, r29
 3de:	12 d0       	rcall	.+36     	; 0x404 <SPI_send>
	SPI_send(data);
 3e0:	8c 2f       	mov	r24, r28
 3e2:	10 d0       	rcall	.+32     	; 0x404 <SPI_send>
	SPI_deselect();
 3e4:	1d d0       	rcall	.+58     	; 0x420 <SPI_deselect>
}
 3e6:	df 91       	pop	r29
 3e8:	cf 91       	pop	r28
 3ea:	1f 91       	pop	r17
 3ec:	08 95       	ret

000003ee <MCP2515_reset>:


void MCP2515_reset(void){
	printf("Resetting MCP2515\n");
 3ee:	85 ea       	ldi	r24, 0xA5	; 165
 3f0:	92 e0       	ldi	r25, 0x02	; 2
 3f2:	b3 d0       	rcall	.+358    	; 0x55a <puts>
	SPI_select();
 3f4:	13 d0       	rcall	.+38     	; 0x41c <SPI_select>
	SPI_send(MCP_RESET);
 3f6:	80 ec       	ldi	r24, 0xC0	; 192
 3f8:	05 d0       	rcall	.+10     	; 0x404 <SPI_send>
	SPI_deselect();
 3fa:	12 c0       	rjmp	.+36     	; 0x420 <SPI_deselect>
 3fc:	08 95       	ret

000003fe <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
 3fe:	12 d0       	rcall	.+36     	; 0x424 <SPI_initialize>
	MCP2515_reset();
 400:	f6 cf       	rjmp	.-20     	; 0x3ee <MCP2515_reset>
 402:	08 95       	ret

00000404 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
 404:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 406:	0d b4       	in	r0, 0x2d	; 45
 408:	07 fe       	sbrs	r0, 7
 40a:	fd cf       	rjmp	.-6      	; 0x406 <SPI_send+0x2>

}
 40c:	08 95       	ret

0000040e <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	f9 df       	rcall	.-14     	; 0x404 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
 412:	0d b4       	in	r0, 0x2d	; 45
 414:	07 fe       	sbrs	r0, 7
 416:	fd cf       	rjmp	.-6      	; 0x412 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
 418:	8e b5       	in	r24, 0x2e	; 46
}
 41a:	08 95       	ret

0000041c <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 41c:	2f 98       	cbi	0x05, 7	; 5
 41e:	08 95       	ret

00000420 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 420:	2f 9a       	sbi	0x05, 7	; 5
 422:	08 95       	ret

00000424 <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
 424:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
 426:	8c b5       	in	r24, 0x2c	; 44
 428:	81 60       	ori	r24, 0x01	; 1
 42a:	8c bd       	out	0x2c, r24	; 44
	#endif
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
 42c:	84 b1       	in	r24, 0x04	; 4
 42e:	86 68       	ori	r24, 0x86	; 134
 430:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
 432:	8c b5       	in	r24, 0x2c	; 44
 434:	80 65       	ori	r24, 0x50	; 80
 436:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 438:	f3 df       	rcall	.-26     	; 0x420 <SPI_deselect>
	printf("SPI communication initialized.\n");
 43a:	87 eb       	ldi	r24, 0xB7	; 183
 43c:	92 e0       	ldi	r25, 0x02	; 2
 43e:	8d c0       	rjmp	.+282    	; 0x55a <puts>
 440:	08 95       	ret

00000442 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
 442:	e0 ec       	ldi	r30, 0xC0	; 192
 444:	f0 e0       	ldi	r31, 0x00	; 0
 446:	90 81       	ld	r25, Z
 448:	95 ff       	sbrs	r25, 5
 44a:	fd cf       	rjmp	.-6      	; 0x446 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
 44c:	80 93 c6 00 	sts	0x00C6, r24
 450:	08 95       	ret

00000452 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
 452:	e0 ec       	ldi	r30, 0xC0	; 192
 454:	f0 e0       	ldi	r31, 0x00	; 0
 456:	80 81       	ld	r24, Z
 458:	88 23       	and	r24, r24
 45a:	ec f7       	brge	.-6      	; 0x456 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
 45c:	80 91 c6 00 	lds	r24, 0x00C6
}
 460:	90 e0       	ldi	r25, 0x00	; 0
 462:	08 95       	ret

00000464 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
 464:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
 468:	87 e6       	ldi	r24, 0x67	; 103
 46a:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 46e:	88 e1       	ldi	r24, 0x18	; 24
 470:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 474:	8e e0       	ldi	r24, 0x0E	; 14
 476:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
 47a:	69 e2       	ldi	r22, 0x29	; 41
 47c:	72 e0       	ldi	r23, 0x02	; 2
 47e:	81 e2       	ldi	r24, 0x21	; 33
 480:	92 e0       	ldi	r25, 0x02	; 2
 482:	10 c0       	rjmp	.+32     	; 0x4a4 <fdevopen>
 484:	08 95       	ret

00000486 <init_all>:
    }
    
}

void init_all(void){
	cli();
 486:	f8 94       	cli
	init_UART();
 488:	ed df       	rcall	.-38     	; 0x464 <init_UART>
	CAN_initialize();
 48a:	d3 de       	rcall	.-602    	; 0x232 <CAN_initialize>
	
	sei();
 48c:	78 94       	sei
 48e:	08 95       	ret

00000490 <main>:
#include	"../../common_library/CAN.h"
void init_all(void);
#include <avr/delay.h>
int main(void)
{
	init_all();
 490:	fa df       	rcall	.-12     	; 0x486 <init_all>
	printf("test");
 492:	86 ed       	ldi	r24, 0xD6	; 214
 494:	92 e0       	ldi	r25, 0x02	; 2
 496:	9f 93       	push	r25
 498:	8f 93       	push	r24
 49a:	4e d0       	rcall	.+156    	; 0x538 <printf>
 49c:	0f 90       	pop	r0
 49e:	0f 90       	pop	r0
			_delay_ms(100);
	    }
	    
	    
	    if(~sendCAN){
		    CAN_data_receive();
 4a0:	29 df       	rcall	.-430    	; 0x2f4 <CAN_data_receive>
 4a2:	fe cf       	rjmp	.-4      	; 0x4a0 <main+0x10>

000004a4 <fdevopen>:
 4a4:	0f 93       	push	r16
 4a6:	1f 93       	push	r17
 4a8:	cf 93       	push	r28
 4aa:	df 93       	push	r29
 4ac:	ec 01       	movw	r28, r24
 4ae:	8b 01       	movw	r16, r22
 4b0:	00 97       	sbiw	r24, 0x00	; 0
 4b2:	31 f4       	brne	.+12     	; 0x4c0 <fdevopen+0x1c>
 4b4:	61 15       	cp	r22, r1
 4b6:	71 05       	cpc	r23, r1
 4b8:	19 f4       	brne	.+6      	; 0x4c0 <fdevopen+0x1c>
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	37 c0       	rjmp	.+110    	; 0x52e <fdevopen+0x8a>
 4c0:	6e e0       	ldi	r22, 0x0E	; 14
 4c2:	70 e0       	ldi	r23, 0x00	; 0
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	63 d2       	rcall	.+1222   	; 0x990 <calloc>
 4ca:	fc 01       	movw	r30, r24
 4cc:	00 97       	sbiw	r24, 0x00	; 0
 4ce:	a9 f3       	breq	.-22     	; 0x4ba <fdevopen+0x16>
 4d0:	80 e8       	ldi	r24, 0x80	; 128
 4d2:	83 83       	std	Z+3, r24	; 0x03
 4d4:	01 15       	cp	r16, r1
 4d6:	11 05       	cpc	r17, r1
 4d8:	71 f0       	breq	.+28     	; 0x4f6 <fdevopen+0x52>
 4da:	13 87       	std	Z+11, r17	; 0x0b
 4dc:	02 87       	std	Z+10, r16	; 0x0a
 4de:	81 e8       	ldi	r24, 0x81	; 129
 4e0:	83 83       	std	Z+3, r24	; 0x03
 4e2:	80 91 f3 02 	lds	r24, 0x02F3
 4e6:	90 91 f4 02 	lds	r25, 0x02F4
 4ea:	89 2b       	or	r24, r25
 4ec:	21 f4       	brne	.+8      	; 0x4f6 <fdevopen+0x52>
 4ee:	f0 93 f4 02 	sts	0x02F4, r31
 4f2:	e0 93 f3 02 	sts	0x02F3, r30
 4f6:	20 97       	sbiw	r28, 0x00	; 0
 4f8:	c9 f0       	breq	.+50     	; 0x52c <fdevopen+0x88>
 4fa:	d1 87       	std	Z+9, r29	; 0x09
 4fc:	c0 87       	std	Z+8, r28	; 0x08
 4fe:	83 81       	ldd	r24, Z+3	; 0x03
 500:	82 60       	ori	r24, 0x02	; 2
 502:	83 83       	std	Z+3, r24	; 0x03
 504:	80 91 f5 02 	lds	r24, 0x02F5
 508:	90 91 f6 02 	lds	r25, 0x02F6
 50c:	89 2b       	or	r24, r25
 50e:	71 f4       	brne	.+28     	; 0x52c <fdevopen+0x88>
 510:	f0 93 f6 02 	sts	0x02F6, r31
 514:	e0 93 f5 02 	sts	0x02F5, r30
 518:	80 91 f7 02 	lds	r24, 0x02F7
 51c:	90 91 f8 02 	lds	r25, 0x02F8
 520:	89 2b       	or	r24, r25
 522:	21 f4       	brne	.+8      	; 0x52c <fdevopen+0x88>
 524:	f0 93 f8 02 	sts	0x02F8, r31
 528:	e0 93 f7 02 	sts	0x02F7, r30
 52c:	cf 01       	movw	r24, r30
 52e:	df 91       	pop	r29
 530:	cf 91       	pop	r28
 532:	1f 91       	pop	r17
 534:	0f 91       	pop	r16
 536:	08 95       	ret

00000538 <printf>:
 538:	cf 93       	push	r28
 53a:	df 93       	push	r29
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	fe 01       	movw	r30, r28
 542:	36 96       	adiw	r30, 0x06	; 6
 544:	61 91       	ld	r22, Z+
 546:	71 91       	ld	r23, Z+
 548:	af 01       	movw	r20, r30
 54a:	80 91 f5 02 	lds	r24, 0x02F5
 54e:	90 91 f6 02 	lds	r25, 0x02F6
 552:	30 d0       	rcall	.+96     	; 0x5b4 <vfprintf>
 554:	df 91       	pop	r29
 556:	cf 91       	pop	r28
 558:	08 95       	ret

0000055a <puts>:
 55a:	0f 93       	push	r16
 55c:	1f 93       	push	r17
 55e:	cf 93       	push	r28
 560:	df 93       	push	r29
 562:	e0 91 f5 02 	lds	r30, 0x02F5
 566:	f0 91 f6 02 	lds	r31, 0x02F6
 56a:	23 81       	ldd	r18, Z+3	; 0x03
 56c:	21 ff       	sbrs	r18, 1
 56e:	1b c0       	rjmp	.+54     	; 0x5a6 <puts+0x4c>
 570:	ec 01       	movw	r28, r24
 572:	00 e0       	ldi	r16, 0x00	; 0
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	89 91       	ld	r24, Y+
 578:	60 91 f5 02 	lds	r22, 0x02F5
 57c:	70 91 f6 02 	lds	r23, 0x02F6
 580:	db 01       	movw	r26, r22
 582:	18 96       	adiw	r26, 0x08	; 8
 584:	ed 91       	ld	r30, X+
 586:	fc 91       	ld	r31, X
 588:	19 97       	sbiw	r26, 0x09	; 9
 58a:	88 23       	and	r24, r24
 58c:	31 f0       	breq	.+12     	; 0x59a <puts+0x40>
 58e:	19 95       	eicall
 590:	89 2b       	or	r24, r25
 592:	89 f3       	breq	.-30     	; 0x576 <puts+0x1c>
 594:	0f ef       	ldi	r16, 0xFF	; 255
 596:	1f ef       	ldi	r17, 0xFF	; 255
 598:	ee cf       	rjmp	.-36     	; 0x576 <puts+0x1c>
 59a:	8a e0       	ldi	r24, 0x0A	; 10
 59c:	19 95       	eicall
 59e:	89 2b       	or	r24, r25
 5a0:	11 f4       	brne	.+4      	; 0x5a6 <puts+0x4c>
 5a2:	c8 01       	movw	r24, r16
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <puts+0x50>
 5a6:	8f ef       	ldi	r24, 0xFF	; 255
 5a8:	9f ef       	ldi	r25, 0xFF	; 255
 5aa:	df 91       	pop	r29
 5ac:	cf 91       	pop	r28
 5ae:	1f 91       	pop	r17
 5b0:	0f 91       	pop	r16
 5b2:	08 95       	ret

000005b4 <vfprintf>:
 5b4:	2f 92       	push	r2
 5b6:	3f 92       	push	r3
 5b8:	4f 92       	push	r4
 5ba:	5f 92       	push	r5
 5bc:	6f 92       	push	r6
 5be:	7f 92       	push	r7
 5c0:	8f 92       	push	r8
 5c2:	9f 92       	push	r9
 5c4:	af 92       	push	r10
 5c6:	bf 92       	push	r11
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	cd b7       	in	r28, 0x3d	; 61
 5da:	de b7       	in	r29, 0x3e	; 62
 5dc:	2c 97       	sbiw	r28, 0x0c	; 12
 5de:	0f b6       	in	r0, 0x3f	; 63
 5e0:	f8 94       	cli
 5e2:	de bf       	out	0x3e, r29	; 62
 5e4:	0f be       	out	0x3f, r0	; 63
 5e6:	cd bf       	out	0x3d, r28	; 61
 5e8:	7c 01       	movw	r14, r24
 5ea:	6b 01       	movw	r12, r22
 5ec:	8a 01       	movw	r16, r20
 5ee:	fc 01       	movw	r30, r24
 5f0:	17 82       	std	Z+7, r1	; 0x07
 5f2:	16 82       	std	Z+6, r1	; 0x06
 5f4:	83 81       	ldd	r24, Z+3	; 0x03
 5f6:	81 ff       	sbrs	r24, 1
 5f8:	b0 c1       	rjmp	.+864    	; 0x95a <vfprintf+0x3a6>
 5fa:	ce 01       	movw	r24, r28
 5fc:	01 96       	adiw	r24, 0x01	; 1
 5fe:	4c 01       	movw	r8, r24
 600:	f7 01       	movw	r30, r14
 602:	93 81       	ldd	r25, Z+3	; 0x03
 604:	f6 01       	movw	r30, r12
 606:	93 fd       	sbrc	r25, 3
 608:	85 91       	lpm	r24, Z+
 60a:	93 ff       	sbrs	r25, 3
 60c:	81 91       	ld	r24, Z+
 60e:	6f 01       	movw	r12, r30
 610:	88 23       	and	r24, r24
 612:	09 f4       	brne	.+2      	; 0x616 <vfprintf+0x62>
 614:	9e c1       	rjmp	.+828    	; 0x952 <vfprintf+0x39e>
 616:	85 32       	cpi	r24, 0x25	; 37
 618:	39 f4       	brne	.+14     	; 0x628 <vfprintf+0x74>
 61a:	93 fd       	sbrc	r25, 3
 61c:	85 91       	lpm	r24, Z+
 61e:	93 ff       	sbrs	r25, 3
 620:	81 91       	ld	r24, Z+
 622:	6f 01       	movw	r12, r30
 624:	85 32       	cpi	r24, 0x25	; 37
 626:	21 f4       	brne	.+8      	; 0x630 <vfprintf+0x7c>
 628:	b7 01       	movw	r22, r14
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0f d3       	rcall	.+1566   	; 0xc4c <fputc>
 62e:	e8 cf       	rjmp	.-48     	; 0x600 <vfprintf+0x4c>
 630:	51 2c       	mov	r5, r1
 632:	31 2c       	mov	r3, r1
 634:	20 e0       	ldi	r18, 0x00	; 0
 636:	20 32       	cpi	r18, 0x20	; 32
 638:	a0 f4       	brcc	.+40     	; 0x662 <vfprintf+0xae>
 63a:	8b 32       	cpi	r24, 0x2B	; 43
 63c:	69 f0       	breq	.+26     	; 0x658 <vfprintf+0xa4>
 63e:	30 f4       	brcc	.+12     	; 0x64c <vfprintf+0x98>
 640:	80 32       	cpi	r24, 0x20	; 32
 642:	59 f0       	breq	.+22     	; 0x65a <vfprintf+0xa6>
 644:	83 32       	cpi	r24, 0x23	; 35
 646:	69 f4       	brne	.+26     	; 0x662 <vfprintf+0xae>
 648:	20 61       	ori	r18, 0x10	; 16
 64a:	2c c0       	rjmp	.+88     	; 0x6a4 <vfprintf+0xf0>
 64c:	8d 32       	cpi	r24, 0x2D	; 45
 64e:	39 f0       	breq	.+14     	; 0x65e <vfprintf+0xaa>
 650:	80 33       	cpi	r24, 0x30	; 48
 652:	39 f4       	brne	.+14     	; 0x662 <vfprintf+0xae>
 654:	21 60       	ori	r18, 0x01	; 1
 656:	26 c0       	rjmp	.+76     	; 0x6a4 <vfprintf+0xf0>
 658:	22 60       	ori	r18, 0x02	; 2
 65a:	24 60       	ori	r18, 0x04	; 4
 65c:	23 c0       	rjmp	.+70     	; 0x6a4 <vfprintf+0xf0>
 65e:	28 60       	ori	r18, 0x08	; 8
 660:	21 c0       	rjmp	.+66     	; 0x6a4 <vfprintf+0xf0>
 662:	27 fd       	sbrc	r18, 7
 664:	27 c0       	rjmp	.+78     	; 0x6b4 <vfprintf+0x100>
 666:	30 ed       	ldi	r19, 0xD0	; 208
 668:	38 0f       	add	r19, r24
 66a:	3a 30       	cpi	r19, 0x0A	; 10
 66c:	78 f4       	brcc	.+30     	; 0x68c <vfprintf+0xd8>
 66e:	26 ff       	sbrs	r18, 6
 670:	06 c0       	rjmp	.+12     	; 0x67e <vfprintf+0xca>
 672:	fa e0       	ldi	r31, 0x0A	; 10
 674:	5f 9e       	mul	r5, r31
 676:	30 0d       	add	r19, r0
 678:	11 24       	eor	r1, r1
 67a:	53 2e       	mov	r5, r19
 67c:	13 c0       	rjmp	.+38     	; 0x6a4 <vfprintf+0xf0>
 67e:	8a e0       	ldi	r24, 0x0A	; 10
 680:	38 9e       	mul	r3, r24
 682:	30 0d       	add	r19, r0
 684:	11 24       	eor	r1, r1
 686:	33 2e       	mov	r3, r19
 688:	20 62       	ori	r18, 0x20	; 32
 68a:	0c c0       	rjmp	.+24     	; 0x6a4 <vfprintf+0xf0>
 68c:	8e 32       	cpi	r24, 0x2E	; 46
 68e:	21 f4       	brne	.+8      	; 0x698 <vfprintf+0xe4>
 690:	26 fd       	sbrc	r18, 6
 692:	5f c1       	rjmp	.+702    	; 0x952 <vfprintf+0x39e>
 694:	20 64       	ori	r18, 0x40	; 64
 696:	06 c0       	rjmp	.+12     	; 0x6a4 <vfprintf+0xf0>
 698:	8c 36       	cpi	r24, 0x6C	; 108
 69a:	11 f4       	brne	.+4      	; 0x6a0 <vfprintf+0xec>
 69c:	20 68       	ori	r18, 0x80	; 128
 69e:	02 c0       	rjmp	.+4      	; 0x6a4 <vfprintf+0xf0>
 6a0:	88 36       	cpi	r24, 0x68	; 104
 6a2:	41 f4       	brne	.+16     	; 0x6b4 <vfprintf+0x100>
 6a4:	f6 01       	movw	r30, r12
 6a6:	93 fd       	sbrc	r25, 3
 6a8:	85 91       	lpm	r24, Z+
 6aa:	93 ff       	sbrs	r25, 3
 6ac:	81 91       	ld	r24, Z+
 6ae:	6f 01       	movw	r12, r30
 6b0:	81 11       	cpse	r24, r1
 6b2:	c1 cf       	rjmp	.-126    	; 0x636 <vfprintf+0x82>
 6b4:	98 2f       	mov	r25, r24
 6b6:	9f 7d       	andi	r25, 0xDF	; 223
 6b8:	95 54       	subi	r25, 0x45	; 69
 6ba:	93 30       	cpi	r25, 0x03	; 3
 6bc:	28 f4       	brcc	.+10     	; 0x6c8 <vfprintf+0x114>
 6be:	0c 5f       	subi	r16, 0xFC	; 252
 6c0:	1f 4f       	sbci	r17, 0xFF	; 255
 6c2:	ff e3       	ldi	r31, 0x3F	; 63
 6c4:	f9 83       	std	Y+1, r31	; 0x01
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <vfprintf+0x12e>
 6c8:	83 36       	cpi	r24, 0x63	; 99
 6ca:	31 f0       	breq	.+12     	; 0x6d8 <vfprintf+0x124>
 6cc:	83 37       	cpi	r24, 0x73	; 115
 6ce:	71 f0       	breq	.+28     	; 0x6ec <vfprintf+0x138>
 6d0:	83 35       	cpi	r24, 0x53	; 83
 6d2:	09 f0       	breq	.+2      	; 0x6d6 <vfprintf+0x122>
 6d4:	57 c0       	rjmp	.+174    	; 0x784 <vfprintf+0x1d0>
 6d6:	21 c0       	rjmp	.+66     	; 0x71a <vfprintf+0x166>
 6d8:	f8 01       	movw	r30, r16
 6da:	80 81       	ld	r24, Z
 6dc:	89 83       	std	Y+1, r24	; 0x01
 6de:	0e 5f       	subi	r16, 0xFE	; 254
 6e0:	1f 4f       	sbci	r17, 0xFF	; 255
 6e2:	44 24       	eor	r4, r4
 6e4:	43 94       	inc	r4
 6e6:	51 2c       	mov	r5, r1
 6e8:	54 01       	movw	r10, r8
 6ea:	14 c0       	rjmp	.+40     	; 0x714 <vfprintf+0x160>
 6ec:	38 01       	movw	r6, r16
 6ee:	f2 e0       	ldi	r31, 0x02	; 2
 6f0:	6f 0e       	add	r6, r31
 6f2:	71 1c       	adc	r7, r1
 6f4:	f8 01       	movw	r30, r16
 6f6:	a0 80       	ld	r10, Z
 6f8:	b1 80       	ldd	r11, Z+1	; 0x01
 6fa:	26 ff       	sbrs	r18, 6
 6fc:	03 c0       	rjmp	.+6      	; 0x704 <vfprintf+0x150>
 6fe:	65 2d       	mov	r22, r5
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <vfprintf+0x154>
 704:	6f ef       	ldi	r22, 0xFF	; 255
 706:	7f ef       	ldi	r23, 0xFF	; 255
 708:	c5 01       	movw	r24, r10
 70a:	2c 87       	std	Y+12, r18	; 0x0c
 70c:	94 d2       	rcall	.+1320   	; 0xc36 <strnlen>
 70e:	2c 01       	movw	r4, r24
 710:	83 01       	movw	r16, r6
 712:	2c 85       	ldd	r18, Y+12	; 0x0c
 714:	2f 77       	andi	r18, 0x7F	; 127
 716:	22 2e       	mov	r2, r18
 718:	16 c0       	rjmp	.+44     	; 0x746 <vfprintf+0x192>
 71a:	38 01       	movw	r6, r16
 71c:	f2 e0       	ldi	r31, 0x02	; 2
 71e:	6f 0e       	add	r6, r31
 720:	71 1c       	adc	r7, r1
 722:	f8 01       	movw	r30, r16
 724:	a0 80       	ld	r10, Z
 726:	b1 80       	ldd	r11, Z+1	; 0x01
 728:	26 ff       	sbrs	r18, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x17e>
 72c:	65 2d       	mov	r22, r5
 72e:	70 e0       	ldi	r23, 0x00	; 0
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x182>
 732:	6f ef       	ldi	r22, 0xFF	; 255
 734:	7f ef       	ldi	r23, 0xFF	; 255
 736:	c5 01       	movw	r24, r10
 738:	2c 87       	std	Y+12, r18	; 0x0c
 73a:	6b d2       	rcall	.+1238   	; 0xc12 <strnlen_P>
 73c:	2c 01       	movw	r4, r24
 73e:	2c 85       	ldd	r18, Y+12	; 0x0c
 740:	20 68       	ori	r18, 0x80	; 128
 742:	22 2e       	mov	r2, r18
 744:	83 01       	movw	r16, r6
 746:	23 fc       	sbrc	r2, 3
 748:	19 c0       	rjmp	.+50     	; 0x77c <vfprintf+0x1c8>
 74a:	83 2d       	mov	r24, r3
 74c:	90 e0       	ldi	r25, 0x00	; 0
 74e:	48 16       	cp	r4, r24
 750:	59 06       	cpc	r5, r25
 752:	a0 f4       	brcc	.+40     	; 0x77c <vfprintf+0x1c8>
 754:	b7 01       	movw	r22, r14
 756:	80 e2       	ldi	r24, 0x20	; 32
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	78 d2       	rcall	.+1264   	; 0xc4c <fputc>
 75c:	3a 94       	dec	r3
 75e:	f5 cf       	rjmp	.-22     	; 0x74a <vfprintf+0x196>
 760:	f5 01       	movw	r30, r10
 762:	27 fc       	sbrc	r2, 7
 764:	85 91       	lpm	r24, Z+
 766:	27 fe       	sbrs	r2, 7
 768:	81 91       	ld	r24, Z+
 76a:	5f 01       	movw	r10, r30
 76c:	b7 01       	movw	r22, r14
 76e:	90 e0       	ldi	r25, 0x00	; 0
 770:	6d d2       	rcall	.+1242   	; 0xc4c <fputc>
 772:	31 10       	cpse	r3, r1
 774:	3a 94       	dec	r3
 776:	f1 e0       	ldi	r31, 0x01	; 1
 778:	4f 1a       	sub	r4, r31
 77a:	51 08       	sbc	r5, r1
 77c:	41 14       	cp	r4, r1
 77e:	51 04       	cpc	r5, r1
 780:	79 f7       	brne	.-34     	; 0x760 <vfprintf+0x1ac>
 782:	de c0       	rjmp	.+444    	; 0x940 <vfprintf+0x38c>
 784:	84 36       	cpi	r24, 0x64	; 100
 786:	11 f0       	breq	.+4      	; 0x78c <vfprintf+0x1d8>
 788:	89 36       	cpi	r24, 0x69	; 105
 78a:	31 f5       	brne	.+76     	; 0x7d8 <vfprintf+0x224>
 78c:	f8 01       	movw	r30, r16
 78e:	27 ff       	sbrs	r18, 7
 790:	07 c0       	rjmp	.+14     	; 0x7a0 <vfprintf+0x1ec>
 792:	60 81       	ld	r22, Z
 794:	71 81       	ldd	r23, Z+1	; 0x01
 796:	82 81       	ldd	r24, Z+2	; 0x02
 798:	93 81       	ldd	r25, Z+3	; 0x03
 79a:	0c 5f       	subi	r16, 0xFC	; 252
 79c:	1f 4f       	sbci	r17, 0xFF	; 255
 79e:	08 c0       	rjmp	.+16     	; 0x7b0 <vfprintf+0x1fc>
 7a0:	60 81       	ld	r22, Z
 7a2:	71 81       	ldd	r23, Z+1	; 0x01
 7a4:	88 27       	eor	r24, r24
 7a6:	77 fd       	sbrc	r23, 7
 7a8:	80 95       	com	r24
 7aa:	98 2f       	mov	r25, r24
 7ac:	0e 5f       	subi	r16, 0xFE	; 254
 7ae:	1f 4f       	sbci	r17, 0xFF	; 255
 7b0:	2f 76       	andi	r18, 0x6F	; 111
 7b2:	b2 2e       	mov	r11, r18
 7b4:	97 ff       	sbrs	r25, 7
 7b6:	09 c0       	rjmp	.+18     	; 0x7ca <vfprintf+0x216>
 7b8:	90 95       	com	r25
 7ba:	80 95       	com	r24
 7bc:	70 95       	com	r23
 7be:	61 95       	neg	r22
 7c0:	7f 4f       	sbci	r23, 0xFF	; 255
 7c2:	8f 4f       	sbci	r24, 0xFF	; 255
 7c4:	9f 4f       	sbci	r25, 0xFF	; 255
 7c6:	20 68       	ori	r18, 0x80	; 128
 7c8:	b2 2e       	mov	r11, r18
 7ca:	2a e0       	ldi	r18, 0x0A	; 10
 7cc:	30 e0       	ldi	r19, 0x00	; 0
 7ce:	a4 01       	movw	r20, r8
 7d0:	6f d2       	rcall	.+1246   	; 0xcb0 <__ultoa_invert>
 7d2:	a8 2e       	mov	r10, r24
 7d4:	a8 18       	sub	r10, r8
 7d6:	43 c0       	rjmp	.+134    	; 0x85e <vfprintf+0x2aa>
 7d8:	85 37       	cpi	r24, 0x75	; 117
 7da:	29 f4       	brne	.+10     	; 0x7e6 <vfprintf+0x232>
 7dc:	2f 7e       	andi	r18, 0xEF	; 239
 7de:	b2 2e       	mov	r11, r18
 7e0:	2a e0       	ldi	r18, 0x0A	; 10
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	25 c0       	rjmp	.+74     	; 0x830 <vfprintf+0x27c>
 7e6:	f2 2f       	mov	r31, r18
 7e8:	f9 7f       	andi	r31, 0xF9	; 249
 7ea:	bf 2e       	mov	r11, r31
 7ec:	8f 36       	cpi	r24, 0x6F	; 111
 7ee:	c1 f0       	breq	.+48     	; 0x820 <vfprintf+0x26c>
 7f0:	18 f4       	brcc	.+6      	; 0x7f8 <vfprintf+0x244>
 7f2:	88 35       	cpi	r24, 0x58	; 88
 7f4:	79 f0       	breq	.+30     	; 0x814 <vfprintf+0x260>
 7f6:	ad c0       	rjmp	.+346    	; 0x952 <vfprintf+0x39e>
 7f8:	80 37       	cpi	r24, 0x70	; 112
 7fa:	19 f0       	breq	.+6      	; 0x802 <vfprintf+0x24e>
 7fc:	88 37       	cpi	r24, 0x78	; 120
 7fe:	21 f0       	breq	.+8      	; 0x808 <vfprintf+0x254>
 800:	a8 c0       	rjmp	.+336    	; 0x952 <vfprintf+0x39e>
 802:	2f 2f       	mov	r18, r31
 804:	20 61       	ori	r18, 0x10	; 16
 806:	b2 2e       	mov	r11, r18
 808:	b4 fe       	sbrs	r11, 4
 80a:	0d c0       	rjmp	.+26     	; 0x826 <vfprintf+0x272>
 80c:	8b 2d       	mov	r24, r11
 80e:	84 60       	ori	r24, 0x04	; 4
 810:	b8 2e       	mov	r11, r24
 812:	09 c0       	rjmp	.+18     	; 0x826 <vfprintf+0x272>
 814:	24 ff       	sbrs	r18, 4
 816:	0a c0       	rjmp	.+20     	; 0x82c <vfprintf+0x278>
 818:	9f 2f       	mov	r25, r31
 81a:	96 60       	ori	r25, 0x06	; 6
 81c:	b9 2e       	mov	r11, r25
 81e:	06 c0       	rjmp	.+12     	; 0x82c <vfprintf+0x278>
 820:	28 e0       	ldi	r18, 0x08	; 8
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	05 c0       	rjmp	.+10     	; 0x830 <vfprintf+0x27c>
 826:	20 e1       	ldi	r18, 0x10	; 16
 828:	30 e0       	ldi	r19, 0x00	; 0
 82a:	02 c0       	rjmp	.+4      	; 0x830 <vfprintf+0x27c>
 82c:	20 e1       	ldi	r18, 0x10	; 16
 82e:	32 e0       	ldi	r19, 0x02	; 2
 830:	f8 01       	movw	r30, r16
 832:	b7 fe       	sbrs	r11, 7
 834:	07 c0       	rjmp	.+14     	; 0x844 <vfprintf+0x290>
 836:	60 81       	ld	r22, Z
 838:	71 81       	ldd	r23, Z+1	; 0x01
 83a:	82 81       	ldd	r24, Z+2	; 0x02
 83c:	93 81       	ldd	r25, Z+3	; 0x03
 83e:	0c 5f       	subi	r16, 0xFC	; 252
 840:	1f 4f       	sbci	r17, 0xFF	; 255
 842:	06 c0       	rjmp	.+12     	; 0x850 <vfprintf+0x29c>
 844:	60 81       	ld	r22, Z
 846:	71 81       	ldd	r23, Z+1	; 0x01
 848:	80 e0       	ldi	r24, 0x00	; 0
 84a:	90 e0       	ldi	r25, 0x00	; 0
 84c:	0e 5f       	subi	r16, 0xFE	; 254
 84e:	1f 4f       	sbci	r17, 0xFF	; 255
 850:	a4 01       	movw	r20, r8
 852:	2e d2       	rcall	.+1116   	; 0xcb0 <__ultoa_invert>
 854:	a8 2e       	mov	r10, r24
 856:	a8 18       	sub	r10, r8
 858:	fb 2d       	mov	r31, r11
 85a:	ff 77       	andi	r31, 0x7F	; 127
 85c:	bf 2e       	mov	r11, r31
 85e:	b6 fe       	sbrs	r11, 6
 860:	0b c0       	rjmp	.+22     	; 0x878 <vfprintf+0x2c4>
 862:	2b 2d       	mov	r18, r11
 864:	2e 7f       	andi	r18, 0xFE	; 254
 866:	a5 14       	cp	r10, r5
 868:	50 f4       	brcc	.+20     	; 0x87e <vfprintf+0x2ca>
 86a:	b4 fe       	sbrs	r11, 4
 86c:	0a c0       	rjmp	.+20     	; 0x882 <vfprintf+0x2ce>
 86e:	b2 fc       	sbrc	r11, 2
 870:	08 c0       	rjmp	.+16     	; 0x882 <vfprintf+0x2ce>
 872:	2b 2d       	mov	r18, r11
 874:	2e 7e       	andi	r18, 0xEE	; 238
 876:	05 c0       	rjmp	.+10     	; 0x882 <vfprintf+0x2ce>
 878:	7a 2c       	mov	r7, r10
 87a:	2b 2d       	mov	r18, r11
 87c:	03 c0       	rjmp	.+6      	; 0x884 <vfprintf+0x2d0>
 87e:	7a 2c       	mov	r7, r10
 880:	01 c0       	rjmp	.+2      	; 0x884 <vfprintf+0x2d0>
 882:	75 2c       	mov	r7, r5
 884:	24 ff       	sbrs	r18, 4
 886:	0d c0       	rjmp	.+26     	; 0x8a2 <vfprintf+0x2ee>
 888:	fe 01       	movw	r30, r28
 88a:	ea 0d       	add	r30, r10
 88c:	f1 1d       	adc	r31, r1
 88e:	80 81       	ld	r24, Z
 890:	80 33       	cpi	r24, 0x30	; 48
 892:	11 f4       	brne	.+4      	; 0x898 <vfprintf+0x2e4>
 894:	29 7e       	andi	r18, 0xE9	; 233
 896:	09 c0       	rjmp	.+18     	; 0x8aa <vfprintf+0x2f6>
 898:	22 ff       	sbrs	r18, 2
 89a:	06 c0       	rjmp	.+12     	; 0x8a8 <vfprintf+0x2f4>
 89c:	73 94       	inc	r7
 89e:	73 94       	inc	r7
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <vfprintf+0x2f6>
 8a2:	82 2f       	mov	r24, r18
 8a4:	86 78       	andi	r24, 0x86	; 134
 8a6:	09 f0       	breq	.+2      	; 0x8aa <vfprintf+0x2f6>
 8a8:	73 94       	inc	r7
 8aa:	23 fd       	sbrc	r18, 3
 8ac:	12 c0       	rjmp	.+36     	; 0x8d2 <vfprintf+0x31e>
 8ae:	20 ff       	sbrs	r18, 0
 8b0:	06 c0       	rjmp	.+12     	; 0x8be <vfprintf+0x30a>
 8b2:	5a 2c       	mov	r5, r10
 8b4:	73 14       	cp	r7, r3
 8b6:	18 f4       	brcc	.+6      	; 0x8be <vfprintf+0x30a>
 8b8:	53 0c       	add	r5, r3
 8ba:	57 18       	sub	r5, r7
 8bc:	73 2c       	mov	r7, r3
 8be:	73 14       	cp	r7, r3
 8c0:	60 f4       	brcc	.+24     	; 0x8da <vfprintf+0x326>
 8c2:	b7 01       	movw	r22, r14
 8c4:	80 e2       	ldi	r24, 0x20	; 32
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	2c 87       	std	Y+12, r18	; 0x0c
 8ca:	c0 d1       	rcall	.+896    	; 0xc4c <fputc>
 8cc:	73 94       	inc	r7
 8ce:	2c 85       	ldd	r18, Y+12	; 0x0c
 8d0:	f6 cf       	rjmp	.-20     	; 0x8be <vfprintf+0x30a>
 8d2:	73 14       	cp	r7, r3
 8d4:	10 f4       	brcc	.+4      	; 0x8da <vfprintf+0x326>
 8d6:	37 18       	sub	r3, r7
 8d8:	01 c0       	rjmp	.+2      	; 0x8dc <vfprintf+0x328>
 8da:	31 2c       	mov	r3, r1
 8dc:	24 ff       	sbrs	r18, 4
 8de:	11 c0       	rjmp	.+34     	; 0x902 <vfprintf+0x34e>
 8e0:	b7 01       	movw	r22, r14
 8e2:	80 e3       	ldi	r24, 0x30	; 48
 8e4:	90 e0       	ldi	r25, 0x00	; 0
 8e6:	2c 87       	std	Y+12, r18	; 0x0c
 8e8:	b1 d1       	rcall	.+866    	; 0xc4c <fputc>
 8ea:	2c 85       	ldd	r18, Y+12	; 0x0c
 8ec:	22 ff       	sbrs	r18, 2
 8ee:	16 c0       	rjmp	.+44     	; 0x91c <vfprintf+0x368>
 8f0:	21 ff       	sbrs	r18, 1
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <vfprintf+0x346>
 8f4:	88 e5       	ldi	r24, 0x58	; 88
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x34a>
 8fa:	88 e7       	ldi	r24, 0x78	; 120
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	b7 01       	movw	r22, r14
 900:	0c c0       	rjmp	.+24     	; 0x91a <vfprintf+0x366>
 902:	82 2f       	mov	r24, r18
 904:	86 78       	andi	r24, 0x86	; 134
 906:	51 f0       	breq	.+20     	; 0x91c <vfprintf+0x368>
 908:	21 fd       	sbrc	r18, 1
 90a:	02 c0       	rjmp	.+4      	; 0x910 <vfprintf+0x35c>
 90c:	80 e2       	ldi	r24, 0x20	; 32
 90e:	01 c0       	rjmp	.+2      	; 0x912 <vfprintf+0x35e>
 910:	8b e2       	ldi	r24, 0x2B	; 43
 912:	27 fd       	sbrc	r18, 7
 914:	8d e2       	ldi	r24, 0x2D	; 45
 916:	b7 01       	movw	r22, r14
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	98 d1       	rcall	.+816    	; 0xc4c <fputc>
 91c:	a5 14       	cp	r10, r5
 91e:	30 f4       	brcc	.+12     	; 0x92c <vfprintf+0x378>
 920:	b7 01       	movw	r22, r14
 922:	80 e3       	ldi	r24, 0x30	; 48
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	92 d1       	rcall	.+804    	; 0xc4c <fputc>
 928:	5a 94       	dec	r5
 92a:	f8 cf       	rjmp	.-16     	; 0x91c <vfprintf+0x368>
 92c:	aa 94       	dec	r10
 92e:	f4 01       	movw	r30, r8
 930:	ea 0d       	add	r30, r10
 932:	f1 1d       	adc	r31, r1
 934:	80 81       	ld	r24, Z
 936:	b7 01       	movw	r22, r14
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	88 d1       	rcall	.+784    	; 0xc4c <fputc>
 93c:	a1 10       	cpse	r10, r1
 93e:	f6 cf       	rjmp	.-20     	; 0x92c <vfprintf+0x378>
 940:	33 20       	and	r3, r3
 942:	09 f4       	brne	.+2      	; 0x946 <vfprintf+0x392>
 944:	5d ce       	rjmp	.-838    	; 0x600 <vfprintf+0x4c>
 946:	b7 01       	movw	r22, r14
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	7f d1       	rcall	.+766    	; 0xc4c <fputc>
 94e:	3a 94       	dec	r3
 950:	f7 cf       	rjmp	.-18     	; 0x940 <vfprintf+0x38c>
 952:	f7 01       	movw	r30, r14
 954:	86 81       	ldd	r24, Z+6	; 0x06
 956:	97 81       	ldd	r25, Z+7	; 0x07
 958:	02 c0       	rjmp	.+4      	; 0x95e <vfprintf+0x3aa>
 95a:	8f ef       	ldi	r24, 0xFF	; 255
 95c:	9f ef       	ldi	r25, 0xFF	; 255
 95e:	2c 96       	adiw	r28, 0x0c	; 12
 960:	0f b6       	in	r0, 0x3f	; 63
 962:	f8 94       	cli
 964:	de bf       	out	0x3e, r29	; 62
 966:	0f be       	out	0x3f, r0	; 63
 968:	cd bf       	out	0x3d, r28	; 61
 96a:	df 91       	pop	r29
 96c:	cf 91       	pop	r28
 96e:	1f 91       	pop	r17
 970:	0f 91       	pop	r16
 972:	ff 90       	pop	r15
 974:	ef 90       	pop	r14
 976:	df 90       	pop	r13
 978:	cf 90       	pop	r12
 97a:	bf 90       	pop	r11
 97c:	af 90       	pop	r10
 97e:	9f 90       	pop	r9
 980:	8f 90       	pop	r8
 982:	7f 90       	pop	r7
 984:	6f 90       	pop	r6
 986:	5f 90       	pop	r5
 988:	4f 90       	pop	r4
 98a:	3f 90       	pop	r3
 98c:	2f 90       	pop	r2
 98e:	08 95       	ret

00000990 <calloc>:
 990:	0f 93       	push	r16
 992:	1f 93       	push	r17
 994:	cf 93       	push	r28
 996:	df 93       	push	r29
 998:	86 9f       	mul	r24, r22
 99a:	80 01       	movw	r16, r0
 99c:	87 9f       	mul	r24, r23
 99e:	10 0d       	add	r17, r0
 9a0:	96 9f       	mul	r25, r22
 9a2:	10 0d       	add	r17, r0
 9a4:	11 24       	eor	r1, r1
 9a6:	c8 01       	movw	r24, r16
 9a8:	0d d0       	rcall	.+26     	; 0x9c4 <malloc>
 9aa:	ec 01       	movw	r28, r24
 9ac:	00 97       	sbiw	r24, 0x00	; 0
 9ae:	21 f0       	breq	.+8      	; 0x9b8 <calloc+0x28>
 9b0:	a8 01       	movw	r20, r16
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	70 e0       	ldi	r23, 0x00	; 0
 9b6:	38 d1       	rcall	.+624    	; 0xc28 <memset>
 9b8:	ce 01       	movw	r24, r28
 9ba:	df 91       	pop	r29
 9bc:	cf 91       	pop	r28
 9be:	1f 91       	pop	r17
 9c0:	0f 91       	pop	r16
 9c2:	08 95       	ret

000009c4 <malloc>:
 9c4:	cf 93       	push	r28
 9c6:	df 93       	push	r29
 9c8:	82 30       	cpi	r24, 0x02	; 2
 9ca:	91 05       	cpc	r25, r1
 9cc:	10 f4       	brcc	.+4      	; 0x9d2 <malloc+0xe>
 9ce:	82 e0       	ldi	r24, 0x02	; 2
 9d0:	90 e0       	ldi	r25, 0x00	; 0
 9d2:	e0 91 fb 02 	lds	r30, 0x02FB
 9d6:	f0 91 fc 02 	lds	r31, 0x02FC
 9da:	20 e0       	ldi	r18, 0x00	; 0
 9dc:	30 e0       	ldi	r19, 0x00	; 0
 9de:	a0 e0       	ldi	r26, 0x00	; 0
 9e0:	b0 e0       	ldi	r27, 0x00	; 0
 9e2:	30 97       	sbiw	r30, 0x00	; 0
 9e4:	39 f1       	breq	.+78     	; 0xa34 <malloc+0x70>
 9e6:	40 81       	ld	r20, Z
 9e8:	51 81       	ldd	r21, Z+1	; 0x01
 9ea:	48 17       	cp	r20, r24
 9ec:	59 07       	cpc	r21, r25
 9ee:	b8 f0       	brcs	.+46     	; 0xa1e <malloc+0x5a>
 9f0:	48 17       	cp	r20, r24
 9f2:	59 07       	cpc	r21, r25
 9f4:	71 f4       	brne	.+28     	; 0xa12 <malloc+0x4e>
 9f6:	82 81       	ldd	r24, Z+2	; 0x02
 9f8:	93 81       	ldd	r25, Z+3	; 0x03
 9fa:	10 97       	sbiw	r26, 0x00	; 0
 9fc:	29 f0       	breq	.+10     	; 0xa08 <malloc+0x44>
 9fe:	13 96       	adiw	r26, 0x03	; 3
 a00:	9c 93       	st	X, r25
 a02:	8e 93       	st	-X, r24
 a04:	12 97       	sbiw	r26, 0x02	; 2
 a06:	2c c0       	rjmp	.+88     	; 0xa60 <malloc+0x9c>
 a08:	90 93 fc 02 	sts	0x02FC, r25
 a0c:	80 93 fb 02 	sts	0x02FB, r24
 a10:	27 c0       	rjmp	.+78     	; 0xa60 <malloc+0x9c>
 a12:	21 15       	cp	r18, r1
 a14:	31 05       	cpc	r19, r1
 a16:	31 f0       	breq	.+12     	; 0xa24 <malloc+0x60>
 a18:	42 17       	cp	r20, r18
 a1a:	53 07       	cpc	r21, r19
 a1c:	18 f0       	brcs	.+6      	; 0xa24 <malloc+0x60>
 a1e:	a9 01       	movw	r20, r18
 a20:	db 01       	movw	r26, r22
 a22:	01 c0       	rjmp	.+2      	; 0xa26 <malloc+0x62>
 a24:	ef 01       	movw	r28, r30
 a26:	9a 01       	movw	r18, r20
 a28:	bd 01       	movw	r22, r26
 a2a:	df 01       	movw	r26, r30
 a2c:	02 80       	ldd	r0, Z+2	; 0x02
 a2e:	f3 81       	ldd	r31, Z+3	; 0x03
 a30:	e0 2d       	mov	r30, r0
 a32:	d7 cf       	rjmp	.-82     	; 0x9e2 <malloc+0x1e>
 a34:	21 15       	cp	r18, r1
 a36:	31 05       	cpc	r19, r1
 a38:	f9 f0       	breq	.+62     	; 0xa78 <malloc+0xb4>
 a3a:	28 1b       	sub	r18, r24
 a3c:	39 0b       	sbc	r19, r25
 a3e:	24 30       	cpi	r18, 0x04	; 4
 a40:	31 05       	cpc	r19, r1
 a42:	80 f4       	brcc	.+32     	; 0xa64 <malloc+0xa0>
 a44:	8a 81       	ldd	r24, Y+2	; 0x02
 a46:	9b 81       	ldd	r25, Y+3	; 0x03
 a48:	61 15       	cp	r22, r1
 a4a:	71 05       	cpc	r23, r1
 a4c:	21 f0       	breq	.+8      	; 0xa56 <malloc+0x92>
 a4e:	fb 01       	movw	r30, r22
 a50:	93 83       	std	Z+3, r25	; 0x03
 a52:	82 83       	std	Z+2, r24	; 0x02
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <malloc+0x9a>
 a56:	90 93 fc 02 	sts	0x02FC, r25
 a5a:	80 93 fb 02 	sts	0x02FB, r24
 a5e:	fe 01       	movw	r30, r28
 a60:	32 96       	adiw	r30, 0x02	; 2
 a62:	44 c0       	rjmp	.+136    	; 0xaec <malloc+0x128>
 a64:	fe 01       	movw	r30, r28
 a66:	e2 0f       	add	r30, r18
 a68:	f3 1f       	adc	r31, r19
 a6a:	81 93       	st	Z+, r24
 a6c:	91 93       	st	Z+, r25
 a6e:	22 50       	subi	r18, 0x02	; 2
 a70:	31 09       	sbc	r19, r1
 a72:	39 83       	std	Y+1, r19	; 0x01
 a74:	28 83       	st	Y, r18
 a76:	3a c0       	rjmp	.+116    	; 0xaec <malloc+0x128>
 a78:	20 91 f9 02 	lds	r18, 0x02F9
 a7c:	30 91 fa 02 	lds	r19, 0x02FA
 a80:	23 2b       	or	r18, r19
 a82:	41 f4       	brne	.+16     	; 0xa94 <malloc+0xd0>
 a84:	20 91 02 02 	lds	r18, 0x0202
 a88:	30 91 03 02 	lds	r19, 0x0203
 a8c:	30 93 fa 02 	sts	0x02FA, r19
 a90:	20 93 f9 02 	sts	0x02F9, r18
 a94:	20 91 00 02 	lds	r18, 0x0200
 a98:	30 91 01 02 	lds	r19, 0x0201
 a9c:	21 15       	cp	r18, r1
 a9e:	31 05       	cpc	r19, r1
 aa0:	41 f4       	brne	.+16     	; 0xab2 <malloc+0xee>
 aa2:	2d b7       	in	r18, 0x3d	; 61
 aa4:	3e b7       	in	r19, 0x3e	; 62
 aa6:	40 91 04 02 	lds	r20, 0x0204
 aaa:	50 91 05 02 	lds	r21, 0x0205
 aae:	24 1b       	sub	r18, r20
 ab0:	35 0b       	sbc	r19, r21
 ab2:	e0 91 f9 02 	lds	r30, 0x02F9
 ab6:	f0 91 fa 02 	lds	r31, 0x02FA
 aba:	e2 17       	cp	r30, r18
 abc:	f3 07       	cpc	r31, r19
 abe:	a0 f4       	brcc	.+40     	; 0xae8 <malloc+0x124>
 ac0:	2e 1b       	sub	r18, r30
 ac2:	3f 0b       	sbc	r19, r31
 ac4:	28 17       	cp	r18, r24
 ac6:	39 07       	cpc	r19, r25
 ac8:	78 f0       	brcs	.+30     	; 0xae8 <malloc+0x124>
 aca:	ac 01       	movw	r20, r24
 acc:	4e 5f       	subi	r20, 0xFE	; 254
 ace:	5f 4f       	sbci	r21, 0xFF	; 255
 ad0:	24 17       	cp	r18, r20
 ad2:	35 07       	cpc	r19, r21
 ad4:	48 f0       	brcs	.+18     	; 0xae8 <malloc+0x124>
 ad6:	4e 0f       	add	r20, r30
 ad8:	5f 1f       	adc	r21, r31
 ada:	50 93 fa 02 	sts	0x02FA, r21
 ade:	40 93 f9 02 	sts	0x02F9, r20
 ae2:	81 93       	st	Z+, r24
 ae4:	91 93       	st	Z+, r25
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <malloc+0x128>
 ae8:	e0 e0       	ldi	r30, 0x00	; 0
 aea:	f0 e0       	ldi	r31, 0x00	; 0
 aec:	cf 01       	movw	r24, r30
 aee:	df 91       	pop	r29
 af0:	cf 91       	pop	r28
 af2:	08 95       	ret

00000af4 <free>:
 af4:	cf 93       	push	r28
 af6:	df 93       	push	r29
 af8:	00 97       	sbiw	r24, 0x00	; 0
 afa:	09 f4       	brne	.+2      	; 0xafe <free+0xa>
 afc:	87 c0       	rjmp	.+270    	; 0xc0c <free+0x118>
 afe:	fc 01       	movw	r30, r24
 b00:	32 97       	sbiw	r30, 0x02	; 2
 b02:	13 82       	std	Z+3, r1	; 0x03
 b04:	12 82       	std	Z+2, r1	; 0x02
 b06:	c0 91 fb 02 	lds	r28, 0x02FB
 b0a:	d0 91 fc 02 	lds	r29, 0x02FC
 b0e:	20 97       	sbiw	r28, 0x00	; 0
 b10:	81 f4       	brne	.+32     	; 0xb32 <free+0x3e>
 b12:	20 81       	ld	r18, Z
 b14:	31 81       	ldd	r19, Z+1	; 0x01
 b16:	28 0f       	add	r18, r24
 b18:	39 1f       	adc	r19, r25
 b1a:	80 91 f9 02 	lds	r24, 0x02F9
 b1e:	90 91 fa 02 	lds	r25, 0x02FA
 b22:	82 17       	cp	r24, r18
 b24:	93 07       	cpc	r25, r19
 b26:	79 f5       	brne	.+94     	; 0xb86 <free+0x92>
 b28:	f0 93 fa 02 	sts	0x02FA, r31
 b2c:	e0 93 f9 02 	sts	0x02F9, r30
 b30:	6d c0       	rjmp	.+218    	; 0xc0c <free+0x118>
 b32:	de 01       	movw	r26, r28
 b34:	20 e0       	ldi	r18, 0x00	; 0
 b36:	30 e0       	ldi	r19, 0x00	; 0
 b38:	ae 17       	cp	r26, r30
 b3a:	bf 07       	cpc	r27, r31
 b3c:	50 f4       	brcc	.+20     	; 0xb52 <free+0x5e>
 b3e:	12 96       	adiw	r26, 0x02	; 2
 b40:	4d 91       	ld	r20, X+
 b42:	5c 91       	ld	r21, X
 b44:	13 97       	sbiw	r26, 0x03	; 3
 b46:	9d 01       	movw	r18, r26
 b48:	41 15       	cp	r20, r1
 b4a:	51 05       	cpc	r21, r1
 b4c:	09 f1       	breq	.+66     	; 0xb90 <free+0x9c>
 b4e:	da 01       	movw	r26, r20
 b50:	f3 cf       	rjmp	.-26     	; 0xb38 <free+0x44>
 b52:	b3 83       	std	Z+3, r27	; 0x03
 b54:	a2 83       	std	Z+2, r26	; 0x02
 b56:	40 81       	ld	r20, Z
 b58:	51 81       	ldd	r21, Z+1	; 0x01
 b5a:	84 0f       	add	r24, r20
 b5c:	95 1f       	adc	r25, r21
 b5e:	8a 17       	cp	r24, r26
 b60:	9b 07       	cpc	r25, r27
 b62:	71 f4       	brne	.+28     	; 0xb80 <free+0x8c>
 b64:	8d 91       	ld	r24, X+
 b66:	9c 91       	ld	r25, X
 b68:	11 97       	sbiw	r26, 0x01	; 1
 b6a:	84 0f       	add	r24, r20
 b6c:	95 1f       	adc	r25, r21
 b6e:	02 96       	adiw	r24, 0x02	; 2
 b70:	91 83       	std	Z+1, r25	; 0x01
 b72:	80 83       	st	Z, r24
 b74:	12 96       	adiw	r26, 0x02	; 2
 b76:	8d 91       	ld	r24, X+
 b78:	9c 91       	ld	r25, X
 b7a:	13 97       	sbiw	r26, 0x03	; 3
 b7c:	93 83       	std	Z+3, r25	; 0x03
 b7e:	82 83       	std	Z+2, r24	; 0x02
 b80:	21 15       	cp	r18, r1
 b82:	31 05       	cpc	r19, r1
 b84:	29 f4       	brne	.+10     	; 0xb90 <free+0x9c>
 b86:	f0 93 fc 02 	sts	0x02FC, r31
 b8a:	e0 93 fb 02 	sts	0x02FB, r30
 b8e:	3e c0       	rjmp	.+124    	; 0xc0c <free+0x118>
 b90:	d9 01       	movw	r26, r18
 b92:	13 96       	adiw	r26, 0x03	; 3
 b94:	fc 93       	st	X, r31
 b96:	ee 93       	st	-X, r30
 b98:	12 97       	sbiw	r26, 0x02	; 2
 b9a:	4d 91       	ld	r20, X+
 b9c:	5d 91       	ld	r21, X+
 b9e:	a4 0f       	add	r26, r20
 ba0:	b5 1f       	adc	r27, r21
 ba2:	ea 17       	cp	r30, r26
 ba4:	fb 07       	cpc	r31, r27
 ba6:	79 f4       	brne	.+30     	; 0xbc6 <free+0xd2>
 ba8:	80 81       	ld	r24, Z
 baa:	91 81       	ldd	r25, Z+1	; 0x01
 bac:	84 0f       	add	r24, r20
 bae:	95 1f       	adc	r25, r21
 bb0:	02 96       	adiw	r24, 0x02	; 2
 bb2:	d9 01       	movw	r26, r18
 bb4:	11 96       	adiw	r26, 0x01	; 1
 bb6:	9c 93       	st	X, r25
 bb8:	8e 93       	st	-X, r24
 bba:	82 81       	ldd	r24, Z+2	; 0x02
 bbc:	93 81       	ldd	r25, Z+3	; 0x03
 bbe:	13 96       	adiw	r26, 0x03	; 3
 bc0:	9c 93       	st	X, r25
 bc2:	8e 93       	st	-X, r24
 bc4:	12 97       	sbiw	r26, 0x02	; 2
 bc6:	e0 e0       	ldi	r30, 0x00	; 0
 bc8:	f0 e0       	ldi	r31, 0x00	; 0
 bca:	8a 81       	ldd	r24, Y+2	; 0x02
 bcc:	9b 81       	ldd	r25, Y+3	; 0x03
 bce:	00 97       	sbiw	r24, 0x00	; 0
 bd0:	19 f0       	breq	.+6      	; 0xbd8 <free+0xe4>
 bd2:	fe 01       	movw	r30, r28
 bd4:	ec 01       	movw	r28, r24
 bd6:	f9 cf       	rjmp	.-14     	; 0xbca <free+0xd6>
 bd8:	ce 01       	movw	r24, r28
 bda:	02 96       	adiw	r24, 0x02	; 2
 bdc:	28 81       	ld	r18, Y
 bde:	39 81       	ldd	r19, Y+1	; 0x01
 be0:	82 0f       	add	r24, r18
 be2:	93 1f       	adc	r25, r19
 be4:	20 91 f9 02 	lds	r18, 0x02F9
 be8:	30 91 fa 02 	lds	r19, 0x02FA
 bec:	28 17       	cp	r18, r24
 bee:	39 07       	cpc	r19, r25
 bf0:	69 f4       	brne	.+26     	; 0xc0c <free+0x118>
 bf2:	30 97       	sbiw	r30, 0x00	; 0
 bf4:	29 f4       	brne	.+10     	; 0xc00 <free+0x10c>
 bf6:	10 92 fc 02 	sts	0x02FC, r1
 bfa:	10 92 fb 02 	sts	0x02FB, r1
 bfe:	02 c0       	rjmp	.+4      	; 0xc04 <free+0x110>
 c00:	13 82       	std	Z+3, r1	; 0x03
 c02:	12 82       	std	Z+2, r1	; 0x02
 c04:	d0 93 fa 02 	sts	0x02FA, r29
 c08:	c0 93 f9 02 	sts	0x02F9, r28
 c0c:	df 91       	pop	r29
 c0e:	cf 91       	pop	r28
 c10:	08 95       	ret

00000c12 <strnlen_P>:
 c12:	fc 01       	movw	r30, r24
 c14:	05 90       	lpm	r0, Z+
 c16:	61 50       	subi	r22, 0x01	; 1
 c18:	70 40       	sbci	r23, 0x00	; 0
 c1a:	01 10       	cpse	r0, r1
 c1c:	d8 f7       	brcc	.-10     	; 0xc14 <strnlen_P+0x2>
 c1e:	80 95       	com	r24
 c20:	90 95       	com	r25
 c22:	8e 0f       	add	r24, r30
 c24:	9f 1f       	adc	r25, r31
 c26:	08 95       	ret

00000c28 <memset>:
 c28:	dc 01       	movw	r26, r24
 c2a:	01 c0       	rjmp	.+2      	; 0xc2e <memset+0x6>
 c2c:	6d 93       	st	X+, r22
 c2e:	41 50       	subi	r20, 0x01	; 1
 c30:	50 40       	sbci	r21, 0x00	; 0
 c32:	e0 f7       	brcc	.-8      	; 0xc2c <memset+0x4>
 c34:	08 95       	ret

00000c36 <strnlen>:
 c36:	fc 01       	movw	r30, r24
 c38:	61 50       	subi	r22, 0x01	; 1
 c3a:	70 40       	sbci	r23, 0x00	; 0
 c3c:	01 90       	ld	r0, Z+
 c3e:	01 10       	cpse	r0, r1
 c40:	d8 f7       	brcc	.-10     	; 0xc38 <strnlen+0x2>
 c42:	80 95       	com	r24
 c44:	90 95       	com	r25
 c46:	8e 0f       	add	r24, r30
 c48:	9f 1f       	adc	r25, r31
 c4a:	08 95       	ret

00000c4c <fputc>:
 c4c:	0f 93       	push	r16
 c4e:	1f 93       	push	r17
 c50:	cf 93       	push	r28
 c52:	df 93       	push	r29
 c54:	18 2f       	mov	r17, r24
 c56:	09 2f       	mov	r16, r25
 c58:	eb 01       	movw	r28, r22
 c5a:	8b 81       	ldd	r24, Y+3	; 0x03
 c5c:	81 fd       	sbrc	r24, 1
 c5e:	03 c0       	rjmp	.+6      	; 0xc66 <fputc+0x1a>
 c60:	8f ef       	ldi	r24, 0xFF	; 255
 c62:	9f ef       	ldi	r25, 0xFF	; 255
 c64:	20 c0       	rjmp	.+64     	; 0xca6 <fputc+0x5a>
 c66:	82 ff       	sbrs	r24, 2
 c68:	10 c0       	rjmp	.+32     	; 0xc8a <fputc+0x3e>
 c6a:	4e 81       	ldd	r20, Y+6	; 0x06
 c6c:	5f 81       	ldd	r21, Y+7	; 0x07
 c6e:	2c 81       	ldd	r18, Y+4	; 0x04
 c70:	3d 81       	ldd	r19, Y+5	; 0x05
 c72:	42 17       	cp	r20, r18
 c74:	53 07       	cpc	r21, r19
 c76:	7c f4       	brge	.+30     	; 0xc96 <fputc+0x4a>
 c78:	e8 81       	ld	r30, Y
 c7a:	f9 81       	ldd	r31, Y+1	; 0x01
 c7c:	9f 01       	movw	r18, r30
 c7e:	2f 5f       	subi	r18, 0xFF	; 255
 c80:	3f 4f       	sbci	r19, 0xFF	; 255
 c82:	39 83       	std	Y+1, r19	; 0x01
 c84:	28 83       	st	Y, r18
 c86:	10 83       	st	Z, r17
 c88:	06 c0       	rjmp	.+12     	; 0xc96 <fputc+0x4a>
 c8a:	e8 85       	ldd	r30, Y+8	; 0x08
 c8c:	f9 85       	ldd	r31, Y+9	; 0x09
 c8e:	81 2f       	mov	r24, r17
 c90:	19 95       	eicall
 c92:	89 2b       	or	r24, r25
 c94:	29 f7       	brne	.-54     	; 0xc60 <fputc+0x14>
 c96:	2e 81       	ldd	r18, Y+6	; 0x06
 c98:	3f 81       	ldd	r19, Y+7	; 0x07
 c9a:	2f 5f       	subi	r18, 0xFF	; 255
 c9c:	3f 4f       	sbci	r19, 0xFF	; 255
 c9e:	3f 83       	std	Y+7, r19	; 0x07
 ca0:	2e 83       	std	Y+6, r18	; 0x06
 ca2:	81 2f       	mov	r24, r17
 ca4:	90 2f       	mov	r25, r16
 ca6:	df 91       	pop	r29
 ca8:	cf 91       	pop	r28
 caa:	1f 91       	pop	r17
 cac:	0f 91       	pop	r16
 cae:	08 95       	ret

00000cb0 <__ultoa_invert>:
 cb0:	fa 01       	movw	r30, r20
 cb2:	aa 27       	eor	r26, r26
 cb4:	28 30       	cpi	r18, 0x08	; 8
 cb6:	51 f1       	breq	.+84     	; 0xd0c <__ultoa_invert+0x5c>
 cb8:	20 31       	cpi	r18, 0x10	; 16
 cba:	81 f1       	breq	.+96     	; 0xd1c <__ultoa_invert+0x6c>
 cbc:	e8 94       	clt
 cbe:	6f 93       	push	r22
 cc0:	6e 7f       	andi	r22, 0xFE	; 254
 cc2:	6e 5f       	subi	r22, 0xFE	; 254
 cc4:	7f 4f       	sbci	r23, 0xFF	; 255
 cc6:	8f 4f       	sbci	r24, 0xFF	; 255
 cc8:	9f 4f       	sbci	r25, 0xFF	; 255
 cca:	af 4f       	sbci	r26, 0xFF	; 255
 ccc:	b1 e0       	ldi	r27, 0x01	; 1
 cce:	3e d0       	rcall	.+124    	; 0xd4c <__ultoa_invert+0x9c>
 cd0:	b4 e0       	ldi	r27, 0x04	; 4
 cd2:	3c d0       	rcall	.+120    	; 0xd4c <__ultoa_invert+0x9c>
 cd4:	67 0f       	add	r22, r23
 cd6:	78 1f       	adc	r23, r24
 cd8:	89 1f       	adc	r24, r25
 cda:	9a 1f       	adc	r25, r26
 cdc:	a1 1d       	adc	r26, r1
 cde:	68 0f       	add	r22, r24
 ce0:	79 1f       	adc	r23, r25
 ce2:	8a 1f       	adc	r24, r26
 ce4:	91 1d       	adc	r25, r1
 ce6:	a1 1d       	adc	r26, r1
 ce8:	6a 0f       	add	r22, r26
 cea:	71 1d       	adc	r23, r1
 cec:	81 1d       	adc	r24, r1
 cee:	91 1d       	adc	r25, r1
 cf0:	a1 1d       	adc	r26, r1
 cf2:	20 d0       	rcall	.+64     	; 0xd34 <__ultoa_invert+0x84>
 cf4:	09 f4       	brne	.+2      	; 0xcf8 <__ultoa_invert+0x48>
 cf6:	68 94       	set
 cf8:	3f 91       	pop	r19
 cfa:	2a e0       	ldi	r18, 0x0A	; 10
 cfc:	26 9f       	mul	r18, r22
 cfe:	11 24       	eor	r1, r1
 d00:	30 19       	sub	r19, r0
 d02:	30 5d       	subi	r19, 0xD0	; 208
 d04:	31 93       	st	Z+, r19
 d06:	de f6       	brtc	.-74     	; 0xcbe <__ultoa_invert+0xe>
 d08:	cf 01       	movw	r24, r30
 d0a:	08 95       	ret
 d0c:	46 2f       	mov	r20, r22
 d0e:	47 70       	andi	r20, 0x07	; 7
 d10:	40 5d       	subi	r20, 0xD0	; 208
 d12:	41 93       	st	Z+, r20
 d14:	b3 e0       	ldi	r27, 0x03	; 3
 d16:	0f d0       	rcall	.+30     	; 0xd36 <__ultoa_invert+0x86>
 d18:	c9 f7       	brne	.-14     	; 0xd0c <__ultoa_invert+0x5c>
 d1a:	f6 cf       	rjmp	.-20     	; 0xd08 <__ultoa_invert+0x58>
 d1c:	46 2f       	mov	r20, r22
 d1e:	4f 70       	andi	r20, 0x0F	; 15
 d20:	40 5d       	subi	r20, 0xD0	; 208
 d22:	4a 33       	cpi	r20, 0x3A	; 58
 d24:	18 f0       	brcs	.+6      	; 0xd2c <__ultoa_invert+0x7c>
 d26:	49 5d       	subi	r20, 0xD9	; 217
 d28:	31 fd       	sbrc	r19, 1
 d2a:	40 52       	subi	r20, 0x20	; 32
 d2c:	41 93       	st	Z+, r20
 d2e:	02 d0       	rcall	.+4      	; 0xd34 <__ultoa_invert+0x84>
 d30:	a9 f7       	brne	.-22     	; 0xd1c <__ultoa_invert+0x6c>
 d32:	ea cf       	rjmp	.-44     	; 0xd08 <__ultoa_invert+0x58>
 d34:	b4 e0       	ldi	r27, 0x04	; 4
 d36:	a6 95       	lsr	r26
 d38:	97 95       	ror	r25
 d3a:	87 95       	ror	r24
 d3c:	77 95       	ror	r23
 d3e:	67 95       	ror	r22
 d40:	ba 95       	dec	r27
 d42:	c9 f7       	brne	.-14     	; 0xd36 <__ultoa_invert+0x86>
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	61 05       	cpc	r22, r1
 d48:	71 05       	cpc	r23, r1
 d4a:	08 95       	ret
 d4c:	9b 01       	movw	r18, r22
 d4e:	ac 01       	movw	r20, r24
 d50:	0a 2e       	mov	r0, r26
 d52:	06 94       	lsr	r0
 d54:	57 95       	ror	r21
 d56:	47 95       	ror	r20
 d58:	37 95       	ror	r19
 d5a:	27 95       	ror	r18
 d5c:	ba 95       	dec	r27
 d5e:	c9 f7       	brne	.-14     	; 0xd52 <__ultoa_invert+0xa2>
 d60:	62 0f       	add	r22, r18
 d62:	73 1f       	adc	r23, r19
 d64:	84 1f       	adc	r24, r20
 d66:	95 1f       	adc	r25, r21
 d68:	a0 1d       	adc	r26, r0
 d6a:	08 95       	ret

00000d6c <_exit>:
 d6c:	f8 94       	cli

00000d6e <__stop_program>:
 d6e:	ff cf       	rjmp	.-2      	; 0xd6e <__stop_program>
