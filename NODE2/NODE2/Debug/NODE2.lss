
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800200  00000d6c  00000e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000036  00800212  00800212  00000e12  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e12  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002c8  00000000  00000000  00000e42  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e2f  00000000  00000000  0000110a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000e87  00000000  00000000  00002f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000013a7  00000000  00000000  00003dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000658  00000000  00000000  00005168  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007fb  00000000  00000000  000057c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f96  00000000  00000000  00005fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000258  00000000  00000000  00006f51  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
   2:	00 00       	nop
   4:	df c0       	rjmp	.+446    	; 0x1c4 <__bad_interrupt>
   6:	00 00       	nop
   8:	dd c0       	rjmp	.+442    	; 0x1c4 <__bad_interrupt>
   a:	00 00       	nop
   c:	db c0       	rjmp	.+438    	; 0x1c4 <__bad_interrupt>
   e:	00 00       	nop
  10:	d9 c0       	rjmp	.+434    	; 0x1c4 <__bad_interrupt>
  12:	00 00       	nop
  14:	e9 c0       	rjmp	.+466    	; 0x1e8 <__vector_5>
  16:	00 00       	nop
  18:	d5 c0       	rjmp	.+426    	; 0x1c4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	d3 c0       	rjmp	.+422    	; 0x1c4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	d1 c0       	rjmp	.+418    	; 0x1c4 <__bad_interrupt>
  22:	00 00       	nop
  24:	cf c0       	rjmp	.+414    	; 0x1c4 <__bad_interrupt>
  26:	00 00       	nop
  28:	cd c0       	rjmp	.+410    	; 0x1c4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	cb c0       	rjmp	.+406    	; 0x1c4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	c9 c0       	rjmp	.+402    	; 0x1c4 <__bad_interrupt>
  32:	00 00       	nop
  34:	c7 c0       	rjmp	.+398    	; 0x1c4 <__bad_interrupt>
  36:	00 00       	nop
  38:	c5 c0       	rjmp	.+394    	; 0x1c4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	c3 c0       	rjmp	.+390    	; 0x1c4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	c1 c0       	rjmp	.+386    	; 0x1c4 <__bad_interrupt>
  42:	00 00       	nop
  44:	bf c0       	rjmp	.+382    	; 0x1c4 <__bad_interrupt>
  46:	00 00       	nop
  48:	bd c0       	rjmp	.+378    	; 0x1c4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	bb c0       	rjmp	.+374    	; 0x1c4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	b9 c0       	rjmp	.+370    	; 0x1c4 <__bad_interrupt>
  52:	00 00       	nop
  54:	b7 c0       	rjmp	.+366    	; 0x1c4 <__bad_interrupt>
  56:	00 00       	nop
  58:	b5 c0       	rjmp	.+362    	; 0x1c4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	b3 c0       	rjmp	.+358    	; 0x1c4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	b1 c0       	rjmp	.+354    	; 0x1c4 <__bad_interrupt>
  62:	00 00       	nop
  64:	af c0       	rjmp	.+350    	; 0x1c4 <__bad_interrupt>
  66:	00 00       	nop
  68:	ad c0       	rjmp	.+346    	; 0x1c4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	ab c0       	rjmp	.+342    	; 0x1c4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	a9 c0       	rjmp	.+338    	; 0x1c4 <__bad_interrupt>
  72:	00 00       	nop
  74:	a7 c0       	rjmp	.+334    	; 0x1c4 <__bad_interrupt>
  76:	00 00       	nop
  78:	a5 c0       	rjmp	.+330    	; 0x1c4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	a3 c0       	rjmp	.+326    	; 0x1c4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	a1 c0       	rjmp	.+322    	; 0x1c4 <__bad_interrupt>
  82:	00 00       	nop
  84:	9f c0       	rjmp	.+318    	; 0x1c4 <__bad_interrupt>
  86:	00 00       	nop
  88:	9d c0       	rjmp	.+314    	; 0x1c4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9b c0       	rjmp	.+310    	; 0x1c4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	99 c0       	rjmp	.+306    	; 0x1c4 <__bad_interrupt>
  92:	00 00       	nop
  94:	97 c0       	rjmp	.+302    	; 0x1c4 <__bad_interrupt>
  96:	00 00       	nop
  98:	95 c0       	rjmp	.+298    	; 0x1c4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	02 c2       	rjmp	.+1028   	; 0x4a2 <__vector_39>
  9e:	00 00       	nop
  a0:	91 c0       	rjmp	.+290    	; 0x1c4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	8f c0       	rjmp	.+286    	; 0x1c4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	49 c1       	rjmp	.+658    	; 0x33c <__vector_42>
  aa:	00 00       	nop
  ac:	8b c0       	rjmp	.+278    	; 0x1c4 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	89 c0       	rjmp	.+274    	; 0x1c4 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	87 c0       	rjmp	.+270    	; 0x1c4 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	85 c0       	rjmp	.+266    	; 0x1c4 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	83 c0       	rjmp	.+262    	; 0x1c4 <__bad_interrupt>
  be:	00 00       	nop
  c0:	81 c0       	rjmp	.+258    	; 0x1c4 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	7f c0       	rjmp	.+254    	; 0x1c4 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	7d c0       	rjmp	.+250    	; 0x1c4 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	7b c0       	rjmp	.+246    	; 0x1c4 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	79 c0       	rjmp	.+242    	; 0x1c4 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	77 c0       	rjmp	.+238    	; 0x1c4 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	75 c0       	rjmp	.+234    	; 0x1c4 <__bad_interrupt>
  da:	00 00       	nop
  dc:	73 c0       	rjmp	.+230    	; 0x1c4 <__bad_interrupt>
  de:	00 00       	nop
  e0:	71 c0       	rjmp	.+226    	; 0x1c4 <__bad_interrupt>
  e2:	00 00       	nop
  e4:	6c 02       	muls	r22, r28
  e6:	be 02       	muls	r27, r30
  e8:	be 02       	muls	r27, r30
  ea:	be 02       	muls	r27, r30
  ec:	be 02       	muls	r27, r30
  ee:	be 02       	muls	r27, r30
  f0:	be 02       	muls	r27, r30
  f2:	be 02       	muls	r27, r30
  f4:	6c 02       	muls	r22, r28
  f6:	be 02       	muls	r27, r30
  f8:	be 02       	muls	r27, r30
  fa:	be 02       	muls	r27, r30
  fc:	be 02       	muls	r27, r30
  fe:	be 02       	muls	r27, r30
 100:	be 02       	muls	r27, r30
 102:	be 02       	muls	r27, r30
 104:	6e 02       	muls	r22, r30
 106:	be 02       	muls	r27, r30
 108:	be 02       	muls	r27, r30
 10a:	be 02       	muls	r27, r30
 10c:	be 02       	muls	r27, r30
 10e:	be 02       	muls	r27, r30
 110:	be 02       	muls	r27, r30
 112:	be 02       	muls	r27, r30
 114:	be 02       	muls	r27, r30
 116:	be 02       	muls	r27, r30
 118:	be 02       	muls	r27, r30
 11a:	be 02       	muls	r27, r30
 11c:	be 02       	muls	r27, r30
 11e:	be 02       	muls	r27, r30
 120:	be 02       	muls	r27, r30
 122:	be 02       	muls	r27, r30
 124:	6e 02       	muls	r22, r30
 126:	be 02       	muls	r27, r30
 128:	be 02       	muls	r27, r30
 12a:	be 02       	muls	r27, r30
 12c:	be 02       	muls	r27, r30
 12e:	be 02       	muls	r27, r30
 130:	be 02       	muls	r27, r30
 132:	be 02       	muls	r27, r30
 134:	be 02       	muls	r27, r30
 136:	be 02       	muls	r27, r30
 138:	be 02       	muls	r27, r30
 13a:	be 02       	muls	r27, r30
 13c:	be 02       	muls	r27, r30
 13e:	be 02       	muls	r27, r30
 140:	be 02       	muls	r27, r30
 142:	be 02       	muls	r27, r30
 144:	ba 02       	muls	r27, r26
 146:	be 02       	muls	r27, r30
 148:	be 02       	muls	r27, r30
 14a:	be 02       	muls	r27, r30
 14c:	be 02       	muls	r27, r30
 14e:	be 02       	muls	r27, r30
 150:	be 02       	muls	r27, r30
 152:	be 02       	muls	r27, r30
 154:	97 02       	muls	r25, r23
 156:	be 02       	muls	r27, r30
 158:	be 02       	muls	r27, r30
 15a:	be 02       	muls	r27, r30
 15c:	be 02       	muls	r27, r30
 15e:	be 02       	muls	r27, r30
 160:	be 02       	muls	r27, r30
 162:	be 02       	muls	r27, r30
 164:	be 02       	muls	r27, r30
 166:	be 02       	muls	r27, r30
 168:	be 02       	muls	r27, r30
 16a:	be 02       	muls	r27, r30
 16c:	be 02       	muls	r27, r30
 16e:	be 02       	muls	r27, r30
 170:	be 02       	muls	r27, r30
 172:	be 02       	muls	r27, r30
 174:	8b 02       	muls	r24, r27
 176:	be 02       	muls	r27, r30
 178:	be 02       	muls	r27, r30
 17a:	be 02       	muls	r27, r30
 17c:	be 02       	muls	r27, r30
 17e:	be 02       	muls	r27, r30
 180:	be 02       	muls	r27, r30
 182:	be 02       	muls	r27, r30
 184:	a9 02       	muls	r26, r25

00000186 <__ctors_end>:
 186:	11 24       	eor	r1, r1
 188:	1f be       	out	0x3f, r1	; 63
 18a:	cf ef       	ldi	r28, 0xFF	; 255
 18c:	d1 e2       	ldi	r29, 0x21	; 33
 18e:	de bf       	out	0x3e, r29	; 62
 190:	cd bf       	out	0x3d, r28	; 61
 192:	00 e0       	ldi	r16, 0x00	; 0
 194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
 196:	12 e0       	ldi	r17, 0x02	; 2
 198:	a0 e0       	ldi	r26, 0x00	; 0
 19a:	b2 e0       	ldi	r27, 0x02	; 2
 19c:	ec e6       	ldi	r30, 0x6C	; 108
 19e:	fd e0       	ldi	r31, 0x0D	; 13
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	0b bf       	out	0x3b, r16	; 59
 1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
 1a6:	07 90       	elpm	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	a2 31       	cpi	r26, 0x12	; 18
 1ac:	b1 07       	cpc	r27, r17
 1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	a2 e1       	ldi	r26, 0x12	; 18
 1b4:	b2 e0       	ldi	r27, 0x02	; 2
 1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
 1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
 1ba:	a8 34       	cpi	r26, 0x48	; 72
 1bc:	b2 07       	cpc	r27, r18
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
 1c0:	27 d1       	rcall	.+590    	; 0x410 <main>
 1c2:	d2 c5       	rjmp	.+2980   	; 0xd68 <_exit>

000001c4 <__bad_interrupt>:
 1c4:	1d cf       	rjmp	.-454    	; 0x0 <__vectors>

000001c6 <CAN_construct_message>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
 1c6:	90 93 14 02 	sts	0x0214, r25
 1ca:	80 93 13 02 	sts	0x0213, r24
 1ce:	60 93 15 02 	sts	0x0215, r22
 1d2:	66 23       	and	r22, r22
 1d4:	41 f0       	breq	.+16     	; 0x1e6 <CAN_construct_message+0x20>
 1d6:	86 e1       	ldi	r24, 0x16	; 22
 1d8:	92 e0       	ldi	r25, 0x02	; 2
 1da:	fc 01       	movw	r30, r24
 1dc:	11 92       	st	Z+, r1
 1de:	2e 2f       	mov	r18, r30
 1e0:	28 1b       	sub	r18, r24
 1e2:	26 17       	cp	r18, r22
 1e4:	d8 f3       	brcs	.-10     	; 0x1dc <CAN_construct_message+0x16>
 1e6:	08 95       	ret

000001e8 <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
 1e8:	1f 92       	push	r1
 1ea:	0f 92       	push	r0
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	0f 92       	push	r0
 1f0:	11 24       	eor	r1, r1
 1f2:	8f 93       	push	r24
	receive_flag = 1;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	80 93 12 02 	sts	0x0212, r24
}
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
 206:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
 208:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
 20a:	ea e6       	ldi	r30, 0x6A	; 106
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
 214:	80 81       	ld	r24, Z
 216:	82 60       	ori	r24, 0x02	; 2
 218:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
 21a:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
		
	
	#endif
	sei();
 21c:	78 94       	sei
 21e:	08 95       	ret

00000220 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
 220:	38 d0       	rcall	.+112    	; 0x292 <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 222:	68 e0       	ldi	r22, 0x08	; 8
 224:	88 e2       	ldi	r24, 0x28	; 40
 226:	90 e0       	ldi	r25, 0x00	; 0
 228:	ce df       	rcall	.-100    	; 0x1c6 <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 22a:	4f ef       	ldi	r20, 0xFF	; 255
 22c:	50 e0       	ldi	r21, 0x00	; 0
 22e:	64 e6       	ldi	r22, 0x64	; 100
 230:	80 e6       	ldi	r24, 0x60	; 96
 232:	16 d0       	rcall	.+44     	; 0x260 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
 234:	4f ef       	ldi	r20, 0xFF	; 255
 236:	50 e0       	ldi	r21, 0x00	; 0
 238:	64 e6       	ldi	r22, 0x64	; 100
 23a:	80 e7       	ldi	r24, 0x70	; 112
 23c:	11 d0       	rcall	.+34     	; 0x260 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 23e:	41 e0       	ldi	r20, 0x01	; 1
 240:	50 e0       	ldi	r21, 0x00	; 0
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	8b e2       	ldi	r24, 0x2B	; 43
 246:	0c d0       	rcall	.+24     	; 0x260 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
 248:	41 e0       	ldi	r20, 0x01	; 1
 24a:	50 e0       	ldi	r21, 0x00	; 0
 24c:	62 e0       	ldi	r22, 0x02	; 2
 24e:	8b e2       	ldi	r24, 0x2B	; 43
 250:	07 d0       	rcall	.+14     	; 0x260 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	50 e0       	ldi	r21, 0x00	; 0
 256:	60 ee       	ldi	r22, 0xE0	; 224
 258:	8f e0       	ldi	r24, 0x0F	; 15
 25a:	02 d0       	rcall	.+4      	; 0x260 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
 25c:	d4 cf       	rjmp	.-88     	; 0x206 <CAN_interrupt_setup>
 25e:	08 95       	ret

00000260 <MCP2515_bit_modify>:
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	18 2f       	mov	r17, r24
 268:	d6 2f       	mov	r29, r22
 26a:	c4 2f       	mov	r28, r20
	SPI_select();
 26c:	1a d0       	rcall	.+52     	; 0x2a2 <SPI_select>
	SPI_send(MCP_BITMOD);
 26e:	85 e0       	ldi	r24, 0x05	; 5
 270:	13 d0       	rcall	.+38     	; 0x298 <SPI_send>
	SPI_send(adr);
 272:	81 2f       	mov	r24, r17
 274:	11 d0       	rcall	.+34     	; 0x298 <SPI_send>
	SPI_send(mask);
 276:	8d 2f       	mov	r24, r29
 278:	0f d0       	rcall	.+30     	; 0x298 <SPI_send>
	SPI_send(data);
 27a:	8c 2f       	mov	r24, r28
 27c:	0d d0       	rcall	.+26     	; 0x298 <SPI_send>
	SPI_deselect();
 27e:	13 d0       	rcall	.+38     	; 0x2a6 <SPI_deselect>
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
 288:	0c d0       	rcall	.+24     	; 0x2a2 <SPI_select>
	SPI_send(MCP_RESET);
 28a:	80 ec       	ldi	r24, 0xC0	; 192
 28c:	05 d0       	rcall	.+10     	; 0x298 <SPI_send>
	SPI_deselect();
 28e:	0b c0       	rjmp	.+22     	; 0x2a6 <SPI_deselect>
 290:	08 95       	ret

00000292 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
 292:	0b d0       	rcall	.+22     	; 0x2aa <SPI_initialize>
	MCP2515_reset();
 294:	f9 cf       	rjmp	.-14     	; 0x288 <MCP2515_reset>
 296:	08 95       	ret

00000298 <SPI_send>:
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));

	// Return Data Register
	return SPDR;
}
 298:	8e bd       	out	0x2e, r24	; 46
 29a:	0d b4       	in	r0, 0x2d	; 45
 29c:	07 fe       	sbrs	r0, 7
 29e:	fd cf       	rjmp	.-6      	; 0x29a <SPI_send+0x2>
 2a0:	08 95       	ret

000002a2 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 2a2:	2f 98       	cbi	0x05, 7	; 5
 2a4:	08 95       	ret

000002a6 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 2a6:	2f 9a       	sbi	0x05, 7	; 5
 2a8:	08 95       	ret

000002aa <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
 2aa:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
 2ac:	8c b5       	in	r24, 0x2c	; 44
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
 2b2:	84 b1       	in	r24, 0x04	; 4
 2b4:	86 68       	ori	r24, 0x86	; 134
 2b6:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
 2b8:	8c b5       	in	r24, 0x2c	; 44
 2ba:	80 65       	ori	r24, 0x50	; 80
 2bc:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 2be:	f3 cf       	rjmp	.-26     	; 0x2a6 <SPI_deselect>
 2c0:	08 95       	ret

000002c2 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
 2c2:	e0 ec       	ldi	r30, 0xC0	; 192
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	90 81       	ld	r25, Z
 2c8:	95 ff       	sbrs	r25, 5
 2ca:	fd cf       	rjmp	.-6      	; 0x2c6 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
 2cc:	80 93 c6 00 	sts	0x00C6, r24
 2d0:	08 95       	ret

000002d2 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
 2d2:	e0 ec       	ldi	r30, 0xC0	; 192
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	88 23       	and	r24, r24
 2da:	ec f7       	brge	.-6      	; 0x2d6 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
 2dc:	80 91 c6 00 	lds	r24, 0x00C6
}
 2e0:	90 e0       	ldi	r25, 0x00	; 0
 2e2:	08 95       	ret

000002e4 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
 2e4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
 2e8:	87 e6       	ldi	r24, 0x67	; 103
 2ea:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 2ee:	88 e1       	ldi	r24, 0x18	; 24
 2f0:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 2f4:	8e e0       	ldi	r24, 0x0E	; 14
 2f6:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
 2fa:	69 e6       	ldi	r22, 0x69	; 105
 2fc:	71 e0       	ldi	r23, 0x01	; 1
 2fe:	81 e6       	ldi	r24, 0x61	; 97
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	73 c3       	rjmp	.+1766   	; 0x9ea <fdevopen>
 304:	08 95       	ret

00000306 <encoder_reset>:
	}
	else{
		MOTOR_PORT |= (1<<RSTN);
	}
	*/
	MOTOR_PORT &= ~(1<<RSTN);
 306:	e2 e0       	ldi	r30, 0x02	; 2
 308:	f1 e0       	ldi	r31, 0x01	; 1
 30a:	80 81       	ld	r24, Z
 30c:	8f 7b       	andi	r24, 0xBF	; 191
 30e:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 310:	8a e6       	ldi	r24, 0x6A	; 106
 312:	8a 95       	dec	r24
 314:	f1 f7       	brne	.-4      	; 0x312 <encoder_reset+0xc>
 316:	00 c0       	rjmp	.+0      	; 0x318 <encoder_reset+0x12>
	_delay_us(20);
	MOTOR_PORT |= (1<<RSTN);
 318:	80 81       	ld	r24, Z
 31a:	80 64       	ori	r24, 0x40	; 64
 31c:	80 83       	st	Z, r24
 31e:	08 95       	ret

00000320 <motor_init>:
#include "../../common_library/uart.h"

void motor_init(void){
	
	// Make all relevant motor pins output.
	MOTOR_DDR |= (1<<OEN)|(1<<RSTN)|(1<<SEL)|(1<<EN)|(1<<DIR);
 320:	e1 e0       	ldi	r30, 0x01	; 1
 322:	f1 e0       	ldi	r31, 0x01	; 1
 324:	80 81       	ld	r24, Z
 326:	8a 67       	ori	r24, 0x7A	; 122
 328:	80 83       	st	Z, r24
	
	// Make all encoder pins input.
	ENCODER_DDR = 0x00;
 32a:	10 92 07 01 	sts	0x0107, r1
	
	// Enable motor.
	MOTOR_PORT |= (1<<EN);
 32e:	e2 e0       	ldi	r30, 0x02	; 2
 330:	f1 e0       	ldi	r31, 0x01	; 1
 332:	80 81       	ld	r24, Z
 334:	80 61       	ori	r24, 0x10	; 16
 336:	80 83       	st	Z, r24
	
	encoder_reset();
 338:	e6 cf       	rjmp	.-52     	; 0x306 <encoder_reset>
 33a:	08 95       	ret

0000033c <__vector_42>:
	// Set counter limit.
	OCR4A = (F_CPU/(PI_TIMER_PRESCALER))*T_Update - 1;
	pi_update_flag = 0;
}

ISR(TIMER4_COMPA_vect){//interrupt when Timer_0 is done, resets itself
 33c:	1f 92       	push	r1
 33e:	0f 92       	push	r0
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	0f 92       	push	r0
 344:	11 24       	eor	r1, r1
 346:	8f 93       	push	r24
	pi_update_flag = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	80 93 2d 02 	sts	0x022D, r24
	//printf("INT");
	//TIFR4 &= ~(1<<OCF1A);
}
 34e:	8f 91       	pop	r24
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(20);
 35a:	60 e0       	ldi	r22, 0x00	; 0
 35c:	70 e0       	ldi	r23, 0x00	; 0
 35e:	80 ea       	ldi	r24, 0xA0	; 160
 360:	91 e4       	ldi	r25, 0x41	; 65
 362:	79 d0       	rcall	.+242    	; 0x456 <pwm_init>

int servo_set(int value){
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
			pwm_set_pulse_width(pulse_width);
 364:	60 e0       	ldi	r22, 0x00	; 0
 366:	70 e0       	ldi	r23, 0x00	; 0
 368:	80 ec       	ldi	r24, 0xC0	; 192
 36a:	9f e3       	ldi	r25, 0x3F	; 63
 36c:	5e c0       	rjmp	.+188    	; 0x42a <pwm_set_pulse_width>
 36e:	08 95       	ret

00000370 <servo_set>:
void servo_init(void){
	pwm_init(20);
	servo_set(0);
}

int servo_set(int value){
 370:	cf 92       	push	r12
 372:	df 92       	push	r13
 374:	ef 92       	push	r14
 376:	ff 92       	push	r15
 378:	bc 01       	movw	r22, r24
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
 37a:	8c 59       	subi	r24, 0x9C	; 156
 37c:	9f 4f       	sbci	r25, 0xFF	; 255
 37e:	89 3c       	cpi	r24, 0xC9	; 201
 380:	91 05       	cpc	r25, r1
 382:	98 f5       	brcc	.+102    	; 0x3ea <servo_set+0x7a>
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
 384:	88 27       	eor	r24, r24
 386:	77 fd       	sbrc	r23, 7
 388:	80 95       	com	r24
 38a:	98 2f       	mov	r25, r24
 38c:	11 d2       	rcall	.+1058   	; 0x7b0 <__floatsisf>
 38e:	9b 01       	movw	r18, r22
 390:	ac 01       	movw	r20, r24
 392:	60 e0       	ldi	r22, 0x00	; 0
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	88 ec       	ldi	r24, 0xC8	; 200
 398:	92 e4       	ldi	r25, 0x42	; 66
 39a:	06 d1       	rcall	.+524    	; 0x5a8 <__subsf3>
 39c:	20 e0       	ldi	r18, 0x00	; 0
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	48 e4       	ldi	r20, 0x48	; 72
 3a2:	53 e4       	ldi	r21, 0x43	; 67
 3a4:	6a d1       	rcall	.+724    	; 0x67a <__divsf3>
 3a6:	29 e9       	ldi	r18, 0x99	; 153
 3a8:	39 e9       	ldi	r19, 0x99	; 153
 3aa:	49 e9       	ldi	r20, 0x99	; 153
 3ac:	5f e3       	ldi	r21, 0x3F	; 63
 3ae:	b4 d2       	rcall	.+1384   	; 0x918 <__mulsf3>
 3b0:	26 e6       	ldi	r18, 0x66	; 102
 3b2:	36 e6       	ldi	r19, 0x66	; 102
 3b4:	46 e6       	ldi	r20, 0x66	; 102
 3b6:	5f e3       	ldi	r21, 0x3F	; 63
 3b8:	f8 d0       	rcall	.+496    	; 0x5aa <__addsf3>
 3ba:	6b 01       	movw	r12, r22
 3bc:	7c 01       	movw	r14, r24
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
 3be:	26 e6       	ldi	r18, 0x66	; 102
 3c0:	36 e6       	ldi	r19, 0x66	; 102
 3c2:	46 e6       	ldi	r20, 0x66	; 102
 3c4:	5f e3       	ldi	r21, 0x3F	; 63
 3c6:	a4 d2       	rcall	.+1352   	; 0x910 <__gesf2>
 3c8:	88 23       	and	r24, r24
 3ca:	94 f0       	brlt	.+36     	; 0x3f0 <servo_set+0x80>
 3cc:	26 e6       	ldi	r18, 0x66	; 102
 3ce:	36 e6       	ldi	r19, 0x66	; 102
 3d0:	46 e0       	ldi	r20, 0x06	; 6
 3d2:	50 e4       	ldi	r21, 0x40	; 64
 3d4:	c7 01       	movw	r24, r14
 3d6:	b6 01       	movw	r22, r12
 3d8:	4c d1       	rcall	.+664    	; 0x672 <__cmpsf2>
 3da:	18 16       	cp	r1, r24
 3dc:	64 f0       	brlt	.+24     	; 0x3f6 <servo_set+0x86>
			pwm_set_pulse_width(pulse_width);
 3de:	c7 01       	movw	r24, r14
 3e0:	b6 01       	movw	r22, r12
 3e2:	23 d0       	rcall	.+70     	; 0x42a <pwm_set_pulse_width>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	08 c0       	rjmp	.+16     	; 0x3fa <servo_set+0x8a>
		}else{
			return 0;
		}
	}else{
		return -1;
 3ea:	8f ef       	ldi	r24, 0xFF	; 255
 3ec:	9f ef       	ldi	r25, 0xFF	; 255
 3ee:	05 c0       	rjmp	.+10     	; 0x3fa <servo_set+0x8a>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
		}else{
			return 0;
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	02 c0       	rjmp	.+4      	; 0x3fa <servo_set+0x8a>
 3f6:	80 e0       	ldi	r24, 0x00	; 0
 3f8:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		return -1;
	}
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	08 95       	ret

00000404 <init_all>:
    return 0;
}

void init_all(void){
	
	cli();
 404:	f8 94       	cli
	
	CAN_initialize();
 406:	0c df       	rcall	.-488    	; 0x220 <CAN_initialize>
	TWI_Master_Initialise();
 408:	42 d0       	rcall	.+132    	; 0x48e <TWI_Master_Initialise>
	motor_init();
 40a:	8a df       	rcall	.-236    	; 0x320 <motor_init>
	
	#if UART_ENABLE
		init_UART();
		printf("Program initialized\n");
	#endif
	sei();
 40c:	78 94       	sei
 40e:	08 95       	ret

00000410 <main>:
#include	"pi_controller.h"
#include	"solenoid.h"

int main(void){
	
	init_UART();
 410:	69 df       	rcall	.-302    	; 0x2e4 <init_UART>
	
	printf("all\n");
 412:	87 e0       	ldi	r24, 0x07	; 7
 414:	92 e0       	ldi	r25, 0x02	; 2
 416:	33 d3       	rcall	.+1638   	; 0xa7e <puts>
	init_all();
 418:	f5 df       	rcall	.-22     	; 0x404 <init_all>
	printf("servo\n");
 41a:	8b e0       	ldi	r24, 0x0B	; 11
 41c:	92 e0       	ldi	r25, 0x02	; 2
 41e:	2f d3       	rcall	.+1630   	; 0xa7e <puts>
	servo_init();
 420:	9c df       	rcall	.-200    	; 0x35a <servo_init>
	
	while (1)
	{

			//servo_set(CAN_message_receive()->data[0]);
		servo_set(-100);
 422:	8c e9       	ldi	r24, 0x9C	; 156
 424:	9f ef       	ldi	r25, 0xFF	; 255
 426:	a4 df       	rcall	.-184    	; 0x370 <servo_set>
 428:	fc cf       	rjmp	.-8      	; 0x422 <main+0x12>

0000042a <pwm_set_pulse_width>:

	//ICR3 = F_CPU/128/2;
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	PWM_OCRnA = (int)(SCALAR_IN_MS * val);
 42a:	20 e0       	ldi	r18, 0x00	; 0
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	4a e7       	ldi	r20, 0x7A	; 122
 430:	51 e4       	ldi	r21, 0x41	; 65
 432:	72 d2       	rcall	.+1252   	; 0x918 <__mulsf3>
 434:	8a d1       	rcall	.+788    	; 0x74a <__fixsfsi>
 436:	70 93 99 00 	sts	0x0099, r23
 43a:	60 93 98 00 	sts	0x0098, r22
 43e:	08 95       	ret

00000440 <pwm_set_period>:
}

void pwm_set_period(double period){
	PWM_ICRn = (int)(SCALAR_IN_MS * period);
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	4a e7       	ldi	r20, 0x7A	; 122
 446:	51 e4       	ldi	r21, 0x41	; 65
 448:	67 d2       	rcall	.+1230   	; 0x918 <__mulsf3>
 44a:	7f d1       	rcall	.+766    	; 0x74a <__fixsfsi>
 44c:	70 93 97 00 	sts	0x0097, r23
 450:	60 93 96 00 	sts	0x0096, r22
 454:	08 95       	ret

00000456 <pwm_init>:



void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	PWM_DDR |= (1 << PWM_PIN);
 456:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	PWM_TCCRnA &= ~(1<<WGM30);
 458:	e0 e9       	ldi	r30, 0x90	; 144
 45a:	f0 e0       	ldi	r31, 0x00	; 0
 45c:	20 81       	ld	r18, Z
 45e:	2e 7f       	andi	r18, 0xFE	; 254
 460:	20 83       	st	Z, r18
	PWM_TCCRnA |= (1<<WGM31);
 462:	20 81       	ld	r18, Z
 464:	22 60       	ori	r18, 0x02	; 2
 466:	20 83       	st	Z, r18
	PWM_TCCRnB |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
 468:	a1 e9       	ldi	r26, 0x91	; 145
 46a:	b0 e0       	ldi	r27, 0x00	; 0
 46c:	2c 91       	ld	r18, X
 46e:	28 61       	ori	r18, 0x18	; 24
 470:	2c 93       	st	X, r18
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	PWM_TCCRnA |= (1<<COM3A1);
 472:	20 81       	ld	r18, Z
 474:	20 68       	ori	r18, 0x80	; 128
 476:	20 83       	st	Z, r18
	PWM_TCCRnA &= ~(1<<COM3A0);
 478:	20 81       	ld	r18, Z
 47a:	2f 7b       	andi	r18, 0xBF	; 191
 47c:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	PWM_TCCRnB |= (1<<CS32) | (1<<CS30);
 47e:	2c 91       	ld	r18, X
 480:	25 60       	ori	r18, 0x05	; 5
 482:	2c 93       	st	X, r18
	PWM_TCCRnB &= ~(1<<CS31);
 484:	2c 91       	ld	r18, X
 486:	2d 7f       	andi	r18, 0xFD	; 253
 488:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.				CHECK THIS DIRK!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	pwm_set_period(period);
 48a:	da cf       	rjmp	.-76     	; 0x440 <pwm_set_period>
 48c:	08 95       	ret

0000048e <TWI_Master_Initialise>:
 48e:	8c e0       	ldi	r24, 0x0C	; 12
 490:	80 93 b8 00 	sts	0x00B8, r24
 494:	8f ef       	ldi	r24, 0xFF	; 255
 496:	80 93 bb 00 	sts	0x00BB, r24
 49a:	84 e0       	ldi	r24, 0x04	; 4
 49c:	80 93 bc 00 	sts	0x00BC, r24
 4a0:	08 95       	ret

000004a2 <__vector_39>:
 4a2:	1f 92       	push	r1
 4a4:	0f 92       	push	r0
 4a6:	0f b6       	in	r0, 0x3f	; 63
 4a8:	0f 92       	push	r0
 4aa:	11 24       	eor	r1, r1
 4ac:	0b b6       	in	r0, 0x3b	; 59
 4ae:	0f 92       	push	r0
 4b0:	2f 93       	push	r18
 4b2:	3f 93       	push	r19
 4b4:	8f 93       	push	r24
 4b6:	9f 93       	push	r25
 4b8:	af 93       	push	r26
 4ba:	bf 93       	push	r27
 4bc:	ef 93       	push	r30
 4be:	ff 93       	push	r31
 4c0:	80 91 b9 00 	lds	r24, 0x00B9
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	38 97       	sbiw	r30, 0x08	; 8
 4ca:	e1 35       	cpi	r30, 0x51	; 81
 4cc:	f1 05       	cpc	r31, r1
 4ce:	08 f0       	brcs	.+2      	; 0x4d2 <__vector_39+0x30>
 4d0:	55 c0       	rjmp	.+170    	; 0x57c <__vector_39+0xda>
 4d2:	ee 58       	subi	r30, 0x8E	; 142
 4d4:	ff 4f       	sbci	r31, 0xFF	; 255
 4d6:	83 c2       	rjmp	.+1286   	; 0x9de <__tablejump2__>
 4d8:	10 92 1e 02 	sts	0x021E, r1
 4dc:	e0 91 1e 02 	lds	r30, 0x021E
 4e0:	80 91 20 02 	lds	r24, 0x0220
 4e4:	e8 17       	cp	r30, r24
 4e6:	70 f4       	brcc	.+28     	; 0x504 <__vector_39+0x62>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	8e 0f       	add	r24, r30
 4ec:	80 93 1e 02 	sts	0x021E, r24
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	ef 5d       	subi	r30, 0xDF	; 223
 4f4:	fd 4f       	sbci	r31, 0xFD	; 253
 4f6:	80 81       	ld	r24, Z
 4f8:	80 93 bb 00 	sts	0x00BB, r24
 4fc:	85 e8       	ldi	r24, 0x85	; 133
 4fe:	80 93 bc 00 	sts	0x00BC, r24
 502:	43 c0       	rjmp	.+134    	; 0x58a <__vector_39+0xe8>
 504:	80 91 1f 02 	lds	r24, 0x021F
 508:	81 60       	ori	r24, 0x01	; 1
 50a:	80 93 1f 02 	sts	0x021F, r24
 50e:	84 e9       	ldi	r24, 0x94	; 148
 510:	80 93 bc 00 	sts	0x00BC, r24
 514:	3a c0       	rjmp	.+116    	; 0x58a <__vector_39+0xe8>
 516:	e0 91 1e 02 	lds	r30, 0x021E
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	8e 0f       	add	r24, r30
 51e:	80 93 1e 02 	sts	0x021E, r24
 522:	80 91 bb 00 	lds	r24, 0x00BB
 526:	f0 e0       	ldi	r31, 0x00	; 0
 528:	ef 5d       	subi	r30, 0xDF	; 223
 52a:	fd 4f       	sbci	r31, 0xFD	; 253
 52c:	80 83       	st	Z, r24
 52e:	20 91 1e 02 	lds	r18, 0x021E
 532:	30 e0       	ldi	r19, 0x00	; 0
 534:	80 91 20 02 	lds	r24, 0x0220
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	28 17       	cp	r18, r24
 53e:	39 07       	cpc	r19, r25
 540:	24 f4       	brge	.+8      	; 0x54a <__vector_39+0xa8>
 542:	85 ec       	ldi	r24, 0xC5	; 197
 544:	80 93 bc 00 	sts	0x00BC, r24
 548:	20 c0       	rjmp	.+64     	; 0x58a <__vector_39+0xe8>
 54a:	85 e8       	ldi	r24, 0x85	; 133
 54c:	80 93 bc 00 	sts	0x00BC, r24
 550:	1c c0       	rjmp	.+56     	; 0x58a <__vector_39+0xe8>
 552:	80 91 bb 00 	lds	r24, 0x00BB
 556:	e0 91 1e 02 	lds	r30, 0x021E
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ef 5d       	subi	r30, 0xDF	; 223
 55e:	fd 4f       	sbci	r31, 0xFD	; 253
 560:	80 83       	st	Z, r24
 562:	80 91 1f 02 	lds	r24, 0x021F
 566:	81 60       	ori	r24, 0x01	; 1
 568:	80 93 1f 02 	sts	0x021F, r24
 56c:	84 e9       	ldi	r24, 0x94	; 148
 56e:	80 93 bc 00 	sts	0x00BC, r24
 572:	0b c0       	rjmp	.+22     	; 0x58a <__vector_39+0xe8>
 574:	85 ea       	ldi	r24, 0xA5	; 165
 576:	80 93 bc 00 	sts	0x00BC, r24
 57a:	07 c0       	rjmp	.+14     	; 0x58a <__vector_39+0xe8>
 57c:	80 91 b9 00 	lds	r24, 0x00B9
 580:	80 93 06 02 	sts	0x0206, r24
 584:	84 e0       	ldi	r24, 0x04	; 4
 586:	80 93 bc 00 	sts	0x00BC, r24
 58a:	ff 91       	pop	r31
 58c:	ef 91       	pop	r30
 58e:	bf 91       	pop	r27
 590:	af 91       	pop	r26
 592:	9f 91       	pop	r25
 594:	8f 91       	pop	r24
 596:	3f 91       	pop	r19
 598:	2f 91       	pop	r18
 59a:	0f 90       	pop	r0
 59c:	0b be       	out	0x3b, r0	; 59
 59e:	0f 90       	pop	r0
 5a0:	0f be       	out	0x3f, r0	; 63
 5a2:	0f 90       	pop	r0
 5a4:	1f 90       	pop	r1
 5a6:	18 95       	reti

000005a8 <__subsf3>:
 5a8:	50 58       	subi	r21, 0x80	; 128

000005aa <__addsf3>:
 5aa:	bb 27       	eor	r27, r27
 5ac:	aa 27       	eor	r26, r26
 5ae:	0e d0       	rcall	.+28     	; 0x5cc <__addsf3x>
 5b0:	75 c1       	rjmp	.+746    	; 0x89c <__fp_round>
 5b2:	66 d1       	rcall	.+716    	; 0x880 <__fp_pscA>
 5b4:	30 f0       	brcs	.+12     	; 0x5c2 <__addsf3+0x18>
 5b6:	6b d1       	rcall	.+726    	; 0x88e <__fp_pscB>
 5b8:	20 f0       	brcs	.+8      	; 0x5c2 <__addsf3+0x18>
 5ba:	31 f4       	brne	.+12     	; 0x5c8 <__addsf3+0x1e>
 5bc:	9f 3f       	cpi	r25, 0xFF	; 255
 5be:	11 f4       	brne	.+4      	; 0x5c4 <__addsf3+0x1a>
 5c0:	1e f4       	brtc	.+6      	; 0x5c8 <__addsf3+0x1e>
 5c2:	5b c1       	rjmp	.+694    	; 0x87a <__fp_nan>
 5c4:	0e f4       	brtc	.+2      	; 0x5c8 <__addsf3+0x1e>
 5c6:	e0 95       	com	r30
 5c8:	e7 fb       	bst	r30, 7
 5ca:	51 c1       	rjmp	.+674    	; 0x86e <__fp_inf>

000005cc <__addsf3x>:
 5cc:	e9 2f       	mov	r30, r25
 5ce:	77 d1       	rcall	.+750    	; 0x8be <__fp_split3>
 5d0:	80 f3       	brcs	.-32     	; 0x5b2 <__addsf3+0x8>
 5d2:	ba 17       	cp	r27, r26
 5d4:	62 07       	cpc	r22, r18
 5d6:	73 07       	cpc	r23, r19
 5d8:	84 07       	cpc	r24, r20
 5da:	95 07       	cpc	r25, r21
 5dc:	18 f0       	brcs	.+6      	; 0x5e4 <__addsf3x+0x18>
 5de:	71 f4       	brne	.+28     	; 0x5fc <__addsf3x+0x30>
 5e0:	9e f5       	brtc	.+102    	; 0x648 <__addsf3x+0x7c>
 5e2:	8f c1       	rjmp	.+798    	; 0x902 <__fp_zero>
 5e4:	0e f4       	brtc	.+2      	; 0x5e8 <__addsf3x+0x1c>
 5e6:	e0 95       	com	r30
 5e8:	0b 2e       	mov	r0, r27
 5ea:	ba 2f       	mov	r27, r26
 5ec:	a0 2d       	mov	r26, r0
 5ee:	0b 01       	movw	r0, r22
 5f0:	b9 01       	movw	r22, r18
 5f2:	90 01       	movw	r18, r0
 5f4:	0c 01       	movw	r0, r24
 5f6:	ca 01       	movw	r24, r20
 5f8:	a0 01       	movw	r20, r0
 5fa:	11 24       	eor	r1, r1
 5fc:	ff 27       	eor	r31, r31
 5fe:	59 1b       	sub	r21, r25
 600:	99 f0       	breq	.+38     	; 0x628 <__addsf3x+0x5c>
 602:	59 3f       	cpi	r21, 0xF9	; 249
 604:	50 f4       	brcc	.+20     	; 0x61a <__addsf3x+0x4e>
 606:	50 3e       	cpi	r21, 0xE0	; 224
 608:	68 f1       	brcs	.+90     	; 0x664 <__addsf3x+0x98>
 60a:	1a 16       	cp	r1, r26
 60c:	f0 40       	sbci	r31, 0x00	; 0
 60e:	a2 2f       	mov	r26, r18
 610:	23 2f       	mov	r18, r19
 612:	34 2f       	mov	r19, r20
 614:	44 27       	eor	r20, r20
 616:	58 5f       	subi	r21, 0xF8	; 248
 618:	f3 cf       	rjmp	.-26     	; 0x600 <__addsf3x+0x34>
 61a:	46 95       	lsr	r20
 61c:	37 95       	ror	r19
 61e:	27 95       	ror	r18
 620:	a7 95       	ror	r26
 622:	f0 40       	sbci	r31, 0x00	; 0
 624:	53 95       	inc	r21
 626:	c9 f7       	brne	.-14     	; 0x61a <__addsf3x+0x4e>
 628:	7e f4       	brtc	.+30     	; 0x648 <__addsf3x+0x7c>
 62a:	1f 16       	cp	r1, r31
 62c:	ba 0b       	sbc	r27, r26
 62e:	62 0b       	sbc	r22, r18
 630:	73 0b       	sbc	r23, r19
 632:	84 0b       	sbc	r24, r20
 634:	ba f0       	brmi	.+46     	; 0x664 <__addsf3x+0x98>
 636:	91 50       	subi	r25, 0x01	; 1
 638:	a1 f0       	breq	.+40     	; 0x662 <__addsf3x+0x96>
 63a:	ff 0f       	add	r31, r31
 63c:	bb 1f       	adc	r27, r27
 63e:	66 1f       	adc	r22, r22
 640:	77 1f       	adc	r23, r23
 642:	88 1f       	adc	r24, r24
 644:	c2 f7       	brpl	.-16     	; 0x636 <__addsf3x+0x6a>
 646:	0e c0       	rjmp	.+28     	; 0x664 <__addsf3x+0x98>
 648:	ba 0f       	add	r27, r26
 64a:	62 1f       	adc	r22, r18
 64c:	73 1f       	adc	r23, r19
 64e:	84 1f       	adc	r24, r20
 650:	48 f4       	brcc	.+18     	; 0x664 <__addsf3x+0x98>
 652:	87 95       	ror	r24
 654:	77 95       	ror	r23
 656:	67 95       	ror	r22
 658:	b7 95       	ror	r27
 65a:	f7 95       	ror	r31
 65c:	9e 3f       	cpi	r25, 0xFE	; 254
 65e:	08 f0       	brcs	.+2      	; 0x662 <__addsf3x+0x96>
 660:	b3 cf       	rjmp	.-154    	; 0x5c8 <__addsf3+0x1e>
 662:	93 95       	inc	r25
 664:	88 0f       	add	r24, r24
 666:	08 f0       	brcs	.+2      	; 0x66a <__addsf3x+0x9e>
 668:	99 27       	eor	r25, r25
 66a:	ee 0f       	add	r30, r30
 66c:	97 95       	ror	r25
 66e:	87 95       	ror	r24
 670:	08 95       	ret

00000672 <__cmpsf2>:
 672:	d9 d0       	rcall	.+434    	; 0x826 <__fp_cmp>
 674:	08 f4       	brcc	.+2      	; 0x678 <__cmpsf2+0x6>
 676:	81 e0       	ldi	r24, 0x01	; 1
 678:	08 95       	ret

0000067a <__divsf3>:
 67a:	0c d0       	rcall	.+24     	; 0x694 <__divsf3x>
 67c:	0f c1       	rjmp	.+542    	; 0x89c <__fp_round>
 67e:	07 d1       	rcall	.+526    	; 0x88e <__fp_pscB>
 680:	40 f0       	brcs	.+16     	; 0x692 <__divsf3+0x18>
 682:	fe d0       	rcall	.+508    	; 0x880 <__fp_pscA>
 684:	30 f0       	brcs	.+12     	; 0x692 <__divsf3+0x18>
 686:	21 f4       	brne	.+8      	; 0x690 <__divsf3+0x16>
 688:	5f 3f       	cpi	r21, 0xFF	; 255
 68a:	19 f0       	breq	.+6      	; 0x692 <__divsf3+0x18>
 68c:	f0 c0       	rjmp	.+480    	; 0x86e <__fp_inf>
 68e:	51 11       	cpse	r21, r1
 690:	39 c1       	rjmp	.+626    	; 0x904 <__fp_szero>
 692:	f3 c0       	rjmp	.+486    	; 0x87a <__fp_nan>

00000694 <__divsf3x>:
 694:	14 d1       	rcall	.+552    	; 0x8be <__fp_split3>
 696:	98 f3       	brcs	.-26     	; 0x67e <__divsf3+0x4>

00000698 <__divsf3_pse>:
 698:	99 23       	and	r25, r25
 69a:	c9 f3       	breq	.-14     	; 0x68e <__divsf3+0x14>
 69c:	55 23       	and	r21, r21
 69e:	b1 f3       	breq	.-20     	; 0x68c <__divsf3+0x12>
 6a0:	95 1b       	sub	r25, r21
 6a2:	55 0b       	sbc	r21, r21
 6a4:	bb 27       	eor	r27, r27
 6a6:	aa 27       	eor	r26, r26
 6a8:	62 17       	cp	r22, r18
 6aa:	73 07       	cpc	r23, r19
 6ac:	84 07       	cpc	r24, r20
 6ae:	38 f0       	brcs	.+14     	; 0x6be <__divsf3_pse+0x26>
 6b0:	9f 5f       	subi	r25, 0xFF	; 255
 6b2:	5f 4f       	sbci	r21, 0xFF	; 255
 6b4:	22 0f       	add	r18, r18
 6b6:	33 1f       	adc	r19, r19
 6b8:	44 1f       	adc	r20, r20
 6ba:	aa 1f       	adc	r26, r26
 6bc:	a9 f3       	breq	.-22     	; 0x6a8 <__divsf3_pse+0x10>
 6be:	33 d0       	rcall	.+102    	; 0x726 <__divsf3_pse+0x8e>
 6c0:	0e 2e       	mov	r0, r30
 6c2:	3a f0       	brmi	.+14     	; 0x6d2 <__divsf3_pse+0x3a>
 6c4:	e0 e8       	ldi	r30, 0x80	; 128
 6c6:	30 d0       	rcall	.+96     	; 0x728 <__divsf3_pse+0x90>
 6c8:	91 50       	subi	r25, 0x01	; 1
 6ca:	50 40       	sbci	r21, 0x00	; 0
 6cc:	e6 95       	lsr	r30
 6ce:	00 1c       	adc	r0, r0
 6d0:	ca f7       	brpl	.-14     	; 0x6c4 <__divsf3_pse+0x2c>
 6d2:	29 d0       	rcall	.+82     	; 0x726 <__divsf3_pse+0x8e>
 6d4:	fe 2f       	mov	r31, r30
 6d6:	27 d0       	rcall	.+78     	; 0x726 <__divsf3_pse+0x8e>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	88 1f       	adc	r24, r24
 6de:	bb 1f       	adc	r27, r27
 6e0:	26 17       	cp	r18, r22
 6e2:	37 07       	cpc	r19, r23
 6e4:	48 07       	cpc	r20, r24
 6e6:	ab 07       	cpc	r26, r27
 6e8:	b0 e8       	ldi	r27, 0x80	; 128
 6ea:	09 f0       	breq	.+2      	; 0x6ee <__divsf3_pse+0x56>
 6ec:	bb 0b       	sbc	r27, r27
 6ee:	80 2d       	mov	r24, r0
 6f0:	bf 01       	movw	r22, r30
 6f2:	ff 27       	eor	r31, r31
 6f4:	93 58       	subi	r25, 0x83	; 131
 6f6:	5f 4f       	sbci	r21, 0xFF	; 255
 6f8:	2a f0       	brmi	.+10     	; 0x704 <__divsf3_pse+0x6c>
 6fa:	9e 3f       	cpi	r25, 0xFE	; 254
 6fc:	51 05       	cpc	r21, r1
 6fe:	68 f0       	brcs	.+26     	; 0x71a <__divsf3_pse+0x82>
 700:	b6 c0       	rjmp	.+364    	; 0x86e <__fp_inf>
 702:	00 c1       	rjmp	.+512    	; 0x904 <__fp_szero>
 704:	5f 3f       	cpi	r21, 0xFF	; 255
 706:	ec f3       	brlt	.-6      	; 0x702 <__divsf3_pse+0x6a>
 708:	98 3e       	cpi	r25, 0xE8	; 232
 70a:	dc f3       	brlt	.-10     	; 0x702 <__divsf3_pse+0x6a>
 70c:	86 95       	lsr	r24
 70e:	77 95       	ror	r23
 710:	67 95       	ror	r22
 712:	b7 95       	ror	r27
 714:	f7 95       	ror	r31
 716:	9f 5f       	subi	r25, 0xFF	; 255
 718:	c9 f7       	brne	.-14     	; 0x70c <__divsf3_pse+0x74>
 71a:	88 0f       	add	r24, r24
 71c:	91 1d       	adc	r25, r1
 71e:	96 95       	lsr	r25
 720:	87 95       	ror	r24
 722:	97 f9       	bld	r25, 7
 724:	08 95       	ret
 726:	e1 e0       	ldi	r30, 0x01	; 1
 728:	66 0f       	add	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	bb 1f       	adc	r27, r27
 730:	62 17       	cp	r22, r18
 732:	73 07       	cpc	r23, r19
 734:	84 07       	cpc	r24, r20
 736:	ba 07       	cpc	r27, r26
 738:	20 f0       	brcs	.+8      	; 0x742 <__divsf3_pse+0xaa>
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	ba 0b       	sbc	r27, r26
 742:	ee 1f       	adc	r30, r30
 744:	88 f7       	brcc	.-30     	; 0x728 <__divsf3_pse+0x90>
 746:	e0 95       	com	r30
 748:	08 95       	ret

0000074a <__fixsfsi>:
 74a:	04 d0       	rcall	.+8      	; 0x754 <__fixunssfsi>
 74c:	68 94       	set
 74e:	b1 11       	cpse	r27, r1
 750:	d9 c0       	rjmp	.+434    	; 0x904 <__fp_szero>
 752:	08 95       	ret

00000754 <__fixunssfsi>:
 754:	bc d0       	rcall	.+376    	; 0x8ce <__fp_splitA>
 756:	88 f0       	brcs	.+34     	; 0x77a <__fixunssfsi+0x26>
 758:	9f 57       	subi	r25, 0x7F	; 127
 75a:	90 f0       	brcs	.+36     	; 0x780 <__fixunssfsi+0x2c>
 75c:	b9 2f       	mov	r27, r25
 75e:	99 27       	eor	r25, r25
 760:	b7 51       	subi	r27, 0x17	; 23
 762:	a0 f0       	brcs	.+40     	; 0x78c <__fixunssfsi+0x38>
 764:	d1 f0       	breq	.+52     	; 0x79a <__fixunssfsi+0x46>
 766:	66 0f       	add	r22, r22
 768:	77 1f       	adc	r23, r23
 76a:	88 1f       	adc	r24, r24
 76c:	99 1f       	adc	r25, r25
 76e:	1a f0       	brmi	.+6      	; 0x776 <__fixunssfsi+0x22>
 770:	ba 95       	dec	r27
 772:	c9 f7       	brne	.-14     	; 0x766 <__fixunssfsi+0x12>
 774:	12 c0       	rjmp	.+36     	; 0x79a <__fixunssfsi+0x46>
 776:	b1 30       	cpi	r27, 0x01	; 1
 778:	81 f0       	breq	.+32     	; 0x79a <__fixunssfsi+0x46>
 77a:	c3 d0       	rcall	.+390    	; 0x902 <__fp_zero>
 77c:	b1 e0       	ldi	r27, 0x01	; 1
 77e:	08 95       	ret
 780:	c0 c0       	rjmp	.+384    	; 0x902 <__fp_zero>
 782:	67 2f       	mov	r22, r23
 784:	78 2f       	mov	r23, r24
 786:	88 27       	eor	r24, r24
 788:	b8 5f       	subi	r27, 0xF8	; 248
 78a:	39 f0       	breq	.+14     	; 0x79a <__fixunssfsi+0x46>
 78c:	b9 3f       	cpi	r27, 0xF9	; 249
 78e:	cc f3       	brlt	.-14     	; 0x782 <__fixunssfsi+0x2e>
 790:	86 95       	lsr	r24
 792:	77 95       	ror	r23
 794:	67 95       	ror	r22
 796:	b3 95       	inc	r27
 798:	d9 f7       	brne	.-10     	; 0x790 <__fixunssfsi+0x3c>
 79a:	3e f4       	brtc	.+14     	; 0x7aa <__fixunssfsi+0x56>
 79c:	90 95       	com	r25
 79e:	80 95       	com	r24
 7a0:	70 95       	com	r23
 7a2:	61 95       	neg	r22
 7a4:	7f 4f       	sbci	r23, 0xFF	; 255
 7a6:	8f 4f       	sbci	r24, 0xFF	; 255
 7a8:	9f 4f       	sbci	r25, 0xFF	; 255
 7aa:	08 95       	ret

000007ac <__floatunsisf>:
 7ac:	e8 94       	clt
 7ae:	09 c0       	rjmp	.+18     	; 0x7c2 <__floatsisf+0x12>

000007b0 <__floatsisf>:
 7b0:	97 fb       	bst	r25, 7
 7b2:	3e f4       	brtc	.+14     	; 0x7c2 <__floatsisf+0x12>
 7b4:	90 95       	com	r25
 7b6:	80 95       	com	r24
 7b8:	70 95       	com	r23
 7ba:	61 95       	neg	r22
 7bc:	7f 4f       	sbci	r23, 0xFF	; 255
 7be:	8f 4f       	sbci	r24, 0xFF	; 255
 7c0:	9f 4f       	sbci	r25, 0xFF	; 255
 7c2:	99 23       	and	r25, r25
 7c4:	a9 f0       	breq	.+42     	; 0x7f0 <__floatsisf+0x40>
 7c6:	f9 2f       	mov	r31, r25
 7c8:	96 e9       	ldi	r25, 0x96	; 150
 7ca:	bb 27       	eor	r27, r27
 7cc:	93 95       	inc	r25
 7ce:	f6 95       	lsr	r31
 7d0:	87 95       	ror	r24
 7d2:	77 95       	ror	r23
 7d4:	67 95       	ror	r22
 7d6:	b7 95       	ror	r27
 7d8:	f1 11       	cpse	r31, r1
 7da:	f8 cf       	rjmp	.-16     	; 0x7cc <__floatsisf+0x1c>
 7dc:	fa f4       	brpl	.+62     	; 0x81c <__floatsisf+0x6c>
 7de:	bb 0f       	add	r27, r27
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <__floatsisf+0x36>
 7e2:	60 ff       	sbrs	r22, 0
 7e4:	1b c0       	rjmp	.+54     	; 0x81c <__floatsisf+0x6c>
 7e6:	6f 5f       	subi	r22, 0xFF	; 255
 7e8:	7f 4f       	sbci	r23, 0xFF	; 255
 7ea:	8f 4f       	sbci	r24, 0xFF	; 255
 7ec:	9f 4f       	sbci	r25, 0xFF	; 255
 7ee:	16 c0       	rjmp	.+44     	; 0x81c <__floatsisf+0x6c>
 7f0:	88 23       	and	r24, r24
 7f2:	11 f0       	breq	.+4      	; 0x7f8 <__floatsisf+0x48>
 7f4:	96 e9       	ldi	r25, 0x96	; 150
 7f6:	11 c0       	rjmp	.+34     	; 0x81a <__floatsisf+0x6a>
 7f8:	77 23       	and	r23, r23
 7fa:	21 f0       	breq	.+8      	; 0x804 <__floatsisf+0x54>
 7fc:	9e e8       	ldi	r25, 0x8E	; 142
 7fe:	87 2f       	mov	r24, r23
 800:	76 2f       	mov	r23, r22
 802:	05 c0       	rjmp	.+10     	; 0x80e <__floatsisf+0x5e>
 804:	66 23       	and	r22, r22
 806:	71 f0       	breq	.+28     	; 0x824 <__floatsisf+0x74>
 808:	96 e8       	ldi	r25, 0x86	; 134
 80a:	86 2f       	mov	r24, r22
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	2a f0       	brmi	.+10     	; 0x81c <__floatsisf+0x6c>
 812:	9a 95       	dec	r25
 814:	66 0f       	add	r22, r22
 816:	77 1f       	adc	r23, r23
 818:	88 1f       	adc	r24, r24
 81a:	da f7       	brpl	.-10     	; 0x812 <__floatsisf+0x62>
 81c:	88 0f       	add	r24, r24
 81e:	96 95       	lsr	r25
 820:	87 95       	ror	r24
 822:	97 f9       	bld	r25, 7
 824:	08 95       	ret

00000826 <__fp_cmp>:
 826:	99 0f       	add	r25, r25
 828:	00 08       	sbc	r0, r0
 82a:	55 0f       	add	r21, r21
 82c:	aa 0b       	sbc	r26, r26
 82e:	e0 e8       	ldi	r30, 0x80	; 128
 830:	fe ef       	ldi	r31, 0xFE	; 254
 832:	16 16       	cp	r1, r22
 834:	17 06       	cpc	r1, r23
 836:	e8 07       	cpc	r30, r24
 838:	f9 07       	cpc	r31, r25
 83a:	c0 f0       	brcs	.+48     	; 0x86c <__fp_cmp+0x46>
 83c:	12 16       	cp	r1, r18
 83e:	13 06       	cpc	r1, r19
 840:	e4 07       	cpc	r30, r20
 842:	f5 07       	cpc	r31, r21
 844:	98 f0       	brcs	.+38     	; 0x86c <__fp_cmp+0x46>
 846:	62 1b       	sub	r22, r18
 848:	73 0b       	sbc	r23, r19
 84a:	84 0b       	sbc	r24, r20
 84c:	95 0b       	sbc	r25, r21
 84e:	39 f4       	brne	.+14     	; 0x85e <__fp_cmp+0x38>
 850:	0a 26       	eor	r0, r26
 852:	61 f0       	breq	.+24     	; 0x86c <__fp_cmp+0x46>
 854:	23 2b       	or	r18, r19
 856:	24 2b       	or	r18, r20
 858:	25 2b       	or	r18, r21
 85a:	21 f4       	brne	.+8      	; 0x864 <__fp_cmp+0x3e>
 85c:	08 95       	ret
 85e:	0a 26       	eor	r0, r26
 860:	09 f4       	brne	.+2      	; 0x864 <__fp_cmp+0x3e>
 862:	a1 40       	sbci	r26, 0x01	; 1
 864:	a6 95       	lsr	r26
 866:	8f ef       	ldi	r24, 0xFF	; 255
 868:	81 1d       	adc	r24, r1
 86a:	81 1d       	adc	r24, r1
 86c:	08 95       	ret

0000086e <__fp_inf>:
 86e:	97 f9       	bld	r25, 7
 870:	9f 67       	ori	r25, 0x7F	; 127
 872:	80 e8       	ldi	r24, 0x80	; 128
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	60 e0       	ldi	r22, 0x00	; 0
 878:	08 95       	ret

0000087a <__fp_nan>:
 87a:	9f ef       	ldi	r25, 0xFF	; 255
 87c:	80 ec       	ldi	r24, 0xC0	; 192
 87e:	08 95       	ret

00000880 <__fp_pscA>:
 880:	00 24       	eor	r0, r0
 882:	0a 94       	dec	r0
 884:	16 16       	cp	r1, r22
 886:	17 06       	cpc	r1, r23
 888:	18 06       	cpc	r1, r24
 88a:	09 06       	cpc	r0, r25
 88c:	08 95       	ret

0000088e <__fp_pscB>:
 88e:	00 24       	eor	r0, r0
 890:	0a 94       	dec	r0
 892:	12 16       	cp	r1, r18
 894:	13 06       	cpc	r1, r19
 896:	14 06       	cpc	r1, r20
 898:	05 06       	cpc	r0, r21
 89a:	08 95       	ret

0000089c <__fp_round>:
 89c:	09 2e       	mov	r0, r25
 89e:	03 94       	inc	r0
 8a0:	00 0c       	add	r0, r0
 8a2:	11 f4       	brne	.+4      	; 0x8a8 <__fp_round+0xc>
 8a4:	88 23       	and	r24, r24
 8a6:	52 f0       	brmi	.+20     	; 0x8bc <__fp_round+0x20>
 8a8:	bb 0f       	add	r27, r27
 8aa:	40 f4       	brcc	.+16     	; 0x8bc <__fp_round+0x20>
 8ac:	bf 2b       	or	r27, r31
 8ae:	11 f4       	brne	.+4      	; 0x8b4 <__fp_round+0x18>
 8b0:	60 ff       	sbrs	r22, 0
 8b2:	04 c0       	rjmp	.+8      	; 0x8bc <__fp_round+0x20>
 8b4:	6f 5f       	subi	r22, 0xFF	; 255
 8b6:	7f 4f       	sbci	r23, 0xFF	; 255
 8b8:	8f 4f       	sbci	r24, 0xFF	; 255
 8ba:	9f 4f       	sbci	r25, 0xFF	; 255
 8bc:	08 95       	ret

000008be <__fp_split3>:
 8be:	57 fd       	sbrc	r21, 7
 8c0:	90 58       	subi	r25, 0x80	; 128
 8c2:	44 0f       	add	r20, r20
 8c4:	55 1f       	adc	r21, r21
 8c6:	59 f0       	breq	.+22     	; 0x8de <__fp_splitA+0x10>
 8c8:	5f 3f       	cpi	r21, 0xFF	; 255
 8ca:	71 f0       	breq	.+28     	; 0x8e8 <__fp_splitA+0x1a>
 8cc:	47 95       	ror	r20

000008ce <__fp_splitA>:
 8ce:	88 0f       	add	r24, r24
 8d0:	97 fb       	bst	r25, 7
 8d2:	99 1f       	adc	r25, r25
 8d4:	61 f0       	breq	.+24     	; 0x8ee <__fp_splitA+0x20>
 8d6:	9f 3f       	cpi	r25, 0xFF	; 255
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <__fp_splitA+0x2a>
 8da:	87 95       	ror	r24
 8dc:	08 95       	ret
 8de:	12 16       	cp	r1, r18
 8e0:	13 06       	cpc	r1, r19
 8e2:	14 06       	cpc	r1, r20
 8e4:	55 1f       	adc	r21, r21
 8e6:	f2 cf       	rjmp	.-28     	; 0x8cc <__fp_split3+0xe>
 8e8:	46 95       	lsr	r20
 8ea:	f1 df       	rcall	.-30     	; 0x8ce <__fp_splitA>
 8ec:	08 c0       	rjmp	.+16     	; 0x8fe <__fp_splitA+0x30>
 8ee:	16 16       	cp	r1, r22
 8f0:	17 06       	cpc	r1, r23
 8f2:	18 06       	cpc	r1, r24
 8f4:	99 1f       	adc	r25, r25
 8f6:	f1 cf       	rjmp	.-30     	; 0x8da <__fp_splitA+0xc>
 8f8:	86 95       	lsr	r24
 8fa:	71 05       	cpc	r23, r1
 8fc:	61 05       	cpc	r22, r1
 8fe:	08 94       	sec
 900:	08 95       	ret

00000902 <__fp_zero>:
 902:	e8 94       	clt

00000904 <__fp_szero>:
 904:	bb 27       	eor	r27, r27
 906:	66 27       	eor	r22, r22
 908:	77 27       	eor	r23, r23
 90a:	cb 01       	movw	r24, r22
 90c:	97 f9       	bld	r25, 7
 90e:	08 95       	ret

00000910 <__gesf2>:
 910:	8a df       	rcall	.-236    	; 0x826 <__fp_cmp>
 912:	08 f4       	brcc	.+2      	; 0x916 <__gesf2+0x6>
 914:	8f ef       	ldi	r24, 0xFF	; 255
 916:	08 95       	ret

00000918 <__mulsf3>:
 918:	0b d0       	rcall	.+22     	; 0x930 <__mulsf3x>
 91a:	c0 cf       	rjmp	.-128    	; 0x89c <__fp_round>
 91c:	b1 df       	rcall	.-158    	; 0x880 <__fp_pscA>
 91e:	28 f0       	brcs	.+10     	; 0x92a <__mulsf3+0x12>
 920:	b6 df       	rcall	.-148    	; 0x88e <__fp_pscB>
 922:	18 f0       	brcs	.+6      	; 0x92a <__mulsf3+0x12>
 924:	95 23       	and	r25, r21
 926:	09 f0       	breq	.+2      	; 0x92a <__mulsf3+0x12>
 928:	a2 cf       	rjmp	.-188    	; 0x86e <__fp_inf>
 92a:	a7 cf       	rjmp	.-178    	; 0x87a <__fp_nan>
 92c:	11 24       	eor	r1, r1
 92e:	ea cf       	rjmp	.-44     	; 0x904 <__fp_szero>

00000930 <__mulsf3x>:
 930:	c6 df       	rcall	.-116    	; 0x8be <__fp_split3>
 932:	a0 f3       	brcs	.-24     	; 0x91c <__mulsf3+0x4>

00000934 <__mulsf3_pse>:
 934:	95 9f       	mul	r25, r21
 936:	d1 f3       	breq	.-12     	; 0x92c <__mulsf3+0x14>
 938:	95 0f       	add	r25, r21
 93a:	50 e0       	ldi	r21, 0x00	; 0
 93c:	55 1f       	adc	r21, r21
 93e:	62 9f       	mul	r22, r18
 940:	f0 01       	movw	r30, r0
 942:	72 9f       	mul	r23, r18
 944:	bb 27       	eor	r27, r27
 946:	f0 0d       	add	r31, r0
 948:	b1 1d       	adc	r27, r1
 94a:	63 9f       	mul	r22, r19
 94c:	aa 27       	eor	r26, r26
 94e:	f0 0d       	add	r31, r0
 950:	b1 1d       	adc	r27, r1
 952:	aa 1f       	adc	r26, r26
 954:	64 9f       	mul	r22, r20
 956:	66 27       	eor	r22, r22
 958:	b0 0d       	add	r27, r0
 95a:	a1 1d       	adc	r26, r1
 95c:	66 1f       	adc	r22, r22
 95e:	82 9f       	mul	r24, r18
 960:	22 27       	eor	r18, r18
 962:	b0 0d       	add	r27, r0
 964:	a1 1d       	adc	r26, r1
 966:	62 1f       	adc	r22, r18
 968:	73 9f       	mul	r23, r19
 96a:	b0 0d       	add	r27, r0
 96c:	a1 1d       	adc	r26, r1
 96e:	62 1f       	adc	r22, r18
 970:	83 9f       	mul	r24, r19
 972:	a0 0d       	add	r26, r0
 974:	61 1d       	adc	r22, r1
 976:	22 1f       	adc	r18, r18
 978:	74 9f       	mul	r23, r20
 97a:	33 27       	eor	r19, r19
 97c:	a0 0d       	add	r26, r0
 97e:	61 1d       	adc	r22, r1
 980:	23 1f       	adc	r18, r19
 982:	84 9f       	mul	r24, r20
 984:	60 0d       	add	r22, r0
 986:	21 1d       	adc	r18, r1
 988:	82 2f       	mov	r24, r18
 98a:	76 2f       	mov	r23, r22
 98c:	6a 2f       	mov	r22, r26
 98e:	11 24       	eor	r1, r1
 990:	9f 57       	subi	r25, 0x7F	; 127
 992:	50 40       	sbci	r21, 0x00	; 0
 994:	8a f0       	brmi	.+34     	; 0x9b8 <__mulsf3_pse+0x84>
 996:	e1 f0       	breq	.+56     	; 0x9d0 <__mulsf3_pse+0x9c>
 998:	88 23       	and	r24, r24
 99a:	4a f0       	brmi	.+18     	; 0x9ae <__mulsf3_pse+0x7a>
 99c:	ee 0f       	add	r30, r30
 99e:	ff 1f       	adc	r31, r31
 9a0:	bb 1f       	adc	r27, r27
 9a2:	66 1f       	adc	r22, r22
 9a4:	77 1f       	adc	r23, r23
 9a6:	88 1f       	adc	r24, r24
 9a8:	91 50       	subi	r25, 0x01	; 1
 9aa:	50 40       	sbci	r21, 0x00	; 0
 9ac:	a9 f7       	brne	.-22     	; 0x998 <__mulsf3_pse+0x64>
 9ae:	9e 3f       	cpi	r25, 0xFE	; 254
 9b0:	51 05       	cpc	r21, r1
 9b2:	70 f0       	brcs	.+28     	; 0x9d0 <__mulsf3_pse+0x9c>
 9b4:	5c cf       	rjmp	.-328    	; 0x86e <__fp_inf>
 9b6:	a6 cf       	rjmp	.-180    	; 0x904 <__fp_szero>
 9b8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ba:	ec f3       	brlt	.-6      	; 0x9b6 <__mulsf3_pse+0x82>
 9bc:	98 3e       	cpi	r25, 0xE8	; 232
 9be:	dc f3       	brlt	.-10     	; 0x9b6 <__mulsf3_pse+0x82>
 9c0:	86 95       	lsr	r24
 9c2:	77 95       	ror	r23
 9c4:	67 95       	ror	r22
 9c6:	b7 95       	ror	r27
 9c8:	f7 95       	ror	r31
 9ca:	e7 95       	ror	r30
 9cc:	9f 5f       	subi	r25, 0xFF	; 255
 9ce:	c1 f7       	brne	.-16     	; 0x9c0 <__mulsf3_pse+0x8c>
 9d0:	fe 2b       	or	r31, r30
 9d2:	88 0f       	add	r24, r24
 9d4:	91 1d       	adc	r25, r1
 9d6:	96 95       	lsr	r25
 9d8:	87 95       	ror	r24
 9da:	97 f9       	bld	r25, 7
 9dc:	08 95       	ret

000009de <__tablejump2__>:
 9de:	ee 0f       	add	r30, r30
 9e0:	ff 1f       	adc	r31, r31

000009e2 <__tablejump__>:
 9e2:	05 90       	lpm	r0, Z+
 9e4:	f4 91       	lpm	r31, Z
 9e6:	e0 2d       	mov	r30, r0
 9e8:	19 94       	eijmp

000009ea <fdevopen>:
 9ea:	0f 93       	push	r16
 9ec:	1f 93       	push	r17
 9ee:	cf 93       	push	r28
 9f0:	df 93       	push	r29
 9f2:	ec 01       	movw	r28, r24
 9f4:	8b 01       	movw	r16, r22
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	31 f4       	brne	.+12     	; 0xa06 <fdevopen+0x1c>
 9fa:	61 15       	cp	r22, r1
 9fc:	71 05       	cpc	r23, r1
 9fe:	19 f4       	brne	.+6      	; 0xa06 <fdevopen+0x1c>
 a00:	80 e0       	ldi	r24, 0x00	; 0
 a02:	90 e0       	ldi	r25, 0x00	; 0
 a04:	37 c0       	rjmp	.+110    	; 0xa74 <fdevopen+0x8a>
 a06:	6e e0       	ldi	r22, 0x0E	; 14
 a08:	70 e0       	ldi	r23, 0x00	; 0
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	64 d0       	rcall	.+200    	; 0xad8 <calloc>
 a10:	fc 01       	movw	r30, r24
 a12:	00 97       	sbiw	r24, 0x00	; 0
 a14:	a9 f3       	breq	.-22     	; 0xa00 <fdevopen+0x16>
 a16:	80 e8       	ldi	r24, 0x80	; 128
 a18:	83 83       	std	Z+3, r24	; 0x03
 a1a:	01 15       	cp	r16, r1
 a1c:	11 05       	cpc	r17, r1
 a1e:	71 f0       	breq	.+28     	; 0xa3c <fdevopen+0x52>
 a20:	13 87       	std	Z+11, r17	; 0x0b
 a22:	02 87       	std	Z+10, r16	; 0x0a
 a24:	81 e8       	ldi	r24, 0x81	; 129
 a26:	83 83       	std	Z+3, r24	; 0x03
 a28:	80 91 3e 02 	lds	r24, 0x023E
 a2c:	90 91 3f 02 	lds	r25, 0x023F
 a30:	89 2b       	or	r24, r25
 a32:	21 f4       	brne	.+8      	; 0xa3c <fdevopen+0x52>
 a34:	f0 93 3f 02 	sts	0x023F, r31
 a38:	e0 93 3e 02 	sts	0x023E, r30
 a3c:	20 97       	sbiw	r28, 0x00	; 0
 a3e:	c9 f0       	breq	.+50     	; 0xa72 <fdevopen+0x88>
 a40:	d1 87       	std	Z+9, r29	; 0x09
 a42:	c0 87       	std	Z+8, r28	; 0x08
 a44:	83 81       	ldd	r24, Z+3	; 0x03
 a46:	82 60       	ori	r24, 0x02	; 2
 a48:	83 83       	std	Z+3, r24	; 0x03
 a4a:	80 91 40 02 	lds	r24, 0x0240
 a4e:	90 91 41 02 	lds	r25, 0x0241
 a52:	89 2b       	or	r24, r25
 a54:	71 f4       	brne	.+28     	; 0xa72 <fdevopen+0x88>
 a56:	f0 93 41 02 	sts	0x0241, r31
 a5a:	e0 93 40 02 	sts	0x0240, r30
 a5e:	80 91 42 02 	lds	r24, 0x0242
 a62:	90 91 43 02 	lds	r25, 0x0243
 a66:	89 2b       	or	r24, r25
 a68:	21 f4       	brne	.+8      	; 0xa72 <fdevopen+0x88>
 a6a:	f0 93 43 02 	sts	0x0243, r31
 a6e:	e0 93 42 02 	sts	0x0242, r30
 a72:	cf 01       	movw	r24, r30
 a74:	df 91       	pop	r29
 a76:	cf 91       	pop	r28
 a78:	1f 91       	pop	r17
 a7a:	0f 91       	pop	r16
 a7c:	08 95       	ret

00000a7e <puts>:
 a7e:	0f 93       	push	r16
 a80:	1f 93       	push	r17
 a82:	cf 93       	push	r28
 a84:	df 93       	push	r29
 a86:	e0 91 40 02 	lds	r30, 0x0240
 a8a:	f0 91 41 02 	lds	r31, 0x0241
 a8e:	23 81       	ldd	r18, Z+3	; 0x03
 a90:	21 ff       	sbrs	r18, 1
 a92:	1b c0       	rjmp	.+54     	; 0xaca <puts+0x4c>
 a94:	ec 01       	movw	r28, r24
 a96:	00 e0       	ldi	r16, 0x00	; 0
 a98:	10 e0       	ldi	r17, 0x00	; 0
 a9a:	89 91       	ld	r24, Y+
 a9c:	60 91 40 02 	lds	r22, 0x0240
 aa0:	70 91 41 02 	lds	r23, 0x0241
 aa4:	db 01       	movw	r26, r22
 aa6:	18 96       	adiw	r26, 0x08	; 8
 aa8:	ed 91       	ld	r30, X+
 aaa:	fc 91       	ld	r31, X
 aac:	19 97       	sbiw	r26, 0x09	; 9
 aae:	88 23       	and	r24, r24
 ab0:	31 f0       	breq	.+12     	; 0xabe <puts+0x40>
 ab2:	19 95       	eicall
 ab4:	89 2b       	or	r24, r25
 ab6:	89 f3       	breq	.-30     	; 0xa9a <puts+0x1c>
 ab8:	0f ef       	ldi	r16, 0xFF	; 255
 aba:	1f ef       	ldi	r17, 0xFF	; 255
 abc:	ee cf       	rjmp	.-36     	; 0xa9a <puts+0x1c>
 abe:	8a e0       	ldi	r24, 0x0A	; 10
 ac0:	19 95       	eicall
 ac2:	89 2b       	or	r24, r25
 ac4:	11 f4       	brne	.+4      	; 0xaca <puts+0x4c>
 ac6:	c8 01       	movw	r24, r16
 ac8:	02 c0       	rjmp	.+4      	; 0xace <puts+0x50>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	df 91       	pop	r29
 ad0:	cf 91       	pop	r28
 ad2:	1f 91       	pop	r17
 ad4:	0f 91       	pop	r16
 ad6:	08 95       	ret

00000ad8 <calloc>:
 ad8:	0f 93       	push	r16
 ada:	1f 93       	push	r17
 adc:	cf 93       	push	r28
 ade:	df 93       	push	r29
 ae0:	86 9f       	mul	r24, r22
 ae2:	80 01       	movw	r16, r0
 ae4:	87 9f       	mul	r24, r23
 ae6:	10 0d       	add	r17, r0
 ae8:	96 9f       	mul	r25, r22
 aea:	10 0d       	add	r17, r0
 aec:	11 24       	eor	r1, r1
 aee:	c8 01       	movw	r24, r16
 af0:	0d d0       	rcall	.+26     	; 0xb0c <malloc>
 af2:	ec 01       	movw	r28, r24
 af4:	00 97       	sbiw	r24, 0x00	; 0
 af6:	21 f0       	breq	.+8      	; 0xb00 <calloc+0x28>
 af8:	a8 01       	movw	r20, r16
 afa:	60 e0       	ldi	r22, 0x00	; 0
 afc:	70 e0       	ldi	r23, 0x00	; 0
 afe:	2d d1       	rcall	.+602    	; 0xd5a <memset>
 b00:	ce 01       	movw	r24, r28
 b02:	df 91       	pop	r29
 b04:	cf 91       	pop	r28
 b06:	1f 91       	pop	r17
 b08:	0f 91       	pop	r16
 b0a:	08 95       	ret

00000b0c <malloc>:
 b0c:	cf 93       	push	r28
 b0e:	df 93       	push	r29
 b10:	82 30       	cpi	r24, 0x02	; 2
 b12:	91 05       	cpc	r25, r1
 b14:	10 f4       	brcc	.+4      	; 0xb1a <malloc+0xe>
 b16:	82 e0       	ldi	r24, 0x02	; 2
 b18:	90 e0       	ldi	r25, 0x00	; 0
 b1a:	e0 91 46 02 	lds	r30, 0x0246
 b1e:	f0 91 47 02 	lds	r31, 0x0247
 b22:	20 e0       	ldi	r18, 0x00	; 0
 b24:	30 e0       	ldi	r19, 0x00	; 0
 b26:	a0 e0       	ldi	r26, 0x00	; 0
 b28:	b0 e0       	ldi	r27, 0x00	; 0
 b2a:	30 97       	sbiw	r30, 0x00	; 0
 b2c:	39 f1       	breq	.+78     	; 0xb7c <malloc+0x70>
 b2e:	40 81       	ld	r20, Z
 b30:	51 81       	ldd	r21, Z+1	; 0x01
 b32:	48 17       	cp	r20, r24
 b34:	59 07       	cpc	r21, r25
 b36:	b8 f0       	brcs	.+46     	; 0xb66 <malloc+0x5a>
 b38:	48 17       	cp	r20, r24
 b3a:	59 07       	cpc	r21, r25
 b3c:	71 f4       	brne	.+28     	; 0xb5a <malloc+0x4e>
 b3e:	82 81       	ldd	r24, Z+2	; 0x02
 b40:	93 81       	ldd	r25, Z+3	; 0x03
 b42:	10 97       	sbiw	r26, 0x00	; 0
 b44:	29 f0       	breq	.+10     	; 0xb50 <malloc+0x44>
 b46:	13 96       	adiw	r26, 0x03	; 3
 b48:	9c 93       	st	X, r25
 b4a:	8e 93       	st	-X, r24
 b4c:	12 97       	sbiw	r26, 0x02	; 2
 b4e:	2c c0       	rjmp	.+88     	; 0xba8 <malloc+0x9c>
 b50:	90 93 47 02 	sts	0x0247, r25
 b54:	80 93 46 02 	sts	0x0246, r24
 b58:	27 c0       	rjmp	.+78     	; 0xba8 <malloc+0x9c>
 b5a:	21 15       	cp	r18, r1
 b5c:	31 05       	cpc	r19, r1
 b5e:	31 f0       	breq	.+12     	; 0xb6c <malloc+0x60>
 b60:	42 17       	cp	r20, r18
 b62:	53 07       	cpc	r21, r19
 b64:	18 f0       	brcs	.+6      	; 0xb6c <malloc+0x60>
 b66:	a9 01       	movw	r20, r18
 b68:	db 01       	movw	r26, r22
 b6a:	01 c0       	rjmp	.+2      	; 0xb6e <malloc+0x62>
 b6c:	ef 01       	movw	r28, r30
 b6e:	9a 01       	movw	r18, r20
 b70:	bd 01       	movw	r22, r26
 b72:	df 01       	movw	r26, r30
 b74:	02 80       	ldd	r0, Z+2	; 0x02
 b76:	f3 81       	ldd	r31, Z+3	; 0x03
 b78:	e0 2d       	mov	r30, r0
 b7a:	d7 cf       	rjmp	.-82     	; 0xb2a <malloc+0x1e>
 b7c:	21 15       	cp	r18, r1
 b7e:	31 05       	cpc	r19, r1
 b80:	f9 f0       	breq	.+62     	; 0xbc0 <malloc+0xb4>
 b82:	28 1b       	sub	r18, r24
 b84:	39 0b       	sbc	r19, r25
 b86:	24 30       	cpi	r18, 0x04	; 4
 b88:	31 05       	cpc	r19, r1
 b8a:	80 f4       	brcc	.+32     	; 0xbac <malloc+0xa0>
 b8c:	8a 81       	ldd	r24, Y+2	; 0x02
 b8e:	9b 81       	ldd	r25, Y+3	; 0x03
 b90:	61 15       	cp	r22, r1
 b92:	71 05       	cpc	r23, r1
 b94:	21 f0       	breq	.+8      	; 0xb9e <malloc+0x92>
 b96:	fb 01       	movw	r30, r22
 b98:	93 83       	std	Z+3, r25	; 0x03
 b9a:	82 83       	std	Z+2, r24	; 0x02
 b9c:	04 c0       	rjmp	.+8      	; 0xba6 <malloc+0x9a>
 b9e:	90 93 47 02 	sts	0x0247, r25
 ba2:	80 93 46 02 	sts	0x0246, r24
 ba6:	fe 01       	movw	r30, r28
 ba8:	32 96       	adiw	r30, 0x02	; 2
 baa:	44 c0       	rjmp	.+136    	; 0xc34 <malloc+0x128>
 bac:	fe 01       	movw	r30, r28
 bae:	e2 0f       	add	r30, r18
 bb0:	f3 1f       	adc	r31, r19
 bb2:	81 93       	st	Z+, r24
 bb4:	91 93       	st	Z+, r25
 bb6:	22 50       	subi	r18, 0x02	; 2
 bb8:	31 09       	sbc	r19, r1
 bba:	39 83       	std	Y+1, r19	; 0x01
 bbc:	28 83       	st	Y, r18
 bbe:	3a c0       	rjmp	.+116    	; 0xc34 <malloc+0x128>
 bc0:	20 91 44 02 	lds	r18, 0x0244
 bc4:	30 91 45 02 	lds	r19, 0x0245
 bc8:	23 2b       	or	r18, r19
 bca:	41 f4       	brne	.+16     	; 0xbdc <malloc+0xd0>
 bcc:	20 91 02 02 	lds	r18, 0x0202
 bd0:	30 91 03 02 	lds	r19, 0x0203
 bd4:	30 93 45 02 	sts	0x0245, r19
 bd8:	20 93 44 02 	sts	0x0244, r18
 bdc:	20 91 00 02 	lds	r18, 0x0200
 be0:	30 91 01 02 	lds	r19, 0x0201
 be4:	21 15       	cp	r18, r1
 be6:	31 05       	cpc	r19, r1
 be8:	41 f4       	brne	.+16     	; 0xbfa <malloc+0xee>
 bea:	2d b7       	in	r18, 0x3d	; 61
 bec:	3e b7       	in	r19, 0x3e	; 62
 bee:	40 91 04 02 	lds	r20, 0x0204
 bf2:	50 91 05 02 	lds	r21, 0x0205
 bf6:	24 1b       	sub	r18, r20
 bf8:	35 0b       	sbc	r19, r21
 bfa:	e0 91 44 02 	lds	r30, 0x0244
 bfe:	f0 91 45 02 	lds	r31, 0x0245
 c02:	e2 17       	cp	r30, r18
 c04:	f3 07       	cpc	r31, r19
 c06:	a0 f4       	brcc	.+40     	; 0xc30 <malloc+0x124>
 c08:	2e 1b       	sub	r18, r30
 c0a:	3f 0b       	sbc	r19, r31
 c0c:	28 17       	cp	r18, r24
 c0e:	39 07       	cpc	r19, r25
 c10:	78 f0       	brcs	.+30     	; 0xc30 <malloc+0x124>
 c12:	ac 01       	movw	r20, r24
 c14:	4e 5f       	subi	r20, 0xFE	; 254
 c16:	5f 4f       	sbci	r21, 0xFF	; 255
 c18:	24 17       	cp	r18, r20
 c1a:	35 07       	cpc	r19, r21
 c1c:	48 f0       	brcs	.+18     	; 0xc30 <malloc+0x124>
 c1e:	4e 0f       	add	r20, r30
 c20:	5f 1f       	adc	r21, r31
 c22:	50 93 45 02 	sts	0x0245, r21
 c26:	40 93 44 02 	sts	0x0244, r20
 c2a:	81 93       	st	Z+, r24
 c2c:	91 93       	st	Z+, r25
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <malloc+0x128>
 c30:	e0 e0       	ldi	r30, 0x00	; 0
 c32:	f0 e0       	ldi	r31, 0x00	; 0
 c34:	cf 01       	movw	r24, r30
 c36:	df 91       	pop	r29
 c38:	cf 91       	pop	r28
 c3a:	08 95       	ret

00000c3c <free>:
 c3c:	cf 93       	push	r28
 c3e:	df 93       	push	r29
 c40:	00 97       	sbiw	r24, 0x00	; 0
 c42:	09 f4       	brne	.+2      	; 0xc46 <free+0xa>
 c44:	87 c0       	rjmp	.+270    	; 0xd54 <free+0x118>
 c46:	fc 01       	movw	r30, r24
 c48:	32 97       	sbiw	r30, 0x02	; 2
 c4a:	13 82       	std	Z+3, r1	; 0x03
 c4c:	12 82       	std	Z+2, r1	; 0x02
 c4e:	c0 91 46 02 	lds	r28, 0x0246
 c52:	d0 91 47 02 	lds	r29, 0x0247
 c56:	20 97       	sbiw	r28, 0x00	; 0
 c58:	81 f4       	brne	.+32     	; 0xc7a <free+0x3e>
 c5a:	20 81       	ld	r18, Z
 c5c:	31 81       	ldd	r19, Z+1	; 0x01
 c5e:	28 0f       	add	r18, r24
 c60:	39 1f       	adc	r19, r25
 c62:	80 91 44 02 	lds	r24, 0x0244
 c66:	90 91 45 02 	lds	r25, 0x0245
 c6a:	82 17       	cp	r24, r18
 c6c:	93 07       	cpc	r25, r19
 c6e:	79 f5       	brne	.+94     	; 0xcce <free+0x92>
 c70:	f0 93 45 02 	sts	0x0245, r31
 c74:	e0 93 44 02 	sts	0x0244, r30
 c78:	6d c0       	rjmp	.+218    	; 0xd54 <free+0x118>
 c7a:	de 01       	movw	r26, r28
 c7c:	20 e0       	ldi	r18, 0x00	; 0
 c7e:	30 e0       	ldi	r19, 0x00	; 0
 c80:	ae 17       	cp	r26, r30
 c82:	bf 07       	cpc	r27, r31
 c84:	50 f4       	brcc	.+20     	; 0xc9a <free+0x5e>
 c86:	12 96       	adiw	r26, 0x02	; 2
 c88:	4d 91       	ld	r20, X+
 c8a:	5c 91       	ld	r21, X
 c8c:	13 97       	sbiw	r26, 0x03	; 3
 c8e:	9d 01       	movw	r18, r26
 c90:	41 15       	cp	r20, r1
 c92:	51 05       	cpc	r21, r1
 c94:	09 f1       	breq	.+66     	; 0xcd8 <free+0x9c>
 c96:	da 01       	movw	r26, r20
 c98:	f3 cf       	rjmp	.-26     	; 0xc80 <free+0x44>
 c9a:	b3 83       	std	Z+3, r27	; 0x03
 c9c:	a2 83       	std	Z+2, r26	; 0x02
 c9e:	40 81       	ld	r20, Z
 ca0:	51 81       	ldd	r21, Z+1	; 0x01
 ca2:	84 0f       	add	r24, r20
 ca4:	95 1f       	adc	r25, r21
 ca6:	8a 17       	cp	r24, r26
 ca8:	9b 07       	cpc	r25, r27
 caa:	71 f4       	brne	.+28     	; 0xcc8 <free+0x8c>
 cac:	8d 91       	ld	r24, X+
 cae:	9c 91       	ld	r25, X
 cb0:	11 97       	sbiw	r26, 0x01	; 1
 cb2:	84 0f       	add	r24, r20
 cb4:	95 1f       	adc	r25, r21
 cb6:	02 96       	adiw	r24, 0x02	; 2
 cb8:	91 83       	std	Z+1, r25	; 0x01
 cba:	80 83       	st	Z, r24
 cbc:	12 96       	adiw	r26, 0x02	; 2
 cbe:	8d 91       	ld	r24, X+
 cc0:	9c 91       	ld	r25, X
 cc2:	13 97       	sbiw	r26, 0x03	; 3
 cc4:	93 83       	std	Z+3, r25	; 0x03
 cc6:	82 83       	std	Z+2, r24	; 0x02
 cc8:	21 15       	cp	r18, r1
 cca:	31 05       	cpc	r19, r1
 ccc:	29 f4       	brne	.+10     	; 0xcd8 <free+0x9c>
 cce:	f0 93 47 02 	sts	0x0247, r31
 cd2:	e0 93 46 02 	sts	0x0246, r30
 cd6:	3e c0       	rjmp	.+124    	; 0xd54 <free+0x118>
 cd8:	d9 01       	movw	r26, r18
 cda:	13 96       	adiw	r26, 0x03	; 3
 cdc:	fc 93       	st	X, r31
 cde:	ee 93       	st	-X, r30
 ce0:	12 97       	sbiw	r26, 0x02	; 2
 ce2:	4d 91       	ld	r20, X+
 ce4:	5d 91       	ld	r21, X+
 ce6:	a4 0f       	add	r26, r20
 ce8:	b5 1f       	adc	r27, r21
 cea:	ea 17       	cp	r30, r26
 cec:	fb 07       	cpc	r31, r27
 cee:	79 f4       	brne	.+30     	; 0xd0e <free+0xd2>
 cf0:	80 81       	ld	r24, Z
 cf2:	91 81       	ldd	r25, Z+1	; 0x01
 cf4:	84 0f       	add	r24, r20
 cf6:	95 1f       	adc	r25, r21
 cf8:	02 96       	adiw	r24, 0x02	; 2
 cfa:	d9 01       	movw	r26, r18
 cfc:	11 96       	adiw	r26, 0x01	; 1
 cfe:	9c 93       	st	X, r25
 d00:	8e 93       	st	-X, r24
 d02:	82 81       	ldd	r24, Z+2	; 0x02
 d04:	93 81       	ldd	r25, Z+3	; 0x03
 d06:	13 96       	adiw	r26, 0x03	; 3
 d08:	9c 93       	st	X, r25
 d0a:	8e 93       	st	-X, r24
 d0c:	12 97       	sbiw	r26, 0x02	; 2
 d0e:	e0 e0       	ldi	r30, 0x00	; 0
 d10:	f0 e0       	ldi	r31, 0x00	; 0
 d12:	8a 81       	ldd	r24, Y+2	; 0x02
 d14:	9b 81       	ldd	r25, Y+3	; 0x03
 d16:	00 97       	sbiw	r24, 0x00	; 0
 d18:	19 f0       	breq	.+6      	; 0xd20 <free+0xe4>
 d1a:	fe 01       	movw	r30, r28
 d1c:	ec 01       	movw	r28, r24
 d1e:	f9 cf       	rjmp	.-14     	; 0xd12 <free+0xd6>
 d20:	ce 01       	movw	r24, r28
 d22:	02 96       	adiw	r24, 0x02	; 2
 d24:	28 81       	ld	r18, Y
 d26:	39 81       	ldd	r19, Y+1	; 0x01
 d28:	82 0f       	add	r24, r18
 d2a:	93 1f       	adc	r25, r19
 d2c:	20 91 44 02 	lds	r18, 0x0244
 d30:	30 91 45 02 	lds	r19, 0x0245
 d34:	28 17       	cp	r18, r24
 d36:	39 07       	cpc	r19, r25
 d38:	69 f4       	brne	.+26     	; 0xd54 <free+0x118>
 d3a:	30 97       	sbiw	r30, 0x00	; 0
 d3c:	29 f4       	brne	.+10     	; 0xd48 <free+0x10c>
 d3e:	10 92 47 02 	sts	0x0247, r1
 d42:	10 92 46 02 	sts	0x0246, r1
 d46:	02 c0       	rjmp	.+4      	; 0xd4c <free+0x110>
 d48:	13 82       	std	Z+3, r1	; 0x03
 d4a:	12 82       	std	Z+2, r1	; 0x02
 d4c:	d0 93 45 02 	sts	0x0245, r29
 d50:	c0 93 44 02 	sts	0x0244, r28
 d54:	df 91       	pop	r29
 d56:	cf 91       	pop	r28
 d58:	08 95       	ret

00000d5a <memset>:
 d5a:	dc 01       	movw	r26, r24
 d5c:	01 c0       	rjmp	.+2      	; 0xd60 <memset+0x6>
 d5e:	6d 93       	st	X+, r22
 d60:	41 50       	subi	r20, 0x01	; 1
 d62:	50 40       	sbci	r21, 0x00	; 0
 d64:	e0 f7       	brcc	.-8      	; 0xd5e <memset+0x4>
 d66:	08 95       	ret

00000d68 <_exit>:
 d68:	f8 94       	cli

00000d6a <__stop_program>:
 d6a:	ff cf       	rjmp	.-2      	; 0xd6a <__stop_program>
