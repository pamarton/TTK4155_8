
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00800200  0000120e  000012a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000120e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800220  00800220  000012c2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012c2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  0000131e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001566  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a5a  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000dc0  00000000  00000000  000034de  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000470  00000000  00000000  000042a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000535  00000000  00000000  00004710  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a47  00000000  00000000  00004c45  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001b0  00000000  00000000  0000568c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	9e c0       	rjmp	.+316    	; 0x152 <__vector_5>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e0       	ldi	r30, 0x0E	; 14
      fc:	f2 e1       	ldi	r31, 0x12	; 18
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 32       	cpi	r26, 0x20	; 32
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	22 e0       	ldi	r18, 0x02	; 2
     110:	a0 e2       	ldi	r26, 0x20	; 32
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a1 34       	cpi	r26, 0x41	; 65
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	9b d1       	rcall	.+822    	; 0x456 <main>
     120:	0c 94 05 09 	jmp	0x120a	; 0x120a <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <CAN_message_receive>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
     126:	8c e2       	ldi	r24, 0x2C	; 44
     128:	92 e0       	ldi	r25, 0x02	; 2
     12a:	08 95       	ret

0000012c <CAN_construct_message>:
     12c:	90 93 22 02 	sts	0x0222, r25
     130:	80 93 21 02 	sts	0x0221, r24
     134:	60 93 23 02 	sts	0x0223, r22
     138:	66 23       	and	r22, r22
     13a:	41 f0       	breq	.+16     	; 0x14c <CAN_construct_message+0x20>
     13c:	84 e2       	ldi	r24, 0x24	; 36
     13e:	92 e0       	ldi	r25, 0x02	; 2
     140:	fc 01       	movw	r30, r24
     142:	11 92       	st	Z+, r1
     144:	2e 2f       	mov	r18, r30
     146:	28 1b       	sub	r18, r24
     148:	26 17       	cp	r18, r22
     14a:	d8 f3       	brcs	.-10     	; 0x142 <CAN_construct_message+0x16>
     14c:	08 95       	ret

0000014e <CAN_read>:
     14e:	9d c0       	rjmp	.+314    	; 0x28a <MCP2515_read>
     150:	08 95       	ret

00000152 <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     152:	1f 92       	push	r1
     154:	0f 92       	push	r0
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	0f 92       	push	r0
     15a:	11 24       	eor	r1, r1
     15c:	8f 93       	push	r24
	receive_flag = 1;
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	80 93 20 02 	sts	0x0220, r24
}
     164:	8f 91       	pop	r24
     166:	0f 90       	pop	r0
     168:	0f be       	out	0x3f, r0	; 63
     16a:	0f 90       	pop	r0
     16c:	1f 90       	pop	r1
     16e:	18 95       	reti

00000170 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
     170:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     172:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     174:	ea e6       	ldi	r30, 0x6A	; 106
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	80 81       	ld	r24, Z
     17a:	8e 7f       	andi	r24, 0xFE	; 254
     17c:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     17e:	80 81       	ld	r24, Z
     180:	82 60       	ori	r24, 0x02	; 2
     182:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     184:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
		
	
	#endif
	sei();
     186:	78 94       	sei
     188:	08 95       	ret

0000018a <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     18a:	a6 d0       	rcall	.+332    	; 0x2d8 <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     18c:	68 e0       	ldi	r22, 0x08	; 8
     18e:	88 e2       	ldi	r24, 0x28	; 40
     190:	90 e0       	ldi	r25, 0x00	; 0
     192:	cc df       	rcall	.-104    	; 0x12c <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     194:	4f ef       	ldi	r20, 0xFF	; 255
     196:	50 e0       	ldi	r21, 0x00	; 0
     198:	64 e6       	ldi	r22, 0x64	; 100
     19a:	80 e6       	ldi	r24, 0x60	; 96
     19c:	84 d0       	rcall	.+264    	; 0x2a6 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     19e:	4f ef       	ldi	r20, 0xFF	; 255
     1a0:	50 e0       	ldi	r21, 0x00	; 0
     1a2:	64 e6       	ldi	r22, 0x64	; 100
     1a4:	80 e7       	ldi	r24, 0x70	; 112
     1a6:	7f d0       	rcall	.+254    	; 0x2a6 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     1a8:	41 e0       	ldi	r20, 0x01	; 1
     1aa:	50 e0       	ldi	r21, 0x00	; 0
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	8b e2       	ldi	r24, 0x2B	; 43
     1b0:	7a d0       	rcall	.+244    	; 0x2a6 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 ee       	ldi	r22, 0xE0	; 224
     1b8:	8f e0       	ldi	r24, 0x0F	; 15
     1ba:	75 d0       	rcall	.+234    	; 0x2a6 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     1bc:	d9 cf       	rjmp	.-78     	; 0x170 <CAN_interrupt_setup>
     1be:	08 95       	ret

000001c0 <CAN_reception_complete>:
	
	#endif
	sei();
}

int8_t CAN_reception_complete(void){
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) | (MCP2515_read(MCP_CANINTF) & MCP_RX1IF)));
     1c4:	8c e2       	ldi	r24, 0x2C	; 44
     1c6:	61 d0       	rcall	.+194    	; 0x28a <MCP2515_read>
     1c8:	ec 01       	movw	r28, r24
     1ca:	8c e2       	ldi	r24, 0x2C	; 44
     1cc:	5e d0       	rcall	.+188    	; 0x28a <MCP2515_read>
     1ce:	82 70       	andi	r24, 0x02	; 2
     1d0:	99 27       	eor	r25, r25
     1d2:	c1 70       	andi	r28, 0x01	; 1
     1d4:	dd 27       	eor	r29, r29
     1d6:	c8 2b       	or	r28, r24
     1d8:	d9 2b       	or	r29, r25
     1da:	cd 2b       	or	r28, r29
     1dc:	99 f3       	breq	.-26     	; 0x1c4 <CAN_reception_complete+0x4>
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     1de:	8c e2       	ldi	r24, 0x2C	; 44
     1e0:	54 d0       	rcall	.+168    	; 0x28a <MCP2515_read>
     1e2:	80 ff       	sbrs	r24, 0
     1e4:	07 c0       	rjmp	.+14     	; 0x1f4 <CAN_reception_complete+0x34>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	61 e0       	ldi	r22, 0x01	; 1
     1ec:	8c e2       	ldi	r24, 0x2C	; 44
     1ee:	5b d0       	rcall	.+182    	; 0x2a6 <MCP2515_bit_modify>
		return 0;
     1f0:	80 e0       	ldi	r24, 0x00	; 0
     1f2:	0c c0       	rjmp	.+24     	; 0x20c <CAN_reception_complete+0x4c>
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     1f4:	8c e2       	ldi	r24, 0x2C	; 44
     1f6:	49 d0       	rcall	.+146    	; 0x28a <MCP2515_read>
     1f8:	81 ff       	sbrs	r24, 1
     1fa:	07 c0       	rjmp	.+14     	; 0x20a <CAN_reception_complete+0x4a>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     1fc:	40 e0       	ldi	r20, 0x00	; 0
     1fe:	50 e0       	ldi	r21, 0x00	; 0
     200:	62 e0       	ldi	r22, 0x02	; 2
     202:	8c e2       	ldi	r24, 0x2C	; 44
     204:	50 d0       	rcall	.+160    	; 0x2a6 <MCP2515_bit_modify>
		return 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	01 c0       	rjmp	.+2      	; 0x20c <CAN_reception_complete+0x4c>
	}
	return -1;
     20a:	8f ef       	ldi	r24, 0xFF	; 255
}
     20c:	df 91       	pop	r29
     20e:	cf 91       	pop	r28
     210:	08 95       	ret

00000212 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     212:	1f 93       	push	r17
     214:	cf 93       	push	r28
     216:	df 93       	push	r29
	if(receive_flag){
     218:	80 91 20 02 	lds	r24, 0x0220
     21c:	88 23       	and	r24, r24
     21e:	61 f1       	breq	.+88     	; 0x278 <CAN_data_receive+0x66>
		receive_flag = 0;
     220:	10 92 20 02 	sts	0x0220, r1
		uint8_t n = CAN_reception_complete();
     224:	cd df       	rcall	.-102    	; 0x1c0 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     226:	c8 2f       	mov	r28, r24
     228:	c2 95       	swap	r28
     22a:	c0 7f       	andi	r28, 0xF0	; 240
     22c:	82 e6       	ldi	r24, 0x62	; 98
     22e:	8c 0f       	add	r24, r28
     230:	8e df       	rcall	.-228    	; 0x14e <CAN_read>
     232:	81 e6       	ldi	r24, 0x61	; 97
     234:	8c 0f       	add	r24, r28
     236:	8b df       	rcall	.-234    	; 0x14e <CAN_read>
     238:	28 e0       	ldi	r18, 0x08	; 8
     23a:	82 9f       	mul	r24, r18
     23c:	c0 01       	movw	r24, r0
     23e:	11 24       	eor	r1, r1
     240:	90 93 2d 02 	sts	0x022D, r25
     244:	80 93 2c 02 	sts	0x022C, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     248:	85 e6       	ldi	r24, 0x65	; 101
     24a:	8c 0f       	add	r24, r28
     24c:	80 df       	rcall	.-256    	; 0x14e <CAN_read>
     24e:	8f 70       	andi	r24, 0x0F	; 15
     250:	80 93 2e 02 	sts	0x022E, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     254:	88 23       	and	r24, r24
     256:	91 f0       	breq	.+36     	; 0x27c <CAN_data_receive+0x6a>
     258:	10 e0       	ldi	r17, 0x00	; 0
     25a:	ce e2       	ldi	r28, 0x2E	; 46
     25c:	d2 e0       	ldi	r29, 0x02	; 2
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     25e:	86 e6       	ldi	r24, 0x66	; 102
     260:	81 0f       	add	r24, r17
     262:	75 df       	rcall	.-278    	; 0x14e <CAN_read>
     264:	e1 2f       	mov	r30, r17
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	e4 5d       	subi	r30, 0xD4	; 212
     26a:	fd 4f       	sbci	r31, 0xFD	; 253
     26c:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     26e:	1f 5f       	subi	r17, 0xFF	; 255
     270:	88 81       	ld	r24, Y
     272:	18 17       	cp	r17, r24
     274:	a0 f3       	brcs	.-24     	; 0x25e <CAN_data_receive+0x4c>
     276:	04 c0       	rjmp	.+8      	; 0x280 <CAN_data_receive+0x6e>
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
     278:	80 e0       	ldi	r24, 0x00	; 0
     27a:	03 c0       	rjmp	.+6      	; 0x282 <CAN_data_receive+0x70>
		}
		#if UART_ENABLE
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
     27c:	81 e0       	ldi	r24, 0x01	; 1
     27e:	01 c0       	rjmp	.+2      	; 0x282 <CAN_data_receive+0x70>
     280:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	1f 91       	pop	r17
     288:	08 95       	ret

0000028a <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     28a:	cf 93       	push	r28
     28c:	c8 2f       	mov	r28, r24
     28e:	33 d0       	rcall	.+102    	; 0x2f6 <SPI_select>
     290:	83 e0       	ldi	r24, 0x03	; 3
     292:	25 d0       	rcall	.+74     	; 0x2de <SPI_send>
     294:	8c 2f       	mov	r24, r28
     296:	23 d0       	rcall	.+70     	; 0x2de <SPI_send>
     298:	27 d0       	rcall	.+78     	; 0x2e8 <SPI_receive>
     29a:	c8 2f       	mov	r28, r24
     29c:	2e d0       	rcall	.+92     	; 0x2fa <SPI_deselect>
     29e:	8c 2f       	mov	r24, r28
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	cf 91       	pop	r28
     2a4:	08 95       	ret

000002a6 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     2a6:	1f 93       	push	r17
     2a8:	cf 93       	push	r28
     2aa:	df 93       	push	r29
     2ac:	18 2f       	mov	r17, r24
     2ae:	d6 2f       	mov	r29, r22
     2b0:	c4 2f       	mov	r28, r20
	SPI_select();
     2b2:	21 d0       	rcall	.+66     	; 0x2f6 <SPI_select>
	SPI_send(MCP_BITMOD);
     2b4:	85 e0       	ldi	r24, 0x05	; 5
     2b6:	13 d0       	rcall	.+38     	; 0x2de <SPI_send>
	SPI_send(adr);
     2b8:	81 2f       	mov	r24, r17
     2ba:	11 d0       	rcall	.+34     	; 0x2de <SPI_send>
	SPI_send(mask);
     2bc:	8d 2f       	mov	r24, r29
     2be:	0f d0       	rcall	.+30     	; 0x2de <SPI_send>
	SPI_send(data);
     2c0:	8c 2f       	mov	r24, r28
     2c2:	0d d0       	rcall	.+26     	; 0x2de <SPI_send>
	SPI_deselect();
     2c4:	1a d0       	rcall	.+52     	; 0x2fa <SPI_deselect>
}
     2c6:	df 91       	pop	r29
     2c8:	cf 91       	pop	r28
     2ca:	1f 91       	pop	r17
     2cc:	08 95       	ret

000002ce <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     2ce:	13 d0       	rcall	.+38     	; 0x2f6 <SPI_select>
	SPI_send(MCP_RESET);
     2d0:	80 ec       	ldi	r24, 0xC0	; 192
     2d2:	05 d0       	rcall	.+10     	; 0x2de <SPI_send>
	SPI_deselect();
     2d4:	12 c0       	rjmp	.+36     	; 0x2fa <SPI_deselect>
     2d6:	08 95       	ret

000002d8 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     2d8:	12 d0       	rcall	.+36     	; 0x2fe <SPI_initialize>
	MCP2515_reset();
     2da:	f9 cf       	rjmp	.-14     	; 0x2ce <MCP2515_reset>
     2dc:	08 95       	ret

000002de <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     2de:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     2e0:	0d b4       	in	r0, 0x2d	; 45
     2e2:	07 fe       	sbrs	r0, 7
     2e4:	fd cf       	rjmp	.-6      	; 0x2e0 <SPI_send+0x2>

}
     2e6:	08 95       	ret

000002e8 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	f9 df       	rcall	.-14     	; 0x2de <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     2ec:	0d b4       	in	r0, 0x2d	; 45
     2ee:	07 fe       	sbrs	r0, 7
     2f0:	fd cf       	rjmp	.-6      	; 0x2ec <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     2f2:	8e b5       	in	r24, 0x2e	; 46
}
     2f4:	08 95       	ret

000002f6 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     2f6:	2f 98       	cbi	0x05, 7	; 5
     2f8:	08 95       	ret

000002fa <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     2fa:	2f 9a       	sbi	0x05, 7	; 5
     2fc:	08 95       	ret

000002fe <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     2fe:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     300:	8c b5       	in	r24, 0x2c	; 44
     302:	81 60       	ori	r24, 0x01	; 1
     304:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     306:	84 b1       	in	r24, 0x04	; 4
     308:	86 68       	ori	r24, 0x86	; 134
     30a:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     30c:	8c b5       	in	r24, 0x2c	; 44
     30e:	80 65       	ori	r24, 0x50	; 80
     310:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     312:	f3 cf       	rjmp	.-26     	; 0x2fa <SPI_deselect>
     314:	08 95       	ret

00000316 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     316:	e0 ec       	ldi	r30, 0xC0	; 192
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	90 81       	ld	r25, Z
     31c:	95 ff       	sbrs	r25, 5
     31e:	fd cf       	rjmp	.-6      	; 0x31a <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     320:	80 93 c6 00 	sts	0x00C6, r24
     324:	08 95       	ret

00000326 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     326:	e0 ec       	ldi	r30, 0xC0	; 192
     328:	f0 e0       	ldi	r31, 0x00	; 0
     32a:	80 81       	ld	r24, Z
     32c:	88 23       	and	r24, r24
     32e:	ec f7       	brge	.-6      	; 0x32a <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     330:	80 91 c6 00 	lds	r24, 0x00C6
}
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	08 95       	ret

00000338 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     338:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     33c:	87 e6       	ldi	r24, 0x67	; 103
     33e:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     342:	88 e1       	ldi	r24, 0x18	; 24
     344:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     348:	8e e0       	ldi	r24, 0x0E	; 14
     34a:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     34e:	63 e9       	ldi	r22, 0x93	; 147
     350:	71 e0       	ldi	r23, 0x01	; 1
     352:	8b e8       	ldi	r24, 0x8B	; 139
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	f5 c2       	rjmp	.+1514   	; 0x942 <fdevopen>
     358:	08 95       	ret

0000035a <IR_init>:
#include "IRsensor.h"


//int input_val;

void IR_init(void){	
     35a:	cf 93       	push	r28
     35c:	df 93       	push	r29
	
	//Enable input at port F0
	DDRF &= ~(1 << PF0);
     35e:	80 98       	cbi	0x10, 0	; 16

	//Left adjusting (the 10-bit result) instead of right adjusting.
	//ADMUX |= (1<<ADLAR);
	
	// Set ADC prescaler to 128 -> 125kHz sample rate @ 16MHz.
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		
     360:	ea e7       	ldi	r30, 0x7A	; 122
     362:	f0 e0       	ldi	r31, 0x00	; 0
     364:	80 81       	ld	r24, Z
     366:	87 60       	ori	r24, 0x07	; 7
     368:	80 83       	st	Z, r24
	
	//Turning on internal voltage reference.
	ADMUX = (1<<REFS0);//|(1<<REFS1);
     36a:	ac e7       	ldi	r26, 0x7C	; 124
     36c:	b0 e0       	ldi	r27, 0x00	; 0
     36e:	80 e4       	ldi	r24, 0x40	; 64
     370:	8c 93       	st	X, r24
	
	//Use ADC0 -> Mux5:0 = 00000
	ADMUX &= ~((1<<MUX4)&(1<<MUX3)&(1<<MUX2)&(1<<MUX1)&(1<<MUX0));
     372:	8c 91       	ld	r24, X
     374:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<MUX5);
     376:	cb e7       	ldi	r28, 0x7B	; 123
     378:	d0 e0       	ldi	r29, 0x00	; 0
     37a:	88 81       	ld	r24, Y
     37c:	87 7f       	andi	r24, 0xF7	; 247
     37e:	88 83       	st	Y, r24
	
	// ADC Auto Triger Engable.
	ADCSRA |= (1<<ADATE);
     380:	80 81       	ld	r24, Z
     382:	80 62       	ori	r24, 0x20	; 32
     384:	80 83       	st	Z, r24
	
	//Use Free-running mode.
	ADCSRB = (1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0);
     386:	87 e0       	ldi	r24, 0x07	; 7
     388:	88 83       	st	Y, r24
	
	//Use 8-bit resolution, all data is stored in ADCH.
	ADMUX |= (1<<ADLAR);
     38a:	8c 91       	ld	r24, X
     38c:	80 62       	ori	r24, 0x20	; 32
     38e:	8c 93       	st	X, r24
	
	//Enabling ADC. ADC Result will be presented in ADC Data Registers ADCH & ADCL.
	ADCSRA |= (1<<ADEN);
     390:	80 81       	ld	r24, Z
     392:	80 68       	ori	r24, 0x80	; 128
     394:	80 83       	st	Z, r24
	
	// Start A2D conversion.
	ADCSRA |= (1<<ADSC);            
     396:	80 81       	ld	r24, Z
     398:	80 64       	ori	r24, 0x40	; 64
     39a:	80 83       	st	Z, r24
	
	
	

}
     39c:	df 91       	pop	r29
     39e:	cf 91       	pop	r28
     3a0:	08 95       	ret

000003a2 <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(20);
     3a2:	60 e0       	ldi	r22, 0x00	; 0
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 ea       	ldi	r24, 0xA0	; 160
     3a8:	91 e4       	ldi	r25, 0x41	; 65
     3aa:	94 d0       	rcall	.+296    	; 0x4d4 <pwm_init>

int servo_set(int value){
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
			pwm_set_pulse_width(pulse_width);
     3ac:	60 e0       	ldi	r22, 0x00	; 0
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	80 ec       	ldi	r24, 0xC0	; 192
     3b2:	9f e3       	ldi	r25, 0x3F	; 63
     3b4:	79 c0       	rjmp	.+242    	; 0x4a8 <pwm_set_pulse_width>
     3b6:	08 95       	ret

000003b8 <servo_set>:
void servo_init(void){
	pwm_init(20);
	servo_set(0);
}

int servo_set(int value){
     3b8:	cf 92       	push	r12
     3ba:	df 92       	push	r13
     3bc:	ef 92       	push	r14
     3be:	ff 92       	push	r15
     3c0:	bc 01       	movw	r22, r24
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
     3c2:	8c 59       	subi	r24, 0x9C	; 156
     3c4:	9f 4f       	sbci	r25, 0xFF	; 255
     3c6:	89 3c       	cpi	r24, 0xC9	; 201
     3c8:	91 05       	cpc	r25, r1
     3ca:	98 f5       	brcc	.+102    	; 0x432 <servo_set+0x7a>
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
     3cc:	88 27       	eor	r24, r24
     3ce:	77 fd       	sbrc	r23, 7
     3d0:	80 95       	com	r24
     3d2:	98 2f       	mov	r25, r24
     3d4:	9f d1       	rcall	.+830    	; 0x714 <__floatsisf>
     3d6:	9b 01       	movw	r18, r22
     3d8:	ac 01       	movw	r20, r24
     3da:	60 e0       	ldi	r22, 0x00	; 0
     3dc:	70 e0       	ldi	r23, 0x00	; 0
     3de:	88 ec       	ldi	r24, 0xC8	; 200
     3e0:	92 e4       	ldi	r25, 0x42	; 66
     3e2:	94 d0       	rcall	.+296    	; 0x50c <__subsf3>
     3e4:	20 e0       	ldi	r18, 0x00	; 0
     3e6:	30 e0       	ldi	r19, 0x00	; 0
     3e8:	48 e4       	ldi	r20, 0x48	; 72
     3ea:	53 e4       	ldi	r21, 0x43	; 67
     3ec:	f8 d0       	rcall	.+496    	; 0x5de <__divsf3>
     3ee:	29 e9       	ldi	r18, 0x99	; 153
     3f0:	39 e9       	ldi	r19, 0x99	; 153
     3f2:	49 e9       	ldi	r20, 0x99	; 153
     3f4:	5f e3       	ldi	r21, 0x3F	; 63
     3f6:	42 d2       	rcall	.+1156   	; 0x87c <__mulsf3>
     3f8:	26 e6       	ldi	r18, 0x66	; 102
     3fa:	36 e6       	ldi	r19, 0x66	; 102
     3fc:	46 e6       	ldi	r20, 0x66	; 102
     3fe:	5f e3       	ldi	r21, 0x3F	; 63
     400:	86 d0       	rcall	.+268    	; 0x50e <__addsf3>
     402:	6b 01       	movw	r12, r22
     404:	7c 01       	movw	r14, r24
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
     406:	26 e6       	ldi	r18, 0x66	; 102
     408:	36 e6       	ldi	r19, 0x66	; 102
     40a:	46 e6       	ldi	r20, 0x66	; 102
     40c:	5f e3       	ldi	r21, 0x3F	; 63
     40e:	32 d2       	rcall	.+1124   	; 0x874 <__gesf2>
     410:	88 23       	and	r24, r24
     412:	94 f0       	brlt	.+36     	; 0x438 <servo_set+0x80>
     414:	26 e6       	ldi	r18, 0x66	; 102
     416:	36 e6       	ldi	r19, 0x66	; 102
     418:	46 e0       	ldi	r20, 0x06	; 6
     41a:	50 e4       	ldi	r21, 0x40	; 64
     41c:	c7 01       	movw	r24, r14
     41e:	b6 01       	movw	r22, r12
     420:	da d0       	rcall	.+436    	; 0x5d6 <__cmpsf2>
     422:	18 16       	cp	r1, r24
     424:	64 f0       	brlt	.+24     	; 0x43e <servo_set+0x86>
			pwm_set_pulse_width(pulse_width);
     426:	c7 01       	movw	r24, r14
     428:	b6 01       	movw	r22, r12
     42a:	3e d0       	rcall	.+124    	; 0x4a8 <pwm_set_pulse_width>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
     42c:	81 e0       	ldi	r24, 0x01	; 1
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	08 c0       	rjmp	.+16     	; 0x442 <servo_set+0x8a>
		}else{
			return 0;
		}
	}else{
		return -1;
     432:	8f ef       	ldi	r24, 0xFF	; 255
     434:	9f ef       	ldi	r25, 0xFF	; 255
     436:	05 c0       	rjmp	.+10     	; 0x442 <servo_set+0x8a>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
		}else{
			return 0;
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	02 c0       	rjmp	.+4      	; 0x442 <servo_set+0x8a>
     43e:	80 e0       	ldi	r24, 0x00	; 0
     440:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		return -1;
	}
     442:	ff 90       	pop	r15
     444:	ef 90       	pop	r14
     446:	df 90       	pop	r13
     448:	cf 90       	pop	r12
     44a:	08 95       	ret

0000044c <init_all>:
    return 0;
}

void init_all(void){
	
	cli();
     44c:	f8 94       	cli
	init_UART();
     44e:	74 df       	rcall	.-280    	; 0x338 <init_UART>
	CAN_initialize();
     450:	9c de       	rcall	.-712    	; 0x18a <CAN_initialize>
	
	
	#if UART_ENABLE
		printf("Program initialized\n");
	#endif
	sei();
     452:	78 94       	sei
     454:	08 95       	ret

00000456 <main>:


void init_all(void);

int main(void){
	init_all();
     456:	fa df       	rcall	.-12     	; 0x44c <init_all>
	
	printf("Hallo\n");
     458:	86 e0       	ldi	r24, 0x06	; 6
     45a:	92 e0       	ldi	r25, 0x02	; 2
     45c:	cd d2       	rcall	.+1434   	; 0x9f8 <puts>
	
	IR_init();
     45e:	7d df       	rcall	.-262    	; 0x35a <IR_init>
	
	
	servo_init();
     460:	a0 df       	rcall	.-192    	; 0x3a2 <servo_init>
		}
		if(CAN_data_receive()){
			servo_set(CAN_message_receive()->data[0]);
		 }
		// read_adc();
		printf("Value of IR is:	%i\n", ADCH);
     462:	09 e7       	ldi	r16, 0x79	; 121
     464:	10 e0       	ldi	r17, 0x00	; 0
     466:	cc e0       	ldi	r28, 0x0C	; 12
     468:	d2 e0       	ldi	r29, 0x02	; 2
	 while(1){
		if(sendCAN){
			CAN_message_send(data,0);
			data[7]--;
		}
		if(CAN_data_receive()){
     46a:	d3 de       	rcall	.-602    	; 0x212 <CAN_data_receive>
     46c:	88 23       	and	r24, r24
     46e:	39 f0       	breq	.+14     	; 0x47e <main+0x28>
			servo_set(CAN_message_receive()->data[0]);
     470:	5a de       	rcall	.-844    	; 0x126 <CAN_message_receive>
     472:	fc 01       	movw	r30, r24
     474:	83 81       	ldd	r24, Z+3	; 0x03
     476:	99 27       	eor	r25, r25
     478:	87 fd       	sbrc	r24, 7
     47a:	90 95       	com	r25
     47c:	9d df       	rcall	.-198    	; 0x3b8 <servo_set>
		 }
		// read_adc();
		printf("Value of IR is:	%i\n", ADCH);
     47e:	f8 01       	movw	r30, r16
     480:	80 81       	ld	r24, Z
     482:	1f 92       	push	r1
     484:	8f 93       	push	r24
     486:	df 93       	push	r29
     488:	cf 93       	push	r28
     48a:	a5 d2       	rcall	.+1354   	; 0x9d6 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	99 e6       	ldi	r25, 0x69	; 105
     490:	e8 e1       	ldi	r30, 0x18	; 24
     492:	81 50       	subi	r24, 0x01	; 1
     494:	90 40       	sbci	r25, 0x00	; 0
     496:	e0 40       	sbci	r30, 0x00	; 0
     498:	e1 f7       	brne	.-8      	; 0x492 <main+0x3c>
     49a:	00 c0       	rjmp	.+0      	; 0x49c <main+0x46>
     49c:	00 00       	nop
     49e:	0f 90       	pop	r0
     4a0:	0f 90       	pop	r0
     4a2:	0f 90       	pop	r0
     4a4:	0f 90       	pop	r0
     4a6:	e1 cf       	rjmp	.-62     	; 0x46a <main+0x14>

000004a8 <pwm_set_pulse_width>:

	//ICR3 = F_CPU/128/2;
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	OCR3A = (int)(SCALAR_IN_MS * val);
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	4a e7       	ldi	r20, 0x7A	; 122
     4ae:	51 e4       	ldi	r21, 0x41	; 65
     4b0:	e5 d1       	rcall	.+970    	; 0x87c <__mulsf3>
     4b2:	fd d0       	rcall	.+506    	; 0x6ae <__fixsfsi>
     4b4:	70 93 99 00 	sts	0x0099, r23
     4b8:	60 93 98 00 	sts	0x0098, r22
     4bc:	08 95       	ret

000004be <pwm_set_period>:
}

void pwm_set_period(double period){
	ICR3 = (int)(SCALAR_IN_MS * period);
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	30 e0       	ldi	r19, 0x00	; 0
     4c2:	4a e7       	ldi	r20, 0x7A	; 122
     4c4:	51 e4       	ldi	r21, 0x41	; 65
     4c6:	da d1       	rcall	.+948    	; 0x87c <__mulsf3>
     4c8:	f2 d0       	rcall	.+484    	; 0x6ae <__fixsfsi>
     4ca:	70 93 97 00 	sts	0x0097, r23
     4ce:	60 93 96 00 	sts	0x0096, r22
     4d2:	08 95       	ret

000004d4 <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	DDRE |= (1 << PE3);
     4d4:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	TCCR3A &= ~(1<<WGM30);
     4d6:	e0 e9       	ldi	r30, 0x90	; 144
     4d8:	f0 e0       	ldi	r31, 0x00	; 0
     4da:	20 81       	ld	r18, Z
     4dc:	2e 7f       	andi	r18, 0xFE	; 254
     4de:	20 83       	st	Z, r18
	TCCR3A |= (1<<WGM31);
     4e0:	20 81       	ld	r18, Z
     4e2:	22 60       	ori	r18, 0x02	; 2
     4e4:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)	
     4e6:	a1 e9       	ldi	r26, 0x91	; 145
     4e8:	b0 e0       	ldi	r27, 0x00	; 0
     4ea:	2c 91       	ld	r18, X
     4ec:	28 61       	ori	r18, 0x18	; 24
     4ee:	2c 93       	st	X, r18
		
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	TCCR3A |= (1<<COM3A1);
     4f0:	20 81       	ld	r18, Z
     4f2:	20 68       	ori	r18, 0x80	; 128
     4f4:	20 83       	st	Z, r18
	TCCR3A &= ~(1<<COM3A0);
     4f6:	20 81       	ld	r18, Z
     4f8:	2f 7b       	andi	r18, 0xBF	; 191
     4fa:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	TCCR3B |= (1<<CS32) | (1<<CS30);
     4fc:	2c 91       	ld	r18, X
     4fe:	25 60       	ori	r18, 0x05	; 5
     500:	2c 93       	st	X, r18
	TCCR3B &= ~(1<<CS31);
     502:	2c 91       	ld	r18, X
     504:	2d 7f       	andi	r18, 0xFD	; 253
     506:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.				CHECK THIS DIRK!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	pwm_set_period(period);
     508:	da cf       	rjmp	.-76     	; 0x4be <pwm_set_period>
     50a:	08 95       	ret

0000050c <__subsf3>:
     50c:	50 58       	subi	r21, 0x80	; 128

0000050e <__addsf3>:
     50e:	bb 27       	eor	r27, r27
     510:	aa 27       	eor	r26, r26
     512:	0e d0       	rcall	.+28     	; 0x530 <__addsf3x>
     514:	75 c1       	rjmp	.+746    	; 0x800 <__fp_round>
     516:	66 d1       	rcall	.+716    	; 0x7e4 <__fp_pscA>
     518:	30 f0       	brcs	.+12     	; 0x526 <__addsf3+0x18>
     51a:	6b d1       	rcall	.+726    	; 0x7f2 <__fp_pscB>
     51c:	20 f0       	brcs	.+8      	; 0x526 <__addsf3+0x18>
     51e:	31 f4       	brne	.+12     	; 0x52c <__addsf3+0x1e>
     520:	9f 3f       	cpi	r25, 0xFF	; 255
     522:	11 f4       	brne	.+4      	; 0x528 <__addsf3+0x1a>
     524:	1e f4       	brtc	.+6      	; 0x52c <__addsf3+0x1e>
     526:	5b c1       	rjmp	.+694    	; 0x7de <__fp_nan>
     528:	0e f4       	brtc	.+2      	; 0x52c <__addsf3+0x1e>
     52a:	e0 95       	com	r30
     52c:	e7 fb       	bst	r30, 7
     52e:	51 c1       	rjmp	.+674    	; 0x7d2 <__fp_inf>

00000530 <__addsf3x>:
     530:	e9 2f       	mov	r30, r25
     532:	77 d1       	rcall	.+750    	; 0x822 <__fp_split3>
     534:	80 f3       	brcs	.-32     	; 0x516 <__addsf3+0x8>
     536:	ba 17       	cp	r27, r26
     538:	62 07       	cpc	r22, r18
     53a:	73 07       	cpc	r23, r19
     53c:	84 07       	cpc	r24, r20
     53e:	95 07       	cpc	r25, r21
     540:	18 f0       	brcs	.+6      	; 0x548 <__addsf3x+0x18>
     542:	71 f4       	brne	.+28     	; 0x560 <__addsf3x+0x30>
     544:	9e f5       	brtc	.+102    	; 0x5ac <__addsf3x+0x7c>
     546:	8f c1       	rjmp	.+798    	; 0x866 <__fp_zero>
     548:	0e f4       	brtc	.+2      	; 0x54c <__addsf3x+0x1c>
     54a:	e0 95       	com	r30
     54c:	0b 2e       	mov	r0, r27
     54e:	ba 2f       	mov	r27, r26
     550:	a0 2d       	mov	r26, r0
     552:	0b 01       	movw	r0, r22
     554:	b9 01       	movw	r22, r18
     556:	90 01       	movw	r18, r0
     558:	0c 01       	movw	r0, r24
     55a:	ca 01       	movw	r24, r20
     55c:	a0 01       	movw	r20, r0
     55e:	11 24       	eor	r1, r1
     560:	ff 27       	eor	r31, r31
     562:	59 1b       	sub	r21, r25
     564:	99 f0       	breq	.+38     	; 0x58c <__addsf3x+0x5c>
     566:	59 3f       	cpi	r21, 0xF9	; 249
     568:	50 f4       	brcc	.+20     	; 0x57e <__addsf3x+0x4e>
     56a:	50 3e       	cpi	r21, 0xE0	; 224
     56c:	68 f1       	brcs	.+90     	; 0x5c8 <__addsf3x+0x98>
     56e:	1a 16       	cp	r1, r26
     570:	f0 40       	sbci	r31, 0x00	; 0
     572:	a2 2f       	mov	r26, r18
     574:	23 2f       	mov	r18, r19
     576:	34 2f       	mov	r19, r20
     578:	44 27       	eor	r20, r20
     57a:	58 5f       	subi	r21, 0xF8	; 248
     57c:	f3 cf       	rjmp	.-26     	; 0x564 <__addsf3x+0x34>
     57e:	46 95       	lsr	r20
     580:	37 95       	ror	r19
     582:	27 95       	ror	r18
     584:	a7 95       	ror	r26
     586:	f0 40       	sbci	r31, 0x00	; 0
     588:	53 95       	inc	r21
     58a:	c9 f7       	brne	.-14     	; 0x57e <__addsf3x+0x4e>
     58c:	7e f4       	brtc	.+30     	; 0x5ac <__addsf3x+0x7c>
     58e:	1f 16       	cp	r1, r31
     590:	ba 0b       	sbc	r27, r26
     592:	62 0b       	sbc	r22, r18
     594:	73 0b       	sbc	r23, r19
     596:	84 0b       	sbc	r24, r20
     598:	ba f0       	brmi	.+46     	; 0x5c8 <__addsf3x+0x98>
     59a:	91 50       	subi	r25, 0x01	; 1
     59c:	a1 f0       	breq	.+40     	; 0x5c6 <__addsf3x+0x96>
     59e:	ff 0f       	add	r31, r31
     5a0:	bb 1f       	adc	r27, r27
     5a2:	66 1f       	adc	r22, r22
     5a4:	77 1f       	adc	r23, r23
     5a6:	88 1f       	adc	r24, r24
     5a8:	c2 f7       	brpl	.-16     	; 0x59a <__addsf3x+0x6a>
     5aa:	0e c0       	rjmp	.+28     	; 0x5c8 <__addsf3x+0x98>
     5ac:	ba 0f       	add	r27, r26
     5ae:	62 1f       	adc	r22, r18
     5b0:	73 1f       	adc	r23, r19
     5b2:	84 1f       	adc	r24, r20
     5b4:	48 f4       	brcc	.+18     	; 0x5c8 <__addsf3x+0x98>
     5b6:	87 95       	ror	r24
     5b8:	77 95       	ror	r23
     5ba:	67 95       	ror	r22
     5bc:	b7 95       	ror	r27
     5be:	f7 95       	ror	r31
     5c0:	9e 3f       	cpi	r25, 0xFE	; 254
     5c2:	08 f0       	brcs	.+2      	; 0x5c6 <__addsf3x+0x96>
     5c4:	b3 cf       	rjmp	.-154    	; 0x52c <__addsf3+0x1e>
     5c6:	93 95       	inc	r25
     5c8:	88 0f       	add	r24, r24
     5ca:	08 f0       	brcs	.+2      	; 0x5ce <__addsf3x+0x9e>
     5cc:	99 27       	eor	r25, r25
     5ce:	ee 0f       	add	r30, r30
     5d0:	97 95       	ror	r25
     5d2:	87 95       	ror	r24
     5d4:	08 95       	ret

000005d6 <__cmpsf2>:
     5d6:	d9 d0       	rcall	.+434    	; 0x78a <__fp_cmp>
     5d8:	08 f4       	brcc	.+2      	; 0x5dc <__cmpsf2+0x6>
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	08 95       	ret

000005de <__divsf3>:
     5de:	0c d0       	rcall	.+24     	; 0x5f8 <__divsf3x>
     5e0:	0f c1       	rjmp	.+542    	; 0x800 <__fp_round>
     5e2:	07 d1       	rcall	.+526    	; 0x7f2 <__fp_pscB>
     5e4:	40 f0       	brcs	.+16     	; 0x5f6 <__divsf3+0x18>
     5e6:	fe d0       	rcall	.+508    	; 0x7e4 <__fp_pscA>
     5e8:	30 f0       	brcs	.+12     	; 0x5f6 <__divsf3+0x18>
     5ea:	21 f4       	brne	.+8      	; 0x5f4 <__divsf3+0x16>
     5ec:	5f 3f       	cpi	r21, 0xFF	; 255
     5ee:	19 f0       	breq	.+6      	; 0x5f6 <__divsf3+0x18>
     5f0:	f0 c0       	rjmp	.+480    	; 0x7d2 <__fp_inf>
     5f2:	51 11       	cpse	r21, r1
     5f4:	39 c1       	rjmp	.+626    	; 0x868 <__fp_szero>
     5f6:	f3 c0       	rjmp	.+486    	; 0x7de <__fp_nan>

000005f8 <__divsf3x>:
     5f8:	14 d1       	rcall	.+552    	; 0x822 <__fp_split3>
     5fa:	98 f3       	brcs	.-26     	; 0x5e2 <__divsf3+0x4>

000005fc <__divsf3_pse>:
     5fc:	99 23       	and	r25, r25
     5fe:	c9 f3       	breq	.-14     	; 0x5f2 <__divsf3+0x14>
     600:	55 23       	and	r21, r21
     602:	b1 f3       	breq	.-20     	; 0x5f0 <__divsf3+0x12>
     604:	95 1b       	sub	r25, r21
     606:	55 0b       	sbc	r21, r21
     608:	bb 27       	eor	r27, r27
     60a:	aa 27       	eor	r26, r26
     60c:	62 17       	cp	r22, r18
     60e:	73 07       	cpc	r23, r19
     610:	84 07       	cpc	r24, r20
     612:	38 f0       	brcs	.+14     	; 0x622 <__divsf3_pse+0x26>
     614:	9f 5f       	subi	r25, 0xFF	; 255
     616:	5f 4f       	sbci	r21, 0xFF	; 255
     618:	22 0f       	add	r18, r18
     61a:	33 1f       	adc	r19, r19
     61c:	44 1f       	adc	r20, r20
     61e:	aa 1f       	adc	r26, r26
     620:	a9 f3       	breq	.-22     	; 0x60c <__divsf3_pse+0x10>
     622:	33 d0       	rcall	.+102    	; 0x68a <__divsf3_pse+0x8e>
     624:	0e 2e       	mov	r0, r30
     626:	3a f0       	brmi	.+14     	; 0x636 <__divsf3_pse+0x3a>
     628:	e0 e8       	ldi	r30, 0x80	; 128
     62a:	30 d0       	rcall	.+96     	; 0x68c <__divsf3_pse+0x90>
     62c:	91 50       	subi	r25, 0x01	; 1
     62e:	50 40       	sbci	r21, 0x00	; 0
     630:	e6 95       	lsr	r30
     632:	00 1c       	adc	r0, r0
     634:	ca f7       	brpl	.-14     	; 0x628 <__divsf3_pse+0x2c>
     636:	29 d0       	rcall	.+82     	; 0x68a <__divsf3_pse+0x8e>
     638:	fe 2f       	mov	r31, r30
     63a:	27 d0       	rcall	.+78     	; 0x68a <__divsf3_pse+0x8e>
     63c:	66 0f       	add	r22, r22
     63e:	77 1f       	adc	r23, r23
     640:	88 1f       	adc	r24, r24
     642:	bb 1f       	adc	r27, r27
     644:	26 17       	cp	r18, r22
     646:	37 07       	cpc	r19, r23
     648:	48 07       	cpc	r20, r24
     64a:	ab 07       	cpc	r26, r27
     64c:	b0 e8       	ldi	r27, 0x80	; 128
     64e:	09 f0       	breq	.+2      	; 0x652 <__divsf3_pse+0x56>
     650:	bb 0b       	sbc	r27, r27
     652:	80 2d       	mov	r24, r0
     654:	bf 01       	movw	r22, r30
     656:	ff 27       	eor	r31, r31
     658:	93 58       	subi	r25, 0x83	; 131
     65a:	5f 4f       	sbci	r21, 0xFF	; 255
     65c:	2a f0       	brmi	.+10     	; 0x668 <__divsf3_pse+0x6c>
     65e:	9e 3f       	cpi	r25, 0xFE	; 254
     660:	51 05       	cpc	r21, r1
     662:	68 f0       	brcs	.+26     	; 0x67e <__divsf3_pse+0x82>
     664:	b6 c0       	rjmp	.+364    	; 0x7d2 <__fp_inf>
     666:	00 c1       	rjmp	.+512    	; 0x868 <__fp_szero>
     668:	5f 3f       	cpi	r21, 0xFF	; 255
     66a:	ec f3       	brlt	.-6      	; 0x666 <__divsf3_pse+0x6a>
     66c:	98 3e       	cpi	r25, 0xE8	; 232
     66e:	dc f3       	brlt	.-10     	; 0x666 <__divsf3_pse+0x6a>
     670:	86 95       	lsr	r24
     672:	77 95       	ror	r23
     674:	67 95       	ror	r22
     676:	b7 95       	ror	r27
     678:	f7 95       	ror	r31
     67a:	9f 5f       	subi	r25, 0xFF	; 255
     67c:	c9 f7       	brne	.-14     	; 0x670 <__divsf3_pse+0x74>
     67e:	88 0f       	add	r24, r24
     680:	91 1d       	adc	r25, r1
     682:	96 95       	lsr	r25
     684:	87 95       	ror	r24
     686:	97 f9       	bld	r25, 7
     688:	08 95       	ret
     68a:	e1 e0       	ldi	r30, 0x01	; 1
     68c:	66 0f       	add	r22, r22
     68e:	77 1f       	adc	r23, r23
     690:	88 1f       	adc	r24, r24
     692:	bb 1f       	adc	r27, r27
     694:	62 17       	cp	r22, r18
     696:	73 07       	cpc	r23, r19
     698:	84 07       	cpc	r24, r20
     69a:	ba 07       	cpc	r27, r26
     69c:	20 f0       	brcs	.+8      	; 0x6a6 <__divsf3_pse+0xaa>
     69e:	62 1b       	sub	r22, r18
     6a0:	73 0b       	sbc	r23, r19
     6a2:	84 0b       	sbc	r24, r20
     6a4:	ba 0b       	sbc	r27, r26
     6a6:	ee 1f       	adc	r30, r30
     6a8:	88 f7       	brcc	.-30     	; 0x68c <__divsf3_pse+0x90>
     6aa:	e0 95       	com	r30
     6ac:	08 95       	ret

000006ae <__fixsfsi>:
     6ae:	04 d0       	rcall	.+8      	; 0x6b8 <__fixunssfsi>
     6b0:	68 94       	set
     6b2:	b1 11       	cpse	r27, r1
     6b4:	d9 c0       	rjmp	.+434    	; 0x868 <__fp_szero>
     6b6:	08 95       	ret

000006b8 <__fixunssfsi>:
     6b8:	bc d0       	rcall	.+376    	; 0x832 <__fp_splitA>
     6ba:	88 f0       	brcs	.+34     	; 0x6de <__fixunssfsi+0x26>
     6bc:	9f 57       	subi	r25, 0x7F	; 127
     6be:	90 f0       	brcs	.+36     	; 0x6e4 <__fixunssfsi+0x2c>
     6c0:	b9 2f       	mov	r27, r25
     6c2:	99 27       	eor	r25, r25
     6c4:	b7 51       	subi	r27, 0x17	; 23
     6c6:	a0 f0       	brcs	.+40     	; 0x6f0 <__fixunssfsi+0x38>
     6c8:	d1 f0       	breq	.+52     	; 0x6fe <__fixunssfsi+0x46>
     6ca:	66 0f       	add	r22, r22
     6cc:	77 1f       	adc	r23, r23
     6ce:	88 1f       	adc	r24, r24
     6d0:	99 1f       	adc	r25, r25
     6d2:	1a f0       	brmi	.+6      	; 0x6da <__fixunssfsi+0x22>
     6d4:	ba 95       	dec	r27
     6d6:	c9 f7       	brne	.-14     	; 0x6ca <__fixunssfsi+0x12>
     6d8:	12 c0       	rjmp	.+36     	; 0x6fe <__fixunssfsi+0x46>
     6da:	b1 30       	cpi	r27, 0x01	; 1
     6dc:	81 f0       	breq	.+32     	; 0x6fe <__fixunssfsi+0x46>
     6de:	c3 d0       	rcall	.+390    	; 0x866 <__fp_zero>
     6e0:	b1 e0       	ldi	r27, 0x01	; 1
     6e2:	08 95       	ret
     6e4:	c0 c0       	rjmp	.+384    	; 0x866 <__fp_zero>
     6e6:	67 2f       	mov	r22, r23
     6e8:	78 2f       	mov	r23, r24
     6ea:	88 27       	eor	r24, r24
     6ec:	b8 5f       	subi	r27, 0xF8	; 248
     6ee:	39 f0       	breq	.+14     	; 0x6fe <__fixunssfsi+0x46>
     6f0:	b9 3f       	cpi	r27, 0xF9	; 249
     6f2:	cc f3       	brlt	.-14     	; 0x6e6 <__fixunssfsi+0x2e>
     6f4:	86 95       	lsr	r24
     6f6:	77 95       	ror	r23
     6f8:	67 95       	ror	r22
     6fa:	b3 95       	inc	r27
     6fc:	d9 f7       	brne	.-10     	; 0x6f4 <__fixunssfsi+0x3c>
     6fe:	3e f4       	brtc	.+14     	; 0x70e <__fixunssfsi+0x56>
     700:	90 95       	com	r25
     702:	80 95       	com	r24
     704:	70 95       	com	r23
     706:	61 95       	neg	r22
     708:	7f 4f       	sbci	r23, 0xFF	; 255
     70a:	8f 4f       	sbci	r24, 0xFF	; 255
     70c:	9f 4f       	sbci	r25, 0xFF	; 255
     70e:	08 95       	ret

00000710 <__floatunsisf>:
     710:	e8 94       	clt
     712:	09 c0       	rjmp	.+18     	; 0x726 <__floatsisf+0x12>

00000714 <__floatsisf>:
     714:	97 fb       	bst	r25, 7
     716:	3e f4       	brtc	.+14     	; 0x726 <__floatsisf+0x12>
     718:	90 95       	com	r25
     71a:	80 95       	com	r24
     71c:	70 95       	com	r23
     71e:	61 95       	neg	r22
     720:	7f 4f       	sbci	r23, 0xFF	; 255
     722:	8f 4f       	sbci	r24, 0xFF	; 255
     724:	9f 4f       	sbci	r25, 0xFF	; 255
     726:	99 23       	and	r25, r25
     728:	a9 f0       	breq	.+42     	; 0x754 <__floatsisf+0x40>
     72a:	f9 2f       	mov	r31, r25
     72c:	96 e9       	ldi	r25, 0x96	; 150
     72e:	bb 27       	eor	r27, r27
     730:	93 95       	inc	r25
     732:	f6 95       	lsr	r31
     734:	87 95       	ror	r24
     736:	77 95       	ror	r23
     738:	67 95       	ror	r22
     73a:	b7 95       	ror	r27
     73c:	f1 11       	cpse	r31, r1
     73e:	f8 cf       	rjmp	.-16     	; 0x730 <__floatsisf+0x1c>
     740:	fa f4       	brpl	.+62     	; 0x780 <__floatsisf+0x6c>
     742:	bb 0f       	add	r27, r27
     744:	11 f4       	brne	.+4      	; 0x74a <__floatsisf+0x36>
     746:	60 ff       	sbrs	r22, 0
     748:	1b c0       	rjmp	.+54     	; 0x780 <__floatsisf+0x6c>
     74a:	6f 5f       	subi	r22, 0xFF	; 255
     74c:	7f 4f       	sbci	r23, 0xFF	; 255
     74e:	8f 4f       	sbci	r24, 0xFF	; 255
     750:	9f 4f       	sbci	r25, 0xFF	; 255
     752:	16 c0       	rjmp	.+44     	; 0x780 <__floatsisf+0x6c>
     754:	88 23       	and	r24, r24
     756:	11 f0       	breq	.+4      	; 0x75c <__floatsisf+0x48>
     758:	96 e9       	ldi	r25, 0x96	; 150
     75a:	11 c0       	rjmp	.+34     	; 0x77e <__floatsisf+0x6a>
     75c:	77 23       	and	r23, r23
     75e:	21 f0       	breq	.+8      	; 0x768 <__floatsisf+0x54>
     760:	9e e8       	ldi	r25, 0x8E	; 142
     762:	87 2f       	mov	r24, r23
     764:	76 2f       	mov	r23, r22
     766:	05 c0       	rjmp	.+10     	; 0x772 <__floatsisf+0x5e>
     768:	66 23       	and	r22, r22
     76a:	71 f0       	breq	.+28     	; 0x788 <__floatsisf+0x74>
     76c:	96 e8       	ldi	r25, 0x86	; 134
     76e:	86 2f       	mov	r24, r22
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	60 e0       	ldi	r22, 0x00	; 0
     774:	2a f0       	brmi	.+10     	; 0x780 <__floatsisf+0x6c>
     776:	9a 95       	dec	r25
     778:	66 0f       	add	r22, r22
     77a:	77 1f       	adc	r23, r23
     77c:	88 1f       	adc	r24, r24
     77e:	da f7       	brpl	.-10     	; 0x776 <__floatsisf+0x62>
     780:	88 0f       	add	r24, r24
     782:	96 95       	lsr	r25
     784:	87 95       	ror	r24
     786:	97 f9       	bld	r25, 7
     788:	08 95       	ret

0000078a <__fp_cmp>:
     78a:	99 0f       	add	r25, r25
     78c:	00 08       	sbc	r0, r0
     78e:	55 0f       	add	r21, r21
     790:	aa 0b       	sbc	r26, r26
     792:	e0 e8       	ldi	r30, 0x80	; 128
     794:	fe ef       	ldi	r31, 0xFE	; 254
     796:	16 16       	cp	r1, r22
     798:	17 06       	cpc	r1, r23
     79a:	e8 07       	cpc	r30, r24
     79c:	f9 07       	cpc	r31, r25
     79e:	c0 f0       	brcs	.+48     	; 0x7d0 <__fp_cmp+0x46>
     7a0:	12 16       	cp	r1, r18
     7a2:	13 06       	cpc	r1, r19
     7a4:	e4 07       	cpc	r30, r20
     7a6:	f5 07       	cpc	r31, r21
     7a8:	98 f0       	brcs	.+38     	; 0x7d0 <__fp_cmp+0x46>
     7aa:	62 1b       	sub	r22, r18
     7ac:	73 0b       	sbc	r23, r19
     7ae:	84 0b       	sbc	r24, r20
     7b0:	95 0b       	sbc	r25, r21
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <__fp_cmp+0x38>
     7b4:	0a 26       	eor	r0, r26
     7b6:	61 f0       	breq	.+24     	; 0x7d0 <__fp_cmp+0x46>
     7b8:	23 2b       	or	r18, r19
     7ba:	24 2b       	or	r18, r20
     7bc:	25 2b       	or	r18, r21
     7be:	21 f4       	brne	.+8      	; 0x7c8 <__fp_cmp+0x3e>
     7c0:	08 95       	ret
     7c2:	0a 26       	eor	r0, r26
     7c4:	09 f4       	brne	.+2      	; 0x7c8 <__fp_cmp+0x3e>
     7c6:	a1 40       	sbci	r26, 0x01	; 1
     7c8:	a6 95       	lsr	r26
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	81 1d       	adc	r24, r1
     7ce:	81 1d       	adc	r24, r1
     7d0:	08 95       	ret

000007d2 <__fp_inf>:
     7d2:	97 f9       	bld	r25, 7
     7d4:	9f 67       	ori	r25, 0x7F	; 127
     7d6:	80 e8       	ldi	r24, 0x80	; 128
     7d8:	70 e0       	ldi	r23, 0x00	; 0
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	08 95       	ret

000007de <__fp_nan>:
     7de:	9f ef       	ldi	r25, 0xFF	; 255
     7e0:	80 ec       	ldi	r24, 0xC0	; 192
     7e2:	08 95       	ret

000007e4 <__fp_pscA>:
     7e4:	00 24       	eor	r0, r0
     7e6:	0a 94       	dec	r0
     7e8:	16 16       	cp	r1, r22
     7ea:	17 06       	cpc	r1, r23
     7ec:	18 06       	cpc	r1, r24
     7ee:	09 06       	cpc	r0, r25
     7f0:	08 95       	ret

000007f2 <__fp_pscB>:
     7f2:	00 24       	eor	r0, r0
     7f4:	0a 94       	dec	r0
     7f6:	12 16       	cp	r1, r18
     7f8:	13 06       	cpc	r1, r19
     7fa:	14 06       	cpc	r1, r20
     7fc:	05 06       	cpc	r0, r21
     7fe:	08 95       	ret

00000800 <__fp_round>:
     800:	09 2e       	mov	r0, r25
     802:	03 94       	inc	r0
     804:	00 0c       	add	r0, r0
     806:	11 f4       	brne	.+4      	; 0x80c <__fp_round+0xc>
     808:	88 23       	and	r24, r24
     80a:	52 f0       	brmi	.+20     	; 0x820 <__fp_round+0x20>
     80c:	bb 0f       	add	r27, r27
     80e:	40 f4       	brcc	.+16     	; 0x820 <__fp_round+0x20>
     810:	bf 2b       	or	r27, r31
     812:	11 f4       	brne	.+4      	; 0x818 <__fp_round+0x18>
     814:	60 ff       	sbrs	r22, 0
     816:	04 c0       	rjmp	.+8      	; 0x820 <__fp_round+0x20>
     818:	6f 5f       	subi	r22, 0xFF	; 255
     81a:	7f 4f       	sbci	r23, 0xFF	; 255
     81c:	8f 4f       	sbci	r24, 0xFF	; 255
     81e:	9f 4f       	sbci	r25, 0xFF	; 255
     820:	08 95       	ret

00000822 <__fp_split3>:
     822:	57 fd       	sbrc	r21, 7
     824:	90 58       	subi	r25, 0x80	; 128
     826:	44 0f       	add	r20, r20
     828:	55 1f       	adc	r21, r21
     82a:	59 f0       	breq	.+22     	; 0x842 <__fp_splitA+0x10>
     82c:	5f 3f       	cpi	r21, 0xFF	; 255
     82e:	71 f0       	breq	.+28     	; 0x84c <__fp_splitA+0x1a>
     830:	47 95       	ror	r20

00000832 <__fp_splitA>:
     832:	88 0f       	add	r24, r24
     834:	97 fb       	bst	r25, 7
     836:	99 1f       	adc	r25, r25
     838:	61 f0       	breq	.+24     	; 0x852 <__fp_splitA+0x20>
     83a:	9f 3f       	cpi	r25, 0xFF	; 255
     83c:	79 f0       	breq	.+30     	; 0x85c <__fp_splitA+0x2a>
     83e:	87 95       	ror	r24
     840:	08 95       	ret
     842:	12 16       	cp	r1, r18
     844:	13 06       	cpc	r1, r19
     846:	14 06       	cpc	r1, r20
     848:	55 1f       	adc	r21, r21
     84a:	f2 cf       	rjmp	.-28     	; 0x830 <__fp_split3+0xe>
     84c:	46 95       	lsr	r20
     84e:	f1 df       	rcall	.-30     	; 0x832 <__fp_splitA>
     850:	08 c0       	rjmp	.+16     	; 0x862 <__fp_splitA+0x30>
     852:	16 16       	cp	r1, r22
     854:	17 06       	cpc	r1, r23
     856:	18 06       	cpc	r1, r24
     858:	99 1f       	adc	r25, r25
     85a:	f1 cf       	rjmp	.-30     	; 0x83e <__fp_splitA+0xc>
     85c:	86 95       	lsr	r24
     85e:	71 05       	cpc	r23, r1
     860:	61 05       	cpc	r22, r1
     862:	08 94       	sec
     864:	08 95       	ret

00000866 <__fp_zero>:
     866:	e8 94       	clt

00000868 <__fp_szero>:
     868:	bb 27       	eor	r27, r27
     86a:	66 27       	eor	r22, r22
     86c:	77 27       	eor	r23, r23
     86e:	cb 01       	movw	r24, r22
     870:	97 f9       	bld	r25, 7
     872:	08 95       	ret

00000874 <__gesf2>:
     874:	8a df       	rcall	.-236    	; 0x78a <__fp_cmp>
     876:	08 f4       	brcc	.+2      	; 0x87a <__gesf2+0x6>
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	08 95       	ret

0000087c <__mulsf3>:
     87c:	0b d0       	rcall	.+22     	; 0x894 <__mulsf3x>
     87e:	c0 cf       	rjmp	.-128    	; 0x800 <__fp_round>
     880:	b1 df       	rcall	.-158    	; 0x7e4 <__fp_pscA>
     882:	28 f0       	brcs	.+10     	; 0x88e <__mulsf3+0x12>
     884:	b6 df       	rcall	.-148    	; 0x7f2 <__fp_pscB>
     886:	18 f0       	brcs	.+6      	; 0x88e <__mulsf3+0x12>
     888:	95 23       	and	r25, r21
     88a:	09 f0       	breq	.+2      	; 0x88e <__mulsf3+0x12>
     88c:	a2 cf       	rjmp	.-188    	; 0x7d2 <__fp_inf>
     88e:	a7 cf       	rjmp	.-178    	; 0x7de <__fp_nan>
     890:	11 24       	eor	r1, r1
     892:	ea cf       	rjmp	.-44     	; 0x868 <__fp_szero>

00000894 <__mulsf3x>:
     894:	c6 df       	rcall	.-116    	; 0x822 <__fp_split3>
     896:	a0 f3       	brcs	.-24     	; 0x880 <__mulsf3+0x4>

00000898 <__mulsf3_pse>:
     898:	95 9f       	mul	r25, r21
     89a:	d1 f3       	breq	.-12     	; 0x890 <__mulsf3+0x14>
     89c:	95 0f       	add	r25, r21
     89e:	50 e0       	ldi	r21, 0x00	; 0
     8a0:	55 1f       	adc	r21, r21
     8a2:	62 9f       	mul	r22, r18
     8a4:	f0 01       	movw	r30, r0
     8a6:	72 9f       	mul	r23, r18
     8a8:	bb 27       	eor	r27, r27
     8aa:	f0 0d       	add	r31, r0
     8ac:	b1 1d       	adc	r27, r1
     8ae:	63 9f       	mul	r22, r19
     8b0:	aa 27       	eor	r26, r26
     8b2:	f0 0d       	add	r31, r0
     8b4:	b1 1d       	adc	r27, r1
     8b6:	aa 1f       	adc	r26, r26
     8b8:	64 9f       	mul	r22, r20
     8ba:	66 27       	eor	r22, r22
     8bc:	b0 0d       	add	r27, r0
     8be:	a1 1d       	adc	r26, r1
     8c0:	66 1f       	adc	r22, r22
     8c2:	82 9f       	mul	r24, r18
     8c4:	22 27       	eor	r18, r18
     8c6:	b0 0d       	add	r27, r0
     8c8:	a1 1d       	adc	r26, r1
     8ca:	62 1f       	adc	r22, r18
     8cc:	73 9f       	mul	r23, r19
     8ce:	b0 0d       	add	r27, r0
     8d0:	a1 1d       	adc	r26, r1
     8d2:	62 1f       	adc	r22, r18
     8d4:	83 9f       	mul	r24, r19
     8d6:	a0 0d       	add	r26, r0
     8d8:	61 1d       	adc	r22, r1
     8da:	22 1f       	adc	r18, r18
     8dc:	74 9f       	mul	r23, r20
     8de:	33 27       	eor	r19, r19
     8e0:	a0 0d       	add	r26, r0
     8e2:	61 1d       	adc	r22, r1
     8e4:	23 1f       	adc	r18, r19
     8e6:	84 9f       	mul	r24, r20
     8e8:	60 0d       	add	r22, r0
     8ea:	21 1d       	adc	r18, r1
     8ec:	82 2f       	mov	r24, r18
     8ee:	76 2f       	mov	r23, r22
     8f0:	6a 2f       	mov	r22, r26
     8f2:	11 24       	eor	r1, r1
     8f4:	9f 57       	subi	r25, 0x7F	; 127
     8f6:	50 40       	sbci	r21, 0x00	; 0
     8f8:	8a f0       	brmi	.+34     	; 0x91c <__mulsf3_pse+0x84>
     8fa:	e1 f0       	breq	.+56     	; 0x934 <__mulsf3_pse+0x9c>
     8fc:	88 23       	and	r24, r24
     8fe:	4a f0       	brmi	.+18     	; 0x912 <__mulsf3_pse+0x7a>
     900:	ee 0f       	add	r30, r30
     902:	ff 1f       	adc	r31, r31
     904:	bb 1f       	adc	r27, r27
     906:	66 1f       	adc	r22, r22
     908:	77 1f       	adc	r23, r23
     90a:	88 1f       	adc	r24, r24
     90c:	91 50       	subi	r25, 0x01	; 1
     90e:	50 40       	sbci	r21, 0x00	; 0
     910:	a9 f7       	brne	.-22     	; 0x8fc <__mulsf3_pse+0x64>
     912:	9e 3f       	cpi	r25, 0xFE	; 254
     914:	51 05       	cpc	r21, r1
     916:	70 f0       	brcs	.+28     	; 0x934 <__mulsf3_pse+0x9c>
     918:	5c cf       	rjmp	.-328    	; 0x7d2 <__fp_inf>
     91a:	a6 cf       	rjmp	.-180    	; 0x868 <__fp_szero>
     91c:	5f 3f       	cpi	r21, 0xFF	; 255
     91e:	ec f3       	brlt	.-6      	; 0x91a <__mulsf3_pse+0x82>
     920:	98 3e       	cpi	r25, 0xE8	; 232
     922:	dc f3       	brlt	.-10     	; 0x91a <__mulsf3_pse+0x82>
     924:	86 95       	lsr	r24
     926:	77 95       	ror	r23
     928:	67 95       	ror	r22
     92a:	b7 95       	ror	r27
     92c:	f7 95       	ror	r31
     92e:	e7 95       	ror	r30
     930:	9f 5f       	subi	r25, 0xFF	; 255
     932:	c1 f7       	brne	.-16     	; 0x924 <__mulsf3_pse+0x8c>
     934:	fe 2b       	or	r31, r30
     936:	88 0f       	add	r24, r24
     938:	91 1d       	adc	r25, r1
     93a:	96 95       	lsr	r25
     93c:	87 95       	ror	r24
     93e:	97 f9       	bld	r25, 7
     940:	08 95       	ret

00000942 <fdevopen>:
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	ec 01       	movw	r28, r24
     94c:	8b 01       	movw	r16, r22
     94e:	00 97       	sbiw	r24, 0x00	; 0
     950:	31 f4       	brne	.+12     	; 0x95e <fdevopen+0x1c>
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	19 f4       	brne	.+6      	; 0x95e <fdevopen+0x1c>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	37 c0       	rjmp	.+110    	; 0x9cc <fdevopen+0x8a>
     95e:	6e e0       	ldi	r22, 0x0E	; 14
     960:	70 e0       	ldi	r23, 0x00	; 0
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	63 d2       	rcall	.+1222   	; 0xe2e <calloc>
     968:	fc 01       	movw	r30, r24
     96a:	00 97       	sbiw	r24, 0x00	; 0
     96c:	a9 f3       	breq	.-22     	; 0x958 <fdevopen+0x16>
     96e:	80 e8       	ldi	r24, 0x80	; 128
     970:	83 83       	std	Z+3, r24	; 0x03
     972:	01 15       	cp	r16, r1
     974:	11 05       	cpc	r17, r1
     976:	71 f0       	breq	.+28     	; 0x994 <fdevopen+0x52>
     978:	13 87       	std	Z+11, r17	; 0x0b
     97a:	02 87       	std	Z+10, r16	; 0x0a
     97c:	81 e8       	ldi	r24, 0x81	; 129
     97e:	83 83       	std	Z+3, r24	; 0x03
     980:	80 91 37 02 	lds	r24, 0x0237
     984:	90 91 38 02 	lds	r25, 0x0238
     988:	89 2b       	or	r24, r25
     98a:	21 f4       	brne	.+8      	; 0x994 <fdevopen+0x52>
     98c:	f0 93 38 02 	sts	0x0238, r31
     990:	e0 93 37 02 	sts	0x0237, r30
     994:	20 97       	sbiw	r28, 0x00	; 0
     996:	c9 f0       	breq	.+50     	; 0x9ca <fdevopen+0x88>
     998:	d1 87       	std	Z+9, r29	; 0x09
     99a:	c0 87       	std	Z+8, r28	; 0x08
     99c:	83 81       	ldd	r24, Z+3	; 0x03
     99e:	82 60       	ori	r24, 0x02	; 2
     9a0:	83 83       	std	Z+3, r24	; 0x03
     9a2:	80 91 39 02 	lds	r24, 0x0239
     9a6:	90 91 3a 02 	lds	r25, 0x023A
     9aa:	89 2b       	or	r24, r25
     9ac:	71 f4       	brne	.+28     	; 0x9ca <fdevopen+0x88>
     9ae:	f0 93 3a 02 	sts	0x023A, r31
     9b2:	e0 93 39 02 	sts	0x0239, r30
     9b6:	80 91 3b 02 	lds	r24, 0x023B
     9ba:	90 91 3c 02 	lds	r25, 0x023C
     9be:	89 2b       	or	r24, r25
     9c0:	21 f4       	brne	.+8      	; 0x9ca <fdevopen+0x88>
     9c2:	f0 93 3c 02 	sts	0x023C, r31
     9c6:	e0 93 3b 02 	sts	0x023B, r30
     9ca:	cf 01       	movw	r24, r30
     9cc:	df 91       	pop	r29
     9ce:	cf 91       	pop	r28
     9d0:	1f 91       	pop	r17
     9d2:	0f 91       	pop	r16
     9d4:	08 95       	ret

000009d6 <printf>:
     9d6:	cf 93       	push	r28
     9d8:	df 93       	push	r29
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	fe 01       	movw	r30, r28
     9e0:	36 96       	adiw	r30, 0x06	; 6
     9e2:	61 91       	ld	r22, Z+
     9e4:	71 91       	ld	r23, Z+
     9e6:	af 01       	movw	r20, r30
     9e8:	80 91 39 02 	lds	r24, 0x0239
     9ec:	90 91 3a 02 	lds	r25, 0x023A
     9f0:	30 d0       	rcall	.+96     	; 0xa52 <vfprintf>
     9f2:	df 91       	pop	r29
     9f4:	cf 91       	pop	r28
     9f6:	08 95       	ret

000009f8 <puts>:
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	e0 91 39 02 	lds	r30, 0x0239
     a04:	f0 91 3a 02 	lds	r31, 0x023A
     a08:	23 81       	ldd	r18, Z+3	; 0x03
     a0a:	21 ff       	sbrs	r18, 1
     a0c:	1b c0       	rjmp	.+54     	; 0xa44 <puts+0x4c>
     a0e:	ec 01       	movw	r28, r24
     a10:	00 e0       	ldi	r16, 0x00	; 0
     a12:	10 e0       	ldi	r17, 0x00	; 0
     a14:	89 91       	ld	r24, Y+
     a16:	60 91 39 02 	lds	r22, 0x0239
     a1a:	70 91 3a 02 	lds	r23, 0x023A
     a1e:	db 01       	movw	r26, r22
     a20:	18 96       	adiw	r26, 0x08	; 8
     a22:	ed 91       	ld	r30, X+
     a24:	fc 91       	ld	r31, X
     a26:	19 97       	sbiw	r26, 0x09	; 9
     a28:	88 23       	and	r24, r24
     a2a:	31 f0       	breq	.+12     	; 0xa38 <puts+0x40>
     a2c:	19 95       	eicall
     a2e:	89 2b       	or	r24, r25
     a30:	89 f3       	breq	.-30     	; 0xa14 <puts+0x1c>
     a32:	0f ef       	ldi	r16, 0xFF	; 255
     a34:	1f ef       	ldi	r17, 0xFF	; 255
     a36:	ee cf       	rjmp	.-36     	; 0xa14 <puts+0x1c>
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	19 95       	eicall
     a3c:	89 2b       	or	r24, r25
     a3e:	11 f4       	brne	.+4      	; 0xa44 <puts+0x4c>
     a40:	c8 01       	movw	r24, r16
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <puts+0x50>
     a44:	8f ef       	ldi	r24, 0xFF	; 255
     a46:	9f ef       	ldi	r25, 0xFF	; 255
     a48:	df 91       	pop	r29
     a4a:	cf 91       	pop	r28
     a4c:	1f 91       	pop	r17
     a4e:	0f 91       	pop	r16
     a50:	08 95       	ret

00000a52 <vfprintf>:
     a52:	2f 92       	push	r2
     a54:	3f 92       	push	r3
     a56:	4f 92       	push	r4
     a58:	5f 92       	push	r5
     a5a:	6f 92       	push	r6
     a5c:	7f 92       	push	r7
     a5e:	8f 92       	push	r8
     a60:	9f 92       	push	r9
     a62:	af 92       	push	r10
     a64:	bf 92       	push	r11
     a66:	cf 92       	push	r12
     a68:	df 92       	push	r13
     a6a:	ef 92       	push	r14
     a6c:	ff 92       	push	r15
     a6e:	0f 93       	push	r16
     a70:	1f 93       	push	r17
     a72:	cf 93       	push	r28
     a74:	df 93       	push	r29
     a76:	cd b7       	in	r28, 0x3d	; 61
     a78:	de b7       	in	r29, 0x3e	; 62
     a7a:	2c 97       	sbiw	r28, 0x0c	; 12
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	f8 94       	cli
     a80:	de bf       	out	0x3e, r29	; 62
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	cd bf       	out	0x3d, r28	; 61
     a86:	7c 01       	movw	r14, r24
     a88:	6b 01       	movw	r12, r22
     a8a:	8a 01       	movw	r16, r20
     a8c:	fc 01       	movw	r30, r24
     a8e:	17 82       	std	Z+7, r1	; 0x07
     a90:	16 82       	std	Z+6, r1	; 0x06
     a92:	83 81       	ldd	r24, Z+3	; 0x03
     a94:	81 ff       	sbrs	r24, 1
     a96:	b0 c1       	rjmp	.+864    	; 0xdf8 <vfprintf+0x3a6>
     a98:	ce 01       	movw	r24, r28
     a9a:	01 96       	adiw	r24, 0x01	; 1
     a9c:	4c 01       	movw	r8, r24
     a9e:	f7 01       	movw	r30, r14
     aa0:	93 81       	ldd	r25, Z+3	; 0x03
     aa2:	f6 01       	movw	r30, r12
     aa4:	93 fd       	sbrc	r25, 3
     aa6:	85 91       	lpm	r24, Z+
     aa8:	93 ff       	sbrs	r25, 3
     aaa:	81 91       	ld	r24, Z+
     aac:	6f 01       	movw	r12, r30
     aae:	88 23       	and	r24, r24
     ab0:	09 f4       	brne	.+2      	; 0xab4 <vfprintf+0x62>
     ab2:	9e c1       	rjmp	.+828    	; 0xdf0 <vfprintf+0x39e>
     ab4:	85 32       	cpi	r24, 0x25	; 37
     ab6:	39 f4       	brne	.+14     	; 0xac6 <vfprintf+0x74>
     ab8:	93 fd       	sbrc	r25, 3
     aba:	85 91       	lpm	r24, Z+
     abc:	93 ff       	sbrs	r25, 3
     abe:	81 91       	ld	r24, Z+
     ac0:	6f 01       	movw	r12, r30
     ac2:	85 32       	cpi	r24, 0x25	; 37
     ac4:	21 f4       	brne	.+8      	; 0xace <vfprintf+0x7c>
     ac6:	b7 01       	movw	r22, r14
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0f d3       	rcall	.+1566   	; 0x10ea <fputc>
     acc:	e8 cf       	rjmp	.-48     	; 0xa9e <vfprintf+0x4c>
     ace:	51 2c       	mov	r5, r1
     ad0:	31 2c       	mov	r3, r1
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	20 32       	cpi	r18, 0x20	; 32
     ad6:	a0 f4       	brcc	.+40     	; 0xb00 <vfprintf+0xae>
     ad8:	8b 32       	cpi	r24, 0x2B	; 43
     ada:	69 f0       	breq	.+26     	; 0xaf6 <vfprintf+0xa4>
     adc:	30 f4       	brcc	.+12     	; 0xaea <vfprintf+0x98>
     ade:	80 32       	cpi	r24, 0x20	; 32
     ae0:	59 f0       	breq	.+22     	; 0xaf8 <vfprintf+0xa6>
     ae2:	83 32       	cpi	r24, 0x23	; 35
     ae4:	69 f4       	brne	.+26     	; 0xb00 <vfprintf+0xae>
     ae6:	20 61       	ori	r18, 0x10	; 16
     ae8:	2c c0       	rjmp	.+88     	; 0xb42 <vfprintf+0xf0>
     aea:	8d 32       	cpi	r24, 0x2D	; 45
     aec:	39 f0       	breq	.+14     	; 0xafc <vfprintf+0xaa>
     aee:	80 33       	cpi	r24, 0x30	; 48
     af0:	39 f4       	brne	.+14     	; 0xb00 <vfprintf+0xae>
     af2:	21 60       	ori	r18, 0x01	; 1
     af4:	26 c0       	rjmp	.+76     	; 0xb42 <vfprintf+0xf0>
     af6:	22 60       	ori	r18, 0x02	; 2
     af8:	24 60       	ori	r18, 0x04	; 4
     afa:	23 c0       	rjmp	.+70     	; 0xb42 <vfprintf+0xf0>
     afc:	28 60       	ori	r18, 0x08	; 8
     afe:	21 c0       	rjmp	.+66     	; 0xb42 <vfprintf+0xf0>
     b00:	27 fd       	sbrc	r18, 7
     b02:	27 c0       	rjmp	.+78     	; 0xb52 <vfprintf+0x100>
     b04:	30 ed       	ldi	r19, 0xD0	; 208
     b06:	38 0f       	add	r19, r24
     b08:	3a 30       	cpi	r19, 0x0A	; 10
     b0a:	78 f4       	brcc	.+30     	; 0xb2a <vfprintf+0xd8>
     b0c:	26 ff       	sbrs	r18, 6
     b0e:	06 c0       	rjmp	.+12     	; 0xb1c <vfprintf+0xca>
     b10:	fa e0       	ldi	r31, 0x0A	; 10
     b12:	5f 9e       	mul	r5, r31
     b14:	30 0d       	add	r19, r0
     b16:	11 24       	eor	r1, r1
     b18:	53 2e       	mov	r5, r19
     b1a:	13 c0       	rjmp	.+38     	; 0xb42 <vfprintf+0xf0>
     b1c:	8a e0       	ldi	r24, 0x0A	; 10
     b1e:	38 9e       	mul	r3, r24
     b20:	30 0d       	add	r19, r0
     b22:	11 24       	eor	r1, r1
     b24:	33 2e       	mov	r3, r19
     b26:	20 62       	ori	r18, 0x20	; 32
     b28:	0c c0       	rjmp	.+24     	; 0xb42 <vfprintf+0xf0>
     b2a:	8e 32       	cpi	r24, 0x2E	; 46
     b2c:	21 f4       	brne	.+8      	; 0xb36 <vfprintf+0xe4>
     b2e:	26 fd       	sbrc	r18, 6
     b30:	5f c1       	rjmp	.+702    	; 0xdf0 <vfprintf+0x39e>
     b32:	20 64       	ori	r18, 0x40	; 64
     b34:	06 c0       	rjmp	.+12     	; 0xb42 <vfprintf+0xf0>
     b36:	8c 36       	cpi	r24, 0x6C	; 108
     b38:	11 f4       	brne	.+4      	; 0xb3e <vfprintf+0xec>
     b3a:	20 68       	ori	r18, 0x80	; 128
     b3c:	02 c0       	rjmp	.+4      	; 0xb42 <vfprintf+0xf0>
     b3e:	88 36       	cpi	r24, 0x68	; 104
     b40:	41 f4       	brne	.+16     	; 0xb52 <vfprintf+0x100>
     b42:	f6 01       	movw	r30, r12
     b44:	93 fd       	sbrc	r25, 3
     b46:	85 91       	lpm	r24, Z+
     b48:	93 ff       	sbrs	r25, 3
     b4a:	81 91       	ld	r24, Z+
     b4c:	6f 01       	movw	r12, r30
     b4e:	81 11       	cpse	r24, r1
     b50:	c1 cf       	rjmp	.-126    	; 0xad4 <vfprintf+0x82>
     b52:	98 2f       	mov	r25, r24
     b54:	9f 7d       	andi	r25, 0xDF	; 223
     b56:	95 54       	subi	r25, 0x45	; 69
     b58:	93 30       	cpi	r25, 0x03	; 3
     b5a:	28 f4       	brcc	.+10     	; 0xb66 <vfprintf+0x114>
     b5c:	0c 5f       	subi	r16, 0xFC	; 252
     b5e:	1f 4f       	sbci	r17, 0xFF	; 255
     b60:	ff e3       	ldi	r31, 0x3F	; 63
     b62:	f9 83       	std	Y+1, r31	; 0x01
     b64:	0d c0       	rjmp	.+26     	; 0xb80 <vfprintf+0x12e>
     b66:	83 36       	cpi	r24, 0x63	; 99
     b68:	31 f0       	breq	.+12     	; 0xb76 <vfprintf+0x124>
     b6a:	83 37       	cpi	r24, 0x73	; 115
     b6c:	71 f0       	breq	.+28     	; 0xb8a <vfprintf+0x138>
     b6e:	83 35       	cpi	r24, 0x53	; 83
     b70:	09 f0       	breq	.+2      	; 0xb74 <vfprintf+0x122>
     b72:	57 c0       	rjmp	.+174    	; 0xc22 <vfprintf+0x1d0>
     b74:	21 c0       	rjmp	.+66     	; 0xbb8 <vfprintf+0x166>
     b76:	f8 01       	movw	r30, r16
     b78:	80 81       	ld	r24, Z
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	0e 5f       	subi	r16, 0xFE	; 254
     b7e:	1f 4f       	sbci	r17, 0xFF	; 255
     b80:	44 24       	eor	r4, r4
     b82:	43 94       	inc	r4
     b84:	51 2c       	mov	r5, r1
     b86:	54 01       	movw	r10, r8
     b88:	14 c0       	rjmp	.+40     	; 0xbb2 <vfprintf+0x160>
     b8a:	38 01       	movw	r6, r16
     b8c:	f2 e0       	ldi	r31, 0x02	; 2
     b8e:	6f 0e       	add	r6, r31
     b90:	71 1c       	adc	r7, r1
     b92:	f8 01       	movw	r30, r16
     b94:	a0 80       	ld	r10, Z
     b96:	b1 80       	ldd	r11, Z+1	; 0x01
     b98:	26 ff       	sbrs	r18, 6
     b9a:	03 c0       	rjmp	.+6      	; 0xba2 <vfprintf+0x150>
     b9c:	65 2d       	mov	r22, r5
     b9e:	70 e0       	ldi	r23, 0x00	; 0
     ba0:	02 c0       	rjmp	.+4      	; 0xba6 <vfprintf+0x154>
     ba2:	6f ef       	ldi	r22, 0xFF	; 255
     ba4:	7f ef       	ldi	r23, 0xFF	; 255
     ba6:	c5 01       	movw	r24, r10
     ba8:	2c 87       	std	Y+12, r18	; 0x0c
     baa:	94 d2       	rcall	.+1320   	; 0x10d4 <strnlen>
     bac:	2c 01       	movw	r4, r24
     bae:	83 01       	movw	r16, r6
     bb0:	2c 85       	ldd	r18, Y+12	; 0x0c
     bb2:	2f 77       	andi	r18, 0x7F	; 127
     bb4:	22 2e       	mov	r2, r18
     bb6:	16 c0       	rjmp	.+44     	; 0xbe4 <vfprintf+0x192>
     bb8:	38 01       	movw	r6, r16
     bba:	f2 e0       	ldi	r31, 0x02	; 2
     bbc:	6f 0e       	add	r6, r31
     bbe:	71 1c       	adc	r7, r1
     bc0:	f8 01       	movw	r30, r16
     bc2:	a0 80       	ld	r10, Z
     bc4:	b1 80       	ldd	r11, Z+1	; 0x01
     bc6:	26 ff       	sbrs	r18, 6
     bc8:	03 c0       	rjmp	.+6      	; 0xbd0 <vfprintf+0x17e>
     bca:	65 2d       	mov	r22, r5
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	02 c0       	rjmp	.+4      	; 0xbd4 <vfprintf+0x182>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	c5 01       	movw	r24, r10
     bd6:	2c 87       	std	Y+12, r18	; 0x0c
     bd8:	6b d2       	rcall	.+1238   	; 0x10b0 <strnlen_P>
     bda:	2c 01       	movw	r4, r24
     bdc:	2c 85       	ldd	r18, Y+12	; 0x0c
     bde:	20 68       	ori	r18, 0x80	; 128
     be0:	22 2e       	mov	r2, r18
     be2:	83 01       	movw	r16, r6
     be4:	23 fc       	sbrc	r2, 3
     be6:	19 c0       	rjmp	.+50     	; 0xc1a <vfprintf+0x1c8>
     be8:	83 2d       	mov	r24, r3
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	48 16       	cp	r4, r24
     bee:	59 06       	cpc	r5, r25
     bf0:	a0 f4       	brcc	.+40     	; 0xc1a <vfprintf+0x1c8>
     bf2:	b7 01       	movw	r22, r14
     bf4:	80 e2       	ldi	r24, 0x20	; 32
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	78 d2       	rcall	.+1264   	; 0x10ea <fputc>
     bfa:	3a 94       	dec	r3
     bfc:	f5 cf       	rjmp	.-22     	; 0xbe8 <vfprintf+0x196>
     bfe:	f5 01       	movw	r30, r10
     c00:	27 fc       	sbrc	r2, 7
     c02:	85 91       	lpm	r24, Z+
     c04:	27 fe       	sbrs	r2, 7
     c06:	81 91       	ld	r24, Z+
     c08:	5f 01       	movw	r10, r30
     c0a:	b7 01       	movw	r22, r14
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	6d d2       	rcall	.+1242   	; 0x10ea <fputc>
     c10:	31 10       	cpse	r3, r1
     c12:	3a 94       	dec	r3
     c14:	f1 e0       	ldi	r31, 0x01	; 1
     c16:	4f 1a       	sub	r4, r31
     c18:	51 08       	sbc	r5, r1
     c1a:	41 14       	cp	r4, r1
     c1c:	51 04       	cpc	r5, r1
     c1e:	79 f7       	brne	.-34     	; 0xbfe <vfprintf+0x1ac>
     c20:	de c0       	rjmp	.+444    	; 0xdde <vfprintf+0x38c>
     c22:	84 36       	cpi	r24, 0x64	; 100
     c24:	11 f0       	breq	.+4      	; 0xc2a <vfprintf+0x1d8>
     c26:	89 36       	cpi	r24, 0x69	; 105
     c28:	31 f5       	brne	.+76     	; 0xc76 <vfprintf+0x224>
     c2a:	f8 01       	movw	r30, r16
     c2c:	27 ff       	sbrs	r18, 7
     c2e:	07 c0       	rjmp	.+14     	; 0xc3e <vfprintf+0x1ec>
     c30:	60 81       	ld	r22, Z
     c32:	71 81       	ldd	r23, Z+1	; 0x01
     c34:	82 81       	ldd	r24, Z+2	; 0x02
     c36:	93 81       	ldd	r25, Z+3	; 0x03
     c38:	0c 5f       	subi	r16, 0xFC	; 252
     c3a:	1f 4f       	sbci	r17, 0xFF	; 255
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <vfprintf+0x1fc>
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	88 27       	eor	r24, r24
     c44:	77 fd       	sbrc	r23, 7
     c46:	80 95       	com	r24
     c48:	98 2f       	mov	r25, r24
     c4a:	0e 5f       	subi	r16, 0xFE	; 254
     c4c:	1f 4f       	sbci	r17, 0xFF	; 255
     c4e:	2f 76       	andi	r18, 0x6F	; 111
     c50:	b2 2e       	mov	r11, r18
     c52:	97 ff       	sbrs	r25, 7
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <vfprintf+0x216>
     c56:	90 95       	com	r25
     c58:	80 95       	com	r24
     c5a:	70 95       	com	r23
     c5c:	61 95       	neg	r22
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	8f 4f       	sbci	r24, 0xFF	; 255
     c62:	9f 4f       	sbci	r25, 0xFF	; 255
     c64:	20 68       	ori	r18, 0x80	; 128
     c66:	b2 2e       	mov	r11, r18
     c68:	2a e0       	ldi	r18, 0x0A	; 10
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	a4 01       	movw	r20, r8
     c6e:	6f d2       	rcall	.+1246   	; 0x114e <__ultoa_invert>
     c70:	a8 2e       	mov	r10, r24
     c72:	a8 18       	sub	r10, r8
     c74:	43 c0       	rjmp	.+134    	; 0xcfc <vfprintf+0x2aa>
     c76:	85 37       	cpi	r24, 0x75	; 117
     c78:	29 f4       	brne	.+10     	; 0xc84 <vfprintf+0x232>
     c7a:	2f 7e       	andi	r18, 0xEF	; 239
     c7c:	b2 2e       	mov	r11, r18
     c7e:	2a e0       	ldi	r18, 0x0A	; 10
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	25 c0       	rjmp	.+74     	; 0xcce <vfprintf+0x27c>
     c84:	f2 2f       	mov	r31, r18
     c86:	f9 7f       	andi	r31, 0xF9	; 249
     c88:	bf 2e       	mov	r11, r31
     c8a:	8f 36       	cpi	r24, 0x6F	; 111
     c8c:	c1 f0       	breq	.+48     	; 0xcbe <vfprintf+0x26c>
     c8e:	18 f4       	brcc	.+6      	; 0xc96 <vfprintf+0x244>
     c90:	88 35       	cpi	r24, 0x58	; 88
     c92:	79 f0       	breq	.+30     	; 0xcb2 <vfprintf+0x260>
     c94:	ad c0       	rjmp	.+346    	; 0xdf0 <vfprintf+0x39e>
     c96:	80 37       	cpi	r24, 0x70	; 112
     c98:	19 f0       	breq	.+6      	; 0xca0 <vfprintf+0x24e>
     c9a:	88 37       	cpi	r24, 0x78	; 120
     c9c:	21 f0       	breq	.+8      	; 0xca6 <vfprintf+0x254>
     c9e:	a8 c0       	rjmp	.+336    	; 0xdf0 <vfprintf+0x39e>
     ca0:	2f 2f       	mov	r18, r31
     ca2:	20 61       	ori	r18, 0x10	; 16
     ca4:	b2 2e       	mov	r11, r18
     ca6:	b4 fe       	sbrs	r11, 4
     ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <vfprintf+0x272>
     caa:	8b 2d       	mov	r24, r11
     cac:	84 60       	ori	r24, 0x04	; 4
     cae:	b8 2e       	mov	r11, r24
     cb0:	09 c0       	rjmp	.+18     	; 0xcc4 <vfprintf+0x272>
     cb2:	24 ff       	sbrs	r18, 4
     cb4:	0a c0       	rjmp	.+20     	; 0xcca <vfprintf+0x278>
     cb6:	9f 2f       	mov	r25, r31
     cb8:	96 60       	ori	r25, 0x06	; 6
     cba:	b9 2e       	mov	r11, r25
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0x278>
     cbe:	28 e0       	ldi	r18, 0x08	; 8
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	05 c0       	rjmp	.+10     	; 0xcce <vfprintf+0x27c>
     cc4:	20 e1       	ldi	r18, 0x10	; 16
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	02 c0       	rjmp	.+4      	; 0xcce <vfprintf+0x27c>
     cca:	20 e1       	ldi	r18, 0x10	; 16
     ccc:	32 e0       	ldi	r19, 0x02	; 2
     cce:	f8 01       	movw	r30, r16
     cd0:	b7 fe       	sbrs	r11, 7
     cd2:	07 c0       	rjmp	.+14     	; 0xce2 <vfprintf+0x290>
     cd4:	60 81       	ld	r22, Z
     cd6:	71 81       	ldd	r23, Z+1	; 0x01
     cd8:	82 81       	ldd	r24, Z+2	; 0x02
     cda:	93 81       	ldd	r25, Z+3	; 0x03
     cdc:	0c 5f       	subi	r16, 0xFC	; 252
     cde:	1f 4f       	sbci	r17, 0xFF	; 255
     ce0:	06 c0       	rjmp	.+12     	; 0xcee <vfprintf+0x29c>
     ce2:	60 81       	ld	r22, Z
     ce4:	71 81       	ldd	r23, Z+1	; 0x01
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	0e 5f       	subi	r16, 0xFE	; 254
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	a4 01       	movw	r20, r8
     cf0:	2e d2       	rcall	.+1116   	; 0x114e <__ultoa_invert>
     cf2:	a8 2e       	mov	r10, r24
     cf4:	a8 18       	sub	r10, r8
     cf6:	fb 2d       	mov	r31, r11
     cf8:	ff 77       	andi	r31, 0x7F	; 127
     cfa:	bf 2e       	mov	r11, r31
     cfc:	b6 fe       	sbrs	r11, 6
     cfe:	0b c0       	rjmp	.+22     	; 0xd16 <vfprintf+0x2c4>
     d00:	2b 2d       	mov	r18, r11
     d02:	2e 7f       	andi	r18, 0xFE	; 254
     d04:	a5 14       	cp	r10, r5
     d06:	50 f4       	brcc	.+20     	; 0xd1c <vfprintf+0x2ca>
     d08:	b4 fe       	sbrs	r11, 4
     d0a:	0a c0       	rjmp	.+20     	; 0xd20 <vfprintf+0x2ce>
     d0c:	b2 fc       	sbrc	r11, 2
     d0e:	08 c0       	rjmp	.+16     	; 0xd20 <vfprintf+0x2ce>
     d10:	2b 2d       	mov	r18, r11
     d12:	2e 7e       	andi	r18, 0xEE	; 238
     d14:	05 c0       	rjmp	.+10     	; 0xd20 <vfprintf+0x2ce>
     d16:	7a 2c       	mov	r7, r10
     d18:	2b 2d       	mov	r18, r11
     d1a:	03 c0       	rjmp	.+6      	; 0xd22 <vfprintf+0x2d0>
     d1c:	7a 2c       	mov	r7, r10
     d1e:	01 c0       	rjmp	.+2      	; 0xd22 <vfprintf+0x2d0>
     d20:	75 2c       	mov	r7, r5
     d22:	24 ff       	sbrs	r18, 4
     d24:	0d c0       	rjmp	.+26     	; 0xd40 <vfprintf+0x2ee>
     d26:	fe 01       	movw	r30, r28
     d28:	ea 0d       	add	r30, r10
     d2a:	f1 1d       	adc	r31, r1
     d2c:	80 81       	ld	r24, Z
     d2e:	80 33       	cpi	r24, 0x30	; 48
     d30:	11 f4       	brne	.+4      	; 0xd36 <vfprintf+0x2e4>
     d32:	29 7e       	andi	r18, 0xE9	; 233
     d34:	09 c0       	rjmp	.+18     	; 0xd48 <vfprintf+0x2f6>
     d36:	22 ff       	sbrs	r18, 2
     d38:	06 c0       	rjmp	.+12     	; 0xd46 <vfprintf+0x2f4>
     d3a:	73 94       	inc	r7
     d3c:	73 94       	inc	r7
     d3e:	04 c0       	rjmp	.+8      	; 0xd48 <vfprintf+0x2f6>
     d40:	82 2f       	mov	r24, r18
     d42:	86 78       	andi	r24, 0x86	; 134
     d44:	09 f0       	breq	.+2      	; 0xd48 <vfprintf+0x2f6>
     d46:	73 94       	inc	r7
     d48:	23 fd       	sbrc	r18, 3
     d4a:	12 c0       	rjmp	.+36     	; 0xd70 <vfprintf+0x31e>
     d4c:	20 ff       	sbrs	r18, 0
     d4e:	06 c0       	rjmp	.+12     	; 0xd5c <vfprintf+0x30a>
     d50:	5a 2c       	mov	r5, r10
     d52:	73 14       	cp	r7, r3
     d54:	18 f4       	brcc	.+6      	; 0xd5c <vfprintf+0x30a>
     d56:	53 0c       	add	r5, r3
     d58:	57 18       	sub	r5, r7
     d5a:	73 2c       	mov	r7, r3
     d5c:	73 14       	cp	r7, r3
     d5e:	60 f4       	brcc	.+24     	; 0xd78 <vfprintf+0x326>
     d60:	b7 01       	movw	r22, r14
     d62:	80 e2       	ldi	r24, 0x20	; 32
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	2c 87       	std	Y+12, r18	; 0x0c
     d68:	c0 d1       	rcall	.+896    	; 0x10ea <fputc>
     d6a:	73 94       	inc	r7
     d6c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d6e:	f6 cf       	rjmp	.-20     	; 0xd5c <vfprintf+0x30a>
     d70:	73 14       	cp	r7, r3
     d72:	10 f4       	brcc	.+4      	; 0xd78 <vfprintf+0x326>
     d74:	37 18       	sub	r3, r7
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <vfprintf+0x328>
     d78:	31 2c       	mov	r3, r1
     d7a:	24 ff       	sbrs	r18, 4
     d7c:	11 c0       	rjmp	.+34     	; 0xda0 <vfprintf+0x34e>
     d7e:	b7 01       	movw	r22, r14
     d80:	80 e3       	ldi	r24, 0x30	; 48
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	2c 87       	std	Y+12, r18	; 0x0c
     d86:	b1 d1       	rcall	.+866    	; 0x10ea <fputc>
     d88:	2c 85       	ldd	r18, Y+12	; 0x0c
     d8a:	22 ff       	sbrs	r18, 2
     d8c:	16 c0       	rjmp	.+44     	; 0xdba <vfprintf+0x368>
     d8e:	21 ff       	sbrs	r18, 1
     d90:	03 c0       	rjmp	.+6      	; 0xd98 <vfprintf+0x346>
     d92:	88 e5       	ldi	r24, 0x58	; 88
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	02 c0       	rjmp	.+4      	; 0xd9c <vfprintf+0x34a>
     d98:	88 e7       	ldi	r24, 0x78	; 120
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	b7 01       	movw	r22, r14
     d9e:	0c c0       	rjmp	.+24     	; 0xdb8 <vfprintf+0x366>
     da0:	82 2f       	mov	r24, r18
     da2:	86 78       	andi	r24, 0x86	; 134
     da4:	51 f0       	breq	.+20     	; 0xdba <vfprintf+0x368>
     da6:	21 fd       	sbrc	r18, 1
     da8:	02 c0       	rjmp	.+4      	; 0xdae <vfprintf+0x35c>
     daa:	80 e2       	ldi	r24, 0x20	; 32
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <vfprintf+0x35e>
     dae:	8b e2       	ldi	r24, 0x2B	; 43
     db0:	27 fd       	sbrc	r18, 7
     db2:	8d e2       	ldi	r24, 0x2D	; 45
     db4:	b7 01       	movw	r22, r14
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	98 d1       	rcall	.+816    	; 0x10ea <fputc>
     dba:	a5 14       	cp	r10, r5
     dbc:	30 f4       	brcc	.+12     	; 0xdca <vfprintf+0x378>
     dbe:	b7 01       	movw	r22, r14
     dc0:	80 e3       	ldi	r24, 0x30	; 48
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	92 d1       	rcall	.+804    	; 0x10ea <fputc>
     dc6:	5a 94       	dec	r5
     dc8:	f8 cf       	rjmp	.-16     	; 0xdba <vfprintf+0x368>
     dca:	aa 94       	dec	r10
     dcc:	f4 01       	movw	r30, r8
     dce:	ea 0d       	add	r30, r10
     dd0:	f1 1d       	adc	r31, r1
     dd2:	80 81       	ld	r24, Z
     dd4:	b7 01       	movw	r22, r14
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	88 d1       	rcall	.+784    	; 0x10ea <fputc>
     dda:	a1 10       	cpse	r10, r1
     ddc:	f6 cf       	rjmp	.-20     	; 0xdca <vfprintf+0x378>
     dde:	33 20       	and	r3, r3
     de0:	09 f4       	brne	.+2      	; 0xde4 <vfprintf+0x392>
     de2:	5d ce       	rjmp	.-838    	; 0xa9e <vfprintf+0x4c>
     de4:	b7 01       	movw	r22, r14
     de6:	80 e2       	ldi	r24, 0x20	; 32
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	7f d1       	rcall	.+766    	; 0x10ea <fputc>
     dec:	3a 94       	dec	r3
     dee:	f7 cf       	rjmp	.-18     	; 0xdde <vfprintf+0x38c>
     df0:	f7 01       	movw	r30, r14
     df2:	86 81       	ldd	r24, Z+6	; 0x06
     df4:	97 81       	ldd	r25, Z+7	; 0x07
     df6:	02 c0       	rjmp	.+4      	; 0xdfc <vfprintf+0x3aa>
     df8:	8f ef       	ldi	r24, 0xFF	; 255
     dfa:	9f ef       	ldi	r25, 0xFF	; 255
     dfc:	2c 96       	adiw	r28, 0x0c	; 12
     dfe:	0f b6       	in	r0, 0x3f	; 63
     e00:	f8 94       	cli
     e02:	de bf       	out	0x3e, r29	; 62
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	cd bf       	out	0x3d, r28	; 61
     e08:	df 91       	pop	r29
     e0a:	cf 91       	pop	r28
     e0c:	1f 91       	pop	r17
     e0e:	0f 91       	pop	r16
     e10:	ff 90       	pop	r15
     e12:	ef 90       	pop	r14
     e14:	df 90       	pop	r13
     e16:	cf 90       	pop	r12
     e18:	bf 90       	pop	r11
     e1a:	af 90       	pop	r10
     e1c:	9f 90       	pop	r9
     e1e:	8f 90       	pop	r8
     e20:	7f 90       	pop	r7
     e22:	6f 90       	pop	r6
     e24:	5f 90       	pop	r5
     e26:	4f 90       	pop	r4
     e28:	3f 90       	pop	r3
     e2a:	2f 90       	pop	r2
     e2c:	08 95       	ret

00000e2e <calloc>:
     e2e:	0f 93       	push	r16
     e30:	1f 93       	push	r17
     e32:	cf 93       	push	r28
     e34:	df 93       	push	r29
     e36:	86 9f       	mul	r24, r22
     e38:	80 01       	movw	r16, r0
     e3a:	87 9f       	mul	r24, r23
     e3c:	10 0d       	add	r17, r0
     e3e:	96 9f       	mul	r25, r22
     e40:	10 0d       	add	r17, r0
     e42:	11 24       	eor	r1, r1
     e44:	c8 01       	movw	r24, r16
     e46:	0d d0       	rcall	.+26     	; 0xe62 <malloc>
     e48:	ec 01       	movw	r28, r24
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	21 f0       	breq	.+8      	; 0xe56 <calloc+0x28>
     e4e:	a8 01       	movw	r20, r16
     e50:	60 e0       	ldi	r22, 0x00	; 0
     e52:	70 e0       	ldi	r23, 0x00	; 0
     e54:	38 d1       	rcall	.+624    	; 0x10c6 <memset>
     e56:	ce 01       	movw	r24, r28
     e58:	df 91       	pop	r29
     e5a:	cf 91       	pop	r28
     e5c:	1f 91       	pop	r17
     e5e:	0f 91       	pop	r16
     e60:	08 95       	ret

00000e62 <malloc>:
     e62:	cf 93       	push	r28
     e64:	df 93       	push	r29
     e66:	82 30       	cpi	r24, 0x02	; 2
     e68:	91 05       	cpc	r25, r1
     e6a:	10 f4       	brcc	.+4      	; 0xe70 <malloc+0xe>
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	90 e0       	ldi	r25, 0x00	; 0
     e70:	e0 91 3f 02 	lds	r30, 0x023F
     e74:	f0 91 40 02 	lds	r31, 0x0240
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	a0 e0       	ldi	r26, 0x00	; 0
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	39 f1       	breq	.+78     	; 0xed2 <malloc+0x70>
     e84:	40 81       	ld	r20, Z
     e86:	51 81       	ldd	r21, Z+1	; 0x01
     e88:	48 17       	cp	r20, r24
     e8a:	59 07       	cpc	r21, r25
     e8c:	b8 f0       	brcs	.+46     	; 0xebc <malloc+0x5a>
     e8e:	48 17       	cp	r20, r24
     e90:	59 07       	cpc	r21, r25
     e92:	71 f4       	brne	.+28     	; 0xeb0 <malloc+0x4e>
     e94:	82 81       	ldd	r24, Z+2	; 0x02
     e96:	93 81       	ldd	r25, Z+3	; 0x03
     e98:	10 97       	sbiw	r26, 0x00	; 0
     e9a:	29 f0       	breq	.+10     	; 0xea6 <malloc+0x44>
     e9c:	13 96       	adiw	r26, 0x03	; 3
     e9e:	9c 93       	st	X, r25
     ea0:	8e 93       	st	-X, r24
     ea2:	12 97       	sbiw	r26, 0x02	; 2
     ea4:	2c c0       	rjmp	.+88     	; 0xefe <malloc+0x9c>
     ea6:	90 93 40 02 	sts	0x0240, r25
     eaa:	80 93 3f 02 	sts	0x023F, r24
     eae:	27 c0       	rjmp	.+78     	; 0xefe <malloc+0x9c>
     eb0:	21 15       	cp	r18, r1
     eb2:	31 05       	cpc	r19, r1
     eb4:	31 f0       	breq	.+12     	; 0xec2 <malloc+0x60>
     eb6:	42 17       	cp	r20, r18
     eb8:	53 07       	cpc	r21, r19
     eba:	18 f0       	brcs	.+6      	; 0xec2 <malloc+0x60>
     ebc:	a9 01       	movw	r20, r18
     ebe:	db 01       	movw	r26, r22
     ec0:	01 c0       	rjmp	.+2      	; 0xec4 <malloc+0x62>
     ec2:	ef 01       	movw	r28, r30
     ec4:	9a 01       	movw	r18, r20
     ec6:	bd 01       	movw	r22, r26
     ec8:	df 01       	movw	r26, r30
     eca:	02 80       	ldd	r0, Z+2	; 0x02
     ecc:	f3 81       	ldd	r31, Z+3	; 0x03
     ece:	e0 2d       	mov	r30, r0
     ed0:	d7 cf       	rjmp	.-82     	; 0xe80 <malloc+0x1e>
     ed2:	21 15       	cp	r18, r1
     ed4:	31 05       	cpc	r19, r1
     ed6:	f9 f0       	breq	.+62     	; 0xf16 <malloc+0xb4>
     ed8:	28 1b       	sub	r18, r24
     eda:	39 0b       	sbc	r19, r25
     edc:	24 30       	cpi	r18, 0x04	; 4
     ede:	31 05       	cpc	r19, r1
     ee0:	80 f4       	brcc	.+32     	; 0xf02 <malloc+0xa0>
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	61 15       	cp	r22, r1
     ee8:	71 05       	cpc	r23, r1
     eea:	21 f0       	breq	.+8      	; 0xef4 <malloc+0x92>
     eec:	fb 01       	movw	r30, r22
     eee:	93 83       	std	Z+3, r25	; 0x03
     ef0:	82 83       	std	Z+2, r24	; 0x02
     ef2:	04 c0       	rjmp	.+8      	; 0xefc <malloc+0x9a>
     ef4:	90 93 40 02 	sts	0x0240, r25
     ef8:	80 93 3f 02 	sts	0x023F, r24
     efc:	fe 01       	movw	r30, r28
     efe:	32 96       	adiw	r30, 0x02	; 2
     f00:	44 c0       	rjmp	.+136    	; 0xf8a <malloc+0x128>
     f02:	fe 01       	movw	r30, r28
     f04:	e2 0f       	add	r30, r18
     f06:	f3 1f       	adc	r31, r19
     f08:	81 93       	st	Z+, r24
     f0a:	91 93       	st	Z+, r25
     f0c:	22 50       	subi	r18, 0x02	; 2
     f0e:	31 09       	sbc	r19, r1
     f10:	39 83       	std	Y+1, r19	; 0x01
     f12:	28 83       	st	Y, r18
     f14:	3a c0       	rjmp	.+116    	; 0xf8a <malloc+0x128>
     f16:	20 91 3d 02 	lds	r18, 0x023D
     f1a:	30 91 3e 02 	lds	r19, 0x023E
     f1e:	23 2b       	or	r18, r19
     f20:	41 f4       	brne	.+16     	; 0xf32 <malloc+0xd0>
     f22:	20 91 02 02 	lds	r18, 0x0202
     f26:	30 91 03 02 	lds	r19, 0x0203
     f2a:	30 93 3e 02 	sts	0x023E, r19
     f2e:	20 93 3d 02 	sts	0x023D, r18
     f32:	20 91 00 02 	lds	r18, 0x0200
     f36:	30 91 01 02 	lds	r19, 0x0201
     f3a:	21 15       	cp	r18, r1
     f3c:	31 05       	cpc	r19, r1
     f3e:	41 f4       	brne	.+16     	; 0xf50 <malloc+0xee>
     f40:	2d b7       	in	r18, 0x3d	; 61
     f42:	3e b7       	in	r19, 0x3e	; 62
     f44:	40 91 04 02 	lds	r20, 0x0204
     f48:	50 91 05 02 	lds	r21, 0x0205
     f4c:	24 1b       	sub	r18, r20
     f4e:	35 0b       	sbc	r19, r21
     f50:	e0 91 3d 02 	lds	r30, 0x023D
     f54:	f0 91 3e 02 	lds	r31, 0x023E
     f58:	e2 17       	cp	r30, r18
     f5a:	f3 07       	cpc	r31, r19
     f5c:	a0 f4       	brcc	.+40     	; 0xf86 <malloc+0x124>
     f5e:	2e 1b       	sub	r18, r30
     f60:	3f 0b       	sbc	r19, r31
     f62:	28 17       	cp	r18, r24
     f64:	39 07       	cpc	r19, r25
     f66:	78 f0       	brcs	.+30     	; 0xf86 <malloc+0x124>
     f68:	ac 01       	movw	r20, r24
     f6a:	4e 5f       	subi	r20, 0xFE	; 254
     f6c:	5f 4f       	sbci	r21, 0xFF	; 255
     f6e:	24 17       	cp	r18, r20
     f70:	35 07       	cpc	r19, r21
     f72:	48 f0       	brcs	.+18     	; 0xf86 <malloc+0x124>
     f74:	4e 0f       	add	r20, r30
     f76:	5f 1f       	adc	r21, r31
     f78:	50 93 3e 02 	sts	0x023E, r21
     f7c:	40 93 3d 02 	sts	0x023D, r20
     f80:	81 93       	st	Z+, r24
     f82:	91 93       	st	Z+, r25
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <malloc+0x128>
     f86:	e0 e0       	ldi	r30, 0x00	; 0
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	cf 01       	movw	r24, r30
     f8c:	df 91       	pop	r29
     f8e:	cf 91       	pop	r28
     f90:	08 95       	ret

00000f92 <free>:
     f92:	cf 93       	push	r28
     f94:	df 93       	push	r29
     f96:	00 97       	sbiw	r24, 0x00	; 0
     f98:	09 f4       	brne	.+2      	; 0xf9c <free+0xa>
     f9a:	87 c0       	rjmp	.+270    	; 0x10aa <free+0x118>
     f9c:	fc 01       	movw	r30, r24
     f9e:	32 97       	sbiw	r30, 0x02	; 2
     fa0:	13 82       	std	Z+3, r1	; 0x03
     fa2:	12 82       	std	Z+2, r1	; 0x02
     fa4:	c0 91 3f 02 	lds	r28, 0x023F
     fa8:	d0 91 40 02 	lds	r29, 0x0240
     fac:	20 97       	sbiw	r28, 0x00	; 0
     fae:	81 f4       	brne	.+32     	; 0xfd0 <free+0x3e>
     fb0:	20 81       	ld	r18, Z
     fb2:	31 81       	ldd	r19, Z+1	; 0x01
     fb4:	28 0f       	add	r18, r24
     fb6:	39 1f       	adc	r19, r25
     fb8:	80 91 3d 02 	lds	r24, 0x023D
     fbc:	90 91 3e 02 	lds	r25, 0x023E
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	79 f5       	brne	.+94     	; 0x1024 <free+0x92>
     fc6:	f0 93 3e 02 	sts	0x023E, r31
     fca:	e0 93 3d 02 	sts	0x023D, r30
     fce:	6d c0       	rjmp	.+218    	; 0x10aa <free+0x118>
     fd0:	de 01       	movw	r26, r28
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	ae 17       	cp	r26, r30
     fd8:	bf 07       	cpc	r27, r31
     fda:	50 f4       	brcc	.+20     	; 0xff0 <free+0x5e>
     fdc:	12 96       	adiw	r26, 0x02	; 2
     fde:	4d 91       	ld	r20, X+
     fe0:	5c 91       	ld	r21, X
     fe2:	13 97       	sbiw	r26, 0x03	; 3
     fe4:	9d 01       	movw	r18, r26
     fe6:	41 15       	cp	r20, r1
     fe8:	51 05       	cpc	r21, r1
     fea:	09 f1       	breq	.+66     	; 0x102e <free+0x9c>
     fec:	da 01       	movw	r26, r20
     fee:	f3 cf       	rjmp	.-26     	; 0xfd6 <free+0x44>
     ff0:	b3 83       	std	Z+3, r27	; 0x03
     ff2:	a2 83       	std	Z+2, r26	; 0x02
     ff4:	40 81       	ld	r20, Z
     ff6:	51 81       	ldd	r21, Z+1	; 0x01
     ff8:	84 0f       	add	r24, r20
     ffa:	95 1f       	adc	r25, r21
     ffc:	8a 17       	cp	r24, r26
     ffe:	9b 07       	cpc	r25, r27
    1000:	71 f4       	brne	.+28     	; 0x101e <free+0x8c>
    1002:	8d 91       	ld	r24, X+
    1004:	9c 91       	ld	r25, X
    1006:	11 97       	sbiw	r26, 0x01	; 1
    1008:	84 0f       	add	r24, r20
    100a:	95 1f       	adc	r25, r21
    100c:	02 96       	adiw	r24, 0x02	; 2
    100e:	91 83       	std	Z+1, r25	; 0x01
    1010:	80 83       	st	Z, r24
    1012:	12 96       	adiw	r26, 0x02	; 2
    1014:	8d 91       	ld	r24, X+
    1016:	9c 91       	ld	r25, X
    1018:	13 97       	sbiw	r26, 0x03	; 3
    101a:	93 83       	std	Z+3, r25	; 0x03
    101c:	82 83       	std	Z+2, r24	; 0x02
    101e:	21 15       	cp	r18, r1
    1020:	31 05       	cpc	r19, r1
    1022:	29 f4       	brne	.+10     	; 0x102e <free+0x9c>
    1024:	f0 93 40 02 	sts	0x0240, r31
    1028:	e0 93 3f 02 	sts	0x023F, r30
    102c:	3e c0       	rjmp	.+124    	; 0x10aa <free+0x118>
    102e:	d9 01       	movw	r26, r18
    1030:	13 96       	adiw	r26, 0x03	; 3
    1032:	fc 93       	st	X, r31
    1034:	ee 93       	st	-X, r30
    1036:	12 97       	sbiw	r26, 0x02	; 2
    1038:	4d 91       	ld	r20, X+
    103a:	5d 91       	ld	r21, X+
    103c:	a4 0f       	add	r26, r20
    103e:	b5 1f       	adc	r27, r21
    1040:	ea 17       	cp	r30, r26
    1042:	fb 07       	cpc	r31, r27
    1044:	79 f4       	brne	.+30     	; 0x1064 <free+0xd2>
    1046:	80 81       	ld	r24, Z
    1048:	91 81       	ldd	r25, Z+1	; 0x01
    104a:	84 0f       	add	r24, r20
    104c:	95 1f       	adc	r25, r21
    104e:	02 96       	adiw	r24, 0x02	; 2
    1050:	d9 01       	movw	r26, r18
    1052:	11 96       	adiw	r26, 0x01	; 1
    1054:	9c 93       	st	X, r25
    1056:	8e 93       	st	-X, r24
    1058:	82 81       	ldd	r24, Z+2	; 0x02
    105a:	93 81       	ldd	r25, Z+3	; 0x03
    105c:	13 96       	adiw	r26, 0x03	; 3
    105e:	9c 93       	st	X, r25
    1060:	8e 93       	st	-X, r24
    1062:	12 97       	sbiw	r26, 0x02	; 2
    1064:	e0 e0       	ldi	r30, 0x00	; 0
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	9b 81       	ldd	r25, Y+3	; 0x03
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	19 f0       	breq	.+6      	; 0x1076 <free+0xe4>
    1070:	fe 01       	movw	r30, r28
    1072:	ec 01       	movw	r28, r24
    1074:	f9 cf       	rjmp	.-14     	; 0x1068 <free+0xd6>
    1076:	ce 01       	movw	r24, r28
    1078:	02 96       	adiw	r24, 0x02	; 2
    107a:	28 81       	ld	r18, Y
    107c:	39 81       	ldd	r19, Y+1	; 0x01
    107e:	82 0f       	add	r24, r18
    1080:	93 1f       	adc	r25, r19
    1082:	20 91 3d 02 	lds	r18, 0x023D
    1086:	30 91 3e 02 	lds	r19, 0x023E
    108a:	28 17       	cp	r18, r24
    108c:	39 07       	cpc	r19, r25
    108e:	69 f4       	brne	.+26     	; 0x10aa <free+0x118>
    1090:	30 97       	sbiw	r30, 0x00	; 0
    1092:	29 f4       	brne	.+10     	; 0x109e <free+0x10c>
    1094:	10 92 40 02 	sts	0x0240, r1
    1098:	10 92 3f 02 	sts	0x023F, r1
    109c:	02 c0       	rjmp	.+4      	; 0x10a2 <free+0x110>
    109e:	13 82       	std	Z+3, r1	; 0x03
    10a0:	12 82       	std	Z+2, r1	; 0x02
    10a2:	d0 93 3e 02 	sts	0x023E, r29
    10a6:	c0 93 3d 02 	sts	0x023D, r28
    10aa:	df 91       	pop	r29
    10ac:	cf 91       	pop	r28
    10ae:	08 95       	ret

000010b0 <strnlen_P>:
    10b0:	fc 01       	movw	r30, r24
    10b2:	05 90       	lpm	r0, Z+
    10b4:	61 50       	subi	r22, 0x01	; 1
    10b6:	70 40       	sbci	r23, 0x00	; 0
    10b8:	01 10       	cpse	r0, r1
    10ba:	d8 f7       	brcc	.-10     	; 0x10b2 <strnlen_P+0x2>
    10bc:	80 95       	com	r24
    10be:	90 95       	com	r25
    10c0:	8e 0f       	add	r24, r30
    10c2:	9f 1f       	adc	r25, r31
    10c4:	08 95       	ret

000010c6 <memset>:
    10c6:	dc 01       	movw	r26, r24
    10c8:	01 c0       	rjmp	.+2      	; 0x10cc <memset+0x6>
    10ca:	6d 93       	st	X+, r22
    10cc:	41 50       	subi	r20, 0x01	; 1
    10ce:	50 40       	sbci	r21, 0x00	; 0
    10d0:	e0 f7       	brcc	.-8      	; 0x10ca <memset+0x4>
    10d2:	08 95       	ret

000010d4 <strnlen>:
    10d4:	fc 01       	movw	r30, r24
    10d6:	61 50       	subi	r22, 0x01	; 1
    10d8:	70 40       	sbci	r23, 0x00	; 0
    10da:	01 90       	ld	r0, Z+
    10dc:	01 10       	cpse	r0, r1
    10de:	d8 f7       	brcc	.-10     	; 0x10d6 <strnlen+0x2>
    10e0:	80 95       	com	r24
    10e2:	90 95       	com	r25
    10e4:	8e 0f       	add	r24, r30
    10e6:	9f 1f       	adc	r25, r31
    10e8:	08 95       	ret

000010ea <fputc>:
    10ea:	0f 93       	push	r16
    10ec:	1f 93       	push	r17
    10ee:	cf 93       	push	r28
    10f0:	df 93       	push	r29
    10f2:	18 2f       	mov	r17, r24
    10f4:	09 2f       	mov	r16, r25
    10f6:	eb 01       	movw	r28, r22
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	81 fd       	sbrc	r24, 1
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <fputc+0x1a>
    10fe:	8f ef       	ldi	r24, 0xFF	; 255
    1100:	9f ef       	ldi	r25, 0xFF	; 255
    1102:	20 c0       	rjmp	.+64     	; 0x1144 <fputc+0x5a>
    1104:	82 ff       	sbrs	r24, 2
    1106:	10 c0       	rjmp	.+32     	; 0x1128 <fputc+0x3e>
    1108:	4e 81       	ldd	r20, Y+6	; 0x06
    110a:	5f 81       	ldd	r21, Y+7	; 0x07
    110c:	2c 81       	ldd	r18, Y+4	; 0x04
    110e:	3d 81       	ldd	r19, Y+5	; 0x05
    1110:	42 17       	cp	r20, r18
    1112:	53 07       	cpc	r21, r19
    1114:	7c f4       	brge	.+30     	; 0x1134 <fputc+0x4a>
    1116:	e8 81       	ld	r30, Y
    1118:	f9 81       	ldd	r31, Y+1	; 0x01
    111a:	9f 01       	movw	r18, r30
    111c:	2f 5f       	subi	r18, 0xFF	; 255
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	39 83       	std	Y+1, r19	; 0x01
    1122:	28 83       	st	Y, r18
    1124:	10 83       	st	Z, r17
    1126:	06 c0       	rjmp	.+12     	; 0x1134 <fputc+0x4a>
    1128:	e8 85       	ldd	r30, Y+8	; 0x08
    112a:	f9 85       	ldd	r31, Y+9	; 0x09
    112c:	81 2f       	mov	r24, r17
    112e:	19 95       	eicall
    1130:	89 2b       	or	r24, r25
    1132:	29 f7       	brne	.-54     	; 0x10fe <fputc+0x14>
    1134:	2e 81       	ldd	r18, Y+6	; 0x06
    1136:	3f 81       	ldd	r19, Y+7	; 0x07
    1138:	2f 5f       	subi	r18, 0xFF	; 255
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	3f 83       	std	Y+7, r19	; 0x07
    113e:	2e 83       	std	Y+6, r18	; 0x06
    1140:	81 2f       	mov	r24, r17
    1142:	90 2f       	mov	r25, r16
    1144:	df 91       	pop	r29
    1146:	cf 91       	pop	r28
    1148:	1f 91       	pop	r17
    114a:	0f 91       	pop	r16
    114c:	08 95       	ret

0000114e <__ultoa_invert>:
    114e:	fa 01       	movw	r30, r20
    1150:	aa 27       	eor	r26, r26
    1152:	28 30       	cpi	r18, 0x08	; 8
    1154:	51 f1       	breq	.+84     	; 0x11aa <__ultoa_invert+0x5c>
    1156:	20 31       	cpi	r18, 0x10	; 16
    1158:	81 f1       	breq	.+96     	; 0x11ba <__ultoa_invert+0x6c>
    115a:	e8 94       	clt
    115c:	6f 93       	push	r22
    115e:	6e 7f       	andi	r22, 0xFE	; 254
    1160:	6e 5f       	subi	r22, 0xFE	; 254
    1162:	7f 4f       	sbci	r23, 0xFF	; 255
    1164:	8f 4f       	sbci	r24, 0xFF	; 255
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	af 4f       	sbci	r26, 0xFF	; 255
    116a:	b1 e0       	ldi	r27, 0x01	; 1
    116c:	3e d0       	rcall	.+124    	; 0x11ea <__ultoa_invert+0x9c>
    116e:	b4 e0       	ldi	r27, 0x04	; 4
    1170:	3c d0       	rcall	.+120    	; 0x11ea <__ultoa_invert+0x9c>
    1172:	67 0f       	add	r22, r23
    1174:	78 1f       	adc	r23, r24
    1176:	89 1f       	adc	r24, r25
    1178:	9a 1f       	adc	r25, r26
    117a:	a1 1d       	adc	r26, r1
    117c:	68 0f       	add	r22, r24
    117e:	79 1f       	adc	r23, r25
    1180:	8a 1f       	adc	r24, r26
    1182:	91 1d       	adc	r25, r1
    1184:	a1 1d       	adc	r26, r1
    1186:	6a 0f       	add	r22, r26
    1188:	71 1d       	adc	r23, r1
    118a:	81 1d       	adc	r24, r1
    118c:	91 1d       	adc	r25, r1
    118e:	a1 1d       	adc	r26, r1
    1190:	20 d0       	rcall	.+64     	; 0x11d2 <__ultoa_invert+0x84>
    1192:	09 f4       	brne	.+2      	; 0x1196 <__ultoa_invert+0x48>
    1194:	68 94       	set
    1196:	3f 91       	pop	r19
    1198:	2a e0       	ldi	r18, 0x0A	; 10
    119a:	26 9f       	mul	r18, r22
    119c:	11 24       	eor	r1, r1
    119e:	30 19       	sub	r19, r0
    11a0:	30 5d       	subi	r19, 0xD0	; 208
    11a2:	31 93       	st	Z+, r19
    11a4:	de f6       	brtc	.-74     	; 0x115c <__ultoa_invert+0xe>
    11a6:	cf 01       	movw	r24, r30
    11a8:	08 95       	ret
    11aa:	46 2f       	mov	r20, r22
    11ac:	47 70       	andi	r20, 0x07	; 7
    11ae:	40 5d       	subi	r20, 0xD0	; 208
    11b0:	41 93       	st	Z+, r20
    11b2:	b3 e0       	ldi	r27, 0x03	; 3
    11b4:	0f d0       	rcall	.+30     	; 0x11d4 <__ultoa_invert+0x86>
    11b6:	c9 f7       	brne	.-14     	; 0x11aa <__ultoa_invert+0x5c>
    11b8:	f6 cf       	rjmp	.-20     	; 0x11a6 <__ultoa_invert+0x58>
    11ba:	46 2f       	mov	r20, r22
    11bc:	4f 70       	andi	r20, 0x0F	; 15
    11be:	40 5d       	subi	r20, 0xD0	; 208
    11c0:	4a 33       	cpi	r20, 0x3A	; 58
    11c2:	18 f0       	brcs	.+6      	; 0x11ca <__ultoa_invert+0x7c>
    11c4:	49 5d       	subi	r20, 0xD9	; 217
    11c6:	31 fd       	sbrc	r19, 1
    11c8:	40 52       	subi	r20, 0x20	; 32
    11ca:	41 93       	st	Z+, r20
    11cc:	02 d0       	rcall	.+4      	; 0x11d2 <__ultoa_invert+0x84>
    11ce:	a9 f7       	brne	.-22     	; 0x11ba <__ultoa_invert+0x6c>
    11d0:	ea cf       	rjmp	.-44     	; 0x11a6 <__ultoa_invert+0x58>
    11d2:	b4 e0       	ldi	r27, 0x04	; 4
    11d4:	a6 95       	lsr	r26
    11d6:	97 95       	ror	r25
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	ba 95       	dec	r27
    11e0:	c9 f7       	brne	.-14     	; 0x11d4 <__ultoa_invert+0x86>
    11e2:	00 97       	sbiw	r24, 0x00	; 0
    11e4:	61 05       	cpc	r22, r1
    11e6:	71 05       	cpc	r23, r1
    11e8:	08 95       	ret
    11ea:	9b 01       	movw	r18, r22
    11ec:	ac 01       	movw	r20, r24
    11ee:	0a 2e       	mov	r0, r26
    11f0:	06 94       	lsr	r0
    11f2:	57 95       	ror	r21
    11f4:	47 95       	ror	r20
    11f6:	37 95       	ror	r19
    11f8:	27 95       	ror	r18
    11fa:	ba 95       	dec	r27
    11fc:	c9 f7       	brne	.-14     	; 0x11f0 <__ultoa_invert+0xa2>
    11fe:	62 0f       	add	r22, r18
    1200:	73 1f       	adc	r23, r19
    1202:	84 1f       	adc	r24, r20
    1204:	95 1f       	adc	r25, r21
    1206:	a0 1d       	adc	r26, r0
    1208:	08 95       	ret

0000120a <_exit>:
    120a:	f8 94       	cli

0000120c <__stop_program>:
    120c:	ff cf       	rjmp	.-2      	; 0x120c <__stop_program>
