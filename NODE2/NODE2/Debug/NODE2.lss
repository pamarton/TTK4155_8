
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000102  00800200  0000167a  0000170e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000167a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800302  00800302  00001810  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001810  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000350  00000000  00000000  0000186c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002614  00000000  00000000  00001bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001087  00000000  00000000  000041d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001982  00000000  00000000  00005257  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000007ec  00000000  00000000  00006bdc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008eb  00000000  00000000  000073c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001498  00000000  00000000  00007cb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002b0  00000000  00000000  0000914b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	ef c0       	rjmp	.+478    	; 0x1f4 <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	50 c4       	rjmp	.+2208   	; 0x93e <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	05 c4       	rjmp	.+2058   	; 0x8b4 <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	ba 04       	cpc	r11, r10
      e6:	0c 05       	cpc	r16, r12
      e8:	0c 05       	cpc	r16, r12
      ea:	0c 05       	cpc	r16, r12
      ec:	0c 05       	cpc	r16, r12
      ee:	0c 05       	cpc	r16, r12
      f0:	0c 05       	cpc	r16, r12
      f2:	0c 05       	cpc	r16, r12
      f4:	ba 04       	cpc	r11, r10
      f6:	0c 05       	cpc	r16, r12
      f8:	0c 05       	cpc	r16, r12
      fa:	0c 05       	cpc	r16, r12
      fc:	0c 05       	cpc	r16, r12
      fe:	0c 05       	cpc	r16, r12
     100:	0c 05       	cpc	r16, r12
     102:	0c 05       	cpc	r16, r12
     104:	bc 04       	cpc	r11, r12
     106:	0c 05       	cpc	r16, r12
     108:	0c 05       	cpc	r16, r12
     10a:	0c 05       	cpc	r16, r12
     10c:	0c 05       	cpc	r16, r12
     10e:	0c 05       	cpc	r16, r12
     110:	0c 05       	cpc	r16, r12
     112:	0c 05       	cpc	r16, r12
     114:	0c 05       	cpc	r16, r12
     116:	0c 05       	cpc	r16, r12
     118:	0c 05       	cpc	r16, r12
     11a:	0c 05       	cpc	r16, r12
     11c:	0c 05       	cpc	r16, r12
     11e:	0c 05       	cpc	r16, r12
     120:	0c 05       	cpc	r16, r12
     122:	0c 05       	cpc	r16, r12
     124:	bc 04       	cpc	r11, r12
     126:	0c 05       	cpc	r16, r12
     128:	0c 05       	cpc	r16, r12
     12a:	0c 05       	cpc	r16, r12
     12c:	0c 05       	cpc	r16, r12
     12e:	0c 05       	cpc	r16, r12
     130:	0c 05       	cpc	r16, r12
     132:	0c 05       	cpc	r16, r12
     134:	0c 05       	cpc	r16, r12
     136:	0c 05       	cpc	r16, r12
     138:	0c 05       	cpc	r16, r12
     13a:	0c 05       	cpc	r16, r12
     13c:	0c 05       	cpc	r16, r12
     13e:	0c 05       	cpc	r16, r12
     140:	0c 05       	cpc	r16, r12
     142:	0c 05       	cpc	r16, r12
     144:	08 05       	cpc	r16, r8
     146:	0c 05       	cpc	r16, r12
     148:	0c 05       	cpc	r16, r12
     14a:	0c 05       	cpc	r16, r12
     14c:	0c 05       	cpc	r16, r12
     14e:	0c 05       	cpc	r16, r12
     150:	0c 05       	cpc	r16, r12
     152:	0c 05       	cpc	r16, r12
     154:	e5 04       	cpc	r14, r5
     156:	0c 05       	cpc	r16, r12
     158:	0c 05       	cpc	r16, r12
     15a:	0c 05       	cpc	r16, r12
     15c:	0c 05       	cpc	r16, r12
     15e:	0c 05       	cpc	r16, r12
     160:	0c 05       	cpc	r16, r12
     162:	0c 05       	cpc	r16, r12
     164:	0c 05       	cpc	r16, r12
     166:	0c 05       	cpc	r16, r12
     168:	0c 05       	cpc	r16, r12
     16a:	0c 05       	cpc	r16, r12
     16c:	0c 05       	cpc	r16, r12
     16e:	0c 05       	cpc	r16, r12
     170:	0c 05       	cpc	r16, r12
     172:	0c 05       	cpc	r16, r12
     174:	d9 04       	cpc	r13, r9
     176:	0c 05       	cpc	r16, r12
     178:	0c 05       	cpc	r16, r12
     17a:	0c 05       	cpc	r16, r12
     17c:	0c 05       	cpc	r16, r12
     17e:	0c 05       	cpc	r16, r12
     180:	0c 05       	cpc	r16, r12
     182:	0c 05       	cpc	r16, r12
     184:	f7 04       	cpc	r15, r7

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ea e7       	ldi	r30, 0x7A	; 122
     19e:	f6 e1       	ldi	r31, 0x16	; 22
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a2 30       	cpi	r26, 0x02	; 2
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	a2 e0       	ldi	r26, 0x02	; 2
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	af 34       	cpi	r26, 0x4F	; 79
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	e6 d2       	rcall	.+1484   	; 0x78e <main>
     1c2:	0c 94 3b 0b 	jmp	0x1676	; 0x1676 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <CAN_message_receive>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
     1c8:	8e e0       	ldi	r24, 0x0E	; 14
     1ca:	93 e0       	ldi	r25, 0x03	; 3
     1cc:	08 95       	ret

000001ce <CAN_construct_message>:
     1ce:	90 93 04 03 	sts	0x0304, r25
     1d2:	80 93 03 03 	sts	0x0303, r24
     1d6:	60 93 05 03 	sts	0x0305, r22
     1da:	66 23       	and	r22, r22
     1dc:	41 f0       	breq	.+16     	; 0x1ee <CAN_construct_message+0x20>
     1de:	86 e0       	ldi	r24, 0x06	; 6
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	fc 01       	movw	r30, r24
     1e4:	11 92       	st	Z+, r1
     1e6:	2e 2f       	mov	r18, r30
     1e8:	28 1b       	sub	r18, r24
     1ea:	26 17       	cp	r18, r22
     1ec:	d8 f3       	brcs	.-10     	; 0x1e4 <CAN_construct_message+0x16>
     1ee:	08 95       	ret

000001f0 <CAN_read>:
     1f0:	9d c0       	rjmp	.+314    	; 0x32c <MCP2515_read>
     1f2:	08 95       	ret

000001f4 <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	8f 93       	push	r24
	receive_flag = 1;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 02 03 	sts	0x0302, r24
}
     206:	8f 91       	pop	r24
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
     212:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     214:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     216:	ea e6       	ldi	r30, 0x6A	; 106
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8e 7f       	andi	r24, 0xFE	; 254
     21e:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     220:	80 81       	ld	r24, Z
     222:	82 60       	ori	r24, 0x02	; 2
     224:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     226:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
	#endif
	sei();
     228:	78 94       	sei
     22a:	08 95       	ret

0000022c <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     22c:	a6 d0       	rcall	.+332    	; 0x37a <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     22e:	68 e0       	ldi	r22, 0x08	; 8
     230:	88 e2       	ldi	r24, 0x28	; 40
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	cc df       	rcall	.-104    	; 0x1ce <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     236:	4f ef       	ldi	r20, 0xFF	; 255
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	64 e6       	ldi	r22, 0x64	; 100
     23c:	80 e6       	ldi	r24, 0x60	; 96
     23e:	84 d0       	rcall	.+264    	; 0x348 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     240:	4f ef       	ldi	r20, 0xFF	; 255
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	64 e6       	ldi	r22, 0x64	; 100
     246:	80 e7       	ldi	r24, 0x70	; 112
     248:	7f d0       	rcall	.+254    	; 0x348 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	8b e2       	ldi	r24, 0x2B	; 43
     252:	7a d0       	rcall	.+244    	; 0x348 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	62 e0       	ldi	r22, 0x02	; 2
     25a:	8b e2       	ldi	r24, 0x2B	; 43
     25c:	75 d0       	rcall	.+234    	; 0x348 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 ee       	ldi	r22, 0xE0	; 224
     264:	8f e0       	ldi	r24, 0x0F	; 15
     266:	70 d0       	rcall	.+224    	; 0x348 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     268:	d4 cf       	rjmp	.-88     	; 0x212 <CAN_interrupt_setup>
     26a:	08 95       	ret

0000026c <CAN_reception_complete>:

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     26c:	03 c0       	rjmp	.+6      	; 0x274 <CAN_reception_complete+0x8>
		printf("CAN_reception_complete is stuck\n");
     26e:	83 e2       	ldi	r24, 0x23	; 35
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	f8 d5       	rcall	.+3056   	; 0xe64 <puts>

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     274:	8c e2       	ldi	r24, 0x2C	; 44
     276:	5a d0       	rcall	.+180    	; 0x32c <MCP2515_read>
     278:	80 fd       	sbrc	r24, 0
     27a:	04 c0       	rjmp	.+8      	; 0x284 <CAN_reception_complete+0x18>
     27c:	8c e2       	ldi	r24, 0x2C	; 44
     27e:	56 d0       	rcall	.+172    	; 0x32c <MCP2515_read>
     280:	81 ff       	sbrs	r24, 1
     282:	f5 cf       	rjmp	.-22     	; 0x26e <CAN_reception_complete+0x2>
		};
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     284:	8c e2       	ldi	r24, 0x2C	; 44
     286:	52 d0       	rcall	.+164    	; 0x32c <MCP2515_read>
     288:	80 ff       	sbrs	r24, 0
     28a:	07 c0       	rjmp	.+14     	; 0x29a <CAN_reception_complete+0x2e>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     28c:	40 e0       	ldi	r20, 0x00	; 0
     28e:	50 e0       	ldi	r21, 0x00	; 0
     290:	61 e0       	ldi	r22, 0x01	; 1
     292:	8c e2       	ldi	r24, 0x2C	; 44
     294:	59 d0       	rcall	.+178    	; 0x348 <MCP2515_bit_modify>
		return 0;
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	08 95       	ret
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     29a:	8c e2       	ldi	r24, 0x2C	; 44
     29c:	47 d0       	rcall	.+142    	; 0x32c <MCP2515_read>
     29e:	81 ff       	sbrs	r24, 1
     2a0:	07 c0       	rjmp	.+14     	; 0x2b0 <CAN_reception_complete+0x44>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	62 e0       	ldi	r22, 0x02	; 2
     2a8:	8c e2       	ldi	r24, 0x2C	; 44
     2aa:	4e d0       	rcall	.+156    	; 0x348 <MCP2515_bit_modify>
		return 1;
     2ac:	81 e0       	ldi	r24, 0x01	; 1
     2ae:	08 95       	ret
	}
	return -1;
     2b0:	8f ef       	ldi	r24, 0xFF	; 255
}
     2b2:	08 95       	ret

000002b4 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     2b4:	1f 93       	push	r17
     2b6:	cf 93       	push	r28
     2b8:	df 93       	push	r29
	if(receive_flag){
     2ba:	80 91 02 03 	lds	r24, 0x0302
     2be:	88 23       	and	r24, r24
     2c0:	61 f1       	breq	.+88     	; 0x31a <CAN_data_receive+0x66>
		receive_flag = 0;
     2c2:	10 92 02 03 	sts	0x0302, r1
		uint8_t n = CAN_reception_complete();
     2c6:	d2 df       	rcall	.-92     	; 0x26c <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     2c8:	c8 2f       	mov	r28, r24
     2ca:	c2 95       	swap	r28
     2cc:	c0 7f       	andi	r28, 0xF0	; 240
     2ce:	82 e6       	ldi	r24, 0x62	; 98
     2d0:	8c 0f       	add	r24, r28
     2d2:	8e df       	rcall	.-228    	; 0x1f0 <CAN_read>
     2d4:	81 e6       	ldi	r24, 0x61	; 97
     2d6:	8c 0f       	add	r24, r28
     2d8:	8b df       	rcall	.-234    	; 0x1f0 <CAN_read>
     2da:	28 e0       	ldi	r18, 0x08	; 8
     2dc:	82 9f       	mul	r24, r18
     2de:	c0 01       	movw	r24, r0
     2e0:	11 24       	eor	r1, r1
     2e2:	90 93 0f 03 	sts	0x030F, r25
     2e6:	80 93 0e 03 	sts	0x030E, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     2ea:	85 e6       	ldi	r24, 0x65	; 101
     2ec:	8c 0f       	add	r24, r28
     2ee:	80 df       	rcall	.-256    	; 0x1f0 <CAN_read>
     2f0:	8f 70       	andi	r24, 0x0F	; 15
     2f2:	80 93 10 03 	sts	0x0310, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     2f6:	88 23       	and	r24, r24
     2f8:	91 f0       	breq	.+36     	; 0x31e <CAN_data_receive+0x6a>
     2fa:	10 e0       	ldi	r17, 0x00	; 0
     2fc:	c0 e1       	ldi	r28, 0x10	; 16
     2fe:	d3 e0       	ldi	r29, 0x03	; 3
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     300:	86 e6       	ldi	r24, 0x66	; 102
     302:	81 0f       	add	r24, r17
     304:	75 df       	rcall	.-278    	; 0x1f0 <CAN_read>
     306:	e1 2f       	mov	r30, r17
     308:	f0 e0       	ldi	r31, 0x00	; 0
     30a:	e2 5f       	subi	r30, 0xF2	; 242
     30c:	fc 4f       	sbci	r31, 0xFC	; 252
     30e:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     310:	1f 5f       	subi	r17, 0xFF	; 255
     312:	88 81       	ld	r24, Y
     314:	18 17       	cp	r17, r24
     316:	a0 f3       	brcs	.-24     	; 0x300 <CAN_data_receive+0x4c>
     318:	04 c0       	rjmp	.+8      	; 0x322 <CAN_data_receive+0x6e>
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	03 c0       	rjmp	.+6      	; 0x324 <CAN_data_receive+0x70>
		}
		#if UART_ENABLE
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	01 c0       	rjmp	.+2      	; 0x324 <CAN_data_receive+0x70>
     322:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     324:	df 91       	pop	r29
     326:	cf 91       	pop	r28
     328:	1f 91       	pop	r17
     32a:	08 95       	ret

0000032c <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     32c:	cf 93       	push	r28
     32e:	c8 2f       	mov	r28, r24
     330:	33 d0       	rcall	.+102    	; 0x398 <SPI_select>
     332:	83 e0       	ldi	r24, 0x03	; 3
     334:	25 d0       	rcall	.+74     	; 0x380 <SPI_send>
     336:	8c 2f       	mov	r24, r28
     338:	23 d0       	rcall	.+70     	; 0x380 <SPI_send>
     33a:	27 d0       	rcall	.+78     	; 0x38a <SPI_receive>
     33c:	c8 2f       	mov	r28, r24
     33e:	2e d0       	rcall	.+92     	; 0x39c <SPI_deselect>
     340:	8c 2f       	mov	r24, r28
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     348:	1f 93       	push	r17
     34a:	cf 93       	push	r28
     34c:	df 93       	push	r29
     34e:	18 2f       	mov	r17, r24
     350:	d6 2f       	mov	r29, r22
     352:	c4 2f       	mov	r28, r20
	SPI_select();
     354:	21 d0       	rcall	.+66     	; 0x398 <SPI_select>
	SPI_send(MCP_BITMOD);
     356:	85 e0       	ldi	r24, 0x05	; 5
     358:	13 d0       	rcall	.+38     	; 0x380 <SPI_send>
	SPI_send(adr);
     35a:	81 2f       	mov	r24, r17
     35c:	11 d0       	rcall	.+34     	; 0x380 <SPI_send>
	SPI_send(mask);
     35e:	8d 2f       	mov	r24, r29
     360:	0f d0       	rcall	.+30     	; 0x380 <SPI_send>
	SPI_send(data);
     362:	8c 2f       	mov	r24, r28
     364:	0d d0       	rcall	.+26     	; 0x380 <SPI_send>
	SPI_deselect();
     366:	1a d0       	rcall	.+52     	; 0x39c <SPI_deselect>
}
     368:	df 91       	pop	r29
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	08 95       	ret

00000370 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     370:	13 d0       	rcall	.+38     	; 0x398 <SPI_select>
	SPI_send(MCP_RESET);
     372:	80 ec       	ldi	r24, 0xC0	; 192
     374:	05 d0       	rcall	.+10     	; 0x380 <SPI_send>
	SPI_deselect();
     376:	12 c0       	rjmp	.+36     	; 0x39c <SPI_deselect>
     378:	08 95       	ret

0000037a <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     37a:	12 d0       	rcall	.+36     	; 0x3a0 <SPI_initialize>
	MCP2515_reset();
     37c:	f9 cf       	rjmp	.-14     	; 0x370 <MCP2515_reset>
     37e:	08 95       	ret

00000380 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     380:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     382:	0d b4       	in	r0, 0x2d	; 45
     384:	07 fe       	sbrs	r0, 7
     386:	fd cf       	rjmp	.-6      	; 0x382 <SPI_send+0x2>

}
     388:	08 95       	ret

0000038a <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	f9 df       	rcall	.-14     	; 0x380 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     38e:	0d b4       	in	r0, 0x2d	; 45
     390:	07 fe       	sbrs	r0, 7
     392:	fd cf       	rjmp	.-6      	; 0x38e <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     394:	8e b5       	in	r24, 0x2e	; 46
}
     396:	08 95       	ret

00000398 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     398:	2f 98       	cbi	0x05, 7	; 5
     39a:	08 95       	ret

0000039c <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     39c:	2f 9a       	sbi	0x05, 7	; 5
     39e:	08 95       	ret

000003a0 <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     3a0:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     3a2:	8c b5       	in	r24, 0x2c	; 44
     3a4:	81 60       	ori	r24, 0x01	; 1
     3a6:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     3a8:	84 b1       	in	r24, 0x04	; 4
     3aa:	86 68       	ori	r24, 0x86	; 134
     3ac:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     3ae:	8c b5       	in	r24, 0x2c	; 44
     3b0:	80 65       	ori	r24, 0x50	; 80
     3b2:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     3b4:	f3 cf       	rjmp	.-26     	; 0x39c <SPI_deselect>
     3b6:	08 95       	ret

000003b8 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     3b8:	e0 ec       	ldi	r30, 0xC0	; 192
     3ba:	f0 e0       	ldi	r31, 0x00	; 0
     3bc:	90 81       	ld	r25, Z
     3be:	95 ff       	sbrs	r25, 5
     3c0:	fd cf       	rjmp	.-6      	; 0x3bc <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     3c2:	80 93 c6 00 	sts	0x00C6, r24
     3c6:	08 95       	ret

000003c8 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     3c8:	e0 ec       	ldi	r30, 0xC0	; 192
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	80 81       	ld	r24, Z
     3ce:	88 23       	and	r24, r24
     3d0:	ec f7       	brge	.-6      	; 0x3cc <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     3d2:	80 91 c6 00 	lds	r24, 0x00C6
}
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	08 95       	ret

000003da <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     3da:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     3de:	87 e6       	ldi	r24, 0x67	; 103
     3e0:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     3e4:	88 e1       	ldi	r24, 0x18	; 24
     3e6:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     3ea:	8e e0       	ldi	r24, 0x0E	; 14
     3ec:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     3f0:	64 ee       	ldi	r22, 0xE4	; 228
     3f2:	71 e0       	ldi	r23, 0x01	; 1
     3f4:	8c ed       	ldi	r24, 0xDC	; 220
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	da c4       	rjmp	.+2484   	; 0xdae <fdevopen>
     3fa:	08 95       	ret

000003fc <IR_init>:
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	80 98       	cbi	0x10, 0	; 16
     402:	ea e7       	ldi	r30, 0x7A	; 122
     404:	f0 e0       	ldi	r31, 0x00	; 0
     406:	80 81       	ld	r24, Z
     408:	87 60       	ori	r24, 0x07	; 7
     40a:	80 83       	st	Z, r24
     40c:	ac e7       	ldi	r26, 0x7C	; 124
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	80 e4       	ldi	r24, 0x40	; 64
     412:	8c 93       	st	X, r24
     414:	8c 91       	ld	r24, X
     416:	8c 93       	st	X, r24
     418:	cb e7       	ldi	r28, 0x7B	; 123
     41a:	d0 e0       	ldi	r29, 0x00	; 0
     41c:	88 81       	ld	r24, Y
     41e:	87 7f       	andi	r24, 0xF7	; 247
     420:	88 83       	st	Y, r24
     422:	80 81       	ld	r24, Z
     424:	80 62       	ori	r24, 0x20	; 32
     426:	80 83       	st	Z, r24
     428:	87 e0       	ldi	r24, 0x07	; 7
     42a:	88 83       	st	Y, r24
     42c:	8c 91       	ld	r24, X
     42e:	80 62       	ori	r24, 0x20	; 32
     430:	8c 93       	st	X, r24
     432:	80 81       	ld	r24, Z
     434:	80 68       	ori	r24, 0x80	; 128
     436:	80 83       	st	Z, r24
     438:	80 81       	ld	r24, Z
     43a:	80 64       	ori	r24, 0x40	; 64
     43c:	80 83       	st	Z, r24
     43e:	df 91       	pop	r29
     440:	cf 91       	pop	r28
     442:	08 95       	ret

00000444 <motor_set_motor_speed>:



int16_t twos_compliment_decode(uint8_t msb, uint8_t lsb){
	return (int16_t)((msb<<8)|lsb);
}
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	00 d0       	rcall	.+0      	; 0x44a <motor_set_motor_speed+0x6>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	90 e5       	ldi	r25, 0x50	; 80
     450:	99 83       	std	Y+1, r25	; 0x01
     452:	1a 82       	std	Y+2, r1	; 0x02
     454:	8b 83       	std	Y+3, r24	; 0x03
     456:	63 e0       	ldi	r22, 0x03	; 3
     458:	70 e0       	ldi	r23, 0x00	; 0
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	4d d2       	rcall	.+1178   	; 0x8fa <TWI_Start_Transceiver_With_Data>
     460:	0f 90       	pop	r0
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	df 91       	pop	r29
     468:	cf 91       	pop	r28
     46a:	08 95       	ret

0000046c <motor_set_direction>:
     46c:	8f 3f       	cpi	r24, 0xFF	; 255
     46e:	41 f0       	breq	.+16     	; 0x480 <motor_set_direction+0x14>
     470:	81 30       	cpi	r24, 0x01	; 1
     472:	59 f4       	brne	.+22     	; 0x48a <motor_set_direction+0x1e>
     474:	e2 e0       	ldi	r30, 0x02	; 2
     476:	f1 e0       	ldi	r31, 0x01	; 1
     478:	80 81       	ld	r24, Z
     47a:	8d 7f       	andi	r24, 0xFD	; 253
     47c:	80 83       	st	Z, r24
     47e:	08 95       	ret
     480:	e2 e0       	ldi	r30, 0x02	; 2
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	80 81       	ld	r24, Z
     486:	82 60       	ori	r24, 0x02	; 2
     488:	80 83       	st	Z, r24
     48a:	08 95       	ret

0000048c <encoder_reset>:
     48c:	e2 e0       	ldi	r30, 0x02	; 2
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	80 81       	ld	r24, Z
     492:	8f 7b       	andi	r24, 0xBF	; 191
     494:	80 83       	st	Z, r24
     496:	8a e6       	ldi	r24, 0x6A	; 106
     498:	8a 95       	dec	r24
     49a:	f1 f7       	brne	.-4      	; 0x498 <encoder_reset+0xc>
     49c:	00 c0       	rjmp	.+0      	; 0x49e <encoder_reset+0x12>
     49e:	80 81       	ld	r24, Z
     4a0:	80 64       	ori	r24, 0x40	; 64
     4a2:	80 83       	st	Z, r24
     4a4:	08 95       	ret

000004a6 <encoder_read>:
     4a6:	e2 e0       	ldi	r30, 0x02	; 2
     4a8:	f1 e0       	ldi	r31, 0x01	; 1
     4aa:	80 81       	ld	r24, Z
     4ac:	88 60       	ori	r24, 0x08	; 8
     4ae:	80 83       	st	Z, r24
     4b0:	80 81       	ld	r24, Z
     4b2:	8f 7d       	andi	r24, 0xDF	; 223
     4b4:	80 83       	st	Z, r24
     4b6:	80 81       	ld	r24, Z
     4b8:	87 7f       	andi	r24, 0xF7	; 247
     4ba:	80 83       	st	Z, r24
     4bc:	8a e6       	ldi	r24, 0x6A	; 106
     4be:	8a 95       	dec	r24
     4c0:	f1 f7       	brne	.-4      	; 0x4be <encoder_read+0x18>
     4c2:	00 c0       	rjmp	.+0      	; 0x4c4 <encoder_read+0x1e>
     4c4:	20 91 06 01 	lds	r18, 0x0106
     4c8:	80 81       	ld	r24, Z
     4ca:	88 60       	ori	r24, 0x08	; 8
     4cc:	80 83       	st	Z, r24
     4ce:	8a e6       	ldi	r24, 0x6A	; 106
     4d0:	8a 95       	dec	r24
     4d2:	f1 f7       	brne	.-4      	; 0x4d0 <encoder_read+0x2a>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <encoder_read+0x30>
     4d6:	80 91 06 01 	lds	r24, 0x0106
     4da:	90 81       	ld	r25, Z
     4dc:	90 62       	ori	r25, 0x20	; 32
     4de:	90 83       	st	Z, r25
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	92 2b       	or	r25, r18
     4e4:	08 95       	ret

000004e6 <motor_goto_end>:


int16_t pos;
int16_t old_pos;

int16_t motor_goto_end(uint8_t motor_speed, int8_t direction){
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	c8 2f       	mov	r28, r24
     4ee:	86 2f       	mov	r24, r22
	motor_set_direction(direction);
     4f0:	bd df       	rcall	.-134    	; 0x46c <motor_set_direction>
	motor_set_motor_speed(motor_speed);
     4f2:	8c 2f       	mov	r24, r28
     4f4:	a7 df       	rcall	.-178    	; 0x444 <motor_set_motor_speed>
	pos = encoder_read();
     4f6:	d7 df       	rcall	.-82     	; 0x4a6 <encoder_read>
     4f8:	90 93 29 03 	sts	0x0329, r25
     4fc:	80 93 28 03 	sts	0x0328, r24
	uint8_t time_counter = 0;
     500:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encoder_val = 0;
	
	while(time_counter < 2/T_UPDATE){
		encoder_val = encoder_read();
     502:	d1 df       	rcall	.-94     	; 0x4a6 <encoder_read>
     504:	ec 01       	movw	r28, r24
		time_counter += timer_check_flag();
     506:	e5 d1       	rcall	.+970    	; 0x8d2 <timer_check_flag>
     508:	18 0f       	add	r17, r24
		if(encoder_val != pos){
     50a:	20 91 28 03 	lds	r18, 0x0328
     50e:	30 91 29 03 	lds	r19, 0x0329
     512:	c2 17       	cp	r28, r18
     514:	d3 07       	cpc	r29, r19
     516:	21 f0       	breq	.+8      	; 0x520 <motor_goto_end+0x3a>
			pos = encoder_val;
     518:	d0 93 29 03 	sts	0x0329, r29
     51c:	c0 93 28 03 	sts	0x0328, r28
	motor_set_motor_speed(motor_speed);
	pos = encoder_read();
	uint8_t time_counter = 0;
	int16_t encoder_val = 0;
	
	while(time_counter < 2/T_UPDATE){
     520:	61 2f       	mov	r22, r17
     522:	70 e0       	ldi	r23, 0x00	; 0
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	29 d3       	rcall	.+1618   	; 0xb7c <__floatsisf>
     52a:	20 e0       	ldi	r18, 0x00	; 0
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	48 ec       	ldi	r20, 0xC8	; 200
     530:	52 e4       	ldi	r21, 0x42	; 66
     532:	ed d2       	rcall	.+1498   	; 0xb0e <__cmpsf2>
     534:	88 23       	and	r24, r24
     536:	2c f3       	brlt	.-54     	; 0x502 <motor_goto_end+0x1c>
		time_counter += timer_check_flag();
		if(encoder_val != pos){
			pos = encoder_val;
		}	
	}
	motor_set_motor_speed(0);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	84 df       	rcall	.-248    	; 0x444 <motor_set_motor_speed>
	return pos;
}
     53c:	80 91 28 03 	lds	r24, 0x0328
     540:	90 91 29 03 	lds	r25, 0x0329
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	1f 91       	pop	r17
     54a:	08 95       	ret

0000054c <motor_calibrate>:
int16_t pos_max;
int16_t vel_max;
int16_t pos_min = 0;
int16_t motor_speed_min;

void motor_calibrate(uint8_t motor_speed){
     54c:	c8 2f       	mov	r28, r24
	//Move sledge all the way to the right.
	motor_goto_end(motor_speed,-MOTOR_POLARITY);
     54e:	6f ef       	ldi	r22, 0xFF	; 255
     550:	ca df       	rcall	.-108    	; 0x4e6 <motor_goto_end>
	encoder_reset();
     552:	9c df       	rcall	.-200    	; 0x48c <encoder_reset>

	pos_max = motor_goto_end(motor_speed,MOTOR_POLARITY);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	8c 2f       	mov	r24, r28
     558:	c6 df       	rcall	.-116    	; 0x4e6 <motor_goto_end>
     55a:	80 93 2a 03 	sts	0x032A, r24
     55e:	90 93 2b 03 	sts	0x032B, r25
	
	//end_pos1 = motor_goto_end(motor_speed,-MOTOR_POLARITY);
	printf("E_min:%i\tE_Max: %i\n",pos_min, pos_max);
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	80 91 1a 03 	lds	r24, 0x031A
     56a:	8f 93       	push	r24
     56c:	80 91 19 03 	lds	r24, 0x0319
     570:	8f 93       	push	r24
     572:	83 e4       	ldi	r24, 0x43	; 67
     574:	92 e0       	ldi	r25, 0x02	; 2
     576:	9f 93       	push	r25
     578:	8f 93       	push	r24
     57a:	63 d4       	rcall	.+2246   	; 0xe42 <printf>
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
	
	
	
	while (1)
	{
		motor_set_motor_speed(0);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	5c df       	rcall	.-328    	; 0x444 <motor_set_motor_speed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     58c:	2f ef       	ldi	r18, 0xFF	; 255
     58e:	89 e6       	ldi	r24, 0x69	; 105
     590:	98 e1       	ldi	r25, 0x18	; 24
     592:	21 50       	subi	r18, 0x01	; 1
     594:	80 40       	sbci	r24, 0x00	; 0
     596:	90 40       	sbci	r25, 0x00	; 0
     598:	e1 f7       	brne	.-8      	; 0x592 <motor_calibrate+0x46>
     59a:	00 c0       	rjmp	.+0      	; 0x59c <motor_calibrate+0x50>
     59c:	00 00       	nop
		_delay_ms(500);
		
		motor_set_direction(1);
     59e:	81 e0       	ldi	r24, 0x01	; 1
     5a0:	65 df       	rcall	.-310    	; 0x46c <motor_set_direction>
		motor_set_motor_speed(65);
     5a2:	81 e4       	ldi	r24, 0x41	; 65
     5a4:	4f df       	rcall	.-354    	; 0x444 <motor_set_motor_speed>
     5a6:	2f ef       	ldi	r18, 0xFF	; 255
     5a8:	89 e6       	ldi	r24, 0x69	; 105
     5aa:	98 e1       	ldi	r25, 0x18	; 24
     5ac:	21 50       	subi	r18, 0x01	; 1
     5ae:	80 40       	sbci	r24, 0x00	; 0
     5b0:	90 40       	sbci	r25, 0x00	; 0
     5b2:	e1 f7       	brne	.-8      	; 0x5ac <motor_calibrate+0x60>
     5b4:	00 c0       	rjmp	.+0      	; 0x5b6 <motor_calibrate+0x6a>
     5b6:	00 00       	nop
		_delay_ms(500);
		
		motor_set_motor_speed(0);
     5b8:	80 e0       	ldi	r24, 0x00	; 0
     5ba:	44 df       	rcall	.-376    	; 0x444 <motor_set_motor_speed>
     5bc:	2f ef       	ldi	r18, 0xFF	; 255
     5be:	89 e6       	ldi	r24, 0x69	; 105
     5c0:	98 e1       	ldi	r25, 0x18	; 24
     5c2:	21 50       	subi	r18, 0x01	; 1
     5c4:	80 40       	sbci	r24, 0x00	; 0
     5c6:	90 40       	sbci	r25, 0x00	; 0
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <motor_calibrate+0x76>
     5ca:	00 c0       	rjmp	.+0      	; 0x5cc <motor_calibrate+0x80>
     5cc:	00 00       	nop
		_delay_ms(500);
		
		motor_set_direction(-1);
     5ce:	8f ef       	ldi	r24, 0xFF	; 255
     5d0:	4d df       	rcall	.-358    	; 0x46c <motor_set_direction>
		motor_set_motor_speed(65);
     5d2:	81 e4       	ldi	r24, 0x41	; 65
     5d4:	37 df       	rcall	.-402    	; 0x444 <motor_set_motor_speed>
     5d6:	2f ef       	ldi	r18, 0xFF	; 255
     5d8:	89 e6       	ldi	r24, 0x69	; 105
     5da:	98 e1       	ldi	r25, 0x18	; 24
     5dc:	21 50       	subi	r18, 0x01	; 1
     5de:	80 40       	sbci	r24, 0x00	; 0
     5e0:	90 40       	sbci	r25, 0x00	; 0
     5e2:	e1 f7       	brne	.-8      	; 0x5dc <motor_calibrate+0x90>
     5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <motor_calibrate+0x9a>
     5e6:	00 00       	nop
     5e8:	cf cf       	rjmp	.-98     	; 0x588 <motor_calibrate+0x3c>

000005ea <motor_init>:
#include "../../common_library/uart.h"

void motor_init(void){
	
	// Make all relevant motor pins output.
	MOTOR_DDR |= (1<<OEN)|(1<<RSTN)|(1<<SEL)|(1<<EN)|(1<<DIR);
     5ea:	e1 e0       	ldi	r30, 0x01	; 1
     5ec:	f1 e0       	ldi	r31, 0x01	; 1
     5ee:	80 81       	ld	r24, Z
     5f0:	8a 67       	ori	r24, 0x7A	; 122
     5f2:	80 83       	st	Z, r24
	
	// Make all encoder pins input.
	ENCODER_DDR = 0x00;
     5f4:	10 92 07 01 	sts	0x0107, r1
	
	// Enable motor.
	MOTOR_PORT |= (1<<EN);
     5f8:	e2 e0       	ldi	r30, 0x02	; 2
     5fa:	f1 e0       	ldi	r31, 0x01	; 1
     5fc:	80 81       	ld	r24, Z
     5fe:	80 61       	ori	r24, 0x10	; 16
     600:	80 83       	st	Z, r24
	
	encoder_reset();
     602:	44 df       	rcall	.-376    	; 0x48c <encoder_reset>
	
	motor_calibrate(100);
     604:	84 e6       	ldi	r24, 0x64	; 100
     606:	a2 df       	rcall	.-188    	; 0x54c <motor_calibrate>

00000608 <pi_controller_init>:
float u;
float vel_ref;



void pi_controller_init(float Ki_init, float Kp_init, float T_Update_init){
     608:	ef 92       	push	r14
     60a:	ff 92       	push	r15
     60c:	0f 93       	push	r16
     60e:	1f 93       	push	r17
	errorSum = 0.0;
     610:	10 92 34 03 	sts	0x0334, r1
     614:	10 92 35 03 	sts	0x0335, r1
     618:	10 92 36 03 	sts	0x0336, r1
     61c:	10 92 37 03 	sts	0x0337, r1
	vel_ref = 0.0;
     620:	10 92 38 03 	sts	0x0338, r1
     624:	10 92 39 03 	sts	0x0339, r1
     628:	10 92 3a 03 	sts	0x033A, r1
     62c:	10 92 3b 03 	sts	0x033B, r1
	u = 0.0;
     630:	10 92 40 03 	sts	0x0340, r1
     634:	10 92 41 03 	sts	0x0341, r1
     638:	10 92 42 03 	sts	0x0342, r1
     63c:	10 92 43 03 	sts	0x0343, r1
	Ki = Ki_init;
     640:	60 93 2c 03 	sts	0x032C, r22
     644:	70 93 2d 03 	sts	0x032D, r23
     648:	80 93 2e 03 	sts	0x032E, r24
     64c:	90 93 2f 03 	sts	0x032F, r25
	Kp = Kp_init;
     650:	20 93 3c 03 	sts	0x033C, r18
     654:	30 93 3d 03 	sts	0x033D, r19
     658:	40 93 3e 03 	sts	0x033E, r20
     65c:	50 93 3f 03 	sts	0x033F, r21
	initialize_timer(T_Update_init);
     660:	c8 01       	movw	r24, r16
     662:	b7 01       	movw	r22, r14
     664:	01 d1       	rcall	.+514    	; 0x868 <initialize_timer>
	motor_init();
     666:	c1 df       	rcall	.-126    	; 0x5ea <motor_init>
}
     668:	1f 91       	pop	r17
     66a:	0f 91       	pop	r16
     66c:	ff 90       	pop	r15
     66e:	ef 90       	pop	r14
     670:	08 95       	ret

00000672 <pi_controller_update>:

void pi_controller_update(float vel_ref){
     672:	cf 92       	push	r12
     674:	df 92       	push	r13
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	6b 01       	movw	r12, r22
     67c:	7c 01       	movw	r14, r24
	
	//vel_ref = vel_ref_in;
	if(timer_check_flag()){
     67e:	29 d1       	rcall	.+594    	; 0x8d2 <timer_check_flag>
     680:	88 23       	and	r24, r24
     682:	c1 f1       	breq	.+112    	; 0x6f4 <pi_controller_update+0x82>
		float vel_meas;
		//printf("Vel_ref: %i\n",vel_ref);
		//printf("Vel_meas: %i\n",(int16_t)(motor_get_velocity()));
		float error = vel_ref - vel_meas;
     684:	20 e0       	ldi	r18, 0x00	; 0
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	a9 01       	movw	r20, r18
     68a:	c7 01       	movw	r24, r14
     68c:	b6 01       	movw	r22, r12
     68e:	da d1       	rcall	.+948    	; 0xa44 <__subsf3>
		//errorSum += motor_speed_error;
		u = Kp*error + Ki*errorSum*T_Update;
     690:	20 91 3c 03 	lds	r18, 0x033C
     694:	30 91 3d 03 	lds	r19, 0x033D
     698:	40 91 3e 03 	lds	r20, 0x033E
     69c:	50 91 3f 03 	lds	r21, 0x033F
     6a0:	1d d3       	rcall	.+1594   	; 0xcdc <__mulsf3>
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
     6a6:	20 91 34 03 	lds	r18, 0x0334
     6aa:	30 91 35 03 	lds	r19, 0x0335
     6ae:	40 91 36 03 	lds	r20, 0x0336
     6b2:	50 91 37 03 	lds	r21, 0x0337
     6b6:	60 91 2c 03 	lds	r22, 0x032C
     6ba:	70 91 2d 03 	lds	r23, 0x032D
     6be:	80 91 2e 03 	lds	r24, 0x032E
     6c2:	90 91 2f 03 	lds	r25, 0x032F
     6c6:	0a d3       	rcall	.+1556   	; 0xcdc <__mulsf3>
     6c8:	20 91 06 02 	lds	r18, 0x0206
     6cc:	30 91 07 02 	lds	r19, 0x0207
     6d0:	40 91 08 02 	lds	r20, 0x0208
     6d4:	50 91 09 02 	lds	r21, 0x0209
     6d8:	01 d3       	rcall	.+1538   	; 0xcdc <__mulsf3>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	b1 d1       	rcall	.+866    	; 0xa46 <__addsf3>
     6e4:	60 93 40 03 	sts	0x0340, r22
     6e8:	70 93 41 03 	sts	0x0341, r23
     6ec:	80 93 42 03 	sts	0x0342, r24
     6f0:	90 93 43 03 	sts	0x0343, r25
			//motor_set_direction(1);
		}else{
			//motor_set_direction(0);
		}
	}
	motor_set_motor_speed((int16_t)u);
     6f4:	60 91 40 03 	lds	r22, 0x0340
     6f8:	70 91 41 03 	lds	r23, 0x0341
     6fc:	80 91 42 03 	lds	r24, 0x0342
     700:	90 91 43 03 	lds	r25, 0x0343
     704:	08 d2       	rcall	.+1040   	; 0xb16 <__fixsfsi>
     706:	86 2f       	mov	r24, r22
     708:	9d de       	rcall	.-710    	; 0x444 <motor_set_motor_speed>
}
     70a:	ff 90       	pop	r15
     70c:	ef 90       	pop	r14
     70e:	df 90       	pop	r13
     710:	cf 90       	pop	r12
     712:	08 95       	ret

00000714 <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(PWM_PERIOD);
     714:	60 e0       	ldi	r22, 0x00	; 0
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	80 ea       	ldi	r24, 0xA0	; 160
     71a:	91 e4       	ldi	r25, 0x41	; 65
     71c:	87 d0       	rcall	.+270    	; 0x82c <pwm_init>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
			pwm_set_pulse_width(pulse_width);
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	70 e0       	ldi	r23, 0x00	; 0
     722:	80 ec       	ldi	r24, 0xC0	; 192
     724:	9f e3       	ldi	r25, 0x3F	; 63
     726:	6c c0       	rjmp	.+216    	; 0x800 <pwm_set_pulse_width>
     728:	08 95       	ret

0000072a <init_all>:
		
	}
    return 0;
}

void init_all(void){
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	0f 93       	push	r16
     730:	1f 93       	push	r17
	
	cli();
     732:	f8 94       	cli
	init_UART();
     734:	52 de       	rcall	.-860    	; 0x3da <init_UART>
	
	CAN_initialize();
     736:	7a dd       	rcall	.-1292   	; 0x22c <CAN_initialize>
	printf("CAN initialized\n");
     738:	8f e7       	ldi	r24, 0x7F	; 127
     73a:	92 e0       	ldi	r25, 0x02	; 2
     73c:	93 d3       	rcall	.+1830   	; 0xe64 <puts>
	TWI_Master_Initialise();
     73e:	d3 d0       	rcall	.+422    	; 0x8e6 <TWI_Master_Initialise>
	printf("TWI initialized\n");
     740:	8f e8       	ldi	r24, 0x8F	; 143
     742:	92 e0       	ldi	r25, 0x02	; 2
     744:	8f d3       	rcall	.+1822   	; 0xe64 <puts>
	//Motor is being initialized by PI-Controller.
	//motor_init();
	//printf("Motor initialized\n");
	servo_init();
     746:	e6 df       	rcall	.-52     	; 0x714 <servo_init>
	printf("Servo initialized\n");
     748:	8f e9       	ldi	r24, 0x9F	; 159
     74a:	92 e0       	ldi	r25, 0x02	; 2
     74c:	8b d3       	rcall	.+1814   	; 0xe64 <puts>
	IR_init();
     74e:	56 de       	rcall	.-852    	; 0x3fc <IR_init>
	printf("IR initialized\n");
     750:	81 eb       	ldi	r24, 0xB1	; 177
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	87 d3       	rcall	.+1806   	; 0xe64 <puts>
	//printf("solenoid\n");
	solenoid_init();
     756:	86 d0       	rcall	.+268    	; 0x864 <solenoid_init>
	printf("Solenoid initialized\n");
     758:	80 ec       	ldi	r24, 0xC0	; 192
     75a:	92 e0       	ldi	r25, 0x02	; 2
     75c:	83 d3       	rcall	.+1798   	; 0xe64 <puts>
	pi_controller_init(0.1,1,T_UPDATE);
     75e:	1a e0       	ldi	r17, 0x0A	; 10
     760:	e1 2e       	mov	r14, r17
     762:	17 ed       	ldi	r17, 0xD7	; 215
     764:	f1 2e       	mov	r15, r17
     766:	03 ea       	ldi	r16, 0xA3	; 163
     768:	1c e3       	ldi	r17, 0x3C	; 60
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e8       	ldi	r20, 0x80	; 128
     770:	5f e3       	ldi	r21, 0x3F	; 63
     772:	6d ec       	ldi	r22, 0xCD	; 205
     774:	7c ec       	ldi	r23, 0xCC	; 204
     776:	8c ec       	ldi	r24, 0xCC	; 204
     778:	9d e3       	ldi	r25, 0x3D	; 61
     77a:	46 df       	rcall	.-372    	; 0x608 <pi_controller_init>
	printf("PI_Controller initialized.\n");
     77c:	85 ed       	ldi	r24, 0xD5	; 213
     77e:	92 e0       	ldi	r25, 0x02	; 2
     780:	71 d3       	rcall	.+1762   	; 0xe64 <puts>
	//pi_controller_init(5,1,T_UPDATE);
	#if UART_ENABLE
		init_UART();
		printf("Program initialized\n");
	#endif
	sei();
     782:	78 94       	sei
}
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	ff 90       	pop	r15
     78a:	ef 90       	pop	r14
     78c:	08 95       	ret

0000078e <main>:
#include	"pi_controller.h"
#include	"solenoid.h"

int main(void){
	
	init_all();
     78e:	cd df       	rcall	.-102    	; 0x72a <init_all>

	int8_t motor_speed = 0;
	int8_t direction = 0.1;
     790:	00 e0       	ldi	r16, 0x00	; 0

int main(void){
	
	init_all();

	int8_t motor_speed = 0;
     792:	10 e0       	ldi	r17, 0x00	; 0
			}else{
				motor_speed = 0;
				direction = 0;
			}

			printf("motor_speed: %i\n", motor_speed);
     794:	c0 ef       	ldi	r28, 0xF0	; 240
     796:	d2 e0       	ldi	r29, 0x02	; 2
			//printf("CAN value = %i", CAN_message_receive()->data[0]);
			motor_speed =  (int8_t)  CAN_message_receive()->data[0];
			
			
			if(motor_speed < 0 ){
				direction = 1;
     798:	dd 24       	eor	r13, r13
     79a:	d3 94       	inc	r13
			}else if(motor_speed > 0){
				direction = -1;
				motor_speed = direction * motor_speed;
			}else{
				motor_speed = 0;
				direction = 0;
     79c:	e1 2c       	mov	r14, r1
			
			if(motor_speed < 0 ){
				direction = 1;
				motor_speed = direction * motor_speed;
			}else if(motor_speed > 0){
				direction = -1;
     79e:	ff 24       	eor	r15, r15
     7a0:	fa 94       	dec	r15

	int8_t motor_speed = 0;
	int8_t direction = 0.1;

	while(1){
		if(CAN_data_receive()){
     7a2:	88 dd       	rcall	.-1264   	; 0x2b4 <CAN_data_receive>
     7a4:	88 23       	and	r24, r24
     7a6:	e1 f0       	breq	.+56     	; 0x7e0 <main+0x52>
			//printf("CAN value = %i", CAN_message_receive()->data[0]);
			motor_speed =  (int8_t)  CAN_message_receive()->data[0];
     7a8:	0f dd       	rcall	.-1506   	; 0x1c8 <CAN_message_receive>
     7aa:	fc 01       	movw	r30, r24
     7ac:	83 81       	ldd	r24, Z+3	; 0x03
     7ae:	18 2f       	mov	r17, r24
			
			
			if(motor_speed < 0 ){
     7b0:	88 23       	and	r24, r24
     7b2:	2c f0       	brlt	.+10     	; 0x7be <main+0x30>
				direction = 1;
				motor_speed = direction * motor_speed;
			}else if(motor_speed > 0){
     7b4:	18 16       	cp	r1, r24
     7b6:	2c f4       	brge	.+10     	; 0x7c2 <main+0x34>
				direction = -1;
				motor_speed = direction * motor_speed;
     7b8:	11 95       	neg	r17
			
			if(motor_speed < 0 ){
				direction = 1;
				motor_speed = direction * motor_speed;
			}else if(motor_speed > 0){
				direction = -1;
     7ba:	0f 2d       	mov	r16, r15
     7bc:	04 c0       	rjmp	.+8      	; 0x7c6 <main+0x38>
			//printf("CAN value = %i", CAN_message_receive()->data[0]);
			motor_speed =  (int8_t)  CAN_message_receive()->data[0];
			
			
			if(motor_speed < 0 ){
				direction = 1;
     7be:	0d 2d       	mov	r16, r13
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <main+0x38>
			}else if(motor_speed > 0){
				direction = -1;
				motor_speed = direction * motor_speed;
			}else{
				motor_speed = 0;
				direction = 0;
     7c2:	0e 2d       	mov	r16, r14
				motor_speed = direction * motor_speed;
			}else if(motor_speed > 0){
				direction = -1;
				motor_speed = direction * motor_speed;
			}else{
				motor_speed = 0;
     7c4:	1e 2d       	mov	r17, r14
				direction = 0;
			}

			printf("motor_speed: %i\n", motor_speed);
     7c6:	81 2f       	mov	r24, r17
     7c8:	99 27       	eor	r25, r25
     7ca:	87 fd       	sbrc	r24, 7
     7cc:	90 95       	com	r25
     7ce:	9f 93       	push	r25
     7d0:	1f 93       	push	r17
     7d2:	df 93       	push	r29
     7d4:	cf 93       	push	r28
     7d6:	35 d3       	rcall	.+1642   	; 0xe42 <printf>
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	0f 90       	pop	r0
     7de:	0f 90       	pop	r0
		//printf("IR 	%i\n", ADCH);
		//encoder_read();
		
		double smotor_speed = 0.2;
		
		pi_controller_update(smotor_speed * motor_speed);
     7e0:	61 2f       	mov	r22, r17
     7e2:	77 27       	eor	r23, r23
     7e4:	67 fd       	sbrc	r22, 7
     7e6:	70 95       	com	r23
     7e8:	87 2f       	mov	r24, r23
     7ea:	97 2f       	mov	r25, r23
     7ec:	c7 d1       	rcall	.+910    	; 0xb7c <__floatsisf>
     7ee:	2d ec       	ldi	r18, 0xCD	; 205
     7f0:	3c ec       	ldi	r19, 0xCC	; 204
     7f2:	4c e4       	ldi	r20, 0x4C	; 76
     7f4:	5e e3       	ldi	r21, 0x3E	; 62
     7f6:	72 d2       	rcall	.+1252   	; 0xcdc <__mulsf3>
     7f8:	3c df       	rcall	.-392    	; 0x672 <pi_controller_update>
		motor_set_direction(direction);
     7fa:	80 2f       	mov	r24, r16
     7fc:	37 de       	rcall	.-914    	; 0x46c <motor_set_direction>
		
	}
     7fe:	d1 cf       	rjmp	.-94     	; 0x7a2 <main+0x14>

00000800 <pwm_set_pulse_width>:
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	PWM_OCRnA = (int)(SCALAR_IN_MS * val);
     800:	20 e0       	ldi	r18, 0x00	; 0
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	4a e7       	ldi	r20, 0x7A	; 122
     806:	51 e4       	ldi	r21, 0x41	; 65
     808:	69 d2       	rcall	.+1234   	; 0xcdc <__mulsf3>
     80a:	85 d1       	rcall	.+778    	; 0xb16 <__fixsfsi>
     80c:	70 93 99 00 	sts	0x0099, r23
     810:	60 93 98 00 	sts	0x0098, r22
     814:	08 95       	ret

00000816 <pwm_set_period>:
}

void pwm_set_period(double period){
	PWM_ICRn = (int)(SCALAR_IN_MS * period);
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4a e7       	ldi	r20, 0x7A	; 122
     81c:	51 e4       	ldi	r21, 0x41	; 65
     81e:	5e d2       	rcall	.+1212   	; 0xcdc <__mulsf3>
     820:	7a d1       	rcall	.+756    	; 0xb16 <__fixsfsi>
     822:	70 93 97 00 	sts	0x0097, r23
     826:	60 93 96 00 	sts	0x0096, r22
     82a:	08 95       	ret

0000082c <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	PWM_DDR |= (1 << PWM_PIN);
     82c:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	PWM_TCCRnA &= ~(1<<WGM30);
     82e:	e0 e9       	ldi	r30, 0x90	; 144
     830:	f0 e0       	ldi	r31, 0x00	; 0
     832:	20 81       	ld	r18, Z
     834:	2e 7f       	andi	r18, 0xFE	; 254
     836:	20 83       	st	Z, r18
	PWM_TCCRnA |= (1<<WGM31);
     838:	20 81       	ld	r18, Z
     83a:	22 60       	ori	r18, 0x02	; 2
     83c:	20 83       	st	Z, r18
	PWM_TCCRnB |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
     83e:	a1 e9       	ldi	r26, 0x91	; 145
     840:	b0 e0       	ldi	r27, 0x00	; 0
     842:	2c 91       	ld	r18, X
     844:	28 61       	ori	r18, 0x18	; 24
     846:	2c 93       	st	X, r18
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	PWM_TCCRnA |= (1<<COM3A1);
     848:	20 81       	ld	r18, Z
     84a:	20 68       	ori	r18, 0x80	; 128
     84c:	20 83       	st	Z, r18
	PWM_TCCRnA &= ~(1<<COM3A0);
     84e:	20 81       	ld	r18, Z
     850:	2f 7b       	andi	r18, 0xBF	; 191
     852:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	PWM_TCCRnB |= (1<<CS32) | (1<<CS30);
     854:	2c 91       	ld	r18, X
     856:	25 60       	ori	r18, 0x05	; 5
     858:	2c 93       	st	X, r18
	PWM_TCCRnB &= ~(1<<CS31);
     85a:	2c 91       	ld	r18, X
     85c:	2d 7f       	andi	r18, 0xFD	; 253
     85e:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
     860:	da cf       	rjmp	.-76     	; 0x816 <pwm_set_period>
     862:	08 95       	ret

00000864 <solenoid_init>:

#include "solenoid.h"


void solenoid_init(void){
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     864:	27 9a       	sbi	0x04, 7	; 4
     866:	08 95       	ret

00000868 <initialize_timer>:
uint8_t update_flag;

void initialize_timer(float T_Update){
	
	//Enable interrupt. When timer is the same as OCR4A it sends an interrupt.
	TIMSK4 |= (1<<OCIE4A);
     868:	e2 e7       	ldi	r30, 0x72	; 114
     86a:	f0 e0       	ldi	r31, 0x00	; 0
     86c:	20 81       	ld	r18, Z
     86e:	22 60       	ori	r18, 0x02	; 2
     870:	20 83       	st	Z, r18
	
	// Reset timer.
	TCNT4 = 0x0000;
     872:	10 92 a5 00 	sts	0x00A5, r1
     876:	10 92 a4 00 	sts	0x00A4, r1
	
	// Use CTC mode.
	TCCR4B |= (1<<WGM42);
     87a:	e1 ea       	ldi	r30, 0xA1	; 161
     87c:	f0 e0       	ldi	r31, 0x00	; 0
     87e:	20 81       	ld	r18, Z
     880:	28 60       	ori	r18, 0x08	; 8
     882:	20 83       	st	Z, r18
	TCCR4B &= ~(1<<WGM43);
     884:	20 81       	ld	r18, Z
     886:	2f 7e       	andi	r18, 0xEF	; 239
     888:	20 83       	st	Z, r18
	#elif TIMER_PRESCALER == 64
	TCCR4B |= (1<<CS41)|(1<<CS40);
	#elif TIMER_PRESCALER == 256
	TCCR4B |= (1<<CS42);
	#elif TIMER_PRESCALER == 1024
	TCCR4B |= (1<<CS42)|(1<<CS40);
     88a:	20 81       	ld	r18, Z
     88c:	25 60       	ori	r18, 0x05	; 5
     88e:	20 83       	st	Z, r18
	#endif
	
	
	
	// Set counter limit.
	OCR4A = (F_CPU/(TIMER_PRESCALER))*T_Update - 1;
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	34 e2       	ldi	r19, 0x24	; 36
     894:	44 e7       	ldi	r20, 0x74	; 116
     896:	56 e4       	ldi	r21, 0x46	; 70
     898:	21 d2       	rcall	.+1090   	; 0xcdc <__mulsf3>
     89a:	20 e0       	ldi	r18, 0x00	; 0
     89c:	30 e0       	ldi	r19, 0x00	; 0
     89e:	40 e8       	ldi	r20, 0x80	; 128
     8a0:	5f e3       	ldi	r21, 0x3F	; 63
     8a2:	d0 d0       	rcall	.+416    	; 0xa44 <__subsf3>
     8a4:	3d d1       	rcall	.+634    	; 0xb20 <__fixunssfsi>
     8a6:	70 93 a9 00 	sts	0x00A9, r23
     8aa:	60 93 a8 00 	sts	0x00A8, r22
	update_flag = 0;
     8ae:	10 92 44 03 	sts	0x0344, r1
     8b2:	08 95       	ret

000008b4 <__vector_42>:
}

ISR(TIMER4_COMPA_vect){//interrupt when Timer_0 is done, resets itself
     8b4:	1f 92       	push	r1
     8b6:	0f 92       	push	r0
     8b8:	0f b6       	in	r0, 0x3f	; 63
     8ba:	0f 92       	push	r0
     8bc:	11 24       	eor	r1, r1
     8be:	8f 93       	push	r24
	update_flag = 1;
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	80 93 44 03 	sts	0x0344, r24
	//printf("INT");
	//TIFR4 &= ~(1<<OCF1A);
}
     8c6:	8f 91       	pop	r24
     8c8:	0f 90       	pop	r0
     8ca:	0f be       	out	0x3f, r0	; 63
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <timer_check_flag>:

uint8_t timer_check_flag(void){
	if (update_flag)
     8d2:	80 91 44 03 	lds	r24, 0x0344
     8d6:	88 23       	and	r24, r24
     8d8:	21 f0       	breq	.+8      	; 0x8e2 <timer_check_flag+0x10>
	{
		update_flag = 0;
     8da:	10 92 44 03 	sts	0x0344, r1
		return 1;
     8de:	81 e0       	ldi	r24, 0x01	; 1
     8e0:	08 95       	ret
	}
	return 0;
     8e2:	80 e0       	ldi	r24, 0x00	; 0
}
     8e4:	08 95       	ret

000008e6 <TWI_Master_Initialise>:
     8e6:	8c e0       	ldi	r24, 0x0C	; 12
     8e8:	80 93 b8 00 	sts	0x00B8, r24
     8ec:	8f ef       	ldi	r24, 0xFF	; 255
     8ee:	80 93 bb 00 	sts	0x00BB, r24
     8f2:	84 e0       	ldi	r24, 0x04	; 4
     8f4:	80 93 bc 00 	sts	0x00BC, r24
     8f8:	08 95       	ret

000008fa <TWI_Start_Transceiver_With_Data>:
     8fa:	ec eb       	ldi	r30, 0xBC	; 188
     8fc:	f0 e0       	ldi	r31, 0x00	; 0
     8fe:	20 81       	ld	r18, Z
     900:	20 fd       	sbrc	r18, 0
     902:	fd cf       	rjmp	.-6      	; 0x8fe <TWI_Start_Transceiver_With_Data+0x4>
     904:	60 93 1d 03 	sts	0x031D, r22
     908:	fc 01       	movw	r30, r24
     90a:	20 81       	ld	r18, Z
     90c:	20 93 1e 03 	sts	0x031E, r18
     910:	20 fd       	sbrc	r18, 0
     912:	0c c0       	rjmp	.+24     	; 0x92c <TWI_Start_Transceiver_With_Data+0x32>
     914:	62 30       	cpi	r22, 0x02	; 2
     916:	50 f0       	brcs	.+20     	; 0x92c <TWI_Start_Transceiver_With_Data+0x32>
     918:	dc 01       	movw	r26, r24
     91a:	11 96       	adiw	r26, 0x01	; 1
     91c:	ef e1       	ldi	r30, 0x1F	; 31
     91e:	f3 e0       	ldi	r31, 0x03	; 3
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	9d 91       	ld	r25, X+
     924:	91 93       	st	Z+, r25
     926:	8f 5f       	subi	r24, 0xFF	; 255
     928:	86 13       	cpse	r24, r22
     92a:	fb cf       	rjmp	.-10     	; 0x922 <TWI_Start_Transceiver_With_Data+0x28>
     92c:	10 92 1c 03 	sts	0x031C, r1
     930:	88 ef       	ldi	r24, 0xF8	; 248
     932:	80 93 0a 02 	sts	0x020A, r24
     936:	85 ea       	ldi	r24, 0xA5	; 165
     938:	80 93 bc 00 	sts	0x00BC, r24
     93c:	08 95       	ret

0000093e <__vector_39>:
     93e:	1f 92       	push	r1
     940:	0f 92       	push	r0
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	0f 92       	push	r0
     946:	11 24       	eor	r1, r1
     948:	0b b6       	in	r0, 0x3b	; 59
     94a:	0f 92       	push	r0
     94c:	2f 93       	push	r18
     94e:	3f 93       	push	r19
     950:	8f 93       	push	r24
     952:	9f 93       	push	r25
     954:	af 93       	push	r26
     956:	bf 93       	push	r27
     958:	ef 93       	push	r30
     95a:	ff 93       	push	r31
     95c:	80 91 b9 00 	lds	r24, 0x00B9
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	fc 01       	movw	r30, r24
     964:	38 97       	sbiw	r30, 0x08	; 8
     966:	e1 35       	cpi	r30, 0x51	; 81
     968:	f1 05       	cpc	r31, r1
     96a:	08 f0       	brcs	.+2      	; 0x96e <__vector_39+0x30>
     96c:	55 c0       	rjmp	.+170    	; 0xa18 <__vector_39+0xda>
     96e:	ee 58       	subi	r30, 0x8E	; 142
     970:	ff 4f       	sbci	r31, 0xFF	; 255
     972:	17 c2       	rjmp	.+1070   	; 0xda2 <__tablejump2__>
     974:	10 92 1b 03 	sts	0x031B, r1
     978:	e0 91 1b 03 	lds	r30, 0x031B
     97c:	80 91 1d 03 	lds	r24, 0x031D
     980:	e8 17       	cp	r30, r24
     982:	70 f4       	brcc	.+28     	; 0x9a0 <__vector_39+0x62>
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	8e 0f       	add	r24, r30
     988:	80 93 1b 03 	sts	0x031B, r24
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	e2 5e       	subi	r30, 0xE2	; 226
     990:	fc 4f       	sbci	r31, 0xFC	; 252
     992:	80 81       	ld	r24, Z
     994:	80 93 bb 00 	sts	0x00BB, r24
     998:	85 e8       	ldi	r24, 0x85	; 133
     99a:	80 93 bc 00 	sts	0x00BC, r24
     99e:	43 c0       	rjmp	.+134    	; 0xa26 <__vector_39+0xe8>
     9a0:	80 91 1c 03 	lds	r24, 0x031C
     9a4:	81 60       	ori	r24, 0x01	; 1
     9a6:	80 93 1c 03 	sts	0x031C, r24
     9aa:	84 e9       	ldi	r24, 0x94	; 148
     9ac:	80 93 bc 00 	sts	0x00BC, r24
     9b0:	3a c0       	rjmp	.+116    	; 0xa26 <__vector_39+0xe8>
     9b2:	e0 91 1b 03 	lds	r30, 0x031B
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	8e 0f       	add	r24, r30
     9ba:	80 93 1b 03 	sts	0x031B, r24
     9be:	80 91 bb 00 	lds	r24, 0x00BB
     9c2:	f0 e0       	ldi	r31, 0x00	; 0
     9c4:	e2 5e       	subi	r30, 0xE2	; 226
     9c6:	fc 4f       	sbci	r31, 0xFC	; 252
     9c8:	80 83       	st	Z, r24
     9ca:	20 91 1b 03 	lds	r18, 0x031B
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	80 91 1d 03 	lds	r24, 0x031D
     9d4:	90 e0       	ldi	r25, 0x00	; 0
     9d6:	01 97       	sbiw	r24, 0x01	; 1
     9d8:	28 17       	cp	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	24 f4       	brge	.+8      	; 0x9e6 <__vector_39+0xa8>
     9de:	85 ec       	ldi	r24, 0xC5	; 197
     9e0:	80 93 bc 00 	sts	0x00BC, r24
     9e4:	20 c0       	rjmp	.+64     	; 0xa26 <__vector_39+0xe8>
     9e6:	85 e8       	ldi	r24, 0x85	; 133
     9e8:	80 93 bc 00 	sts	0x00BC, r24
     9ec:	1c c0       	rjmp	.+56     	; 0xa26 <__vector_39+0xe8>
     9ee:	80 91 bb 00 	lds	r24, 0x00BB
     9f2:	e0 91 1b 03 	lds	r30, 0x031B
     9f6:	f0 e0       	ldi	r31, 0x00	; 0
     9f8:	e2 5e       	subi	r30, 0xE2	; 226
     9fa:	fc 4f       	sbci	r31, 0xFC	; 252
     9fc:	80 83       	st	Z, r24
     9fe:	80 91 1c 03 	lds	r24, 0x031C
     a02:	81 60       	ori	r24, 0x01	; 1
     a04:	80 93 1c 03 	sts	0x031C, r24
     a08:	84 e9       	ldi	r24, 0x94	; 148
     a0a:	80 93 bc 00 	sts	0x00BC, r24
     a0e:	0b c0       	rjmp	.+22     	; 0xa26 <__vector_39+0xe8>
     a10:	85 ea       	ldi	r24, 0xA5	; 165
     a12:	80 93 bc 00 	sts	0x00BC, r24
     a16:	07 c0       	rjmp	.+14     	; 0xa26 <__vector_39+0xe8>
     a18:	80 91 b9 00 	lds	r24, 0x00B9
     a1c:	80 93 0a 02 	sts	0x020A, r24
     a20:	84 e0       	ldi	r24, 0x04	; 4
     a22:	80 93 bc 00 	sts	0x00BC, r24
     a26:	ff 91       	pop	r31
     a28:	ef 91       	pop	r30
     a2a:	bf 91       	pop	r27
     a2c:	af 91       	pop	r26
     a2e:	9f 91       	pop	r25
     a30:	8f 91       	pop	r24
     a32:	3f 91       	pop	r19
     a34:	2f 91       	pop	r18
     a36:	0f 90       	pop	r0
     a38:	0b be       	out	0x3b, r0	; 59
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__subsf3>:
     a44:	50 58       	subi	r21, 0x80	; 128

00000a46 <__addsf3>:
     a46:	bb 27       	eor	r27, r27
     a48:	aa 27       	eor	r26, r26
     a4a:	0e d0       	rcall	.+28     	; 0xa68 <__addsf3x>
     a4c:	0d c1       	rjmp	.+538    	; 0xc68 <__fp_round>
     a4e:	fe d0       	rcall	.+508    	; 0xc4c <__fp_pscA>
     a50:	30 f0       	brcs	.+12     	; 0xa5e <__addsf3+0x18>
     a52:	03 d1       	rcall	.+518    	; 0xc5a <__fp_pscB>
     a54:	20 f0       	brcs	.+8      	; 0xa5e <__addsf3+0x18>
     a56:	31 f4       	brne	.+12     	; 0xa64 <__addsf3+0x1e>
     a58:	9f 3f       	cpi	r25, 0xFF	; 255
     a5a:	11 f4       	brne	.+4      	; 0xa60 <__addsf3+0x1a>
     a5c:	1e f4       	brtc	.+6      	; 0xa64 <__addsf3+0x1e>
     a5e:	f3 c0       	rjmp	.+486    	; 0xc46 <__fp_nan>
     a60:	0e f4       	brtc	.+2      	; 0xa64 <__addsf3+0x1e>
     a62:	e0 95       	com	r30
     a64:	e7 fb       	bst	r30, 7
     a66:	e9 c0       	rjmp	.+466    	; 0xc3a <__fp_inf>

00000a68 <__addsf3x>:
     a68:	e9 2f       	mov	r30, r25
     a6a:	0f d1       	rcall	.+542    	; 0xc8a <__fp_split3>
     a6c:	80 f3       	brcs	.-32     	; 0xa4e <__addsf3+0x8>
     a6e:	ba 17       	cp	r27, r26
     a70:	62 07       	cpc	r22, r18
     a72:	73 07       	cpc	r23, r19
     a74:	84 07       	cpc	r24, r20
     a76:	95 07       	cpc	r25, r21
     a78:	18 f0       	brcs	.+6      	; 0xa80 <__addsf3x+0x18>
     a7a:	71 f4       	brne	.+28     	; 0xa98 <__addsf3x+0x30>
     a7c:	9e f5       	brtc	.+102    	; 0xae4 <__addsf3x+0x7c>
     a7e:	27 c1       	rjmp	.+590    	; 0xcce <__fp_zero>
     a80:	0e f4       	brtc	.+2      	; 0xa84 <__addsf3x+0x1c>
     a82:	e0 95       	com	r30
     a84:	0b 2e       	mov	r0, r27
     a86:	ba 2f       	mov	r27, r26
     a88:	a0 2d       	mov	r26, r0
     a8a:	0b 01       	movw	r0, r22
     a8c:	b9 01       	movw	r22, r18
     a8e:	90 01       	movw	r18, r0
     a90:	0c 01       	movw	r0, r24
     a92:	ca 01       	movw	r24, r20
     a94:	a0 01       	movw	r20, r0
     a96:	11 24       	eor	r1, r1
     a98:	ff 27       	eor	r31, r31
     a9a:	59 1b       	sub	r21, r25
     a9c:	99 f0       	breq	.+38     	; 0xac4 <__addsf3x+0x5c>
     a9e:	59 3f       	cpi	r21, 0xF9	; 249
     aa0:	50 f4       	brcc	.+20     	; 0xab6 <__addsf3x+0x4e>
     aa2:	50 3e       	cpi	r21, 0xE0	; 224
     aa4:	68 f1       	brcs	.+90     	; 0xb00 <__addsf3x+0x98>
     aa6:	1a 16       	cp	r1, r26
     aa8:	f0 40       	sbci	r31, 0x00	; 0
     aaa:	a2 2f       	mov	r26, r18
     aac:	23 2f       	mov	r18, r19
     aae:	34 2f       	mov	r19, r20
     ab0:	44 27       	eor	r20, r20
     ab2:	58 5f       	subi	r21, 0xF8	; 248
     ab4:	f3 cf       	rjmp	.-26     	; 0xa9c <__addsf3x+0x34>
     ab6:	46 95       	lsr	r20
     ab8:	37 95       	ror	r19
     aba:	27 95       	ror	r18
     abc:	a7 95       	ror	r26
     abe:	f0 40       	sbci	r31, 0x00	; 0
     ac0:	53 95       	inc	r21
     ac2:	c9 f7       	brne	.-14     	; 0xab6 <__addsf3x+0x4e>
     ac4:	7e f4       	brtc	.+30     	; 0xae4 <__addsf3x+0x7c>
     ac6:	1f 16       	cp	r1, r31
     ac8:	ba 0b       	sbc	r27, r26
     aca:	62 0b       	sbc	r22, r18
     acc:	73 0b       	sbc	r23, r19
     ace:	84 0b       	sbc	r24, r20
     ad0:	ba f0       	brmi	.+46     	; 0xb00 <__addsf3x+0x98>
     ad2:	91 50       	subi	r25, 0x01	; 1
     ad4:	a1 f0       	breq	.+40     	; 0xafe <__addsf3x+0x96>
     ad6:	ff 0f       	add	r31, r31
     ad8:	bb 1f       	adc	r27, r27
     ada:	66 1f       	adc	r22, r22
     adc:	77 1f       	adc	r23, r23
     ade:	88 1f       	adc	r24, r24
     ae0:	c2 f7       	brpl	.-16     	; 0xad2 <__addsf3x+0x6a>
     ae2:	0e c0       	rjmp	.+28     	; 0xb00 <__addsf3x+0x98>
     ae4:	ba 0f       	add	r27, r26
     ae6:	62 1f       	adc	r22, r18
     ae8:	73 1f       	adc	r23, r19
     aea:	84 1f       	adc	r24, r20
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__addsf3x+0x98>
     aee:	87 95       	ror	r24
     af0:	77 95       	ror	r23
     af2:	67 95       	ror	r22
     af4:	b7 95       	ror	r27
     af6:	f7 95       	ror	r31
     af8:	9e 3f       	cpi	r25, 0xFE	; 254
     afa:	08 f0       	brcs	.+2      	; 0xafe <__addsf3x+0x96>
     afc:	b3 cf       	rjmp	.-154    	; 0xa64 <__addsf3+0x1e>
     afe:	93 95       	inc	r25
     b00:	88 0f       	add	r24, r24
     b02:	08 f0       	brcs	.+2      	; 0xb06 <__addsf3x+0x9e>
     b04:	99 27       	eor	r25, r25
     b06:	ee 0f       	add	r30, r30
     b08:	97 95       	ror	r25
     b0a:	87 95       	ror	r24
     b0c:	08 95       	ret

00000b0e <__cmpsf2>:
     b0e:	71 d0       	rcall	.+226    	; 0xbf2 <__fp_cmp>
     b10:	08 f4       	brcc	.+2      	; 0xb14 <__cmpsf2+0x6>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	08 95       	ret

00000b16 <__fixsfsi>:
     b16:	04 d0       	rcall	.+8      	; 0xb20 <__fixunssfsi>
     b18:	68 94       	set
     b1a:	b1 11       	cpse	r27, r1
     b1c:	d9 c0       	rjmp	.+434    	; 0xcd0 <__fp_szero>
     b1e:	08 95       	ret

00000b20 <__fixunssfsi>:
     b20:	bc d0       	rcall	.+376    	; 0xc9a <__fp_splitA>
     b22:	88 f0       	brcs	.+34     	; 0xb46 <__fixunssfsi+0x26>
     b24:	9f 57       	subi	r25, 0x7F	; 127
     b26:	90 f0       	brcs	.+36     	; 0xb4c <__fixunssfsi+0x2c>
     b28:	b9 2f       	mov	r27, r25
     b2a:	99 27       	eor	r25, r25
     b2c:	b7 51       	subi	r27, 0x17	; 23
     b2e:	a0 f0       	brcs	.+40     	; 0xb58 <__fixunssfsi+0x38>
     b30:	d1 f0       	breq	.+52     	; 0xb66 <__fixunssfsi+0x46>
     b32:	66 0f       	add	r22, r22
     b34:	77 1f       	adc	r23, r23
     b36:	88 1f       	adc	r24, r24
     b38:	99 1f       	adc	r25, r25
     b3a:	1a f0       	brmi	.+6      	; 0xb42 <__fixunssfsi+0x22>
     b3c:	ba 95       	dec	r27
     b3e:	c9 f7       	brne	.-14     	; 0xb32 <__fixunssfsi+0x12>
     b40:	12 c0       	rjmp	.+36     	; 0xb66 <__fixunssfsi+0x46>
     b42:	b1 30       	cpi	r27, 0x01	; 1
     b44:	81 f0       	breq	.+32     	; 0xb66 <__fixunssfsi+0x46>
     b46:	c3 d0       	rcall	.+390    	; 0xcce <__fp_zero>
     b48:	b1 e0       	ldi	r27, 0x01	; 1
     b4a:	08 95       	ret
     b4c:	c0 c0       	rjmp	.+384    	; 0xcce <__fp_zero>
     b4e:	67 2f       	mov	r22, r23
     b50:	78 2f       	mov	r23, r24
     b52:	88 27       	eor	r24, r24
     b54:	b8 5f       	subi	r27, 0xF8	; 248
     b56:	39 f0       	breq	.+14     	; 0xb66 <__fixunssfsi+0x46>
     b58:	b9 3f       	cpi	r27, 0xF9	; 249
     b5a:	cc f3       	brlt	.-14     	; 0xb4e <__fixunssfsi+0x2e>
     b5c:	86 95       	lsr	r24
     b5e:	77 95       	ror	r23
     b60:	67 95       	ror	r22
     b62:	b3 95       	inc	r27
     b64:	d9 f7       	brne	.-10     	; 0xb5c <__fixunssfsi+0x3c>
     b66:	3e f4       	brtc	.+14     	; 0xb76 <__fixunssfsi+0x56>
     b68:	90 95       	com	r25
     b6a:	80 95       	com	r24
     b6c:	70 95       	com	r23
     b6e:	61 95       	neg	r22
     b70:	7f 4f       	sbci	r23, 0xFF	; 255
     b72:	8f 4f       	sbci	r24, 0xFF	; 255
     b74:	9f 4f       	sbci	r25, 0xFF	; 255
     b76:	08 95       	ret

00000b78 <__floatunsisf>:
     b78:	e8 94       	clt
     b7a:	09 c0       	rjmp	.+18     	; 0xb8e <__floatsisf+0x12>

00000b7c <__floatsisf>:
     b7c:	97 fb       	bst	r25, 7
     b7e:	3e f4       	brtc	.+14     	; 0xb8e <__floatsisf+0x12>
     b80:	90 95       	com	r25
     b82:	80 95       	com	r24
     b84:	70 95       	com	r23
     b86:	61 95       	neg	r22
     b88:	7f 4f       	sbci	r23, 0xFF	; 255
     b8a:	8f 4f       	sbci	r24, 0xFF	; 255
     b8c:	9f 4f       	sbci	r25, 0xFF	; 255
     b8e:	99 23       	and	r25, r25
     b90:	a9 f0       	breq	.+42     	; 0xbbc <__floatsisf+0x40>
     b92:	f9 2f       	mov	r31, r25
     b94:	96 e9       	ldi	r25, 0x96	; 150
     b96:	bb 27       	eor	r27, r27
     b98:	93 95       	inc	r25
     b9a:	f6 95       	lsr	r31
     b9c:	87 95       	ror	r24
     b9e:	77 95       	ror	r23
     ba0:	67 95       	ror	r22
     ba2:	b7 95       	ror	r27
     ba4:	f1 11       	cpse	r31, r1
     ba6:	f8 cf       	rjmp	.-16     	; 0xb98 <__floatsisf+0x1c>
     ba8:	fa f4       	brpl	.+62     	; 0xbe8 <__floatsisf+0x6c>
     baa:	bb 0f       	add	r27, r27
     bac:	11 f4       	brne	.+4      	; 0xbb2 <__floatsisf+0x36>
     bae:	60 ff       	sbrs	r22, 0
     bb0:	1b c0       	rjmp	.+54     	; 0xbe8 <__floatsisf+0x6c>
     bb2:	6f 5f       	subi	r22, 0xFF	; 255
     bb4:	7f 4f       	sbci	r23, 0xFF	; 255
     bb6:	8f 4f       	sbci	r24, 0xFF	; 255
     bb8:	9f 4f       	sbci	r25, 0xFF	; 255
     bba:	16 c0       	rjmp	.+44     	; 0xbe8 <__floatsisf+0x6c>
     bbc:	88 23       	and	r24, r24
     bbe:	11 f0       	breq	.+4      	; 0xbc4 <__floatsisf+0x48>
     bc0:	96 e9       	ldi	r25, 0x96	; 150
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <__floatsisf+0x6a>
     bc4:	77 23       	and	r23, r23
     bc6:	21 f0       	breq	.+8      	; 0xbd0 <__floatsisf+0x54>
     bc8:	9e e8       	ldi	r25, 0x8E	; 142
     bca:	87 2f       	mov	r24, r23
     bcc:	76 2f       	mov	r23, r22
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__floatsisf+0x5e>
     bd0:	66 23       	and	r22, r22
     bd2:	71 f0       	breq	.+28     	; 0xbf0 <__floatsisf+0x74>
     bd4:	96 e8       	ldi	r25, 0x86	; 134
     bd6:	86 2f       	mov	r24, r22
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	2a f0       	brmi	.+10     	; 0xbe8 <__floatsisf+0x6c>
     bde:	9a 95       	dec	r25
     be0:	66 0f       	add	r22, r22
     be2:	77 1f       	adc	r23, r23
     be4:	88 1f       	adc	r24, r24
     be6:	da f7       	brpl	.-10     	; 0xbde <__floatsisf+0x62>
     be8:	88 0f       	add	r24, r24
     bea:	96 95       	lsr	r25
     bec:	87 95       	ror	r24
     bee:	97 f9       	bld	r25, 7
     bf0:	08 95       	ret

00000bf2 <__fp_cmp>:
     bf2:	99 0f       	add	r25, r25
     bf4:	00 08       	sbc	r0, r0
     bf6:	55 0f       	add	r21, r21
     bf8:	aa 0b       	sbc	r26, r26
     bfa:	e0 e8       	ldi	r30, 0x80	; 128
     bfc:	fe ef       	ldi	r31, 0xFE	; 254
     bfe:	16 16       	cp	r1, r22
     c00:	17 06       	cpc	r1, r23
     c02:	e8 07       	cpc	r30, r24
     c04:	f9 07       	cpc	r31, r25
     c06:	c0 f0       	brcs	.+48     	; 0xc38 <__fp_cmp+0x46>
     c08:	12 16       	cp	r1, r18
     c0a:	13 06       	cpc	r1, r19
     c0c:	e4 07       	cpc	r30, r20
     c0e:	f5 07       	cpc	r31, r21
     c10:	98 f0       	brcs	.+38     	; 0xc38 <__fp_cmp+0x46>
     c12:	62 1b       	sub	r22, r18
     c14:	73 0b       	sbc	r23, r19
     c16:	84 0b       	sbc	r24, r20
     c18:	95 0b       	sbc	r25, r21
     c1a:	39 f4       	brne	.+14     	; 0xc2a <__fp_cmp+0x38>
     c1c:	0a 26       	eor	r0, r26
     c1e:	61 f0       	breq	.+24     	; 0xc38 <__fp_cmp+0x46>
     c20:	23 2b       	or	r18, r19
     c22:	24 2b       	or	r18, r20
     c24:	25 2b       	or	r18, r21
     c26:	21 f4       	brne	.+8      	; 0xc30 <__fp_cmp+0x3e>
     c28:	08 95       	ret
     c2a:	0a 26       	eor	r0, r26
     c2c:	09 f4       	brne	.+2      	; 0xc30 <__fp_cmp+0x3e>
     c2e:	a1 40       	sbci	r26, 0x01	; 1
     c30:	a6 95       	lsr	r26
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	81 1d       	adc	r24, r1
     c36:	81 1d       	adc	r24, r1
     c38:	08 95       	ret

00000c3a <__fp_inf>:
     c3a:	97 f9       	bld	r25, 7
     c3c:	9f 67       	ori	r25, 0x7F	; 127
     c3e:	80 e8       	ldi	r24, 0x80	; 128
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	08 95       	ret

00000c46 <__fp_nan>:
     c46:	9f ef       	ldi	r25, 0xFF	; 255
     c48:	80 ec       	ldi	r24, 0xC0	; 192
     c4a:	08 95       	ret

00000c4c <__fp_pscA>:
     c4c:	00 24       	eor	r0, r0
     c4e:	0a 94       	dec	r0
     c50:	16 16       	cp	r1, r22
     c52:	17 06       	cpc	r1, r23
     c54:	18 06       	cpc	r1, r24
     c56:	09 06       	cpc	r0, r25
     c58:	08 95       	ret

00000c5a <__fp_pscB>:
     c5a:	00 24       	eor	r0, r0
     c5c:	0a 94       	dec	r0
     c5e:	12 16       	cp	r1, r18
     c60:	13 06       	cpc	r1, r19
     c62:	14 06       	cpc	r1, r20
     c64:	05 06       	cpc	r0, r21
     c66:	08 95       	ret

00000c68 <__fp_round>:
     c68:	09 2e       	mov	r0, r25
     c6a:	03 94       	inc	r0
     c6c:	00 0c       	add	r0, r0
     c6e:	11 f4       	brne	.+4      	; 0xc74 <__fp_round+0xc>
     c70:	88 23       	and	r24, r24
     c72:	52 f0       	brmi	.+20     	; 0xc88 <__fp_round+0x20>
     c74:	bb 0f       	add	r27, r27
     c76:	40 f4       	brcc	.+16     	; 0xc88 <__fp_round+0x20>
     c78:	bf 2b       	or	r27, r31
     c7a:	11 f4       	brne	.+4      	; 0xc80 <__fp_round+0x18>
     c7c:	60 ff       	sbrs	r22, 0
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <__fp_round+0x20>
     c80:	6f 5f       	subi	r22, 0xFF	; 255
     c82:	7f 4f       	sbci	r23, 0xFF	; 255
     c84:	8f 4f       	sbci	r24, 0xFF	; 255
     c86:	9f 4f       	sbci	r25, 0xFF	; 255
     c88:	08 95       	ret

00000c8a <__fp_split3>:
     c8a:	57 fd       	sbrc	r21, 7
     c8c:	90 58       	subi	r25, 0x80	; 128
     c8e:	44 0f       	add	r20, r20
     c90:	55 1f       	adc	r21, r21
     c92:	59 f0       	breq	.+22     	; 0xcaa <__fp_splitA+0x10>
     c94:	5f 3f       	cpi	r21, 0xFF	; 255
     c96:	71 f0       	breq	.+28     	; 0xcb4 <__fp_splitA+0x1a>
     c98:	47 95       	ror	r20

00000c9a <__fp_splitA>:
     c9a:	88 0f       	add	r24, r24
     c9c:	97 fb       	bst	r25, 7
     c9e:	99 1f       	adc	r25, r25
     ca0:	61 f0       	breq	.+24     	; 0xcba <__fp_splitA+0x20>
     ca2:	9f 3f       	cpi	r25, 0xFF	; 255
     ca4:	79 f0       	breq	.+30     	; 0xcc4 <__fp_splitA+0x2a>
     ca6:	87 95       	ror	r24
     ca8:	08 95       	ret
     caa:	12 16       	cp	r1, r18
     cac:	13 06       	cpc	r1, r19
     cae:	14 06       	cpc	r1, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	f2 cf       	rjmp	.-28     	; 0xc98 <__fp_split3+0xe>
     cb4:	46 95       	lsr	r20
     cb6:	f1 df       	rcall	.-30     	; 0xc9a <__fp_splitA>
     cb8:	08 c0       	rjmp	.+16     	; 0xcca <__fp_splitA+0x30>
     cba:	16 16       	cp	r1, r22
     cbc:	17 06       	cpc	r1, r23
     cbe:	18 06       	cpc	r1, r24
     cc0:	99 1f       	adc	r25, r25
     cc2:	f1 cf       	rjmp	.-30     	; 0xca6 <__fp_splitA+0xc>
     cc4:	86 95       	lsr	r24
     cc6:	71 05       	cpc	r23, r1
     cc8:	61 05       	cpc	r22, r1
     cca:	08 94       	sec
     ccc:	08 95       	ret

00000cce <__fp_zero>:
     cce:	e8 94       	clt

00000cd0 <__fp_szero>:
     cd0:	bb 27       	eor	r27, r27
     cd2:	66 27       	eor	r22, r22
     cd4:	77 27       	eor	r23, r23
     cd6:	cb 01       	movw	r24, r22
     cd8:	97 f9       	bld	r25, 7
     cda:	08 95       	ret

00000cdc <__mulsf3>:
     cdc:	0b d0       	rcall	.+22     	; 0xcf4 <__mulsf3x>
     cde:	c4 cf       	rjmp	.-120    	; 0xc68 <__fp_round>
     ce0:	b5 df       	rcall	.-150    	; 0xc4c <__fp_pscA>
     ce2:	28 f0       	brcs	.+10     	; 0xcee <__mulsf3+0x12>
     ce4:	ba df       	rcall	.-140    	; 0xc5a <__fp_pscB>
     ce6:	18 f0       	brcs	.+6      	; 0xcee <__mulsf3+0x12>
     ce8:	95 23       	and	r25, r21
     cea:	09 f0       	breq	.+2      	; 0xcee <__mulsf3+0x12>
     cec:	a6 cf       	rjmp	.-180    	; 0xc3a <__fp_inf>
     cee:	ab cf       	rjmp	.-170    	; 0xc46 <__fp_nan>
     cf0:	11 24       	eor	r1, r1
     cf2:	ee cf       	rjmp	.-36     	; 0xcd0 <__fp_szero>

00000cf4 <__mulsf3x>:
     cf4:	ca df       	rcall	.-108    	; 0xc8a <__fp_split3>
     cf6:	a0 f3       	brcs	.-24     	; 0xce0 <__mulsf3+0x4>

00000cf8 <__mulsf3_pse>:
     cf8:	95 9f       	mul	r25, r21
     cfa:	d1 f3       	breq	.-12     	; 0xcf0 <__mulsf3+0x14>
     cfc:	95 0f       	add	r25, r21
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	55 1f       	adc	r21, r21
     d02:	62 9f       	mul	r22, r18
     d04:	f0 01       	movw	r30, r0
     d06:	72 9f       	mul	r23, r18
     d08:	bb 27       	eor	r27, r27
     d0a:	f0 0d       	add	r31, r0
     d0c:	b1 1d       	adc	r27, r1
     d0e:	63 9f       	mul	r22, r19
     d10:	aa 27       	eor	r26, r26
     d12:	f0 0d       	add	r31, r0
     d14:	b1 1d       	adc	r27, r1
     d16:	aa 1f       	adc	r26, r26
     d18:	64 9f       	mul	r22, r20
     d1a:	66 27       	eor	r22, r22
     d1c:	b0 0d       	add	r27, r0
     d1e:	a1 1d       	adc	r26, r1
     d20:	66 1f       	adc	r22, r22
     d22:	82 9f       	mul	r24, r18
     d24:	22 27       	eor	r18, r18
     d26:	b0 0d       	add	r27, r0
     d28:	a1 1d       	adc	r26, r1
     d2a:	62 1f       	adc	r22, r18
     d2c:	73 9f       	mul	r23, r19
     d2e:	b0 0d       	add	r27, r0
     d30:	a1 1d       	adc	r26, r1
     d32:	62 1f       	adc	r22, r18
     d34:	83 9f       	mul	r24, r19
     d36:	a0 0d       	add	r26, r0
     d38:	61 1d       	adc	r22, r1
     d3a:	22 1f       	adc	r18, r18
     d3c:	74 9f       	mul	r23, r20
     d3e:	33 27       	eor	r19, r19
     d40:	a0 0d       	add	r26, r0
     d42:	61 1d       	adc	r22, r1
     d44:	23 1f       	adc	r18, r19
     d46:	84 9f       	mul	r24, r20
     d48:	60 0d       	add	r22, r0
     d4a:	21 1d       	adc	r18, r1
     d4c:	82 2f       	mov	r24, r18
     d4e:	76 2f       	mov	r23, r22
     d50:	6a 2f       	mov	r22, r26
     d52:	11 24       	eor	r1, r1
     d54:	9f 57       	subi	r25, 0x7F	; 127
     d56:	50 40       	sbci	r21, 0x00	; 0
     d58:	8a f0       	brmi	.+34     	; 0xd7c <__mulsf3_pse+0x84>
     d5a:	e1 f0       	breq	.+56     	; 0xd94 <__mulsf3_pse+0x9c>
     d5c:	88 23       	and	r24, r24
     d5e:	4a f0       	brmi	.+18     	; 0xd72 <__mulsf3_pse+0x7a>
     d60:	ee 0f       	add	r30, r30
     d62:	ff 1f       	adc	r31, r31
     d64:	bb 1f       	adc	r27, r27
     d66:	66 1f       	adc	r22, r22
     d68:	77 1f       	adc	r23, r23
     d6a:	88 1f       	adc	r24, r24
     d6c:	91 50       	subi	r25, 0x01	; 1
     d6e:	50 40       	sbci	r21, 0x00	; 0
     d70:	a9 f7       	brne	.-22     	; 0xd5c <__mulsf3_pse+0x64>
     d72:	9e 3f       	cpi	r25, 0xFE	; 254
     d74:	51 05       	cpc	r21, r1
     d76:	70 f0       	brcs	.+28     	; 0xd94 <__mulsf3_pse+0x9c>
     d78:	60 cf       	rjmp	.-320    	; 0xc3a <__fp_inf>
     d7a:	aa cf       	rjmp	.-172    	; 0xcd0 <__fp_szero>
     d7c:	5f 3f       	cpi	r21, 0xFF	; 255
     d7e:	ec f3       	brlt	.-6      	; 0xd7a <__mulsf3_pse+0x82>
     d80:	98 3e       	cpi	r25, 0xE8	; 232
     d82:	dc f3       	brlt	.-10     	; 0xd7a <__mulsf3_pse+0x82>
     d84:	86 95       	lsr	r24
     d86:	77 95       	ror	r23
     d88:	67 95       	ror	r22
     d8a:	b7 95       	ror	r27
     d8c:	f7 95       	ror	r31
     d8e:	e7 95       	ror	r30
     d90:	9f 5f       	subi	r25, 0xFF	; 255
     d92:	c1 f7       	brne	.-16     	; 0xd84 <__mulsf3_pse+0x8c>
     d94:	fe 2b       	or	r31, r30
     d96:	88 0f       	add	r24, r24
     d98:	91 1d       	adc	r25, r1
     d9a:	96 95       	lsr	r25
     d9c:	87 95       	ror	r24
     d9e:	97 f9       	bld	r25, 7
     da0:	08 95       	ret

00000da2 <__tablejump2__>:
     da2:	ee 0f       	add	r30, r30
     da4:	ff 1f       	adc	r31, r31

00000da6 <__tablejump__>:
     da6:	05 90       	lpm	r0, Z+
     da8:	f4 91       	lpm	r31, Z
     daa:	e0 2d       	mov	r30, r0
     dac:	19 94       	eijmp

00000dae <fdevopen>:
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
     db6:	ec 01       	movw	r28, r24
     db8:	8b 01       	movw	r16, r22
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	31 f4       	brne	.+12     	; 0xdca <fdevopen+0x1c>
     dbe:	61 15       	cp	r22, r1
     dc0:	71 05       	cpc	r23, r1
     dc2:	19 f4       	brne	.+6      	; 0xdca <fdevopen+0x1c>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	37 c0       	rjmp	.+110    	; 0xe38 <fdevopen+0x8a>
     dca:	6e e0       	ldi	r22, 0x0E	; 14
     dcc:	70 e0       	ldi	r23, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	63 d2       	rcall	.+1222   	; 0x129a <calloc>
     dd4:	fc 01       	movw	r30, r24
     dd6:	00 97       	sbiw	r24, 0x00	; 0
     dd8:	a9 f3       	breq	.-22     	; 0xdc4 <fdevopen+0x16>
     dda:	80 e8       	ldi	r24, 0x80	; 128
     ddc:	83 83       	std	Z+3, r24	; 0x03
     dde:	01 15       	cp	r16, r1
     de0:	11 05       	cpc	r17, r1
     de2:	71 f0       	breq	.+28     	; 0xe00 <fdevopen+0x52>
     de4:	13 87       	std	Z+11, r17	; 0x0b
     de6:	02 87       	std	Z+10, r16	; 0x0a
     de8:	81 e8       	ldi	r24, 0x81	; 129
     dea:	83 83       	std	Z+3, r24	; 0x03
     dec:	80 91 45 03 	lds	r24, 0x0345
     df0:	90 91 46 03 	lds	r25, 0x0346
     df4:	89 2b       	or	r24, r25
     df6:	21 f4       	brne	.+8      	; 0xe00 <fdevopen+0x52>
     df8:	f0 93 46 03 	sts	0x0346, r31
     dfc:	e0 93 45 03 	sts	0x0345, r30
     e00:	20 97       	sbiw	r28, 0x00	; 0
     e02:	c9 f0       	breq	.+50     	; 0xe36 <fdevopen+0x88>
     e04:	d1 87       	std	Z+9, r29	; 0x09
     e06:	c0 87       	std	Z+8, r28	; 0x08
     e08:	83 81       	ldd	r24, Z+3	; 0x03
     e0a:	82 60       	ori	r24, 0x02	; 2
     e0c:	83 83       	std	Z+3, r24	; 0x03
     e0e:	80 91 47 03 	lds	r24, 0x0347
     e12:	90 91 48 03 	lds	r25, 0x0348
     e16:	89 2b       	or	r24, r25
     e18:	71 f4       	brne	.+28     	; 0xe36 <fdevopen+0x88>
     e1a:	f0 93 48 03 	sts	0x0348, r31
     e1e:	e0 93 47 03 	sts	0x0347, r30
     e22:	80 91 49 03 	lds	r24, 0x0349
     e26:	90 91 4a 03 	lds	r25, 0x034A
     e2a:	89 2b       	or	r24, r25
     e2c:	21 f4       	brne	.+8      	; 0xe36 <fdevopen+0x88>
     e2e:	f0 93 4a 03 	sts	0x034A, r31
     e32:	e0 93 49 03 	sts	0x0349, r30
     e36:	cf 01       	movw	r24, r30
     e38:	df 91       	pop	r29
     e3a:	cf 91       	pop	r28
     e3c:	1f 91       	pop	r17
     e3e:	0f 91       	pop	r16
     e40:	08 95       	ret

00000e42 <printf>:
     e42:	cf 93       	push	r28
     e44:	df 93       	push	r29
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	fe 01       	movw	r30, r28
     e4c:	36 96       	adiw	r30, 0x06	; 6
     e4e:	61 91       	ld	r22, Z+
     e50:	71 91       	ld	r23, Z+
     e52:	af 01       	movw	r20, r30
     e54:	80 91 47 03 	lds	r24, 0x0347
     e58:	90 91 48 03 	lds	r25, 0x0348
     e5c:	30 d0       	rcall	.+96     	; 0xebe <vfprintf>
     e5e:	df 91       	pop	r29
     e60:	cf 91       	pop	r28
     e62:	08 95       	ret

00000e64 <puts>:
     e64:	0f 93       	push	r16
     e66:	1f 93       	push	r17
     e68:	cf 93       	push	r28
     e6a:	df 93       	push	r29
     e6c:	e0 91 47 03 	lds	r30, 0x0347
     e70:	f0 91 48 03 	lds	r31, 0x0348
     e74:	23 81       	ldd	r18, Z+3	; 0x03
     e76:	21 ff       	sbrs	r18, 1
     e78:	1b c0       	rjmp	.+54     	; 0xeb0 <puts+0x4c>
     e7a:	ec 01       	movw	r28, r24
     e7c:	00 e0       	ldi	r16, 0x00	; 0
     e7e:	10 e0       	ldi	r17, 0x00	; 0
     e80:	89 91       	ld	r24, Y+
     e82:	60 91 47 03 	lds	r22, 0x0347
     e86:	70 91 48 03 	lds	r23, 0x0348
     e8a:	db 01       	movw	r26, r22
     e8c:	18 96       	adiw	r26, 0x08	; 8
     e8e:	ed 91       	ld	r30, X+
     e90:	fc 91       	ld	r31, X
     e92:	19 97       	sbiw	r26, 0x09	; 9
     e94:	88 23       	and	r24, r24
     e96:	31 f0       	breq	.+12     	; 0xea4 <puts+0x40>
     e98:	19 95       	eicall
     e9a:	89 2b       	or	r24, r25
     e9c:	89 f3       	breq	.-30     	; 0xe80 <puts+0x1c>
     e9e:	0f ef       	ldi	r16, 0xFF	; 255
     ea0:	1f ef       	ldi	r17, 0xFF	; 255
     ea2:	ee cf       	rjmp	.-36     	; 0xe80 <puts+0x1c>
     ea4:	8a e0       	ldi	r24, 0x0A	; 10
     ea6:	19 95       	eicall
     ea8:	89 2b       	or	r24, r25
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <puts+0x4c>
     eac:	c8 01       	movw	r24, r16
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <puts+0x50>
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	9f ef       	ldi	r25, 0xFF	; 255
     eb4:	df 91       	pop	r29
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <vfprintf>:
     ebe:	2f 92       	push	r2
     ec0:	3f 92       	push	r3
     ec2:	4f 92       	push	r4
     ec4:	5f 92       	push	r5
     ec6:	6f 92       	push	r6
     ec8:	7f 92       	push	r7
     eca:	8f 92       	push	r8
     ecc:	9f 92       	push	r9
     ece:	af 92       	push	r10
     ed0:	bf 92       	push	r11
     ed2:	cf 92       	push	r12
     ed4:	df 92       	push	r13
     ed6:	ef 92       	push	r14
     ed8:	ff 92       	push	r15
     eda:	0f 93       	push	r16
     edc:	1f 93       	push	r17
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	2c 97       	sbiw	r28, 0x0c	; 12
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	7c 01       	movw	r14, r24
     ef4:	6b 01       	movw	r12, r22
     ef6:	8a 01       	movw	r16, r20
     ef8:	fc 01       	movw	r30, r24
     efa:	17 82       	std	Z+7, r1	; 0x07
     efc:	16 82       	std	Z+6, r1	; 0x06
     efe:	83 81       	ldd	r24, Z+3	; 0x03
     f00:	81 ff       	sbrs	r24, 1
     f02:	b0 c1       	rjmp	.+864    	; 0x1264 <vfprintf+0x3a6>
     f04:	ce 01       	movw	r24, r28
     f06:	01 96       	adiw	r24, 0x01	; 1
     f08:	4c 01       	movw	r8, r24
     f0a:	f7 01       	movw	r30, r14
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	f6 01       	movw	r30, r12
     f10:	93 fd       	sbrc	r25, 3
     f12:	85 91       	lpm	r24, Z+
     f14:	93 ff       	sbrs	r25, 3
     f16:	81 91       	ld	r24, Z+
     f18:	6f 01       	movw	r12, r30
     f1a:	88 23       	and	r24, r24
     f1c:	09 f4       	brne	.+2      	; 0xf20 <vfprintf+0x62>
     f1e:	9e c1       	rjmp	.+828    	; 0x125c <vfprintf+0x39e>
     f20:	85 32       	cpi	r24, 0x25	; 37
     f22:	39 f4       	brne	.+14     	; 0xf32 <vfprintf+0x74>
     f24:	93 fd       	sbrc	r25, 3
     f26:	85 91       	lpm	r24, Z+
     f28:	93 ff       	sbrs	r25, 3
     f2a:	81 91       	ld	r24, Z+
     f2c:	6f 01       	movw	r12, r30
     f2e:	85 32       	cpi	r24, 0x25	; 37
     f30:	21 f4       	brne	.+8      	; 0xf3a <vfprintf+0x7c>
     f32:	b7 01       	movw	r22, r14
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0f d3       	rcall	.+1566   	; 0x1556 <fputc>
     f38:	e8 cf       	rjmp	.-48     	; 0xf0a <vfprintf+0x4c>
     f3a:	51 2c       	mov	r5, r1
     f3c:	31 2c       	mov	r3, r1
     f3e:	20 e0       	ldi	r18, 0x00	; 0
     f40:	20 32       	cpi	r18, 0x20	; 32
     f42:	a0 f4       	brcc	.+40     	; 0xf6c <vfprintf+0xae>
     f44:	8b 32       	cpi	r24, 0x2B	; 43
     f46:	69 f0       	breq	.+26     	; 0xf62 <vfprintf+0xa4>
     f48:	30 f4       	brcc	.+12     	; 0xf56 <vfprintf+0x98>
     f4a:	80 32       	cpi	r24, 0x20	; 32
     f4c:	59 f0       	breq	.+22     	; 0xf64 <vfprintf+0xa6>
     f4e:	83 32       	cpi	r24, 0x23	; 35
     f50:	69 f4       	brne	.+26     	; 0xf6c <vfprintf+0xae>
     f52:	20 61       	ori	r18, 0x10	; 16
     f54:	2c c0       	rjmp	.+88     	; 0xfae <vfprintf+0xf0>
     f56:	8d 32       	cpi	r24, 0x2D	; 45
     f58:	39 f0       	breq	.+14     	; 0xf68 <vfprintf+0xaa>
     f5a:	80 33       	cpi	r24, 0x30	; 48
     f5c:	39 f4       	brne	.+14     	; 0xf6c <vfprintf+0xae>
     f5e:	21 60       	ori	r18, 0x01	; 1
     f60:	26 c0       	rjmp	.+76     	; 0xfae <vfprintf+0xf0>
     f62:	22 60       	ori	r18, 0x02	; 2
     f64:	24 60       	ori	r18, 0x04	; 4
     f66:	23 c0       	rjmp	.+70     	; 0xfae <vfprintf+0xf0>
     f68:	28 60       	ori	r18, 0x08	; 8
     f6a:	21 c0       	rjmp	.+66     	; 0xfae <vfprintf+0xf0>
     f6c:	27 fd       	sbrc	r18, 7
     f6e:	27 c0       	rjmp	.+78     	; 0xfbe <vfprintf+0x100>
     f70:	30 ed       	ldi	r19, 0xD0	; 208
     f72:	38 0f       	add	r19, r24
     f74:	3a 30       	cpi	r19, 0x0A	; 10
     f76:	78 f4       	brcc	.+30     	; 0xf96 <vfprintf+0xd8>
     f78:	26 ff       	sbrs	r18, 6
     f7a:	06 c0       	rjmp	.+12     	; 0xf88 <vfprintf+0xca>
     f7c:	fa e0       	ldi	r31, 0x0A	; 10
     f7e:	5f 9e       	mul	r5, r31
     f80:	30 0d       	add	r19, r0
     f82:	11 24       	eor	r1, r1
     f84:	53 2e       	mov	r5, r19
     f86:	13 c0       	rjmp	.+38     	; 0xfae <vfprintf+0xf0>
     f88:	8a e0       	ldi	r24, 0x0A	; 10
     f8a:	38 9e       	mul	r3, r24
     f8c:	30 0d       	add	r19, r0
     f8e:	11 24       	eor	r1, r1
     f90:	33 2e       	mov	r3, r19
     f92:	20 62       	ori	r18, 0x20	; 32
     f94:	0c c0       	rjmp	.+24     	; 0xfae <vfprintf+0xf0>
     f96:	8e 32       	cpi	r24, 0x2E	; 46
     f98:	21 f4       	brne	.+8      	; 0xfa2 <vfprintf+0xe4>
     f9a:	26 fd       	sbrc	r18, 6
     f9c:	5f c1       	rjmp	.+702    	; 0x125c <vfprintf+0x39e>
     f9e:	20 64       	ori	r18, 0x40	; 64
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <vfprintf+0xf0>
     fa2:	8c 36       	cpi	r24, 0x6C	; 108
     fa4:	11 f4       	brne	.+4      	; 0xfaa <vfprintf+0xec>
     fa6:	20 68       	ori	r18, 0x80	; 128
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0xf0>
     faa:	88 36       	cpi	r24, 0x68	; 104
     fac:	41 f4       	brne	.+16     	; 0xfbe <vfprintf+0x100>
     fae:	f6 01       	movw	r30, r12
     fb0:	93 fd       	sbrc	r25, 3
     fb2:	85 91       	lpm	r24, Z+
     fb4:	93 ff       	sbrs	r25, 3
     fb6:	81 91       	ld	r24, Z+
     fb8:	6f 01       	movw	r12, r30
     fba:	81 11       	cpse	r24, r1
     fbc:	c1 cf       	rjmp	.-126    	; 0xf40 <vfprintf+0x82>
     fbe:	98 2f       	mov	r25, r24
     fc0:	9f 7d       	andi	r25, 0xDF	; 223
     fc2:	95 54       	subi	r25, 0x45	; 69
     fc4:	93 30       	cpi	r25, 0x03	; 3
     fc6:	28 f4       	brcc	.+10     	; 0xfd2 <vfprintf+0x114>
     fc8:	0c 5f       	subi	r16, 0xFC	; 252
     fca:	1f 4f       	sbci	r17, 0xFF	; 255
     fcc:	ff e3       	ldi	r31, 0x3F	; 63
     fce:	f9 83       	std	Y+1, r31	; 0x01
     fd0:	0d c0       	rjmp	.+26     	; 0xfec <vfprintf+0x12e>
     fd2:	83 36       	cpi	r24, 0x63	; 99
     fd4:	31 f0       	breq	.+12     	; 0xfe2 <vfprintf+0x124>
     fd6:	83 37       	cpi	r24, 0x73	; 115
     fd8:	71 f0       	breq	.+28     	; 0xff6 <vfprintf+0x138>
     fda:	83 35       	cpi	r24, 0x53	; 83
     fdc:	09 f0       	breq	.+2      	; 0xfe0 <vfprintf+0x122>
     fde:	57 c0       	rjmp	.+174    	; 0x108e <vfprintf+0x1d0>
     fe0:	21 c0       	rjmp	.+66     	; 0x1024 <vfprintf+0x166>
     fe2:	f8 01       	movw	r30, r16
     fe4:	80 81       	ld	r24, Z
     fe6:	89 83       	std	Y+1, r24	; 0x01
     fe8:	0e 5f       	subi	r16, 0xFE	; 254
     fea:	1f 4f       	sbci	r17, 0xFF	; 255
     fec:	44 24       	eor	r4, r4
     fee:	43 94       	inc	r4
     ff0:	51 2c       	mov	r5, r1
     ff2:	54 01       	movw	r10, r8
     ff4:	14 c0       	rjmp	.+40     	; 0x101e <vfprintf+0x160>
     ff6:	38 01       	movw	r6, r16
     ff8:	f2 e0       	ldi	r31, 0x02	; 2
     ffa:	6f 0e       	add	r6, r31
     ffc:	71 1c       	adc	r7, r1
     ffe:	f8 01       	movw	r30, r16
    1000:	a0 80       	ld	r10, Z
    1002:	b1 80       	ldd	r11, Z+1	; 0x01
    1004:	26 ff       	sbrs	r18, 6
    1006:	03 c0       	rjmp	.+6      	; 0x100e <vfprintf+0x150>
    1008:	65 2d       	mov	r22, r5
    100a:	70 e0       	ldi	r23, 0x00	; 0
    100c:	02 c0       	rjmp	.+4      	; 0x1012 <vfprintf+0x154>
    100e:	6f ef       	ldi	r22, 0xFF	; 255
    1010:	7f ef       	ldi	r23, 0xFF	; 255
    1012:	c5 01       	movw	r24, r10
    1014:	2c 87       	std	Y+12, r18	; 0x0c
    1016:	94 d2       	rcall	.+1320   	; 0x1540 <strnlen>
    1018:	2c 01       	movw	r4, r24
    101a:	83 01       	movw	r16, r6
    101c:	2c 85       	ldd	r18, Y+12	; 0x0c
    101e:	2f 77       	andi	r18, 0x7F	; 127
    1020:	22 2e       	mov	r2, r18
    1022:	16 c0       	rjmp	.+44     	; 0x1050 <vfprintf+0x192>
    1024:	38 01       	movw	r6, r16
    1026:	f2 e0       	ldi	r31, 0x02	; 2
    1028:	6f 0e       	add	r6, r31
    102a:	71 1c       	adc	r7, r1
    102c:	f8 01       	movw	r30, r16
    102e:	a0 80       	ld	r10, Z
    1030:	b1 80       	ldd	r11, Z+1	; 0x01
    1032:	26 ff       	sbrs	r18, 6
    1034:	03 c0       	rjmp	.+6      	; 0x103c <vfprintf+0x17e>
    1036:	65 2d       	mov	r22, r5
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	02 c0       	rjmp	.+4      	; 0x1040 <vfprintf+0x182>
    103c:	6f ef       	ldi	r22, 0xFF	; 255
    103e:	7f ef       	ldi	r23, 0xFF	; 255
    1040:	c5 01       	movw	r24, r10
    1042:	2c 87       	std	Y+12, r18	; 0x0c
    1044:	6b d2       	rcall	.+1238   	; 0x151c <strnlen_P>
    1046:	2c 01       	movw	r4, r24
    1048:	2c 85       	ldd	r18, Y+12	; 0x0c
    104a:	20 68       	ori	r18, 0x80	; 128
    104c:	22 2e       	mov	r2, r18
    104e:	83 01       	movw	r16, r6
    1050:	23 fc       	sbrc	r2, 3
    1052:	19 c0       	rjmp	.+50     	; 0x1086 <vfprintf+0x1c8>
    1054:	83 2d       	mov	r24, r3
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	48 16       	cp	r4, r24
    105a:	59 06       	cpc	r5, r25
    105c:	a0 f4       	brcc	.+40     	; 0x1086 <vfprintf+0x1c8>
    105e:	b7 01       	movw	r22, r14
    1060:	80 e2       	ldi	r24, 0x20	; 32
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	78 d2       	rcall	.+1264   	; 0x1556 <fputc>
    1066:	3a 94       	dec	r3
    1068:	f5 cf       	rjmp	.-22     	; 0x1054 <vfprintf+0x196>
    106a:	f5 01       	movw	r30, r10
    106c:	27 fc       	sbrc	r2, 7
    106e:	85 91       	lpm	r24, Z+
    1070:	27 fe       	sbrs	r2, 7
    1072:	81 91       	ld	r24, Z+
    1074:	5f 01       	movw	r10, r30
    1076:	b7 01       	movw	r22, r14
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	6d d2       	rcall	.+1242   	; 0x1556 <fputc>
    107c:	31 10       	cpse	r3, r1
    107e:	3a 94       	dec	r3
    1080:	f1 e0       	ldi	r31, 0x01	; 1
    1082:	4f 1a       	sub	r4, r31
    1084:	51 08       	sbc	r5, r1
    1086:	41 14       	cp	r4, r1
    1088:	51 04       	cpc	r5, r1
    108a:	79 f7       	brne	.-34     	; 0x106a <vfprintf+0x1ac>
    108c:	de c0       	rjmp	.+444    	; 0x124a <vfprintf+0x38c>
    108e:	84 36       	cpi	r24, 0x64	; 100
    1090:	11 f0       	breq	.+4      	; 0x1096 <vfprintf+0x1d8>
    1092:	89 36       	cpi	r24, 0x69	; 105
    1094:	31 f5       	brne	.+76     	; 0x10e2 <vfprintf+0x224>
    1096:	f8 01       	movw	r30, r16
    1098:	27 ff       	sbrs	r18, 7
    109a:	07 c0       	rjmp	.+14     	; 0x10aa <vfprintf+0x1ec>
    109c:	60 81       	ld	r22, Z
    109e:	71 81       	ldd	r23, Z+1	; 0x01
    10a0:	82 81       	ldd	r24, Z+2	; 0x02
    10a2:	93 81       	ldd	r25, Z+3	; 0x03
    10a4:	0c 5f       	subi	r16, 0xFC	; 252
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <vfprintf+0x1fc>
    10aa:	60 81       	ld	r22, Z
    10ac:	71 81       	ldd	r23, Z+1	; 0x01
    10ae:	88 27       	eor	r24, r24
    10b0:	77 fd       	sbrc	r23, 7
    10b2:	80 95       	com	r24
    10b4:	98 2f       	mov	r25, r24
    10b6:	0e 5f       	subi	r16, 0xFE	; 254
    10b8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ba:	2f 76       	andi	r18, 0x6F	; 111
    10bc:	b2 2e       	mov	r11, r18
    10be:	97 ff       	sbrs	r25, 7
    10c0:	09 c0       	rjmp	.+18     	; 0x10d4 <vfprintf+0x216>
    10c2:	90 95       	com	r25
    10c4:	80 95       	com	r24
    10c6:	70 95       	com	r23
    10c8:	61 95       	neg	r22
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	8f 4f       	sbci	r24, 0xFF	; 255
    10ce:	9f 4f       	sbci	r25, 0xFF	; 255
    10d0:	20 68       	ori	r18, 0x80	; 128
    10d2:	b2 2e       	mov	r11, r18
    10d4:	2a e0       	ldi	r18, 0x0A	; 10
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	a4 01       	movw	r20, r8
    10da:	6f d2       	rcall	.+1246   	; 0x15ba <__ultoa_invert>
    10dc:	a8 2e       	mov	r10, r24
    10de:	a8 18       	sub	r10, r8
    10e0:	43 c0       	rjmp	.+134    	; 0x1168 <vfprintf+0x2aa>
    10e2:	85 37       	cpi	r24, 0x75	; 117
    10e4:	29 f4       	brne	.+10     	; 0x10f0 <vfprintf+0x232>
    10e6:	2f 7e       	andi	r18, 0xEF	; 239
    10e8:	b2 2e       	mov	r11, r18
    10ea:	2a e0       	ldi	r18, 0x0A	; 10
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	25 c0       	rjmp	.+74     	; 0x113a <vfprintf+0x27c>
    10f0:	f2 2f       	mov	r31, r18
    10f2:	f9 7f       	andi	r31, 0xF9	; 249
    10f4:	bf 2e       	mov	r11, r31
    10f6:	8f 36       	cpi	r24, 0x6F	; 111
    10f8:	c1 f0       	breq	.+48     	; 0x112a <vfprintf+0x26c>
    10fa:	18 f4       	brcc	.+6      	; 0x1102 <vfprintf+0x244>
    10fc:	88 35       	cpi	r24, 0x58	; 88
    10fe:	79 f0       	breq	.+30     	; 0x111e <vfprintf+0x260>
    1100:	ad c0       	rjmp	.+346    	; 0x125c <vfprintf+0x39e>
    1102:	80 37       	cpi	r24, 0x70	; 112
    1104:	19 f0       	breq	.+6      	; 0x110c <vfprintf+0x24e>
    1106:	88 37       	cpi	r24, 0x78	; 120
    1108:	21 f0       	breq	.+8      	; 0x1112 <vfprintf+0x254>
    110a:	a8 c0       	rjmp	.+336    	; 0x125c <vfprintf+0x39e>
    110c:	2f 2f       	mov	r18, r31
    110e:	20 61       	ori	r18, 0x10	; 16
    1110:	b2 2e       	mov	r11, r18
    1112:	b4 fe       	sbrs	r11, 4
    1114:	0d c0       	rjmp	.+26     	; 0x1130 <vfprintf+0x272>
    1116:	8b 2d       	mov	r24, r11
    1118:	84 60       	ori	r24, 0x04	; 4
    111a:	b8 2e       	mov	r11, r24
    111c:	09 c0       	rjmp	.+18     	; 0x1130 <vfprintf+0x272>
    111e:	24 ff       	sbrs	r18, 4
    1120:	0a c0       	rjmp	.+20     	; 0x1136 <vfprintf+0x278>
    1122:	9f 2f       	mov	r25, r31
    1124:	96 60       	ori	r25, 0x06	; 6
    1126:	b9 2e       	mov	r11, r25
    1128:	06 c0       	rjmp	.+12     	; 0x1136 <vfprintf+0x278>
    112a:	28 e0       	ldi	r18, 0x08	; 8
    112c:	30 e0       	ldi	r19, 0x00	; 0
    112e:	05 c0       	rjmp	.+10     	; 0x113a <vfprintf+0x27c>
    1130:	20 e1       	ldi	r18, 0x10	; 16
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	02 c0       	rjmp	.+4      	; 0x113a <vfprintf+0x27c>
    1136:	20 e1       	ldi	r18, 0x10	; 16
    1138:	32 e0       	ldi	r19, 0x02	; 2
    113a:	f8 01       	movw	r30, r16
    113c:	b7 fe       	sbrs	r11, 7
    113e:	07 c0       	rjmp	.+14     	; 0x114e <vfprintf+0x290>
    1140:	60 81       	ld	r22, Z
    1142:	71 81       	ldd	r23, Z+1	; 0x01
    1144:	82 81       	ldd	r24, Z+2	; 0x02
    1146:	93 81       	ldd	r25, Z+3	; 0x03
    1148:	0c 5f       	subi	r16, 0xFC	; 252
    114a:	1f 4f       	sbci	r17, 0xFF	; 255
    114c:	06 c0       	rjmp	.+12     	; 0x115a <vfprintf+0x29c>
    114e:	60 81       	ld	r22, Z
    1150:	71 81       	ldd	r23, Z+1	; 0x01
    1152:	80 e0       	ldi	r24, 0x00	; 0
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	0e 5f       	subi	r16, 0xFE	; 254
    1158:	1f 4f       	sbci	r17, 0xFF	; 255
    115a:	a4 01       	movw	r20, r8
    115c:	2e d2       	rcall	.+1116   	; 0x15ba <__ultoa_invert>
    115e:	a8 2e       	mov	r10, r24
    1160:	a8 18       	sub	r10, r8
    1162:	fb 2d       	mov	r31, r11
    1164:	ff 77       	andi	r31, 0x7F	; 127
    1166:	bf 2e       	mov	r11, r31
    1168:	b6 fe       	sbrs	r11, 6
    116a:	0b c0       	rjmp	.+22     	; 0x1182 <vfprintf+0x2c4>
    116c:	2b 2d       	mov	r18, r11
    116e:	2e 7f       	andi	r18, 0xFE	; 254
    1170:	a5 14       	cp	r10, r5
    1172:	50 f4       	brcc	.+20     	; 0x1188 <vfprintf+0x2ca>
    1174:	b4 fe       	sbrs	r11, 4
    1176:	0a c0       	rjmp	.+20     	; 0x118c <vfprintf+0x2ce>
    1178:	b2 fc       	sbrc	r11, 2
    117a:	08 c0       	rjmp	.+16     	; 0x118c <vfprintf+0x2ce>
    117c:	2b 2d       	mov	r18, r11
    117e:	2e 7e       	andi	r18, 0xEE	; 238
    1180:	05 c0       	rjmp	.+10     	; 0x118c <vfprintf+0x2ce>
    1182:	7a 2c       	mov	r7, r10
    1184:	2b 2d       	mov	r18, r11
    1186:	03 c0       	rjmp	.+6      	; 0x118e <vfprintf+0x2d0>
    1188:	7a 2c       	mov	r7, r10
    118a:	01 c0       	rjmp	.+2      	; 0x118e <vfprintf+0x2d0>
    118c:	75 2c       	mov	r7, r5
    118e:	24 ff       	sbrs	r18, 4
    1190:	0d c0       	rjmp	.+26     	; 0x11ac <vfprintf+0x2ee>
    1192:	fe 01       	movw	r30, r28
    1194:	ea 0d       	add	r30, r10
    1196:	f1 1d       	adc	r31, r1
    1198:	80 81       	ld	r24, Z
    119a:	80 33       	cpi	r24, 0x30	; 48
    119c:	11 f4       	brne	.+4      	; 0x11a2 <vfprintf+0x2e4>
    119e:	29 7e       	andi	r18, 0xE9	; 233
    11a0:	09 c0       	rjmp	.+18     	; 0x11b4 <vfprintf+0x2f6>
    11a2:	22 ff       	sbrs	r18, 2
    11a4:	06 c0       	rjmp	.+12     	; 0x11b2 <vfprintf+0x2f4>
    11a6:	73 94       	inc	r7
    11a8:	73 94       	inc	r7
    11aa:	04 c0       	rjmp	.+8      	; 0x11b4 <vfprintf+0x2f6>
    11ac:	82 2f       	mov	r24, r18
    11ae:	86 78       	andi	r24, 0x86	; 134
    11b0:	09 f0       	breq	.+2      	; 0x11b4 <vfprintf+0x2f6>
    11b2:	73 94       	inc	r7
    11b4:	23 fd       	sbrc	r18, 3
    11b6:	12 c0       	rjmp	.+36     	; 0x11dc <vfprintf+0x31e>
    11b8:	20 ff       	sbrs	r18, 0
    11ba:	06 c0       	rjmp	.+12     	; 0x11c8 <vfprintf+0x30a>
    11bc:	5a 2c       	mov	r5, r10
    11be:	73 14       	cp	r7, r3
    11c0:	18 f4       	brcc	.+6      	; 0x11c8 <vfprintf+0x30a>
    11c2:	53 0c       	add	r5, r3
    11c4:	57 18       	sub	r5, r7
    11c6:	73 2c       	mov	r7, r3
    11c8:	73 14       	cp	r7, r3
    11ca:	60 f4       	brcc	.+24     	; 0x11e4 <vfprintf+0x326>
    11cc:	b7 01       	movw	r22, r14
    11ce:	80 e2       	ldi	r24, 0x20	; 32
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	2c 87       	std	Y+12, r18	; 0x0c
    11d4:	c0 d1       	rcall	.+896    	; 0x1556 <fputc>
    11d6:	73 94       	inc	r7
    11d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    11da:	f6 cf       	rjmp	.-20     	; 0x11c8 <vfprintf+0x30a>
    11dc:	73 14       	cp	r7, r3
    11de:	10 f4       	brcc	.+4      	; 0x11e4 <vfprintf+0x326>
    11e0:	37 18       	sub	r3, r7
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <vfprintf+0x328>
    11e4:	31 2c       	mov	r3, r1
    11e6:	24 ff       	sbrs	r18, 4
    11e8:	11 c0       	rjmp	.+34     	; 0x120c <vfprintf+0x34e>
    11ea:	b7 01       	movw	r22, r14
    11ec:	80 e3       	ldi	r24, 0x30	; 48
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	2c 87       	std	Y+12, r18	; 0x0c
    11f2:	b1 d1       	rcall	.+866    	; 0x1556 <fputc>
    11f4:	2c 85       	ldd	r18, Y+12	; 0x0c
    11f6:	22 ff       	sbrs	r18, 2
    11f8:	16 c0       	rjmp	.+44     	; 0x1226 <vfprintf+0x368>
    11fa:	21 ff       	sbrs	r18, 1
    11fc:	03 c0       	rjmp	.+6      	; 0x1204 <vfprintf+0x346>
    11fe:	88 e5       	ldi	r24, 0x58	; 88
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	02 c0       	rjmp	.+4      	; 0x1208 <vfprintf+0x34a>
    1204:	88 e7       	ldi	r24, 0x78	; 120
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	b7 01       	movw	r22, r14
    120a:	0c c0       	rjmp	.+24     	; 0x1224 <vfprintf+0x366>
    120c:	82 2f       	mov	r24, r18
    120e:	86 78       	andi	r24, 0x86	; 134
    1210:	51 f0       	breq	.+20     	; 0x1226 <vfprintf+0x368>
    1212:	21 fd       	sbrc	r18, 1
    1214:	02 c0       	rjmp	.+4      	; 0x121a <vfprintf+0x35c>
    1216:	80 e2       	ldi	r24, 0x20	; 32
    1218:	01 c0       	rjmp	.+2      	; 0x121c <vfprintf+0x35e>
    121a:	8b e2       	ldi	r24, 0x2B	; 43
    121c:	27 fd       	sbrc	r18, 7
    121e:	8d e2       	ldi	r24, 0x2D	; 45
    1220:	b7 01       	movw	r22, r14
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	98 d1       	rcall	.+816    	; 0x1556 <fputc>
    1226:	a5 14       	cp	r10, r5
    1228:	30 f4       	brcc	.+12     	; 0x1236 <vfprintf+0x378>
    122a:	b7 01       	movw	r22, r14
    122c:	80 e3       	ldi	r24, 0x30	; 48
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	92 d1       	rcall	.+804    	; 0x1556 <fputc>
    1232:	5a 94       	dec	r5
    1234:	f8 cf       	rjmp	.-16     	; 0x1226 <vfprintf+0x368>
    1236:	aa 94       	dec	r10
    1238:	f4 01       	movw	r30, r8
    123a:	ea 0d       	add	r30, r10
    123c:	f1 1d       	adc	r31, r1
    123e:	80 81       	ld	r24, Z
    1240:	b7 01       	movw	r22, r14
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	88 d1       	rcall	.+784    	; 0x1556 <fputc>
    1246:	a1 10       	cpse	r10, r1
    1248:	f6 cf       	rjmp	.-20     	; 0x1236 <vfprintf+0x378>
    124a:	33 20       	and	r3, r3
    124c:	09 f4       	brne	.+2      	; 0x1250 <vfprintf+0x392>
    124e:	5d ce       	rjmp	.-838    	; 0xf0a <vfprintf+0x4c>
    1250:	b7 01       	movw	r22, r14
    1252:	80 e2       	ldi	r24, 0x20	; 32
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	7f d1       	rcall	.+766    	; 0x1556 <fputc>
    1258:	3a 94       	dec	r3
    125a:	f7 cf       	rjmp	.-18     	; 0x124a <vfprintf+0x38c>
    125c:	f7 01       	movw	r30, r14
    125e:	86 81       	ldd	r24, Z+6	; 0x06
    1260:	97 81       	ldd	r25, Z+7	; 0x07
    1262:	02 c0       	rjmp	.+4      	; 0x1268 <vfprintf+0x3aa>
    1264:	8f ef       	ldi	r24, 0xFF	; 255
    1266:	9f ef       	ldi	r25, 0xFF	; 255
    1268:	2c 96       	adiw	r28, 0x0c	; 12
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	ff 90       	pop	r15
    127e:	ef 90       	pop	r14
    1280:	df 90       	pop	r13
    1282:	cf 90       	pop	r12
    1284:	bf 90       	pop	r11
    1286:	af 90       	pop	r10
    1288:	9f 90       	pop	r9
    128a:	8f 90       	pop	r8
    128c:	7f 90       	pop	r7
    128e:	6f 90       	pop	r6
    1290:	5f 90       	pop	r5
    1292:	4f 90       	pop	r4
    1294:	3f 90       	pop	r3
    1296:	2f 90       	pop	r2
    1298:	08 95       	ret

0000129a <calloc>:
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	86 9f       	mul	r24, r22
    12a4:	80 01       	movw	r16, r0
    12a6:	87 9f       	mul	r24, r23
    12a8:	10 0d       	add	r17, r0
    12aa:	96 9f       	mul	r25, r22
    12ac:	10 0d       	add	r17, r0
    12ae:	11 24       	eor	r1, r1
    12b0:	c8 01       	movw	r24, r16
    12b2:	0d d0       	rcall	.+26     	; 0x12ce <malloc>
    12b4:	ec 01       	movw	r28, r24
    12b6:	00 97       	sbiw	r24, 0x00	; 0
    12b8:	21 f0       	breq	.+8      	; 0x12c2 <calloc+0x28>
    12ba:	a8 01       	movw	r20, r16
    12bc:	60 e0       	ldi	r22, 0x00	; 0
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	38 d1       	rcall	.+624    	; 0x1532 <memset>
    12c2:	ce 01       	movw	r24, r28
    12c4:	df 91       	pop	r29
    12c6:	cf 91       	pop	r28
    12c8:	1f 91       	pop	r17
    12ca:	0f 91       	pop	r16
    12cc:	08 95       	ret

000012ce <malloc>:
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	91 05       	cpc	r25, r1
    12d6:	10 f4       	brcc	.+4      	; 0x12dc <malloc+0xe>
    12d8:	82 e0       	ldi	r24, 0x02	; 2
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	e0 91 4d 03 	lds	r30, 0x034D
    12e0:	f0 91 4e 03 	lds	r31, 0x034E
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	a0 e0       	ldi	r26, 0x00	; 0
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	30 97       	sbiw	r30, 0x00	; 0
    12ee:	39 f1       	breq	.+78     	; 0x133e <malloc+0x70>
    12f0:	40 81       	ld	r20, Z
    12f2:	51 81       	ldd	r21, Z+1	; 0x01
    12f4:	48 17       	cp	r20, r24
    12f6:	59 07       	cpc	r21, r25
    12f8:	b8 f0       	brcs	.+46     	; 0x1328 <malloc+0x5a>
    12fa:	48 17       	cp	r20, r24
    12fc:	59 07       	cpc	r21, r25
    12fe:	71 f4       	brne	.+28     	; 0x131c <malloc+0x4e>
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	10 97       	sbiw	r26, 0x00	; 0
    1306:	29 f0       	breq	.+10     	; 0x1312 <malloc+0x44>
    1308:	13 96       	adiw	r26, 0x03	; 3
    130a:	9c 93       	st	X, r25
    130c:	8e 93       	st	-X, r24
    130e:	12 97       	sbiw	r26, 0x02	; 2
    1310:	2c c0       	rjmp	.+88     	; 0x136a <malloc+0x9c>
    1312:	90 93 4e 03 	sts	0x034E, r25
    1316:	80 93 4d 03 	sts	0x034D, r24
    131a:	27 c0       	rjmp	.+78     	; 0x136a <malloc+0x9c>
    131c:	21 15       	cp	r18, r1
    131e:	31 05       	cpc	r19, r1
    1320:	31 f0       	breq	.+12     	; 0x132e <malloc+0x60>
    1322:	42 17       	cp	r20, r18
    1324:	53 07       	cpc	r21, r19
    1326:	18 f0       	brcs	.+6      	; 0x132e <malloc+0x60>
    1328:	a9 01       	movw	r20, r18
    132a:	db 01       	movw	r26, r22
    132c:	01 c0       	rjmp	.+2      	; 0x1330 <malloc+0x62>
    132e:	ef 01       	movw	r28, r30
    1330:	9a 01       	movw	r18, r20
    1332:	bd 01       	movw	r22, r26
    1334:	df 01       	movw	r26, r30
    1336:	02 80       	ldd	r0, Z+2	; 0x02
    1338:	f3 81       	ldd	r31, Z+3	; 0x03
    133a:	e0 2d       	mov	r30, r0
    133c:	d7 cf       	rjmp	.-82     	; 0x12ec <malloc+0x1e>
    133e:	21 15       	cp	r18, r1
    1340:	31 05       	cpc	r19, r1
    1342:	f9 f0       	breq	.+62     	; 0x1382 <malloc+0xb4>
    1344:	28 1b       	sub	r18, r24
    1346:	39 0b       	sbc	r19, r25
    1348:	24 30       	cpi	r18, 0x04	; 4
    134a:	31 05       	cpc	r19, r1
    134c:	80 f4       	brcc	.+32     	; 0x136e <malloc+0xa0>
    134e:	8a 81       	ldd	r24, Y+2	; 0x02
    1350:	9b 81       	ldd	r25, Y+3	; 0x03
    1352:	61 15       	cp	r22, r1
    1354:	71 05       	cpc	r23, r1
    1356:	21 f0       	breq	.+8      	; 0x1360 <malloc+0x92>
    1358:	fb 01       	movw	r30, r22
    135a:	93 83       	std	Z+3, r25	; 0x03
    135c:	82 83       	std	Z+2, r24	; 0x02
    135e:	04 c0       	rjmp	.+8      	; 0x1368 <malloc+0x9a>
    1360:	90 93 4e 03 	sts	0x034E, r25
    1364:	80 93 4d 03 	sts	0x034D, r24
    1368:	fe 01       	movw	r30, r28
    136a:	32 96       	adiw	r30, 0x02	; 2
    136c:	44 c0       	rjmp	.+136    	; 0x13f6 <malloc+0x128>
    136e:	fe 01       	movw	r30, r28
    1370:	e2 0f       	add	r30, r18
    1372:	f3 1f       	adc	r31, r19
    1374:	81 93       	st	Z+, r24
    1376:	91 93       	st	Z+, r25
    1378:	22 50       	subi	r18, 0x02	; 2
    137a:	31 09       	sbc	r19, r1
    137c:	39 83       	std	Y+1, r19	; 0x01
    137e:	28 83       	st	Y, r18
    1380:	3a c0       	rjmp	.+116    	; 0x13f6 <malloc+0x128>
    1382:	20 91 4b 03 	lds	r18, 0x034B
    1386:	30 91 4c 03 	lds	r19, 0x034C
    138a:	23 2b       	or	r18, r19
    138c:	41 f4       	brne	.+16     	; 0x139e <malloc+0xd0>
    138e:	20 91 02 02 	lds	r18, 0x0202
    1392:	30 91 03 02 	lds	r19, 0x0203
    1396:	30 93 4c 03 	sts	0x034C, r19
    139a:	20 93 4b 03 	sts	0x034B, r18
    139e:	20 91 00 02 	lds	r18, 0x0200
    13a2:	30 91 01 02 	lds	r19, 0x0201
    13a6:	21 15       	cp	r18, r1
    13a8:	31 05       	cpc	r19, r1
    13aa:	41 f4       	brne	.+16     	; 0x13bc <malloc+0xee>
    13ac:	2d b7       	in	r18, 0x3d	; 61
    13ae:	3e b7       	in	r19, 0x3e	; 62
    13b0:	40 91 04 02 	lds	r20, 0x0204
    13b4:	50 91 05 02 	lds	r21, 0x0205
    13b8:	24 1b       	sub	r18, r20
    13ba:	35 0b       	sbc	r19, r21
    13bc:	e0 91 4b 03 	lds	r30, 0x034B
    13c0:	f0 91 4c 03 	lds	r31, 0x034C
    13c4:	e2 17       	cp	r30, r18
    13c6:	f3 07       	cpc	r31, r19
    13c8:	a0 f4       	brcc	.+40     	; 0x13f2 <malloc+0x124>
    13ca:	2e 1b       	sub	r18, r30
    13cc:	3f 0b       	sbc	r19, r31
    13ce:	28 17       	cp	r18, r24
    13d0:	39 07       	cpc	r19, r25
    13d2:	78 f0       	brcs	.+30     	; 0x13f2 <malloc+0x124>
    13d4:	ac 01       	movw	r20, r24
    13d6:	4e 5f       	subi	r20, 0xFE	; 254
    13d8:	5f 4f       	sbci	r21, 0xFF	; 255
    13da:	24 17       	cp	r18, r20
    13dc:	35 07       	cpc	r19, r21
    13de:	48 f0       	brcs	.+18     	; 0x13f2 <malloc+0x124>
    13e0:	4e 0f       	add	r20, r30
    13e2:	5f 1f       	adc	r21, r31
    13e4:	50 93 4c 03 	sts	0x034C, r21
    13e8:	40 93 4b 03 	sts	0x034B, r20
    13ec:	81 93       	st	Z+, r24
    13ee:	91 93       	st	Z+, r25
    13f0:	02 c0       	rjmp	.+4      	; 0x13f6 <malloc+0x128>
    13f2:	e0 e0       	ldi	r30, 0x00	; 0
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	cf 01       	movw	r24, r30
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	08 95       	ret

000013fe <free>:
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	00 97       	sbiw	r24, 0x00	; 0
    1404:	09 f4       	brne	.+2      	; 0x1408 <free+0xa>
    1406:	87 c0       	rjmp	.+270    	; 0x1516 <free+0x118>
    1408:	fc 01       	movw	r30, r24
    140a:	32 97       	sbiw	r30, 0x02	; 2
    140c:	13 82       	std	Z+3, r1	; 0x03
    140e:	12 82       	std	Z+2, r1	; 0x02
    1410:	c0 91 4d 03 	lds	r28, 0x034D
    1414:	d0 91 4e 03 	lds	r29, 0x034E
    1418:	20 97       	sbiw	r28, 0x00	; 0
    141a:	81 f4       	brne	.+32     	; 0x143c <free+0x3e>
    141c:	20 81       	ld	r18, Z
    141e:	31 81       	ldd	r19, Z+1	; 0x01
    1420:	28 0f       	add	r18, r24
    1422:	39 1f       	adc	r19, r25
    1424:	80 91 4b 03 	lds	r24, 0x034B
    1428:	90 91 4c 03 	lds	r25, 0x034C
    142c:	82 17       	cp	r24, r18
    142e:	93 07       	cpc	r25, r19
    1430:	79 f5       	brne	.+94     	; 0x1490 <free+0x92>
    1432:	f0 93 4c 03 	sts	0x034C, r31
    1436:	e0 93 4b 03 	sts	0x034B, r30
    143a:	6d c0       	rjmp	.+218    	; 0x1516 <free+0x118>
    143c:	de 01       	movw	r26, r28
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	ae 17       	cp	r26, r30
    1444:	bf 07       	cpc	r27, r31
    1446:	50 f4       	brcc	.+20     	; 0x145c <free+0x5e>
    1448:	12 96       	adiw	r26, 0x02	; 2
    144a:	4d 91       	ld	r20, X+
    144c:	5c 91       	ld	r21, X
    144e:	13 97       	sbiw	r26, 0x03	; 3
    1450:	9d 01       	movw	r18, r26
    1452:	41 15       	cp	r20, r1
    1454:	51 05       	cpc	r21, r1
    1456:	09 f1       	breq	.+66     	; 0x149a <free+0x9c>
    1458:	da 01       	movw	r26, r20
    145a:	f3 cf       	rjmp	.-26     	; 0x1442 <free+0x44>
    145c:	b3 83       	std	Z+3, r27	; 0x03
    145e:	a2 83       	std	Z+2, r26	; 0x02
    1460:	40 81       	ld	r20, Z
    1462:	51 81       	ldd	r21, Z+1	; 0x01
    1464:	84 0f       	add	r24, r20
    1466:	95 1f       	adc	r25, r21
    1468:	8a 17       	cp	r24, r26
    146a:	9b 07       	cpc	r25, r27
    146c:	71 f4       	brne	.+28     	; 0x148a <free+0x8c>
    146e:	8d 91       	ld	r24, X+
    1470:	9c 91       	ld	r25, X
    1472:	11 97       	sbiw	r26, 0x01	; 1
    1474:	84 0f       	add	r24, r20
    1476:	95 1f       	adc	r25, r21
    1478:	02 96       	adiw	r24, 0x02	; 2
    147a:	91 83       	std	Z+1, r25	; 0x01
    147c:	80 83       	st	Z, r24
    147e:	12 96       	adiw	r26, 0x02	; 2
    1480:	8d 91       	ld	r24, X+
    1482:	9c 91       	ld	r25, X
    1484:	13 97       	sbiw	r26, 0x03	; 3
    1486:	93 83       	std	Z+3, r25	; 0x03
    1488:	82 83       	std	Z+2, r24	; 0x02
    148a:	21 15       	cp	r18, r1
    148c:	31 05       	cpc	r19, r1
    148e:	29 f4       	brne	.+10     	; 0x149a <free+0x9c>
    1490:	f0 93 4e 03 	sts	0x034E, r31
    1494:	e0 93 4d 03 	sts	0x034D, r30
    1498:	3e c0       	rjmp	.+124    	; 0x1516 <free+0x118>
    149a:	d9 01       	movw	r26, r18
    149c:	13 96       	adiw	r26, 0x03	; 3
    149e:	fc 93       	st	X, r31
    14a0:	ee 93       	st	-X, r30
    14a2:	12 97       	sbiw	r26, 0x02	; 2
    14a4:	4d 91       	ld	r20, X+
    14a6:	5d 91       	ld	r21, X+
    14a8:	a4 0f       	add	r26, r20
    14aa:	b5 1f       	adc	r27, r21
    14ac:	ea 17       	cp	r30, r26
    14ae:	fb 07       	cpc	r31, r27
    14b0:	79 f4       	brne	.+30     	; 0x14d0 <free+0xd2>
    14b2:	80 81       	ld	r24, Z
    14b4:	91 81       	ldd	r25, Z+1	; 0x01
    14b6:	84 0f       	add	r24, r20
    14b8:	95 1f       	adc	r25, r21
    14ba:	02 96       	adiw	r24, 0x02	; 2
    14bc:	d9 01       	movw	r26, r18
    14be:	11 96       	adiw	r26, 0x01	; 1
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	82 81       	ldd	r24, Z+2	; 0x02
    14c6:	93 81       	ldd	r25, Z+3	; 0x03
    14c8:	13 96       	adiw	r26, 0x03	; 3
    14ca:	9c 93       	st	X, r25
    14cc:	8e 93       	st	-X, r24
    14ce:	12 97       	sbiw	r26, 0x02	; 2
    14d0:	e0 e0       	ldi	r30, 0x00	; 0
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	8a 81       	ldd	r24, Y+2	; 0x02
    14d6:	9b 81       	ldd	r25, Y+3	; 0x03
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	19 f0       	breq	.+6      	; 0x14e2 <free+0xe4>
    14dc:	fe 01       	movw	r30, r28
    14de:	ec 01       	movw	r28, r24
    14e0:	f9 cf       	rjmp	.-14     	; 0x14d4 <free+0xd6>
    14e2:	ce 01       	movw	r24, r28
    14e4:	02 96       	adiw	r24, 0x02	; 2
    14e6:	28 81       	ld	r18, Y
    14e8:	39 81       	ldd	r19, Y+1	; 0x01
    14ea:	82 0f       	add	r24, r18
    14ec:	93 1f       	adc	r25, r19
    14ee:	20 91 4b 03 	lds	r18, 0x034B
    14f2:	30 91 4c 03 	lds	r19, 0x034C
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	69 f4       	brne	.+26     	; 0x1516 <free+0x118>
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	29 f4       	brne	.+10     	; 0x150a <free+0x10c>
    1500:	10 92 4e 03 	sts	0x034E, r1
    1504:	10 92 4d 03 	sts	0x034D, r1
    1508:	02 c0       	rjmp	.+4      	; 0x150e <free+0x110>
    150a:	13 82       	std	Z+3, r1	; 0x03
    150c:	12 82       	std	Z+2, r1	; 0x02
    150e:	d0 93 4c 03 	sts	0x034C, r29
    1512:	c0 93 4b 03 	sts	0x034B, r28
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	08 95       	ret

0000151c <strnlen_P>:
    151c:	fc 01       	movw	r30, r24
    151e:	05 90       	lpm	r0, Z+
    1520:	61 50       	subi	r22, 0x01	; 1
    1522:	70 40       	sbci	r23, 0x00	; 0
    1524:	01 10       	cpse	r0, r1
    1526:	d8 f7       	brcc	.-10     	; 0x151e <strnlen_P+0x2>
    1528:	80 95       	com	r24
    152a:	90 95       	com	r25
    152c:	8e 0f       	add	r24, r30
    152e:	9f 1f       	adc	r25, r31
    1530:	08 95       	ret

00001532 <memset>:
    1532:	dc 01       	movw	r26, r24
    1534:	01 c0       	rjmp	.+2      	; 0x1538 <memset+0x6>
    1536:	6d 93       	st	X+, r22
    1538:	41 50       	subi	r20, 0x01	; 1
    153a:	50 40       	sbci	r21, 0x00	; 0
    153c:	e0 f7       	brcc	.-8      	; 0x1536 <memset+0x4>
    153e:	08 95       	ret

00001540 <strnlen>:
    1540:	fc 01       	movw	r30, r24
    1542:	61 50       	subi	r22, 0x01	; 1
    1544:	70 40       	sbci	r23, 0x00	; 0
    1546:	01 90       	ld	r0, Z+
    1548:	01 10       	cpse	r0, r1
    154a:	d8 f7       	brcc	.-10     	; 0x1542 <strnlen+0x2>
    154c:	80 95       	com	r24
    154e:	90 95       	com	r25
    1550:	8e 0f       	add	r24, r30
    1552:	9f 1f       	adc	r25, r31
    1554:	08 95       	ret

00001556 <fputc>:
    1556:	0f 93       	push	r16
    1558:	1f 93       	push	r17
    155a:	cf 93       	push	r28
    155c:	df 93       	push	r29
    155e:	18 2f       	mov	r17, r24
    1560:	09 2f       	mov	r16, r25
    1562:	eb 01       	movw	r28, r22
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	81 fd       	sbrc	r24, 1
    1568:	03 c0       	rjmp	.+6      	; 0x1570 <fputc+0x1a>
    156a:	8f ef       	ldi	r24, 0xFF	; 255
    156c:	9f ef       	ldi	r25, 0xFF	; 255
    156e:	20 c0       	rjmp	.+64     	; 0x15b0 <fputc+0x5a>
    1570:	82 ff       	sbrs	r24, 2
    1572:	10 c0       	rjmp	.+32     	; 0x1594 <fputc+0x3e>
    1574:	4e 81       	ldd	r20, Y+6	; 0x06
    1576:	5f 81       	ldd	r21, Y+7	; 0x07
    1578:	2c 81       	ldd	r18, Y+4	; 0x04
    157a:	3d 81       	ldd	r19, Y+5	; 0x05
    157c:	42 17       	cp	r20, r18
    157e:	53 07       	cpc	r21, r19
    1580:	7c f4       	brge	.+30     	; 0x15a0 <fputc+0x4a>
    1582:	e8 81       	ld	r30, Y
    1584:	f9 81       	ldd	r31, Y+1	; 0x01
    1586:	9f 01       	movw	r18, r30
    1588:	2f 5f       	subi	r18, 0xFF	; 255
    158a:	3f 4f       	sbci	r19, 0xFF	; 255
    158c:	39 83       	std	Y+1, r19	; 0x01
    158e:	28 83       	st	Y, r18
    1590:	10 83       	st	Z, r17
    1592:	06 c0       	rjmp	.+12     	; 0x15a0 <fputc+0x4a>
    1594:	e8 85       	ldd	r30, Y+8	; 0x08
    1596:	f9 85       	ldd	r31, Y+9	; 0x09
    1598:	81 2f       	mov	r24, r17
    159a:	19 95       	eicall
    159c:	89 2b       	or	r24, r25
    159e:	29 f7       	brne	.-54     	; 0x156a <fputc+0x14>
    15a0:	2e 81       	ldd	r18, Y+6	; 0x06
    15a2:	3f 81       	ldd	r19, Y+7	; 0x07
    15a4:	2f 5f       	subi	r18, 0xFF	; 255
    15a6:	3f 4f       	sbci	r19, 0xFF	; 255
    15a8:	3f 83       	std	Y+7, r19	; 0x07
    15aa:	2e 83       	std	Y+6, r18	; 0x06
    15ac:	81 2f       	mov	r24, r17
    15ae:	90 2f       	mov	r25, r16
    15b0:	df 91       	pop	r29
    15b2:	cf 91       	pop	r28
    15b4:	1f 91       	pop	r17
    15b6:	0f 91       	pop	r16
    15b8:	08 95       	ret

000015ba <__ultoa_invert>:
    15ba:	fa 01       	movw	r30, r20
    15bc:	aa 27       	eor	r26, r26
    15be:	28 30       	cpi	r18, 0x08	; 8
    15c0:	51 f1       	breq	.+84     	; 0x1616 <__ultoa_invert+0x5c>
    15c2:	20 31       	cpi	r18, 0x10	; 16
    15c4:	81 f1       	breq	.+96     	; 0x1626 <__ultoa_invert+0x6c>
    15c6:	e8 94       	clt
    15c8:	6f 93       	push	r22
    15ca:	6e 7f       	andi	r22, 0xFE	; 254
    15cc:	6e 5f       	subi	r22, 0xFE	; 254
    15ce:	7f 4f       	sbci	r23, 0xFF	; 255
    15d0:	8f 4f       	sbci	r24, 0xFF	; 255
    15d2:	9f 4f       	sbci	r25, 0xFF	; 255
    15d4:	af 4f       	sbci	r26, 0xFF	; 255
    15d6:	b1 e0       	ldi	r27, 0x01	; 1
    15d8:	3e d0       	rcall	.+124    	; 0x1656 <__ultoa_invert+0x9c>
    15da:	b4 e0       	ldi	r27, 0x04	; 4
    15dc:	3c d0       	rcall	.+120    	; 0x1656 <__ultoa_invert+0x9c>
    15de:	67 0f       	add	r22, r23
    15e0:	78 1f       	adc	r23, r24
    15e2:	89 1f       	adc	r24, r25
    15e4:	9a 1f       	adc	r25, r26
    15e6:	a1 1d       	adc	r26, r1
    15e8:	68 0f       	add	r22, r24
    15ea:	79 1f       	adc	r23, r25
    15ec:	8a 1f       	adc	r24, r26
    15ee:	91 1d       	adc	r25, r1
    15f0:	a1 1d       	adc	r26, r1
    15f2:	6a 0f       	add	r22, r26
    15f4:	71 1d       	adc	r23, r1
    15f6:	81 1d       	adc	r24, r1
    15f8:	91 1d       	adc	r25, r1
    15fa:	a1 1d       	adc	r26, r1
    15fc:	20 d0       	rcall	.+64     	; 0x163e <__ultoa_invert+0x84>
    15fe:	09 f4       	brne	.+2      	; 0x1602 <__ultoa_invert+0x48>
    1600:	68 94       	set
    1602:	3f 91       	pop	r19
    1604:	2a e0       	ldi	r18, 0x0A	; 10
    1606:	26 9f       	mul	r18, r22
    1608:	11 24       	eor	r1, r1
    160a:	30 19       	sub	r19, r0
    160c:	30 5d       	subi	r19, 0xD0	; 208
    160e:	31 93       	st	Z+, r19
    1610:	de f6       	brtc	.-74     	; 0x15c8 <__ultoa_invert+0xe>
    1612:	cf 01       	movw	r24, r30
    1614:	08 95       	ret
    1616:	46 2f       	mov	r20, r22
    1618:	47 70       	andi	r20, 0x07	; 7
    161a:	40 5d       	subi	r20, 0xD0	; 208
    161c:	41 93       	st	Z+, r20
    161e:	b3 e0       	ldi	r27, 0x03	; 3
    1620:	0f d0       	rcall	.+30     	; 0x1640 <__ultoa_invert+0x86>
    1622:	c9 f7       	brne	.-14     	; 0x1616 <__ultoa_invert+0x5c>
    1624:	f6 cf       	rjmp	.-20     	; 0x1612 <__ultoa_invert+0x58>
    1626:	46 2f       	mov	r20, r22
    1628:	4f 70       	andi	r20, 0x0F	; 15
    162a:	40 5d       	subi	r20, 0xD0	; 208
    162c:	4a 33       	cpi	r20, 0x3A	; 58
    162e:	18 f0       	brcs	.+6      	; 0x1636 <__ultoa_invert+0x7c>
    1630:	49 5d       	subi	r20, 0xD9	; 217
    1632:	31 fd       	sbrc	r19, 1
    1634:	40 52       	subi	r20, 0x20	; 32
    1636:	41 93       	st	Z+, r20
    1638:	02 d0       	rcall	.+4      	; 0x163e <__ultoa_invert+0x84>
    163a:	a9 f7       	brne	.-22     	; 0x1626 <__ultoa_invert+0x6c>
    163c:	ea cf       	rjmp	.-44     	; 0x1612 <__ultoa_invert+0x58>
    163e:	b4 e0       	ldi	r27, 0x04	; 4
    1640:	a6 95       	lsr	r26
    1642:	97 95       	ror	r25
    1644:	87 95       	ror	r24
    1646:	77 95       	ror	r23
    1648:	67 95       	ror	r22
    164a:	ba 95       	dec	r27
    164c:	c9 f7       	brne	.-14     	; 0x1640 <__ultoa_invert+0x86>
    164e:	00 97       	sbiw	r24, 0x00	; 0
    1650:	61 05       	cpc	r22, r1
    1652:	71 05       	cpc	r23, r1
    1654:	08 95       	ret
    1656:	9b 01       	movw	r18, r22
    1658:	ac 01       	movw	r20, r24
    165a:	0a 2e       	mov	r0, r26
    165c:	06 94       	lsr	r0
    165e:	57 95       	ror	r21
    1660:	47 95       	ror	r20
    1662:	37 95       	ror	r19
    1664:	27 95       	ror	r18
    1666:	ba 95       	dec	r27
    1668:	c9 f7       	brne	.-14     	; 0x165c <__ultoa_invert+0xa2>
    166a:	62 0f       	add	r22, r18
    166c:	73 1f       	adc	r23, r19
    166e:	84 1f       	adc	r24, r20
    1670:	95 1f       	adc	r25, r21
    1672:	a0 1d       	adc	r26, r0
    1674:	08 95       	ret

00001676 <_exit>:
    1676:	f8 94       	cli

00001678 <__stop_program>:
    1678:	ff cf       	rjmp	.-2      	; 0x1678 <__stop_program>
