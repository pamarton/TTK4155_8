
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e0  00800200  00001044  000010d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001044  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000023  008002e0  008002e0  000011b8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011b8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b8  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000014fd  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000091c  00000000  00000000  000028c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000cbf  00000000  00000000  000031e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000041c  00000000  00000000  00003ea4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000503  00000000  00000000  000042c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099a  00000000  00000000  000047c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000158  00000000  00000000  0000515d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
       6:	00 00       	nop
       8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
       a:	00 00       	nop
       c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
       e:	00 00       	nop
      10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
      12:	00 00       	nop
      14:	f2 c0       	rjmp	.+484    	; 0x1fa <__vector_5>
      16:	00 00       	nop
      18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
      1e:	00 00       	nop
      20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
      22:	00 00       	nop
      24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
      26:	00 00       	nop
      28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
      2e:	00 00       	nop
      30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
      32:	00 00       	nop
      34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
      36:	00 00       	nop
      38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
      3e:	00 00       	nop
      40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
      42:	00 00       	nop
      44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
      46:	00 00       	nop
      48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
      52:	00 00       	nop
      54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
      56:	00 00       	nop
      58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
      5e:	00 00       	nop
      60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
      62:	00 00       	nop
      64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
      66:	00 00       	nop
      68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
      6e:	00 00       	nop
      70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
      72:	00 00       	nop
      74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
      76:	00 00       	nop
      78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
      7e:	00 00       	nop
      80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
      82:	00 00       	nop
      84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
      86:	00 00       	nop
      88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
      8e:	00 00       	nop
      90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
      92:	00 00       	nop
      94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
      96:	00 00       	nop
      98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
      be:	00 00       	nop
      c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
      da:	00 00       	nop
      dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
      de:	00 00       	nop
      e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e4 e4       	ldi	r30, 0x44	; 68
      fc:	f0 e1       	ldi	r31, 0x10	; 16
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a0 3e       	cpi	r26, 0xE0	; 224
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	a0 ee       	ldi	r26, 0xE0	; 224
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a3 30       	cpi	r26, 0x03	; 3
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	ff d1       	rcall	.+1022   	; 0x51e <main>
     120:	8f c7       	rjmp	.+3870   	; 0x1040 <_exit>

00000122 <__bad_interrupt>:
     122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){						// What does this step do //NOT NECCECARY, but if we want to reference the recieved data from another part of the program this is necceccary
	return &CAN_receive_buffer;						// What does this step do
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
     124:	90 93 e2 02 	sts	0x02E2, r25
     128:	80 93 e1 02 	sts	0x02E1, r24
	CAN_send_buffer.length = length;
     12c:	60 93 e3 02 	sts	0x02E3, r22
	for(uint8_t i = 0; i < length; i++){
     130:	66 23       	and	r22, r22
     132:	41 f0       	breq	.+16     	; 0x144 <CAN_construct_message+0x20>
     134:	84 ee       	ldi	r24, 0xE4	; 228
     136:	92 e0       	ldi	r25, 0x02	; 2
     138:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
     13a:	11 92       	st	Z+, r1
     13c:	2e 2f       	mov	r18, r30
     13e:	28 1b       	sub	r18, r24
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
     140:	26 17       	cp	r18, r22
     142:	d8 f3       	brcs	.-10     	; 0x13a <CAN_construct_message+0x16>
     144:	08 95       	ret

00000146 <CAN_read>:
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     146:	27 c1       	rjmp	.+590    	; 0x396 <MCP2515_read>
}
     148:	08 95       	ret

0000014a <CAN_print>:
		return 1;
	}
	return 0;
}

void CAN_print(CAN_message_t message){
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	2b 97       	sbiw	r28, 0x0b	; 11
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	e9 82       	std	Y+1, r14	; 0x01
     16c:	fa 82       	std	Y+2, r15	; 0x02
     16e:	c0 2e       	mov	r12, r16
     170:	0b 83       	std	Y+3, r16	; 0x03
     172:	1c 83       	std	Y+4, r17	; 0x04
     174:	2d 83       	std	Y+5, r18	; 0x05
     176:	3e 83       	std	Y+6, r19	; 0x06
     178:	4f 83       	std	Y+7, r20	; 0x07
     17a:	58 87       	std	Y+8, r21	; 0x08
     17c:	69 87       	std	Y+9, r22	; 0x09
     17e:	7a 87       	std	Y+10, r23	; 0x0a
     180:	8b 87       	std	Y+11, r24	; 0x0b
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
     182:	1f 92       	push	r1
     184:	0f 93       	push	r16
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	8f 93       	push	r24
     18a:	89 81       	ldd	r24, Y+1	; 0x01
     18c:	8f 93       	push	r24
     18e:	86 e0       	ldi	r24, 0x06	; 6
     190:	92 e0       	ldi	r25, 0x02	; 2
     192:	9f 93       	push	r25
     194:	8f 93       	push	r24
     196:	3a d3       	rcall	.+1652   	; 0x80c <printf>
	for(uint8_t i = 0; i < message.length; i++){
     198:	0f 90       	pop	r0
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	00 23       	and	r16, r16
     1a6:	d1 f0       	breq	.+52     	; 0x1dc <CAN_print+0x92>
     1a8:	7e 01       	movw	r14, r28
     1aa:	84 e0       	ldi	r24, 0x04	; 4
     1ac:	e8 0e       	add	r14, r24
     1ae:	f1 1c       	adc	r15, r1
     1b0:	d1 2c       	mov	r13, r1
		printf("%i\t",message.data[i]);
     1b2:	0a e1       	ldi	r16, 0x1A	; 26
     1b4:	12 e0       	ldi	r17, 0x02	; 2
     1b6:	f7 01       	movw	r30, r14
     1b8:	21 91       	ld	r18, Z+
     1ba:	7f 01       	movw	r14, r30
     1bc:	82 2f       	mov	r24, r18
     1be:	99 27       	eor	r25, r25
     1c0:	87 fd       	sbrc	r24, 7
     1c2:	90 95       	com	r25
     1c4:	9f 93       	push	r25
     1c6:	2f 93       	push	r18
     1c8:	1f 93       	push	r17
     1ca:	0f 93       	push	r16
     1cc:	1f d3       	rcall	.+1598   	; 0x80c <printf>
	return 0;
}

void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
     1ce:	d3 94       	inc	r13
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	dc 10       	cpse	r13, r12
     1da:	ed cf       	rjmp	.-38     	; 0x1b6 <CAN_print+0x6c>
		printf("%i\t",message.data[i]);
	}
}
     1dc:	2b 96       	adiw	r28, 0x0b	; 11
     1de:	0f b6       	in	r0, 0x3f	; 63
     1e0:	f8 94       	cli
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	0f be       	out	0x3f, r0	; 63
     1e6:	cd bf       	out	0x3d, r28	; 61
     1e8:	df 91       	pop	r29
     1ea:	cf 91       	pop	r28
     1ec:	1f 91       	pop	r17
     1ee:	0f 91       	pop	r16
     1f0:	ff 90       	pop	r15
     1f2:	ef 90       	pop	r14
     1f4:	df 90       	pop	r13
     1f6:	cf 90       	pop	r12
     1f8:	08 95       	ret

000001fa <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     1fa:	1f 92       	push	r1
     1fc:	0f 92       	push	r0
     1fe:	0f b6       	in	r0, 0x3f	; 63
     200:	0f 92       	push	r0
     202:	11 24       	eor	r1, r1
     204:	8f 93       	push	r24
	receive_flag = 1;
     206:	81 e0       	ldi	r24, 0x01	; 1
     208:	80 93 e0 02 	sts	0x02E0, r24
}
     20c:	8f 91       	pop	r24
     20e:	0f 90       	pop	r0
     210:	0f be       	out	0x3f, r0	; 63
     212:	0f 90       	pop	r0
     214:	1f 90       	pop	r1
     216:	18 95       	reti

00000218 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
     218:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     21a:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     21c:	ea e6       	ldi	r30, 0x6A	; 106
     21e:	f0 e0       	ldi	r31, 0x00	; 0
     220:	80 81       	ld	r24, Z
     222:	8e 7f       	andi	r24, 0xFE	; 254
     224:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     226:	80 81       	ld	r24, Z
     228:	82 60       	ori	r24, 0x02	; 2
     22a:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     22c:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
		
	
	#endif
	sei();
     22e:	78 94       	sei
     230:	08 95       	ret

00000232 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     232:	db d0       	rcall	.+438    	; 0x3ea <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     234:	68 e0       	ldi	r22, 0x08	; 8
     236:	88 e2       	ldi	r24, 0x28	; 40
     238:	90 e0       	ldi	r25, 0x00	; 0
     23a:	74 df       	rcall	.-280    	; 0x124 <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     23c:	4f ef       	ldi	r20, 0xFF	; 255
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	64 e6       	ldi	r22, 0x64	; 100
     242:	80 e6       	ldi	r24, 0x60	; 96
     244:	b6 d0       	rcall	.+364    	; 0x3b2 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     246:	4f ef       	ldi	r20, 0xFF	; 255
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	64 e6       	ldi	r22, 0x64	; 100
     24c:	80 e7       	ldi	r24, 0x70	; 112
     24e:	b1 d0       	rcall	.+354    	; 0x3b2 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	61 e0       	ldi	r22, 0x01	; 1
     256:	8b e2       	ldi	r24, 0x2B	; 43
     258:	ac d0       	rcall	.+344    	; 0x3b2 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	60 ee       	ldi	r22, 0xE0	; 224
     260:	8f e0       	ldi	r24, 0x0F	; 15
     262:	a7 d0       	rcall	.+334    	; 0x3b2 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     264:	d9 df       	rcall	.-78     	; 0x218 <CAN_interrupt_setup>
	
	#if UART_ENABLE
		printf("MCP_CANSTAT: %i\n", MCP2515_read(MCP_CANSTAT));//comment out later
     266:	8e e0       	ldi	r24, 0x0E	; 14
     268:	96 d0       	rcall	.+300    	; 0x396 <MCP2515_read>
     26a:	9f 93       	push	r25
     26c:	8f 93       	push	r24
     26e:	8e e1       	ldi	r24, 0x1E	; 30
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	9f 93       	push	r25
     274:	8f 93       	push	r24
     276:	ca d2       	rcall	.+1428   	; 0x80c <printf>
		printf("CAN initialized.\n\n");
     278:	8f e2       	ldi	r24, 0x2F	; 47
     27a:	92 e0       	ldi	r25, 0x02	; 2
     27c:	d8 d2       	rcall	.+1456   	; 0x82e <puts>
     27e:	0f 90       	pop	r0
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	08 95       	ret

00000288 <CAN_reception_complete>:
	
	#endif
	sei();
}

int8_t CAN_reception_complete(void){
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) | (MCP2515_read(MCP_CANINTF) & MCP_RX1IF)));
     28c:	8c e2       	ldi	r24, 0x2C	; 44
     28e:	83 d0       	rcall	.+262    	; 0x396 <MCP2515_read>
     290:	ec 01       	movw	r28, r24
     292:	8c e2       	ldi	r24, 0x2C	; 44
     294:	80 d0       	rcall	.+256    	; 0x396 <MCP2515_read>
     296:	82 70       	andi	r24, 0x02	; 2
     298:	99 27       	eor	r25, r25
     29a:	c1 70       	andi	r28, 0x01	; 1
     29c:	dd 27       	eor	r29, r29
     29e:	c8 2b       	or	r28, r24
     2a0:	d9 2b       	or	r29, r25
     2a2:	cd 2b       	or	r28, r29
     2a4:	99 f3       	breq	.-26     	; 0x28c <CAN_reception_complete+0x4>
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     2a6:	8c e2       	ldi	r24, 0x2C	; 44
     2a8:	76 d0       	rcall	.+236    	; 0x396 <MCP2515_read>
     2aa:	80 ff       	sbrs	r24, 0
     2ac:	07 c0       	rjmp	.+14     	; 0x2bc <CAN_reception_complete+0x34>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     2ae:	40 e0       	ldi	r20, 0x00	; 0
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	61 e0       	ldi	r22, 0x01	; 1
     2b4:	8c e2       	ldi	r24, 0x2C	; 44
     2b6:	7d d0       	rcall	.+250    	; 0x3b2 <MCP2515_bit_modify>
		return 0;
     2b8:	80 e0       	ldi	r24, 0x00	; 0
     2ba:	0c c0       	rjmp	.+24     	; 0x2d4 <CAN_reception_complete+0x4c>
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     2bc:	8c e2       	ldi	r24, 0x2C	; 44
     2be:	6b d0       	rcall	.+214    	; 0x396 <MCP2515_read>
     2c0:	81 ff       	sbrs	r24, 1
     2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <CAN_reception_complete+0x4a>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     2c4:	40 e0       	ldi	r20, 0x00	; 0
     2c6:	50 e0       	ldi	r21, 0x00	; 0
     2c8:	62 e0       	ldi	r22, 0x02	; 2
     2ca:	8c e2       	ldi	r24, 0x2C	; 44
     2cc:	72 d0       	rcall	.+228    	; 0x3b2 <MCP2515_bit_modify>
		return 1;
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	01 c0       	rjmp	.+2      	; 0x2d4 <CAN_reception_complete+0x4c>
	}
	return -1;
     2d2:	8f ef       	ldi	r24, 0xFF	; 255
}
     2d4:	df 91       	pop	r29
     2d6:	cf 91       	pop	r28
     2d8:	08 95       	ret

000002da <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
	if(receive_flag){
     2e6:	80 91 e0 02 	lds	r24, 0x02E0
     2ea:	88 23       	and	r24, r24
     2ec:	09 f4       	brne	.+2      	; 0x2f0 <CAN_data_receive+0x16>
     2ee:	4b c0       	rjmp	.+150    	; 0x386 <CAN_data_receive+0xac>
		receive_flag = 0;
     2f0:	10 92 e0 02 	sts	0x02E0, r1
		uint8_t n = CAN_reception_complete();
     2f4:	c9 df       	rcall	.-110    	; 0x288 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     2f6:	c8 2f       	mov	r28, r24
     2f8:	c2 95       	swap	r28
     2fa:	c0 7f       	andi	r28, 0xF0	; 240
     2fc:	82 e6       	ldi	r24, 0x62	; 98
     2fe:	8c 0f       	add	r24, r28
     300:	22 df       	rcall	.-444    	; 0x146 <CAN_read>
     302:	81 e6       	ldi	r24, 0x61	; 97
     304:	8c 0f       	add	r24, r28
     306:	1f df       	rcall	.-450    	; 0x146 <CAN_read>
     308:	28 e0       	ldi	r18, 0x08	; 8
     30a:	82 9f       	mul	r24, r18
     30c:	c0 01       	movw	r24, r0
     30e:	11 24       	eor	r1, r1
     310:	90 93 ed 02 	sts	0x02ED, r25
     314:	80 93 ec 02 	sts	0x02EC, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     318:	85 e6       	ldi	r24, 0x65	; 101
     31a:	8c 0f       	add	r24, r28
     31c:	14 df       	rcall	.-472    	; 0x146 <CAN_read>
     31e:	8f 70       	andi	r24, 0x0F	; 15
     320:	80 93 ee 02 	sts	0x02EE, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     324:	88 23       	and	r24, r24
     326:	79 f0       	breq	.+30     	; 0x346 <CAN_data_receive+0x6c>
     328:	10 e0       	ldi	r17, 0x00	; 0
     32a:	ce ee       	ldi	r28, 0xEE	; 238
     32c:	d2 e0       	ldi	r29, 0x02	; 2
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     32e:	86 e6       	ldi	r24, 0x66	; 102
     330:	81 0f       	add	r24, r17
     332:	09 df       	rcall	.-494    	; 0x146 <CAN_read>
     334:	e1 2f       	mov	r30, r17
     336:	f0 e0       	ldi	r31, 0x00	; 0
     338:	e4 51       	subi	r30, 0x14	; 20
     33a:	fd 4f       	sbci	r31, 0xFD	; 253
     33c:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     33e:	1f 5f       	subi	r17, 0xFF	; 255
     340:	88 81       	ld	r24, Y
     342:	18 17       	cp	r17, r24
     344:	a0 f3       	brcs	.-24     	; 0x32e <CAN_data_receive+0x54>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		#if UART_ENABLE || 1
			printf("\nRECIVED MESSAGE:");
     346:	81 e4       	ldi	r24, 0x41	; 65
     348:	92 e0       	ldi	r25, 0x02	; 2
     34a:	9f 93       	push	r25
     34c:	8f 93       	push	r24
     34e:	5e d2       	rcall	.+1212   	; 0x80c <printf>
			CAN_print(CAN_receive_buffer);
     350:	e0 90 ec 02 	lds	r14, 0x02EC
     354:	f0 90 ed 02 	lds	r15, 0x02ED
     358:	00 91 ee 02 	lds	r16, 0x02EE
     35c:	10 91 ef 02 	lds	r17, 0x02EF
     360:	20 91 f0 02 	lds	r18, 0x02F0
     364:	30 91 f1 02 	lds	r19, 0x02F1
     368:	40 91 f2 02 	lds	r20, 0x02F2
     36c:	50 91 f3 02 	lds	r21, 0x02F3
     370:	60 91 f4 02 	lds	r22, 0x02F4
     374:	70 91 f5 02 	lds	r23, 0x02F5
     378:	80 91 f6 02 	lds	r24, 0x02F6
     37c:	e6 de       	rcall	.-564    	; 0x14a <CAN_print>
		#endif
		return 1;
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	01 c0       	rjmp	.+2      	; 0x388 <CAN_data_receive+0xae>
	}
	return 0;
     386:	80 e0       	ldi	r24, 0x00	; 0
}
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	0f 91       	pop	r16
     390:	ff 90       	pop	r15
     392:	ef 90       	pop	r14
     394:	08 95       	ret

00000396 <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     396:	cf 93       	push	r28
     398:	c8 2f       	mov	r28, r24
     39a:	36 d0       	rcall	.+108    	; 0x408 <SPI_select>
     39c:	83 e0       	ldi	r24, 0x03	; 3
     39e:	28 d0       	rcall	.+80     	; 0x3f0 <SPI_send>
     3a0:	8c 2f       	mov	r24, r28
     3a2:	26 d0       	rcall	.+76     	; 0x3f0 <SPI_send>
     3a4:	2a d0       	rcall	.+84     	; 0x3fa <SPI_receive>
     3a6:	c8 2f       	mov	r28, r24
     3a8:	31 d0       	rcall	.+98     	; 0x40c <SPI_deselect>
     3aa:	8c 2f       	mov	r24, r28
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     3b2:	1f 93       	push	r17
     3b4:	cf 93       	push	r28
     3b6:	df 93       	push	r29
     3b8:	18 2f       	mov	r17, r24
     3ba:	d6 2f       	mov	r29, r22
     3bc:	c4 2f       	mov	r28, r20
	SPI_select();
     3be:	24 d0       	rcall	.+72     	; 0x408 <SPI_select>
	SPI_send(MCP_BITMOD);
     3c0:	85 e0       	ldi	r24, 0x05	; 5
     3c2:	16 d0       	rcall	.+44     	; 0x3f0 <SPI_send>
	SPI_send(adr);
     3c4:	81 2f       	mov	r24, r17
     3c6:	14 d0       	rcall	.+40     	; 0x3f0 <SPI_send>
	SPI_send(mask);
     3c8:	8d 2f       	mov	r24, r29
     3ca:	12 d0       	rcall	.+36     	; 0x3f0 <SPI_send>
	SPI_send(data);
     3cc:	8c 2f       	mov	r24, r28
     3ce:	10 d0       	rcall	.+32     	; 0x3f0 <SPI_send>
	SPI_deselect();
     3d0:	1d d0       	rcall	.+58     	; 0x40c <SPI_deselect>
}
     3d2:	df 91       	pop	r29
     3d4:	cf 91       	pop	r28
     3d6:	1f 91       	pop	r17
     3d8:	08 95       	ret

000003da <MCP2515_reset>:


void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
     3da:	84 e9       	ldi	r24, 0x94	; 148
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	27 d2       	rcall	.+1102   	; 0x82e <puts>
	#endif
	SPI_select();
     3e0:	13 d0       	rcall	.+38     	; 0x408 <SPI_select>
	SPI_send(MCP_RESET);
     3e2:	80 ec       	ldi	r24, 0xC0	; 192
     3e4:	05 d0       	rcall	.+10     	; 0x3f0 <SPI_send>
	SPI_deselect();
     3e6:	12 c0       	rjmp	.+36     	; 0x40c <SPI_deselect>
     3e8:	08 95       	ret

000003ea <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     3ea:	12 d0       	rcall	.+36     	; 0x410 <SPI_initialize>
	MCP2515_reset();
     3ec:	f6 cf       	rjmp	.-20     	; 0x3da <MCP2515_reset>
     3ee:	08 95       	ret

000003f0 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     3f0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     3f2:	0d b4       	in	r0, 0x2d	; 45
     3f4:	07 fe       	sbrs	r0, 7
     3f6:	fd cf       	rjmp	.-6      	; 0x3f2 <SPI_send+0x2>

}
     3f8:	08 95       	ret

000003fa <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	f9 df       	rcall	.-14     	; 0x3f0 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     3fe:	0d b4       	in	r0, 0x2d	; 45
     400:	07 fe       	sbrs	r0, 7
     402:	fd cf       	rjmp	.-6      	; 0x3fe <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     404:	8e b5       	in	r24, 0x2e	; 46
}
     406:	08 95       	ret

00000408 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     408:	2f 98       	cbi	0x05, 7	; 5
     40a:	08 95       	ret

0000040c <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     40c:	2f 9a       	sbi	0x05, 7	; 5
     40e:	08 95       	ret

00000410 <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     410:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     412:	8c b5       	in	r24, 0x2c	; 44
     414:	81 60       	ori	r24, 0x01	; 1
     416:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     418:	84 b1       	in	r24, 0x04	; 4
     41a:	86 68       	ori	r24, 0x86	; 134
     41c:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     41e:	8c b5       	in	r24, 0x2c	; 44
     420:	80 65       	ori	r24, 0x50	; 80
     422:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     424:	f3 df       	rcall	.-26     	; 0x40c <SPI_deselect>
	#if UART_ENABLE
		printf("SPI communication initialized.\n");
     426:	86 ea       	ldi	r24, 0xA6	; 166
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	01 c2       	rjmp	.+1026   	; 0x82e <puts>
     42c:	08 95       	ret

0000042e <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     42e:	e0 ec       	ldi	r30, 0xC0	; 192
     430:	f0 e0       	ldi	r31, 0x00	; 0
     432:	90 81       	ld	r25, Z
     434:	95 ff       	sbrs	r25, 5
     436:	fd cf       	rjmp	.-6      	; 0x432 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     438:	80 93 c6 00 	sts	0x00C6, r24
     43c:	08 95       	ret

0000043e <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     43e:	e0 ec       	ldi	r30, 0xC0	; 192
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	88 23       	and	r24, r24
     446:	ec f7       	brge	.-6      	; 0x442 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     448:	80 91 c6 00 	lds	r24, 0x00C6
}
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	08 95       	ret

00000450 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     450:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     454:	87 e6       	ldi	r24, 0x67	; 103
     456:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     45a:	88 e1       	ldi	r24, 0x18	; 24
     45c:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     460:	8e e0       	ldi	r24, 0x0E	; 14
     462:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     466:	6f e1       	ldi	r22, 0x1F	; 31
     468:	72 e0       	ldi	r23, 0x02	; 2
     46a:	87 e1       	ldi	r24, 0x17	; 23
     46c:	92 e0       	ldi	r25, 0x02	; 2
     46e:	84 c1       	rjmp	.+776    	; 0x778 <fdevopen>
     470:	08 95       	ret

00000472 <buzzer_set_freq>:
void buzzer_set_period(double period){	//vel is given in nano-seconds
	OCR4A = period;
	buzzer_on = 1;
}

void buzzer_set_freq(double freq){
     472:	9b 01       	movw	r18, r22
     474:	ac 01       	movw	r20, r24
	DDRH |= (1 << PH3);
     476:	e1 e0       	ldi	r30, 0x01	; 1
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	88 60       	ori	r24, 0x08	; 8
     47e:	80 83       	st	Z, r24
	
	ICR4 = (int)(SCALAR_IN_MS * 1000 / freq);
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	74 e2       	ldi	r23, 0x24	; 36
     484:	84 e7       	ldi	r24, 0x74	; 116
     486:	96 e4       	ldi	r25, 0x46	; 70
     488:	8d d0       	rcall	.+282    	; 0x5a4 <__divsf3>
     48a:	f4 d0       	rcall	.+488    	; 0x674 <__fixsfsi>
     48c:	70 93 a7 00 	sts	0x00A7, r23
     490:	60 93 a6 00 	sts	0x00A6, r22
	OCR4A = 0;
     494:	10 92 a9 00 	sts	0x00A9, r1
     498:	10 92 a8 00 	sts	0x00A8, r1
	buzzer_on = 1;
     49c:	81 e0       	ldi	r24, 0x01	; 1
     49e:	80 93 f7 02 	sts	0x02F7, r24
     4a2:	08 95       	ret

000004a4 <buzzer_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;
uint8_t buzzer_on;
void buzzer_init(void){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	DDRH |= (1 << PH3);
     4a4:	e1 e0       	ldi	r30, 0x01	; 1
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	80 81       	ld	r24, Z
     4aa:	88 60       	ori	r24, 0x08	; 8
     4ac:	80 83       	st	Z, r24
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	TCCR4A &= ~(1<<WGM40);
     4ae:	e0 ea       	ldi	r30, 0xA0	; 160
     4b0:	f0 e0       	ldi	r31, 0x00	; 0
     4b2:	80 81       	ld	r24, Z
     4b4:	8e 7f       	andi	r24, 0xFE	; 254
     4b6:	80 83       	st	Z, r24
	TCCR4A |= (1<<WGM41);
     4b8:	80 81       	ld	r24, Z
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	80 83       	st	Z, r24
	TCCR4B |= (1<<WGM43)|(1<<WGM42); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
     4be:	a1 ea       	ldi	r26, 0xA1	; 161
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	8c 91       	ld	r24, X
     4c4:	88 61       	ori	r24, 0x18	; 24
     4c6:	8c 93       	st	X, r24
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	TCCR4A |= (1<<COM4A1);
     4c8:	80 81       	ld	r24, Z
     4ca:	80 68       	ori	r24, 0x80	; 128
     4cc:	80 83       	st	Z, r24
	TCCR4A &= ~(1<<COM4A0);
     4ce:	80 81       	ld	r24, Z
     4d0:	8f 7b       	andi	r24, 0xBF	; 191
     4d2:	80 83       	st	Z, r24

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	TCCR4B |= (1<<CS42) | (1<<CS40);
     4d4:	8c 91       	ld	r24, X
     4d6:	85 60       	ori	r24, 0x05	; 5
     4d8:	8c 93       	st	X, r24
	TCCR4B &= ~(1<<CS41);
     4da:	8c 91       	ld	r24, X
     4dc:	8d 7f       	andi	r24, 0xFD	; 253
     4de:	8c 93       	st	X, r24
	//buzzer_of();
	//ICR3 = F_CPU/128/2;
}

void buzzer_set_period(double period){	//vel is given in nano-seconds
	OCR4A = period;
     4e0:	83 e0       	ldi	r24, 0x03	; 3
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	90 93 a9 00 	sts	0x00A9, r25
     4e8:	80 93 a8 00 	sts	0x00A8, r24
	buzzer_on = 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	80 93 f7 02 	sts	0x02F7, r24
	TCCR4B |= (1<<CS42) | (1<<CS40);
	TCCR4B &= ~(1<<CS41);
	
	// Define TOP. Compare Table 17.2.				
	buzzer_set_period(3);
	buzzer_set_freq(4);
     4f2:	60 e0       	ldi	r22, 0x00	; 0
     4f4:	70 e0       	ldi	r23, 0x00	; 0
     4f6:	80 e8       	ldi	r24, 0x80	; 128
     4f8:	90 e4       	ldi	r25, 0x40	; 64
     4fa:	bb cf       	rjmp	.-138    	; 0x472 <buzzer_set_freq>
     4fc:	08 95       	ret

000004fe <buzzer_of>:
	OCR4A = 0;
	buzzer_on = 1;
}

void buzzer_of(){
	DDRH &= ~(1 << PH3);
     4fe:	e1 e0       	ldi	r30, 0x01	; 1
     500:	f1 e0       	ldi	r31, 0x01	; 1
     502:	80 81       	ld	r24, Z
     504:	87 7f       	andi	r24, 0xF7	; 247
     506:	80 83       	st	Z, r24
	buzzer_on = 0;
     508:	10 92 f7 02 	sts	0x02F7, r1
     50c:	08 95       	ret

0000050e <init_all>:
    return 0;
}

void init_all(void){
	
	cli();
     50e:	f8 94       	cli
	
	CAN_initialize();
     510:	90 de       	rcall	.-736    	; 0x232 <CAN_initialize>
	
	
	#if UART_ENABLE
		init_UART();
     512:	9e df       	rcall	.-196    	; 0x450 <init_UART>
		printf("Program initialized\n");
     514:	85 ec       	ldi	r24, 0xC5	; 197
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	8a d1       	rcall	.+788    	; 0x82e <puts>
	#endif
	sei();
     51a:	78 94       	sei
     51c:	08 95       	ret

0000051e <main>:


void init_all(void);

int main(void){
	init_all();
     51e:	f7 df       	rcall	.-18     	; 0x50e <init_all>
	
	printf("Hallo\n");
     520:	89 ed       	ldi	r24, 0xD9	; 217
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	84 d1       	rcall	.+776    	; 0x82e <puts>
	//servo_init();
	buzzer_init();
     526:	be df       	rcall	.-132    	; 0x4a4 <buzzer_init>
	buzzer_set_freq(300);
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	86 e9       	ldi	r24, 0x96	; 150
     52e:	93 e4       	ldi	r25, 0x43	; 67
     530:	a0 df       	rcall	.-192    	; 0x472 <buzzer_set_freq>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     532:	2f ef       	ldi	r18, 0xFF	; 255
     534:	85 ea       	ldi	r24, 0xA5	; 165
     536:	9e e0       	ldi	r25, 0x0E	; 14
     538:	21 50       	subi	r18, 0x01	; 1
     53a:	80 40       	sbci	r24, 0x00	; 0
     53c:	90 40       	sbci	r25, 0x00	; 0
     53e:	e1 f7       	brne	.-8      	; 0x538 <main+0x1a>
     540:	00 c0       	rjmp	.+0      	; 0x542 <main+0x24>
     542:	00 00       	nop
	_delay_ms(300);
	buzzer_of();
     544:	dc df       	rcall	.-72     	; 0x4fe <buzzer_of>
	while(1){
		if(sendCAN){
			//CAN_message_send(data,0);
			//data[7]--;
		}
		if(CAN_data_receive()){
     546:	c9 de       	rcall	.-622    	; 0x2da <CAN_data_receive>
     548:	88 23       	and	r24, r24
     54a:	e9 f3       	breq	.-6      	; 0x546 <main+0x28>
			//_delay_ms(1000);
			buzzer_set_freq(300);
     54c:	60 e0       	ldi	r22, 0x00	; 0
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	86 e9       	ldi	r24, 0x96	; 150
     552:	93 e4       	ldi	r25, 0x43	; 67
     554:	8e df       	rcall	.-228    	; 0x472 <buzzer_set_freq>
     556:	2f ef       	ldi	r18, 0xFF	; 255
     558:	85 ea       	ldi	r24, 0xA5	; 165
     55a:	9e e0       	ldi	r25, 0x0E	; 14
     55c:	21 50       	subi	r18, 0x01	; 1
     55e:	80 40       	sbci	r24, 0x00	; 0
     560:	90 40       	sbci	r25, 0x00	; 0
     562:	e1 f7       	brne	.-8      	; 0x55c <main+0x3e>
     564:	00 c0       	rjmp	.+0      	; 0x566 <main+0x48>
     566:	00 00       	nop
			_delay_ms(300);
			buzzer_set_freq(200);
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	88 e4       	ldi	r24, 0x48	; 72
     56e:	93 e4       	ldi	r25, 0x43	; 67
     570:	80 df       	rcall	.-256    	; 0x472 <buzzer_set_freq>
     572:	2f ef       	ldi	r18, 0xFF	; 255
     574:	85 ea       	ldi	r24, 0xA5	; 165
     576:	9e e0       	ldi	r25, 0x0E	; 14
     578:	21 50       	subi	r18, 0x01	; 1
     57a:	80 40       	sbci	r24, 0x00	; 0
     57c:	90 40       	sbci	r25, 0x00	; 0
     57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x5a>
     580:	00 c0       	rjmp	.+0      	; 0x582 <main+0x64>
     582:	00 00       	nop
			_delay_ms(300);
			buzzer_set_freq(100);
     584:	60 e0       	ldi	r22, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	88 ec       	ldi	r24, 0xC8	; 200
     58a:	92 e4       	ldi	r25, 0x42	; 66
     58c:	72 df       	rcall	.-284    	; 0x472 <buzzer_set_freq>
     58e:	2f ef       	ldi	r18, 0xFF	; 255
     590:	85 ea       	ldi	r24, 0xA5	; 165
     592:	9e e0       	ldi	r25, 0x0E	; 14
     594:	21 50       	subi	r18, 0x01	; 1
     596:	80 40       	sbci	r24, 0x00	; 0
     598:	90 40       	sbci	r25, 0x00	; 0
     59a:	e1 f7       	brne	.-8      	; 0x594 <main+0x76>
     59c:	00 c0       	rjmp	.+0      	; 0x59e <main+0x80>
     59e:	00 00       	nop
			_delay_ms(300);
			buzzer_of();
     5a0:	ae df       	rcall	.-164    	; 0x4fe <buzzer_of>
     5a2:	d1 cf       	rjmp	.-94     	; 0x546 <main+0x28>

000005a4 <__divsf3>:
     5a4:	0c d0       	rcall	.+24     	; 0x5be <__divsf3x>
     5a6:	ae c0       	rjmp	.+348    	; 0x704 <__fp_round>
     5a8:	a6 d0       	rcall	.+332    	; 0x6f6 <__fp_pscB>
     5aa:	40 f0       	brcs	.+16     	; 0x5bc <__divsf3+0x18>
     5ac:	9d d0       	rcall	.+314    	; 0x6e8 <__fp_pscA>
     5ae:	30 f0       	brcs	.+12     	; 0x5bc <__divsf3+0x18>
     5b0:	21 f4       	brne	.+8      	; 0x5ba <__divsf3+0x16>
     5b2:	5f 3f       	cpi	r21, 0xFF	; 255
     5b4:	19 f0       	breq	.+6      	; 0x5bc <__divsf3+0x18>
     5b6:	8f c0       	rjmp	.+286    	; 0x6d6 <__fp_inf>
     5b8:	51 11       	cpse	r21, r1
     5ba:	d8 c0       	rjmp	.+432    	; 0x76c <__fp_szero>
     5bc:	92 c0       	rjmp	.+292    	; 0x6e2 <__fp_nan>

000005be <__divsf3x>:
     5be:	b3 d0       	rcall	.+358    	; 0x726 <__fp_split3>
     5c0:	98 f3       	brcs	.-26     	; 0x5a8 <__divsf3+0x4>

000005c2 <__divsf3_pse>:
     5c2:	99 23       	and	r25, r25
     5c4:	c9 f3       	breq	.-14     	; 0x5b8 <__divsf3+0x14>
     5c6:	55 23       	and	r21, r21
     5c8:	b1 f3       	breq	.-20     	; 0x5b6 <__divsf3+0x12>
     5ca:	95 1b       	sub	r25, r21
     5cc:	55 0b       	sbc	r21, r21
     5ce:	bb 27       	eor	r27, r27
     5d0:	aa 27       	eor	r26, r26
     5d2:	62 17       	cp	r22, r18
     5d4:	73 07       	cpc	r23, r19
     5d6:	84 07       	cpc	r24, r20
     5d8:	38 f0       	brcs	.+14     	; 0x5e8 <__divsf3_pse+0x26>
     5da:	9f 5f       	subi	r25, 0xFF	; 255
     5dc:	5f 4f       	sbci	r21, 0xFF	; 255
     5de:	22 0f       	add	r18, r18
     5e0:	33 1f       	adc	r19, r19
     5e2:	44 1f       	adc	r20, r20
     5e4:	aa 1f       	adc	r26, r26
     5e6:	a9 f3       	breq	.-22     	; 0x5d2 <__divsf3_pse+0x10>
     5e8:	33 d0       	rcall	.+102    	; 0x650 <__divsf3_pse+0x8e>
     5ea:	0e 2e       	mov	r0, r30
     5ec:	3a f0       	brmi	.+14     	; 0x5fc <__divsf3_pse+0x3a>
     5ee:	e0 e8       	ldi	r30, 0x80	; 128
     5f0:	30 d0       	rcall	.+96     	; 0x652 <__divsf3_pse+0x90>
     5f2:	91 50       	subi	r25, 0x01	; 1
     5f4:	50 40       	sbci	r21, 0x00	; 0
     5f6:	e6 95       	lsr	r30
     5f8:	00 1c       	adc	r0, r0
     5fa:	ca f7       	brpl	.-14     	; 0x5ee <__divsf3_pse+0x2c>
     5fc:	29 d0       	rcall	.+82     	; 0x650 <__divsf3_pse+0x8e>
     5fe:	fe 2f       	mov	r31, r30
     600:	27 d0       	rcall	.+78     	; 0x650 <__divsf3_pse+0x8e>
     602:	66 0f       	add	r22, r22
     604:	77 1f       	adc	r23, r23
     606:	88 1f       	adc	r24, r24
     608:	bb 1f       	adc	r27, r27
     60a:	26 17       	cp	r18, r22
     60c:	37 07       	cpc	r19, r23
     60e:	48 07       	cpc	r20, r24
     610:	ab 07       	cpc	r26, r27
     612:	b0 e8       	ldi	r27, 0x80	; 128
     614:	09 f0       	breq	.+2      	; 0x618 <__divsf3_pse+0x56>
     616:	bb 0b       	sbc	r27, r27
     618:	80 2d       	mov	r24, r0
     61a:	bf 01       	movw	r22, r30
     61c:	ff 27       	eor	r31, r31
     61e:	93 58       	subi	r25, 0x83	; 131
     620:	5f 4f       	sbci	r21, 0xFF	; 255
     622:	2a f0       	brmi	.+10     	; 0x62e <__divsf3_pse+0x6c>
     624:	9e 3f       	cpi	r25, 0xFE	; 254
     626:	51 05       	cpc	r21, r1
     628:	68 f0       	brcs	.+26     	; 0x644 <__divsf3_pse+0x82>
     62a:	55 c0       	rjmp	.+170    	; 0x6d6 <__fp_inf>
     62c:	9f c0       	rjmp	.+318    	; 0x76c <__fp_szero>
     62e:	5f 3f       	cpi	r21, 0xFF	; 255
     630:	ec f3       	brlt	.-6      	; 0x62c <__divsf3_pse+0x6a>
     632:	98 3e       	cpi	r25, 0xE8	; 232
     634:	dc f3       	brlt	.-10     	; 0x62c <__divsf3_pse+0x6a>
     636:	86 95       	lsr	r24
     638:	77 95       	ror	r23
     63a:	67 95       	ror	r22
     63c:	b7 95       	ror	r27
     63e:	f7 95       	ror	r31
     640:	9f 5f       	subi	r25, 0xFF	; 255
     642:	c9 f7       	brne	.-14     	; 0x636 <__divsf3_pse+0x74>
     644:	88 0f       	add	r24, r24
     646:	91 1d       	adc	r25, r1
     648:	96 95       	lsr	r25
     64a:	87 95       	ror	r24
     64c:	97 f9       	bld	r25, 7
     64e:	08 95       	ret
     650:	e1 e0       	ldi	r30, 0x01	; 1
     652:	66 0f       	add	r22, r22
     654:	77 1f       	adc	r23, r23
     656:	88 1f       	adc	r24, r24
     658:	bb 1f       	adc	r27, r27
     65a:	62 17       	cp	r22, r18
     65c:	73 07       	cpc	r23, r19
     65e:	84 07       	cpc	r24, r20
     660:	ba 07       	cpc	r27, r26
     662:	20 f0       	brcs	.+8      	; 0x66c <__divsf3_pse+0xaa>
     664:	62 1b       	sub	r22, r18
     666:	73 0b       	sbc	r23, r19
     668:	84 0b       	sbc	r24, r20
     66a:	ba 0b       	sbc	r27, r26
     66c:	ee 1f       	adc	r30, r30
     66e:	88 f7       	brcc	.-30     	; 0x652 <__divsf3_pse+0x90>
     670:	e0 95       	com	r30
     672:	08 95       	ret

00000674 <__fixsfsi>:
     674:	04 d0       	rcall	.+8      	; 0x67e <__fixunssfsi>
     676:	68 94       	set
     678:	b1 11       	cpse	r27, r1
     67a:	78 c0       	rjmp	.+240    	; 0x76c <__fp_szero>
     67c:	08 95       	ret

0000067e <__fixunssfsi>:
     67e:	5b d0       	rcall	.+182    	; 0x736 <__fp_splitA>
     680:	88 f0       	brcs	.+34     	; 0x6a4 <__fixunssfsi+0x26>
     682:	9f 57       	subi	r25, 0x7F	; 127
     684:	90 f0       	brcs	.+36     	; 0x6aa <__fixunssfsi+0x2c>
     686:	b9 2f       	mov	r27, r25
     688:	99 27       	eor	r25, r25
     68a:	b7 51       	subi	r27, 0x17	; 23
     68c:	a0 f0       	brcs	.+40     	; 0x6b6 <__fixunssfsi+0x38>
     68e:	d1 f0       	breq	.+52     	; 0x6c4 <__fixunssfsi+0x46>
     690:	66 0f       	add	r22, r22
     692:	77 1f       	adc	r23, r23
     694:	88 1f       	adc	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	1a f0       	brmi	.+6      	; 0x6a0 <__fixunssfsi+0x22>
     69a:	ba 95       	dec	r27
     69c:	c9 f7       	brne	.-14     	; 0x690 <__fixunssfsi+0x12>
     69e:	12 c0       	rjmp	.+36     	; 0x6c4 <__fixunssfsi+0x46>
     6a0:	b1 30       	cpi	r27, 0x01	; 1
     6a2:	81 f0       	breq	.+32     	; 0x6c4 <__fixunssfsi+0x46>
     6a4:	62 d0       	rcall	.+196    	; 0x76a <__fp_zero>
     6a6:	b1 e0       	ldi	r27, 0x01	; 1
     6a8:	08 95       	ret
     6aa:	5f c0       	rjmp	.+190    	; 0x76a <__fp_zero>
     6ac:	67 2f       	mov	r22, r23
     6ae:	78 2f       	mov	r23, r24
     6b0:	88 27       	eor	r24, r24
     6b2:	b8 5f       	subi	r27, 0xF8	; 248
     6b4:	39 f0       	breq	.+14     	; 0x6c4 <__fixunssfsi+0x46>
     6b6:	b9 3f       	cpi	r27, 0xF9	; 249
     6b8:	cc f3       	brlt	.-14     	; 0x6ac <__fixunssfsi+0x2e>
     6ba:	86 95       	lsr	r24
     6bc:	77 95       	ror	r23
     6be:	67 95       	ror	r22
     6c0:	b3 95       	inc	r27
     6c2:	d9 f7       	brne	.-10     	; 0x6ba <__fixunssfsi+0x3c>
     6c4:	3e f4       	brtc	.+14     	; 0x6d4 <__fixunssfsi+0x56>
     6c6:	90 95       	com	r25
     6c8:	80 95       	com	r24
     6ca:	70 95       	com	r23
     6cc:	61 95       	neg	r22
     6ce:	7f 4f       	sbci	r23, 0xFF	; 255
     6d0:	8f 4f       	sbci	r24, 0xFF	; 255
     6d2:	9f 4f       	sbci	r25, 0xFF	; 255
     6d4:	08 95       	ret

000006d6 <__fp_inf>:
     6d6:	97 f9       	bld	r25, 7
     6d8:	9f 67       	ori	r25, 0x7F	; 127
     6da:	80 e8       	ldi	r24, 0x80	; 128
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	60 e0       	ldi	r22, 0x00	; 0
     6e0:	08 95       	ret

000006e2 <__fp_nan>:
     6e2:	9f ef       	ldi	r25, 0xFF	; 255
     6e4:	80 ec       	ldi	r24, 0xC0	; 192
     6e6:	08 95       	ret

000006e8 <__fp_pscA>:
     6e8:	00 24       	eor	r0, r0
     6ea:	0a 94       	dec	r0
     6ec:	16 16       	cp	r1, r22
     6ee:	17 06       	cpc	r1, r23
     6f0:	18 06       	cpc	r1, r24
     6f2:	09 06       	cpc	r0, r25
     6f4:	08 95       	ret

000006f6 <__fp_pscB>:
     6f6:	00 24       	eor	r0, r0
     6f8:	0a 94       	dec	r0
     6fa:	12 16       	cp	r1, r18
     6fc:	13 06       	cpc	r1, r19
     6fe:	14 06       	cpc	r1, r20
     700:	05 06       	cpc	r0, r21
     702:	08 95       	ret

00000704 <__fp_round>:
     704:	09 2e       	mov	r0, r25
     706:	03 94       	inc	r0
     708:	00 0c       	add	r0, r0
     70a:	11 f4       	brne	.+4      	; 0x710 <__fp_round+0xc>
     70c:	88 23       	and	r24, r24
     70e:	52 f0       	brmi	.+20     	; 0x724 <__fp_round+0x20>
     710:	bb 0f       	add	r27, r27
     712:	40 f4       	brcc	.+16     	; 0x724 <__fp_round+0x20>
     714:	bf 2b       	or	r27, r31
     716:	11 f4       	brne	.+4      	; 0x71c <__fp_round+0x18>
     718:	60 ff       	sbrs	r22, 0
     71a:	04 c0       	rjmp	.+8      	; 0x724 <__fp_round+0x20>
     71c:	6f 5f       	subi	r22, 0xFF	; 255
     71e:	7f 4f       	sbci	r23, 0xFF	; 255
     720:	8f 4f       	sbci	r24, 0xFF	; 255
     722:	9f 4f       	sbci	r25, 0xFF	; 255
     724:	08 95       	ret

00000726 <__fp_split3>:
     726:	57 fd       	sbrc	r21, 7
     728:	90 58       	subi	r25, 0x80	; 128
     72a:	44 0f       	add	r20, r20
     72c:	55 1f       	adc	r21, r21
     72e:	59 f0       	breq	.+22     	; 0x746 <__fp_splitA+0x10>
     730:	5f 3f       	cpi	r21, 0xFF	; 255
     732:	71 f0       	breq	.+28     	; 0x750 <__fp_splitA+0x1a>
     734:	47 95       	ror	r20

00000736 <__fp_splitA>:
     736:	88 0f       	add	r24, r24
     738:	97 fb       	bst	r25, 7
     73a:	99 1f       	adc	r25, r25
     73c:	61 f0       	breq	.+24     	; 0x756 <__fp_splitA+0x20>
     73e:	9f 3f       	cpi	r25, 0xFF	; 255
     740:	79 f0       	breq	.+30     	; 0x760 <__fp_splitA+0x2a>
     742:	87 95       	ror	r24
     744:	08 95       	ret
     746:	12 16       	cp	r1, r18
     748:	13 06       	cpc	r1, r19
     74a:	14 06       	cpc	r1, r20
     74c:	55 1f       	adc	r21, r21
     74e:	f2 cf       	rjmp	.-28     	; 0x734 <__fp_split3+0xe>
     750:	46 95       	lsr	r20
     752:	f1 df       	rcall	.-30     	; 0x736 <__fp_splitA>
     754:	08 c0       	rjmp	.+16     	; 0x766 <__fp_splitA+0x30>
     756:	16 16       	cp	r1, r22
     758:	17 06       	cpc	r1, r23
     75a:	18 06       	cpc	r1, r24
     75c:	99 1f       	adc	r25, r25
     75e:	f1 cf       	rjmp	.-30     	; 0x742 <__fp_splitA+0xc>
     760:	86 95       	lsr	r24
     762:	71 05       	cpc	r23, r1
     764:	61 05       	cpc	r22, r1
     766:	08 94       	sec
     768:	08 95       	ret

0000076a <__fp_zero>:
     76a:	e8 94       	clt

0000076c <__fp_szero>:
     76c:	bb 27       	eor	r27, r27
     76e:	66 27       	eor	r22, r22
     770:	77 27       	eor	r23, r23
     772:	cb 01       	movw	r24, r22
     774:	97 f9       	bld	r25, 7
     776:	08 95       	ret

00000778 <fdevopen>:
     778:	0f 93       	push	r16
     77a:	1f 93       	push	r17
     77c:	cf 93       	push	r28
     77e:	df 93       	push	r29
     780:	ec 01       	movw	r28, r24
     782:	8b 01       	movw	r16, r22
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	31 f4       	brne	.+12     	; 0x794 <fdevopen+0x1c>
     788:	61 15       	cp	r22, r1
     78a:	71 05       	cpc	r23, r1
     78c:	19 f4       	brne	.+6      	; 0x794 <fdevopen+0x1c>
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	37 c0       	rjmp	.+110    	; 0x802 <fdevopen+0x8a>
     794:	6e e0       	ldi	r22, 0x0E	; 14
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	63 d2       	rcall	.+1222   	; 0xc64 <calloc>
     79e:	fc 01       	movw	r30, r24
     7a0:	00 97       	sbiw	r24, 0x00	; 0
     7a2:	a9 f3       	breq	.-22     	; 0x78e <fdevopen+0x16>
     7a4:	80 e8       	ldi	r24, 0x80	; 128
     7a6:	83 83       	std	Z+3, r24	; 0x03
     7a8:	01 15       	cp	r16, r1
     7aa:	11 05       	cpc	r17, r1
     7ac:	71 f0       	breq	.+28     	; 0x7ca <fdevopen+0x52>
     7ae:	13 87       	std	Z+11, r17	; 0x0b
     7b0:	02 87       	std	Z+10, r16	; 0x0a
     7b2:	81 e8       	ldi	r24, 0x81	; 129
     7b4:	83 83       	std	Z+3, r24	; 0x03
     7b6:	80 91 f9 02 	lds	r24, 0x02F9
     7ba:	90 91 fa 02 	lds	r25, 0x02FA
     7be:	89 2b       	or	r24, r25
     7c0:	21 f4       	brne	.+8      	; 0x7ca <fdevopen+0x52>
     7c2:	f0 93 fa 02 	sts	0x02FA, r31
     7c6:	e0 93 f9 02 	sts	0x02F9, r30
     7ca:	20 97       	sbiw	r28, 0x00	; 0
     7cc:	c9 f0       	breq	.+50     	; 0x800 <fdevopen+0x88>
     7ce:	d1 87       	std	Z+9, r29	; 0x09
     7d0:	c0 87       	std	Z+8, r28	; 0x08
     7d2:	83 81       	ldd	r24, Z+3	; 0x03
     7d4:	82 60       	ori	r24, 0x02	; 2
     7d6:	83 83       	std	Z+3, r24	; 0x03
     7d8:	80 91 fb 02 	lds	r24, 0x02FB
     7dc:	90 91 fc 02 	lds	r25, 0x02FC
     7e0:	89 2b       	or	r24, r25
     7e2:	71 f4       	brne	.+28     	; 0x800 <fdevopen+0x88>
     7e4:	f0 93 fc 02 	sts	0x02FC, r31
     7e8:	e0 93 fb 02 	sts	0x02FB, r30
     7ec:	80 91 fd 02 	lds	r24, 0x02FD
     7f0:	90 91 fe 02 	lds	r25, 0x02FE
     7f4:	89 2b       	or	r24, r25
     7f6:	21 f4       	brne	.+8      	; 0x800 <fdevopen+0x88>
     7f8:	f0 93 fe 02 	sts	0x02FE, r31
     7fc:	e0 93 fd 02 	sts	0x02FD, r30
     800:	cf 01       	movw	r24, r30
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	08 95       	ret

0000080c <printf>:
     80c:	cf 93       	push	r28
     80e:	df 93       	push	r29
     810:	cd b7       	in	r28, 0x3d	; 61
     812:	de b7       	in	r29, 0x3e	; 62
     814:	fe 01       	movw	r30, r28
     816:	36 96       	adiw	r30, 0x06	; 6
     818:	61 91       	ld	r22, Z+
     81a:	71 91       	ld	r23, Z+
     81c:	af 01       	movw	r20, r30
     81e:	80 91 fb 02 	lds	r24, 0x02FB
     822:	90 91 fc 02 	lds	r25, 0x02FC
     826:	30 d0       	rcall	.+96     	; 0x888 <vfprintf>
     828:	df 91       	pop	r29
     82a:	cf 91       	pop	r28
     82c:	08 95       	ret

0000082e <puts>:
     82e:	0f 93       	push	r16
     830:	1f 93       	push	r17
     832:	cf 93       	push	r28
     834:	df 93       	push	r29
     836:	e0 91 fb 02 	lds	r30, 0x02FB
     83a:	f0 91 fc 02 	lds	r31, 0x02FC
     83e:	23 81       	ldd	r18, Z+3	; 0x03
     840:	21 ff       	sbrs	r18, 1
     842:	1b c0       	rjmp	.+54     	; 0x87a <puts+0x4c>
     844:	ec 01       	movw	r28, r24
     846:	00 e0       	ldi	r16, 0x00	; 0
     848:	10 e0       	ldi	r17, 0x00	; 0
     84a:	89 91       	ld	r24, Y+
     84c:	60 91 fb 02 	lds	r22, 0x02FB
     850:	70 91 fc 02 	lds	r23, 0x02FC
     854:	db 01       	movw	r26, r22
     856:	18 96       	adiw	r26, 0x08	; 8
     858:	ed 91       	ld	r30, X+
     85a:	fc 91       	ld	r31, X
     85c:	19 97       	sbiw	r26, 0x09	; 9
     85e:	88 23       	and	r24, r24
     860:	31 f0       	breq	.+12     	; 0x86e <puts+0x40>
     862:	19 95       	eicall
     864:	89 2b       	or	r24, r25
     866:	89 f3       	breq	.-30     	; 0x84a <puts+0x1c>
     868:	0f ef       	ldi	r16, 0xFF	; 255
     86a:	1f ef       	ldi	r17, 0xFF	; 255
     86c:	ee cf       	rjmp	.-36     	; 0x84a <puts+0x1c>
     86e:	8a e0       	ldi	r24, 0x0A	; 10
     870:	19 95       	eicall
     872:	89 2b       	or	r24, r25
     874:	11 f4       	brne	.+4      	; 0x87a <puts+0x4c>
     876:	c8 01       	movw	r24, r16
     878:	02 c0       	rjmp	.+4      	; 0x87e <puts+0x50>
     87a:	8f ef       	ldi	r24, 0xFF	; 255
     87c:	9f ef       	ldi	r25, 0xFF	; 255
     87e:	df 91       	pop	r29
     880:	cf 91       	pop	r28
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <vfprintf>:
     888:	2f 92       	push	r2
     88a:	3f 92       	push	r3
     88c:	4f 92       	push	r4
     88e:	5f 92       	push	r5
     890:	6f 92       	push	r6
     892:	7f 92       	push	r7
     894:	8f 92       	push	r8
     896:	9f 92       	push	r9
     898:	af 92       	push	r10
     89a:	bf 92       	push	r11
     89c:	cf 92       	push	r12
     89e:	df 92       	push	r13
     8a0:	ef 92       	push	r14
     8a2:	ff 92       	push	r15
     8a4:	0f 93       	push	r16
     8a6:	1f 93       	push	r17
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	cd b7       	in	r28, 0x3d	; 61
     8ae:	de b7       	in	r29, 0x3e	; 62
     8b0:	2c 97       	sbiw	r28, 0x0c	; 12
     8b2:	0f b6       	in	r0, 0x3f	; 63
     8b4:	f8 94       	cli
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	0f be       	out	0x3f, r0	; 63
     8ba:	cd bf       	out	0x3d, r28	; 61
     8bc:	7c 01       	movw	r14, r24
     8be:	6b 01       	movw	r12, r22
     8c0:	8a 01       	movw	r16, r20
     8c2:	fc 01       	movw	r30, r24
     8c4:	17 82       	std	Z+7, r1	; 0x07
     8c6:	16 82       	std	Z+6, r1	; 0x06
     8c8:	83 81       	ldd	r24, Z+3	; 0x03
     8ca:	81 ff       	sbrs	r24, 1
     8cc:	b0 c1       	rjmp	.+864    	; 0xc2e <vfprintf+0x3a6>
     8ce:	ce 01       	movw	r24, r28
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	4c 01       	movw	r8, r24
     8d4:	f7 01       	movw	r30, r14
     8d6:	93 81       	ldd	r25, Z+3	; 0x03
     8d8:	f6 01       	movw	r30, r12
     8da:	93 fd       	sbrc	r25, 3
     8dc:	85 91       	lpm	r24, Z+
     8de:	93 ff       	sbrs	r25, 3
     8e0:	81 91       	ld	r24, Z+
     8e2:	6f 01       	movw	r12, r30
     8e4:	88 23       	and	r24, r24
     8e6:	09 f4       	brne	.+2      	; 0x8ea <vfprintf+0x62>
     8e8:	9e c1       	rjmp	.+828    	; 0xc26 <vfprintf+0x39e>
     8ea:	85 32       	cpi	r24, 0x25	; 37
     8ec:	39 f4       	brne	.+14     	; 0x8fc <vfprintf+0x74>
     8ee:	93 fd       	sbrc	r25, 3
     8f0:	85 91       	lpm	r24, Z+
     8f2:	93 ff       	sbrs	r25, 3
     8f4:	81 91       	ld	r24, Z+
     8f6:	6f 01       	movw	r12, r30
     8f8:	85 32       	cpi	r24, 0x25	; 37
     8fa:	21 f4       	brne	.+8      	; 0x904 <vfprintf+0x7c>
     8fc:	b7 01       	movw	r22, r14
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	0f d3       	rcall	.+1566   	; 0xf20 <fputc>
     902:	e8 cf       	rjmp	.-48     	; 0x8d4 <vfprintf+0x4c>
     904:	51 2c       	mov	r5, r1
     906:	31 2c       	mov	r3, r1
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	20 32       	cpi	r18, 0x20	; 32
     90c:	a0 f4       	brcc	.+40     	; 0x936 <vfprintf+0xae>
     90e:	8b 32       	cpi	r24, 0x2B	; 43
     910:	69 f0       	breq	.+26     	; 0x92c <vfprintf+0xa4>
     912:	30 f4       	brcc	.+12     	; 0x920 <vfprintf+0x98>
     914:	80 32       	cpi	r24, 0x20	; 32
     916:	59 f0       	breq	.+22     	; 0x92e <vfprintf+0xa6>
     918:	83 32       	cpi	r24, 0x23	; 35
     91a:	69 f4       	brne	.+26     	; 0x936 <vfprintf+0xae>
     91c:	20 61       	ori	r18, 0x10	; 16
     91e:	2c c0       	rjmp	.+88     	; 0x978 <vfprintf+0xf0>
     920:	8d 32       	cpi	r24, 0x2D	; 45
     922:	39 f0       	breq	.+14     	; 0x932 <vfprintf+0xaa>
     924:	80 33       	cpi	r24, 0x30	; 48
     926:	39 f4       	brne	.+14     	; 0x936 <vfprintf+0xae>
     928:	21 60       	ori	r18, 0x01	; 1
     92a:	26 c0       	rjmp	.+76     	; 0x978 <vfprintf+0xf0>
     92c:	22 60       	ori	r18, 0x02	; 2
     92e:	24 60       	ori	r18, 0x04	; 4
     930:	23 c0       	rjmp	.+70     	; 0x978 <vfprintf+0xf0>
     932:	28 60       	ori	r18, 0x08	; 8
     934:	21 c0       	rjmp	.+66     	; 0x978 <vfprintf+0xf0>
     936:	27 fd       	sbrc	r18, 7
     938:	27 c0       	rjmp	.+78     	; 0x988 <vfprintf+0x100>
     93a:	30 ed       	ldi	r19, 0xD0	; 208
     93c:	38 0f       	add	r19, r24
     93e:	3a 30       	cpi	r19, 0x0A	; 10
     940:	78 f4       	brcc	.+30     	; 0x960 <vfprintf+0xd8>
     942:	26 ff       	sbrs	r18, 6
     944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0xca>
     946:	fa e0       	ldi	r31, 0x0A	; 10
     948:	5f 9e       	mul	r5, r31
     94a:	30 0d       	add	r19, r0
     94c:	11 24       	eor	r1, r1
     94e:	53 2e       	mov	r5, r19
     950:	13 c0       	rjmp	.+38     	; 0x978 <vfprintf+0xf0>
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	38 9e       	mul	r3, r24
     956:	30 0d       	add	r19, r0
     958:	11 24       	eor	r1, r1
     95a:	33 2e       	mov	r3, r19
     95c:	20 62       	ori	r18, 0x20	; 32
     95e:	0c c0       	rjmp	.+24     	; 0x978 <vfprintf+0xf0>
     960:	8e 32       	cpi	r24, 0x2E	; 46
     962:	21 f4       	brne	.+8      	; 0x96c <vfprintf+0xe4>
     964:	26 fd       	sbrc	r18, 6
     966:	5f c1       	rjmp	.+702    	; 0xc26 <vfprintf+0x39e>
     968:	20 64       	ori	r18, 0x40	; 64
     96a:	06 c0       	rjmp	.+12     	; 0x978 <vfprintf+0xf0>
     96c:	8c 36       	cpi	r24, 0x6C	; 108
     96e:	11 f4       	brne	.+4      	; 0x974 <vfprintf+0xec>
     970:	20 68       	ori	r18, 0x80	; 128
     972:	02 c0       	rjmp	.+4      	; 0x978 <vfprintf+0xf0>
     974:	88 36       	cpi	r24, 0x68	; 104
     976:	41 f4       	brne	.+16     	; 0x988 <vfprintf+0x100>
     978:	f6 01       	movw	r30, r12
     97a:	93 fd       	sbrc	r25, 3
     97c:	85 91       	lpm	r24, Z+
     97e:	93 ff       	sbrs	r25, 3
     980:	81 91       	ld	r24, Z+
     982:	6f 01       	movw	r12, r30
     984:	81 11       	cpse	r24, r1
     986:	c1 cf       	rjmp	.-126    	; 0x90a <vfprintf+0x82>
     988:	98 2f       	mov	r25, r24
     98a:	9f 7d       	andi	r25, 0xDF	; 223
     98c:	95 54       	subi	r25, 0x45	; 69
     98e:	93 30       	cpi	r25, 0x03	; 3
     990:	28 f4       	brcc	.+10     	; 0x99c <vfprintf+0x114>
     992:	0c 5f       	subi	r16, 0xFC	; 252
     994:	1f 4f       	sbci	r17, 0xFF	; 255
     996:	ff e3       	ldi	r31, 0x3F	; 63
     998:	f9 83       	std	Y+1, r31	; 0x01
     99a:	0d c0       	rjmp	.+26     	; 0x9b6 <vfprintf+0x12e>
     99c:	83 36       	cpi	r24, 0x63	; 99
     99e:	31 f0       	breq	.+12     	; 0x9ac <vfprintf+0x124>
     9a0:	83 37       	cpi	r24, 0x73	; 115
     9a2:	71 f0       	breq	.+28     	; 0x9c0 <vfprintf+0x138>
     9a4:	83 35       	cpi	r24, 0x53	; 83
     9a6:	09 f0       	breq	.+2      	; 0x9aa <vfprintf+0x122>
     9a8:	57 c0       	rjmp	.+174    	; 0xa58 <vfprintf+0x1d0>
     9aa:	21 c0       	rjmp	.+66     	; 0x9ee <vfprintf+0x166>
     9ac:	f8 01       	movw	r30, r16
     9ae:	80 81       	ld	r24, Z
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	0e 5f       	subi	r16, 0xFE	; 254
     9b4:	1f 4f       	sbci	r17, 0xFF	; 255
     9b6:	44 24       	eor	r4, r4
     9b8:	43 94       	inc	r4
     9ba:	51 2c       	mov	r5, r1
     9bc:	54 01       	movw	r10, r8
     9be:	14 c0       	rjmp	.+40     	; 0x9e8 <vfprintf+0x160>
     9c0:	38 01       	movw	r6, r16
     9c2:	f2 e0       	ldi	r31, 0x02	; 2
     9c4:	6f 0e       	add	r6, r31
     9c6:	71 1c       	adc	r7, r1
     9c8:	f8 01       	movw	r30, r16
     9ca:	a0 80       	ld	r10, Z
     9cc:	b1 80       	ldd	r11, Z+1	; 0x01
     9ce:	26 ff       	sbrs	r18, 6
     9d0:	03 c0       	rjmp	.+6      	; 0x9d8 <vfprintf+0x150>
     9d2:	65 2d       	mov	r22, r5
     9d4:	70 e0       	ldi	r23, 0x00	; 0
     9d6:	02 c0       	rjmp	.+4      	; 0x9dc <vfprintf+0x154>
     9d8:	6f ef       	ldi	r22, 0xFF	; 255
     9da:	7f ef       	ldi	r23, 0xFF	; 255
     9dc:	c5 01       	movw	r24, r10
     9de:	2c 87       	std	Y+12, r18	; 0x0c
     9e0:	94 d2       	rcall	.+1320   	; 0xf0a <strnlen>
     9e2:	2c 01       	movw	r4, r24
     9e4:	83 01       	movw	r16, r6
     9e6:	2c 85       	ldd	r18, Y+12	; 0x0c
     9e8:	2f 77       	andi	r18, 0x7F	; 127
     9ea:	22 2e       	mov	r2, r18
     9ec:	16 c0       	rjmp	.+44     	; 0xa1a <vfprintf+0x192>
     9ee:	38 01       	movw	r6, r16
     9f0:	f2 e0       	ldi	r31, 0x02	; 2
     9f2:	6f 0e       	add	r6, r31
     9f4:	71 1c       	adc	r7, r1
     9f6:	f8 01       	movw	r30, r16
     9f8:	a0 80       	ld	r10, Z
     9fa:	b1 80       	ldd	r11, Z+1	; 0x01
     9fc:	26 ff       	sbrs	r18, 6
     9fe:	03 c0       	rjmp	.+6      	; 0xa06 <vfprintf+0x17e>
     a00:	65 2d       	mov	r22, r5
     a02:	70 e0       	ldi	r23, 0x00	; 0
     a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0x182>
     a06:	6f ef       	ldi	r22, 0xFF	; 255
     a08:	7f ef       	ldi	r23, 0xFF	; 255
     a0a:	c5 01       	movw	r24, r10
     a0c:	2c 87       	std	Y+12, r18	; 0x0c
     a0e:	6b d2       	rcall	.+1238   	; 0xee6 <strnlen_P>
     a10:	2c 01       	movw	r4, r24
     a12:	2c 85       	ldd	r18, Y+12	; 0x0c
     a14:	20 68       	ori	r18, 0x80	; 128
     a16:	22 2e       	mov	r2, r18
     a18:	83 01       	movw	r16, r6
     a1a:	23 fc       	sbrc	r2, 3
     a1c:	19 c0       	rjmp	.+50     	; 0xa50 <vfprintf+0x1c8>
     a1e:	83 2d       	mov	r24, r3
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	48 16       	cp	r4, r24
     a24:	59 06       	cpc	r5, r25
     a26:	a0 f4       	brcc	.+40     	; 0xa50 <vfprintf+0x1c8>
     a28:	b7 01       	movw	r22, r14
     a2a:	80 e2       	ldi	r24, 0x20	; 32
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	78 d2       	rcall	.+1264   	; 0xf20 <fputc>
     a30:	3a 94       	dec	r3
     a32:	f5 cf       	rjmp	.-22     	; 0xa1e <vfprintf+0x196>
     a34:	f5 01       	movw	r30, r10
     a36:	27 fc       	sbrc	r2, 7
     a38:	85 91       	lpm	r24, Z+
     a3a:	27 fe       	sbrs	r2, 7
     a3c:	81 91       	ld	r24, Z+
     a3e:	5f 01       	movw	r10, r30
     a40:	b7 01       	movw	r22, r14
     a42:	90 e0       	ldi	r25, 0x00	; 0
     a44:	6d d2       	rcall	.+1242   	; 0xf20 <fputc>
     a46:	31 10       	cpse	r3, r1
     a48:	3a 94       	dec	r3
     a4a:	f1 e0       	ldi	r31, 0x01	; 1
     a4c:	4f 1a       	sub	r4, r31
     a4e:	51 08       	sbc	r5, r1
     a50:	41 14       	cp	r4, r1
     a52:	51 04       	cpc	r5, r1
     a54:	79 f7       	brne	.-34     	; 0xa34 <vfprintf+0x1ac>
     a56:	de c0       	rjmp	.+444    	; 0xc14 <vfprintf+0x38c>
     a58:	84 36       	cpi	r24, 0x64	; 100
     a5a:	11 f0       	breq	.+4      	; 0xa60 <vfprintf+0x1d8>
     a5c:	89 36       	cpi	r24, 0x69	; 105
     a5e:	31 f5       	brne	.+76     	; 0xaac <vfprintf+0x224>
     a60:	f8 01       	movw	r30, r16
     a62:	27 ff       	sbrs	r18, 7
     a64:	07 c0       	rjmp	.+14     	; 0xa74 <vfprintf+0x1ec>
     a66:	60 81       	ld	r22, Z
     a68:	71 81       	ldd	r23, Z+1	; 0x01
     a6a:	82 81       	ldd	r24, Z+2	; 0x02
     a6c:	93 81       	ldd	r25, Z+3	; 0x03
     a6e:	0c 5f       	subi	r16, 0xFC	; 252
     a70:	1f 4f       	sbci	r17, 0xFF	; 255
     a72:	08 c0       	rjmp	.+16     	; 0xa84 <vfprintf+0x1fc>
     a74:	60 81       	ld	r22, Z
     a76:	71 81       	ldd	r23, Z+1	; 0x01
     a78:	88 27       	eor	r24, r24
     a7a:	77 fd       	sbrc	r23, 7
     a7c:	80 95       	com	r24
     a7e:	98 2f       	mov	r25, r24
     a80:	0e 5f       	subi	r16, 0xFE	; 254
     a82:	1f 4f       	sbci	r17, 0xFF	; 255
     a84:	2f 76       	andi	r18, 0x6F	; 111
     a86:	b2 2e       	mov	r11, r18
     a88:	97 ff       	sbrs	r25, 7
     a8a:	09 c0       	rjmp	.+18     	; 0xa9e <vfprintf+0x216>
     a8c:	90 95       	com	r25
     a8e:	80 95       	com	r24
     a90:	70 95       	com	r23
     a92:	61 95       	neg	r22
     a94:	7f 4f       	sbci	r23, 0xFF	; 255
     a96:	8f 4f       	sbci	r24, 0xFF	; 255
     a98:	9f 4f       	sbci	r25, 0xFF	; 255
     a9a:	20 68       	ori	r18, 0x80	; 128
     a9c:	b2 2e       	mov	r11, r18
     a9e:	2a e0       	ldi	r18, 0x0A	; 10
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	a4 01       	movw	r20, r8
     aa4:	6f d2       	rcall	.+1246   	; 0xf84 <__ultoa_invert>
     aa6:	a8 2e       	mov	r10, r24
     aa8:	a8 18       	sub	r10, r8
     aaa:	43 c0       	rjmp	.+134    	; 0xb32 <vfprintf+0x2aa>
     aac:	85 37       	cpi	r24, 0x75	; 117
     aae:	29 f4       	brne	.+10     	; 0xaba <vfprintf+0x232>
     ab0:	2f 7e       	andi	r18, 0xEF	; 239
     ab2:	b2 2e       	mov	r11, r18
     ab4:	2a e0       	ldi	r18, 0x0A	; 10
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	25 c0       	rjmp	.+74     	; 0xb04 <vfprintf+0x27c>
     aba:	f2 2f       	mov	r31, r18
     abc:	f9 7f       	andi	r31, 0xF9	; 249
     abe:	bf 2e       	mov	r11, r31
     ac0:	8f 36       	cpi	r24, 0x6F	; 111
     ac2:	c1 f0       	breq	.+48     	; 0xaf4 <vfprintf+0x26c>
     ac4:	18 f4       	brcc	.+6      	; 0xacc <vfprintf+0x244>
     ac6:	88 35       	cpi	r24, 0x58	; 88
     ac8:	79 f0       	breq	.+30     	; 0xae8 <vfprintf+0x260>
     aca:	ad c0       	rjmp	.+346    	; 0xc26 <vfprintf+0x39e>
     acc:	80 37       	cpi	r24, 0x70	; 112
     ace:	19 f0       	breq	.+6      	; 0xad6 <vfprintf+0x24e>
     ad0:	88 37       	cpi	r24, 0x78	; 120
     ad2:	21 f0       	breq	.+8      	; 0xadc <vfprintf+0x254>
     ad4:	a8 c0       	rjmp	.+336    	; 0xc26 <vfprintf+0x39e>
     ad6:	2f 2f       	mov	r18, r31
     ad8:	20 61       	ori	r18, 0x10	; 16
     ada:	b2 2e       	mov	r11, r18
     adc:	b4 fe       	sbrs	r11, 4
     ade:	0d c0       	rjmp	.+26     	; 0xafa <vfprintf+0x272>
     ae0:	8b 2d       	mov	r24, r11
     ae2:	84 60       	ori	r24, 0x04	; 4
     ae4:	b8 2e       	mov	r11, r24
     ae6:	09 c0       	rjmp	.+18     	; 0xafa <vfprintf+0x272>
     ae8:	24 ff       	sbrs	r18, 4
     aea:	0a c0       	rjmp	.+20     	; 0xb00 <vfprintf+0x278>
     aec:	9f 2f       	mov	r25, r31
     aee:	96 60       	ori	r25, 0x06	; 6
     af0:	b9 2e       	mov	r11, r25
     af2:	06 c0       	rjmp	.+12     	; 0xb00 <vfprintf+0x278>
     af4:	28 e0       	ldi	r18, 0x08	; 8
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	05 c0       	rjmp	.+10     	; 0xb04 <vfprintf+0x27c>
     afa:	20 e1       	ldi	r18, 0x10	; 16
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <vfprintf+0x27c>
     b00:	20 e1       	ldi	r18, 0x10	; 16
     b02:	32 e0       	ldi	r19, 0x02	; 2
     b04:	f8 01       	movw	r30, r16
     b06:	b7 fe       	sbrs	r11, 7
     b08:	07 c0       	rjmp	.+14     	; 0xb18 <vfprintf+0x290>
     b0a:	60 81       	ld	r22, Z
     b0c:	71 81       	ldd	r23, Z+1	; 0x01
     b0e:	82 81       	ldd	r24, Z+2	; 0x02
     b10:	93 81       	ldd	r25, Z+3	; 0x03
     b12:	0c 5f       	subi	r16, 0xFC	; 252
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	06 c0       	rjmp	.+12     	; 0xb24 <vfprintf+0x29c>
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	0e 5f       	subi	r16, 0xFE	; 254
     b22:	1f 4f       	sbci	r17, 0xFF	; 255
     b24:	a4 01       	movw	r20, r8
     b26:	2e d2       	rcall	.+1116   	; 0xf84 <__ultoa_invert>
     b28:	a8 2e       	mov	r10, r24
     b2a:	a8 18       	sub	r10, r8
     b2c:	fb 2d       	mov	r31, r11
     b2e:	ff 77       	andi	r31, 0x7F	; 127
     b30:	bf 2e       	mov	r11, r31
     b32:	b6 fe       	sbrs	r11, 6
     b34:	0b c0       	rjmp	.+22     	; 0xb4c <vfprintf+0x2c4>
     b36:	2b 2d       	mov	r18, r11
     b38:	2e 7f       	andi	r18, 0xFE	; 254
     b3a:	a5 14       	cp	r10, r5
     b3c:	50 f4       	brcc	.+20     	; 0xb52 <vfprintf+0x2ca>
     b3e:	b4 fe       	sbrs	r11, 4
     b40:	0a c0       	rjmp	.+20     	; 0xb56 <vfprintf+0x2ce>
     b42:	b2 fc       	sbrc	r11, 2
     b44:	08 c0       	rjmp	.+16     	; 0xb56 <vfprintf+0x2ce>
     b46:	2b 2d       	mov	r18, r11
     b48:	2e 7e       	andi	r18, 0xEE	; 238
     b4a:	05 c0       	rjmp	.+10     	; 0xb56 <vfprintf+0x2ce>
     b4c:	7a 2c       	mov	r7, r10
     b4e:	2b 2d       	mov	r18, r11
     b50:	03 c0       	rjmp	.+6      	; 0xb58 <vfprintf+0x2d0>
     b52:	7a 2c       	mov	r7, r10
     b54:	01 c0       	rjmp	.+2      	; 0xb58 <vfprintf+0x2d0>
     b56:	75 2c       	mov	r7, r5
     b58:	24 ff       	sbrs	r18, 4
     b5a:	0d c0       	rjmp	.+26     	; 0xb76 <vfprintf+0x2ee>
     b5c:	fe 01       	movw	r30, r28
     b5e:	ea 0d       	add	r30, r10
     b60:	f1 1d       	adc	r31, r1
     b62:	80 81       	ld	r24, Z
     b64:	80 33       	cpi	r24, 0x30	; 48
     b66:	11 f4       	brne	.+4      	; 0xb6c <vfprintf+0x2e4>
     b68:	29 7e       	andi	r18, 0xE9	; 233
     b6a:	09 c0       	rjmp	.+18     	; 0xb7e <vfprintf+0x2f6>
     b6c:	22 ff       	sbrs	r18, 2
     b6e:	06 c0       	rjmp	.+12     	; 0xb7c <vfprintf+0x2f4>
     b70:	73 94       	inc	r7
     b72:	73 94       	inc	r7
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <vfprintf+0x2f6>
     b76:	82 2f       	mov	r24, r18
     b78:	86 78       	andi	r24, 0x86	; 134
     b7a:	09 f0       	breq	.+2      	; 0xb7e <vfprintf+0x2f6>
     b7c:	73 94       	inc	r7
     b7e:	23 fd       	sbrc	r18, 3
     b80:	12 c0       	rjmp	.+36     	; 0xba6 <vfprintf+0x31e>
     b82:	20 ff       	sbrs	r18, 0
     b84:	06 c0       	rjmp	.+12     	; 0xb92 <vfprintf+0x30a>
     b86:	5a 2c       	mov	r5, r10
     b88:	73 14       	cp	r7, r3
     b8a:	18 f4       	brcc	.+6      	; 0xb92 <vfprintf+0x30a>
     b8c:	53 0c       	add	r5, r3
     b8e:	57 18       	sub	r5, r7
     b90:	73 2c       	mov	r7, r3
     b92:	73 14       	cp	r7, r3
     b94:	60 f4       	brcc	.+24     	; 0xbae <vfprintf+0x326>
     b96:	b7 01       	movw	r22, r14
     b98:	80 e2       	ldi	r24, 0x20	; 32
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	2c 87       	std	Y+12, r18	; 0x0c
     b9e:	c0 d1       	rcall	.+896    	; 0xf20 <fputc>
     ba0:	73 94       	inc	r7
     ba2:	2c 85       	ldd	r18, Y+12	; 0x0c
     ba4:	f6 cf       	rjmp	.-20     	; 0xb92 <vfprintf+0x30a>
     ba6:	73 14       	cp	r7, r3
     ba8:	10 f4       	brcc	.+4      	; 0xbae <vfprintf+0x326>
     baa:	37 18       	sub	r3, r7
     bac:	01 c0       	rjmp	.+2      	; 0xbb0 <vfprintf+0x328>
     bae:	31 2c       	mov	r3, r1
     bb0:	24 ff       	sbrs	r18, 4
     bb2:	11 c0       	rjmp	.+34     	; 0xbd6 <vfprintf+0x34e>
     bb4:	b7 01       	movw	r22, r14
     bb6:	80 e3       	ldi	r24, 0x30	; 48
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	2c 87       	std	Y+12, r18	; 0x0c
     bbc:	b1 d1       	rcall	.+866    	; 0xf20 <fputc>
     bbe:	2c 85       	ldd	r18, Y+12	; 0x0c
     bc0:	22 ff       	sbrs	r18, 2
     bc2:	16 c0       	rjmp	.+44     	; 0xbf0 <vfprintf+0x368>
     bc4:	21 ff       	sbrs	r18, 1
     bc6:	03 c0       	rjmp	.+6      	; 0xbce <vfprintf+0x346>
     bc8:	88 e5       	ldi	r24, 0x58	; 88
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <vfprintf+0x34a>
     bce:	88 e7       	ldi	r24, 0x78	; 120
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	b7 01       	movw	r22, r14
     bd4:	0c c0       	rjmp	.+24     	; 0xbee <vfprintf+0x366>
     bd6:	82 2f       	mov	r24, r18
     bd8:	86 78       	andi	r24, 0x86	; 134
     bda:	51 f0       	breq	.+20     	; 0xbf0 <vfprintf+0x368>
     bdc:	21 fd       	sbrc	r18, 1
     bde:	02 c0       	rjmp	.+4      	; 0xbe4 <vfprintf+0x35c>
     be0:	80 e2       	ldi	r24, 0x20	; 32
     be2:	01 c0       	rjmp	.+2      	; 0xbe6 <vfprintf+0x35e>
     be4:	8b e2       	ldi	r24, 0x2B	; 43
     be6:	27 fd       	sbrc	r18, 7
     be8:	8d e2       	ldi	r24, 0x2D	; 45
     bea:	b7 01       	movw	r22, r14
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	98 d1       	rcall	.+816    	; 0xf20 <fputc>
     bf0:	a5 14       	cp	r10, r5
     bf2:	30 f4       	brcc	.+12     	; 0xc00 <vfprintf+0x378>
     bf4:	b7 01       	movw	r22, r14
     bf6:	80 e3       	ldi	r24, 0x30	; 48
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	92 d1       	rcall	.+804    	; 0xf20 <fputc>
     bfc:	5a 94       	dec	r5
     bfe:	f8 cf       	rjmp	.-16     	; 0xbf0 <vfprintf+0x368>
     c00:	aa 94       	dec	r10
     c02:	f4 01       	movw	r30, r8
     c04:	ea 0d       	add	r30, r10
     c06:	f1 1d       	adc	r31, r1
     c08:	80 81       	ld	r24, Z
     c0a:	b7 01       	movw	r22, r14
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	88 d1       	rcall	.+784    	; 0xf20 <fputc>
     c10:	a1 10       	cpse	r10, r1
     c12:	f6 cf       	rjmp	.-20     	; 0xc00 <vfprintf+0x378>
     c14:	33 20       	and	r3, r3
     c16:	09 f4       	brne	.+2      	; 0xc1a <vfprintf+0x392>
     c18:	5d ce       	rjmp	.-838    	; 0x8d4 <vfprintf+0x4c>
     c1a:	b7 01       	movw	r22, r14
     c1c:	80 e2       	ldi	r24, 0x20	; 32
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	7f d1       	rcall	.+766    	; 0xf20 <fputc>
     c22:	3a 94       	dec	r3
     c24:	f7 cf       	rjmp	.-18     	; 0xc14 <vfprintf+0x38c>
     c26:	f7 01       	movw	r30, r14
     c28:	86 81       	ldd	r24, Z+6	; 0x06
     c2a:	97 81       	ldd	r25, Z+7	; 0x07
     c2c:	02 c0       	rjmp	.+4      	; 0xc32 <vfprintf+0x3aa>
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	9f ef       	ldi	r25, 0xFF	; 255
     c32:	2c 96       	adiw	r28, 0x0c	; 12
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	1f 91       	pop	r17
     c44:	0f 91       	pop	r16
     c46:	ff 90       	pop	r15
     c48:	ef 90       	pop	r14
     c4a:	df 90       	pop	r13
     c4c:	cf 90       	pop	r12
     c4e:	bf 90       	pop	r11
     c50:	af 90       	pop	r10
     c52:	9f 90       	pop	r9
     c54:	8f 90       	pop	r8
     c56:	7f 90       	pop	r7
     c58:	6f 90       	pop	r6
     c5a:	5f 90       	pop	r5
     c5c:	4f 90       	pop	r4
     c5e:	3f 90       	pop	r3
     c60:	2f 90       	pop	r2
     c62:	08 95       	ret

00000c64 <calloc>:
     c64:	0f 93       	push	r16
     c66:	1f 93       	push	r17
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	86 9f       	mul	r24, r22
     c6e:	80 01       	movw	r16, r0
     c70:	87 9f       	mul	r24, r23
     c72:	10 0d       	add	r17, r0
     c74:	96 9f       	mul	r25, r22
     c76:	10 0d       	add	r17, r0
     c78:	11 24       	eor	r1, r1
     c7a:	c8 01       	movw	r24, r16
     c7c:	0d d0       	rcall	.+26     	; 0xc98 <malloc>
     c7e:	ec 01       	movw	r28, r24
     c80:	00 97       	sbiw	r24, 0x00	; 0
     c82:	21 f0       	breq	.+8      	; 0xc8c <calloc+0x28>
     c84:	a8 01       	movw	r20, r16
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	70 e0       	ldi	r23, 0x00	; 0
     c8a:	38 d1       	rcall	.+624    	; 0xefc <memset>
     c8c:	ce 01       	movw	r24, r28
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	1f 91       	pop	r17
     c94:	0f 91       	pop	r16
     c96:	08 95       	ret

00000c98 <malloc>:
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	82 30       	cpi	r24, 0x02	; 2
     c9e:	91 05       	cpc	r25, r1
     ca0:	10 f4       	brcc	.+4      	; 0xca6 <malloc+0xe>
     ca2:	82 e0       	ldi	r24, 0x02	; 2
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	e0 91 01 03 	lds	r30, 0x0301
     caa:	f0 91 02 03 	lds	r31, 0x0302
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	a0 e0       	ldi	r26, 0x00	; 0
     cb4:	b0 e0       	ldi	r27, 0x00	; 0
     cb6:	30 97       	sbiw	r30, 0x00	; 0
     cb8:	39 f1       	breq	.+78     	; 0xd08 <malloc+0x70>
     cba:	40 81       	ld	r20, Z
     cbc:	51 81       	ldd	r21, Z+1	; 0x01
     cbe:	48 17       	cp	r20, r24
     cc0:	59 07       	cpc	r21, r25
     cc2:	b8 f0       	brcs	.+46     	; 0xcf2 <malloc+0x5a>
     cc4:	48 17       	cp	r20, r24
     cc6:	59 07       	cpc	r21, r25
     cc8:	71 f4       	brne	.+28     	; 0xce6 <malloc+0x4e>
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	10 97       	sbiw	r26, 0x00	; 0
     cd0:	29 f0       	breq	.+10     	; 0xcdc <malloc+0x44>
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	2c c0       	rjmp	.+88     	; 0xd34 <malloc+0x9c>
     cdc:	90 93 02 03 	sts	0x0302, r25
     ce0:	80 93 01 03 	sts	0x0301, r24
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <malloc+0x9c>
     ce6:	21 15       	cp	r18, r1
     ce8:	31 05       	cpc	r19, r1
     cea:	31 f0       	breq	.+12     	; 0xcf8 <malloc+0x60>
     cec:	42 17       	cp	r20, r18
     cee:	53 07       	cpc	r21, r19
     cf0:	18 f0       	brcs	.+6      	; 0xcf8 <malloc+0x60>
     cf2:	a9 01       	movw	r20, r18
     cf4:	db 01       	movw	r26, r22
     cf6:	01 c0       	rjmp	.+2      	; 0xcfa <malloc+0x62>
     cf8:	ef 01       	movw	r28, r30
     cfa:	9a 01       	movw	r18, r20
     cfc:	bd 01       	movw	r22, r26
     cfe:	df 01       	movw	r26, r30
     d00:	02 80       	ldd	r0, Z+2	; 0x02
     d02:	f3 81       	ldd	r31, Z+3	; 0x03
     d04:	e0 2d       	mov	r30, r0
     d06:	d7 cf       	rjmp	.-82     	; 0xcb6 <malloc+0x1e>
     d08:	21 15       	cp	r18, r1
     d0a:	31 05       	cpc	r19, r1
     d0c:	f9 f0       	breq	.+62     	; 0xd4c <malloc+0xb4>
     d0e:	28 1b       	sub	r18, r24
     d10:	39 0b       	sbc	r19, r25
     d12:	24 30       	cpi	r18, 0x04	; 4
     d14:	31 05       	cpc	r19, r1
     d16:	80 f4       	brcc	.+32     	; 0xd38 <malloc+0xa0>
     d18:	8a 81       	ldd	r24, Y+2	; 0x02
     d1a:	9b 81       	ldd	r25, Y+3	; 0x03
     d1c:	61 15       	cp	r22, r1
     d1e:	71 05       	cpc	r23, r1
     d20:	21 f0       	breq	.+8      	; 0xd2a <malloc+0x92>
     d22:	fb 01       	movw	r30, r22
     d24:	93 83       	std	Z+3, r25	; 0x03
     d26:	82 83       	std	Z+2, r24	; 0x02
     d28:	04 c0       	rjmp	.+8      	; 0xd32 <malloc+0x9a>
     d2a:	90 93 02 03 	sts	0x0302, r25
     d2e:	80 93 01 03 	sts	0x0301, r24
     d32:	fe 01       	movw	r30, r28
     d34:	32 96       	adiw	r30, 0x02	; 2
     d36:	44 c0       	rjmp	.+136    	; 0xdc0 <malloc+0x128>
     d38:	fe 01       	movw	r30, r28
     d3a:	e2 0f       	add	r30, r18
     d3c:	f3 1f       	adc	r31, r19
     d3e:	81 93       	st	Z+, r24
     d40:	91 93       	st	Z+, r25
     d42:	22 50       	subi	r18, 0x02	; 2
     d44:	31 09       	sbc	r19, r1
     d46:	39 83       	std	Y+1, r19	; 0x01
     d48:	28 83       	st	Y, r18
     d4a:	3a c0       	rjmp	.+116    	; 0xdc0 <malloc+0x128>
     d4c:	20 91 ff 02 	lds	r18, 0x02FF
     d50:	30 91 00 03 	lds	r19, 0x0300
     d54:	23 2b       	or	r18, r19
     d56:	41 f4       	brne	.+16     	; 0xd68 <malloc+0xd0>
     d58:	20 91 02 02 	lds	r18, 0x0202
     d5c:	30 91 03 02 	lds	r19, 0x0203
     d60:	30 93 00 03 	sts	0x0300, r19
     d64:	20 93 ff 02 	sts	0x02FF, r18
     d68:	20 91 00 02 	lds	r18, 0x0200
     d6c:	30 91 01 02 	lds	r19, 0x0201
     d70:	21 15       	cp	r18, r1
     d72:	31 05       	cpc	r19, r1
     d74:	41 f4       	brne	.+16     	; 0xd86 <malloc+0xee>
     d76:	2d b7       	in	r18, 0x3d	; 61
     d78:	3e b7       	in	r19, 0x3e	; 62
     d7a:	40 91 04 02 	lds	r20, 0x0204
     d7e:	50 91 05 02 	lds	r21, 0x0205
     d82:	24 1b       	sub	r18, r20
     d84:	35 0b       	sbc	r19, r21
     d86:	e0 91 ff 02 	lds	r30, 0x02FF
     d8a:	f0 91 00 03 	lds	r31, 0x0300
     d8e:	e2 17       	cp	r30, r18
     d90:	f3 07       	cpc	r31, r19
     d92:	a0 f4       	brcc	.+40     	; 0xdbc <malloc+0x124>
     d94:	2e 1b       	sub	r18, r30
     d96:	3f 0b       	sbc	r19, r31
     d98:	28 17       	cp	r18, r24
     d9a:	39 07       	cpc	r19, r25
     d9c:	78 f0       	brcs	.+30     	; 0xdbc <malloc+0x124>
     d9e:	ac 01       	movw	r20, r24
     da0:	4e 5f       	subi	r20, 0xFE	; 254
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	24 17       	cp	r18, r20
     da6:	35 07       	cpc	r19, r21
     da8:	48 f0       	brcs	.+18     	; 0xdbc <malloc+0x124>
     daa:	4e 0f       	add	r20, r30
     dac:	5f 1f       	adc	r21, r31
     dae:	50 93 00 03 	sts	0x0300, r21
     db2:	40 93 ff 02 	sts	0x02FF, r20
     db6:	81 93       	st	Z+, r24
     db8:	91 93       	st	Z+, r25
     dba:	02 c0       	rjmp	.+4      	; 0xdc0 <malloc+0x128>
     dbc:	e0 e0       	ldi	r30, 0x00	; 0
     dbe:	f0 e0       	ldi	r31, 0x00	; 0
     dc0:	cf 01       	movw	r24, r30
     dc2:	df 91       	pop	r29
     dc4:	cf 91       	pop	r28
     dc6:	08 95       	ret

00000dc8 <free>:
     dc8:	cf 93       	push	r28
     dca:	df 93       	push	r29
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	09 f4       	brne	.+2      	; 0xdd2 <free+0xa>
     dd0:	87 c0       	rjmp	.+270    	; 0xee0 <free+0x118>
     dd2:	fc 01       	movw	r30, r24
     dd4:	32 97       	sbiw	r30, 0x02	; 2
     dd6:	13 82       	std	Z+3, r1	; 0x03
     dd8:	12 82       	std	Z+2, r1	; 0x02
     dda:	c0 91 01 03 	lds	r28, 0x0301
     dde:	d0 91 02 03 	lds	r29, 0x0302
     de2:	20 97       	sbiw	r28, 0x00	; 0
     de4:	81 f4       	brne	.+32     	; 0xe06 <free+0x3e>
     de6:	20 81       	ld	r18, Z
     de8:	31 81       	ldd	r19, Z+1	; 0x01
     dea:	28 0f       	add	r18, r24
     dec:	39 1f       	adc	r19, r25
     dee:	80 91 ff 02 	lds	r24, 0x02FF
     df2:	90 91 00 03 	lds	r25, 0x0300
     df6:	82 17       	cp	r24, r18
     df8:	93 07       	cpc	r25, r19
     dfa:	79 f5       	brne	.+94     	; 0xe5a <free+0x92>
     dfc:	f0 93 00 03 	sts	0x0300, r31
     e00:	e0 93 ff 02 	sts	0x02FF, r30
     e04:	6d c0       	rjmp	.+218    	; 0xee0 <free+0x118>
     e06:	de 01       	movw	r26, r28
     e08:	20 e0       	ldi	r18, 0x00	; 0
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	ae 17       	cp	r26, r30
     e0e:	bf 07       	cpc	r27, r31
     e10:	50 f4       	brcc	.+20     	; 0xe26 <free+0x5e>
     e12:	12 96       	adiw	r26, 0x02	; 2
     e14:	4d 91       	ld	r20, X+
     e16:	5c 91       	ld	r21, X
     e18:	13 97       	sbiw	r26, 0x03	; 3
     e1a:	9d 01       	movw	r18, r26
     e1c:	41 15       	cp	r20, r1
     e1e:	51 05       	cpc	r21, r1
     e20:	09 f1       	breq	.+66     	; 0xe64 <free+0x9c>
     e22:	da 01       	movw	r26, r20
     e24:	f3 cf       	rjmp	.-26     	; 0xe0c <free+0x44>
     e26:	b3 83       	std	Z+3, r27	; 0x03
     e28:	a2 83       	std	Z+2, r26	; 0x02
     e2a:	40 81       	ld	r20, Z
     e2c:	51 81       	ldd	r21, Z+1	; 0x01
     e2e:	84 0f       	add	r24, r20
     e30:	95 1f       	adc	r25, r21
     e32:	8a 17       	cp	r24, r26
     e34:	9b 07       	cpc	r25, r27
     e36:	71 f4       	brne	.+28     	; 0xe54 <free+0x8c>
     e38:	8d 91       	ld	r24, X+
     e3a:	9c 91       	ld	r25, X
     e3c:	11 97       	sbiw	r26, 0x01	; 1
     e3e:	84 0f       	add	r24, r20
     e40:	95 1f       	adc	r25, r21
     e42:	02 96       	adiw	r24, 0x02	; 2
     e44:	91 83       	std	Z+1, r25	; 0x01
     e46:	80 83       	st	Z, r24
     e48:	12 96       	adiw	r26, 0x02	; 2
     e4a:	8d 91       	ld	r24, X+
     e4c:	9c 91       	ld	r25, X
     e4e:	13 97       	sbiw	r26, 0x03	; 3
     e50:	93 83       	std	Z+3, r25	; 0x03
     e52:	82 83       	std	Z+2, r24	; 0x02
     e54:	21 15       	cp	r18, r1
     e56:	31 05       	cpc	r19, r1
     e58:	29 f4       	brne	.+10     	; 0xe64 <free+0x9c>
     e5a:	f0 93 02 03 	sts	0x0302, r31
     e5e:	e0 93 01 03 	sts	0x0301, r30
     e62:	3e c0       	rjmp	.+124    	; 0xee0 <free+0x118>
     e64:	d9 01       	movw	r26, r18
     e66:	13 96       	adiw	r26, 0x03	; 3
     e68:	fc 93       	st	X, r31
     e6a:	ee 93       	st	-X, r30
     e6c:	12 97       	sbiw	r26, 0x02	; 2
     e6e:	4d 91       	ld	r20, X+
     e70:	5d 91       	ld	r21, X+
     e72:	a4 0f       	add	r26, r20
     e74:	b5 1f       	adc	r27, r21
     e76:	ea 17       	cp	r30, r26
     e78:	fb 07       	cpc	r31, r27
     e7a:	79 f4       	brne	.+30     	; 0xe9a <free+0xd2>
     e7c:	80 81       	ld	r24, Z
     e7e:	91 81       	ldd	r25, Z+1	; 0x01
     e80:	84 0f       	add	r24, r20
     e82:	95 1f       	adc	r25, r21
     e84:	02 96       	adiw	r24, 0x02	; 2
     e86:	d9 01       	movw	r26, r18
     e88:	11 96       	adiw	r26, 0x01	; 1
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	13 96       	adiw	r26, 0x03	; 3
     e94:	9c 93       	st	X, r25
     e96:	8e 93       	st	-X, r24
     e98:	12 97       	sbiw	r26, 0x02	; 2
     e9a:	e0 e0       	ldi	r30, 0x00	; 0
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	9b 81       	ldd	r25, Y+3	; 0x03
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	19 f0       	breq	.+6      	; 0xeac <free+0xe4>
     ea6:	fe 01       	movw	r30, r28
     ea8:	ec 01       	movw	r28, r24
     eaa:	f9 cf       	rjmp	.-14     	; 0xe9e <free+0xd6>
     eac:	ce 01       	movw	r24, r28
     eae:	02 96       	adiw	r24, 0x02	; 2
     eb0:	28 81       	ld	r18, Y
     eb2:	39 81       	ldd	r19, Y+1	; 0x01
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	20 91 ff 02 	lds	r18, 0x02FF
     ebc:	30 91 00 03 	lds	r19, 0x0300
     ec0:	28 17       	cp	r18, r24
     ec2:	39 07       	cpc	r19, r25
     ec4:	69 f4       	brne	.+26     	; 0xee0 <free+0x118>
     ec6:	30 97       	sbiw	r30, 0x00	; 0
     ec8:	29 f4       	brne	.+10     	; 0xed4 <free+0x10c>
     eca:	10 92 02 03 	sts	0x0302, r1
     ece:	10 92 01 03 	sts	0x0301, r1
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <free+0x110>
     ed4:	13 82       	std	Z+3, r1	; 0x03
     ed6:	12 82       	std	Z+2, r1	; 0x02
     ed8:	d0 93 00 03 	sts	0x0300, r29
     edc:	c0 93 ff 02 	sts	0x02FF, r28
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	08 95       	ret

00000ee6 <strnlen_P>:
     ee6:	fc 01       	movw	r30, r24
     ee8:	05 90       	lpm	r0, Z+
     eea:	61 50       	subi	r22, 0x01	; 1
     eec:	70 40       	sbci	r23, 0x00	; 0
     eee:	01 10       	cpse	r0, r1
     ef0:	d8 f7       	brcc	.-10     	; 0xee8 <strnlen_P+0x2>
     ef2:	80 95       	com	r24
     ef4:	90 95       	com	r25
     ef6:	8e 0f       	add	r24, r30
     ef8:	9f 1f       	adc	r25, r31
     efa:	08 95       	ret

00000efc <memset>:
     efc:	dc 01       	movw	r26, r24
     efe:	01 c0       	rjmp	.+2      	; 0xf02 <memset+0x6>
     f00:	6d 93       	st	X+, r22
     f02:	41 50       	subi	r20, 0x01	; 1
     f04:	50 40       	sbci	r21, 0x00	; 0
     f06:	e0 f7       	brcc	.-8      	; 0xf00 <memset+0x4>
     f08:	08 95       	ret

00000f0a <strnlen>:
     f0a:	fc 01       	movw	r30, r24
     f0c:	61 50       	subi	r22, 0x01	; 1
     f0e:	70 40       	sbci	r23, 0x00	; 0
     f10:	01 90       	ld	r0, Z+
     f12:	01 10       	cpse	r0, r1
     f14:	d8 f7       	brcc	.-10     	; 0xf0c <strnlen+0x2>
     f16:	80 95       	com	r24
     f18:	90 95       	com	r25
     f1a:	8e 0f       	add	r24, r30
     f1c:	9f 1f       	adc	r25, r31
     f1e:	08 95       	ret

00000f20 <fputc>:
     f20:	0f 93       	push	r16
     f22:	1f 93       	push	r17
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	18 2f       	mov	r17, r24
     f2a:	09 2f       	mov	r16, r25
     f2c:	eb 01       	movw	r28, r22
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	81 fd       	sbrc	r24, 1
     f32:	03 c0       	rjmp	.+6      	; 0xf3a <fputc+0x1a>
     f34:	8f ef       	ldi	r24, 0xFF	; 255
     f36:	9f ef       	ldi	r25, 0xFF	; 255
     f38:	20 c0       	rjmp	.+64     	; 0xf7a <fputc+0x5a>
     f3a:	82 ff       	sbrs	r24, 2
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <fputc+0x3e>
     f3e:	4e 81       	ldd	r20, Y+6	; 0x06
     f40:	5f 81       	ldd	r21, Y+7	; 0x07
     f42:	2c 81       	ldd	r18, Y+4	; 0x04
     f44:	3d 81       	ldd	r19, Y+5	; 0x05
     f46:	42 17       	cp	r20, r18
     f48:	53 07       	cpc	r21, r19
     f4a:	7c f4       	brge	.+30     	; 0xf6a <fputc+0x4a>
     f4c:	e8 81       	ld	r30, Y
     f4e:	f9 81       	ldd	r31, Y+1	; 0x01
     f50:	9f 01       	movw	r18, r30
     f52:	2f 5f       	subi	r18, 0xFF	; 255
     f54:	3f 4f       	sbci	r19, 0xFF	; 255
     f56:	39 83       	std	Y+1, r19	; 0x01
     f58:	28 83       	st	Y, r18
     f5a:	10 83       	st	Z, r17
     f5c:	06 c0       	rjmp	.+12     	; 0xf6a <fputc+0x4a>
     f5e:	e8 85       	ldd	r30, Y+8	; 0x08
     f60:	f9 85       	ldd	r31, Y+9	; 0x09
     f62:	81 2f       	mov	r24, r17
     f64:	19 95       	eicall
     f66:	89 2b       	or	r24, r25
     f68:	29 f7       	brne	.-54     	; 0xf34 <fputc+0x14>
     f6a:	2e 81       	ldd	r18, Y+6	; 0x06
     f6c:	3f 81       	ldd	r19, Y+7	; 0x07
     f6e:	2f 5f       	subi	r18, 0xFF	; 255
     f70:	3f 4f       	sbci	r19, 0xFF	; 255
     f72:	3f 83       	std	Y+7, r19	; 0x07
     f74:	2e 83       	std	Y+6, r18	; 0x06
     f76:	81 2f       	mov	r24, r17
     f78:	90 2f       	mov	r25, r16
     f7a:	df 91       	pop	r29
     f7c:	cf 91       	pop	r28
     f7e:	1f 91       	pop	r17
     f80:	0f 91       	pop	r16
     f82:	08 95       	ret

00000f84 <__ultoa_invert>:
     f84:	fa 01       	movw	r30, r20
     f86:	aa 27       	eor	r26, r26
     f88:	28 30       	cpi	r18, 0x08	; 8
     f8a:	51 f1       	breq	.+84     	; 0xfe0 <__ultoa_invert+0x5c>
     f8c:	20 31       	cpi	r18, 0x10	; 16
     f8e:	81 f1       	breq	.+96     	; 0xff0 <__ultoa_invert+0x6c>
     f90:	e8 94       	clt
     f92:	6f 93       	push	r22
     f94:	6e 7f       	andi	r22, 0xFE	; 254
     f96:	6e 5f       	subi	r22, 0xFE	; 254
     f98:	7f 4f       	sbci	r23, 0xFF	; 255
     f9a:	8f 4f       	sbci	r24, 0xFF	; 255
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	af 4f       	sbci	r26, 0xFF	; 255
     fa0:	b1 e0       	ldi	r27, 0x01	; 1
     fa2:	3e d0       	rcall	.+124    	; 0x1020 <__ultoa_invert+0x9c>
     fa4:	b4 e0       	ldi	r27, 0x04	; 4
     fa6:	3c d0       	rcall	.+120    	; 0x1020 <__ultoa_invert+0x9c>
     fa8:	67 0f       	add	r22, r23
     faa:	78 1f       	adc	r23, r24
     fac:	89 1f       	adc	r24, r25
     fae:	9a 1f       	adc	r25, r26
     fb0:	a1 1d       	adc	r26, r1
     fb2:	68 0f       	add	r22, r24
     fb4:	79 1f       	adc	r23, r25
     fb6:	8a 1f       	adc	r24, r26
     fb8:	91 1d       	adc	r25, r1
     fba:	a1 1d       	adc	r26, r1
     fbc:	6a 0f       	add	r22, r26
     fbe:	71 1d       	adc	r23, r1
     fc0:	81 1d       	adc	r24, r1
     fc2:	91 1d       	adc	r25, r1
     fc4:	a1 1d       	adc	r26, r1
     fc6:	20 d0       	rcall	.+64     	; 0x1008 <__ultoa_invert+0x84>
     fc8:	09 f4       	brne	.+2      	; 0xfcc <__ultoa_invert+0x48>
     fca:	68 94       	set
     fcc:	3f 91       	pop	r19
     fce:	2a e0       	ldi	r18, 0x0A	; 10
     fd0:	26 9f       	mul	r18, r22
     fd2:	11 24       	eor	r1, r1
     fd4:	30 19       	sub	r19, r0
     fd6:	30 5d       	subi	r19, 0xD0	; 208
     fd8:	31 93       	st	Z+, r19
     fda:	de f6       	brtc	.-74     	; 0xf92 <__ultoa_invert+0xe>
     fdc:	cf 01       	movw	r24, r30
     fde:	08 95       	ret
     fe0:	46 2f       	mov	r20, r22
     fe2:	47 70       	andi	r20, 0x07	; 7
     fe4:	40 5d       	subi	r20, 0xD0	; 208
     fe6:	41 93       	st	Z+, r20
     fe8:	b3 e0       	ldi	r27, 0x03	; 3
     fea:	0f d0       	rcall	.+30     	; 0x100a <__ultoa_invert+0x86>
     fec:	c9 f7       	brne	.-14     	; 0xfe0 <__ultoa_invert+0x5c>
     fee:	f6 cf       	rjmp	.-20     	; 0xfdc <__ultoa_invert+0x58>
     ff0:	46 2f       	mov	r20, r22
     ff2:	4f 70       	andi	r20, 0x0F	; 15
     ff4:	40 5d       	subi	r20, 0xD0	; 208
     ff6:	4a 33       	cpi	r20, 0x3A	; 58
     ff8:	18 f0       	brcs	.+6      	; 0x1000 <__ultoa_invert+0x7c>
     ffa:	49 5d       	subi	r20, 0xD9	; 217
     ffc:	31 fd       	sbrc	r19, 1
     ffe:	40 52       	subi	r20, 0x20	; 32
    1000:	41 93       	st	Z+, r20
    1002:	02 d0       	rcall	.+4      	; 0x1008 <__ultoa_invert+0x84>
    1004:	a9 f7       	brne	.-22     	; 0xff0 <__ultoa_invert+0x6c>
    1006:	ea cf       	rjmp	.-44     	; 0xfdc <__ultoa_invert+0x58>
    1008:	b4 e0       	ldi	r27, 0x04	; 4
    100a:	a6 95       	lsr	r26
    100c:	97 95       	ror	r25
    100e:	87 95       	ror	r24
    1010:	77 95       	ror	r23
    1012:	67 95       	ror	r22
    1014:	ba 95       	dec	r27
    1016:	c9 f7       	brne	.-14     	; 0x100a <__ultoa_invert+0x86>
    1018:	00 97       	sbiw	r24, 0x00	; 0
    101a:	61 05       	cpc	r22, r1
    101c:	71 05       	cpc	r23, r1
    101e:	08 95       	ret
    1020:	9b 01       	movw	r18, r22
    1022:	ac 01       	movw	r20, r24
    1024:	0a 2e       	mov	r0, r26
    1026:	06 94       	lsr	r0
    1028:	57 95       	ror	r21
    102a:	47 95       	ror	r20
    102c:	37 95       	ror	r19
    102e:	27 95       	ror	r18
    1030:	ba 95       	dec	r27
    1032:	c9 f7       	brne	.-14     	; 0x1026 <__ultoa_invert+0xa2>
    1034:	62 0f       	add	r22, r18
    1036:	73 1f       	adc	r23, r19
    1038:	84 1f       	adc	r24, r20
    103a:	95 1f       	adc	r25, r21
    103c:	a0 1d       	adc	r26, r0
    103e:	08 95       	ret

00001040 <_exit>:
    1040:	f8 94       	cli

00001042 <__stop_program>:
    1042:	ff cf       	rjmp	.-2      	; 0x1042 <__stop_program>
