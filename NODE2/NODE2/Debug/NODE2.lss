
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ea  00800200  00001346  000013da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001346  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  008002ea  008002ea  000014c4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000200  00000000  00000000  00001520  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001553  00000000  00000000  00001720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000009d1  00000000  00000000  00002c73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000db5  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000004b4  00000000  00000000  000043fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004fd  00000000  00000000  000048b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b49  00000000  00000000  00004dad  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  000058f6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	f3 c0       	rjmp	.+486    	; 0x1fc <__vector_5>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e6 e4       	ldi	r30, 0x46	; 70
      fc:	f3 e1       	ldi	r31, 0x13	; 19
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	aa 3e       	cpi	r26, 0xEA	; 234
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	23 e0       	ldi	r18, 0x03	; 3
     110:	aa ee       	ldi	r26, 0xEA	; 234
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	ab 30       	cpi	r26, 0x0B	; 11
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	48 d2       	rcall	.+1168   	; 0x5b0 <main>
     120:	0c 94 a1 09 	jmp	0x1342	; 0x1342 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <CAN_construct_message>:
CAN_message_t* CAN_message_receive(void){						// What does this step do //NOT NECCECARY, but if we want to reference the recieved data from another part of the program this is necceccary
	return &CAN_receive_buffer;						// What does this step do
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
     126:	90 93 ec 02 	sts	0x02EC, r25
     12a:	80 93 eb 02 	sts	0x02EB, r24
	CAN_send_buffer.length = length;
     12e:	60 93 ed 02 	sts	0x02ED, r22
	for(uint8_t i = 0; i < length; i++){
     132:	66 23       	and	r22, r22
     134:	41 f0       	breq	.+16     	; 0x146 <CAN_construct_message+0x20>
     136:	8e ee       	ldi	r24, 0xEE	; 238
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	fc 01       	movw	r30, r24
		CAN_send_buffer.data[i] = 0;
     13c:	11 92       	st	Z+, r1
     13e:	2e 2f       	mov	r18, r30
     140:	28 1b       	sub	r18, r24
}
	
void CAN_construct_message(int id, uint8_t length){
	CAN_send_buffer.id = id;
	CAN_send_buffer.length = length;
	for(uint8_t i = 0; i < length; i++){
     142:	26 17       	cp	r18, r22
     144:	d8 f3       	brcs	.-10     	; 0x13c <CAN_construct_message+0x16>
     146:	08 95       	ret

00000148 <CAN_read>:
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     148:	27 c1       	rjmp	.+590    	; 0x398 <MCP2515_read>
}
     14a:	08 95       	ret

0000014c <CAN_print>:
		return 1;
	}
	return 0;
}

void CAN_print(CAN_message_t message){
     14c:	cf 92       	push	r12
     14e:	df 92       	push	r13
     150:	ef 92       	push	r14
     152:	ff 92       	push	r15
     154:	0f 93       	push	r16
     156:	1f 93       	push	r17
     158:	cf 93       	push	r28
     15a:	df 93       	push	r29
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	2b 97       	sbiw	r28, 0x0b	; 11
     162:	0f b6       	in	r0, 0x3f	; 63
     164:	f8 94       	cli
     166:	de bf       	out	0x3e, r29	; 62
     168:	0f be       	out	0x3f, r0	; 63
     16a:	cd bf       	out	0x3d, r28	; 61
     16c:	e9 82       	std	Y+1, r14	; 0x01
     16e:	fa 82       	std	Y+2, r15	; 0x02
     170:	c0 2e       	mov	r12, r16
     172:	0b 83       	std	Y+3, r16	; 0x03
     174:	1c 83       	std	Y+4, r17	; 0x04
     176:	2d 83       	std	Y+5, r18	; 0x05
     178:	3e 83       	std	Y+6, r19	; 0x06
     17a:	4f 83       	std	Y+7, r20	; 0x07
     17c:	58 87       	std	Y+8, r21	; 0x08
     17e:	69 87       	std	Y+9, r22	; 0x09
     180:	7a 87       	std	Y+10, r23	; 0x0a
     182:	8b 87       	std	Y+11, r24	; 0x0b
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
     184:	1f 92       	push	r1
     186:	0f 93       	push	r16
     188:	8a 81       	ldd	r24, Y+2	; 0x02
     18a:	8f 93       	push	r24
     18c:	89 81       	ldd	r24, Y+1	; 0x01
     18e:	8f 93       	push	r24
     190:	86 e0       	ldi	r24, 0x06	; 6
     192:	92 e0       	ldi	r25, 0x02	; 2
     194:	9f 93       	push	r25
     196:	8f 93       	push	r24
     198:	ba d4       	rcall	.+2420   	; 0xb0e <printf>
	for(uint8_t i = 0; i < message.length; i++){
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	0f 90       	pop	r0
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	0f 90       	pop	r0
     1a6:	00 23       	and	r16, r16
     1a8:	d1 f0       	breq	.+52     	; 0x1de <CAN_print+0x92>
     1aa:	7e 01       	movw	r14, r28
     1ac:	84 e0       	ldi	r24, 0x04	; 4
     1ae:	e8 0e       	add	r14, r24
     1b0:	f1 1c       	adc	r15, r1
     1b2:	d1 2c       	mov	r13, r1
		printf("%i\t",message.data[i]);
     1b4:	0a e1       	ldi	r16, 0x1A	; 26
     1b6:	12 e0       	ldi	r17, 0x02	; 2
     1b8:	f7 01       	movw	r30, r14
     1ba:	21 91       	ld	r18, Z+
     1bc:	7f 01       	movw	r14, r30
     1be:	82 2f       	mov	r24, r18
     1c0:	99 27       	eor	r25, r25
     1c2:	87 fd       	sbrc	r24, 7
     1c4:	90 95       	com	r25
     1c6:	9f 93       	push	r25
     1c8:	2f 93       	push	r18
     1ca:	1f 93       	push	r17
     1cc:	0f 93       	push	r16
     1ce:	9f d4       	rcall	.+2366   	; 0xb0e <printf>
	return 0;
}

void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
     1d0:	d3 94       	inc	r13
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0f 90       	pop	r0
     1d8:	0f 90       	pop	r0
     1da:	dc 10       	cpse	r13, r12
     1dc:	ed cf       	rjmp	.-38     	; 0x1b8 <CAN_print+0x6c>
		printf("%i\t",message.data[i]);
	}
}
     1de:	2b 96       	adiw	r28, 0x0b	; 11
     1e0:	0f b6       	in	r0, 0x3f	; 63
     1e2:	f8 94       	cli
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	0f be       	out	0x3f, r0	; 63
     1e8:	cd bf       	out	0x3d, r28	; 61
     1ea:	df 91       	pop	r29
     1ec:	cf 91       	pop	r28
     1ee:	1f 91       	pop	r17
     1f0:	0f 91       	pop	r16
     1f2:	ff 90       	pop	r15
     1f4:	ef 90       	pop	r14
     1f6:	df 90       	pop	r13
     1f8:	cf 90       	pop	r12
     1fa:	08 95       	ret

000001fc <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     1fc:	1f 92       	push	r1
     1fe:	0f 92       	push	r0
     200:	0f b6       	in	r0, 0x3f	; 63
     202:	0f 92       	push	r0
     204:	11 24       	eor	r1, r1
     206:	8f 93       	push	r24
	receive_flag = 1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 ea 02 	sts	0x02EA, r24
}
     20e:	8f 91       	pop	r24
     210:	0f 90       	pop	r0
     212:	0f be       	out	0x3f, r0	; 63
     214:	0f 90       	pop	r0
     216:	1f 90       	pop	r1
     218:	18 95       	reti

0000021a <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
     21a:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     21c:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     21e:	ea e6       	ldi	r30, 0x6A	; 106
     220:	f0 e0       	ldi	r31, 0x00	; 0
     222:	80 81       	ld	r24, Z
     224:	8e 7f       	andi	r24, 0xFE	; 254
     226:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     228:	80 81       	ld	r24, Z
     22a:	82 60       	ori	r24, 0x02	; 2
     22c:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     22e:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
		
	
	#endif
	sei();
     230:	78 94       	sei
     232:	08 95       	ret

00000234 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     234:	db d0       	rcall	.+438    	; 0x3ec <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     236:	68 e0       	ldi	r22, 0x08	; 8
     238:	88 e2       	ldi	r24, 0x28	; 40
     23a:	90 e0       	ldi	r25, 0x00	; 0
     23c:	74 df       	rcall	.-280    	; 0x126 <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     23e:	4f ef       	ldi	r20, 0xFF	; 255
     240:	50 e0       	ldi	r21, 0x00	; 0
     242:	64 e6       	ldi	r22, 0x64	; 100
     244:	80 e6       	ldi	r24, 0x60	; 96
     246:	b6 d0       	rcall	.+364    	; 0x3b4 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     248:	4f ef       	ldi	r20, 0xFF	; 255
     24a:	50 e0       	ldi	r21, 0x00	; 0
     24c:	64 e6       	ldi	r22, 0x64	; 100
     24e:	80 e7       	ldi	r24, 0x70	; 112
     250:	b1 d0       	rcall	.+354    	; 0x3b4 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     252:	41 e0       	ldi	r20, 0x01	; 1
     254:	50 e0       	ldi	r21, 0x00	; 0
     256:	61 e0       	ldi	r22, 0x01	; 1
     258:	8b e2       	ldi	r24, 0x2B	; 43
     25a:	ac d0       	rcall	.+344    	; 0x3b4 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     25c:	40 e0       	ldi	r20, 0x00	; 0
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	60 ee       	ldi	r22, 0xE0	; 224
     262:	8f e0       	ldi	r24, 0x0F	; 15
     264:	a7 d0       	rcall	.+334    	; 0x3b4 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     266:	d9 df       	rcall	.-78     	; 0x21a <CAN_interrupt_setup>
	
	#if UART_ENABLE
		printf("MCP_CANSTAT: %i\n", MCP2515_read(MCP_CANSTAT));//comment out later
     268:	8e e0       	ldi	r24, 0x0E	; 14
     26a:	96 d0       	rcall	.+300    	; 0x398 <MCP2515_read>
     26c:	9f 93       	push	r25
     26e:	8f 93       	push	r24
     270:	8e e1       	ldi	r24, 0x1E	; 30
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	9f 93       	push	r25
     276:	8f 93       	push	r24
     278:	4a d4       	rcall	.+2196   	; 0xb0e <printf>
		printf("CAN initialized.\n\n");
     27a:	8f e2       	ldi	r24, 0x2F	; 47
     27c:	92 e0       	ldi	r25, 0x02	; 2
     27e:	58 d4       	rcall	.+2224   	; 0xb30 <puts>
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	08 95       	ret

0000028a <CAN_reception_complete>:
	
	#endif
	sei();
}

int8_t CAN_reception_complete(void){
     28a:	cf 93       	push	r28
     28c:	df 93       	push	r29
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) | (MCP2515_read(MCP_CANINTF) & MCP_RX1IF)));
     28e:	8c e2       	ldi	r24, 0x2C	; 44
     290:	83 d0       	rcall	.+262    	; 0x398 <MCP2515_read>
     292:	ec 01       	movw	r28, r24
     294:	8c e2       	ldi	r24, 0x2C	; 44
     296:	80 d0       	rcall	.+256    	; 0x398 <MCP2515_read>
     298:	82 70       	andi	r24, 0x02	; 2
     29a:	99 27       	eor	r25, r25
     29c:	c1 70       	andi	r28, 0x01	; 1
     29e:	dd 27       	eor	r29, r29
     2a0:	c8 2b       	or	r28, r24
     2a2:	d9 2b       	or	r29, r25
     2a4:	cd 2b       	or	r28, r29
     2a6:	99 f3       	breq	.-26     	; 0x28e <CAN_reception_complete+0x4>
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     2a8:	8c e2       	ldi	r24, 0x2C	; 44
     2aa:	76 d0       	rcall	.+236    	; 0x398 <MCP2515_read>
     2ac:	80 ff       	sbrs	r24, 0
     2ae:	07 c0       	rjmp	.+14     	; 0x2be <CAN_reception_complete+0x34>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     2b0:	40 e0       	ldi	r20, 0x00	; 0
     2b2:	50 e0       	ldi	r21, 0x00	; 0
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	8c e2       	ldi	r24, 0x2C	; 44
     2b8:	7d d0       	rcall	.+250    	; 0x3b4 <MCP2515_bit_modify>
		return 0;
     2ba:	80 e0       	ldi	r24, 0x00	; 0
     2bc:	0c c0       	rjmp	.+24     	; 0x2d6 <CAN_reception_complete+0x4c>
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     2be:	8c e2       	ldi	r24, 0x2C	; 44
     2c0:	6b d0       	rcall	.+214    	; 0x398 <MCP2515_read>
     2c2:	81 ff       	sbrs	r24, 1
     2c4:	07 c0       	rjmp	.+14     	; 0x2d4 <CAN_reception_complete+0x4a>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     2c6:	40 e0       	ldi	r20, 0x00	; 0
     2c8:	50 e0       	ldi	r21, 0x00	; 0
     2ca:	62 e0       	ldi	r22, 0x02	; 2
     2cc:	8c e2       	ldi	r24, 0x2C	; 44
     2ce:	72 d0       	rcall	.+228    	; 0x3b4 <MCP2515_bit_modify>
		return 1;
     2d0:	81 e0       	ldi	r24, 0x01	; 1
     2d2:	01 c0       	rjmp	.+2      	; 0x2d6 <CAN_reception_complete+0x4c>
	}
	return -1;
     2d4:	8f ef       	ldi	r24, 0xFF	; 255
}
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	if(receive_flag){
     2e8:	80 91 ea 02 	lds	r24, 0x02EA
     2ec:	88 23       	and	r24, r24
     2ee:	09 f4       	brne	.+2      	; 0x2f2 <CAN_data_receive+0x16>
     2f0:	4b c0       	rjmp	.+150    	; 0x388 <CAN_data_receive+0xac>
		receive_flag = 0;
     2f2:	10 92 ea 02 	sts	0x02EA, r1
		uint8_t n = CAN_reception_complete();
     2f6:	c9 df       	rcall	.-110    	; 0x28a <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     2f8:	c8 2f       	mov	r28, r24
     2fa:	c2 95       	swap	r28
     2fc:	c0 7f       	andi	r28, 0xF0	; 240
     2fe:	82 e6       	ldi	r24, 0x62	; 98
     300:	8c 0f       	add	r24, r28
     302:	22 df       	rcall	.-444    	; 0x148 <CAN_read>
     304:	81 e6       	ldi	r24, 0x61	; 97
     306:	8c 0f       	add	r24, r28
     308:	1f df       	rcall	.-450    	; 0x148 <CAN_read>
     30a:	28 e0       	ldi	r18, 0x08	; 8
     30c:	82 9f       	mul	r24, r18
     30e:	c0 01       	movw	r24, r0
     310:	11 24       	eor	r1, r1
     312:	90 93 f7 02 	sts	0x02F7, r25
     316:	80 93 f6 02 	sts	0x02F6, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     31a:	85 e6       	ldi	r24, 0x65	; 101
     31c:	8c 0f       	add	r24, r28
     31e:	14 df       	rcall	.-472    	; 0x148 <CAN_read>
     320:	8f 70       	andi	r24, 0x0F	; 15
     322:	80 93 f8 02 	sts	0x02F8, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     326:	88 23       	and	r24, r24
     328:	79 f0       	breq	.+30     	; 0x348 <CAN_data_receive+0x6c>
     32a:	10 e0       	ldi	r17, 0x00	; 0
     32c:	c8 ef       	ldi	r28, 0xF8	; 248
     32e:	d2 e0       	ldi	r29, 0x02	; 2
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     330:	86 e6       	ldi	r24, 0x66	; 102
     332:	81 0f       	add	r24, r17
     334:	09 df       	rcall	.-494    	; 0x148 <CAN_read>
     336:	e1 2f       	mov	r30, r17
     338:	f0 e0       	ldi	r31, 0x00	; 0
     33a:	ea 50       	subi	r30, 0x0A	; 10
     33c:	fd 4f       	sbci	r31, 0xFD	; 253
     33e:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     340:	1f 5f       	subi	r17, 0xFF	; 255
     342:	88 81       	ld	r24, Y
     344:	18 17       	cp	r17, r24
     346:	a0 f3       	brcs	.-24     	; 0x330 <CAN_data_receive+0x54>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		#if UART_ENABLE || 1
			printf("\nRECIVED MESSAGE:");
     348:	81 e4       	ldi	r24, 0x41	; 65
     34a:	92 e0       	ldi	r25, 0x02	; 2
     34c:	9f 93       	push	r25
     34e:	8f 93       	push	r24
     350:	de d3       	rcall	.+1980   	; 0xb0e <printf>
			CAN_print(CAN_receive_buffer);
     352:	e0 90 f6 02 	lds	r14, 0x02F6
     356:	f0 90 f7 02 	lds	r15, 0x02F7
     35a:	00 91 f8 02 	lds	r16, 0x02F8
     35e:	10 91 f9 02 	lds	r17, 0x02F9
     362:	20 91 fa 02 	lds	r18, 0x02FA
     366:	30 91 fb 02 	lds	r19, 0x02FB
     36a:	40 91 fc 02 	lds	r20, 0x02FC
     36e:	50 91 fd 02 	lds	r21, 0x02FD
     372:	60 91 fe 02 	lds	r22, 0x02FE
     376:	70 91 ff 02 	lds	r23, 0x02FF
     37a:	80 91 00 03 	lds	r24, 0x0300
     37e:	e6 de       	rcall	.-564    	; 0x14c <CAN_print>
		#endif
		return 1;
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	01 c0       	rjmp	.+2      	; 0x38a <CAN_data_receive+0xae>
	}
	return 0;
     388:	80 e0       	ldi	r24, 0x00	; 0
}
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	1f 91       	pop	r17
     390:	0f 91       	pop	r16
     392:	ff 90       	pop	r15
     394:	ef 90       	pop	r14
     396:	08 95       	ret

00000398 <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     398:	cf 93       	push	r28
     39a:	c8 2f       	mov	r28, r24
     39c:	36 d0       	rcall	.+108    	; 0x40a <SPI_select>
     39e:	83 e0       	ldi	r24, 0x03	; 3
     3a0:	28 d0       	rcall	.+80     	; 0x3f2 <SPI_send>
     3a2:	8c 2f       	mov	r24, r28
     3a4:	26 d0       	rcall	.+76     	; 0x3f2 <SPI_send>
     3a6:	2a d0       	rcall	.+84     	; 0x3fc <SPI_receive>
     3a8:	c8 2f       	mov	r28, r24
     3aa:	31 d0       	rcall	.+98     	; 0x40e <SPI_deselect>
     3ac:	8c 2f       	mov	r24, r28
     3ae:	90 e0       	ldi	r25, 0x00	; 0
     3b0:	cf 91       	pop	r28
     3b2:	08 95       	ret

000003b4 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	18 2f       	mov	r17, r24
     3bc:	d6 2f       	mov	r29, r22
     3be:	c4 2f       	mov	r28, r20
	SPI_select();
     3c0:	24 d0       	rcall	.+72     	; 0x40a <SPI_select>
	SPI_send(MCP_BITMOD);
     3c2:	85 e0       	ldi	r24, 0x05	; 5
     3c4:	16 d0       	rcall	.+44     	; 0x3f2 <SPI_send>
	SPI_send(adr);
     3c6:	81 2f       	mov	r24, r17
     3c8:	14 d0       	rcall	.+40     	; 0x3f2 <SPI_send>
	SPI_send(mask);
     3ca:	8d 2f       	mov	r24, r29
     3cc:	12 d0       	rcall	.+36     	; 0x3f2 <SPI_send>
	SPI_send(data);
     3ce:	8c 2f       	mov	r24, r28
     3d0:	10 d0       	rcall	.+32     	; 0x3f2 <SPI_send>
	SPI_deselect();
     3d2:	1d d0       	rcall	.+58     	; 0x40e <SPI_deselect>
}
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	08 95       	ret

000003dc <MCP2515_reset>:


void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
     3dc:	84 e9       	ldi	r24, 0x94	; 148
     3de:	92 e0       	ldi	r25, 0x02	; 2
     3e0:	a7 d3       	rcall	.+1870   	; 0xb30 <puts>
	#endif
	SPI_select();
     3e2:	13 d0       	rcall	.+38     	; 0x40a <SPI_select>
	SPI_send(MCP_RESET);
     3e4:	80 ec       	ldi	r24, 0xC0	; 192
     3e6:	05 d0       	rcall	.+10     	; 0x3f2 <SPI_send>
	SPI_deselect();
     3e8:	12 c0       	rjmp	.+36     	; 0x40e <SPI_deselect>
     3ea:	08 95       	ret

000003ec <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     3ec:	12 d0       	rcall	.+36     	; 0x412 <SPI_initialize>
	MCP2515_reset();
     3ee:	f6 cf       	rjmp	.-20     	; 0x3dc <MCP2515_reset>
     3f0:	08 95       	ret

000003f2 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     3f2:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     3f4:	0d b4       	in	r0, 0x2d	; 45
     3f6:	07 fe       	sbrs	r0, 7
     3f8:	fd cf       	rjmp	.-6      	; 0x3f4 <SPI_send+0x2>

}
     3fa:	08 95       	ret

000003fc <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	f9 df       	rcall	.-14     	; 0x3f2 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     400:	0d b4       	in	r0, 0x2d	; 45
     402:	07 fe       	sbrs	r0, 7
     404:	fd cf       	rjmp	.-6      	; 0x400 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     406:	8e b5       	in	r24, 0x2e	; 46
}
     408:	08 95       	ret

0000040a <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     40a:	2f 98       	cbi	0x05, 7	; 5
     40c:	08 95       	ret

0000040e <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     40e:	2f 9a       	sbi	0x05, 7	; 5
     410:	08 95       	ret

00000412 <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     412:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     414:	8c b5       	in	r24, 0x2c	; 44
     416:	81 60       	ori	r24, 0x01	; 1
     418:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     41a:	84 b1       	in	r24, 0x04	; 4
     41c:	86 68       	ori	r24, 0x86	; 134
     41e:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     420:	8c b5       	in	r24, 0x2c	; 44
     422:	80 65       	ori	r24, 0x50	; 80
     424:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     426:	f3 df       	rcall	.-26     	; 0x40e <SPI_deselect>
	#if UART_ENABLE
		printf("SPI communication initialized.\n");
     428:	86 ea       	ldi	r24, 0xA6	; 166
     42a:	92 e0       	ldi	r25, 0x02	; 2
     42c:	81 c3       	rjmp	.+1794   	; 0xb30 <puts>
     42e:	08 95       	ret

00000430 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     430:	e0 ec       	ldi	r30, 0xC0	; 192
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	90 81       	ld	r25, Z
     436:	95 ff       	sbrs	r25, 5
     438:	fd cf       	rjmp	.-6      	; 0x434 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     43a:	80 93 c6 00 	sts	0x00C6, r24
     43e:	08 95       	ret

00000440 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     440:	e0 ec       	ldi	r30, 0xC0	; 192
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	88 23       	and	r24, r24
     448:	ec f7       	brge	.-6      	; 0x444 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     44a:	80 91 c6 00 	lds	r24, 0x00C6
}
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	08 95       	ret

00000452 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     452:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     456:	87 e6       	ldi	r24, 0x67	; 103
     458:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     45c:	88 e1       	ldi	r24, 0x18	; 24
     45e:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     462:	8e e0       	ldi	r24, 0x0E	; 14
     464:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     468:	60 e2       	ldi	r22, 0x20	; 32
     46a:	72 e0       	ldi	r23, 0x02	; 2
     46c:	88 e1       	ldi	r24, 0x18	; 24
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	04 c3       	rjmp	.+1544   	; 0xa7a <fdevopen>
     472:	08 95       	ret

00000474 <IR_init>:
#include "IRsensor.h"


//int input_val;

void IR_init(void){	
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
	
	//Enable input at port F0
	DDRF &= ~(1 << PF0);
     478:	80 98       	cbi	0x10, 0	; 16

	//Left adjusting (the 10-bit result) instead of right adjusting.
	//ADMUX |= (1<<ADLAR);
	
	// Set ADC prescaler to 128 -> 125kHz sample rate @ 16MHz.
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		
     47a:	ea e7       	ldi	r30, 0x7A	; 122
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	80 81       	ld	r24, Z
     480:	87 60       	ori	r24, 0x07	; 7
     482:	80 83       	st	Z, r24
	
	//Turning on internal voltage reference.
	ADMUX = (1<<REFS0);//|(1<<REFS1);
     484:	ac e7       	ldi	r26, 0x7C	; 124
     486:	b0 e0       	ldi	r27, 0x00	; 0
     488:	80 e4       	ldi	r24, 0x40	; 64
     48a:	8c 93       	st	X, r24
	
	//Use ADC0 -> Mux5:0 = 00000
	ADMUX &= ~((1<<MUX4)&(1<<MUX3)&(1<<MUX2)&(1<<MUX1)&(1<<MUX0));
     48c:	8c 91       	ld	r24, X
     48e:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<MUX5);
     490:	cb e7       	ldi	r28, 0x7B	; 123
     492:	d0 e0       	ldi	r29, 0x00	; 0
     494:	88 81       	ld	r24, Y
     496:	87 7f       	andi	r24, 0xF7	; 247
     498:	88 83       	st	Y, r24
	
	// ADC Auto Triger Engable.
	ADCSRA |= (1<<ADATE);
     49a:	80 81       	ld	r24, Z
     49c:	80 62       	ori	r24, 0x20	; 32
     49e:	80 83       	st	Z, r24
	
	//Use Free-running mode.
	ADCSRB = (1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0);
     4a0:	87 e0       	ldi	r24, 0x07	; 7
     4a2:	88 83       	st	Y, r24
	
	//Use 8-bit resolution, all data is stored in ADCH.
	ADMUX |= (1<<ADLAR);
     4a4:	8c 91       	ld	r24, X
     4a6:	80 62       	ori	r24, 0x20	; 32
     4a8:	8c 93       	st	X, r24
	
	//Enabling ADC. ADC Result will be presented in ADC Data Registers ADCH & ADCL.
	ADCSRA |= (1<<ADEN);
     4aa:	80 81       	ld	r24, Z
     4ac:	80 68       	ori	r24, 0x80	; 128
     4ae:	80 83       	st	Z, r24
	
	// Start A2D conversion.
	ADCSRA |= (1<<ADSC);            
     4b0:	80 81       	ld	r24, Z
     4b2:	80 64       	ori	r24, 0x40	; 64
     4b4:	80 83       	st	Z, r24
	
	
	

}
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <read_adc>:
uint16_t read_adc(void)
{
	//ADMUX = (0);
	//ADCSRA &= ~(1<<ADEN);			//Disabling ADC -> restarting the prescaler
	//ADCSRA |= (1<<ADEN);			//Enabling the ADC
	ADCSRA |= (1<<ADSC);            //start conversion
     4bc:	ea e7       	ldi	r30, 0x7A	; 122
     4be:	f0 e0       	ldi	r31, 0x00	; 0
     4c0:	80 81       	ld	r24, Z
     4c2:	80 64       	ori	r24, 0x40	; 64
     4c4:	80 83       	st	Z, r24

		
	while(ADCSRA & (1<<ADSC));                        //Wait for conversion to be done.
     4c6:	80 81       	ld	r24, Z
     4c8:	86 fd       	sbrc	r24, 6
     4ca:	fd cf       	rjmp	.-6      	; 0x4c6 <read_adc+0xa>
	//read ADC somewhere

	//printf("%i", ADCH); 
	return 0;   
		                                    //return the ADC conversion result from the ADC Result Registers (ADCL, ADCH)
}
     4cc:	80 e0       	ldi	r24, 0x00	; 0
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	08 95       	ret

000004d2 <servo_set>:
void servo_init(void){
	pwm_init(20);
	servo_set(0);
}

int servo_set(int value){
     4d2:	cf 92       	push	r12
     4d4:	df 92       	push	r13
     4d6:	ef 92       	push	r14
     4d8:	ff 92       	push	r15
     4da:	bc 01       	movw	r22, r24
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
     4dc:	8c 59       	subi	r24, 0x9C	; 156
     4de:	9f 4f       	sbci	r25, 0xFF	; 255
     4e0:	89 3c       	cpi	r24, 0xC9	; 201
     4e2:	91 05       	cpc	r25, r1
     4e4:	08 f0       	brcs	.+2      	; 0x4e8 <servo_set+0x16>
     4e6:	46 c0       	rjmp	.+140    	; 0x574 <servo_set+0xa2>
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
     4e8:	88 27       	eor	r24, r24
     4ea:	77 fd       	sbrc	r23, 7
     4ec:	80 95       	com	r24
     4ee:	98 2f       	mov	r25, r24
     4f0:	ad d1       	rcall	.+858    	; 0x84c <__floatsisf>
     4f2:	9b 01       	movw	r18, r22
     4f4:	ac 01       	movw	r20, r24
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	88 ec       	ldi	r24, 0xC8	; 200
     4fc:	92 e4       	ldi	r25, 0x42	; 66
     4fe:	a2 d0       	rcall	.+324    	; 0x644 <__subsf3>
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	48 e4       	ldi	r20, 0x48	; 72
     506:	53 e4       	ldi	r21, 0x43	; 67
     508:	06 d1       	rcall	.+524    	; 0x716 <__divsf3>
     50a:	29 e9       	ldi	r18, 0x99	; 153
     50c:	39 e9       	ldi	r19, 0x99	; 153
     50e:	49 e9       	ldi	r20, 0x99	; 153
     510:	5f e3       	ldi	r21, 0x3F	; 63
     512:	50 d2       	rcall	.+1184   	; 0x9b4 <__mulsf3>
     514:	26 e6       	ldi	r18, 0x66	; 102
     516:	36 e6       	ldi	r19, 0x66	; 102
     518:	46 e6       	ldi	r20, 0x66	; 102
     51a:	5f e3       	ldi	r21, 0x3F	; 63
     51c:	94 d0       	rcall	.+296    	; 0x646 <__addsf3>
     51e:	6b 01       	movw	r12, r22
     520:	7c 01       	movw	r14, r24
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
     522:	26 e6       	ldi	r18, 0x66	; 102
     524:	36 e6       	ldi	r19, 0x66	; 102
     526:	46 e6       	ldi	r20, 0x66	; 102
     528:	5f e3       	ldi	r21, 0x3F	; 63
     52a:	40 d2       	rcall	.+1152   	; 0x9ac <__gesf2>
     52c:	88 23       	and	r24, r24
     52e:	2c f1       	brlt	.+74     	; 0x57a <servo_set+0xa8>
     530:	26 e6       	ldi	r18, 0x66	; 102
     532:	36 e6       	ldi	r19, 0x66	; 102
     534:	46 e0       	ldi	r20, 0x06	; 6
     536:	50 e4       	ldi	r21, 0x40	; 64
     538:	c7 01       	movw	r24, r14
     53a:	b6 01       	movw	r22, r12
     53c:	e8 d0       	rcall	.+464    	; 0x70e <__cmpsf2>
     53e:	18 16       	cp	r1, r24
     540:	fc f0       	brlt	.+62     	; 0x580 <servo_set+0xae>
			pwm_set_pulse_width(pulse_width);
     542:	c7 01       	movw	r24, r14
     544:	b6 01       	movw	r22, r12
     546:	4c d0       	rcall	.+152    	; 0x5e0 <pwm_set_pulse_width>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	48 ec       	ldi	r20, 0xC8	; 200
     54e:	52 e4       	ldi	r21, 0x42	; 66
     550:	c7 01       	movw	r24, r14
     552:	b6 01       	movw	r22, r12
     554:	2f d2       	rcall	.+1118   	; 0x9b4 <__mulsf3>
     556:	47 d1       	rcall	.+654    	; 0x7e6 <__fixsfsi>
     558:	7f 93       	push	r23
     55a:	6f 93       	push	r22
     55c:	85 ec       	ldi	r24, 0xC5	; 197
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	9f 93       	push	r25
     562:	8f 93       	push	r24
     564:	d4 d2       	rcall	.+1448   	; 0xb0e <printf>
			#endif
			return 1;
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	0f 90       	pop	r0
     56c:	0f 90       	pop	r0
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	90 e0       	ldi	r25, 0x00	; 0
     572:	08 c0       	rjmp	.+16     	; 0x584 <servo_set+0xb2>
		}else{
			return 0;
		}
	}else{
		return -1;
     574:	8f ef       	ldi	r24, 0xFF	; 255
     576:	9f ef       	ldi	r25, 0xFF	; 255
     578:	05 c0       	rjmp	.+10     	; 0x584 <servo_set+0xb2>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
		}else{
			return 0;
     57a:	80 e0       	ldi	r24, 0x00	; 0
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <servo_set+0xb2>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		return -1;
	}
     584:	ff 90       	pop	r15
     586:	ef 90       	pop	r14
     588:	df 90       	pop	r13
     58a:	cf 90       	pop	r12
     58c:	08 95       	ret

0000058e <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(20);
     58e:	60 e0       	ldi	r22, 0x00	; 0
     590:	70 e0       	ldi	r23, 0x00	; 0
     592:	80 ea       	ldi	r24, 0xA0	; 160
     594:	91 e4       	ldi	r25, 0x41	; 65
     596:	3a d0       	rcall	.+116    	; 0x60c <pwm_init>
	servo_set(0);
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	9a cf       	rjmp	.-204    	; 0x4d2 <servo_set>
     59e:	08 95       	ret

000005a0 <init_all>:
    return 0;
}

void init_all(void){
	
	cli();
     5a0:	f8 94       	cli
	
	CAN_initialize();
     5a2:	48 de       	rcall	.-880    	; 0x234 <CAN_initialize>
	
	
	#if UART_ENABLE
		init_UART();
     5a4:	56 df       	rcall	.-340    	; 0x452 <init_UART>
		printf("Program initialized\n");
     5a6:	88 ec       	ldi	r24, 0xC8	; 200
     5a8:	92 e0       	ldi	r25, 0x02	; 2
     5aa:	c2 d2       	rcall	.+1412   	; 0xb30 <puts>
	#endif
	sei();
     5ac:	78 94       	sei
     5ae:	08 95       	ret

000005b0 <main>:
#include	"SD_card.h"
#include	"sounds.h"
void init_all(void);

int main(void){
	init_all();
     5b0:	f7 df       	rcall	.-18     	; 0x5a0 <init_all>
	
	printf("Hallo\n");
     5b2:	8c ed       	ldi	r24, 0xDC	; 220
     5b4:	92 e0       	ldi	r25, 0x02	; 2
     5b6:	bc d2       	rcall	.+1400   	; 0xb30 <puts>
	servo_init();
     5b8:	ea df       	rcall	.-44     	; 0x58e <servo_init>
	buzzer_init();
	buzzer_set_freq(100);
	_delay_ms(200);
	buzzer_of();
	*/
	IR_init();
     5ba:	5c df       	rcall	.-328    	; 0x474 <IR_init>
			//sound_play_effect(1);
			
			//servo_set(CAN_message_receive()->data[0]);
		}
		read_adc();
		printf("IR 	%i\n", ADCH);
     5bc:	09 e7       	ldi	r16, 0x79	; 121
     5be:	10 e0       	ldi	r17, 0x00	; 0
     5c0:	c2 ee       	ldi	r28, 0xE2	; 226
     5c2:	d2 e0       	ldi	r29, 0x02	; 2
	while(1){
		if(sendCAN){
			//CAN_message_send(data,0);
			//data[7]--;
		}
		if(CAN_data_receive()){
     5c4:	8b de       	rcall	.-746    	; 0x2dc <CAN_data_receive>
			//_delay_ms(1000);
			//sound_play_effect(1);
			
			//servo_set(CAN_message_receive()->data[0]);
		}
		read_adc();
     5c6:	7a df       	rcall	.-268    	; 0x4bc <read_adc>
		printf("IR 	%i\n", ADCH);
     5c8:	f8 01       	movw	r30, r16
     5ca:	80 81       	ld	r24, Z
     5cc:	1f 92       	push	r1
     5ce:	8f 93       	push	r24
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	9c d2       	rcall	.+1336   	; 0xb0e <printf>
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	f2 cf       	rjmp	.-28     	; 0x5c4 <main+0x14>

000005e0 <pwm_set_pulse_width>:

	//ICR3 = F_CPU/128/2;
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	OCR3A = (int)(SCALAR_IN_MS * val);
     5e0:	20 e0       	ldi	r18, 0x00	; 0
     5e2:	30 e0       	ldi	r19, 0x00	; 0
     5e4:	4a e7       	ldi	r20, 0x7A	; 122
     5e6:	51 e4       	ldi	r21, 0x41	; 65
     5e8:	e5 d1       	rcall	.+970    	; 0x9b4 <__mulsf3>
     5ea:	fd d0       	rcall	.+506    	; 0x7e6 <__fixsfsi>
     5ec:	70 93 99 00 	sts	0x0099, r23
     5f0:	60 93 98 00 	sts	0x0098, r22
     5f4:	08 95       	ret

000005f6 <pwm_set_period>:
}

void pwm_set_period(double period){
	ICR3 = (int)(SCALAR_IN_MS * period);
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	4a e7       	ldi	r20, 0x7A	; 122
     5fc:	51 e4       	ldi	r21, 0x41	; 65
     5fe:	da d1       	rcall	.+948    	; 0x9b4 <__mulsf3>
     600:	f2 d0       	rcall	.+484    	; 0x7e6 <__fixsfsi>
     602:	70 93 97 00 	sts	0x0097, r23
     606:	60 93 96 00 	sts	0x0096, r22
     60a:	08 95       	ret

0000060c <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	DDRE |= (1 << PE3);
     60c:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	TCCR3A &= ~(1<<WGM30);
     60e:	e0 e9       	ldi	r30, 0x90	; 144
     610:	f0 e0       	ldi	r31, 0x00	; 0
     612:	20 81       	ld	r18, Z
     614:	2e 7f       	andi	r18, 0xFE	; 254
     616:	20 83       	st	Z, r18
	TCCR3A |= (1<<WGM31);
     618:	20 81       	ld	r18, Z
     61a:	22 60       	ori	r18, 0x02	; 2
     61c:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)	
     61e:	a1 e9       	ldi	r26, 0x91	; 145
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	2c 91       	ld	r18, X
     624:	28 61       	ori	r18, 0x18	; 24
     626:	2c 93       	st	X, r18
		
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	TCCR3A |= (1<<COM3A1);
     628:	20 81       	ld	r18, Z
     62a:	20 68       	ori	r18, 0x80	; 128
     62c:	20 83       	st	Z, r18
	TCCR3A &= ~(1<<COM3A0);
     62e:	20 81       	ld	r18, Z
     630:	2f 7b       	andi	r18, 0xBF	; 191
     632:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	TCCR3B |= (1<<CS32) | (1<<CS30);
     634:	2c 91       	ld	r18, X
     636:	25 60       	ori	r18, 0x05	; 5
     638:	2c 93       	st	X, r18
	TCCR3B &= ~(1<<CS31);
     63a:	2c 91       	ld	r18, X
     63c:	2d 7f       	andi	r18, 0xFD	; 253
     63e:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.				CHECK THIS DIRK!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	pwm_set_period(period);
     640:	da cf       	rjmp	.-76     	; 0x5f6 <pwm_set_period>
     642:	08 95       	ret

00000644 <__subsf3>:
     644:	50 58       	subi	r21, 0x80	; 128

00000646 <__addsf3>:
     646:	bb 27       	eor	r27, r27
     648:	aa 27       	eor	r26, r26
     64a:	0e d0       	rcall	.+28     	; 0x668 <__addsf3x>
     64c:	75 c1       	rjmp	.+746    	; 0x938 <__fp_round>
     64e:	66 d1       	rcall	.+716    	; 0x91c <__fp_pscA>
     650:	30 f0       	brcs	.+12     	; 0x65e <__addsf3+0x18>
     652:	6b d1       	rcall	.+726    	; 0x92a <__fp_pscB>
     654:	20 f0       	brcs	.+8      	; 0x65e <__addsf3+0x18>
     656:	31 f4       	brne	.+12     	; 0x664 <__addsf3+0x1e>
     658:	9f 3f       	cpi	r25, 0xFF	; 255
     65a:	11 f4       	brne	.+4      	; 0x660 <__addsf3+0x1a>
     65c:	1e f4       	brtc	.+6      	; 0x664 <__addsf3+0x1e>
     65e:	5b c1       	rjmp	.+694    	; 0x916 <__fp_nan>
     660:	0e f4       	brtc	.+2      	; 0x664 <__addsf3+0x1e>
     662:	e0 95       	com	r30
     664:	e7 fb       	bst	r30, 7
     666:	51 c1       	rjmp	.+674    	; 0x90a <__fp_inf>

00000668 <__addsf3x>:
     668:	e9 2f       	mov	r30, r25
     66a:	77 d1       	rcall	.+750    	; 0x95a <__fp_split3>
     66c:	80 f3       	brcs	.-32     	; 0x64e <__addsf3+0x8>
     66e:	ba 17       	cp	r27, r26
     670:	62 07       	cpc	r22, r18
     672:	73 07       	cpc	r23, r19
     674:	84 07       	cpc	r24, r20
     676:	95 07       	cpc	r25, r21
     678:	18 f0       	brcs	.+6      	; 0x680 <__addsf3x+0x18>
     67a:	71 f4       	brne	.+28     	; 0x698 <__addsf3x+0x30>
     67c:	9e f5       	brtc	.+102    	; 0x6e4 <__addsf3x+0x7c>
     67e:	8f c1       	rjmp	.+798    	; 0x99e <__fp_zero>
     680:	0e f4       	brtc	.+2      	; 0x684 <__addsf3x+0x1c>
     682:	e0 95       	com	r30
     684:	0b 2e       	mov	r0, r27
     686:	ba 2f       	mov	r27, r26
     688:	a0 2d       	mov	r26, r0
     68a:	0b 01       	movw	r0, r22
     68c:	b9 01       	movw	r22, r18
     68e:	90 01       	movw	r18, r0
     690:	0c 01       	movw	r0, r24
     692:	ca 01       	movw	r24, r20
     694:	a0 01       	movw	r20, r0
     696:	11 24       	eor	r1, r1
     698:	ff 27       	eor	r31, r31
     69a:	59 1b       	sub	r21, r25
     69c:	99 f0       	breq	.+38     	; 0x6c4 <__addsf3x+0x5c>
     69e:	59 3f       	cpi	r21, 0xF9	; 249
     6a0:	50 f4       	brcc	.+20     	; 0x6b6 <__addsf3x+0x4e>
     6a2:	50 3e       	cpi	r21, 0xE0	; 224
     6a4:	68 f1       	brcs	.+90     	; 0x700 <__addsf3x+0x98>
     6a6:	1a 16       	cp	r1, r26
     6a8:	f0 40       	sbci	r31, 0x00	; 0
     6aa:	a2 2f       	mov	r26, r18
     6ac:	23 2f       	mov	r18, r19
     6ae:	34 2f       	mov	r19, r20
     6b0:	44 27       	eor	r20, r20
     6b2:	58 5f       	subi	r21, 0xF8	; 248
     6b4:	f3 cf       	rjmp	.-26     	; 0x69c <__addsf3x+0x34>
     6b6:	46 95       	lsr	r20
     6b8:	37 95       	ror	r19
     6ba:	27 95       	ror	r18
     6bc:	a7 95       	ror	r26
     6be:	f0 40       	sbci	r31, 0x00	; 0
     6c0:	53 95       	inc	r21
     6c2:	c9 f7       	brne	.-14     	; 0x6b6 <__addsf3x+0x4e>
     6c4:	7e f4       	brtc	.+30     	; 0x6e4 <__addsf3x+0x7c>
     6c6:	1f 16       	cp	r1, r31
     6c8:	ba 0b       	sbc	r27, r26
     6ca:	62 0b       	sbc	r22, r18
     6cc:	73 0b       	sbc	r23, r19
     6ce:	84 0b       	sbc	r24, r20
     6d0:	ba f0       	brmi	.+46     	; 0x700 <__addsf3x+0x98>
     6d2:	91 50       	subi	r25, 0x01	; 1
     6d4:	a1 f0       	breq	.+40     	; 0x6fe <__addsf3x+0x96>
     6d6:	ff 0f       	add	r31, r31
     6d8:	bb 1f       	adc	r27, r27
     6da:	66 1f       	adc	r22, r22
     6dc:	77 1f       	adc	r23, r23
     6de:	88 1f       	adc	r24, r24
     6e0:	c2 f7       	brpl	.-16     	; 0x6d2 <__addsf3x+0x6a>
     6e2:	0e c0       	rjmp	.+28     	; 0x700 <__addsf3x+0x98>
     6e4:	ba 0f       	add	r27, r26
     6e6:	62 1f       	adc	r22, r18
     6e8:	73 1f       	adc	r23, r19
     6ea:	84 1f       	adc	r24, r20
     6ec:	48 f4       	brcc	.+18     	; 0x700 <__addsf3x+0x98>
     6ee:	87 95       	ror	r24
     6f0:	77 95       	ror	r23
     6f2:	67 95       	ror	r22
     6f4:	b7 95       	ror	r27
     6f6:	f7 95       	ror	r31
     6f8:	9e 3f       	cpi	r25, 0xFE	; 254
     6fa:	08 f0       	brcs	.+2      	; 0x6fe <__addsf3x+0x96>
     6fc:	b3 cf       	rjmp	.-154    	; 0x664 <__addsf3+0x1e>
     6fe:	93 95       	inc	r25
     700:	88 0f       	add	r24, r24
     702:	08 f0       	brcs	.+2      	; 0x706 <__addsf3x+0x9e>
     704:	99 27       	eor	r25, r25
     706:	ee 0f       	add	r30, r30
     708:	97 95       	ror	r25
     70a:	87 95       	ror	r24
     70c:	08 95       	ret

0000070e <__cmpsf2>:
     70e:	d9 d0       	rcall	.+434    	; 0x8c2 <__fp_cmp>
     710:	08 f4       	brcc	.+2      	; 0x714 <__cmpsf2+0x6>
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	08 95       	ret

00000716 <__divsf3>:
     716:	0c d0       	rcall	.+24     	; 0x730 <__divsf3x>
     718:	0f c1       	rjmp	.+542    	; 0x938 <__fp_round>
     71a:	07 d1       	rcall	.+526    	; 0x92a <__fp_pscB>
     71c:	40 f0       	brcs	.+16     	; 0x72e <__divsf3+0x18>
     71e:	fe d0       	rcall	.+508    	; 0x91c <__fp_pscA>
     720:	30 f0       	brcs	.+12     	; 0x72e <__divsf3+0x18>
     722:	21 f4       	brne	.+8      	; 0x72c <__divsf3+0x16>
     724:	5f 3f       	cpi	r21, 0xFF	; 255
     726:	19 f0       	breq	.+6      	; 0x72e <__divsf3+0x18>
     728:	f0 c0       	rjmp	.+480    	; 0x90a <__fp_inf>
     72a:	51 11       	cpse	r21, r1
     72c:	39 c1       	rjmp	.+626    	; 0x9a0 <__fp_szero>
     72e:	f3 c0       	rjmp	.+486    	; 0x916 <__fp_nan>

00000730 <__divsf3x>:
     730:	14 d1       	rcall	.+552    	; 0x95a <__fp_split3>
     732:	98 f3       	brcs	.-26     	; 0x71a <__divsf3+0x4>

00000734 <__divsf3_pse>:
     734:	99 23       	and	r25, r25
     736:	c9 f3       	breq	.-14     	; 0x72a <__divsf3+0x14>
     738:	55 23       	and	r21, r21
     73a:	b1 f3       	breq	.-20     	; 0x728 <__divsf3+0x12>
     73c:	95 1b       	sub	r25, r21
     73e:	55 0b       	sbc	r21, r21
     740:	bb 27       	eor	r27, r27
     742:	aa 27       	eor	r26, r26
     744:	62 17       	cp	r22, r18
     746:	73 07       	cpc	r23, r19
     748:	84 07       	cpc	r24, r20
     74a:	38 f0       	brcs	.+14     	; 0x75a <__divsf3_pse+0x26>
     74c:	9f 5f       	subi	r25, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	22 0f       	add	r18, r18
     752:	33 1f       	adc	r19, r19
     754:	44 1f       	adc	r20, r20
     756:	aa 1f       	adc	r26, r26
     758:	a9 f3       	breq	.-22     	; 0x744 <__divsf3_pse+0x10>
     75a:	33 d0       	rcall	.+102    	; 0x7c2 <__divsf3_pse+0x8e>
     75c:	0e 2e       	mov	r0, r30
     75e:	3a f0       	brmi	.+14     	; 0x76e <__divsf3_pse+0x3a>
     760:	e0 e8       	ldi	r30, 0x80	; 128
     762:	30 d0       	rcall	.+96     	; 0x7c4 <__divsf3_pse+0x90>
     764:	91 50       	subi	r25, 0x01	; 1
     766:	50 40       	sbci	r21, 0x00	; 0
     768:	e6 95       	lsr	r30
     76a:	00 1c       	adc	r0, r0
     76c:	ca f7       	brpl	.-14     	; 0x760 <__divsf3_pse+0x2c>
     76e:	29 d0       	rcall	.+82     	; 0x7c2 <__divsf3_pse+0x8e>
     770:	fe 2f       	mov	r31, r30
     772:	27 d0       	rcall	.+78     	; 0x7c2 <__divsf3_pse+0x8e>
     774:	66 0f       	add	r22, r22
     776:	77 1f       	adc	r23, r23
     778:	88 1f       	adc	r24, r24
     77a:	bb 1f       	adc	r27, r27
     77c:	26 17       	cp	r18, r22
     77e:	37 07       	cpc	r19, r23
     780:	48 07       	cpc	r20, r24
     782:	ab 07       	cpc	r26, r27
     784:	b0 e8       	ldi	r27, 0x80	; 128
     786:	09 f0       	breq	.+2      	; 0x78a <__divsf3_pse+0x56>
     788:	bb 0b       	sbc	r27, r27
     78a:	80 2d       	mov	r24, r0
     78c:	bf 01       	movw	r22, r30
     78e:	ff 27       	eor	r31, r31
     790:	93 58       	subi	r25, 0x83	; 131
     792:	5f 4f       	sbci	r21, 0xFF	; 255
     794:	2a f0       	brmi	.+10     	; 0x7a0 <__divsf3_pse+0x6c>
     796:	9e 3f       	cpi	r25, 0xFE	; 254
     798:	51 05       	cpc	r21, r1
     79a:	68 f0       	brcs	.+26     	; 0x7b6 <__divsf3_pse+0x82>
     79c:	b6 c0       	rjmp	.+364    	; 0x90a <__fp_inf>
     79e:	00 c1       	rjmp	.+512    	; 0x9a0 <__fp_szero>
     7a0:	5f 3f       	cpi	r21, 0xFF	; 255
     7a2:	ec f3       	brlt	.-6      	; 0x79e <__divsf3_pse+0x6a>
     7a4:	98 3e       	cpi	r25, 0xE8	; 232
     7a6:	dc f3       	brlt	.-10     	; 0x79e <__divsf3_pse+0x6a>
     7a8:	86 95       	lsr	r24
     7aa:	77 95       	ror	r23
     7ac:	67 95       	ror	r22
     7ae:	b7 95       	ror	r27
     7b0:	f7 95       	ror	r31
     7b2:	9f 5f       	subi	r25, 0xFF	; 255
     7b4:	c9 f7       	brne	.-14     	; 0x7a8 <__divsf3_pse+0x74>
     7b6:	88 0f       	add	r24, r24
     7b8:	91 1d       	adc	r25, r1
     7ba:	96 95       	lsr	r25
     7bc:	87 95       	ror	r24
     7be:	97 f9       	bld	r25, 7
     7c0:	08 95       	ret
     7c2:	e1 e0       	ldi	r30, 0x01	; 1
     7c4:	66 0f       	add	r22, r22
     7c6:	77 1f       	adc	r23, r23
     7c8:	88 1f       	adc	r24, r24
     7ca:	bb 1f       	adc	r27, r27
     7cc:	62 17       	cp	r22, r18
     7ce:	73 07       	cpc	r23, r19
     7d0:	84 07       	cpc	r24, r20
     7d2:	ba 07       	cpc	r27, r26
     7d4:	20 f0       	brcs	.+8      	; 0x7de <__divsf3_pse+0xaa>
     7d6:	62 1b       	sub	r22, r18
     7d8:	73 0b       	sbc	r23, r19
     7da:	84 0b       	sbc	r24, r20
     7dc:	ba 0b       	sbc	r27, r26
     7de:	ee 1f       	adc	r30, r30
     7e0:	88 f7       	brcc	.-30     	; 0x7c4 <__divsf3_pse+0x90>
     7e2:	e0 95       	com	r30
     7e4:	08 95       	ret

000007e6 <__fixsfsi>:
     7e6:	04 d0       	rcall	.+8      	; 0x7f0 <__fixunssfsi>
     7e8:	68 94       	set
     7ea:	b1 11       	cpse	r27, r1
     7ec:	d9 c0       	rjmp	.+434    	; 0x9a0 <__fp_szero>
     7ee:	08 95       	ret

000007f0 <__fixunssfsi>:
     7f0:	bc d0       	rcall	.+376    	; 0x96a <__fp_splitA>
     7f2:	88 f0       	brcs	.+34     	; 0x816 <__fixunssfsi+0x26>
     7f4:	9f 57       	subi	r25, 0x7F	; 127
     7f6:	90 f0       	brcs	.+36     	; 0x81c <__fixunssfsi+0x2c>
     7f8:	b9 2f       	mov	r27, r25
     7fa:	99 27       	eor	r25, r25
     7fc:	b7 51       	subi	r27, 0x17	; 23
     7fe:	a0 f0       	brcs	.+40     	; 0x828 <__fixunssfsi+0x38>
     800:	d1 f0       	breq	.+52     	; 0x836 <__fixunssfsi+0x46>
     802:	66 0f       	add	r22, r22
     804:	77 1f       	adc	r23, r23
     806:	88 1f       	adc	r24, r24
     808:	99 1f       	adc	r25, r25
     80a:	1a f0       	brmi	.+6      	; 0x812 <__fixunssfsi+0x22>
     80c:	ba 95       	dec	r27
     80e:	c9 f7       	brne	.-14     	; 0x802 <__fixunssfsi+0x12>
     810:	12 c0       	rjmp	.+36     	; 0x836 <__fixunssfsi+0x46>
     812:	b1 30       	cpi	r27, 0x01	; 1
     814:	81 f0       	breq	.+32     	; 0x836 <__fixunssfsi+0x46>
     816:	c3 d0       	rcall	.+390    	; 0x99e <__fp_zero>
     818:	b1 e0       	ldi	r27, 0x01	; 1
     81a:	08 95       	ret
     81c:	c0 c0       	rjmp	.+384    	; 0x99e <__fp_zero>
     81e:	67 2f       	mov	r22, r23
     820:	78 2f       	mov	r23, r24
     822:	88 27       	eor	r24, r24
     824:	b8 5f       	subi	r27, 0xF8	; 248
     826:	39 f0       	breq	.+14     	; 0x836 <__fixunssfsi+0x46>
     828:	b9 3f       	cpi	r27, 0xF9	; 249
     82a:	cc f3       	brlt	.-14     	; 0x81e <__fixunssfsi+0x2e>
     82c:	86 95       	lsr	r24
     82e:	77 95       	ror	r23
     830:	67 95       	ror	r22
     832:	b3 95       	inc	r27
     834:	d9 f7       	brne	.-10     	; 0x82c <__fixunssfsi+0x3c>
     836:	3e f4       	brtc	.+14     	; 0x846 <__fixunssfsi+0x56>
     838:	90 95       	com	r25
     83a:	80 95       	com	r24
     83c:	70 95       	com	r23
     83e:	61 95       	neg	r22
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	8f 4f       	sbci	r24, 0xFF	; 255
     844:	9f 4f       	sbci	r25, 0xFF	; 255
     846:	08 95       	ret

00000848 <__floatunsisf>:
     848:	e8 94       	clt
     84a:	09 c0       	rjmp	.+18     	; 0x85e <__floatsisf+0x12>

0000084c <__floatsisf>:
     84c:	97 fb       	bst	r25, 7
     84e:	3e f4       	brtc	.+14     	; 0x85e <__floatsisf+0x12>
     850:	90 95       	com	r25
     852:	80 95       	com	r24
     854:	70 95       	com	r23
     856:	61 95       	neg	r22
     858:	7f 4f       	sbci	r23, 0xFF	; 255
     85a:	8f 4f       	sbci	r24, 0xFF	; 255
     85c:	9f 4f       	sbci	r25, 0xFF	; 255
     85e:	99 23       	and	r25, r25
     860:	a9 f0       	breq	.+42     	; 0x88c <__floatsisf+0x40>
     862:	f9 2f       	mov	r31, r25
     864:	96 e9       	ldi	r25, 0x96	; 150
     866:	bb 27       	eor	r27, r27
     868:	93 95       	inc	r25
     86a:	f6 95       	lsr	r31
     86c:	87 95       	ror	r24
     86e:	77 95       	ror	r23
     870:	67 95       	ror	r22
     872:	b7 95       	ror	r27
     874:	f1 11       	cpse	r31, r1
     876:	f8 cf       	rjmp	.-16     	; 0x868 <__floatsisf+0x1c>
     878:	fa f4       	brpl	.+62     	; 0x8b8 <__floatsisf+0x6c>
     87a:	bb 0f       	add	r27, r27
     87c:	11 f4       	brne	.+4      	; 0x882 <__floatsisf+0x36>
     87e:	60 ff       	sbrs	r22, 0
     880:	1b c0       	rjmp	.+54     	; 0x8b8 <__floatsisf+0x6c>
     882:	6f 5f       	subi	r22, 0xFF	; 255
     884:	7f 4f       	sbci	r23, 0xFF	; 255
     886:	8f 4f       	sbci	r24, 0xFF	; 255
     888:	9f 4f       	sbci	r25, 0xFF	; 255
     88a:	16 c0       	rjmp	.+44     	; 0x8b8 <__floatsisf+0x6c>
     88c:	88 23       	and	r24, r24
     88e:	11 f0       	breq	.+4      	; 0x894 <__floatsisf+0x48>
     890:	96 e9       	ldi	r25, 0x96	; 150
     892:	11 c0       	rjmp	.+34     	; 0x8b6 <__floatsisf+0x6a>
     894:	77 23       	and	r23, r23
     896:	21 f0       	breq	.+8      	; 0x8a0 <__floatsisf+0x54>
     898:	9e e8       	ldi	r25, 0x8E	; 142
     89a:	87 2f       	mov	r24, r23
     89c:	76 2f       	mov	r23, r22
     89e:	05 c0       	rjmp	.+10     	; 0x8aa <__floatsisf+0x5e>
     8a0:	66 23       	and	r22, r22
     8a2:	71 f0       	breq	.+28     	; 0x8c0 <__floatsisf+0x74>
     8a4:	96 e8       	ldi	r25, 0x86	; 134
     8a6:	86 2f       	mov	r24, r22
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	2a f0       	brmi	.+10     	; 0x8b8 <__floatsisf+0x6c>
     8ae:	9a 95       	dec	r25
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	88 1f       	adc	r24, r24
     8b6:	da f7       	brpl	.-10     	; 0x8ae <__floatsisf+0x62>
     8b8:	88 0f       	add	r24, r24
     8ba:	96 95       	lsr	r25
     8bc:	87 95       	ror	r24
     8be:	97 f9       	bld	r25, 7
     8c0:	08 95       	ret

000008c2 <__fp_cmp>:
     8c2:	99 0f       	add	r25, r25
     8c4:	00 08       	sbc	r0, r0
     8c6:	55 0f       	add	r21, r21
     8c8:	aa 0b       	sbc	r26, r26
     8ca:	e0 e8       	ldi	r30, 0x80	; 128
     8cc:	fe ef       	ldi	r31, 0xFE	; 254
     8ce:	16 16       	cp	r1, r22
     8d0:	17 06       	cpc	r1, r23
     8d2:	e8 07       	cpc	r30, r24
     8d4:	f9 07       	cpc	r31, r25
     8d6:	c0 f0       	brcs	.+48     	; 0x908 <__fp_cmp+0x46>
     8d8:	12 16       	cp	r1, r18
     8da:	13 06       	cpc	r1, r19
     8dc:	e4 07       	cpc	r30, r20
     8de:	f5 07       	cpc	r31, r21
     8e0:	98 f0       	brcs	.+38     	; 0x908 <__fp_cmp+0x46>
     8e2:	62 1b       	sub	r22, r18
     8e4:	73 0b       	sbc	r23, r19
     8e6:	84 0b       	sbc	r24, r20
     8e8:	95 0b       	sbc	r25, r21
     8ea:	39 f4       	brne	.+14     	; 0x8fa <__fp_cmp+0x38>
     8ec:	0a 26       	eor	r0, r26
     8ee:	61 f0       	breq	.+24     	; 0x908 <__fp_cmp+0x46>
     8f0:	23 2b       	or	r18, r19
     8f2:	24 2b       	or	r18, r20
     8f4:	25 2b       	or	r18, r21
     8f6:	21 f4       	brne	.+8      	; 0x900 <__fp_cmp+0x3e>
     8f8:	08 95       	ret
     8fa:	0a 26       	eor	r0, r26
     8fc:	09 f4       	brne	.+2      	; 0x900 <__fp_cmp+0x3e>
     8fe:	a1 40       	sbci	r26, 0x01	; 1
     900:	a6 95       	lsr	r26
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	81 1d       	adc	r24, r1
     906:	81 1d       	adc	r24, r1
     908:	08 95       	ret

0000090a <__fp_inf>:
     90a:	97 f9       	bld	r25, 7
     90c:	9f 67       	ori	r25, 0x7F	; 127
     90e:	80 e8       	ldi	r24, 0x80	; 128
     910:	70 e0       	ldi	r23, 0x00	; 0
     912:	60 e0       	ldi	r22, 0x00	; 0
     914:	08 95       	ret

00000916 <__fp_nan>:
     916:	9f ef       	ldi	r25, 0xFF	; 255
     918:	80 ec       	ldi	r24, 0xC0	; 192
     91a:	08 95       	ret

0000091c <__fp_pscA>:
     91c:	00 24       	eor	r0, r0
     91e:	0a 94       	dec	r0
     920:	16 16       	cp	r1, r22
     922:	17 06       	cpc	r1, r23
     924:	18 06       	cpc	r1, r24
     926:	09 06       	cpc	r0, r25
     928:	08 95       	ret

0000092a <__fp_pscB>:
     92a:	00 24       	eor	r0, r0
     92c:	0a 94       	dec	r0
     92e:	12 16       	cp	r1, r18
     930:	13 06       	cpc	r1, r19
     932:	14 06       	cpc	r1, r20
     934:	05 06       	cpc	r0, r21
     936:	08 95       	ret

00000938 <__fp_round>:
     938:	09 2e       	mov	r0, r25
     93a:	03 94       	inc	r0
     93c:	00 0c       	add	r0, r0
     93e:	11 f4       	brne	.+4      	; 0x944 <__fp_round+0xc>
     940:	88 23       	and	r24, r24
     942:	52 f0       	brmi	.+20     	; 0x958 <__fp_round+0x20>
     944:	bb 0f       	add	r27, r27
     946:	40 f4       	brcc	.+16     	; 0x958 <__fp_round+0x20>
     948:	bf 2b       	or	r27, r31
     94a:	11 f4       	brne	.+4      	; 0x950 <__fp_round+0x18>
     94c:	60 ff       	sbrs	r22, 0
     94e:	04 c0       	rjmp	.+8      	; 0x958 <__fp_round+0x20>
     950:	6f 5f       	subi	r22, 0xFF	; 255
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	8f 4f       	sbci	r24, 0xFF	; 255
     956:	9f 4f       	sbci	r25, 0xFF	; 255
     958:	08 95       	ret

0000095a <__fp_split3>:
     95a:	57 fd       	sbrc	r21, 7
     95c:	90 58       	subi	r25, 0x80	; 128
     95e:	44 0f       	add	r20, r20
     960:	55 1f       	adc	r21, r21
     962:	59 f0       	breq	.+22     	; 0x97a <__fp_splitA+0x10>
     964:	5f 3f       	cpi	r21, 0xFF	; 255
     966:	71 f0       	breq	.+28     	; 0x984 <__fp_splitA+0x1a>
     968:	47 95       	ror	r20

0000096a <__fp_splitA>:
     96a:	88 0f       	add	r24, r24
     96c:	97 fb       	bst	r25, 7
     96e:	99 1f       	adc	r25, r25
     970:	61 f0       	breq	.+24     	; 0x98a <__fp_splitA+0x20>
     972:	9f 3f       	cpi	r25, 0xFF	; 255
     974:	79 f0       	breq	.+30     	; 0x994 <__fp_splitA+0x2a>
     976:	87 95       	ror	r24
     978:	08 95       	ret
     97a:	12 16       	cp	r1, r18
     97c:	13 06       	cpc	r1, r19
     97e:	14 06       	cpc	r1, r20
     980:	55 1f       	adc	r21, r21
     982:	f2 cf       	rjmp	.-28     	; 0x968 <__fp_split3+0xe>
     984:	46 95       	lsr	r20
     986:	f1 df       	rcall	.-30     	; 0x96a <__fp_splitA>
     988:	08 c0       	rjmp	.+16     	; 0x99a <__fp_splitA+0x30>
     98a:	16 16       	cp	r1, r22
     98c:	17 06       	cpc	r1, r23
     98e:	18 06       	cpc	r1, r24
     990:	99 1f       	adc	r25, r25
     992:	f1 cf       	rjmp	.-30     	; 0x976 <__fp_splitA+0xc>
     994:	86 95       	lsr	r24
     996:	71 05       	cpc	r23, r1
     998:	61 05       	cpc	r22, r1
     99a:	08 94       	sec
     99c:	08 95       	ret

0000099e <__fp_zero>:
     99e:	e8 94       	clt

000009a0 <__fp_szero>:
     9a0:	bb 27       	eor	r27, r27
     9a2:	66 27       	eor	r22, r22
     9a4:	77 27       	eor	r23, r23
     9a6:	cb 01       	movw	r24, r22
     9a8:	97 f9       	bld	r25, 7
     9aa:	08 95       	ret

000009ac <__gesf2>:
     9ac:	8a df       	rcall	.-236    	; 0x8c2 <__fp_cmp>
     9ae:	08 f4       	brcc	.+2      	; 0x9b2 <__gesf2+0x6>
     9b0:	8f ef       	ldi	r24, 0xFF	; 255
     9b2:	08 95       	ret

000009b4 <__mulsf3>:
     9b4:	0b d0       	rcall	.+22     	; 0x9cc <__mulsf3x>
     9b6:	c0 cf       	rjmp	.-128    	; 0x938 <__fp_round>
     9b8:	b1 df       	rcall	.-158    	; 0x91c <__fp_pscA>
     9ba:	28 f0       	brcs	.+10     	; 0x9c6 <__mulsf3+0x12>
     9bc:	b6 df       	rcall	.-148    	; 0x92a <__fp_pscB>
     9be:	18 f0       	brcs	.+6      	; 0x9c6 <__mulsf3+0x12>
     9c0:	95 23       	and	r25, r21
     9c2:	09 f0       	breq	.+2      	; 0x9c6 <__mulsf3+0x12>
     9c4:	a2 cf       	rjmp	.-188    	; 0x90a <__fp_inf>
     9c6:	a7 cf       	rjmp	.-178    	; 0x916 <__fp_nan>
     9c8:	11 24       	eor	r1, r1
     9ca:	ea cf       	rjmp	.-44     	; 0x9a0 <__fp_szero>

000009cc <__mulsf3x>:
     9cc:	c6 df       	rcall	.-116    	; 0x95a <__fp_split3>
     9ce:	a0 f3       	brcs	.-24     	; 0x9b8 <__mulsf3+0x4>

000009d0 <__mulsf3_pse>:
     9d0:	95 9f       	mul	r25, r21
     9d2:	d1 f3       	breq	.-12     	; 0x9c8 <__mulsf3+0x14>
     9d4:	95 0f       	add	r25, r21
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	55 1f       	adc	r21, r21
     9da:	62 9f       	mul	r22, r18
     9dc:	f0 01       	movw	r30, r0
     9de:	72 9f       	mul	r23, r18
     9e0:	bb 27       	eor	r27, r27
     9e2:	f0 0d       	add	r31, r0
     9e4:	b1 1d       	adc	r27, r1
     9e6:	63 9f       	mul	r22, r19
     9e8:	aa 27       	eor	r26, r26
     9ea:	f0 0d       	add	r31, r0
     9ec:	b1 1d       	adc	r27, r1
     9ee:	aa 1f       	adc	r26, r26
     9f0:	64 9f       	mul	r22, r20
     9f2:	66 27       	eor	r22, r22
     9f4:	b0 0d       	add	r27, r0
     9f6:	a1 1d       	adc	r26, r1
     9f8:	66 1f       	adc	r22, r22
     9fa:	82 9f       	mul	r24, r18
     9fc:	22 27       	eor	r18, r18
     9fe:	b0 0d       	add	r27, r0
     a00:	a1 1d       	adc	r26, r1
     a02:	62 1f       	adc	r22, r18
     a04:	73 9f       	mul	r23, r19
     a06:	b0 0d       	add	r27, r0
     a08:	a1 1d       	adc	r26, r1
     a0a:	62 1f       	adc	r22, r18
     a0c:	83 9f       	mul	r24, r19
     a0e:	a0 0d       	add	r26, r0
     a10:	61 1d       	adc	r22, r1
     a12:	22 1f       	adc	r18, r18
     a14:	74 9f       	mul	r23, r20
     a16:	33 27       	eor	r19, r19
     a18:	a0 0d       	add	r26, r0
     a1a:	61 1d       	adc	r22, r1
     a1c:	23 1f       	adc	r18, r19
     a1e:	84 9f       	mul	r24, r20
     a20:	60 0d       	add	r22, r0
     a22:	21 1d       	adc	r18, r1
     a24:	82 2f       	mov	r24, r18
     a26:	76 2f       	mov	r23, r22
     a28:	6a 2f       	mov	r22, r26
     a2a:	11 24       	eor	r1, r1
     a2c:	9f 57       	subi	r25, 0x7F	; 127
     a2e:	50 40       	sbci	r21, 0x00	; 0
     a30:	8a f0       	brmi	.+34     	; 0xa54 <__mulsf3_pse+0x84>
     a32:	e1 f0       	breq	.+56     	; 0xa6c <__mulsf3_pse+0x9c>
     a34:	88 23       	and	r24, r24
     a36:	4a f0       	brmi	.+18     	; 0xa4a <__mulsf3_pse+0x7a>
     a38:	ee 0f       	add	r30, r30
     a3a:	ff 1f       	adc	r31, r31
     a3c:	bb 1f       	adc	r27, r27
     a3e:	66 1f       	adc	r22, r22
     a40:	77 1f       	adc	r23, r23
     a42:	88 1f       	adc	r24, r24
     a44:	91 50       	subi	r25, 0x01	; 1
     a46:	50 40       	sbci	r21, 0x00	; 0
     a48:	a9 f7       	brne	.-22     	; 0xa34 <__mulsf3_pse+0x64>
     a4a:	9e 3f       	cpi	r25, 0xFE	; 254
     a4c:	51 05       	cpc	r21, r1
     a4e:	70 f0       	brcs	.+28     	; 0xa6c <__mulsf3_pse+0x9c>
     a50:	5c cf       	rjmp	.-328    	; 0x90a <__fp_inf>
     a52:	a6 cf       	rjmp	.-180    	; 0x9a0 <__fp_szero>
     a54:	5f 3f       	cpi	r21, 0xFF	; 255
     a56:	ec f3       	brlt	.-6      	; 0xa52 <__mulsf3_pse+0x82>
     a58:	98 3e       	cpi	r25, 0xE8	; 232
     a5a:	dc f3       	brlt	.-10     	; 0xa52 <__mulsf3_pse+0x82>
     a5c:	86 95       	lsr	r24
     a5e:	77 95       	ror	r23
     a60:	67 95       	ror	r22
     a62:	b7 95       	ror	r27
     a64:	f7 95       	ror	r31
     a66:	e7 95       	ror	r30
     a68:	9f 5f       	subi	r25, 0xFF	; 255
     a6a:	c1 f7       	brne	.-16     	; 0xa5c <__mulsf3_pse+0x8c>
     a6c:	fe 2b       	or	r31, r30
     a6e:	88 0f       	add	r24, r24
     a70:	91 1d       	adc	r25, r1
     a72:	96 95       	lsr	r25
     a74:	87 95       	ror	r24
     a76:	97 f9       	bld	r25, 7
     a78:	08 95       	ret

00000a7a <fdevopen>:
     a7a:	0f 93       	push	r16
     a7c:	1f 93       	push	r17
     a7e:	cf 93       	push	r28
     a80:	df 93       	push	r29
     a82:	ec 01       	movw	r28, r24
     a84:	8b 01       	movw	r16, r22
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	31 f4       	brne	.+12     	; 0xa96 <fdevopen+0x1c>
     a8a:	61 15       	cp	r22, r1
     a8c:	71 05       	cpc	r23, r1
     a8e:	19 f4       	brne	.+6      	; 0xa96 <fdevopen+0x1c>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	37 c0       	rjmp	.+110    	; 0xb04 <fdevopen+0x8a>
     a96:	6e e0       	ldi	r22, 0x0E	; 14
     a98:	70 e0       	ldi	r23, 0x00	; 0
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	63 d2       	rcall	.+1222   	; 0xf66 <calloc>
     aa0:	fc 01       	movw	r30, r24
     aa2:	00 97       	sbiw	r24, 0x00	; 0
     aa4:	a9 f3       	breq	.-22     	; 0xa90 <fdevopen+0x16>
     aa6:	80 e8       	ldi	r24, 0x80	; 128
     aa8:	83 83       	std	Z+3, r24	; 0x03
     aaa:	01 15       	cp	r16, r1
     aac:	11 05       	cpc	r17, r1
     aae:	71 f0       	breq	.+28     	; 0xacc <fdevopen+0x52>
     ab0:	13 87       	std	Z+11, r17	; 0x0b
     ab2:	02 87       	std	Z+10, r16	; 0x0a
     ab4:	81 e8       	ldi	r24, 0x81	; 129
     ab6:	83 83       	std	Z+3, r24	; 0x03
     ab8:	80 91 01 03 	lds	r24, 0x0301
     abc:	90 91 02 03 	lds	r25, 0x0302
     ac0:	89 2b       	or	r24, r25
     ac2:	21 f4       	brne	.+8      	; 0xacc <fdevopen+0x52>
     ac4:	f0 93 02 03 	sts	0x0302, r31
     ac8:	e0 93 01 03 	sts	0x0301, r30
     acc:	20 97       	sbiw	r28, 0x00	; 0
     ace:	c9 f0       	breq	.+50     	; 0xb02 <fdevopen+0x88>
     ad0:	d1 87       	std	Z+9, r29	; 0x09
     ad2:	c0 87       	std	Z+8, r28	; 0x08
     ad4:	83 81       	ldd	r24, Z+3	; 0x03
     ad6:	82 60       	ori	r24, 0x02	; 2
     ad8:	83 83       	std	Z+3, r24	; 0x03
     ada:	80 91 03 03 	lds	r24, 0x0303
     ade:	90 91 04 03 	lds	r25, 0x0304
     ae2:	89 2b       	or	r24, r25
     ae4:	71 f4       	brne	.+28     	; 0xb02 <fdevopen+0x88>
     ae6:	f0 93 04 03 	sts	0x0304, r31
     aea:	e0 93 03 03 	sts	0x0303, r30
     aee:	80 91 05 03 	lds	r24, 0x0305
     af2:	90 91 06 03 	lds	r25, 0x0306
     af6:	89 2b       	or	r24, r25
     af8:	21 f4       	brne	.+8      	; 0xb02 <fdevopen+0x88>
     afa:	f0 93 06 03 	sts	0x0306, r31
     afe:	e0 93 05 03 	sts	0x0305, r30
     b02:	cf 01       	movw	r24, r30
     b04:	df 91       	pop	r29
     b06:	cf 91       	pop	r28
     b08:	1f 91       	pop	r17
     b0a:	0f 91       	pop	r16
     b0c:	08 95       	ret

00000b0e <printf>:
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	cd b7       	in	r28, 0x3d	; 61
     b14:	de b7       	in	r29, 0x3e	; 62
     b16:	fe 01       	movw	r30, r28
     b18:	36 96       	adiw	r30, 0x06	; 6
     b1a:	61 91       	ld	r22, Z+
     b1c:	71 91       	ld	r23, Z+
     b1e:	af 01       	movw	r20, r30
     b20:	80 91 03 03 	lds	r24, 0x0303
     b24:	90 91 04 03 	lds	r25, 0x0304
     b28:	30 d0       	rcall	.+96     	; 0xb8a <vfprintf>
     b2a:	df 91       	pop	r29
     b2c:	cf 91       	pop	r28
     b2e:	08 95       	ret

00000b30 <puts>:
     b30:	0f 93       	push	r16
     b32:	1f 93       	push	r17
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	e0 91 03 03 	lds	r30, 0x0303
     b3c:	f0 91 04 03 	lds	r31, 0x0304
     b40:	23 81       	ldd	r18, Z+3	; 0x03
     b42:	21 ff       	sbrs	r18, 1
     b44:	1b c0       	rjmp	.+54     	; 0xb7c <puts+0x4c>
     b46:	ec 01       	movw	r28, r24
     b48:	00 e0       	ldi	r16, 0x00	; 0
     b4a:	10 e0       	ldi	r17, 0x00	; 0
     b4c:	89 91       	ld	r24, Y+
     b4e:	60 91 03 03 	lds	r22, 0x0303
     b52:	70 91 04 03 	lds	r23, 0x0304
     b56:	db 01       	movw	r26, r22
     b58:	18 96       	adiw	r26, 0x08	; 8
     b5a:	ed 91       	ld	r30, X+
     b5c:	fc 91       	ld	r31, X
     b5e:	19 97       	sbiw	r26, 0x09	; 9
     b60:	88 23       	and	r24, r24
     b62:	31 f0       	breq	.+12     	; 0xb70 <puts+0x40>
     b64:	19 95       	eicall
     b66:	89 2b       	or	r24, r25
     b68:	89 f3       	breq	.-30     	; 0xb4c <puts+0x1c>
     b6a:	0f ef       	ldi	r16, 0xFF	; 255
     b6c:	1f ef       	ldi	r17, 0xFF	; 255
     b6e:	ee cf       	rjmp	.-36     	; 0xb4c <puts+0x1c>
     b70:	8a e0       	ldi	r24, 0x0A	; 10
     b72:	19 95       	eicall
     b74:	89 2b       	or	r24, r25
     b76:	11 f4       	brne	.+4      	; 0xb7c <puts+0x4c>
     b78:	c8 01       	movw	r24, r16
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <puts+0x50>
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	9f ef       	ldi	r25, 0xFF	; 255
     b80:	df 91       	pop	r29
     b82:	cf 91       	pop	r28
     b84:	1f 91       	pop	r17
     b86:	0f 91       	pop	r16
     b88:	08 95       	ret

00000b8a <vfprintf>:
     b8a:	2f 92       	push	r2
     b8c:	3f 92       	push	r3
     b8e:	4f 92       	push	r4
     b90:	5f 92       	push	r5
     b92:	6f 92       	push	r6
     b94:	7f 92       	push	r7
     b96:	8f 92       	push	r8
     b98:	9f 92       	push	r9
     b9a:	af 92       	push	r10
     b9c:	bf 92       	push	r11
     b9e:	cf 92       	push	r12
     ba0:	df 92       	push	r13
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	2c 97       	sbiw	r28, 0x0c	; 12
     bb4:	0f b6       	in	r0, 0x3f	; 63
     bb6:	f8 94       	cli
     bb8:	de bf       	out	0x3e, r29	; 62
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	cd bf       	out	0x3d, r28	; 61
     bbe:	7c 01       	movw	r14, r24
     bc0:	6b 01       	movw	r12, r22
     bc2:	8a 01       	movw	r16, r20
     bc4:	fc 01       	movw	r30, r24
     bc6:	17 82       	std	Z+7, r1	; 0x07
     bc8:	16 82       	std	Z+6, r1	; 0x06
     bca:	83 81       	ldd	r24, Z+3	; 0x03
     bcc:	81 ff       	sbrs	r24, 1
     bce:	b0 c1       	rjmp	.+864    	; 0xf30 <vfprintf+0x3a6>
     bd0:	ce 01       	movw	r24, r28
     bd2:	01 96       	adiw	r24, 0x01	; 1
     bd4:	4c 01       	movw	r8, r24
     bd6:	f7 01       	movw	r30, r14
     bd8:	93 81       	ldd	r25, Z+3	; 0x03
     bda:	f6 01       	movw	r30, r12
     bdc:	93 fd       	sbrc	r25, 3
     bde:	85 91       	lpm	r24, Z+
     be0:	93 ff       	sbrs	r25, 3
     be2:	81 91       	ld	r24, Z+
     be4:	6f 01       	movw	r12, r30
     be6:	88 23       	and	r24, r24
     be8:	09 f4       	brne	.+2      	; 0xbec <vfprintf+0x62>
     bea:	9e c1       	rjmp	.+828    	; 0xf28 <vfprintf+0x39e>
     bec:	85 32       	cpi	r24, 0x25	; 37
     bee:	39 f4       	brne	.+14     	; 0xbfe <vfprintf+0x74>
     bf0:	93 fd       	sbrc	r25, 3
     bf2:	85 91       	lpm	r24, Z+
     bf4:	93 ff       	sbrs	r25, 3
     bf6:	81 91       	ld	r24, Z+
     bf8:	6f 01       	movw	r12, r30
     bfa:	85 32       	cpi	r24, 0x25	; 37
     bfc:	21 f4       	brne	.+8      	; 0xc06 <vfprintf+0x7c>
     bfe:	b7 01       	movw	r22, r14
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	0f d3       	rcall	.+1566   	; 0x1222 <fputc>
     c04:	e8 cf       	rjmp	.-48     	; 0xbd6 <vfprintf+0x4c>
     c06:	51 2c       	mov	r5, r1
     c08:	31 2c       	mov	r3, r1
     c0a:	20 e0       	ldi	r18, 0x00	; 0
     c0c:	20 32       	cpi	r18, 0x20	; 32
     c0e:	a0 f4       	brcc	.+40     	; 0xc38 <vfprintf+0xae>
     c10:	8b 32       	cpi	r24, 0x2B	; 43
     c12:	69 f0       	breq	.+26     	; 0xc2e <vfprintf+0xa4>
     c14:	30 f4       	brcc	.+12     	; 0xc22 <vfprintf+0x98>
     c16:	80 32       	cpi	r24, 0x20	; 32
     c18:	59 f0       	breq	.+22     	; 0xc30 <vfprintf+0xa6>
     c1a:	83 32       	cpi	r24, 0x23	; 35
     c1c:	69 f4       	brne	.+26     	; 0xc38 <vfprintf+0xae>
     c1e:	20 61       	ori	r18, 0x10	; 16
     c20:	2c c0       	rjmp	.+88     	; 0xc7a <vfprintf+0xf0>
     c22:	8d 32       	cpi	r24, 0x2D	; 45
     c24:	39 f0       	breq	.+14     	; 0xc34 <vfprintf+0xaa>
     c26:	80 33       	cpi	r24, 0x30	; 48
     c28:	39 f4       	brne	.+14     	; 0xc38 <vfprintf+0xae>
     c2a:	21 60       	ori	r18, 0x01	; 1
     c2c:	26 c0       	rjmp	.+76     	; 0xc7a <vfprintf+0xf0>
     c2e:	22 60       	ori	r18, 0x02	; 2
     c30:	24 60       	ori	r18, 0x04	; 4
     c32:	23 c0       	rjmp	.+70     	; 0xc7a <vfprintf+0xf0>
     c34:	28 60       	ori	r18, 0x08	; 8
     c36:	21 c0       	rjmp	.+66     	; 0xc7a <vfprintf+0xf0>
     c38:	27 fd       	sbrc	r18, 7
     c3a:	27 c0       	rjmp	.+78     	; 0xc8a <vfprintf+0x100>
     c3c:	30 ed       	ldi	r19, 0xD0	; 208
     c3e:	38 0f       	add	r19, r24
     c40:	3a 30       	cpi	r19, 0x0A	; 10
     c42:	78 f4       	brcc	.+30     	; 0xc62 <vfprintf+0xd8>
     c44:	26 ff       	sbrs	r18, 6
     c46:	06 c0       	rjmp	.+12     	; 0xc54 <vfprintf+0xca>
     c48:	fa e0       	ldi	r31, 0x0A	; 10
     c4a:	5f 9e       	mul	r5, r31
     c4c:	30 0d       	add	r19, r0
     c4e:	11 24       	eor	r1, r1
     c50:	53 2e       	mov	r5, r19
     c52:	13 c0       	rjmp	.+38     	; 0xc7a <vfprintf+0xf0>
     c54:	8a e0       	ldi	r24, 0x0A	; 10
     c56:	38 9e       	mul	r3, r24
     c58:	30 0d       	add	r19, r0
     c5a:	11 24       	eor	r1, r1
     c5c:	33 2e       	mov	r3, r19
     c5e:	20 62       	ori	r18, 0x20	; 32
     c60:	0c c0       	rjmp	.+24     	; 0xc7a <vfprintf+0xf0>
     c62:	8e 32       	cpi	r24, 0x2E	; 46
     c64:	21 f4       	brne	.+8      	; 0xc6e <vfprintf+0xe4>
     c66:	26 fd       	sbrc	r18, 6
     c68:	5f c1       	rjmp	.+702    	; 0xf28 <vfprintf+0x39e>
     c6a:	20 64       	ori	r18, 0x40	; 64
     c6c:	06 c0       	rjmp	.+12     	; 0xc7a <vfprintf+0xf0>
     c6e:	8c 36       	cpi	r24, 0x6C	; 108
     c70:	11 f4       	brne	.+4      	; 0xc76 <vfprintf+0xec>
     c72:	20 68       	ori	r18, 0x80	; 128
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <vfprintf+0xf0>
     c76:	88 36       	cpi	r24, 0x68	; 104
     c78:	41 f4       	brne	.+16     	; 0xc8a <vfprintf+0x100>
     c7a:	f6 01       	movw	r30, r12
     c7c:	93 fd       	sbrc	r25, 3
     c7e:	85 91       	lpm	r24, Z+
     c80:	93 ff       	sbrs	r25, 3
     c82:	81 91       	ld	r24, Z+
     c84:	6f 01       	movw	r12, r30
     c86:	81 11       	cpse	r24, r1
     c88:	c1 cf       	rjmp	.-126    	; 0xc0c <vfprintf+0x82>
     c8a:	98 2f       	mov	r25, r24
     c8c:	9f 7d       	andi	r25, 0xDF	; 223
     c8e:	95 54       	subi	r25, 0x45	; 69
     c90:	93 30       	cpi	r25, 0x03	; 3
     c92:	28 f4       	brcc	.+10     	; 0xc9e <vfprintf+0x114>
     c94:	0c 5f       	subi	r16, 0xFC	; 252
     c96:	1f 4f       	sbci	r17, 0xFF	; 255
     c98:	ff e3       	ldi	r31, 0x3F	; 63
     c9a:	f9 83       	std	Y+1, r31	; 0x01
     c9c:	0d c0       	rjmp	.+26     	; 0xcb8 <vfprintf+0x12e>
     c9e:	83 36       	cpi	r24, 0x63	; 99
     ca0:	31 f0       	breq	.+12     	; 0xcae <vfprintf+0x124>
     ca2:	83 37       	cpi	r24, 0x73	; 115
     ca4:	71 f0       	breq	.+28     	; 0xcc2 <vfprintf+0x138>
     ca6:	83 35       	cpi	r24, 0x53	; 83
     ca8:	09 f0       	breq	.+2      	; 0xcac <vfprintf+0x122>
     caa:	57 c0       	rjmp	.+174    	; 0xd5a <vfprintf+0x1d0>
     cac:	21 c0       	rjmp	.+66     	; 0xcf0 <vfprintf+0x166>
     cae:	f8 01       	movw	r30, r16
     cb0:	80 81       	ld	r24, Z
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	0e 5f       	subi	r16, 0xFE	; 254
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	44 24       	eor	r4, r4
     cba:	43 94       	inc	r4
     cbc:	51 2c       	mov	r5, r1
     cbe:	54 01       	movw	r10, r8
     cc0:	14 c0       	rjmp	.+40     	; 0xcea <vfprintf+0x160>
     cc2:	38 01       	movw	r6, r16
     cc4:	f2 e0       	ldi	r31, 0x02	; 2
     cc6:	6f 0e       	add	r6, r31
     cc8:	71 1c       	adc	r7, r1
     cca:	f8 01       	movw	r30, r16
     ccc:	a0 80       	ld	r10, Z
     cce:	b1 80       	ldd	r11, Z+1	; 0x01
     cd0:	26 ff       	sbrs	r18, 6
     cd2:	03 c0       	rjmp	.+6      	; 0xcda <vfprintf+0x150>
     cd4:	65 2d       	mov	r22, r5
     cd6:	70 e0       	ldi	r23, 0x00	; 0
     cd8:	02 c0       	rjmp	.+4      	; 0xcde <vfprintf+0x154>
     cda:	6f ef       	ldi	r22, 0xFF	; 255
     cdc:	7f ef       	ldi	r23, 0xFF	; 255
     cde:	c5 01       	movw	r24, r10
     ce0:	2c 87       	std	Y+12, r18	; 0x0c
     ce2:	94 d2       	rcall	.+1320   	; 0x120c <strnlen>
     ce4:	2c 01       	movw	r4, r24
     ce6:	83 01       	movw	r16, r6
     ce8:	2c 85       	ldd	r18, Y+12	; 0x0c
     cea:	2f 77       	andi	r18, 0x7F	; 127
     cec:	22 2e       	mov	r2, r18
     cee:	16 c0       	rjmp	.+44     	; 0xd1c <vfprintf+0x192>
     cf0:	38 01       	movw	r6, r16
     cf2:	f2 e0       	ldi	r31, 0x02	; 2
     cf4:	6f 0e       	add	r6, r31
     cf6:	71 1c       	adc	r7, r1
     cf8:	f8 01       	movw	r30, r16
     cfa:	a0 80       	ld	r10, Z
     cfc:	b1 80       	ldd	r11, Z+1	; 0x01
     cfe:	26 ff       	sbrs	r18, 6
     d00:	03 c0       	rjmp	.+6      	; 0xd08 <vfprintf+0x17e>
     d02:	65 2d       	mov	r22, r5
     d04:	70 e0       	ldi	r23, 0x00	; 0
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <vfprintf+0x182>
     d08:	6f ef       	ldi	r22, 0xFF	; 255
     d0a:	7f ef       	ldi	r23, 0xFF	; 255
     d0c:	c5 01       	movw	r24, r10
     d0e:	2c 87       	std	Y+12, r18	; 0x0c
     d10:	6b d2       	rcall	.+1238   	; 0x11e8 <strnlen_P>
     d12:	2c 01       	movw	r4, r24
     d14:	2c 85       	ldd	r18, Y+12	; 0x0c
     d16:	20 68       	ori	r18, 0x80	; 128
     d18:	22 2e       	mov	r2, r18
     d1a:	83 01       	movw	r16, r6
     d1c:	23 fc       	sbrc	r2, 3
     d1e:	19 c0       	rjmp	.+50     	; 0xd52 <vfprintf+0x1c8>
     d20:	83 2d       	mov	r24, r3
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	48 16       	cp	r4, r24
     d26:	59 06       	cpc	r5, r25
     d28:	a0 f4       	brcc	.+40     	; 0xd52 <vfprintf+0x1c8>
     d2a:	b7 01       	movw	r22, r14
     d2c:	80 e2       	ldi	r24, 0x20	; 32
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	78 d2       	rcall	.+1264   	; 0x1222 <fputc>
     d32:	3a 94       	dec	r3
     d34:	f5 cf       	rjmp	.-22     	; 0xd20 <vfprintf+0x196>
     d36:	f5 01       	movw	r30, r10
     d38:	27 fc       	sbrc	r2, 7
     d3a:	85 91       	lpm	r24, Z+
     d3c:	27 fe       	sbrs	r2, 7
     d3e:	81 91       	ld	r24, Z+
     d40:	5f 01       	movw	r10, r30
     d42:	b7 01       	movw	r22, r14
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	6d d2       	rcall	.+1242   	; 0x1222 <fputc>
     d48:	31 10       	cpse	r3, r1
     d4a:	3a 94       	dec	r3
     d4c:	f1 e0       	ldi	r31, 0x01	; 1
     d4e:	4f 1a       	sub	r4, r31
     d50:	51 08       	sbc	r5, r1
     d52:	41 14       	cp	r4, r1
     d54:	51 04       	cpc	r5, r1
     d56:	79 f7       	brne	.-34     	; 0xd36 <vfprintf+0x1ac>
     d58:	de c0       	rjmp	.+444    	; 0xf16 <vfprintf+0x38c>
     d5a:	84 36       	cpi	r24, 0x64	; 100
     d5c:	11 f0       	breq	.+4      	; 0xd62 <vfprintf+0x1d8>
     d5e:	89 36       	cpi	r24, 0x69	; 105
     d60:	31 f5       	brne	.+76     	; 0xdae <vfprintf+0x224>
     d62:	f8 01       	movw	r30, r16
     d64:	27 ff       	sbrs	r18, 7
     d66:	07 c0       	rjmp	.+14     	; 0xd76 <vfprintf+0x1ec>
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	0c 5f       	subi	r16, 0xFC	; 252
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	08 c0       	rjmp	.+16     	; 0xd86 <vfprintf+0x1fc>
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	88 27       	eor	r24, r24
     d7c:	77 fd       	sbrc	r23, 7
     d7e:	80 95       	com	r24
     d80:	98 2f       	mov	r25, r24
     d82:	0e 5f       	subi	r16, 0xFE	; 254
     d84:	1f 4f       	sbci	r17, 0xFF	; 255
     d86:	2f 76       	andi	r18, 0x6F	; 111
     d88:	b2 2e       	mov	r11, r18
     d8a:	97 ff       	sbrs	r25, 7
     d8c:	09 c0       	rjmp	.+18     	; 0xda0 <vfprintf+0x216>
     d8e:	90 95       	com	r25
     d90:	80 95       	com	r24
     d92:	70 95       	com	r23
     d94:	61 95       	neg	r22
     d96:	7f 4f       	sbci	r23, 0xFF	; 255
     d98:	8f 4f       	sbci	r24, 0xFF	; 255
     d9a:	9f 4f       	sbci	r25, 0xFF	; 255
     d9c:	20 68       	ori	r18, 0x80	; 128
     d9e:	b2 2e       	mov	r11, r18
     da0:	2a e0       	ldi	r18, 0x0A	; 10
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	a4 01       	movw	r20, r8
     da6:	6f d2       	rcall	.+1246   	; 0x1286 <__ultoa_invert>
     da8:	a8 2e       	mov	r10, r24
     daa:	a8 18       	sub	r10, r8
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <vfprintf+0x2aa>
     dae:	85 37       	cpi	r24, 0x75	; 117
     db0:	29 f4       	brne	.+10     	; 0xdbc <vfprintf+0x232>
     db2:	2f 7e       	andi	r18, 0xEF	; 239
     db4:	b2 2e       	mov	r11, r18
     db6:	2a e0       	ldi	r18, 0x0A	; 10
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	25 c0       	rjmp	.+74     	; 0xe06 <vfprintf+0x27c>
     dbc:	f2 2f       	mov	r31, r18
     dbe:	f9 7f       	andi	r31, 0xF9	; 249
     dc0:	bf 2e       	mov	r11, r31
     dc2:	8f 36       	cpi	r24, 0x6F	; 111
     dc4:	c1 f0       	breq	.+48     	; 0xdf6 <vfprintf+0x26c>
     dc6:	18 f4       	brcc	.+6      	; 0xdce <vfprintf+0x244>
     dc8:	88 35       	cpi	r24, 0x58	; 88
     dca:	79 f0       	breq	.+30     	; 0xdea <vfprintf+0x260>
     dcc:	ad c0       	rjmp	.+346    	; 0xf28 <vfprintf+0x39e>
     dce:	80 37       	cpi	r24, 0x70	; 112
     dd0:	19 f0       	breq	.+6      	; 0xdd8 <vfprintf+0x24e>
     dd2:	88 37       	cpi	r24, 0x78	; 120
     dd4:	21 f0       	breq	.+8      	; 0xdde <vfprintf+0x254>
     dd6:	a8 c0       	rjmp	.+336    	; 0xf28 <vfprintf+0x39e>
     dd8:	2f 2f       	mov	r18, r31
     dda:	20 61       	ori	r18, 0x10	; 16
     ddc:	b2 2e       	mov	r11, r18
     dde:	b4 fe       	sbrs	r11, 4
     de0:	0d c0       	rjmp	.+26     	; 0xdfc <vfprintf+0x272>
     de2:	8b 2d       	mov	r24, r11
     de4:	84 60       	ori	r24, 0x04	; 4
     de6:	b8 2e       	mov	r11, r24
     de8:	09 c0       	rjmp	.+18     	; 0xdfc <vfprintf+0x272>
     dea:	24 ff       	sbrs	r18, 4
     dec:	0a c0       	rjmp	.+20     	; 0xe02 <vfprintf+0x278>
     dee:	9f 2f       	mov	r25, r31
     df0:	96 60       	ori	r25, 0x06	; 6
     df2:	b9 2e       	mov	r11, r25
     df4:	06 c0       	rjmp	.+12     	; 0xe02 <vfprintf+0x278>
     df6:	28 e0       	ldi	r18, 0x08	; 8
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	05 c0       	rjmp	.+10     	; 0xe06 <vfprintf+0x27c>
     dfc:	20 e1       	ldi	r18, 0x10	; 16
     dfe:	30 e0       	ldi	r19, 0x00	; 0
     e00:	02 c0       	rjmp	.+4      	; 0xe06 <vfprintf+0x27c>
     e02:	20 e1       	ldi	r18, 0x10	; 16
     e04:	32 e0       	ldi	r19, 0x02	; 2
     e06:	f8 01       	movw	r30, r16
     e08:	b7 fe       	sbrs	r11, 7
     e0a:	07 c0       	rjmp	.+14     	; 0xe1a <vfprintf+0x290>
     e0c:	60 81       	ld	r22, Z
     e0e:	71 81       	ldd	r23, Z+1	; 0x01
     e10:	82 81       	ldd	r24, Z+2	; 0x02
     e12:	93 81       	ldd	r25, Z+3	; 0x03
     e14:	0c 5f       	subi	r16, 0xFC	; 252
     e16:	1f 4f       	sbci	r17, 0xFF	; 255
     e18:	06 c0       	rjmp	.+12     	; 0xe26 <vfprintf+0x29c>
     e1a:	60 81       	ld	r22, Z
     e1c:	71 81       	ldd	r23, Z+1	; 0x01
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 5f       	subi	r16, 0xFE	; 254
     e24:	1f 4f       	sbci	r17, 0xFF	; 255
     e26:	a4 01       	movw	r20, r8
     e28:	2e d2       	rcall	.+1116   	; 0x1286 <__ultoa_invert>
     e2a:	a8 2e       	mov	r10, r24
     e2c:	a8 18       	sub	r10, r8
     e2e:	fb 2d       	mov	r31, r11
     e30:	ff 77       	andi	r31, 0x7F	; 127
     e32:	bf 2e       	mov	r11, r31
     e34:	b6 fe       	sbrs	r11, 6
     e36:	0b c0       	rjmp	.+22     	; 0xe4e <vfprintf+0x2c4>
     e38:	2b 2d       	mov	r18, r11
     e3a:	2e 7f       	andi	r18, 0xFE	; 254
     e3c:	a5 14       	cp	r10, r5
     e3e:	50 f4       	brcc	.+20     	; 0xe54 <vfprintf+0x2ca>
     e40:	b4 fe       	sbrs	r11, 4
     e42:	0a c0       	rjmp	.+20     	; 0xe58 <vfprintf+0x2ce>
     e44:	b2 fc       	sbrc	r11, 2
     e46:	08 c0       	rjmp	.+16     	; 0xe58 <vfprintf+0x2ce>
     e48:	2b 2d       	mov	r18, r11
     e4a:	2e 7e       	andi	r18, 0xEE	; 238
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <vfprintf+0x2ce>
     e4e:	7a 2c       	mov	r7, r10
     e50:	2b 2d       	mov	r18, r11
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <vfprintf+0x2d0>
     e54:	7a 2c       	mov	r7, r10
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x2d0>
     e58:	75 2c       	mov	r7, r5
     e5a:	24 ff       	sbrs	r18, 4
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <vfprintf+0x2ee>
     e5e:	fe 01       	movw	r30, r28
     e60:	ea 0d       	add	r30, r10
     e62:	f1 1d       	adc	r31, r1
     e64:	80 81       	ld	r24, Z
     e66:	80 33       	cpi	r24, 0x30	; 48
     e68:	11 f4       	brne	.+4      	; 0xe6e <vfprintf+0x2e4>
     e6a:	29 7e       	andi	r18, 0xE9	; 233
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <vfprintf+0x2f6>
     e6e:	22 ff       	sbrs	r18, 2
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x2f4>
     e72:	73 94       	inc	r7
     e74:	73 94       	inc	r7
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <vfprintf+0x2f6>
     e78:	82 2f       	mov	r24, r18
     e7a:	86 78       	andi	r24, 0x86	; 134
     e7c:	09 f0       	breq	.+2      	; 0xe80 <vfprintf+0x2f6>
     e7e:	73 94       	inc	r7
     e80:	23 fd       	sbrc	r18, 3
     e82:	12 c0       	rjmp	.+36     	; 0xea8 <vfprintf+0x31e>
     e84:	20 ff       	sbrs	r18, 0
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0x30a>
     e88:	5a 2c       	mov	r5, r10
     e8a:	73 14       	cp	r7, r3
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <vfprintf+0x30a>
     e8e:	53 0c       	add	r5, r3
     e90:	57 18       	sub	r5, r7
     e92:	73 2c       	mov	r7, r3
     e94:	73 14       	cp	r7, r3
     e96:	60 f4       	brcc	.+24     	; 0xeb0 <vfprintf+0x326>
     e98:	b7 01       	movw	r22, r14
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	2c 87       	std	Y+12, r18	; 0x0c
     ea0:	c0 d1       	rcall	.+896    	; 0x1222 <fputc>
     ea2:	73 94       	inc	r7
     ea4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea6:	f6 cf       	rjmp	.-20     	; 0xe94 <vfprintf+0x30a>
     ea8:	73 14       	cp	r7, r3
     eaa:	10 f4       	brcc	.+4      	; 0xeb0 <vfprintf+0x326>
     eac:	37 18       	sub	r3, r7
     eae:	01 c0       	rjmp	.+2      	; 0xeb2 <vfprintf+0x328>
     eb0:	31 2c       	mov	r3, r1
     eb2:	24 ff       	sbrs	r18, 4
     eb4:	11 c0       	rjmp	.+34     	; 0xed8 <vfprintf+0x34e>
     eb6:	b7 01       	movw	r22, r14
     eb8:	80 e3       	ldi	r24, 0x30	; 48
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	2c 87       	std	Y+12, r18	; 0x0c
     ebe:	b1 d1       	rcall	.+866    	; 0x1222 <fputc>
     ec0:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec2:	22 ff       	sbrs	r18, 2
     ec4:	16 c0       	rjmp	.+44     	; 0xef2 <vfprintf+0x368>
     ec6:	21 ff       	sbrs	r18, 1
     ec8:	03 c0       	rjmp	.+6      	; 0xed0 <vfprintf+0x346>
     eca:	88 e5       	ldi	r24, 0x58	; 88
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	02 c0       	rjmp	.+4      	; 0xed4 <vfprintf+0x34a>
     ed0:	88 e7       	ldi	r24, 0x78	; 120
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	b7 01       	movw	r22, r14
     ed6:	0c c0       	rjmp	.+24     	; 0xef0 <vfprintf+0x366>
     ed8:	82 2f       	mov	r24, r18
     eda:	86 78       	andi	r24, 0x86	; 134
     edc:	51 f0       	breq	.+20     	; 0xef2 <vfprintf+0x368>
     ede:	21 fd       	sbrc	r18, 1
     ee0:	02 c0       	rjmp	.+4      	; 0xee6 <vfprintf+0x35c>
     ee2:	80 e2       	ldi	r24, 0x20	; 32
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <vfprintf+0x35e>
     ee6:	8b e2       	ldi	r24, 0x2B	; 43
     ee8:	27 fd       	sbrc	r18, 7
     eea:	8d e2       	ldi	r24, 0x2D	; 45
     eec:	b7 01       	movw	r22, r14
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	98 d1       	rcall	.+816    	; 0x1222 <fputc>
     ef2:	a5 14       	cp	r10, r5
     ef4:	30 f4       	brcc	.+12     	; 0xf02 <vfprintf+0x378>
     ef6:	b7 01       	movw	r22, r14
     ef8:	80 e3       	ldi	r24, 0x30	; 48
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	92 d1       	rcall	.+804    	; 0x1222 <fputc>
     efe:	5a 94       	dec	r5
     f00:	f8 cf       	rjmp	.-16     	; 0xef2 <vfprintf+0x368>
     f02:	aa 94       	dec	r10
     f04:	f4 01       	movw	r30, r8
     f06:	ea 0d       	add	r30, r10
     f08:	f1 1d       	adc	r31, r1
     f0a:	80 81       	ld	r24, Z
     f0c:	b7 01       	movw	r22, r14
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	88 d1       	rcall	.+784    	; 0x1222 <fputc>
     f12:	a1 10       	cpse	r10, r1
     f14:	f6 cf       	rjmp	.-20     	; 0xf02 <vfprintf+0x378>
     f16:	33 20       	and	r3, r3
     f18:	09 f4       	brne	.+2      	; 0xf1c <vfprintf+0x392>
     f1a:	5d ce       	rjmp	.-838    	; 0xbd6 <vfprintf+0x4c>
     f1c:	b7 01       	movw	r22, r14
     f1e:	80 e2       	ldi	r24, 0x20	; 32
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	7f d1       	rcall	.+766    	; 0x1222 <fputc>
     f24:	3a 94       	dec	r3
     f26:	f7 cf       	rjmp	.-18     	; 0xf16 <vfprintf+0x38c>
     f28:	f7 01       	movw	r30, r14
     f2a:	86 81       	ldd	r24, Z+6	; 0x06
     f2c:	97 81       	ldd	r25, Z+7	; 0x07
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <vfprintf+0x3aa>
     f30:	8f ef       	ldi	r24, 0xFF	; 255
     f32:	9f ef       	ldi	r25, 0xFF	; 255
     f34:	2c 96       	adiw	r28, 0x0c	; 12
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	df 91       	pop	r29
     f42:	cf 91       	pop	r28
     f44:	1f 91       	pop	r17
     f46:	0f 91       	pop	r16
     f48:	ff 90       	pop	r15
     f4a:	ef 90       	pop	r14
     f4c:	df 90       	pop	r13
     f4e:	cf 90       	pop	r12
     f50:	bf 90       	pop	r11
     f52:	af 90       	pop	r10
     f54:	9f 90       	pop	r9
     f56:	8f 90       	pop	r8
     f58:	7f 90       	pop	r7
     f5a:	6f 90       	pop	r6
     f5c:	5f 90       	pop	r5
     f5e:	4f 90       	pop	r4
     f60:	3f 90       	pop	r3
     f62:	2f 90       	pop	r2
     f64:	08 95       	ret

00000f66 <calloc>:
     f66:	0f 93       	push	r16
     f68:	1f 93       	push	r17
     f6a:	cf 93       	push	r28
     f6c:	df 93       	push	r29
     f6e:	86 9f       	mul	r24, r22
     f70:	80 01       	movw	r16, r0
     f72:	87 9f       	mul	r24, r23
     f74:	10 0d       	add	r17, r0
     f76:	96 9f       	mul	r25, r22
     f78:	10 0d       	add	r17, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	c8 01       	movw	r24, r16
     f7e:	0d d0       	rcall	.+26     	; 0xf9a <malloc>
     f80:	ec 01       	movw	r28, r24
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	21 f0       	breq	.+8      	; 0xf8e <calloc+0x28>
     f86:	a8 01       	movw	r20, r16
     f88:	60 e0       	ldi	r22, 0x00	; 0
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	38 d1       	rcall	.+624    	; 0x11fe <memset>
     f8e:	ce 01       	movw	r24, r28
     f90:	df 91       	pop	r29
     f92:	cf 91       	pop	r28
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	08 95       	ret

00000f9a <malloc>:
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	82 30       	cpi	r24, 0x02	; 2
     fa0:	91 05       	cpc	r25, r1
     fa2:	10 f4       	brcc	.+4      	; 0xfa8 <malloc+0xe>
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	e0 91 09 03 	lds	r30, 0x0309
     fac:	f0 91 0a 03 	lds	r31, 0x030A
     fb0:	20 e0       	ldi	r18, 0x00	; 0
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	a0 e0       	ldi	r26, 0x00	; 0
     fb6:	b0 e0       	ldi	r27, 0x00	; 0
     fb8:	30 97       	sbiw	r30, 0x00	; 0
     fba:	39 f1       	breq	.+78     	; 0x100a <malloc+0x70>
     fbc:	40 81       	ld	r20, Z
     fbe:	51 81       	ldd	r21, Z+1	; 0x01
     fc0:	48 17       	cp	r20, r24
     fc2:	59 07       	cpc	r21, r25
     fc4:	b8 f0       	brcs	.+46     	; 0xff4 <malloc+0x5a>
     fc6:	48 17       	cp	r20, r24
     fc8:	59 07       	cpc	r21, r25
     fca:	71 f4       	brne	.+28     	; 0xfe8 <malloc+0x4e>
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	10 97       	sbiw	r26, 0x00	; 0
     fd2:	29 f0       	breq	.+10     	; 0xfde <malloc+0x44>
     fd4:	13 96       	adiw	r26, 0x03	; 3
     fd6:	9c 93       	st	X, r25
     fd8:	8e 93       	st	-X, r24
     fda:	12 97       	sbiw	r26, 0x02	; 2
     fdc:	2c c0       	rjmp	.+88     	; 0x1036 <malloc+0x9c>
     fde:	90 93 0a 03 	sts	0x030A, r25
     fe2:	80 93 09 03 	sts	0x0309, r24
     fe6:	27 c0       	rjmp	.+78     	; 0x1036 <malloc+0x9c>
     fe8:	21 15       	cp	r18, r1
     fea:	31 05       	cpc	r19, r1
     fec:	31 f0       	breq	.+12     	; 0xffa <malloc+0x60>
     fee:	42 17       	cp	r20, r18
     ff0:	53 07       	cpc	r21, r19
     ff2:	18 f0       	brcs	.+6      	; 0xffa <malloc+0x60>
     ff4:	a9 01       	movw	r20, r18
     ff6:	db 01       	movw	r26, r22
     ff8:	01 c0       	rjmp	.+2      	; 0xffc <malloc+0x62>
     ffa:	ef 01       	movw	r28, r30
     ffc:	9a 01       	movw	r18, r20
     ffe:	bd 01       	movw	r22, r26
    1000:	df 01       	movw	r26, r30
    1002:	02 80       	ldd	r0, Z+2	; 0x02
    1004:	f3 81       	ldd	r31, Z+3	; 0x03
    1006:	e0 2d       	mov	r30, r0
    1008:	d7 cf       	rjmp	.-82     	; 0xfb8 <malloc+0x1e>
    100a:	21 15       	cp	r18, r1
    100c:	31 05       	cpc	r19, r1
    100e:	f9 f0       	breq	.+62     	; 0x104e <malloc+0xb4>
    1010:	28 1b       	sub	r18, r24
    1012:	39 0b       	sbc	r19, r25
    1014:	24 30       	cpi	r18, 0x04	; 4
    1016:	31 05       	cpc	r19, r1
    1018:	80 f4       	brcc	.+32     	; 0x103a <malloc+0xa0>
    101a:	8a 81       	ldd	r24, Y+2	; 0x02
    101c:	9b 81       	ldd	r25, Y+3	; 0x03
    101e:	61 15       	cp	r22, r1
    1020:	71 05       	cpc	r23, r1
    1022:	21 f0       	breq	.+8      	; 0x102c <malloc+0x92>
    1024:	fb 01       	movw	r30, r22
    1026:	93 83       	std	Z+3, r25	; 0x03
    1028:	82 83       	std	Z+2, r24	; 0x02
    102a:	04 c0       	rjmp	.+8      	; 0x1034 <malloc+0x9a>
    102c:	90 93 0a 03 	sts	0x030A, r25
    1030:	80 93 09 03 	sts	0x0309, r24
    1034:	fe 01       	movw	r30, r28
    1036:	32 96       	adiw	r30, 0x02	; 2
    1038:	44 c0       	rjmp	.+136    	; 0x10c2 <malloc+0x128>
    103a:	fe 01       	movw	r30, r28
    103c:	e2 0f       	add	r30, r18
    103e:	f3 1f       	adc	r31, r19
    1040:	81 93       	st	Z+, r24
    1042:	91 93       	st	Z+, r25
    1044:	22 50       	subi	r18, 0x02	; 2
    1046:	31 09       	sbc	r19, r1
    1048:	39 83       	std	Y+1, r19	; 0x01
    104a:	28 83       	st	Y, r18
    104c:	3a c0       	rjmp	.+116    	; 0x10c2 <malloc+0x128>
    104e:	20 91 07 03 	lds	r18, 0x0307
    1052:	30 91 08 03 	lds	r19, 0x0308
    1056:	23 2b       	or	r18, r19
    1058:	41 f4       	brne	.+16     	; 0x106a <malloc+0xd0>
    105a:	20 91 02 02 	lds	r18, 0x0202
    105e:	30 91 03 02 	lds	r19, 0x0203
    1062:	30 93 08 03 	sts	0x0308, r19
    1066:	20 93 07 03 	sts	0x0307, r18
    106a:	20 91 00 02 	lds	r18, 0x0200
    106e:	30 91 01 02 	lds	r19, 0x0201
    1072:	21 15       	cp	r18, r1
    1074:	31 05       	cpc	r19, r1
    1076:	41 f4       	brne	.+16     	; 0x1088 <malloc+0xee>
    1078:	2d b7       	in	r18, 0x3d	; 61
    107a:	3e b7       	in	r19, 0x3e	; 62
    107c:	40 91 04 02 	lds	r20, 0x0204
    1080:	50 91 05 02 	lds	r21, 0x0205
    1084:	24 1b       	sub	r18, r20
    1086:	35 0b       	sbc	r19, r21
    1088:	e0 91 07 03 	lds	r30, 0x0307
    108c:	f0 91 08 03 	lds	r31, 0x0308
    1090:	e2 17       	cp	r30, r18
    1092:	f3 07       	cpc	r31, r19
    1094:	a0 f4       	brcc	.+40     	; 0x10be <malloc+0x124>
    1096:	2e 1b       	sub	r18, r30
    1098:	3f 0b       	sbc	r19, r31
    109a:	28 17       	cp	r18, r24
    109c:	39 07       	cpc	r19, r25
    109e:	78 f0       	brcs	.+30     	; 0x10be <malloc+0x124>
    10a0:	ac 01       	movw	r20, r24
    10a2:	4e 5f       	subi	r20, 0xFE	; 254
    10a4:	5f 4f       	sbci	r21, 0xFF	; 255
    10a6:	24 17       	cp	r18, r20
    10a8:	35 07       	cpc	r19, r21
    10aa:	48 f0       	brcs	.+18     	; 0x10be <malloc+0x124>
    10ac:	4e 0f       	add	r20, r30
    10ae:	5f 1f       	adc	r21, r31
    10b0:	50 93 08 03 	sts	0x0308, r21
    10b4:	40 93 07 03 	sts	0x0307, r20
    10b8:	81 93       	st	Z+, r24
    10ba:	91 93       	st	Z+, r25
    10bc:	02 c0       	rjmp	.+4      	; 0x10c2 <malloc+0x128>
    10be:	e0 e0       	ldi	r30, 0x00	; 0
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	cf 01       	movw	r24, r30
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	08 95       	ret

000010ca <free>:
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	00 97       	sbiw	r24, 0x00	; 0
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <free+0xa>
    10d2:	87 c0       	rjmp	.+270    	; 0x11e2 <free+0x118>
    10d4:	fc 01       	movw	r30, r24
    10d6:	32 97       	sbiw	r30, 0x02	; 2
    10d8:	13 82       	std	Z+3, r1	; 0x03
    10da:	12 82       	std	Z+2, r1	; 0x02
    10dc:	c0 91 09 03 	lds	r28, 0x0309
    10e0:	d0 91 0a 03 	lds	r29, 0x030A
    10e4:	20 97       	sbiw	r28, 0x00	; 0
    10e6:	81 f4       	brne	.+32     	; 0x1108 <free+0x3e>
    10e8:	20 81       	ld	r18, Z
    10ea:	31 81       	ldd	r19, Z+1	; 0x01
    10ec:	28 0f       	add	r18, r24
    10ee:	39 1f       	adc	r19, r25
    10f0:	80 91 07 03 	lds	r24, 0x0307
    10f4:	90 91 08 03 	lds	r25, 0x0308
    10f8:	82 17       	cp	r24, r18
    10fa:	93 07       	cpc	r25, r19
    10fc:	79 f5       	brne	.+94     	; 0x115c <free+0x92>
    10fe:	f0 93 08 03 	sts	0x0308, r31
    1102:	e0 93 07 03 	sts	0x0307, r30
    1106:	6d c0       	rjmp	.+218    	; 0x11e2 <free+0x118>
    1108:	de 01       	movw	r26, r28
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	ae 17       	cp	r26, r30
    1110:	bf 07       	cpc	r27, r31
    1112:	50 f4       	brcc	.+20     	; 0x1128 <free+0x5e>
    1114:	12 96       	adiw	r26, 0x02	; 2
    1116:	4d 91       	ld	r20, X+
    1118:	5c 91       	ld	r21, X
    111a:	13 97       	sbiw	r26, 0x03	; 3
    111c:	9d 01       	movw	r18, r26
    111e:	41 15       	cp	r20, r1
    1120:	51 05       	cpc	r21, r1
    1122:	09 f1       	breq	.+66     	; 0x1166 <free+0x9c>
    1124:	da 01       	movw	r26, r20
    1126:	f3 cf       	rjmp	.-26     	; 0x110e <free+0x44>
    1128:	b3 83       	std	Z+3, r27	; 0x03
    112a:	a2 83       	std	Z+2, r26	; 0x02
    112c:	40 81       	ld	r20, Z
    112e:	51 81       	ldd	r21, Z+1	; 0x01
    1130:	84 0f       	add	r24, r20
    1132:	95 1f       	adc	r25, r21
    1134:	8a 17       	cp	r24, r26
    1136:	9b 07       	cpc	r25, r27
    1138:	71 f4       	brne	.+28     	; 0x1156 <free+0x8c>
    113a:	8d 91       	ld	r24, X+
    113c:	9c 91       	ld	r25, X
    113e:	11 97       	sbiw	r26, 0x01	; 1
    1140:	84 0f       	add	r24, r20
    1142:	95 1f       	adc	r25, r21
    1144:	02 96       	adiw	r24, 0x02	; 2
    1146:	91 83       	std	Z+1, r25	; 0x01
    1148:	80 83       	st	Z, r24
    114a:	12 96       	adiw	r26, 0x02	; 2
    114c:	8d 91       	ld	r24, X+
    114e:	9c 91       	ld	r25, X
    1150:	13 97       	sbiw	r26, 0x03	; 3
    1152:	93 83       	std	Z+3, r25	; 0x03
    1154:	82 83       	std	Z+2, r24	; 0x02
    1156:	21 15       	cp	r18, r1
    1158:	31 05       	cpc	r19, r1
    115a:	29 f4       	brne	.+10     	; 0x1166 <free+0x9c>
    115c:	f0 93 0a 03 	sts	0x030A, r31
    1160:	e0 93 09 03 	sts	0x0309, r30
    1164:	3e c0       	rjmp	.+124    	; 0x11e2 <free+0x118>
    1166:	d9 01       	movw	r26, r18
    1168:	13 96       	adiw	r26, 0x03	; 3
    116a:	fc 93       	st	X, r31
    116c:	ee 93       	st	-X, r30
    116e:	12 97       	sbiw	r26, 0x02	; 2
    1170:	4d 91       	ld	r20, X+
    1172:	5d 91       	ld	r21, X+
    1174:	a4 0f       	add	r26, r20
    1176:	b5 1f       	adc	r27, r21
    1178:	ea 17       	cp	r30, r26
    117a:	fb 07       	cpc	r31, r27
    117c:	79 f4       	brne	.+30     	; 0x119c <free+0xd2>
    117e:	80 81       	ld	r24, Z
    1180:	91 81       	ldd	r25, Z+1	; 0x01
    1182:	84 0f       	add	r24, r20
    1184:	95 1f       	adc	r25, r21
    1186:	02 96       	adiw	r24, 0x02	; 2
    1188:	d9 01       	movw	r26, r18
    118a:	11 96       	adiw	r26, 0x01	; 1
    118c:	9c 93       	st	X, r25
    118e:	8e 93       	st	-X, r24
    1190:	82 81       	ldd	r24, Z+2	; 0x02
    1192:	93 81       	ldd	r25, Z+3	; 0x03
    1194:	13 96       	adiw	r26, 0x03	; 3
    1196:	9c 93       	st	X, r25
    1198:	8e 93       	st	-X, r24
    119a:	12 97       	sbiw	r26, 0x02	; 2
    119c:	e0 e0       	ldi	r30, 0x00	; 0
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	8a 81       	ldd	r24, Y+2	; 0x02
    11a2:	9b 81       	ldd	r25, Y+3	; 0x03
    11a4:	00 97       	sbiw	r24, 0x00	; 0
    11a6:	19 f0       	breq	.+6      	; 0x11ae <free+0xe4>
    11a8:	fe 01       	movw	r30, r28
    11aa:	ec 01       	movw	r28, r24
    11ac:	f9 cf       	rjmp	.-14     	; 0x11a0 <free+0xd6>
    11ae:	ce 01       	movw	r24, r28
    11b0:	02 96       	adiw	r24, 0x02	; 2
    11b2:	28 81       	ld	r18, Y
    11b4:	39 81       	ldd	r19, Y+1	; 0x01
    11b6:	82 0f       	add	r24, r18
    11b8:	93 1f       	adc	r25, r19
    11ba:	20 91 07 03 	lds	r18, 0x0307
    11be:	30 91 08 03 	lds	r19, 0x0308
    11c2:	28 17       	cp	r18, r24
    11c4:	39 07       	cpc	r19, r25
    11c6:	69 f4       	brne	.+26     	; 0x11e2 <free+0x118>
    11c8:	30 97       	sbiw	r30, 0x00	; 0
    11ca:	29 f4       	brne	.+10     	; 0x11d6 <free+0x10c>
    11cc:	10 92 0a 03 	sts	0x030A, r1
    11d0:	10 92 09 03 	sts	0x0309, r1
    11d4:	02 c0       	rjmp	.+4      	; 0x11da <free+0x110>
    11d6:	13 82       	std	Z+3, r1	; 0x03
    11d8:	12 82       	std	Z+2, r1	; 0x02
    11da:	d0 93 08 03 	sts	0x0308, r29
    11de:	c0 93 07 03 	sts	0x0307, r28
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	08 95       	ret

000011e8 <strnlen_P>:
    11e8:	fc 01       	movw	r30, r24
    11ea:	05 90       	lpm	r0, Z+
    11ec:	61 50       	subi	r22, 0x01	; 1
    11ee:	70 40       	sbci	r23, 0x00	; 0
    11f0:	01 10       	cpse	r0, r1
    11f2:	d8 f7       	brcc	.-10     	; 0x11ea <strnlen_P+0x2>
    11f4:	80 95       	com	r24
    11f6:	90 95       	com	r25
    11f8:	8e 0f       	add	r24, r30
    11fa:	9f 1f       	adc	r25, r31
    11fc:	08 95       	ret

000011fe <memset>:
    11fe:	dc 01       	movw	r26, r24
    1200:	01 c0       	rjmp	.+2      	; 0x1204 <memset+0x6>
    1202:	6d 93       	st	X+, r22
    1204:	41 50       	subi	r20, 0x01	; 1
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	e0 f7       	brcc	.-8      	; 0x1202 <memset+0x4>
    120a:	08 95       	ret

0000120c <strnlen>:
    120c:	fc 01       	movw	r30, r24
    120e:	61 50       	subi	r22, 0x01	; 1
    1210:	70 40       	sbci	r23, 0x00	; 0
    1212:	01 90       	ld	r0, Z+
    1214:	01 10       	cpse	r0, r1
    1216:	d8 f7       	brcc	.-10     	; 0x120e <strnlen+0x2>
    1218:	80 95       	com	r24
    121a:	90 95       	com	r25
    121c:	8e 0f       	add	r24, r30
    121e:	9f 1f       	adc	r25, r31
    1220:	08 95       	ret

00001222 <fputc>:
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	cf 93       	push	r28
    1228:	df 93       	push	r29
    122a:	18 2f       	mov	r17, r24
    122c:	09 2f       	mov	r16, r25
    122e:	eb 01       	movw	r28, r22
    1230:	8b 81       	ldd	r24, Y+3	; 0x03
    1232:	81 fd       	sbrc	r24, 1
    1234:	03 c0       	rjmp	.+6      	; 0x123c <fputc+0x1a>
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	20 c0       	rjmp	.+64     	; 0x127c <fputc+0x5a>
    123c:	82 ff       	sbrs	r24, 2
    123e:	10 c0       	rjmp	.+32     	; 0x1260 <fputc+0x3e>
    1240:	4e 81       	ldd	r20, Y+6	; 0x06
    1242:	5f 81       	ldd	r21, Y+7	; 0x07
    1244:	2c 81       	ldd	r18, Y+4	; 0x04
    1246:	3d 81       	ldd	r19, Y+5	; 0x05
    1248:	42 17       	cp	r20, r18
    124a:	53 07       	cpc	r21, r19
    124c:	7c f4       	brge	.+30     	; 0x126c <fputc+0x4a>
    124e:	e8 81       	ld	r30, Y
    1250:	f9 81       	ldd	r31, Y+1	; 0x01
    1252:	9f 01       	movw	r18, r30
    1254:	2f 5f       	subi	r18, 0xFF	; 255
    1256:	3f 4f       	sbci	r19, 0xFF	; 255
    1258:	39 83       	std	Y+1, r19	; 0x01
    125a:	28 83       	st	Y, r18
    125c:	10 83       	st	Z, r17
    125e:	06 c0       	rjmp	.+12     	; 0x126c <fputc+0x4a>
    1260:	e8 85       	ldd	r30, Y+8	; 0x08
    1262:	f9 85       	ldd	r31, Y+9	; 0x09
    1264:	81 2f       	mov	r24, r17
    1266:	19 95       	eicall
    1268:	89 2b       	or	r24, r25
    126a:	29 f7       	brne	.-54     	; 0x1236 <fputc+0x14>
    126c:	2e 81       	ldd	r18, Y+6	; 0x06
    126e:	3f 81       	ldd	r19, Y+7	; 0x07
    1270:	2f 5f       	subi	r18, 0xFF	; 255
    1272:	3f 4f       	sbci	r19, 0xFF	; 255
    1274:	3f 83       	std	Y+7, r19	; 0x07
    1276:	2e 83       	std	Y+6, r18	; 0x06
    1278:	81 2f       	mov	r24, r17
    127a:	90 2f       	mov	r25, r16
    127c:	df 91       	pop	r29
    127e:	cf 91       	pop	r28
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	08 95       	ret

00001286 <__ultoa_invert>:
    1286:	fa 01       	movw	r30, r20
    1288:	aa 27       	eor	r26, r26
    128a:	28 30       	cpi	r18, 0x08	; 8
    128c:	51 f1       	breq	.+84     	; 0x12e2 <__ultoa_invert+0x5c>
    128e:	20 31       	cpi	r18, 0x10	; 16
    1290:	81 f1       	breq	.+96     	; 0x12f2 <__ultoa_invert+0x6c>
    1292:	e8 94       	clt
    1294:	6f 93       	push	r22
    1296:	6e 7f       	andi	r22, 0xFE	; 254
    1298:	6e 5f       	subi	r22, 0xFE	; 254
    129a:	7f 4f       	sbci	r23, 0xFF	; 255
    129c:	8f 4f       	sbci	r24, 0xFF	; 255
    129e:	9f 4f       	sbci	r25, 0xFF	; 255
    12a0:	af 4f       	sbci	r26, 0xFF	; 255
    12a2:	b1 e0       	ldi	r27, 0x01	; 1
    12a4:	3e d0       	rcall	.+124    	; 0x1322 <__ultoa_invert+0x9c>
    12a6:	b4 e0       	ldi	r27, 0x04	; 4
    12a8:	3c d0       	rcall	.+120    	; 0x1322 <__ultoa_invert+0x9c>
    12aa:	67 0f       	add	r22, r23
    12ac:	78 1f       	adc	r23, r24
    12ae:	89 1f       	adc	r24, r25
    12b0:	9a 1f       	adc	r25, r26
    12b2:	a1 1d       	adc	r26, r1
    12b4:	68 0f       	add	r22, r24
    12b6:	79 1f       	adc	r23, r25
    12b8:	8a 1f       	adc	r24, r26
    12ba:	91 1d       	adc	r25, r1
    12bc:	a1 1d       	adc	r26, r1
    12be:	6a 0f       	add	r22, r26
    12c0:	71 1d       	adc	r23, r1
    12c2:	81 1d       	adc	r24, r1
    12c4:	91 1d       	adc	r25, r1
    12c6:	a1 1d       	adc	r26, r1
    12c8:	20 d0       	rcall	.+64     	; 0x130a <__ultoa_invert+0x84>
    12ca:	09 f4       	brne	.+2      	; 0x12ce <__ultoa_invert+0x48>
    12cc:	68 94       	set
    12ce:	3f 91       	pop	r19
    12d0:	2a e0       	ldi	r18, 0x0A	; 10
    12d2:	26 9f       	mul	r18, r22
    12d4:	11 24       	eor	r1, r1
    12d6:	30 19       	sub	r19, r0
    12d8:	30 5d       	subi	r19, 0xD0	; 208
    12da:	31 93       	st	Z+, r19
    12dc:	de f6       	brtc	.-74     	; 0x1294 <__ultoa_invert+0xe>
    12de:	cf 01       	movw	r24, r30
    12e0:	08 95       	ret
    12e2:	46 2f       	mov	r20, r22
    12e4:	47 70       	andi	r20, 0x07	; 7
    12e6:	40 5d       	subi	r20, 0xD0	; 208
    12e8:	41 93       	st	Z+, r20
    12ea:	b3 e0       	ldi	r27, 0x03	; 3
    12ec:	0f d0       	rcall	.+30     	; 0x130c <__ultoa_invert+0x86>
    12ee:	c9 f7       	brne	.-14     	; 0x12e2 <__ultoa_invert+0x5c>
    12f0:	f6 cf       	rjmp	.-20     	; 0x12de <__ultoa_invert+0x58>
    12f2:	46 2f       	mov	r20, r22
    12f4:	4f 70       	andi	r20, 0x0F	; 15
    12f6:	40 5d       	subi	r20, 0xD0	; 208
    12f8:	4a 33       	cpi	r20, 0x3A	; 58
    12fa:	18 f0       	brcs	.+6      	; 0x1302 <__ultoa_invert+0x7c>
    12fc:	49 5d       	subi	r20, 0xD9	; 217
    12fe:	31 fd       	sbrc	r19, 1
    1300:	40 52       	subi	r20, 0x20	; 32
    1302:	41 93       	st	Z+, r20
    1304:	02 d0       	rcall	.+4      	; 0x130a <__ultoa_invert+0x84>
    1306:	a9 f7       	brne	.-22     	; 0x12f2 <__ultoa_invert+0x6c>
    1308:	ea cf       	rjmp	.-44     	; 0x12de <__ultoa_invert+0x58>
    130a:	b4 e0       	ldi	r27, 0x04	; 4
    130c:	a6 95       	lsr	r26
    130e:	97 95       	ror	r25
    1310:	87 95       	ror	r24
    1312:	77 95       	ror	r23
    1314:	67 95       	ror	r22
    1316:	ba 95       	dec	r27
    1318:	c9 f7       	brne	.-14     	; 0x130c <__ultoa_invert+0x86>
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	61 05       	cpc	r22, r1
    131e:	71 05       	cpc	r23, r1
    1320:	08 95       	ret
    1322:	9b 01       	movw	r18, r22
    1324:	ac 01       	movw	r20, r24
    1326:	0a 2e       	mov	r0, r26
    1328:	06 94       	lsr	r0
    132a:	57 95       	ror	r21
    132c:	47 95       	ror	r20
    132e:	37 95       	ror	r19
    1330:	27 95       	ror	r18
    1332:	ba 95       	dec	r27
    1334:	c9 f7       	brne	.-14     	; 0x1328 <__ultoa_invert+0xa2>
    1336:	62 0f       	add	r22, r18
    1338:	73 1f       	adc	r23, r19
    133a:	84 1f       	adc	r24, r20
    133c:	95 1f       	adc	r25, r21
    133e:	a0 1d       	adc	r26, r0
    1340:	08 95       	ret

00001342 <_exit>:
    1342:	f8 94       	cli

00001344 <__stop_program>:
    1344:	ff cf       	rjmp	.-2      	; 0x1344 <__stop_program>
