
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800200  00000bfa  00000c8e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bfa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  00800206  00800206  00000c94  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000c94  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  00000cc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001445  00000000  00000000  00000e9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000099d  00000000  00000000  000022e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c6c  00000000  00000000  00002c7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000420  00000000  00000000  000038ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000519  00000000  00000000  00003d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009c2  00000000  00000000  00004225  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000198  00000000  00000000  00004be7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	9d c0       	rjmp	.+314    	; 0x150 <__vector_5>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ea ef       	ldi	r30, 0xFA	; 250
  fc:	fb e0       	ldi	r31, 0x0B	; 11
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a6 30       	cpi	r26, 0x06	; 6
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a6 e0       	ldi	r26, 0x06	; 6
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a7 32       	cpi	r26, 0x27	; 39
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	76 d1       	rcall	.+748    	; 0x40c <main>
 120:	6a c5       	rjmp	.+2772   	; 0xbf6 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_message_receive>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
 124:	82 e1       	ldi	r24, 0x12	; 18
 126:	92 e0       	ldi	r25, 0x02	; 2
 128:	08 95       	ret

0000012a <CAN_construct_message>:
 12a:	90 93 08 02 	sts	0x0208, r25
 12e:	80 93 07 02 	sts	0x0207, r24
 132:	60 93 09 02 	sts	0x0209, r22
 136:	66 23       	and	r22, r22
 138:	41 f0       	breq	.+16     	; 0x14a <CAN_construct_message+0x20>
 13a:	8a e0       	ldi	r24, 0x0A	; 10
 13c:	92 e0       	ldi	r25, 0x02	; 2
 13e:	fc 01       	movw	r30, r24
 140:	11 92       	st	Z+, r1
 142:	2e 2f       	mov	r18, r30
 144:	28 1b       	sub	r18, r24
 146:	26 17       	cp	r18, r22
 148:	d8 f3       	brcs	.-10     	; 0x140 <CAN_construct_message+0x16>
 14a:	08 95       	ret

0000014c <CAN_read>:
 14c:	9d c0       	rjmp	.+314    	; 0x288 <MCP2515_read>
 14e:	08 95       	ret

00000150 <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
	receive_flag = 1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	80 93 06 02 	sts	0x0206, r24
}
 162:	8f 91       	pop	r24
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
 16e:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
 170:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
 172:	ea e6       	ldi	r30, 0x6A	; 106
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	80 81       	ld	r24, Z
 178:	8e 7f       	andi	r24, 0xFE	; 254
 17a:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
 17c:	80 81       	ld	r24, Z
 17e:	82 60       	ori	r24, 0x02	; 2
 180:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
 182:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
		
	
	#endif
	sei();
 184:	78 94       	sei
 186:	08 95       	ret

00000188 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
 188:	a6 d0       	rcall	.+332    	; 0x2d6 <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
 18a:	68 e0       	ldi	r22, 0x08	; 8
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	cc df       	rcall	.-104    	; 0x12a <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
 192:	4f ef       	ldi	r20, 0xFF	; 255
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	64 e6       	ldi	r22, 0x64	; 100
 198:	80 e6       	ldi	r24, 0x60	; 96
 19a:	84 d0       	rcall	.+264    	; 0x2a4 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
 19c:	4f ef       	ldi	r20, 0xFF	; 255
 19e:	50 e0       	ldi	r21, 0x00	; 0
 1a0:	64 e6       	ldi	r22, 0x64	; 100
 1a2:	80 e7       	ldi	r24, 0x70	; 112
 1a4:	7f d0       	rcall	.+254    	; 0x2a4 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
 1a6:	41 e0       	ldi	r20, 0x01	; 1
 1a8:	50 e0       	ldi	r21, 0x00	; 0
 1aa:	61 e0       	ldi	r22, 0x01	; 1
 1ac:	8b e2       	ldi	r24, 0x2B	; 43
 1ae:	7a d0       	rcall	.+244    	; 0x2a4 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
 1b0:	40 e0       	ldi	r20, 0x00	; 0
 1b2:	50 e0       	ldi	r21, 0x00	; 0
 1b4:	60 ee       	ldi	r22, 0xE0	; 224
 1b6:	8f e0       	ldi	r24, 0x0F	; 15
 1b8:	75 d0       	rcall	.+234    	; 0x2a4 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
 1ba:	d9 cf       	rjmp	.-78     	; 0x16e <CAN_interrupt_setup>
 1bc:	08 95       	ret

000001be <CAN_reception_complete>:
	
	#endif
	sei();
}

int8_t CAN_reception_complete(void){
 1be:	cf 93       	push	r28
 1c0:	df 93       	push	r29
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) | (MCP2515_read(MCP_CANINTF) & MCP_RX1IF)));
 1c2:	8c e2       	ldi	r24, 0x2C	; 44
 1c4:	61 d0       	rcall	.+194    	; 0x288 <MCP2515_read>
 1c6:	ec 01       	movw	r28, r24
 1c8:	8c e2       	ldi	r24, 0x2C	; 44
 1ca:	5e d0       	rcall	.+188    	; 0x288 <MCP2515_read>
 1cc:	82 70       	andi	r24, 0x02	; 2
 1ce:	99 27       	eor	r25, r25
 1d0:	c1 70       	andi	r28, 0x01	; 1
 1d2:	dd 27       	eor	r29, r29
 1d4:	c8 2b       	or	r28, r24
 1d6:	d9 2b       	or	r29, r25
 1d8:	cd 2b       	or	r28, r29
 1da:	99 f3       	breq	.-26     	; 0x1c2 <CAN_reception_complete+0x4>
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
 1dc:	8c e2       	ldi	r24, 0x2C	; 44
 1de:	54 d0       	rcall	.+168    	; 0x288 <MCP2515_read>
 1e0:	80 ff       	sbrs	r24, 0
 1e2:	07 c0       	rjmp	.+14     	; 0x1f2 <CAN_reception_complete+0x34>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
 1e4:	40 e0       	ldi	r20, 0x00	; 0
 1e6:	50 e0       	ldi	r21, 0x00	; 0
 1e8:	61 e0       	ldi	r22, 0x01	; 1
 1ea:	8c e2       	ldi	r24, 0x2C	; 44
 1ec:	5b d0       	rcall	.+182    	; 0x2a4 <MCP2515_bit_modify>
		return 0;
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0c c0       	rjmp	.+24     	; 0x20a <CAN_reception_complete+0x4c>
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
 1f2:	8c e2       	ldi	r24, 0x2C	; 44
 1f4:	49 d0       	rcall	.+146    	; 0x288 <MCP2515_read>
 1f6:	81 ff       	sbrs	r24, 1
 1f8:	07 c0       	rjmp	.+14     	; 0x208 <CAN_reception_complete+0x4a>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
 1fa:	40 e0       	ldi	r20, 0x00	; 0
 1fc:	50 e0       	ldi	r21, 0x00	; 0
 1fe:	62 e0       	ldi	r22, 0x02	; 2
 200:	8c e2       	ldi	r24, 0x2C	; 44
 202:	50 d0       	rcall	.+160    	; 0x2a4 <MCP2515_bit_modify>
		return 1;
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	01 c0       	rjmp	.+2      	; 0x20a <CAN_reception_complete+0x4c>
	}
	return -1;
 208:	8f ef       	ldi	r24, 0xFF	; 255
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
 210:	1f 93       	push	r17
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
	if(receive_flag){
 216:	80 91 06 02 	lds	r24, 0x0206
 21a:	88 23       	and	r24, r24
 21c:	61 f1       	breq	.+88     	; 0x276 <CAN_data_receive+0x66>
		receive_flag = 0;
 21e:	10 92 06 02 	sts	0x0206, r1
		uint8_t n = CAN_reception_complete();
 222:	cd df       	rcall	.-102    	; 0x1be <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
 224:	c8 2f       	mov	r28, r24
 226:	c2 95       	swap	r28
 228:	c0 7f       	andi	r28, 0xF0	; 240
 22a:	82 e6       	ldi	r24, 0x62	; 98
 22c:	8c 0f       	add	r24, r28
 22e:	8e df       	rcall	.-228    	; 0x14c <CAN_read>
 230:	81 e6       	ldi	r24, 0x61	; 97
 232:	8c 0f       	add	r24, r28
 234:	8b df       	rcall	.-234    	; 0x14c <CAN_read>
 236:	28 e0       	ldi	r18, 0x08	; 8
 238:	82 9f       	mul	r24, r18
 23a:	c0 01       	movw	r24, r0
 23c:	11 24       	eor	r1, r1
 23e:	90 93 13 02 	sts	0x0213, r25
 242:	80 93 12 02 	sts	0x0212, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
 246:	85 e6       	ldi	r24, 0x65	; 101
 248:	8c 0f       	add	r24, r28
 24a:	80 df       	rcall	.-256    	; 0x14c <CAN_read>
 24c:	8f 70       	andi	r24, 0x0F	; 15
 24e:	80 93 14 02 	sts	0x0214, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 252:	88 23       	and	r24, r24
 254:	91 f0       	breq	.+36     	; 0x27a <CAN_data_receive+0x6a>
 256:	10 e0       	ldi	r17, 0x00	; 0
 258:	c4 e1       	ldi	r28, 0x14	; 20
 25a:	d2 e0       	ldi	r29, 0x02	; 2
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
 25c:	86 e6       	ldi	r24, 0x66	; 102
 25e:	81 0f       	add	r24, r17
 260:	75 df       	rcall	.-278    	; 0x14c <CAN_read>
 262:	e1 2f       	mov	r30, r17
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	ee 5e       	subi	r30, 0xEE	; 238
 268:	fd 4f       	sbci	r31, 0xFD	; 253
 26a:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
 26c:	1f 5f       	subi	r17, 0xFF	; 255
 26e:	88 81       	ld	r24, Y
 270:	18 17       	cp	r17, r24
 272:	a0 f3       	brcs	.-24     	; 0x25c <CAN_data_receive+0x4c>
 274:	04 c0       	rjmp	.+8      	; 0x27e <CAN_data_receive+0x6e>
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	03 c0       	rjmp	.+6      	; 0x280 <CAN_data_receive+0x70>
		}
		#if UART_ENABLE
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
 27a:	81 e0       	ldi	r24, 0x01	; 1
 27c:	01 c0       	rjmp	.+2      	; 0x280 <CAN_data_receive+0x70>
 27e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	08 95       	ret

00000288 <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
 288:	cf 93       	push	r28
 28a:	c8 2f       	mov	r28, r24
 28c:	33 d0       	rcall	.+102    	; 0x2f4 <SPI_select>
 28e:	83 e0       	ldi	r24, 0x03	; 3
 290:	25 d0       	rcall	.+74     	; 0x2dc <SPI_send>
 292:	8c 2f       	mov	r24, r28
 294:	23 d0       	rcall	.+70     	; 0x2dc <SPI_send>
 296:	27 d0       	rcall	.+78     	; 0x2e6 <SPI_receive>
 298:	c8 2f       	mov	r28, r24
 29a:	2e d0       	rcall	.+92     	; 0x2f8 <SPI_deselect>
 29c:	8c 2f       	mov	r24, r28
 29e:	90 e0       	ldi	r25, 0x00	; 0
 2a0:	cf 91       	pop	r28
 2a2:	08 95       	ret

000002a4 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
 2a4:	1f 93       	push	r17
 2a6:	cf 93       	push	r28
 2a8:	df 93       	push	r29
 2aa:	18 2f       	mov	r17, r24
 2ac:	d6 2f       	mov	r29, r22
 2ae:	c4 2f       	mov	r28, r20
	SPI_select();
 2b0:	21 d0       	rcall	.+66     	; 0x2f4 <SPI_select>
	SPI_send(MCP_BITMOD);
 2b2:	85 e0       	ldi	r24, 0x05	; 5
 2b4:	13 d0       	rcall	.+38     	; 0x2dc <SPI_send>
	SPI_send(adr);
 2b6:	81 2f       	mov	r24, r17
 2b8:	11 d0       	rcall	.+34     	; 0x2dc <SPI_send>
	SPI_send(mask);
 2ba:	8d 2f       	mov	r24, r29
 2bc:	0f d0       	rcall	.+30     	; 0x2dc <SPI_send>
	SPI_send(data);
 2be:	8c 2f       	mov	r24, r28
 2c0:	0d d0       	rcall	.+26     	; 0x2dc <SPI_send>
	SPI_deselect();
 2c2:	1a d0       	rcall	.+52     	; 0x2f8 <SPI_deselect>
}
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	1f 91       	pop	r17
 2ca:	08 95       	ret

000002cc <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
 2cc:	13 d0       	rcall	.+38     	; 0x2f4 <SPI_select>
	SPI_send(MCP_RESET);
 2ce:	80 ec       	ldi	r24, 0xC0	; 192
 2d0:	05 d0       	rcall	.+10     	; 0x2dc <SPI_send>
	SPI_deselect();
 2d2:	12 c0       	rjmp	.+36     	; 0x2f8 <SPI_deselect>
 2d4:	08 95       	ret

000002d6 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
 2d6:	12 d0       	rcall	.+36     	; 0x2fc <SPI_initialize>
	MCP2515_reset();
 2d8:	f9 cf       	rjmp	.-14     	; 0x2cc <MCP2515_reset>
 2da:	08 95       	ret

000002dc <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
 2dc:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
 2de:	0d b4       	in	r0, 0x2d	; 45
 2e0:	07 fe       	sbrs	r0, 7
 2e2:	fd cf       	rjmp	.-6      	; 0x2de <SPI_send+0x2>

}
 2e4:	08 95       	ret

000002e6 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	f9 df       	rcall	.-14     	; 0x2dc <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
 2ea:	0d b4       	in	r0, 0x2d	; 45
 2ec:	07 fe       	sbrs	r0, 7
 2ee:	fd cf       	rjmp	.-6      	; 0x2ea <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
 2f0:	8e b5       	in	r24, 0x2e	; 46
}
 2f2:	08 95       	ret

000002f4 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
 2f4:	2f 98       	cbi	0x05, 7	; 5
 2f6:	08 95       	ret

000002f8 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
 2f8:	2f 9a       	sbi	0x05, 7	; 5
 2fa:	08 95       	ret

000002fc <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
 2fc:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
 2fe:	8c b5       	in	r24, 0x2c	; 44
 300:	81 60       	ori	r24, 0x01	; 1
 302:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
 304:	84 b1       	in	r24, 0x04	; 4
 306:	86 68       	ori	r24, 0x86	; 134
 308:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
 30a:	8c b5       	in	r24, 0x2c	; 44
 30c:	80 65       	ori	r24, 0x50	; 80
 30e:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
 310:	f3 cf       	rjmp	.-26     	; 0x2f8 <SPI_deselect>
 312:	08 95       	ret

00000314 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
 314:	e0 ec       	ldi	r30, 0xC0	; 192
 316:	f0 e0       	ldi	r31, 0x00	; 0
 318:	90 81       	ld	r25, Z
 31a:	95 ff       	sbrs	r25, 5
 31c:	fd cf       	rjmp	.-6      	; 0x318 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
 31e:	80 93 c6 00 	sts	0x00C6, r24
 322:	08 95       	ret

00000324 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
 324:	e0 ec       	ldi	r30, 0xC0	; 192
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	88 23       	and	r24, r24
 32c:	ec f7       	brge	.-6      	; 0x328 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
 32e:	80 91 c6 00 	lds	r24, 0x00C6
}
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	08 95       	ret

00000336 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
 336:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
 33a:	87 e6       	ldi	r24, 0x67	; 103
 33c:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 340:	88 e1       	ldi	r24, 0x18	; 24
 342:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 346:	8e e0       	ldi	r24, 0x0E	; 14
 348:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
 34c:	62 e9       	ldi	r22, 0x92	; 146
 34e:	71 e0       	ldi	r23, 0x01	; 1
 350:	8a e8       	ldi	r24, 0x8A	; 138
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	be c2       	rjmp	.+1404   	; 0x8d2 <fdevopen>
 356:	08 95       	ret

00000358 <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(20);
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	70 e0       	ldi	r23, 0x00	; 0
 35c:	80 ea       	ldi	r24, 0xA0	; 160
 35e:	91 e4       	ldi	r25, 0x41	; 65
 360:	81 d0       	rcall	.+258    	; 0x464 <pwm_init>

int servo_set(int value){
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
			pwm_set_pulse_width(pulse_width);
 362:	60 e0       	ldi	r22, 0x00	; 0
 364:	70 e0       	ldi	r23, 0x00	; 0
 366:	80 ec       	ldi	r24, 0xC0	; 192
 368:	9f e3       	ldi	r25, 0x3F	; 63
 36a:	66 c0       	rjmp	.+204    	; 0x438 <pwm_set_pulse_width>
 36c:	08 95       	ret

0000036e <servo_set>:
void servo_init(void){
	pwm_init(20);
	servo_set(0);
}

int servo_set(int value){
 36e:	cf 92       	push	r12
 370:	df 92       	push	r13
 372:	ef 92       	push	r14
 374:	ff 92       	push	r15
 376:	bc 01       	movw	r22, r24
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
 378:	8c 59       	subi	r24, 0x9C	; 156
 37a:	9f 4f       	sbci	r25, 0xFF	; 255
 37c:	89 3c       	cpi	r24, 0xC9	; 201
 37e:	91 05       	cpc	r25, r1
 380:	98 f5       	brcc	.+102    	; 0x3e8 <servo_set+0x7a>
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
 382:	88 27       	eor	r24, r24
 384:	77 fd       	sbrc	r23, 7
 386:	80 95       	com	r24
 388:	98 2f       	mov	r25, r24
 38a:	8c d1       	rcall	.+792    	; 0x6a4 <__floatsisf>
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	70 e0       	ldi	r23, 0x00	; 0
 394:	88 ec       	ldi	r24, 0xC8	; 200
 396:	92 e4       	ldi	r25, 0x42	; 66
 398:	81 d0       	rcall	.+258    	; 0x49c <__subsf3>
 39a:	20 e0       	ldi	r18, 0x00	; 0
 39c:	30 e0       	ldi	r19, 0x00	; 0
 39e:	48 e4       	ldi	r20, 0x48	; 72
 3a0:	53 e4       	ldi	r21, 0x43	; 67
 3a2:	e5 d0       	rcall	.+458    	; 0x56e <__divsf3>
 3a4:	29 e9       	ldi	r18, 0x99	; 153
 3a6:	39 e9       	ldi	r19, 0x99	; 153
 3a8:	49 e9       	ldi	r20, 0x99	; 153
 3aa:	5f e3       	ldi	r21, 0x3F	; 63
 3ac:	2f d2       	rcall	.+1118   	; 0x80c <__mulsf3>
 3ae:	26 e6       	ldi	r18, 0x66	; 102
 3b0:	36 e6       	ldi	r19, 0x66	; 102
 3b2:	46 e6       	ldi	r20, 0x66	; 102
 3b4:	5f e3       	ldi	r21, 0x3F	; 63
 3b6:	73 d0       	rcall	.+230    	; 0x49e <__addsf3>
 3b8:	6b 01       	movw	r12, r22
 3ba:	7c 01       	movw	r14, r24
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){//UNNECCECARY, BUT STAY SAFE
 3bc:	26 e6       	ldi	r18, 0x66	; 102
 3be:	36 e6       	ldi	r19, 0x66	; 102
 3c0:	46 e6       	ldi	r20, 0x66	; 102
 3c2:	5f e3       	ldi	r21, 0x3F	; 63
 3c4:	1f d2       	rcall	.+1086   	; 0x804 <__gesf2>
 3c6:	88 23       	and	r24, r24
 3c8:	94 f0       	brlt	.+36     	; 0x3ee <servo_set+0x80>
 3ca:	26 e6       	ldi	r18, 0x66	; 102
 3cc:	36 e6       	ldi	r19, 0x66	; 102
 3ce:	46 e0       	ldi	r20, 0x06	; 6
 3d0:	50 e4       	ldi	r21, 0x40	; 64
 3d2:	c7 01       	movw	r24, r14
 3d4:	b6 01       	movw	r22, r12
 3d6:	c7 d0       	rcall	.+398    	; 0x566 <__cmpsf2>
 3d8:	18 16       	cp	r1, r24
 3da:	64 f0       	brlt	.+24     	; 0x3f4 <servo_set+0x86>
			pwm_set_pulse_width(pulse_width);
 3dc:	c7 01       	movw	r24, r14
 3de:	b6 01       	movw	r22, r12
 3e0:	2b d0       	rcall	.+86     	; 0x438 <pwm_set_pulse_width>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	90 e0       	ldi	r25, 0x00	; 0
 3e6:	08 c0       	rjmp	.+16     	; 0x3f8 <servo_set+0x8a>
		}else{
			return 0;
		}
	}else{
		return -1;
 3e8:	8f ef       	ldi	r24, 0xFF	; 255
 3ea:	9f ef       	ldi	r25, 0xFF	; 255
 3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <servo_set+0x8a>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
		}else{
			return 0;
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <servo_set+0x8a>
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		return -1;
	}
 3f8:	ff 90       	pop	r15
 3fa:	ef 90       	pop	r14
 3fc:	df 90       	pop	r13
 3fe:	cf 90       	pop	r12
 400:	08 95       	ret

00000402 <init_all>:
    return 0;
}

void init_all(void){
	
	cli();
 402:	f8 94       	cli
	init_UART();
 404:	98 df       	rcall	.-208    	; 0x336 <init_UART>
	CAN_initialize();
 406:	c0 de       	rcall	.-640    	; 0x188 <CAN_initialize>
	
	
	#if UART_ENABLE
		printf("Program initialized\n");
	#endif
	sei();
 408:	78 94       	sei
 40a:	08 95       	ret

0000040c <main>:
#include	"servo_driver.h"

void init_all(void);

int main(void){
	init_all();
 40c:	fa df       	rcall	.-12     	; 0x402 <init_all>
	
	
	
	servo_init();
 40e:	a4 df       	rcall	.-184    	; 0x358 <servo_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	2f ef       	ldi	r18, 0xFF	; 255
 412:	83 ed       	ldi	r24, 0xD3	; 211
 414:	90 e3       	ldi	r25, 0x30	; 48
 416:	21 50       	subi	r18, 0x01	; 1
 418:	80 40       	sbci	r24, 0x00	; 0
 41a:	90 40       	sbci	r25, 0x00	; 0
 41c:	e1 f7       	brne	.-8      	; 0x416 <main+0xa>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <main+0x14>
 420:	00 00       	nop
	 while(1){
		if(sendCAN){
			CAN_message_send(data,0);
			data[7]--;
		}
		if(CAN_data_receive()){
 422:	f6 de       	rcall	.-532    	; 0x210 <CAN_data_receive>
 424:	88 23       	and	r24, r24
 426:	e9 f3       	breq	.-6      	; 0x422 <main+0x16>
			servo_set(CAN_message_receive()->data[0]);
 428:	7d de       	rcall	.-774    	; 0x124 <CAN_message_receive>
 42a:	fc 01       	movw	r30, r24
 42c:	83 81       	ldd	r24, Z+3	; 0x03
 42e:	99 27       	eor	r25, r25
 430:	87 fd       	sbrc	r24, 7
 432:	90 95       	com	r25
 434:	9c df       	rcall	.-200    	; 0x36e <servo_set>
 436:	f5 cf       	rjmp	.-22     	; 0x422 <main+0x16>

00000438 <pwm_set_pulse_width>:

	//ICR3 = F_CPU/128/2;
}

void pwm_set_pulse_width(double val){//vel is given in nano-seconds
	OCR3A = (int)(SCALAR_IN_MS * val);
 438:	20 e0       	ldi	r18, 0x00	; 0
 43a:	30 e0       	ldi	r19, 0x00	; 0
 43c:	4a e7       	ldi	r20, 0x7A	; 122
 43e:	51 e4       	ldi	r21, 0x41	; 65
 440:	e5 d1       	rcall	.+970    	; 0x80c <__mulsf3>
 442:	fd d0       	rcall	.+506    	; 0x63e <__fixsfsi>
 444:	70 93 99 00 	sts	0x0099, r23
 448:	60 93 98 00 	sts	0x0098, r22
 44c:	08 95       	ret

0000044e <pwm_set_period>:
}

void pwm_set_period(double period){
	ICR3 = (int)(SCALAR_IN_MS * period);
 44e:	20 e0       	ldi	r18, 0x00	; 0
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	4a e7       	ldi	r20, 0x7A	; 122
 454:	51 e4       	ldi	r21, 0x41	; 65
 456:	da d1       	rcall	.+948    	; 0x80c <__mulsf3>
 458:	f2 d0       	rcall	.+484    	; 0x63e <__fixsfsi>
 45a:	70 93 97 00 	sts	0x0097, r23
 45e:	60 93 96 00 	sts	0x0096, r22
 462:	08 95       	ret

00000464 <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	DDRE |= (1 << PE3);
 464:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	TCCR3A &= ~(1<<WGM30);
 466:	e0 e9       	ldi	r30, 0x90	; 144
 468:	f0 e0       	ldi	r31, 0x00	; 0
 46a:	20 81       	ld	r18, Z
 46c:	2e 7f       	andi	r18, 0xFE	; 254
 46e:	20 83       	st	Z, r18
	TCCR3A |= (1<<WGM31);
 470:	20 81       	ld	r18, Z
 472:	22 60       	ori	r18, 0x02	; 2
 474:	20 83       	st	Z, r18
	TCCR3B |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)	
 476:	a1 e9       	ldi	r26, 0x91	; 145
 478:	b0 e0       	ldi	r27, 0x00	; 0
 47a:	2c 91       	ld	r18, X
 47c:	28 61       	ori	r18, 0x18	; 24
 47e:	2c 93       	st	X, r18
		
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	TCCR3A |= (1<<COM3A1);
 480:	20 81       	ld	r18, Z
 482:	20 68       	ori	r18, 0x80	; 128
 484:	20 83       	st	Z, r18
	TCCR3A &= ~(1<<COM3A0);
 486:	20 81       	ld	r18, Z
 488:	2f 7b       	andi	r18, 0xBF	; 191
 48a:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	TCCR3B |= (1<<CS32) | (1<<CS30);
 48c:	2c 91       	ld	r18, X
 48e:	25 60       	ori	r18, 0x05	; 5
 490:	2c 93       	st	X, r18
	TCCR3B &= ~(1<<CS31);
 492:	2c 91       	ld	r18, X
 494:	2d 7f       	andi	r18, 0xFD	; 253
 496:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.				CHECK THIS DIRK!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	pwm_set_period(period);
 498:	da cf       	rjmp	.-76     	; 0x44e <pwm_set_period>
 49a:	08 95       	ret

0000049c <__subsf3>:
 49c:	50 58       	subi	r21, 0x80	; 128

0000049e <__addsf3>:
 49e:	bb 27       	eor	r27, r27
 4a0:	aa 27       	eor	r26, r26
 4a2:	0e d0       	rcall	.+28     	; 0x4c0 <__addsf3x>
 4a4:	75 c1       	rjmp	.+746    	; 0x790 <__fp_round>
 4a6:	66 d1       	rcall	.+716    	; 0x774 <__fp_pscA>
 4a8:	30 f0       	brcs	.+12     	; 0x4b6 <__addsf3+0x18>
 4aa:	6b d1       	rcall	.+726    	; 0x782 <__fp_pscB>
 4ac:	20 f0       	brcs	.+8      	; 0x4b6 <__addsf3+0x18>
 4ae:	31 f4       	brne	.+12     	; 0x4bc <__addsf3+0x1e>
 4b0:	9f 3f       	cpi	r25, 0xFF	; 255
 4b2:	11 f4       	brne	.+4      	; 0x4b8 <__addsf3+0x1a>
 4b4:	1e f4       	brtc	.+6      	; 0x4bc <__addsf3+0x1e>
 4b6:	5b c1       	rjmp	.+694    	; 0x76e <__fp_nan>
 4b8:	0e f4       	brtc	.+2      	; 0x4bc <__addsf3+0x1e>
 4ba:	e0 95       	com	r30
 4bc:	e7 fb       	bst	r30, 7
 4be:	51 c1       	rjmp	.+674    	; 0x762 <__fp_inf>

000004c0 <__addsf3x>:
 4c0:	e9 2f       	mov	r30, r25
 4c2:	77 d1       	rcall	.+750    	; 0x7b2 <__fp_split3>
 4c4:	80 f3       	brcs	.-32     	; 0x4a6 <__addsf3+0x8>
 4c6:	ba 17       	cp	r27, r26
 4c8:	62 07       	cpc	r22, r18
 4ca:	73 07       	cpc	r23, r19
 4cc:	84 07       	cpc	r24, r20
 4ce:	95 07       	cpc	r25, r21
 4d0:	18 f0       	brcs	.+6      	; 0x4d8 <__addsf3x+0x18>
 4d2:	71 f4       	brne	.+28     	; 0x4f0 <__addsf3x+0x30>
 4d4:	9e f5       	brtc	.+102    	; 0x53c <__addsf3x+0x7c>
 4d6:	8f c1       	rjmp	.+798    	; 0x7f6 <__fp_zero>
 4d8:	0e f4       	brtc	.+2      	; 0x4dc <__addsf3x+0x1c>
 4da:	e0 95       	com	r30
 4dc:	0b 2e       	mov	r0, r27
 4de:	ba 2f       	mov	r27, r26
 4e0:	a0 2d       	mov	r26, r0
 4e2:	0b 01       	movw	r0, r22
 4e4:	b9 01       	movw	r22, r18
 4e6:	90 01       	movw	r18, r0
 4e8:	0c 01       	movw	r0, r24
 4ea:	ca 01       	movw	r24, r20
 4ec:	a0 01       	movw	r20, r0
 4ee:	11 24       	eor	r1, r1
 4f0:	ff 27       	eor	r31, r31
 4f2:	59 1b       	sub	r21, r25
 4f4:	99 f0       	breq	.+38     	; 0x51c <__addsf3x+0x5c>
 4f6:	59 3f       	cpi	r21, 0xF9	; 249
 4f8:	50 f4       	brcc	.+20     	; 0x50e <__addsf3x+0x4e>
 4fa:	50 3e       	cpi	r21, 0xE0	; 224
 4fc:	68 f1       	brcs	.+90     	; 0x558 <__addsf3x+0x98>
 4fe:	1a 16       	cp	r1, r26
 500:	f0 40       	sbci	r31, 0x00	; 0
 502:	a2 2f       	mov	r26, r18
 504:	23 2f       	mov	r18, r19
 506:	34 2f       	mov	r19, r20
 508:	44 27       	eor	r20, r20
 50a:	58 5f       	subi	r21, 0xF8	; 248
 50c:	f3 cf       	rjmp	.-26     	; 0x4f4 <__addsf3x+0x34>
 50e:	46 95       	lsr	r20
 510:	37 95       	ror	r19
 512:	27 95       	ror	r18
 514:	a7 95       	ror	r26
 516:	f0 40       	sbci	r31, 0x00	; 0
 518:	53 95       	inc	r21
 51a:	c9 f7       	brne	.-14     	; 0x50e <__addsf3x+0x4e>
 51c:	7e f4       	brtc	.+30     	; 0x53c <__addsf3x+0x7c>
 51e:	1f 16       	cp	r1, r31
 520:	ba 0b       	sbc	r27, r26
 522:	62 0b       	sbc	r22, r18
 524:	73 0b       	sbc	r23, r19
 526:	84 0b       	sbc	r24, r20
 528:	ba f0       	brmi	.+46     	; 0x558 <__addsf3x+0x98>
 52a:	91 50       	subi	r25, 0x01	; 1
 52c:	a1 f0       	breq	.+40     	; 0x556 <__addsf3x+0x96>
 52e:	ff 0f       	add	r31, r31
 530:	bb 1f       	adc	r27, r27
 532:	66 1f       	adc	r22, r22
 534:	77 1f       	adc	r23, r23
 536:	88 1f       	adc	r24, r24
 538:	c2 f7       	brpl	.-16     	; 0x52a <__addsf3x+0x6a>
 53a:	0e c0       	rjmp	.+28     	; 0x558 <__addsf3x+0x98>
 53c:	ba 0f       	add	r27, r26
 53e:	62 1f       	adc	r22, r18
 540:	73 1f       	adc	r23, r19
 542:	84 1f       	adc	r24, r20
 544:	48 f4       	brcc	.+18     	; 0x558 <__addsf3x+0x98>
 546:	87 95       	ror	r24
 548:	77 95       	ror	r23
 54a:	67 95       	ror	r22
 54c:	b7 95       	ror	r27
 54e:	f7 95       	ror	r31
 550:	9e 3f       	cpi	r25, 0xFE	; 254
 552:	08 f0       	brcs	.+2      	; 0x556 <__addsf3x+0x96>
 554:	b3 cf       	rjmp	.-154    	; 0x4bc <__addsf3+0x1e>
 556:	93 95       	inc	r25
 558:	88 0f       	add	r24, r24
 55a:	08 f0       	brcs	.+2      	; 0x55e <__addsf3x+0x9e>
 55c:	99 27       	eor	r25, r25
 55e:	ee 0f       	add	r30, r30
 560:	97 95       	ror	r25
 562:	87 95       	ror	r24
 564:	08 95       	ret

00000566 <__cmpsf2>:
 566:	d9 d0       	rcall	.+434    	; 0x71a <__fp_cmp>
 568:	08 f4       	brcc	.+2      	; 0x56c <__cmpsf2+0x6>
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	08 95       	ret

0000056e <__divsf3>:
 56e:	0c d0       	rcall	.+24     	; 0x588 <__divsf3x>
 570:	0f c1       	rjmp	.+542    	; 0x790 <__fp_round>
 572:	07 d1       	rcall	.+526    	; 0x782 <__fp_pscB>
 574:	40 f0       	brcs	.+16     	; 0x586 <__divsf3+0x18>
 576:	fe d0       	rcall	.+508    	; 0x774 <__fp_pscA>
 578:	30 f0       	brcs	.+12     	; 0x586 <__divsf3+0x18>
 57a:	21 f4       	brne	.+8      	; 0x584 <__divsf3+0x16>
 57c:	5f 3f       	cpi	r21, 0xFF	; 255
 57e:	19 f0       	breq	.+6      	; 0x586 <__divsf3+0x18>
 580:	f0 c0       	rjmp	.+480    	; 0x762 <__fp_inf>
 582:	51 11       	cpse	r21, r1
 584:	39 c1       	rjmp	.+626    	; 0x7f8 <__fp_szero>
 586:	f3 c0       	rjmp	.+486    	; 0x76e <__fp_nan>

00000588 <__divsf3x>:
 588:	14 d1       	rcall	.+552    	; 0x7b2 <__fp_split3>
 58a:	98 f3       	brcs	.-26     	; 0x572 <__divsf3+0x4>

0000058c <__divsf3_pse>:
 58c:	99 23       	and	r25, r25
 58e:	c9 f3       	breq	.-14     	; 0x582 <__divsf3+0x14>
 590:	55 23       	and	r21, r21
 592:	b1 f3       	breq	.-20     	; 0x580 <__divsf3+0x12>
 594:	95 1b       	sub	r25, r21
 596:	55 0b       	sbc	r21, r21
 598:	bb 27       	eor	r27, r27
 59a:	aa 27       	eor	r26, r26
 59c:	62 17       	cp	r22, r18
 59e:	73 07       	cpc	r23, r19
 5a0:	84 07       	cpc	r24, r20
 5a2:	38 f0       	brcs	.+14     	; 0x5b2 <__divsf3_pse+0x26>
 5a4:	9f 5f       	subi	r25, 0xFF	; 255
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	22 0f       	add	r18, r18
 5aa:	33 1f       	adc	r19, r19
 5ac:	44 1f       	adc	r20, r20
 5ae:	aa 1f       	adc	r26, r26
 5b0:	a9 f3       	breq	.-22     	; 0x59c <__divsf3_pse+0x10>
 5b2:	33 d0       	rcall	.+102    	; 0x61a <__divsf3_pse+0x8e>
 5b4:	0e 2e       	mov	r0, r30
 5b6:	3a f0       	brmi	.+14     	; 0x5c6 <__divsf3_pse+0x3a>
 5b8:	e0 e8       	ldi	r30, 0x80	; 128
 5ba:	30 d0       	rcall	.+96     	; 0x61c <__divsf3_pse+0x90>
 5bc:	91 50       	subi	r25, 0x01	; 1
 5be:	50 40       	sbci	r21, 0x00	; 0
 5c0:	e6 95       	lsr	r30
 5c2:	00 1c       	adc	r0, r0
 5c4:	ca f7       	brpl	.-14     	; 0x5b8 <__divsf3_pse+0x2c>
 5c6:	29 d0       	rcall	.+82     	; 0x61a <__divsf3_pse+0x8e>
 5c8:	fe 2f       	mov	r31, r30
 5ca:	27 d0       	rcall	.+78     	; 0x61a <__divsf3_pse+0x8e>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	88 1f       	adc	r24, r24
 5d2:	bb 1f       	adc	r27, r27
 5d4:	26 17       	cp	r18, r22
 5d6:	37 07       	cpc	r19, r23
 5d8:	48 07       	cpc	r20, r24
 5da:	ab 07       	cpc	r26, r27
 5dc:	b0 e8       	ldi	r27, 0x80	; 128
 5de:	09 f0       	breq	.+2      	; 0x5e2 <__divsf3_pse+0x56>
 5e0:	bb 0b       	sbc	r27, r27
 5e2:	80 2d       	mov	r24, r0
 5e4:	bf 01       	movw	r22, r30
 5e6:	ff 27       	eor	r31, r31
 5e8:	93 58       	subi	r25, 0x83	; 131
 5ea:	5f 4f       	sbci	r21, 0xFF	; 255
 5ec:	2a f0       	brmi	.+10     	; 0x5f8 <__divsf3_pse+0x6c>
 5ee:	9e 3f       	cpi	r25, 0xFE	; 254
 5f0:	51 05       	cpc	r21, r1
 5f2:	68 f0       	brcs	.+26     	; 0x60e <__divsf3_pse+0x82>
 5f4:	b6 c0       	rjmp	.+364    	; 0x762 <__fp_inf>
 5f6:	00 c1       	rjmp	.+512    	; 0x7f8 <__fp_szero>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	ec f3       	brlt	.-6      	; 0x5f6 <__divsf3_pse+0x6a>
 5fc:	98 3e       	cpi	r25, 0xE8	; 232
 5fe:	dc f3       	brlt	.-10     	; 0x5f6 <__divsf3_pse+0x6a>
 600:	86 95       	lsr	r24
 602:	77 95       	ror	r23
 604:	67 95       	ror	r22
 606:	b7 95       	ror	r27
 608:	f7 95       	ror	r31
 60a:	9f 5f       	subi	r25, 0xFF	; 255
 60c:	c9 f7       	brne	.-14     	; 0x600 <__divsf3_pse+0x74>
 60e:	88 0f       	add	r24, r24
 610:	91 1d       	adc	r25, r1
 612:	96 95       	lsr	r25
 614:	87 95       	ror	r24
 616:	97 f9       	bld	r25, 7
 618:	08 95       	ret
 61a:	e1 e0       	ldi	r30, 0x01	; 1
 61c:	66 0f       	add	r22, r22
 61e:	77 1f       	adc	r23, r23
 620:	88 1f       	adc	r24, r24
 622:	bb 1f       	adc	r27, r27
 624:	62 17       	cp	r22, r18
 626:	73 07       	cpc	r23, r19
 628:	84 07       	cpc	r24, r20
 62a:	ba 07       	cpc	r27, r26
 62c:	20 f0       	brcs	.+8      	; 0x636 <__divsf3_pse+0xaa>
 62e:	62 1b       	sub	r22, r18
 630:	73 0b       	sbc	r23, r19
 632:	84 0b       	sbc	r24, r20
 634:	ba 0b       	sbc	r27, r26
 636:	ee 1f       	adc	r30, r30
 638:	88 f7       	brcc	.-30     	; 0x61c <__divsf3_pse+0x90>
 63a:	e0 95       	com	r30
 63c:	08 95       	ret

0000063e <__fixsfsi>:
 63e:	04 d0       	rcall	.+8      	; 0x648 <__fixunssfsi>
 640:	68 94       	set
 642:	b1 11       	cpse	r27, r1
 644:	d9 c0       	rjmp	.+434    	; 0x7f8 <__fp_szero>
 646:	08 95       	ret

00000648 <__fixunssfsi>:
 648:	bc d0       	rcall	.+376    	; 0x7c2 <__fp_splitA>
 64a:	88 f0       	brcs	.+34     	; 0x66e <__fixunssfsi+0x26>
 64c:	9f 57       	subi	r25, 0x7F	; 127
 64e:	90 f0       	brcs	.+36     	; 0x674 <__fixunssfsi+0x2c>
 650:	b9 2f       	mov	r27, r25
 652:	99 27       	eor	r25, r25
 654:	b7 51       	subi	r27, 0x17	; 23
 656:	a0 f0       	brcs	.+40     	; 0x680 <__fixunssfsi+0x38>
 658:	d1 f0       	breq	.+52     	; 0x68e <__fixunssfsi+0x46>
 65a:	66 0f       	add	r22, r22
 65c:	77 1f       	adc	r23, r23
 65e:	88 1f       	adc	r24, r24
 660:	99 1f       	adc	r25, r25
 662:	1a f0       	brmi	.+6      	; 0x66a <__fixunssfsi+0x22>
 664:	ba 95       	dec	r27
 666:	c9 f7       	brne	.-14     	; 0x65a <__fixunssfsi+0x12>
 668:	12 c0       	rjmp	.+36     	; 0x68e <__fixunssfsi+0x46>
 66a:	b1 30       	cpi	r27, 0x01	; 1
 66c:	81 f0       	breq	.+32     	; 0x68e <__fixunssfsi+0x46>
 66e:	c3 d0       	rcall	.+390    	; 0x7f6 <__fp_zero>
 670:	b1 e0       	ldi	r27, 0x01	; 1
 672:	08 95       	ret
 674:	c0 c0       	rjmp	.+384    	; 0x7f6 <__fp_zero>
 676:	67 2f       	mov	r22, r23
 678:	78 2f       	mov	r23, r24
 67a:	88 27       	eor	r24, r24
 67c:	b8 5f       	subi	r27, 0xF8	; 248
 67e:	39 f0       	breq	.+14     	; 0x68e <__fixunssfsi+0x46>
 680:	b9 3f       	cpi	r27, 0xF9	; 249
 682:	cc f3       	brlt	.-14     	; 0x676 <__fixunssfsi+0x2e>
 684:	86 95       	lsr	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b3 95       	inc	r27
 68c:	d9 f7       	brne	.-10     	; 0x684 <__fixunssfsi+0x3c>
 68e:	3e f4       	brtc	.+14     	; 0x69e <__fixunssfsi+0x56>
 690:	90 95       	com	r25
 692:	80 95       	com	r24
 694:	70 95       	com	r23
 696:	61 95       	neg	r22
 698:	7f 4f       	sbci	r23, 0xFF	; 255
 69a:	8f 4f       	sbci	r24, 0xFF	; 255
 69c:	9f 4f       	sbci	r25, 0xFF	; 255
 69e:	08 95       	ret

000006a0 <__floatunsisf>:
 6a0:	e8 94       	clt
 6a2:	09 c0       	rjmp	.+18     	; 0x6b6 <__floatsisf+0x12>

000006a4 <__floatsisf>:
 6a4:	97 fb       	bst	r25, 7
 6a6:	3e f4       	brtc	.+14     	; 0x6b6 <__floatsisf+0x12>
 6a8:	90 95       	com	r25
 6aa:	80 95       	com	r24
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255
 6b2:	8f 4f       	sbci	r24, 0xFF	; 255
 6b4:	9f 4f       	sbci	r25, 0xFF	; 255
 6b6:	99 23       	and	r25, r25
 6b8:	a9 f0       	breq	.+42     	; 0x6e4 <__floatsisf+0x40>
 6ba:	f9 2f       	mov	r31, r25
 6bc:	96 e9       	ldi	r25, 0x96	; 150
 6be:	bb 27       	eor	r27, r27
 6c0:	93 95       	inc	r25
 6c2:	f6 95       	lsr	r31
 6c4:	87 95       	ror	r24
 6c6:	77 95       	ror	r23
 6c8:	67 95       	ror	r22
 6ca:	b7 95       	ror	r27
 6cc:	f1 11       	cpse	r31, r1
 6ce:	f8 cf       	rjmp	.-16     	; 0x6c0 <__floatsisf+0x1c>
 6d0:	fa f4       	brpl	.+62     	; 0x710 <__floatsisf+0x6c>
 6d2:	bb 0f       	add	r27, r27
 6d4:	11 f4       	brne	.+4      	; 0x6da <__floatsisf+0x36>
 6d6:	60 ff       	sbrs	r22, 0
 6d8:	1b c0       	rjmp	.+54     	; 0x710 <__floatsisf+0x6c>
 6da:	6f 5f       	subi	r22, 0xFF	; 255
 6dc:	7f 4f       	sbci	r23, 0xFF	; 255
 6de:	8f 4f       	sbci	r24, 0xFF	; 255
 6e0:	9f 4f       	sbci	r25, 0xFF	; 255
 6e2:	16 c0       	rjmp	.+44     	; 0x710 <__floatsisf+0x6c>
 6e4:	88 23       	and	r24, r24
 6e6:	11 f0       	breq	.+4      	; 0x6ec <__floatsisf+0x48>
 6e8:	96 e9       	ldi	r25, 0x96	; 150
 6ea:	11 c0       	rjmp	.+34     	; 0x70e <__floatsisf+0x6a>
 6ec:	77 23       	and	r23, r23
 6ee:	21 f0       	breq	.+8      	; 0x6f8 <__floatsisf+0x54>
 6f0:	9e e8       	ldi	r25, 0x8E	; 142
 6f2:	87 2f       	mov	r24, r23
 6f4:	76 2f       	mov	r23, r22
 6f6:	05 c0       	rjmp	.+10     	; 0x702 <__floatsisf+0x5e>
 6f8:	66 23       	and	r22, r22
 6fa:	71 f0       	breq	.+28     	; 0x718 <__floatsisf+0x74>
 6fc:	96 e8       	ldi	r25, 0x86	; 134
 6fe:	86 2f       	mov	r24, r22
 700:	70 e0       	ldi	r23, 0x00	; 0
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	2a f0       	brmi	.+10     	; 0x710 <__floatsisf+0x6c>
 706:	9a 95       	dec	r25
 708:	66 0f       	add	r22, r22
 70a:	77 1f       	adc	r23, r23
 70c:	88 1f       	adc	r24, r24
 70e:	da f7       	brpl	.-10     	; 0x706 <__floatsisf+0x62>
 710:	88 0f       	add	r24, r24
 712:	96 95       	lsr	r25
 714:	87 95       	ror	r24
 716:	97 f9       	bld	r25, 7
 718:	08 95       	ret

0000071a <__fp_cmp>:
 71a:	99 0f       	add	r25, r25
 71c:	00 08       	sbc	r0, r0
 71e:	55 0f       	add	r21, r21
 720:	aa 0b       	sbc	r26, r26
 722:	e0 e8       	ldi	r30, 0x80	; 128
 724:	fe ef       	ldi	r31, 0xFE	; 254
 726:	16 16       	cp	r1, r22
 728:	17 06       	cpc	r1, r23
 72a:	e8 07       	cpc	r30, r24
 72c:	f9 07       	cpc	r31, r25
 72e:	c0 f0       	brcs	.+48     	; 0x760 <__fp_cmp+0x46>
 730:	12 16       	cp	r1, r18
 732:	13 06       	cpc	r1, r19
 734:	e4 07       	cpc	r30, r20
 736:	f5 07       	cpc	r31, r21
 738:	98 f0       	brcs	.+38     	; 0x760 <__fp_cmp+0x46>
 73a:	62 1b       	sub	r22, r18
 73c:	73 0b       	sbc	r23, r19
 73e:	84 0b       	sbc	r24, r20
 740:	95 0b       	sbc	r25, r21
 742:	39 f4       	brne	.+14     	; 0x752 <__fp_cmp+0x38>
 744:	0a 26       	eor	r0, r26
 746:	61 f0       	breq	.+24     	; 0x760 <__fp_cmp+0x46>
 748:	23 2b       	or	r18, r19
 74a:	24 2b       	or	r18, r20
 74c:	25 2b       	or	r18, r21
 74e:	21 f4       	brne	.+8      	; 0x758 <__fp_cmp+0x3e>
 750:	08 95       	ret
 752:	0a 26       	eor	r0, r26
 754:	09 f4       	brne	.+2      	; 0x758 <__fp_cmp+0x3e>
 756:	a1 40       	sbci	r26, 0x01	; 1
 758:	a6 95       	lsr	r26
 75a:	8f ef       	ldi	r24, 0xFF	; 255
 75c:	81 1d       	adc	r24, r1
 75e:	81 1d       	adc	r24, r1
 760:	08 95       	ret

00000762 <__fp_inf>:
 762:	97 f9       	bld	r25, 7
 764:	9f 67       	ori	r25, 0x7F	; 127
 766:	80 e8       	ldi	r24, 0x80	; 128
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	60 e0       	ldi	r22, 0x00	; 0
 76c:	08 95       	ret

0000076e <__fp_nan>:
 76e:	9f ef       	ldi	r25, 0xFF	; 255
 770:	80 ec       	ldi	r24, 0xC0	; 192
 772:	08 95       	ret

00000774 <__fp_pscA>:
 774:	00 24       	eor	r0, r0
 776:	0a 94       	dec	r0
 778:	16 16       	cp	r1, r22
 77a:	17 06       	cpc	r1, r23
 77c:	18 06       	cpc	r1, r24
 77e:	09 06       	cpc	r0, r25
 780:	08 95       	ret

00000782 <__fp_pscB>:
 782:	00 24       	eor	r0, r0
 784:	0a 94       	dec	r0
 786:	12 16       	cp	r1, r18
 788:	13 06       	cpc	r1, r19
 78a:	14 06       	cpc	r1, r20
 78c:	05 06       	cpc	r0, r21
 78e:	08 95       	ret

00000790 <__fp_round>:
 790:	09 2e       	mov	r0, r25
 792:	03 94       	inc	r0
 794:	00 0c       	add	r0, r0
 796:	11 f4       	brne	.+4      	; 0x79c <__fp_round+0xc>
 798:	88 23       	and	r24, r24
 79a:	52 f0       	brmi	.+20     	; 0x7b0 <__fp_round+0x20>
 79c:	bb 0f       	add	r27, r27
 79e:	40 f4       	brcc	.+16     	; 0x7b0 <__fp_round+0x20>
 7a0:	bf 2b       	or	r27, r31
 7a2:	11 f4       	brne	.+4      	; 0x7a8 <__fp_round+0x18>
 7a4:	60 ff       	sbrs	r22, 0
 7a6:	04 c0       	rjmp	.+8      	; 0x7b0 <__fp_round+0x20>
 7a8:	6f 5f       	subi	r22, 0xFF	; 255
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255
 7ac:	8f 4f       	sbci	r24, 0xFF	; 255
 7ae:	9f 4f       	sbci	r25, 0xFF	; 255
 7b0:	08 95       	ret

000007b2 <__fp_split3>:
 7b2:	57 fd       	sbrc	r21, 7
 7b4:	90 58       	subi	r25, 0x80	; 128
 7b6:	44 0f       	add	r20, r20
 7b8:	55 1f       	adc	r21, r21
 7ba:	59 f0       	breq	.+22     	; 0x7d2 <__fp_splitA+0x10>
 7bc:	5f 3f       	cpi	r21, 0xFF	; 255
 7be:	71 f0       	breq	.+28     	; 0x7dc <__fp_splitA+0x1a>
 7c0:	47 95       	ror	r20

000007c2 <__fp_splitA>:
 7c2:	88 0f       	add	r24, r24
 7c4:	97 fb       	bst	r25, 7
 7c6:	99 1f       	adc	r25, r25
 7c8:	61 f0       	breq	.+24     	; 0x7e2 <__fp_splitA+0x20>
 7ca:	9f 3f       	cpi	r25, 0xFF	; 255
 7cc:	79 f0       	breq	.+30     	; 0x7ec <__fp_splitA+0x2a>
 7ce:	87 95       	ror	r24
 7d0:	08 95       	ret
 7d2:	12 16       	cp	r1, r18
 7d4:	13 06       	cpc	r1, r19
 7d6:	14 06       	cpc	r1, r20
 7d8:	55 1f       	adc	r21, r21
 7da:	f2 cf       	rjmp	.-28     	; 0x7c0 <__fp_split3+0xe>
 7dc:	46 95       	lsr	r20
 7de:	f1 df       	rcall	.-30     	; 0x7c2 <__fp_splitA>
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <__fp_splitA+0x30>
 7e2:	16 16       	cp	r1, r22
 7e4:	17 06       	cpc	r1, r23
 7e6:	18 06       	cpc	r1, r24
 7e8:	99 1f       	adc	r25, r25
 7ea:	f1 cf       	rjmp	.-30     	; 0x7ce <__fp_splitA+0xc>
 7ec:	86 95       	lsr	r24
 7ee:	71 05       	cpc	r23, r1
 7f0:	61 05       	cpc	r22, r1
 7f2:	08 94       	sec
 7f4:	08 95       	ret

000007f6 <__fp_zero>:
 7f6:	e8 94       	clt

000007f8 <__fp_szero>:
 7f8:	bb 27       	eor	r27, r27
 7fa:	66 27       	eor	r22, r22
 7fc:	77 27       	eor	r23, r23
 7fe:	cb 01       	movw	r24, r22
 800:	97 f9       	bld	r25, 7
 802:	08 95       	ret

00000804 <__gesf2>:
 804:	8a df       	rcall	.-236    	; 0x71a <__fp_cmp>
 806:	08 f4       	brcc	.+2      	; 0x80a <__gesf2+0x6>
 808:	8f ef       	ldi	r24, 0xFF	; 255
 80a:	08 95       	ret

0000080c <__mulsf3>:
 80c:	0b d0       	rcall	.+22     	; 0x824 <__mulsf3x>
 80e:	c0 cf       	rjmp	.-128    	; 0x790 <__fp_round>
 810:	b1 df       	rcall	.-158    	; 0x774 <__fp_pscA>
 812:	28 f0       	brcs	.+10     	; 0x81e <__mulsf3+0x12>
 814:	b6 df       	rcall	.-148    	; 0x782 <__fp_pscB>
 816:	18 f0       	brcs	.+6      	; 0x81e <__mulsf3+0x12>
 818:	95 23       	and	r25, r21
 81a:	09 f0       	breq	.+2      	; 0x81e <__mulsf3+0x12>
 81c:	a2 cf       	rjmp	.-188    	; 0x762 <__fp_inf>
 81e:	a7 cf       	rjmp	.-178    	; 0x76e <__fp_nan>
 820:	11 24       	eor	r1, r1
 822:	ea cf       	rjmp	.-44     	; 0x7f8 <__fp_szero>

00000824 <__mulsf3x>:
 824:	c6 df       	rcall	.-116    	; 0x7b2 <__fp_split3>
 826:	a0 f3       	brcs	.-24     	; 0x810 <__mulsf3+0x4>

00000828 <__mulsf3_pse>:
 828:	95 9f       	mul	r25, r21
 82a:	d1 f3       	breq	.-12     	; 0x820 <__mulsf3+0x14>
 82c:	95 0f       	add	r25, r21
 82e:	50 e0       	ldi	r21, 0x00	; 0
 830:	55 1f       	adc	r21, r21
 832:	62 9f       	mul	r22, r18
 834:	f0 01       	movw	r30, r0
 836:	72 9f       	mul	r23, r18
 838:	bb 27       	eor	r27, r27
 83a:	f0 0d       	add	r31, r0
 83c:	b1 1d       	adc	r27, r1
 83e:	63 9f       	mul	r22, r19
 840:	aa 27       	eor	r26, r26
 842:	f0 0d       	add	r31, r0
 844:	b1 1d       	adc	r27, r1
 846:	aa 1f       	adc	r26, r26
 848:	64 9f       	mul	r22, r20
 84a:	66 27       	eor	r22, r22
 84c:	b0 0d       	add	r27, r0
 84e:	a1 1d       	adc	r26, r1
 850:	66 1f       	adc	r22, r22
 852:	82 9f       	mul	r24, r18
 854:	22 27       	eor	r18, r18
 856:	b0 0d       	add	r27, r0
 858:	a1 1d       	adc	r26, r1
 85a:	62 1f       	adc	r22, r18
 85c:	73 9f       	mul	r23, r19
 85e:	b0 0d       	add	r27, r0
 860:	a1 1d       	adc	r26, r1
 862:	62 1f       	adc	r22, r18
 864:	83 9f       	mul	r24, r19
 866:	a0 0d       	add	r26, r0
 868:	61 1d       	adc	r22, r1
 86a:	22 1f       	adc	r18, r18
 86c:	74 9f       	mul	r23, r20
 86e:	33 27       	eor	r19, r19
 870:	a0 0d       	add	r26, r0
 872:	61 1d       	adc	r22, r1
 874:	23 1f       	adc	r18, r19
 876:	84 9f       	mul	r24, r20
 878:	60 0d       	add	r22, r0
 87a:	21 1d       	adc	r18, r1
 87c:	82 2f       	mov	r24, r18
 87e:	76 2f       	mov	r23, r22
 880:	6a 2f       	mov	r22, r26
 882:	11 24       	eor	r1, r1
 884:	9f 57       	subi	r25, 0x7F	; 127
 886:	50 40       	sbci	r21, 0x00	; 0
 888:	8a f0       	brmi	.+34     	; 0x8ac <__mulsf3_pse+0x84>
 88a:	e1 f0       	breq	.+56     	; 0x8c4 <__mulsf3_pse+0x9c>
 88c:	88 23       	and	r24, r24
 88e:	4a f0       	brmi	.+18     	; 0x8a2 <__mulsf3_pse+0x7a>
 890:	ee 0f       	add	r30, r30
 892:	ff 1f       	adc	r31, r31
 894:	bb 1f       	adc	r27, r27
 896:	66 1f       	adc	r22, r22
 898:	77 1f       	adc	r23, r23
 89a:	88 1f       	adc	r24, r24
 89c:	91 50       	subi	r25, 0x01	; 1
 89e:	50 40       	sbci	r21, 0x00	; 0
 8a0:	a9 f7       	brne	.-22     	; 0x88c <__mulsf3_pse+0x64>
 8a2:	9e 3f       	cpi	r25, 0xFE	; 254
 8a4:	51 05       	cpc	r21, r1
 8a6:	70 f0       	brcs	.+28     	; 0x8c4 <__mulsf3_pse+0x9c>
 8a8:	5c cf       	rjmp	.-328    	; 0x762 <__fp_inf>
 8aa:	a6 cf       	rjmp	.-180    	; 0x7f8 <__fp_szero>
 8ac:	5f 3f       	cpi	r21, 0xFF	; 255
 8ae:	ec f3       	brlt	.-6      	; 0x8aa <__mulsf3_pse+0x82>
 8b0:	98 3e       	cpi	r25, 0xE8	; 232
 8b2:	dc f3       	brlt	.-10     	; 0x8aa <__mulsf3_pse+0x82>
 8b4:	86 95       	lsr	r24
 8b6:	77 95       	ror	r23
 8b8:	67 95       	ror	r22
 8ba:	b7 95       	ror	r27
 8bc:	f7 95       	ror	r31
 8be:	e7 95       	ror	r30
 8c0:	9f 5f       	subi	r25, 0xFF	; 255
 8c2:	c1 f7       	brne	.-16     	; 0x8b4 <__mulsf3_pse+0x8c>
 8c4:	fe 2b       	or	r31, r30
 8c6:	88 0f       	add	r24, r24
 8c8:	91 1d       	adc	r25, r1
 8ca:	96 95       	lsr	r25
 8cc:	87 95       	ror	r24
 8ce:	97 f9       	bld	r25, 7
 8d0:	08 95       	ret

000008d2 <fdevopen>:
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	cf 93       	push	r28
 8d8:	df 93       	push	r29
 8da:	ec 01       	movw	r28, r24
 8dc:	8b 01       	movw	r16, r22
 8de:	00 97       	sbiw	r24, 0x00	; 0
 8e0:	31 f4       	brne	.+12     	; 0x8ee <fdevopen+0x1c>
 8e2:	61 15       	cp	r22, r1
 8e4:	71 05       	cpc	r23, r1
 8e6:	19 f4       	brne	.+6      	; 0x8ee <fdevopen+0x1c>
 8e8:	80 e0       	ldi	r24, 0x00	; 0
 8ea:	90 e0       	ldi	r25, 0x00	; 0
 8ec:	37 c0       	rjmp	.+110    	; 0x95c <fdevopen+0x8a>
 8ee:	6e e0       	ldi	r22, 0x0E	; 14
 8f0:	70 e0       	ldi	r23, 0x00	; 0
 8f2:	81 e0       	ldi	r24, 0x01	; 1
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	37 d0       	rcall	.+110    	; 0x966 <calloc>
 8f8:	fc 01       	movw	r30, r24
 8fa:	00 97       	sbiw	r24, 0x00	; 0
 8fc:	a9 f3       	breq	.-22     	; 0x8e8 <fdevopen+0x16>
 8fe:	80 e8       	ldi	r24, 0x80	; 128
 900:	83 83       	std	Z+3, r24	; 0x03
 902:	01 15       	cp	r16, r1
 904:	11 05       	cpc	r17, r1
 906:	71 f0       	breq	.+28     	; 0x924 <fdevopen+0x52>
 908:	13 87       	std	Z+11, r17	; 0x0b
 90a:	02 87       	std	Z+10, r16	; 0x0a
 90c:	81 e8       	ldi	r24, 0x81	; 129
 90e:	83 83       	std	Z+3, r24	; 0x03
 910:	80 91 1d 02 	lds	r24, 0x021D
 914:	90 91 1e 02 	lds	r25, 0x021E
 918:	89 2b       	or	r24, r25
 91a:	21 f4       	brne	.+8      	; 0x924 <fdevopen+0x52>
 91c:	f0 93 1e 02 	sts	0x021E, r31
 920:	e0 93 1d 02 	sts	0x021D, r30
 924:	20 97       	sbiw	r28, 0x00	; 0
 926:	c9 f0       	breq	.+50     	; 0x95a <fdevopen+0x88>
 928:	d1 87       	std	Z+9, r29	; 0x09
 92a:	c0 87       	std	Z+8, r28	; 0x08
 92c:	83 81       	ldd	r24, Z+3	; 0x03
 92e:	82 60       	ori	r24, 0x02	; 2
 930:	83 83       	std	Z+3, r24	; 0x03
 932:	80 91 1f 02 	lds	r24, 0x021F
 936:	90 91 20 02 	lds	r25, 0x0220
 93a:	89 2b       	or	r24, r25
 93c:	71 f4       	brne	.+28     	; 0x95a <fdevopen+0x88>
 93e:	f0 93 20 02 	sts	0x0220, r31
 942:	e0 93 1f 02 	sts	0x021F, r30
 946:	80 91 21 02 	lds	r24, 0x0221
 94a:	90 91 22 02 	lds	r25, 0x0222
 94e:	89 2b       	or	r24, r25
 950:	21 f4       	brne	.+8      	; 0x95a <fdevopen+0x88>
 952:	f0 93 22 02 	sts	0x0222, r31
 956:	e0 93 21 02 	sts	0x0221, r30
 95a:	cf 01       	movw	r24, r30
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	1f 91       	pop	r17
 962:	0f 91       	pop	r16
 964:	08 95       	ret

00000966 <calloc>:
 966:	0f 93       	push	r16
 968:	1f 93       	push	r17
 96a:	cf 93       	push	r28
 96c:	df 93       	push	r29
 96e:	86 9f       	mul	r24, r22
 970:	80 01       	movw	r16, r0
 972:	87 9f       	mul	r24, r23
 974:	10 0d       	add	r17, r0
 976:	96 9f       	mul	r25, r22
 978:	10 0d       	add	r17, r0
 97a:	11 24       	eor	r1, r1
 97c:	c8 01       	movw	r24, r16
 97e:	0d d0       	rcall	.+26     	; 0x99a <malloc>
 980:	ec 01       	movw	r28, r24
 982:	00 97       	sbiw	r24, 0x00	; 0
 984:	21 f0       	breq	.+8      	; 0x98e <calloc+0x28>
 986:	a8 01       	movw	r20, r16
 988:	60 e0       	ldi	r22, 0x00	; 0
 98a:	70 e0       	ldi	r23, 0x00	; 0
 98c:	2d d1       	rcall	.+602    	; 0xbe8 <memset>
 98e:	ce 01       	movw	r24, r28
 990:	df 91       	pop	r29
 992:	cf 91       	pop	r28
 994:	1f 91       	pop	r17
 996:	0f 91       	pop	r16
 998:	08 95       	ret

0000099a <malloc>:
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	82 30       	cpi	r24, 0x02	; 2
 9a0:	91 05       	cpc	r25, r1
 9a2:	10 f4       	brcc	.+4      	; 0x9a8 <malloc+0xe>
 9a4:	82 e0       	ldi	r24, 0x02	; 2
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	e0 91 25 02 	lds	r30, 0x0225
 9ac:	f0 91 26 02 	lds	r31, 0x0226
 9b0:	20 e0       	ldi	r18, 0x00	; 0
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	a0 e0       	ldi	r26, 0x00	; 0
 9b6:	b0 e0       	ldi	r27, 0x00	; 0
 9b8:	30 97       	sbiw	r30, 0x00	; 0
 9ba:	39 f1       	breq	.+78     	; 0xa0a <malloc+0x70>
 9bc:	40 81       	ld	r20, Z
 9be:	51 81       	ldd	r21, Z+1	; 0x01
 9c0:	48 17       	cp	r20, r24
 9c2:	59 07       	cpc	r21, r25
 9c4:	b8 f0       	brcs	.+46     	; 0x9f4 <malloc+0x5a>
 9c6:	48 17       	cp	r20, r24
 9c8:	59 07       	cpc	r21, r25
 9ca:	71 f4       	brne	.+28     	; 0x9e8 <malloc+0x4e>
 9cc:	82 81       	ldd	r24, Z+2	; 0x02
 9ce:	93 81       	ldd	r25, Z+3	; 0x03
 9d0:	10 97       	sbiw	r26, 0x00	; 0
 9d2:	29 f0       	breq	.+10     	; 0x9de <malloc+0x44>
 9d4:	13 96       	adiw	r26, 0x03	; 3
 9d6:	9c 93       	st	X, r25
 9d8:	8e 93       	st	-X, r24
 9da:	12 97       	sbiw	r26, 0x02	; 2
 9dc:	2c c0       	rjmp	.+88     	; 0xa36 <malloc+0x9c>
 9de:	90 93 26 02 	sts	0x0226, r25
 9e2:	80 93 25 02 	sts	0x0225, r24
 9e6:	27 c0       	rjmp	.+78     	; 0xa36 <malloc+0x9c>
 9e8:	21 15       	cp	r18, r1
 9ea:	31 05       	cpc	r19, r1
 9ec:	31 f0       	breq	.+12     	; 0x9fa <malloc+0x60>
 9ee:	42 17       	cp	r20, r18
 9f0:	53 07       	cpc	r21, r19
 9f2:	18 f0       	brcs	.+6      	; 0x9fa <malloc+0x60>
 9f4:	a9 01       	movw	r20, r18
 9f6:	db 01       	movw	r26, r22
 9f8:	01 c0       	rjmp	.+2      	; 0x9fc <malloc+0x62>
 9fa:	ef 01       	movw	r28, r30
 9fc:	9a 01       	movw	r18, r20
 9fe:	bd 01       	movw	r22, r26
 a00:	df 01       	movw	r26, r30
 a02:	02 80       	ldd	r0, Z+2	; 0x02
 a04:	f3 81       	ldd	r31, Z+3	; 0x03
 a06:	e0 2d       	mov	r30, r0
 a08:	d7 cf       	rjmp	.-82     	; 0x9b8 <malloc+0x1e>
 a0a:	21 15       	cp	r18, r1
 a0c:	31 05       	cpc	r19, r1
 a0e:	f9 f0       	breq	.+62     	; 0xa4e <malloc+0xb4>
 a10:	28 1b       	sub	r18, r24
 a12:	39 0b       	sbc	r19, r25
 a14:	24 30       	cpi	r18, 0x04	; 4
 a16:	31 05       	cpc	r19, r1
 a18:	80 f4       	brcc	.+32     	; 0xa3a <malloc+0xa0>
 a1a:	8a 81       	ldd	r24, Y+2	; 0x02
 a1c:	9b 81       	ldd	r25, Y+3	; 0x03
 a1e:	61 15       	cp	r22, r1
 a20:	71 05       	cpc	r23, r1
 a22:	21 f0       	breq	.+8      	; 0xa2c <malloc+0x92>
 a24:	fb 01       	movw	r30, r22
 a26:	93 83       	std	Z+3, r25	; 0x03
 a28:	82 83       	std	Z+2, r24	; 0x02
 a2a:	04 c0       	rjmp	.+8      	; 0xa34 <malloc+0x9a>
 a2c:	90 93 26 02 	sts	0x0226, r25
 a30:	80 93 25 02 	sts	0x0225, r24
 a34:	fe 01       	movw	r30, r28
 a36:	32 96       	adiw	r30, 0x02	; 2
 a38:	44 c0       	rjmp	.+136    	; 0xac2 <malloc+0x128>
 a3a:	fe 01       	movw	r30, r28
 a3c:	e2 0f       	add	r30, r18
 a3e:	f3 1f       	adc	r31, r19
 a40:	81 93       	st	Z+, r24
 a42:	91 93       	st	Z+, r25
 a44:	22 50       	subi	r18, 0x02	; 2
 a46:	31 09       	sbc	r19, r1
 a48:	39 83       	std	Y+1, r19	; 0x01
 a4a:	28 83       	st	Y, r18
 a4c:	3a c0       	rjmp	.+116    	; 0xac2 <malloc+0x128>
 a4e:	20 91 23 02 	lds	r18, 0x0223
 a52:	30 91 24 02 	lds	r19, 0x0224
 a56:	23 2b       	or	r18, r19
 a58:	41 f4       	brne	.+16     	; 0xa6a <malloc+0xd0>
 a5a:	20 91 02 02 	lds	r18, 0x0202
 a5e:	30 91 03 02 	lds	r19, 0x0203
 a62:	30 93 24 02 	sts	0x0224, r19
 a66:	20 93 23 02 	sts	0x0223, r18
 a6a:	20 91 00 02 	lds	r18, 0x0200
 a6e:	30 91 01 02 	lds	r19, 0x0201
 a72:	21 15       	cp	r18, r1
 a74:	31 05       	cpc	r19, r1
 a76:	41 f4       	brne	.+16     	; 0xa88 <malloc+0xee>
 a78:	2d b7       	in	r18, 0x3d	; 61
 a7a:	3e b7       	in	r19, 0x3e	; 62
 a7c:	40 91 04 02 	lds	r20, 0x0204
 a80:	50 91 05 02 	lds	r21, 0x0205
 a84:	24 1b       	sub	r18, r20
 a86:	35 0b       	sbc	r19, r21
 a88:	e0 91 23 02 	lds	r30, 0x0223
 a8c:	f0 91 24 02 	lds	r31, 0x0224
 a90:	e2 17       	cp	r30, r18
 a92:	f3 07       	cpc	r31, r19
 a94:	a0 f4       	brcc	.+40     	; 0xabe <malloc+0x124>
 a96:	2e 1b       	sub	r18, r30
 a98:	3f 0b       	sbc	r19, r31
 a9a:	28 17       	cp	r18, r24
 a9c:	39 07       	cpc	r19, r25
 a9e:	78 f0       	brcs	.+30     	; 0xabe <malloc+0x124>
 aa0:	ac 01       	movw	r20, r24
 aa2:	4e 5f       	subi	r20, 0xFE	; 254
 aa4:	5f 4f       	sbci	r21, 0xFF	; 255
 aa6:	24 17       	cp	r18, r20
 aa8:	35 07       	cpc	r19, r21
 aaa:	48 f0       	brcs	.+18     	; 0xabe <malloc+0x124>
 aac:	4e 0f       	add	r20, r30
 aae:	5f 1f       	adc	r21, r31
 ab0:	50 93 24 02 	sts	0x0224, r21
 ab4:	40 93 23 02 	sts	0x0223, r20
 ab8:	81 93       	st	Z+, r24
 aba:	91 93       	st	Z+, r25
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <malloc+0x128>
 abe:	e0 e0       	ldi	r30, 0x00	; 0
 ac0:	f0 e0       	ldi	r31, 0x00	; 0
 ac2:	cf 01       	movw	r24, r30
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	08 95       	ret

00000aca <free>:
 aca:	cf 93       	push	r28
 acc:	df 93       	push	r29
 ace:	00 97       	sbiw	r24, 0x00	; 0
 ad0:	09 f4       	brne	.+2      	; 0xad4 <free+0xa>
 ad2:	87 c0       	rjmp	.+270    	; 0xbe2 <free+0x118>
 ad4:	fc 01       	movw	r30, r24
 ad6:	32 97       	sbiw	r30, 0x02	; 2
 ad8:	13 82       	std	Z+3, r1	; 0x03
 ada:	12 82       	std	Z+2, r1	; 0x02
 adc:	c0 91 25 02 	lds	r28, 0x0225
 ae0:	d0 91 26 02 	lds	r29, 0x0226
 ae4:	20 97       	sbiw	r28, 0x00	; 0
 ae6:	81 f4       	brne	.+32     	; 0xb08 <free+0x3e>
 ae8:	20 81       	ld	r18, Z
 aea:	31 81       	ldd	r19, Z+1	; 0x01
 aec:	28 0f       	add	r18, r24
 aee:	39 1f       	adc	r19, r25
 af0:	80 91 23 02 	lds	r24, 0x0223
 af4:	90 91 24 02 	lds	r25, 0x0224
 af8:	82 17       	cp	r24, r18
 afa:	93 07       	cpc	r25, r19
 afc:	79 f5       	brne	.+94     	; 0xb5c <free+0x92>
 afe:	f0 93 24 02 	sts	0x0224, r31
 b02:	e0 93 23 02 	sts	0x0223, r30
 b06:	6d c0       	rjmp	.+218    	; 0xbe2 <free+0x118>
 b08:	de 01       	movw	r26, r28
 b0a:	20 e0       	ldi	r18, 0x00	; 0
 b0c:	30 e0       	ldi	r19, 0x00	; 0
 b0e:	ae 17       	cp	r26, r30
 b10:	bf 07       	cpc	r27, r31
 b12:	50 f4       	brcc	.+20     	; 0xb28 <free+0x5e>
 b14:	12 96       	adiw	r26, 0x02	; 2
 b16:	4d 91       	ld	r20, X+
 b18:	5c 91       	ld	r21, X
 b1a:	13 97       	sbiw	r26, 0x03	; 3
 b1c:	9d 01       	movw	r18, r26
 b1e:	41 15       	cp	r20, r1
 b20:	51 05       	cpc	r21, r1
 b22:	09 f1       	breq	.+66     	; 0xb66 <free+0x9c>
 b24:	da 01       	movw	r26, r20
 b26:	f3 cf       	rjmp	.-26     	; 0xb0e <free+0x44>
 b28:	b3 83       	std	Z+3, r27	; 0x03
 b2a:	a2 83       	std	Z+2, r26	; 0x02
 b2c:	40 81       	ld	r20, Z
 b2e:	51 81       	ldd	r21, Z+1	; 0x01
 b30:	84 0f       	add	r24, r20
 b32:	95 1f       	adc	r25, r21
 b34:	8a 17       	cp	r24, r26
 b36:	9b 07       	cpc	r25, r27
 b38:	71 f4       	brne	.+28     	; 0xb56 <free+0x8c>
 b3a:	8d 91       	ld	r24, X+
 b3c:	9c 91       	ld	r25, X
 b3e:	11 97       	sbiw	r26, 0x01	; 1
 b40:	84 0f       	add	r24, r20
 b42:	95 1f       	adc	r25, r21
 b44:	02 96       	adiw	r24, 0x02	; 2
 b46:	91 83       	std	Z+1, r25	; 0x01
 b48:	80 83       	st	Z, r24
 b4a:	12 96       	adiw	r26, 0x02	; 2
 b4c:	8d 91       	ld	r24, X+
 b4e:	9c 91       	ld	r25, X
 b50:	13 97       	sbiw	r26, 0x03	; 3
 b52:	93 83       	std	Z+3, r25	; 0x03
 b54:	82 83       	std	Z+2, r24	; 0x02
 b56:	21 15       	cp	r18, r1
 b58:	31 05       	cpc	r19, r1
 b5a:	29 f4       	brne	.+10     	; 0xb66 <free+0x9c>
 b5c:	f0 93 26 02 	sts	0x0226, r31
 b60:	e0 93 25 02 	sts	0x0225, r30
 b64:	3e c0       	rjmp	.+124    	; 0xbe2 <free+0x118>
 b66:	d9 01       	movw	r26, r18
 b68:	13 96       	adiw	r26, 0x03	; 3
 b6a:	fc 93       	st	X, r31
 b6c:	ee 93       	st	-X, r30
 b6e:	12 97       	sbiw	r26, 0x02	; 2
 b70:	4d 91       	ld	r20, X+
 b72:	5d 91       	ld	r21, X+
 b74:	a4 0f       	add	r26, r20
 b76:	b5 1f       	adc	r27, r21
 b78:	ea 17       	cp	r30, r26
 b7a:	fb 07       	cpc	r31, r27
 b7c:	79 f4       	brne	.+30     	; 0xb9c <free+0xd2>
 b7e:	80 81       	ld	r24, Z
 b80:	91 81       	ldd	r25, Z+1	; 0x01
 b82:	84 0f       	add	r24, r20
 b84:	95 1f       	adc	r25, r21
 b86:	02 96       	adiw	r24, 0x02	; 2
 b88:	d9 01       	movw	r26, r18
 b8a:	11 96       	adiw	r26, 0x01	; 1
 b8c:	9c 93       	st	X, r25
 b8e:	8e 93       	st	-X, r24
 b90:	82 81       	ldd	r24, Z+2	; 0x02
 b92:	93 81       	ldd	r25, Z+3	; 0x03
 b94:	13 96       	adiw	r26, 0x03	; 3
 b96:	9c 93       	st	X, r25
 b98:	8e 93       	st	-X, r24
 b9a:	12 97       	sbiw	r26, 0x02	; 2
 b9c:	e0 e0       	ldi	r30, 0x00	; 0
 b9e:	f0 e0       	ldi	r31, 0x00	; 0
 ba0:	8a 81       	ldd	r24, Y+2	; 0x02
 ba2:	9b 81       	ldd	r25, Y+3	; 0x03
 ba4:	00 97       	sbiw	r24, 0x00	; 0
 ba6:	19 f0       	breq	.+6      	; 0xbae <free+0xe4>
 ba8:	fe 01       	movw	r30, r28
 baa:	ec 01       	movw	r28, r24
 bac:	f9 cf       	rjmp	.-14     	; 0xba0 <free+0xd6>
 bae:	ce 01       	movw	r24, r28
 bb0:	02 96       	adiw	r24, 0x02	; 2
 bb2:	28 81       	ld	r18, Y
 bb4:	39 81       	ldd	r19, Y+1	; 0x01
 bb6:	82 0f       	add	r24, r18
 bb8:	93 1f       	adc	r25, r19
 bba:	20 91 23 02 	lds	r18, 0x0223
 bbe:	30 91 24 02 	lds	r19, 0x0224
 bc2:	28 17       	cp	r18, r24
 bc4:	39 07       	cpc	r19, r25
 bc6:	69 f4       	brne	.+26     	; 0xbe2 <free+0x118>
 bc8:	30 97       	sbiw	r30, 0x00	; 0
 bca:	29 f4       	brne	.+10     	; 0xbd6 <free+0x10c>
 bcc:	10 92 26 02 	sts	0x0226, r1
 bd0:	10 92 25 02 	sts	0x0225, r1
 bd4:	02 c0       	rjmp	.+4      	; 0xbda <free+0x110>
 bd6:	13 82       	std	Z+3, r1	; 0x03
 bd8:	12 82       	std	Z+2, r1	; 0x02
 bda:	d0 93 24 02 	sts	0x0224, r29
 bde:	c0 93 23 02 	sts	0x0223, r28
 be2:	df 91       	pop	r29
 be4:	cf 91       	pop	r28
 be6:	08 95       	ret

00000be8 <memset>:
 be8:	dc 01       	movw	r26, r24
 bea:	01 c0       	rjmp	.+2      	; 0xbee <memset+0x6>
 bec:	6d 93       	st	X+, r22
 bee:	41 50       	subi	r20, 0x01	; 1
 bf0:	50 40       	sbci	r21, 0x00	; 0
 bf2:	e0 f7       	brcc	.-8      	; 0xbec <memset+0x4>
 bf4:	08 95       	ret

00000bf6 <_exit>:
 bf6:	f8 94       	cli

00000bf8 <__stop_program>:
 bf8:	ff cf       	rjmp	.-2      	; 0xbf8 <__stop_program>
