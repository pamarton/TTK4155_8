
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800200  00001a34  00001ac8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a34  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000005c  008002b8  008002b8  00001b80  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001b80  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000390  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002974  00000000  00000000  00001f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000011c1  00000000  00000000  000048e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001b9a  00000000  00000000  00005aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000089c  00000000  00000000  0000763c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a31  00000000  00000000  00007ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000015b1  00000000  00000000  00008909  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f8  00000000  00000000  00009eba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	ea c0       	rjmp	.+468    	; 0x1ea <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	02 c6       	rjmp	.+3076   	; 0xca2 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	ac c5       	rjmp	.+2904   	; 0xc02 <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6c 06       	cpc	r6, r28
      e6:	be 06       	cpc	r11, r30
      e8:	be 06       	cpc	r11, r30
      ea:	be 06       	cpc	r11, r30
      ec:	be 06       	cpc	r11, r30
      ee:	be 06       	cpc	r11, r30
      f0:	be 06       	cpc	r11, r30
      f2:	be 06       	cpc	r11, r30
      f4:	6c 06       	cpc	r6, r28
      f6:	be 06       	cpc	r11, r30
      f8:	be 06       	cpc	r11, r30
      fa:	be 06       	cpc	r11, r30
      fc:	be 06       	cpc	r11, r30
      fe:	be 06       	cpc	r11, r30
     100:	be 06       	cpc	r11, r30
     102:	be 06       	cpc	r11, r30
     104:	6e 06       	cpc	r6, r30
     106:	be 06       	cpc	r11, r30
     108:	be 06       	cpc	r11, r30
     10a:	be 06       	cpc	r11, r30
     10c:	be 06       	cpc	r11, r30
     10e:	be 06       	cpc	r11, r30
     110:	be 06       	cpc	r11, r30
     112:	be 06       	cpc	r11, r30
     114:	be 06       	cpc	r11, r30
     116:	be 06       	cpc	r11, r30
     118:	be 06       	cpc	r11, r30
     11a:	be 06       	cpc	r11, r30
     11c:	be 06       	cpc	r11, r30
     11e:	be 06       	cpc	r11, r30
     120:	be 06       	cpc	r11, r30
     122:	be 06       	cpc	r11, r30
     124:	6e 06       	cpc	r6, r30
     126:	be 06       	cpc	r11, r30
     128:	be 06       	cpc	r11, r30
     12a:	be 06       	cpc	r11, r30
     12c:	be 06       	cpc	r11, r30
     12e:	be 06       	cpc	r11, r30
     130:	be 06       	cpc	r11, r30
     132:	be 06       	cpc	r11, r30
     134:	be 06       	cpc	r11, r30
     136:	be 06       	cpc	r11, r30
     138:	be 06       	cpc	r11, r30
     13a:	be 06       	cpc	r11, r30
     13c:	be 06       	cpc	r11, r30
     13e:	be 06       	cpc	r11, r30
     140:	be 06       	cpc	r11, r30
     142:	be 06       	cpc	r11, r30
     144:	ba 06       	cpc	r11, r26
     146:	be 06       	cpc	r11, r30
     148:	be 06       	cpc	r11, r30
     14a:	be 06       	cpc	r11, r30
     14c:	be 06       	cpc	r11, r30
     14e:	be 06       	cpc	r11, r30
     150:	be 06       	cpc	r11, r30
     152:	be 06       	cpc	r11, r30
     154:	97 06       	cpc	r9, r23
     156:	be 06       	cpc	r11, r30
     158:	be 06       	cpc	r11, r30
     15a:	be 06       	cpc	r11, r30
     15c:	be 06       	cpc	r11, r30
     15e:	be 06       	cpc	r11, r30
     160:	be 06       	cpc	r11, r30
     162:	be 06       	cpc	r11, r30
     164:	be 06       	cpc	r11, r30
     166:	be 06       	cpc	r11, r30
     168:	be 06       	cpc	r11, r30
     16a:	be 06       	cpc	r11, r30
     16c:	be 06       	cpc	r11, r30
     16e:	be 06       	cpc	r11, r30
     170:	be 06       	cpc	r11, r30
     172:	be 06       	cpc	r11, r30
     174:	8b 06       	cpc	r8, r27
     176:	be 06       	cpc	r11, r30
     178:	be 06       	cpc	r11, r30
     17a:	be 06       	cpc	r11, r30
     17c:	be 06       	cpc	r11, r30
     17e:	be 06       	cpc	r11, r30
     180:	be 06       	cpc	r11, r30
     182:	be 06       	cpc	r11, r30
     184:	a9 06       	cpc	r10, r25

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e4 e3       	ldi	r30, 0x34	; 52
     19e:	fa e1       	ldi	r31, 0x1A	; 26
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a8 3b       	cpi	r26, 0xB8	; 184
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	a8 eb       	ldi	r26, 0xB8	; 184
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a4 31       	cpi	r26, 0x14	; 20
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	b2 d4       	rcall	.+2404   	; 0xb26 <main>
     1c2:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <CAN_construct_message>:
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
}
     1c8:	90 93 ba 02 	sts	0x02BA, r25
     1cc:	80 93 b9 02 	sts	0x02B9, r24
     1d0:	60 93 bb 02 	sts	0x02BB, r22
     1d4:	66 23       	and	r22, r22
     1d6:	41 f0       	breq	.+16     	; 0x1e8 <CAN_construct_message+0x20>
     1d8:	8c eb       	ldi	r24, 0xBC	; 188
     1da:	92 e0       	ldi	r25, 0x02	; 2
     1dc:	fc 01       	movw	r30, r24
     1de:	11 92       	st	Z+, r1
     1e0:	2e 2f       	mov	r18, r30
     1e2:	28 1b       	sub	r18, r24
     1e4:	26 17       	cp	r18, r22
     1e6:	d8 f3       	brcs	.-10     	; 0x1de <CAN_construct_message+0x16>
     1e8:	08 95       	ret

000001ea <__vector_5>:
     1ea:	1f 92       	push	r1
     1ec:	0f 92       	push	r0
     1ee:	0f b6       	in	r0, 0x3f	; 63
     1f0:	0f 92       	push	r0
     1f2:	11 24       	eor	r1, r1
     1f4:	8f 93       	push	r24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	80 93 b8 02 	sts	0x02B8, r24
     1fc:	8f 91       	pop	r24
     1fe:	0f 90       	pop	r0
     200:	0f be       	out	0x3f, r0	; 63
     202:	0f 90       	pop	r0
     204:	1f 90       	pop	r1
     206:	18 95       	reti

00000208 <CAN_interrupt_setup>:
     208:	f8 94       	cli
     20a:	6c 98       	cbi	0x0d, 4	; 13
     20c:	ea e6       	ldi	r30, 0x6A	; 106
     20e:	f0 e0       	ldi	r31, 0x00	; 0
     210:	80 81       	ld	r24, Z
     212:	8e 7f       	andi	r24, 0xFE	; 254
     214:	80 83       	st	Z, r24
     216:	80 81       	ld	r24, Z
     218:	82 60       	ori	r24, 0x02	; 2
     21a:	80 83       	st	Z, r24
     21c:	ec 9a       	sbi	0x1d, 4	; 29
     21e:	78 94       	sei
     220:	08 95       	ret

00000222 <CAN_initialize>:
     222:	d3 d0       	rcall	.+422    	; 0x3ca <MCP2515_initialize>
     224:	68 e0       	ldi	r22, 0x08	; 8
     226:	88 e2       	ldi	r24, 0x28	; 40
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	ce df       	rcall	.-100    	; 0x1c8 <CAN_construct_message>
     22c:	4f ef       	ldi	r20, 0xFF	; 255
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	64 e6       	ldi	r22, 0x64	; 100
     232:	80 e6       	ldi	r24, 0x60	; 96
     234:	b1 d0       	rcall	.+354    	; 0x398 <MCP2515_bit_modify>
     236:	4f ef       	ldi	r20, 0xFF	; 255
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	64 e6       	ldi	r22, 0x64	; 100
     23c:	80 e7       	ldi	r24, 0x70	; 112
     23e:	ac d0       	rcall	.+344    	; 0x398 <MCP2515_bit_modify>
     240:	41 e0       	ldi	r20, 0x01	; 1
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	8b e2       	ldi	r24, 0x2B	; 43
     248:	a7 d0       	rcall	.+334    	; 0x398 <MCP2515_bit_modify>
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	62 e0       	ldi	r22, 0x02	; 2
     250:	8b e2       	ldi	r24, 0x2B	; 43
     252:	a2 d0       	rcall	.+324    	; 0x398 <MCP2515_bit_modify>
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	60 ee       	ldi	r22, 0xE0	; 224
     25a:	8f e0       	ldi	r24, 0x0F	; 15
     25c:	9d d0       	rcall	.+314    	; 0x398 <MCP2515_bit_modify>
     25e:	d4 cf       	rjmp	.-88     	; 0x208 <CAN_interrupt_setup>
     260:	08 95       	ret

00000262 <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     266:	c4 e0       	ldi	r28, 0x04	; 4
     268:	d0 e0       	ldi	r29, 0x00	; 0
     26a:	02 c0       	rjmp	.+4      	; 0x270 <CAN_transmission_complete+0xe>
     26c:	cc 0f       	add	r28, r28
     26e:	dd 1f       	adc	r29, r29
     270:	8a 95       	dec	r24
     272:	e2 f7       	brpl	.-8      	; 0x26c <CAN_transmission_complete+0xa>
     274:	8c e2       	ldi	r24, 0x2C	; 44
     276:	72 d0       	rcall	.+228    	; 0x35c <MCP2515_read>
     278:	8c 23       	and	r24, r28
     27a:	9d 23       	and	r25, r29
     27c:	89 2b       	or	r24, r25
     27e:	d1 f3       	breq	.-12     	; 0x274 <CAN_transmission_complete+0x12>
	return 1;
}
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	df 91       	pop	r29
     284:	cf 91       	pop	r28
     286:	08 95       	ret

00000288 <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     288:	ff 92       	push	r15
     28a:	0f 93       	push	r16
     28c:	1f 93       	push	r17
     28e:	cf 93       	push	r28
     290:	df 93       	push	r29
     292:	ec 01       	movw	r28, r24
     294:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     296:	f6 2e       	mov	r15, r22
     298:	ff 0c       	add	r15, r15
     29a:	ff 0c       	add	r15, r15
     29c:	ff 0c       	add	r15, r15
     29e:	ff 0c       	add	r15, r15
     2a0:	28 81       	ld	r18, Y
     2a2:	39 81       	ldd	r19, Y+1	; 0x01
     2a4:	b9 01       	movw	r22, r18
     2a6:	75 95       	asr	r23
     2a8:	67 95       	ror	r22
     2aa:	75 95       	asr	r23
     2ac:	67 95       	ror	r22
     2ae:	75 95       	asr	r23
     2b0:	67 95       	ror	r22
     2b2:	81 e3       	ldi	r24, 0x31	; 49
     2b4:	8f 0d       	add	r24, r15
     2b6:	43 d0       	rcall	.+134    	; 0x33e <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     2b8:	28 81       	ld	r18, Y
     2ba:	39 81       	ldd	r19, Y+1	; 0x01
     2bc:	b9 01       	movw	r22, r18
     2be:	66 0f       	add	r22, r22
     2c0:	77 1f       	adc	r23, r23
     2c2:	62 95       	swap	r22
     2c4:	72 95       	swap	r23
     2c6:	70 7f       	andi	r23, 0xF0	; 240
     2c8:	76 27       	eor	r23, r22
     2ca:	60 7f       	andi	r22, 0xF0	; 240
     2cc:	76 27       	eor	r23, r22
     2ce:	82 e3       	ldi	r24, 0x32	; 50
     2d0:	8f 0d       	add	r24, r15
     2d2:	35 d0       	rcall	.+106    	; 0x33e <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     2d4:	6a 81       	ldd	r22, Y+2	; 0x02
     2d6:	6f 70       	andi	r22, 0x0F	; 15
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	85 e3       	ldi	r24, 0x35	; 53
     2dc:	8f 0d       	add	r24, r15
     2de:	2f d0       	rcall	.+94     	; 0x33e <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     2e0:	8a 81       	ldd	r24, Y+2	; 0x02
     2e2:	88 23       	and	r24, r24
     2e4:	79 f0       	breq	.+30     	; 0x304 <CAN_send_byte+0x7c>
     2e6:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     2e8:	86 e3       	ldi	r24, 0x36	; 54
     2ea:	f8 0e       	add	r15, r24
     2ec:	fe 01       	movw	r30, r28
     2ee:	e1 0f       	add	r30, r17
     2f0:	f1 1d       	adc	r31, r1
     2f2:	63 81       	ldd	r22, Z+3	; 0x03
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	8f 2d       	mov	r24, r15
     2f8:	81 0f       	add	r24, r17
     2fa:	21 d0       	rcall	.+66     	; 0x33e <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     2fc:	1f 5f       	subi	r17, 0xFF	; 255
     2fe:	8a 81       	ldd	r24, Y+2	; 0x02
     300:	18 17       	cp	r17, r24
     302:	a0 f3       	brcs	.-24     	; 0x2ec <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     304:	80 2f       	mov	r24, r16
     306:	38 d0       	rcall	.+112    	; 0x378 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     308:	80 2f       	mov	r24, r16
     30a:	ab df       	rcall	.-170    	; 0x262 <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     30c:	df 91       	pop	r29
     30e:	cf 91       	pop	r28
     310:	1f 91       	pop	r17
     312:	0f 91       	pop	r16
     314:	ff 90       	pop	r15
     316:	08 95       	ret

00000318 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     318:	20 91 bb 02 	lds	r18, 0x02BB
     31c:	22 23       	and	r18, r18
     31e:	59 f0       	breq	.+22     	; 0x336 <CAN_message_send+0x1e>
     320:	38 2f       	mov	r19, r24
     322:	ac eb       	ldi	r26, 0xBC	; 188
     324:	b2 e0       	ldi	r27, 0x02	; 2
     326:	e8 2f       	mov	r30, r24
     328:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     32a:	81 91       	ld	r24, Z+
     32c:	8d 93       	st	X+, r24
     32e:	8e 2f       	mov	r24, r30
     330:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     332:	82 17       	cp	r24, r18
     334:	d0 f3       	brcs	.-12     	; 0x32a <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     336:	89 eb       	ldi	r24, 0xB9	; 185
     338:	92 e0       	ldi	r25, 0x02	; 2
     33a:	a6 cf       	rjmp	.-180    	; 0x288 <CAN_send_byte>
     33c:	08 95       	ret

0000033e <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     33e:	cf 93       	push	r28
     340:	df 93       	push	r29
     342:	d8 2f       	mov	r29, r24
     344:	c6 2f       	mov	r28, r22
     346:	50 d0       	rcall	.+160    	; 0x3e8 <SPI_select>
     348:	82 e0       	ldi	r24, 0x02	; 2
     34a:	42 d0       	rcall	.+132    	; 0x3d0 <SPI_send>
     34c:	8d 2f       	mov	r24, r29
     34e:	40 d0       	rcall	.+128    	; 0x3d0 <SPI_send>
     350:	8c 2f       	mov	r24, r28
     352:	3e d0       	rcall	.+124    	; 0x3d0 <SPI_send>
     354:	4b d0       	rcall	.+150    	; 0x3ec <SPI_deselect>
     356:	df 91       	pop	r29
     358:	cf 91       	pop	r28
     35a:	08 95       	ret

0000035c <MCP2515_read>:
     35c:	cf 93       	push	r28
     35e:	c8 2f       	mov	r28, r24
     360:	43 d0       	rcall	.+134    	; 0x3e8 <SPI_select>
     362:	83 e0       	ldi	r24, 0x03	; 3
     364:	35 d0       	rcall	.+106    	; 0x3d0 <SPI_send>
     366:	8c 2f       	mov	r24, r28
     368:	33 d0       	rcall	.+102    	; 0x3d0 <SPI_send>
     36a:	37 d0       	rcall	.+110    	; 0x3da <SPI_receive>
     36c:	c8 2f       	mov	r28, r24
     36e:	3e d0       	rcall	.+124    	; 0x3ec <SPI_deselect>
     370:	8c 2f       	mov	r24, r28
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <MCP2515_request_to_send>:
     378:	cf 93       	push	r28
     37a:	c8 2f       	mov	r28, r24
     37c:	35 d0       	rcall	.+106    	; 0x3e8 <SPI_select>
     37e:	21 e0       	ldi	r18, 0x01	; 1
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	c9 01       	movw	r24, r18
     384:	02 c0       	rjmp	.+4      	; 0x38a <MCP2515_request_to_send+0x12>
     386:	88 0f       	add	r24, r24
     388:	99 1f       	adc	r25, r25
     38a:	ca 95       	dec	r28
     38c:	e2 f7       	brpl	.-8      	; 0x386 <MCP2515_request_to_send+0xe>
     38e:	80 68       	ori	r24, 0x80	; 128
     390:	1f d0       	rcall	.+62     	; 0x3d0 <SPI_send>
     392:	2c d0       	rcall	.+88     	; 0x3ec <SPI_deselect>
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     398:	1f 93       	push	r17
     39a:	cf 93       	push	r28
     39c:	df 93       	push	r29
     39e:	18 2f       	mov	r17, r24
     3a0:	d6 2f       	mov	r29, r22
     3a2:	c4 2f       	mov	r28, r20
	SPI_select();
     3a4:	21 d0       	rcall	.+66     	; 0x3e8 <SPI_select>
	SPI_send(MCP_BITMOD);
     3a6:	85 e0       	ldi	r24, 0x05	; 5
     3a8:	13 d0       	rcall	.+38     	; 0x3d0 <SPI_send>
	SPI_send(adr);
     3aa:	81 2f       	mov	r24, r17
     3ac:	11 d0       	rcall	.+34     	; 0x3d0 <SPI_send>
	SPI_send(mask);
     3ae:	8d 2f       	mov	r24, r29
     3b0:	0f d0       	rcall	.+30     	; 0x3d0 <SPI_send>
	SPI_send(data);
     3b2:	8c 2f       	mov	r24, r28
     3b4:	0d d0       	rcall	.+26     	; 0x3d0 <SPI_send>
	SPI_deselect();
     3b6:	1a d0       	rcall	.+52     	; 0x3ec <SPI_deselect>
}
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	1f 91       	pop	r17
     3be:	08 95       	ret

000003c0 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     3c0:	13 d0       	rcall	.+38     	; 0x3e8 <SPI_select>
	SPI_send(MCP_RESET);
     3c2:	80 ec       	ldi	r24, 0xC0	; 192
     3c4:	05 d0       	rcall	.+10     	; 0x3d0 <SPI_send>
	SPI_deselect();
     3c6:	12 c0       	rjmp	.+36     	; 0x3ec <SPI_deselect>
     3c8:	08 95       	ret

000003ca <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     3ca:	12 d0       	rcall	.+36     	; 0x3f0 <SPI_initialize>
	MCP2515_reset();
     3cc:	f9 cf       	rjmp	.-14     	; 0x3c0 <MCP2515_reset>
     3ce:	08 95       	ret

000003d0 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     3d0:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     3d2:	0d b4       	in	r0, 0x2d	; 45
     3d4:	07 fe       	sbrs	r0, 7
     3d6:	fd cf       	rjmp	.-6      	; 0x3d2 <SPI_send+0x2>

}
     3d8:	08 95       	ret

000003da <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	f9 df       	rcall	.-14     	; 0x3d0 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     3de:	0d b4       	in	r0, 0x2d	; 45
     3e0:	07 fe       	sbrs	r0, 7
     3e2:	fd cf       	rjmp	.-6      	; 0x3de <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     3e4:	8e b5       	in	r24, 0x2e	; 46
}
     3e6:	08 95       	ret

000003e8 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     3e8:	2f 98       	cbi	0x05, 7	; 5
     3ea:	08 95       	ret

000003ec <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     3ec:	2f 9a       	sbi	0x05, 7	; 5
     3ee:	08 95       	ret

000003f0 <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     3f0:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     3f2:	8c b5       	in	r24, 0x2c	; 44
     3f4:	81 60       	ori	r24, 0x01	; 1
     3f6:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     3f8:	84 b1       	in	r24, 0x04	; 4
     3fa:	86 68       	ori	r24, 0x86	; 134
     3fc:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     3fe:	8c b5       	in	r24, 0x2c	; 44
     400:	80 65       	ori	r24, 0x50	; 80
     402:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     404:	f3 cf       	rjmp	.-26     	; 0x3ec <SPI_deselect>
     406:	08 95       	ret

00000408 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     408:	e0 ec       	ldi	r30, 0xC0	; 192
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	90 81       	ld	r25, Z
     40e:	95 ff       	sbrs	r25, 5
     410:	fd cf       	rjmp	.-6      	; 0x40c <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     412:	80 93 c6 00 	sts	0x00C6, r24
     416:	08 95       	ret

00000418 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     418:	e0 ec       	ldi	r30, 0xC0	; 192
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	88 23       	and	r24, r24
     420:	ec f7       	brge	.-6      	; 0x41c <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     422:	80 91 c6 00 	lds	r24, 0x00C6
}
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	08 95       	ret

0000042a <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     42a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     42e:	87 e6       	ldi	r24, 0x67	; 103
     430:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     434:	88 e1       	ldi	r24, 0x18	; 24
     436:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     43a:	8e e0       	ldi	r24, 0x0E	; 14
     43c:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     440:	6c e0       	ldi	r22, 0x0C	; 12
     442:	72 e0       	ldi	r23, 0x02	; 2
     444:	84 e0       	ldi	r24, 0x04	; 4
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	8f c6       	rjmp	.+3358   	; 0x1168 <fdevopen>
     44a:	08 95       	ret

0000044c <IR_init>:
#include "IRsensor.h"


//int input_val;

void IR_init(void){	
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
	
	//Enable input at port F0
	DDRF &= ~(1 << PF0);
     450:	80 98       	cbi	0x10, 0	; 16

	//Left adjusting (the 10-bit result) instead of right adjusting.
	//ADMUX |= (1<<ADLAR);
	
	// Set ADC prescaler to 128 -> 125kHz sample rate @ 16MHz.
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		
     452:	ea e7       	ldi	r30, 0x7A	; 122
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	87 60       	ori	r24, 0x07	; 7
     45a:	80 83       	st	Z, r24
	
	//Turning on internal voltage reference.
	ADMUX = (1<<REFS0);//|(1<<REFS1);
     45c:	ac e7       	ldi	r26, 0x7C	; 124
     45e:	b0 e0       	ldi	r27, 0x00	; 0
     460:	80 e4       	ldi	r24, 0x40	; 64
     462:	8c 93       	st	X, r24
	
	//Use ADC0 -> Mux5:0 = 00000
	ADMUX &= ~((1<<MUX4)&(1<<MUX3)&(1<<MUX2)&(1<<MUX1)&(1<<MUX0));
     464:	8c 91       	ld	r24, X
     466:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<MUX5);
     468:	cb e7       	ldi	r28, 0x7B	; 123
     46a:	d0 e0       	ldi	r29, 0x00	; 0
     46c:	88 81       	ld	r24, Y
     46e:	87 7f       	andi	r24, 0xF7	; 247
     470:	88 83       	st	Y, r24
	
	// ADC Auto Triger Engable.
	ADCSRA |= (1<<ADATE);
     472:	80 81       	ld	r24, Z
     474:	80 62       	ori	r24, 0x20	; 32
     476:	80 83       	st	Z, r24
	
	//Use Free-running mode.
	ADCSRB = (1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0);
     478:	87 e0       	ldi	r24, 0x07	; 7
     47a:	88 83       	st	Y, r24
	
	//Use 8-bit resolution, all data is stored in ADCH.
	ADMUX |= (1<<ADLAR);
     47c:	8c 91       	ld	r24, X
     47e:	80 62       	ori	r24, 0x20	; 32
     480:	8c 93       	st	X, r24
	
	//Enabling ADC. ADC Result will be presented in ADC Data Registers ADCH & ADCL.
	ADCSRA |= (1<<ADEN);
     482:	80 81       	ld	r24, Z
     484:	80 68       	ori	r24, 0x80	; 128
     486:	80 83       	st	Z, r24
	
	// Start A2D conversion.
	ADCSRA |= (1<<ADSC);            
     488:	80 81       	ld	r24, Z
     48a:	80 64       	ori	r24, 0x40	; 64
     48c:	80 83       	st	Z, r24
	
	
	

}
     48e:	df 91       	pop	r29
     490:	cf 91       	pop	r28
     492:	08 95       	ret

00000494 <motor_set_motor_speed>:
}


int16_t motor_get_speed_max(void){
	return motor_speed_max;
}
     494:	cf 93       	push	r28
     496:	df 93       	push	r29
     498:	00 d0       	rcall	.+0      	; 0x49a <motor_set_motor_speed+0x6>
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	90 e5       	ldi	r25, 0x50	; 80
     4a0:	99 83       	std	Y+1, r25	; 0x01
     4a2:	1a 82       	std	Y+2, r1	; 0x02
     4a4:	8b 83       	std	Y+3, r24	; 0x03
     4a6:	63 e0       	ldi	r22, 0x03	; 3
     4a8:	70 e0       	ldi	r23, 0x00	; 0
     4aa:	ce 01       	movw	r24, r28
     4ac:	01 96       	adiw	r24, 0x01	; 1
     4ae:	d7 d3       	rcall	.+1966   	; 0xc5e <TWI_Start_Transceiver_With_Data>
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	08 95       	ret

000004bc <motor_set_direction>:
     4bc:	8f 3f       	cpi	r24, 0xFF	; 255
     4be:	41 f0       	breq	.+16     	; 0x4d0 <motor_set_direction+0x14>
     4c0:	81 30       	cpi	r24, 0x01	; 1
     4c2:	59 f4       	brne	.+22     	; 0x4da <motor_set_direction+0x1e>
     4c4:	e2 e0       	ldi	r30, 0x02	; 2
     4c6:	f1 e0       	ldi	r31, 0x01	; 1
     4c8:	80 81       	ld	r24, Z
     4ca:	8d 7f       	andi	r24, 0xFD	; 253
     4cc:	80 83       	st	Z, r24
     4ce:	08 95       	ret
     4d0:	e2 e0       	ldi	r30, 0x02	; 2
     4d2:	f1 e0       	ldi	r31, 0x01	; 1
     4d4:	80 81       	ld	r24, Z
     4d6:	82 60       	ori	r24, 0x02	; 2
     4d8:	80 83       	st	Z, r24
     4da:	08 95       	ret

000004dc <encoder_reset>:
     4dc:	e2 e0       	ldi	r30, 0x02	; 2
     4de:	f1 e0       	ldi	r31, 0x01	; 1
     4e0:	80 81       	ld	r24, Z
     4e2:	8f 7b       	andi	r24, 0xBF	; 191
     4e4:	80 83       	st	Z, r24
     4e6:	8a e6       	ldi	r24, 0x6A	; 106
     4e8:	8a 95       	dec	r24
     4ea:	f1 f7       	brne	.-4      	; 0x4e8 <encoder_reset+0xc>
     4ec:	00 c0       	rjmp	.+0      	; 0x4ee <encoder_reset+0x12>
     4ee:	80 81       	ld	r24, Z
     4f0:	80 64       	ori	r24, 0x40	; 64
     4f2:	80 83       	st	Z, r24
     4f4:	08 95       	ret

000004f6 <encoder_read>:
     4f6:	e2 e0       	ldi	r30, 0x02	; 2
     4f8:	f1 e0       	ldi	r31, 0x01	; 1
     4fa:	80 81       	ld	r24, Z
     4fc:	88 60       	ori	r24, 0x08	; 8
     4fe:	80 83       	st	Z, r24
     500:	80 81       	ld	r24, Z
     502:	8f 7d       	andi	r24, 0xDF	; 223
     504:	80 83       	st	Z, r24
     506:	80 81       	ld	r24, Z
     508:	87 7f       	andi	r24, 0xF7	; 247
     50a:	80 83       	st	Z, r24
     50c:	8a e6       	ldi	r24, 0x6A	; 106
     50e:	8a 95       	dec	r24
     510:	f1 f7       	brne	.-4      	; 0x50e <encoder_read+0x18>
     512:	00 c0       	rjmp	.+0      	; 0x514 <encoder_read+0x1e>
     514:	20 91 06 01 	lds	r18, 0x0106
     518:	80 81       	ld	r24, Z
     51a:	88 60       	ori	r24, 0x08	; 8
     51c:	80 83       	st	Z, r24
     51e:	8a e6       	ldi	r24, 0x6A	; 106
     520:	8a 95       	dec	r24
     522:	f1 f7       	brne	.-4      	; 0x520 <encoder_read+0x2a>
     524:	00 c0       	rjmp	.+0      	; 0x526 <encoder_read+0x30>
     526:	80 91 06 01 	lds	r24, 0x0106
     52a:	90 81       	ld	r25, Z
     52c:	90 62       	ori	r25, 0x20	; 32
     52e:	90 83       	st	Z, r25
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	92 2b       	or	r25, r18
     534:	08 95       	ret

00000536 <motor_goto_end>:


int16_t pos;
int16_t old_pos;

int16_t motor_goto_end(uint8_t motor_speed, int8_t direction){
     536:	1f 93       	push	r17
     538:	cf 93       	push	r28
     53a:	df 93       	push	r29
     53c:	c8 2f       	mov	r28, r24
     53e:	86 2f       	mov	r24, r22
	motor_set_direction(direction);
     540:	bd df       	rcall	.-134    	; 0x4bc <motor_set_direction>
	motor_set_motor_speed(motor_speed);
     542:	8c 2f       	mov	r24, r28
     544:	a7 df       	rcall	.-178    	; 0x494 <motor_set_motor_speed>
	pos = encoder_read();
     546:	d7 df       	rcall	.-82     	; 0x4f6 <encoder_read>
     548:	90 93 e9 02 	sts	0x02E9, r25
     54c:	80 93 e8 02 	sts	0x02E8, r24
	uint8_t time_counter = 0;
     550:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encoder_val = 0;
	
	while(time_counter < 2/T_UPDATE){
		encoder_val = encoder_read();
     552:	d1 df       	rcall	.-94     	; 0x4f6 <encoder_read>
     554:	ec 01       	movw	r28, r24
		time_counter += timer_check_flag();
     556:	6f d3       	rcall	.+1758   	; 0xc36 <timer_check_flag>
     558:	18 0f       	add	r17, r24
		if(encoder_val != pos){
     55a:	20 91 e8 02 	lds	r18, 0x02E8
     55e:	30 91 e9 02 	lds	r19, 0x02E9
     562:	c2 17       	cp	r28, r18
     564:	d3 07       	cpc	r29, r19
     566:	21 f0       	breq	.+8      	; 0x570 <motor_goto_end+0x3a>
			pos = encoder_val;
     568:	d0 93 e9 02 	sts	0x02E9, r29
     56c:	c0 93 e8 02 	sts	0x02E8, r28
	motor_set_motor_speed(motor_speed);
	pos = encoder_read();
	uint8_t time_counter = 0;
	int16_t encoder_val = 0;
	
	while(time_counter < 2/T_UPDATE){
     570:	61 2f       	mov	r22, r17
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	b3 d4       	rcall	.+2406   	; 0xee0 <__floatsisf>
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	48 ec       	ldi	r20, 0xC8	; 200
     580:	52 e4       	ldi	r21, 0x42	; 66
     582:	77 d4       	rcall	.+2286   	; 0xe72 <__cmpsf2>
     584:	88 23       	and	r24, r24
     586:	2c f3       	brlt	.-54     	; 0x552 <motor_goto_end+0x1c>
		time_counter += timer_check_flag();
		if(encoder_val != pos){
			pos = encoder_val;
		}	
	}
	motor_set_motor_speed(0);
     588:	80 e0       	ldi	r24, 0x00	; 0
     58a:	84 df       	rcall	.-248    	; 0x494 <motor_set_motor_speed>
	return pos;
}
     58c:	80 91 e8 02 	lds	r24, 0x02E8
     590:	90 91 e9 02 	lds	r25, 0x02E9
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	08 95       	ret

0000059c <motor_get_position>:

int16_t motor_get_position(void){
	old_pos = pos;
     59c:	80 91 e8 02 	lds	r24, 0x02E8
     5a0:	90 91 e9 02 	lds	r25, 0x02E9
     5a4:	90 93 e7 02 	sts	0x02E7, r25
     5a8:	80 93 e6 02 	sts	0x02E6, r24
	pos = encoder_read(); 
     5ac:	a4 df       	rcall	.-184    	; 0x4f6 <encoder_read>
     5ae:	90 93 e9 02 	sts	0x02E9, r25
     5b2:	80 93 e8 02 	sts	0x02E8, r24
	return pos;
}
     5b6:	08 95       	ret

000005b8 <motor_get_velocity>:

int16_t motor_get_velocity(void){
	motor_get_position();
     5b8:	f1 df       	rcall	.-30     	; 0x59c <motor_get_position>
	return (pos - old_pos);
     5ba:	80 91 e8 02 	lds	r24, 0x02E8
     5be:	90 91 e9 02 	lds	r25, 0x02E9
     5c2:	20 91 e6 02 	lds	r18, 0x02E6
     5c6:	30 91 e7 02 	lds	r19, 0x02E7
}
     5ca:	82 1b       	sub	r24, r18
     5cc:	93 0b       	sbc	r25, r19
     5ce:	08 95       	ret

000005d0 <motor_calibrate_max_velocity>:

uint8_t motor_calibrate_max_velocity(uint8_t max_motor_speed, int8_t direction){
     5d0:	cf 92       	push	r12
     5d2:	df 92       	push	r13
     5d4:	ef 92       	push	r14
     5d6:	ff 92       	push	r15
     5d8:	0f 93       	push	r16
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	c8 2f       	mov	r28, r24
     5e2:	86 2f       	mov	r24, r22
	motor_set_direction(direction);
     5e4:	6b df       	rcall	.-298    	; 0x4bc <motor_set_direction>
	motor_set_motor_speed(max_motor_speed);
     5e6:	8c 2f       	mov	r24, r28
     5e8:	55 df       	rcall	.-342    	; 0x494 <motor_set_motor_speed>
	uint16_t time_counter = 0;
	
	while(pos > (pos_max-pos_min)*0.8){
     5ea:	60 91 e8 02 	lds	r22, 0x02E8
     5ee:	70 91 e9 02 	lds	r23, 0x02E9
     5f2:	88 27       	eor	r24, r24
     5f4:	77 fd       	sbrc	r23, 7
     5f6:	80 95       	com	r24
     5f8:	98 2f       	mov	r25, r24
     5fa:	72 d4       	rcall	.+2276   	; 0xee0 <__floatsisf>
     5fc:	6b 01       	movw	r12, r22
     5fe:	7c 01       	movw	r14, r24
     600:	60 91 ea 02 	lds	r22, 0x02EA
     604:	70 91 eb 02 	lds	r23, 0x02EB
     608:	80 91 c4 02 	lds	r24, 0x02C4
     60c:	90 91 c5 02 	lds	r25, 0x02C5
     610:	68 1b       	sub	r22, r24
     612:	79 0b       	sbc	r23, r25
     614:	88 27       	eor	r24, r24
     616:	77 fd       	sbrc	r23, 7
     618:	80 95       	com	r24
     61a:	98 2f       	mov	r25, r24
     61c:	61 d4       	rcall	.+2242   	; 0xee0 <__floatsisf>
     61e:	2d ec       	ldi	r18, 0xCD	; 205
     620:	3c ec       	ldi	r19, 0xCC	; 204
     622:	4c e4       	ldi	r20, 0x4C	; 76
     624:	5f e3       	ldi	r21, 0x3F	; 63
     626:	10 d5       	rcall	.+2592   	; 0x1048 <__mulsf3>
     628:	9b 01       	movw	r18, r22
     62a:	ac 01       	movw	r20, r24
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	07 d5       	rcall	.+2574   	; 0x1040 <__gesf2>
     632:	18 16       	cp	r1, r24
     634:	3c f5       	brge	.+78     	; 0x684 <motor_calibrate_max_velocity+0xb4>
		motor_get_position();
     636:	b2 df       	rcall	.-156    	; 0x59c <motor_get_position>
uint8_t motor_calibrate_max_velocity(uint8_t max_motor_speed, int8_t direction){
	motor_set_direction(direction);
	motor_set_motor_speed(max_motor_speed);
	uint16_t time_counter = 0;
	
	while(pos > (pos_max-pos_min)*0.8){
     638:	60 91 e8 02 	lds	r22, 0x02E8
     63c:	70 91 e9 02 	lds	r23, 0x02E9
     640:	88 27       	eor	r24, r24
     642:	77 fd       	sbrc	r23, 7
     644:	80 95       	com	r24
     646:	98 2f       	mov	r25, r24
     648:	4b d4       	rcall	.+2198   	; 0xee0 <__floatsisf>
     64a:	6b 01       	movw	r12, r22
     64c:	7c 01       	movw	r14, r24
     64e:	60 91 ea 02 	lds	r22, 0x02EA
     652:	70 91 eb 02 	lds	r23, 0x02EB
     656:	80 91 c4 02 	lds	r24, 0x02C4
     65a:	90 91 c5 02 	lds	r25, 0x02C5
     65e:	68 1b       	sub	r22, r24
     660:	79 0b       	sbc	r23, r25
     662:	88 27       	eor	r24, r24
     664:	77 fd       	sbrc	r23, 7
     666:	80 95       	com	r24
     668:	98 2f       	mov	r25, r24
     66a:	3a d4       	rcall	.+2164   	; 0xee0 <__floatsisf>
     66c:	2d ec       	ldi	r18, 0xCD	; 205
     66e:	3c ec       	ldi	r19, 0xCC	; 204
     670:	4c e4       	ldi	r20, 0x4C	; 76
     672:	5f e3       	ldi	r21, 0x3F	; 63
     674:	e9 d4       	rcall	.+2514   	; 0x1048 <__mulsf3>
     676:	9b 01       	movw	r18, r22
     678:	ac 01       	movw	r20, r24
     67a:	c7 01       	movw	r24, r14
     67c:	b6 01       	movw	r22, r12
     67e:	e0 d4       	rcall	.+2496   	; 0x1040 <__gesf2>
     680:	18 16       	cp	r1, r24
     682:	cc f2       	brlt	.-78     	; 0x636 <motor_calibrate_max_velocity+0x66>
		motor_get_position();
	}
	
	while(pos >= (pos_max-pos_min)*0.2){
     684:	60 91 e8 02 	lds	r22, 0x02E8
     688:	70 91 e9 02 	lds	r23, 0x02E9
     68c:	88 27       	eor	r24, r24
     68e:	77 fd       	sbrc	r23, 7
     690:	80 95       	com	r24
     692:	98 2f       	mov	r25, r24
     694:	25 d4       	rcall	.+2122   	; 0xee0 <__floatsisf>
     696:	6b 01       	movw	r12, r22
     698:	7c 01       	movw	r14, r24
     69a:	60 91 ea 02 	lds	r22, 0x02EA
     69e:	70 91 eb 02 	lds	r23, 0x02EB
     6a2:	80 91 c4 02 	lds	r24, 0x02C4
     6a6:	90 91 c5 02 	lds	r25, 0x02C5
     6aa:	68 1b       	sub	r22, r24
     6ac:	79 0b       	sbc	r23, r25
     6ae:	88 27       	eor	r24, r24
     6b0:	77 fd       	sbrc	r23, 7
     6b2:	80 95       	com	r24
     6b4:	98 2f       	mov	r25, r24
     6b6:	14 d4       	rcall	.+2088   	; 0xee0 <__floatsisf>
     6b8:	2d ec       	ldi	r18, 0xCD	; 205
     6ba:	3c ec       	ldi	r19, 0xCC	; 204
     6bc:	4c e4       	ldi	r20, 0x4C	; 76
     6be:	5e e3       	ldi	r21, 0x3E	; 62
     6c0:	c3 d4       	rcall	.+2438   	; 0x1048 <__mulsf3>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	ba d4       	rcall	.+2420   	; 0x1040 <__gesf2>
     6cc:	88 23       	and	r24, r24
     6ce:	6c f1       	brlt	.+90     	; 0x72a <motor_calibrate_max_velocity+0x15a>
     6d0:	c0 e0       	ldi	r28, 0x00	; 0
     6d2:	d0 e0       	ldi	r29, 0x00	; 0
		motor_get_position();
     6d4:	63 df       	rcall	.-314    	; 0x59c <motor_get_position>
		time_counter += timer_check_flag();
     6d6:	af d2       	rcall	.+1374   	; 0xc36 <timer_check_flag>
     6d8:	c8 0f       	add	r28, r24
     6da:	d1 1d       	adc	r29, r1
	
	while(pos > (pos_max-pos_min)*0.8){
		motor_get_position();
	}
	
	while(pos >= (pos_max-pos_min)*0.2){
     6dc:	60 91 e8 02 	lds	r22, 0x02E8
     6e0:	70 91 e9 02 	lds	r23, 0x02E9
     6e4:	88 27       	eor	r24, r24
     6e6:	77 fd       	sbrc	r23, 7
     6e8:	80 95       	com	r24
     6ea:	98 2f       	mov	r25, r24
     6ec:	f9 d3       	rcall	.+2034   	; 0xee0 <__floatsisf>
     6ee:	6b 01       	movw	r12, r22
     6f0:	7c 01       	movw	r14, r24
     6f2:	60 91 ea 02 	lds	r22, 0x02EA
     6f6:	70 91 eb 02 	lds	r23, 0x02EB
     6fa:	80 91 c4 02 	lds	r24, 0x02C4
     6fe:	90 91 c5 02 	lds	r25, 0x02C5
     702:	68 1b       	sub	r22, r24
     704:	79 0b       	sbc	r23, r25
     706:	88 27       	eor	r24, r24
     708:	77 fd       	sbrc	r23, 7
     70a:	80 95       	com	r24
     70c:	98 2f       	mov	r25, r24
     70e:	e8 d3       	rcall	.+2000   	; 0xee0 <__floatsisf>
     710:	2d ec       	ldi	r18, 0xCD	; 205
     712:	3c ec       	ldi	r19, 0xCC	; 204
     714:	4c e4       	ldi	r20, 0x4C	; 76
     716:	5e e3       	ldi	r21, 0x3E	; 62
     718:	97 d4       	rcall	.+2350   	; 0x1048 <__mulsf3>
     71a:	9b 01       	movw	r18, r22
     71c:	ac 01       	movw	r20, r24
     71e:	c7 01       	movw	r24, r14
     720:	b6 01       	movw	r22, r12
     722:	8e d4       	rcall	.+2332   	; 0x1040 <__gesf2>
     724:	88 23       	and	r24, r24
     726:	b4 f6       	brge	.-84     	; 0x6d4 <motor_calibrate_max_velocity+0x104>
     728:	02 c0       	rjmp	.+4      	; 0x72e <motor_calibrate_max_velocity+0x15e>
     72a:	c0 e0       	ldi	r28, 0x00	; 0
     72c:	d0 e0       	ldi	r29, 0x00	; 0
		motor_get_position();
		time_counter += timer_check_flag();
	}
	
	while(pos > (pos_max-pos_min)*0.1){
     72e:	60 91 e8 02 	lds	r22, 0x02E8
     732:	70 91 e9 02 	lds	r23, 0x02E9
     736:	88 27       	eor	r24, r24
     738:	77 fd       	sbrc	r23, 7
     73a:	80 95       	com	r24
     73c:	98 2f       	mov	r25, r24
     73e:	d0 d3       	rcall	.+1952   	; 0xee0 <__floatsisf>
     740:	6b 01       	movw	r12, r22
     742:	7c 01       	movw	r14, r24
     744:	60 91 ea 02 	lds	r22, 0x02EA
     748:	70 91 eb 02 	lds	r23, 0x02EB
     74c:	80 91 c4 02 	lds	r24, 0x02C4
     750:	90 91 c5 02 	lds	r25, 0x02C5
     754:	68 1b       	sub	r22, r24
     756:	79 0b       	sbc	r23, r25
     758:	88 27       	eor	r24, r24
     75a:	77 fd       	sbrc	r23, 7
     75c:	80 95       	com	r24
     75e:	98 2f       	mov	r25, r24
     760:	bf d3       	rcall	.+1918   	; 0xee0 <__floatsisf>
     762:	2d ec       	ldi	r18, 0xCD	; 205
     764:	3c ec       	ldi	r19, 0xCC	; 204
     766:	4c ec       	ldi	r20, 0xCC	; 204
     768:	5d e3       	ldi	r21, 0x3D	; 61
     76a:	6e d4       	rcall	.+2268   	; 0x1048 <__mulsf3>
     76c:	9b 01       	movw	r18, r22
     76e:	ac 01       	movw	r20, r24
     770:	c7 01       	movw	r24, r14
     772:	b6 01       	movw	r22, r12
     774:	65 d4       	rcall	.+2250   	; 0x1040 <__gesf2>
     776:	18 16       	cp	r1, r24
     778:	3c f5       	brge	.+78     	; 0x7c8 <motor_calibrate_max_velocity+0x1f8>
		motor_get_position();
     77a:	10 df       	rcall	.-480    	; 0x59c <motor_get_position>
	while(pos >= (pos_max-pos_min)*0.2){
		motor_get_position();
		time_counter += timer_check_flag();
	}
	
	while(pos > (pos_max-pos_min)*0.1){
     77c:	60 91 e8 02 	lds	r22, 0x02E8
     780:	70 91 e9 02 	lds	r23, 0x02E9
     784:	88 27       	eor	r24, r24
     786:	77 fd       	sbrc	r23, 7
     788:	80 95       	com	r24
     78a:	98 2f       	mov	r25, r24
     78c:	a9 d3       	rcall	.+1874   	; 0xee0 <__floatsisf>
     78e:	6b 01       	movw	r12, r22
     790:	7c 01       	movw	r14, r24
     792:	60 91 ea 02 	lds	r22, 0x02EA
     796:	70 91 eb 02 	lds	r23, 0x02EB
     79a:	80 91 c4 02 	lds	r24, 0x02C4
     79e:	90 91 c5 02 	lds	r25, 0x02C5
     7a2:	68 1b       	sub	r22, r24
     7a4:	79 0b       	sbc	r23, r25
     7a6:	88 27       	eor	r24, r24
     7a8:	77 fd       	sbrc	r23, 7
     7aa:	80 95       	com	r24
     7ac:	98 2f       	mov	r25, r24
     7ae:	98 d3       	rcall	.+1840   	; 0xee0 <__floatsisf>
     7b0:	2d ec       	ldi	r18, 0xCD	; 205
     7b2:	3c ec       	ldi	r19, 0xCC	; 204
     7b4:	4c ec       	ldi	r20, 0xCC	; 204
     7b6:	5d e3       	ldi	r21, 0x3D	; 61
     7b8:	47 d4       	rcall	.+2190   	; 0x1048 <__mulsf3>
     7ba:	9b 01       	movw	r18, r22
     7bc:	ac 01       	movw	r20, r24
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	3e d4       	rcall	.+2172   	; 0x1040 <__gesf2>
     7c4:	18 16       	cp	r1, r24
     7c6:	cc f2       	brlt	.-78     	; 0x77a <motor_calibrate_max_velocity+0x1aa>
		motor_get_position();
	}
	motor_set_motor_speed(0);
     7c8:	80 e0       	ldi	r24, 0x00	; 0
     7ca:	64 de       	rcall	.-824    	; 0x494 <motor_set_motor_speed>
	printf("p %i \t t %i \t v %i \n", (((pos_max-pos_min)/10)*6),(time_counter),((((pos_max-pos_min)/10)*6)/time_counter));
     7cc:	80 91 ea 02 	lds	r24, 0x02EA
     7d0:	90 91 eb 02 	lds	r25, 0x02EB
     7d4:	20 91 c4 02 	lds	r18, 0x02C4
     7d8:	30 91 c5 02 	lds	r19, 0x02C5
     7dc:	82 1b       	sub	r24, r18
     7de:	93 0b       	sbc	r25, r19
     7e0:	0a e0       	ldi	r16, 0x0A	; 10
     7e2:	10 e0       	ldi	r17, 0x00	; 0
     7e4:	b8 01       	movw	r22, r16
     7e6:	a7 d4       	rcall	.+2382   	; 0x1136 <__divmodhi4>
     7e8:	9b 01       	movw	r18, r22
     7ea:	22 0f       	add	r18, r18
     7ec:	33 1f       	adc	r19, r19
     7ee:	62 0f       	add	r22, r18
     7f0:	73 1f       	adc	r23, r19
     7f2:	9b 01       	movw	r18, r22
     7f4:	22 0f       	add	r18, r18
     7f6:	33 1f       	adc	r19, r19
     7f8:	c9 01       	movw	r24, r18
     7fa:	be 01       	movw	r22, r28
     7fc:	88 d4       	rcall	.+2320   	; 0x110e <__udivmodhi4>
     7fe:	7f 93       	push	r23
     800:	6f 93       	push	r22
     802:	df 93       	push	r29
     804:	cf 93       	push	r28
     806:	3f 93       	push	r19
     808:	2f 93       	push	r18
     80a:	8b e0       	ldi	r24, 0x0B	; 11
     80c:	92 e0       	ldi	r25, 0x02	; 2
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	f4 d4       	rcall	.+2536   	; 0x11fc <printf>
	
	return ((((pos_max-pos_min)/10)*6)/time_counter);
     814:	80 91 ea 02 	lds	r24, 0x02EA
     818:	90 91 eb 02 	lds	r25, 0x02EB
     81c:	20 91 c4 02 	lds	r18, 0x02C4
     820:	30 91 c5 02 	lds	r19, 0x02C5
     824:	82 1b       	sub	r24, r18
     826:	93 0b       	sbc	r25, r19
     828:	b8 01       	movw	r22, r16
     82a:	85 d4       	rcall	.+2314   	; 0x1136 <__divmodhi4>
     82c:	cb 01       	movw	r24, r22
     82e:	88 0f       	add	r24, r24
     830:	99 1f       	adc	r25, r25
     832:	68 0f       	add	r22, r24
     834:	79 1f       	adc	r23, r25
     836:	cb 01       	movw	r24, r22
     838:	88 0f       	add	r24, r24
     83a:	99 1f       	adc	r25, r25
     83c:	be 01       	movw	r22, r28
     83e:	67 d4       	rcall	.+2254   	; 0x110e <__udivmodhi4>
     840:	86 2f       	mov	r24, r22
     842:	2d b7       	in	r18, 0x3d	; 61
     844:	3e b7       	in	r19, 0x3e	; 62
     846:	28 5f       	subi	r18, 0xF8	; 248
     848:	3f 4f       	sbci	r19, 0xFF	; 255
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	3e bf       	out	0x3e, r19	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	2d bf       	out	0x3d, r18	; 61
}
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	1f 91       	pop	r17
     85a:	0f 91       	pop	r16
     85c:	ff 90       	pop	r15
     85e:	ef 90       	pop	r14
     860:	df 90       	pop	r13
     862:	cf 90       	pop	r12
     864:	08 95       	ret

00000866 <motor_calibrate_min_motor_speed>:

uint8_t motor_calibrate_min_motor_speed(int8_t direction){
     866:	ef 92       	push	r14
     868:	ff 92       	push	r15
     86a:	0f 93       	push	r16
     86c:	1f 93       	push	r17
     86e:	cf 93       	push	r28
     870:	df 93       	push	r29
     872:	c8 2f       	mov	r28, r24
	uint16_t motor_speed = 0;
	uint8_t time_counter = 0;
	motor_set_motor_speed(0);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	0e de       	rcall	.-996    	; 0x494 <motor_set_motor_speed>
	motor_set_direction(direction);
     878:	8c 2f       	mov	r24, r28
     87a:	20 de       	rcall	.-960    	; 0x4bc <motor_set_direction>
	int16_t t_vel = motor_get_velocity();
     87c:	9d de       	rcall	.-710    	; 0x5b8 <motor_get_velocity>
     87e:	8c 01       	movw	r16, r24
	printf("s %i,\tv %i,\n",motor_speed,t_vel);
     880:	1f 93       	push	r17
     882:	8f 93       	push	r24
     884:	1f 92       	push	r1
     886:	1f 92       	push	r1
     888:	26 e2       	ldi	r18, 0x26	; 38
     88a:	32 e0       	ldi	r19, 0x02	; 2
     88c:	3f 93       	push	r19
     88e:	2f 93       	push	r18
     890:	b5 d4       	rcall	.+2410   	; 0x11fc <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     892:	2f ef       	ldi	r18, 0xFF	; 255
     894:	83 ed       	ldi	r24, 0xD3	; 211
     896:	90 e3       	ldi	r25, 0x30	; 48
     898:	21 50       	subi	r18, 0x01	; 1
     89a:	80 40       	sbci	r24, 0x00	; 0
     89c:	90 40       	sbci	r25, 0x00	; 0
     89e:	e1 f7       	brne	.-8      	; 0x898 <motor_calibrate_min_motor_speed+0x32>
     8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <motor_calibrate_min_motor_speed+0x3c>
     8a2:	00 00       	nop
	_delay_ms(1000);
	motor_get_velocity();
     8a4:	89 de       	rcall	.-750    	; 0x5b8 <motor_get_velocity>
     8a6:	2f ef       	ldi	r18, 0xFF	; 255
     8a8:	83 ed       	ldi	r24, 0xD3	; 211
     8aa:	90 e3       	ldi	r25, 0x30	; 48
     8ac:	21 50       	subi	r18, 0x01	; 1
     8ae:	80 40       	sbci	r24, 0x00	; 0
     8b0:	90 40       	sbci	r25, 0x00	; 0
     8b2:	e1 f7       	brne	.-8      	; 0x8ac <motor_calibrate_min_motor_speed+0x46>
     8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <motor_calibrate_min_motor_speed+0x50>
     8b6:	00 00       	nop
	_delay_ms(1000);
	
	if (direction == MOTOR_POLARITY)
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	c1 30       	cpi	r28, 0x01	; 1
     8c6:	f1 f4       	brne	.+60     	; 0x904 <motor_calibrate_min_motor_speed+0x9e>
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
	{
		do{
			t_vel = motor_get_velocity();
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     8cc:	0f 2e       	mov	r0, r31
     8ce:	f6 e2       	ldi	r31, 0x26	; 38
     8d0:	ef 2e       	mov	r14, r31
     8d2:	f2 e0       	ldi	r31, 0x02	; 2
     8d4:	ff 2e       	mov	r15, r31
     8d6:	f0 2d       	mov	r31, r0
	_delay_ms(1000);
	
	if (direction == MOTOR_POLARITY)
	{
		do{
			t_vel = motor_get_velocity();
     8d8:	6f de       	rcall	.-802    	; 0x5b8 <motor_get_velocity>
     8da:	8c 01       	movw	r16, r24
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     8dc:	1f 93       	push	r17
     8de:	8f 93       	push	r24
     8e0:	df 93       	push	r29
     8e2:	cf 93       	push	r28
     8e4:	ff 92       	push	r15
     8e6:	ef 92       	push	r14
     8e8:	89 d4       	rcall	.+2322   	; 0x11fc <printf>
			motor_set_motor_speed(motor_speed);
     8ea:	8c 2f       	mov	r24, r28
     8ec:	d3 dd       	rcall	.-1114   	; 0x494 <motor_set_motor_speed>
			motor_speed++;
     8ee:	21 96       	adiw	r28, 0x01	; 1
		}while (t_vel < MIN_VELOCITY);
     8f0:	0f 90       	pop	r0
     8f2:	0f 90       	pop	r0
     8f4:	0f 90       	pop	r0
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0a 30       	cpi	r16, 0x0A	; 10
     8fe:	11 05       	cpc	r17, r1
     900:	5c f3       	brlt	.-42     	; 0x8d8 <motor_calibrate_min_motor_speed+0x72>
     902:	23 c0       	rjmp	.+70     	; 0x94a <motor_calibrate_min_motor_speed+0xe4>
	}
	
	if (direction == -MOTOR_POLARITY){
     904:	cf 3f       	cpi	r28, 0xFF	; 255
     906:	f9 f4       	brne	.+62     	; 0x946 <motor_calibrate_min_motor_speed+0xe0>
	
	return ((((pos_max-pos_min)/10)*6)/time_counter);
}

uint8_t motor_calibrate_min_motor_speed(int8_t direction){
	uint16_t motor_speed = 0;
     908:	c0 e0       	ldi	r28, 0x00	; 0
     90a:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	if (direction == -MOTOR_POLARITY){
		do{
			t_vel = motor_get_velocity();
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     90c:	0f 2e       	mov	r0, r31
     90e:	f6 e2       	ldi	r31, 0x26	; 38
     910:	ef 2e       	mov	r14, r31
     912:	f2 e0       	ldi	r31, 0x02	; 2
     914:	ff 2e       	mov	r15, r31
     916:	f0 2d       	mov	r31, r0
		}while (t_vel < MIN_VELOCITY);
	}
	
	if (direction == -MOTOR_POLARITY){
		do{
			t_vel = motor_get_velocity();
     918:	4f de       	rcall	.-866    	; 0x5b8 <motor_get_velocity>
     91a:	8c 01       	movw	r16, r24
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     91c:	1f 93       	push	r17
     91e:	8f 93       	push	r24
     920:	df 93       	push	r29
     922:	cf 93       	push	r28
     924:	ff 92       	push	r15
     926:	ef 92       	push	r14
     928:	69 d4       	rcall	.+2258   	; 0x11fc <printf>
			motor_set_motor_speed(motor_speed);
     92a:	8c 2f       	mov	r24, r28
     92c:	b3 dd       	rcall	.-1178   	; 0x494 <motor_set_motor_speed>
			motor_speed++;
     92e:	21 96       	adiw	r28, 0x01	; 1
		}while (t_vel > -MIN_VELOCITY);
     930:	0f 90       	pop	r0
     932:	0f 90       	pop	r0
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	07 3f       	cpi	r16, 0xF7	; 247
     93e:	8f ef       	ldi	r24, 0xFF	; 255
     940:	18 07       	cpc	r17, r24
     942:	54 f7       	brge	.-44     	; 0x918 <motor_calibrate_min_motor_speed+0xb2>
     944:	02 c0       	rjmp	.+4      	; 0x94a <motor_calibrate_min_motor_speed+0xe4>
	
	return ((((pos_max-pos_min)/10)*6)/time_counter);
}

uint8_t motor_calibrate_min_motor_speed(int8_t direction){
	uint16_t motor_speed = 0;
     946:	c0 e0       	ldi	r28, 0x00	; 0
     948:	d0 e0       	ldi	r29, 0x00	; 0
     94a:	9f ef       	ldi	r25, 0xFF	; 255
     94c:	23 ed       	ldi	r18, 0xD3	; 211
     94e:	80 e3       	ldi	r24, 0x30	; 48
     950:	91 50       	subi	r25, 0x01	; 1
     952:	20 40       	sbci	r18, 0x00	; 0
     954:	80 40       	sbci	r24, 0x00	; 0
     956:	e1 f7       	brne	.-8      	; 0x950 <motor_calibrate_min_motor_speed+0xea>
     958:	00 c0       	rjmp	.+0      	; 0x95a <motor_calibrate_min_motor_speed+0xf4>
     95a:	00 00       	nop
		}while (t_vel > -MIN_VELOCITY);
	}
	
	_delay_ms(1000);
		
	motor_set_motor_speed(0);
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	9a dd       	rcall	.-1228   	; 0x494 <motor_set_motor_speed>
	
	
	
	printf("FINAL\ts %i,\tv %i,\n",motor_speed,t_vel);
     960:	1f 93       	push	r17
     962:	0f 93       	push	r16
     964:	df 93       	push	r29
     966:	cf 93       	push	r28
     968:	80 e2       	ldi	r24, 0x20	; 32
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	45 d4       	rcall	.+2186   	; 0x11fc <printf>
	return motor_speed;
     972:	0f 90       	pop	r0
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
}
     97e:	8c 2f       	mov	r24, r28
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	1f 91       	pop	r17
     986:	0f 91       	pop	r16
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	08 95       	ret

0000098e <motor_calibrate>:
uint8_t motor_speed_min;
uint8_t motor_speed_max;

#define MIN_VELOCITY 10

float  motor_calibrate(uint8_t motor_speed){
     98e:	cf 93       	push	r28
     990:	c8 2f       	mov	r28, r24
	//Move sledge all the way to the right.
	motor_goto_end(motor_speed,-MOTOR_POLARITY);
     992:	6f ef       	ldi	r22, 0xFF	; 255
     994:	d0 dd       	rcall	.-1120   	; 0x536 <motor_goto_end>
	encoder_reset();
     996:	a2 dd       	rcall	.-1212   	; 0x4dc <encoder_reset>
	pos_max = motor_goto_end(motor_speed,MOTOR_POLARITY);
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	8c 2f       	mov	r24, r28
     99c:	cc dd       	rcall	.-1128   	; 0x536 <motor_goto_end>
     99e:	80 93 ea 02 	sts	0x02EA, r24
     9a2:	90 93 eb 02 	sts	0x02EB, r25
	
	//end_pos1 = motor_goto_end(motor_speed,-MOTOR_POLARITY);
	printf("E_min:%i\tE_Max: %i\n",pos_min, pos_max);
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	80 91 c5 02 	lds	r24, 0x02C5
     9ae:	8f 93       	push	r24
     9b0:	80 91 c4 02 	lds	r24, 0x02C4
     9b4:	8f 93       	push	r24
     9b6:	23 e3       	ldi	r18, 0x33	; 51
     9b8:	32 e0       	ldi	r19, 0x02	; 2
     9ba:	3f 93       	push	r19
     9bc:	2f 93       	push	r18
     9be:	1e d4       	rcall	.+2108   	; 0x11fc <printf>
	
	//Move sledge back and measure motor_speed.
	motor_speed_max = motor_speed;
     9c0:	c0 93 e4 02 	sts	0x02E4, r28
	
	vel_max = motor_calibrate_max_velocity(motor_speed,-MOTOR_POLARITY);
     9c4:	6f ef       	ldi	r22, 0xFF	; 255
     9c6:	8c 2f       	mov	r24, r28
     9c8:	03 de       	rcall	.-1018   	; 0x5d0 <motor_calibrate_max_velocity>
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	90 93 e3 02 	sts	0x02E3, r25
     9d0:	80 93 e2 02 	sts	0x02E2, r24
	motor_speed_min = motor_calibrate_min_motor_speed(MOTOR_POLARITY);
     9d4:	81 e0       	ldi	r24, 0x01	; 1
     9d6:	47 df       	rcall	.-370    	; 0x866 <motor_calibrate_min_motor_speed>
     9d8:	80 93 e5 02 	sts	0x02E5, r24
	motor_goto_end(motor_speed_min,MOTOR_POLARITY);
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	ab dd       	rcall	.-1194   	; 0x536 <motor_goto_end>
	uint8_t temp_motor_speed_min = motor_calibrate_min_motor_speed(-MOTOR_POLARITY);
     9e0:	8f ef       	ldi	r24, 0xFF	; 255
     9e2:	41 df       	rcall	.-382    	; 0x866 <motor_calibrate_min_motor_speed>
	if(temp_motor_speed_min > motor_speed_min){
     9e4:	0f 90       	pop	r0
     9e6:	0f 90       	pop	r0
     9e8:	0f 90       	pop	r0
     9ea:	0f 90       	pop	r0
     9ec:	0f 90       	pop	r0
     9ee:	0f 90       	pop	r0
     9f0:	90 91 e5 02 	lds	r25, 0x02E5
     9f4:	98 17       	cp	r25, r24
     9f6:	10 f4       	brcc	.+4      	; 0x9fc <motor_calibrate+0x6e>
		motor_speed_min = temp_motor_speed_min;
     9f8:	80 93 e5 02 	sts	0x02E5, r24
	}
	
	//float sMotor = vel_max /(motor_speed_max - motor_speed_min);
	return pos_max;
     9fc:	60 91 ea 02 	lds	r22, 0x02EA
     a00:	70 91 eb 02 	lds	r23, 0x02EB
     a04:	88 27       	eor	r24, r24
     a06:	77 fd       	sbrc	r23, 7
     a08:	80 95       	com	r24
     a0a:	98 2f       	mov	r25, r24
     a0c:	69 d2       	rcall	.+1234   	; 0xee0 <__floatsisf>
}
     a0e:	cf 91       	pop	r28
     a10:	08 95       	ret

00000a12 <motor_init>:
#include "../../common_library/uart.h"

int16_t motor_init(void){
	
	// Make all relevant motor pins output.
	MOTOR_DDR |= (1<<OEN)|(1<<RSTN)|(1<<SEL)|(1<<EN)|(1<<DIR);
     a12:	e1 e0       	ldi	r30, 0x01	; 1
     a14:	f1 e0       	ldi	r31, 0x01	; 1
     a16:	80 81       	ld	r24, Z
     a18:	8a 67       	ori	r24, 0x7A	; 122
     a1a:	80 83       	st	Z, r24
	
	// Make all encoder pins input.
	ENCODER_DDR = 0x00;
     a1c:	10 92 07 01 	sts	0x0107, r1
	
	// Enable motor.
	MOTOR_PORT |= (1<<EN);
     a20:	e2 e0       	ldi	r30, 0x02	; 2
     a22:	f1 e0       	ldi	r31, 0x01	; 1
     a24:	80 81       	ld	r24, Z
     a26:	80 61       	ori	r24, 0x10	; 16
     a28:	80 83       	st	Z, r24
	
	encoder_reset();
     a2a:	58 dd       	rcall	.-1360   	; 0x4dc <encoder_reset>
	
	int16_t pos_max = motor_calibrate(150);
     a2c:	86 e9       	ldi	r24, 0x96	; 150
     a2e:	af df       	rcall	.-162    	; 0x98e <motor_calibrate>
     a30:	24 d2       	rcall	.+1096   	; 0xe7a <__fixsfsi>
	return pos_max;
}
     a32:	cb 01       	movw	r24, r22
     a34:	08 95       	ret

00000a36 <pi_controller_init>:

float sMotor; 
float T_Update;
int16_t pos_max;

void pi_controller_init(float Ki_init, float Kp_init, float T_Update_init){
     a36:	ef 92       	push	r14
     a38:	ff 92       	push	r15
     a3a:	0f 93       	push	r16
     a3c:	1f 93       	push	r17
	pos_errSum = 0;
     a3e:	10 92 fb 02 	sts	0x02FB, r1
     a42:	10 92 fc 02 	sts	0x02FC, r1
     a46:	10 92 fd 02 	sts	0x02FD, r1
     a4a:	10 92 fe 02 	sts	0x02FE, r1
	pos_ref = 0;
     a4e:	10 92 f0 02 	sts	0x02F0, r1
	u = 0;
     a52:	10 92 05 03 	sts	0x0305, r1
     a56:	10 92 06 03 	sts	0x0306, r1
     a5a:	10 92 07 03 	sts	0x0307, r1
     a5e:	10 92 08 03 	sts	0x0308, r1
	Ki = Ki_init;
     a62:	60 93 ec 02 	sts	0x02EC, r22
     a66:	70 93 ed 02 	sts	0x02ED, r23
     a6a:	80 93 ee 02 	sts	0x02EE, r24
     a6e:	90 93 ef 02 	sts	0x02EF, r25
	Kp = Kp_init;
     a72:	20 93 f7 02 	sts	0x02F7, r18
     a76:	30 93 f8 02 	sts	0x02F8, r19
     a7a:	40 93 f9 02 	sts	0x02F9, r20
     a7e:	50 93 fa 02 	sts	0x02FA, r21
	T_Update = T_Update_init;
     a82:	e0 92 06 02 	sts	0x0206, r14
     a86:	f0 92 07 02 	sts	0x0207, r15
     a8a:	00 93 08 02 	sts	0x0208, r16
     a8e:	10 93 09 02 	sts	0x0209, r17
	
	initialize_timer(T_Update_init);
     a92:	c8 01       	movw	r24, r16
     a94:	b7 01       	movw	r22, r14
     a96:	8f d0       	rcall	.+286    	; 0xbb6 <initialize_timer>
	pos_max = motor_init();
     a98:	bc df       	rcall	.-136    	; 0xa12 <motor_init>
     a9a:	90 93 eb 02 	sts	0x02EB, r25
     a9e:	80 93 ea 02 	sts	0x02EA, r24
}
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(PWM_PERIOD);
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	80 ea       	ldi	r24, 0xA0	; 160
     ab2:	91 e4       	ldi	r25, 0x41	; 65
     ab4:	62 d0       	rcall	.+196    	; 0xb7a <pwm_init>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
			pwm_set_pulse_width(pulse_width);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	70 e0       	ldi	r23, 0x00	; 0
     aba:	80 ec       	ldi	r24, 0xC0	; 192
     abc:	9f e3       	ldi	r25, 0x3F	; 63
     abe:	47 c0       	rjmp	.+142    	; 0xb4e <pwm_set_pulse_width>
     ac0:	08 95       	ret

00000ac2 <init_all>:
		}
	}
	return 0;
}

void init_all(void){
     ac2:	ef 92       	push	r14
     ac4:	ff 92       	push	r15
     ac6:	0f 93       	push	r16
     ac8:	1f 93       	push	r17
	
	cli();
     aca:	f8 94       	cli
	init_UART();
     acc:	ae dc       	rcall	.-1700   	; 0x42a <init_UART>
	
	CAN_initialize();
     ace:	a9 db       	rcall	.-2222   	; 0x222 <CAN_initialize>
	printf("CAN initialized\n");
     ad0:	87 e4       	ldi	r24, 0x47	; 71
     ad2:	92 e0       	ldi	r25, 0x02	; 2
     ad4:	a4 d3       	rcall	.+1864   	; 0x121e <puts>
	TWI_Master_Initialise();
     ad6:	b9 d0       	rcall	.+370    	; 0xc4a <TWI_Master_Initialise>
	printf("TWI initialized\n");
     ad8:	87 e5       	ldi	r24, 0x57	; 87
     ada:	92 e0       	ldi	r25, 0x02	; 2
     adc:	a0 d3       	rcall	.+1856   	; 0x121e <puts>
	//Motor is being initialized by PI-Controller.
	//motor_init();
	//motor_calibrate(100);
	//printf("Motor initialized\n");
	servo_init();
     ade:	e6 df       	rcall	.-52     	; 0xaac <servo_init>
	printf("Servo initialized\n");
     ae0:	87 e6       	ldi	r24, 0x67	; 103
     ae2:	92 e0       	ldi	r25, 0x02	; 2
     ae4:	9c d3       	rcall	.+1848   	; 0x121e <puts>
	IR_init();
     ae6:	b2 dc       	rcall	.-1692   	; 0x44c <IR_init>
	printf("IR initialized\n");
     ae8:	89 e7       	ldi	r24, 0x79	; 121
     aea:	92 e0       	ldi	r25, 0x02	; 2
     aec:	98 d3       	rcall	.+1840   	; 0x121e <puts>
	//printf("solenoid\n");
	solenoid_init();
     aee:	61 d0       	rcall	.+194    	; 0xbb2 <solenoid_init>
	printf("Solenoid initialized\n");
     af0:	88 e8       	ldi	r24, 0x88	; 136
     af2:	92 e0       	ldi	r25, 0x02	; 2
     af4:	94 d3       	rcall	.+1832   	; 0x121e <puts>
	pi_controller_init(0.1,1,T_UPDATE);
     af6:	1a e0       	ldi	r17, 0x0A	; 10
     af8:	e1 2e       	mov	r14, r17
     afa:	17 ed       	ldi	r17, 0xD7	; 215
     afc:	f1 2e       	mov	r15, r17
     afe:	03 ea       	ldi	r16, 0xA3	; 163
     b00:	1c e3       	ldi	r17, 0x3C	; 60
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e8       	ldi	r20, 0x80	; 128
     b08:	5f e3       	ldi	r21, 0x3F	; 63
     b0a:	6d ec       	ldi	r22, 0xCD	; 205
     b0c:	7c ec       	ldi	r23, 0xCC	; 204
     b0e:	8c ec       	ldi	r24, 0xCC	; 204
     b10:	9d e3       	ldi	r25, 0x3D	; 61
     b12:	91 df       	rcall	.-222    	; 0xa36 <pi_controller_init>
	printf("PI_Controller initialized.\n");
     b14:	8d e9       	ldi	r24, 0x9D	; 157
     b16:	92 e0       	ldi	r25, 0x02	; 2
     b18:	82 d3       	rcall	.+1796   	; 0x121e <puts>
	//pi_controller_init(5,1,T_UPDATE);
	#if UART_ENABLE
		init_UART();
		printf("Program initialized\n");
	#endif
	sei();
     b1a:	78 94       	sei
}
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <main>:
void init_all(void);
#include	"../../common_library/uart.h"//REMOVE ME
#include	"pi_controller.h"
#include	"solenoid.h"

int main(void){
     b26:	cf 93       	push	r28
     b28:	df 93       	push	r29
     b2a:	00 d0       	rcall	.+0      	; 0xb2c <main+0x6>
     b2c:	00 d0       	rcall	.+0      	; 0xb2e <main+0x8>
     b2e:	cd b7       	in	r28, 0x3d	; 61
     b30:	de b7       	in	r29, 0x3e	; 62
	
	init_all();
     b32:	c7 df       	rcall	.-114    	; 0xac2 <init_all>

	uint8_t* score[CAN_GAME_SCORE_LENGTH];
	score[2] = 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	9e 83       	std	Y+6, r25	; 0x06
     b3a:	8d 83       	std	Y+5, r24	; 0x05
	//Send score to Node1
	CAN_construct_message(CAN_GAME_SCORE_ID, CAN_GAME_SCORE_LENGTH);
     b3c:	63 e0       	ldi	r22, 0x03	; 3
     b3e:	8e e1       	ldi	r24, 0x1E	; 30
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	42 db       	rcall	.-2428   	; 0x1c8 <CAN_construct_message>
	CAN_message_send(score,0);
     b44:	60 e0       	ldi	r22, 0x00	; 0
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	e6 db       	rcall	.-2100   	; 0x318 <CAN_message_send>
     b4c:	ff cf       	rjmp	.-2      	; 0xb4c <main+0x26>

00000b4e <pwm_set_pulse_width>:
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	PWM_OCRnA = (int)(SCALAR_IN_MS * val);
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	4a e7       	ldi	r20, 0x7A	; 122
     b54:	51 e4       	ldi	r21, 0x41	; 65
     b56:	78 d2       	rcall	.+1264   	; 0x1048 <__mulsf3>
     b58:	90 d1       	rcall	.+800    	; 0xe7a <__fixsfsi>
     b5a:	70 93 99 00 	sts	0x0099, r23
     b5e:	60 93 98 00 	sts	0x0098, r22
     b62:	08 95       	ret

00000b64 <pwm_set_period>:
}

void pwm_set_period(double period){
	PWM_ICRn = (int)(SCALAR_IN_MS * period);
     b64:	20 e0       	ldi	r18, 0x00	; 0
     b66:	30 e0       	ldi	r19, 0x00	; 0
     b68:	4a e7       	ldi	r20, 0x7A	; 122
     b6a:	51 e4       	ldi	r21, 0x41	; 65
     b6c:	6d d2       	rcall	.+1242   	; 0x1048 <__mulsf3>
     b6e:	85 d1       	rcall	.+778    	; 0xe7a <__fixsfsi>
     b70:	70 93 97 00 	sts	0x0097, r23
     b74:	60 93 96 00 	sts	0x0096, r22
     b78:	08 95       	ret

00000b7a <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	PWM_DDR |= (1 << PWM_PIN);
     b7a:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	PWM_TCCRnA &= ~(1<<WGM30);
     b7c:	e0 e9       	ldi	r30, 0x90	; 144
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	20 81       	ld	r18, Z
     b82:	2e 7f       	andi	r18, 0xFE	; 254
     b84:	20 83       	st	Z, r18
	PWM_TCCRnA |= (1<<WGM31);
     b86:	20 81       	ld	r18, Z
     b88:	22 60       	ori	r18, 0x02	; 2
     b8a:	20 83       	st	Z, r18
	PWM_TCCRnB |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
     b8c:	a1 e9       	ldi	r26, 0x91	; 145
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	2c 91       	ld	r18, X
     b92:	28 61       	ori	r18, 0x18	; 24
     b94:	2c 93       	st	X, r18
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	PWM_TCCRnA |= (1<<COM3A1);
     b96:	20 81       	ld	r18, Z
     b98:	20 68       	ori	r18, 0x80	; 128
     b9a:	20 83       	st	Z, r18
	PWM_TCCRnA &= ~(1<<COM3A0);
     b9c:	20 81       	ld	r18, Z
     b9e:	2f 7b       	andi	r18, 0xBF	; 191
     ba0:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	PWM_TCCRnB |= (1<<CS32) | (1<<CS30);
     ba2:	2c 91       	ld	r18, X
     ba4:	25 60       	ori	r18, 0x05	; 5
     ba6:	2c 93       	st	X, r18
	PWM_TCCRnB &= ~(1<<CS31);
     ba8:	2c 91       	ld	r18, X
     baa:	2d 7f       	andi	r18, 0xFD	; 253
     bac:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
     bae:	da cf       	rjmp	.-76     	; 0xb64 <pwm_set_period>
     bb0:	08 95       	ret

00000bb2 <solenoid_init>:

#include "solenoid.h"


void solenoid_init(void){
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     bb2:	27 9a       	sbi	0x04, 7	; 4
     bb4:	08 95       	ret

00000bb6 <initialize_timer>:
uint16_t score_count;

void initialize_timer(float T_Update){
	
	//Enable interrupt. When timer is the same as OCR4A it sends an interrupt.
	TIMSK4 |= (1<<OCIE4A);
     bb6:	e2 e7       	ldi	r30, 0x72	; 114
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	20 81       	ld	r18, Z
     bbc:	22 60       	ori	r18, 0x02	; 2
     bbe:	20 83       	st	Z, r18
	
	// Reset timer.
	TCNT4 = 0x0000;
     bc0:	10 92 a5 00 	sts	0x00A5, r1
     bc4:	10 92 a4 00 	sts	0x00A4, r1
	
	// Use CTC mode.
	TCCR4B |= (1<<WGM42);
     bc8:	e1 ea       	ldi	r30, 0xA1	; 161
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 81       	ld	r18, Z
     bce:	28 60       	ori	r18, 0x08	; 8
     bd0:	20 83       	st	Z, r18
	TCCR4B &= ~(1<<WGM43);
     bd2:	20 81       	ld	r18, Z
     bd4:	2f 7e       	andi	r18, 0xEF	; 239
     bd6:	20 83       	st	Z, r18
	#elif TIMER_PRESCALER == 64
	TCCR4B |= (1<<CS41)|(1<<CS40);
	#elif TIMER_PRESCALER == 256
	TCCR4B |= (1<<CS42);
	#elif TIMER_PRESCALER == 1024
	TCCR4B |= (1<<CS42)|(1<<CS40);
     bd8:	20 81       	ld	r18, Z
     bda:	25 60       	ori	r18, 0x05	; 5
     bdc:	20 83       	st	Z, r18
	#endif

	// Set counter limit.
	OCR4A = (F_CPU/(TIMER_PRESCALER))*T_Update - 1;
     bde:	20 e0       	ldi	r18, 0x00	; 0
     be0:	34 e2       	ldi	r19, 0x24	; 36
     be2:	44 e7       	ldi	r20, 0x74	; 116
     be4:	56 e4       	ldi	r21, 0x46	; 70
     be6:	30 d2       	rcall	.+1120   	; 0x1048 <__mulsf3>
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	db d0       	rcall	.+438    	; 0xda8 <__subsf3>
     bf2:	48 d1       	rcall	.+656    	; 0xe84 <__fixunssfsi>
     bf4:	70 93 a9 00 	sts	0x00A9, r23
     bf8:	60 93 a8 00 	sts	0x00A8, r22
	update_flag = 0;
     bfc:	10 92 09 03 	sts	0x0309, r1
     c00:	08 95       	ret

00000c02 <__vector_42>:
}

ISR(TIMER4_COMPA_vect){//interrupt when Timer_0 is done, resets itself
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	8f 93       	push	r24
     c0e:	9f 93       	push	r25
	update_flag = 1;
     c10:	81 e0       	ldi	r24, 0x01	; 1
     c12:	80 93 09 03 	sts	0x0309, r24
	score_count++;
     c16:	80 91 de 02 	lds	r24, 0x02DE
     c1a:	90 91 df 02 	lds	r25, 0x02DF
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	90 93 df 02 	sts	0x02DF, r25
     c24:	80 93 de 02 	sts	0x02DE, r24
	//printf("INT");
	//TIFR4 &= ~(1<<OCF1A);
}
     c28:	9f 91       	pop	r25
     c2a:	8f 91       	pop	r24
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <timer_check_flag>:

uint8_t timer_check_flag(void){
	if (update_flag)
     c36:	80 91 09 03 	lds	r24, 0x0309
     c3a:	88 23       	and	r24, r24
     c3c:	21 f0       	breq	.+8      	; 0xc46 <timer_check_flag+0x10>
	{
		update_flag = 0;
     c3e:	10 92 09 03 	sts	0x0309, r1
		return 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	08 95       	ret
	}
	return 0;
     c46:	80 e0       	ldi	r24, 0x00	; 0
}
     c48:	08 95       	ret

00000c4a <TWI_Master_Initialise>:
     c4a:	8c e0       	ldi	r24, 0x0C	; 12
     c4c:	80 93 b8 00 	sts	0x00B8, r24
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	80 93 bb 00 	sts	0x00BB, r24
     c56:	84 e0       	ldi	r24, 0x04	; 4
     c58:	80 93 bc 00 	sts	0x00BC, r24
     c5c:	08 95       	ret

00000c5e <TWI_Start_Transceiver_With_Data>:
     c5e:	ec eb       	ldi	r30, 0xBC	; 188
     c60:	f0 e0       	ldi	r31, 0x00	; 0
     c62:	20 81       	ld	r18, Z
     c64:	20 fd       	sbrc	r18, 0
     c66:	fd cf       	rjmp	.-6      	; 0xc62 <TWI_Start_Transceiver_With_Data+0x4>
     c68:	60 93 c8 02 	sts	0x02C8, r22
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 81       	ld	r18, Z
     c70:	20 93 c9 02 	sts	0x02C9, r18
     c74:	20 fd       	sbrc	r18, 0
     c76:	0c c0       	rjmp	.+24     	; 0xc90 <TWI_Start_Transceiver_With_Data+0x32>
     c78:	62 30       	cpi	r22, 0x02	; 2
     c7a:	50 f0       	brcs	.+20     	; 0xc90 <TWI_Start_Transceiver_With_Data+0x32>
     c7c:	dc 01       	movw	r26, r24
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	ea ec       	ldi	r30, 0xCA	; 202
     c82:	f2 e0       	ldi	r31, 0x02	; 2
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	9d 91       	ld	r25, X+
     c88:	91 93       	st	Z+, r25
     c8a:	8f 5f       	subi	r24, 0xFF	; 255
     c8c:	86 13       	cpse	r24, r22
     c8e:	fb cf       	rjmp	.-10     	; 0xc86 <TWI_Start_Transceiver_With_Data+0x28>
     c90:	10 92 c7 02 	sts	0x02C7, r1
     c94:	88 ef       	ldi	r24, 0xF8	; 248
     c96:	80 93 0a 02 	sts	0x020A, r24
     c9a:	85 ea       	ldi	r24, 0xA5	; 165
     c9c:	80 93 bc 00 	sts	0x00BC, r24
     ca0:	08 95       	ret

00000ca2 <__vector_39>:
     ca2:	1f 92       	push	r1
     ca4:	0f 92       	push	r0
     ca6:	0f b6       	in	r0, 0x3f	; 63
     ca8:	0f 92       	push	r0
     caa:	11 24       	eor	r1, r1
     cac:	0b b6       	in	r0, 0x3b	; 59
     cae:	0f 92       	push	r0
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	8f 93       	push	r24
     cb6:	9f 93       	push	r25
     cb8:	af 93       	push	r26
     cba:	bf 93       	push	r27
     cbc:	ef 93       	push	r30
     cbe:	ff 93       	push	r31
     cc0:	80 91 b9 00 	lds	r24, 0x00B9
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	fc 01       	movw	r30, r24
     cc8:	38 97       	sbiw	r30, 0x08	; 8
     cca:	e1 35       	cpi	r30, 0x51	; 81
     ccc:	f1 05       	cpc	r31, r1
     cce:	08 f0       	brcs	.+2      	; 0xcd2 <__vector_39+0x30>
     cd0:	55 c0       	rjmp	.+170    	; 0xd7c <__vector_39+0xda>
     cd2:	ee 58       	subi	r30, 0x8E	; 142
     cd4:	ff 4f       	sbci	r31, 0xFF	; 255
     cd6:	42 c2       	rjmp	.+1156   	; 0x115c <__tablejump2__>
     cd8:	10 92 c6 02 	sts	0x02C6, r1
     cdc:	e0 91 c6 02 	lds	r30, 0x02C6
     ce0:	80 91 c8 02 	lds	r24, 0x02C8
     ce4:	e8 17       	cp	r30, r24
     ce6:	70 f4       	brcc	.+28     	; 0xd04 <__vector_39+0x62>
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	8e 0f       	add	r24, r30
     cec:	80 93 c6 02 	sts	0x02C6, r24
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	e7 53       	subi	r30, 0x37	; 55
     cf4:	fd 4f       	sbci	r31, 0xFD	; 253
     cf6:	80 81       	ld	r24, Z
     cf8:	80 93 bb 00 	sts	0x00BB, r24
     cfc:	85 e8       	ldi	r24, 0x85	; 133
     cfe:	80 93 bc 00 	sts	0x00BC, r24
     d02:	43 c0       	rjmp	.+134    	; 0xd8a <__vector_39+0xe8>
     d04:	80 91 c7 02 	lds	r24, 0x02C7
     d08:	81 60       	ori	r24, 0x01	; 1
     d0a:	80 93 c7 02 	sts	0x02C7, r24
     d0e:	84 e9       	ldi	r24, 0x94	; 148
     d10:	80 93 bc 00 	sts	0x00BC, r24
     d14:	3a c0       	rjmp	.+116    	; 0xd8a <__vector_39+0xe8>
     d16:	e0 91 c6 02 	lds	r30, 0x02C6
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	8e 0f       	add	r24, r30
     d1e:	80 93 c6 02 	sts	0x02C6, r24
     d22:	80 91 bb 00 	lds	r24, 0x00BB
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	e7 53       	subi	r30, 0x37	; 55
     d2a:	fd 4f       	sbci	r31, 0xFD	; 253
     d2c:	80 83       	st	Z, r24
     d2e:	20 91 c6 02 	lds	r18, 0x02C6
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	80 91 c8 02 	lds	r24, 0x02C8
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	01 97       	sbiw	r24, 0x01	; 1
     d3c:	28 17       	cp	r18, r24
     d3e:	39 07       	cpc	r19, r25
     d40:	24 f4       	brge	.+8      	; 0xd4a <__vector_39+0xa8>
     d42:	85 ec       	ldi	r24, 0xC5	; 197
     d44:	80 93 bc 00 	sts	0x00BC, r24
     d48:	20 c0       	rjmp	.+64     	; 0xd8a <__vector_39+0xe8>
     d4a:	85 e8       	ldi	r24, 0x85	; 133
     d4c:	80 93 bc 00 	sts	0x00BC, r24
     d50:	1c c0       	rjmp	.+56     	; 0xd8a <__vector_39+0xe8>
     d52:	80 91 bb 00 	lds	r24, 0x00BB
     d56:	e0 91 c6 02 	lds	r30, 0x02C6
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	e7 53       	subi	r30, 0x37	; 55
     d5e:	fd 4f       	sbci	r31, 0xFD	; 253
     d60:	80 83       	st	Z, r24
     d62:	80 91 c7 02 	lds	r24, 0x02C7
     d66:	81 60       	ori	r24, 0x01	; 1
     d68:	80 93 c7 02 	sts	0x02C7, r24
     d6c:	84 e9       	ldi	r24, 0x94	; 148
     d6e:	80 93 bc 00 	sts	0x00BC, r24
     d72:	0b c0       	rjmp	.+22     	; 0xd8a <__vector_39+0xe8>
     d74:	85 ea       	ldi	r24, 0xA5	; 165
     d76:	80 93 bc 00 	sts	0x00BC, r24
     d7a:	07 c0       	rjmp	.+14     	; 0xd8a <__vector_39+0xe8>
     d7c:	80 91 b9 00 	lds	r24, 0x00B9
     d80:	80 93 0a 02 	sts	0x020A, r24
     d84:	84 e0       	ldi	r24, 0x04	; 4
     d86:	80 93 bc 00 	sts	0x00BC, r24
     d8a:	ff 91       	pop	r31
     d8c:	ef 91       	pop	r30
     d8e:	bf 91       	pop	r27
     d90:	af 91       	pop	r26
     d92:	9f 91       	pop	r25
     d94:	8f 91       	pop	r24
     d96:	3f 91       	pop	r19
     d98:	2f 91       	pop	r18
     d9a:	0f 90       	pop	r0
     d9c:	0b be       	out	0x3b, r0	; 59
     d9e:	0f 90       	pop	r0
     da0:	0f be       	out	0x3f, r0	; 63
     da2:	0f 90       	pop	r0
     da4:	1f 90       	pop	r1
     da6:	18 95       	reti

00000da8 <__subsf3>:
     da8:	50 58       	subi	r21, 0x80	; 128

00000daa <__addsf3>:
     daa:	bb 27       	eor	r27, r27
     dac:	aa 27       	eor	r26, r26
     dae:	0e d0       	rcall	.+28     	; 0xdcc <__addsf3x>
     db0:	0d c1       	rjmp	.+538    	; 0xfcc <__fp_round>
     db2:	fe d0       	rcall	.+508    	; 0xfb0 <__fp_pscA>
     db4:	30 f0       	brcs	.+12     	; 0xdc2 <__addsf3+0x18>
     db6:	03 d1       	rcall	.+518    	; 0xfbe <__fp_pscB>
     db8:	20 f0       	brcs	.+8      	; 0xdc2 <__addsf3+0x18>
     dba:	31 f4       	brne	.+12     	; 0xdc8 <__addsf3+0x1e>
     dbc:	9f 3f       	cpi	r25, 0xFF	; 255
     dbe:	11 f4       	brne	.+4      	; 0xdc4 <__addsf3+0x1a>
     dc0:	1e f4       	brtc	.+6      	; 0xdc8 <__addsf3+0x1e>
     dc2:	f3 c0       	rjmp	.+486    	; 0xfaa <__fp_nan>
     dc4:	0e f4       	brtc	.+2      	; 0xdc8 <__addsf3+0x1e>
     dc6:	e0 95       	com	r30
     dc8:	e7 fb       	bst	r30, 7
     dca:	e9 c0       	rjmp	.+466    	; 0xf9e <__fp_inf>

00000dcc <__addsf3x>:
     dcc:	e9 2f       	mov	r30, r25
     dce:	0f d1       	rcall	.+542    	; 0xfee <__fp_split3>
     dd0:	80 f3       	brcs	.-32     	; 0xdb2 <__addsf3+0x8>
     dd2:	ba 17       	cp	r27, r26
     dd4:	62 07       	cpc	r22, r18
     dd6:	73 07       	cpc	r23, r19
     dd8:	84 07       	cpc	r24, r20
     dda:	95 07       	cpc	r25, r21
     ddc:	18 f0       	brcs	.+6      	; 0xde4 <__addsf3x+0x18>
     dde:	71 f4       	brne	.+28     	; 0xdfc <__addsf3x+0x30>
     de0:	9e f5       	brtc	.+102    	; 0xe48 <__addsf3x+0x7c>
     de2:	27 c1       	rjmp	.+590    	; 0x1032 <__fp_zero>
     de4:	0e f4       	brtc	.+2      	; 0xde8 <__addsf3x+0x1c>
     de6:	e0 95       	com	r30
     de8:	0b 2e       	mov	r0, r27
     dea:	ba 2f       	mov	r27, r26
     dec:	a0 2d       	mov	r26, r0
     dee:	0b 01       	movw	r0, r22
     df0:	b9 01       	movw	r22, r18
     df2:	90 01       	movw	r18, r0
     df4:	0c 01       	movw	r0, r24
     df6:	ca 01       	movw	r24, r20
     df8:	a0 01       	movw	r20, r0
     dfa:	11 24       	eor	r1, r1
     dfc:	ff 27       	eor	r31, r31
     dfe:	59 1b       	sub	r21, r25
     e00:	99 f0       	breq	.+38     	; 0xe28 <__addsf3x+0x5c>
     e02:	59 3f       	cpi	r21, 0xF9	; 249
     e04:	50 f4       	brcc	.+20     	; 0xe1a <__addsf3x+0x4e>
     e06:	50 3e       	cpi	r21, 0xE0	; 224
     e08:	68 f1       	brcs	.+90     	; 0xe64 <__addsf3x+0x98>
     e0a:	1a 16       	cp	r1, r26
     e0c:	f0 40       	sbci	r31, 0x00	; 0
     e0e:	a2 2f       	mov	r26, r18
     e10:	23 2f       	mov	r18, r19
     e12:	34 2f       	mov	r19, r20
     e14:	44 27       	eor	r20, r20
     e16:	58 5f       	subi	r21, 0xF8	; 248
     e18:	f3 cf       	rjmp	.-26     	; 0xe00 <__addsf3x+0x34>
     e1a:	46 95       	lsr	r20
     e1c:	37 95       	ror	r19
     e1e:	27 95       	ror	r18
     e20:	a7 95       	ror	r26
     e22:	f0 40       	sbci	r31, 0x00	; 0
     e24:	53 95       	inc	r21
     e26:	c9 f7       	brne	.-14     	; 0xe1a <__addsf3x+0x4e>
     e28:	7e f4       	brtc	.+30     	; 0xe48 <__addsf3x+0x7c>
     e2a:	1f 16       	cp	r1, r31
     e2c:	ba 0b       	sbc	r27, r26
     e2e:	62 0b       	sbc	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	84 0b       	sbc	r24, r20
     e34:	ba f0       	brmi	.+46     	; 0xe64 <__addsf3x+0x98>
     e36:	91 50       	subi	r25, 0x01	; 1
     e38:	a1 f0       	breq	.+40     	; 0xe62 <__addsf3x+0x96>
     e3a:	ff 0f       	add	r31, r31
     e3c:	bb 1f       	adc	r27, r27
     e3e:	66 1f       	adc	r22, r22
     e40:	77 1f       	adc	r23, r23
     e42:	88 1f       	adc	r24, r24
     e44:	c2 f7       	brpl	.-16     	; 0xe36 <__addsf3x+0x6a>
     e46:	0e c0       	rjmp	.+28     	; 0xe64 <__addsf3x+0x98>
     e48:	ba 0f       	add	r27, r26
     e4a:	62 1f       	adc	r22, r18
     e4c:	73 1f       	adc	r23, r19
     e4e:	84 1f       	adc	r24, r20
     e50:	48 f4       	brcc	.+18     	; 0xe64 <__addsf3x+0x98>
     e52:	87 95       	ror	r24
     e54:	77 95       	ror	r23
     e56:	67 95       	ror	r22
     e58:	b7 95       	ror	r27
     e5a:	f7 95       	ror	r31
     e5c:	9e 3f       	cpi	r25, 0xFE	; 254
     e5e:	08 f0       	brcs	.+2      	; 0xe62 <__addsf3x+0x96>
     e60:	b3 cf       	rjmp	.-154    	; 0xdc8 <__addsf3+0x1e>
     e62:	93 95       	inc	r25
     e64:	88 0f       	add	r24, r24
     e66:	08 f0       	brcs	.+2      	; 0xe6a <__addsf3x+0x9e>
     e68:	99 27       	eor	r25, r25
     e6a:	ee 0f       	add	r30, r30
     e6c:	97 95       	ror	r25
     e6e:	87 95       	ror	r24
     e70:	08 95       	ret

00000e72 <__cmpsf2>:
     e72:	71 d0       	rcall	.+226    	; 0xf56 <__fp_cmp>
     e74:	08 f4       	brcc	.+2      	; 0xe78 <__cmpsf2+0x6>
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	08 95       	ret

00000e7a <__fixsfsi>:
     e7a:	04 d0       	rcall	.+8      	; 0xe84 <__fixunssfsi>
     e7c:	68 94       	set
     e7e:	b1 11       	cpse	r27, r1
     e80:	d9 c0       	rjmp	.+434    	; 0x1034 <__fp_szero>
     e82:	08 95       	ret

00000e84 <__fixunssfsi>:
     e84:	bc d0       	rcall	.+376    	; 0xffe <__fp_splitA>
     e86:	88 f0       	brcs	.+34     	; 0xeaa <__fixunssfsi+0x26>
     e88:	9f 57       	subi	r25, 0x7F	; 127
     e8a:	90 f0       	brcs	.+36     	; 0xeb0 <__fixunssfsi+0x2c>
     e8c:	b9 2f       	mov	r27, r25
     e8e:	99 27       	eor	r25, r25
     e90:	b7 51       	subi	r27, 0x17	; 23
     e92:	a0 f0       	brcs	.+40     	; 0xebc <__fixunssfsi+0x38>
     e94:	d1 f0       	breq	.+52     	; 0xeca <__fixunssfsi+0x46>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	1a f0       	brmi	.+6      	; 0xea6 <__fixunssfsi+0x22>
     ea0:	ba 95       	dec	r27
     ea2:	c9 f7       	brne	.-14     	; 0xe96 <__fixunssfsi+0x12>
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <__fixunssfsi+0x46>
     ea6:	b1 30       	cpi	r27, 0x01	; 1
     ea8:	81 f0       	breq	.+32     	; 0xeca <__fixunssfsi+0x46>
     eaa:	c3 d0       	rcall	.+390    	; 0x1032 <__fp_zero>
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	08 95       	ret
     eb0:	c0 c0       	rjmp	.+384    	; 0x1032 <__fp_zero>
     eb2:	67 2f       	mov	r22, r23
     eb4:	78 2f       	mov	r23, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	b8 5f       	subi	r27, 0xF8	; 248
     eba:	39 f0       	breq	.+14     	; 0xeca <__fixunssfsi+0x46>
     ebc:	b9 3f       	cpi	r27, 0xF9	; 249
     ebe:	cc f3       	brlt	.-14     	; 0xeb2 <__fixunssfsi+0x2e>
     ec0:	86 95       	lsr	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b3 95       	inc	r27
     ec8:	d9 f7       	brne	.-10     	; 0xec0 <__fixunssfsi+0x3c>
     eca:	3e f4       	brtc	.+14     	; 0xeda <__fixunssfsi+0x56>
     ecc:	90 95       	com	r25
     ece:	80 95       	com	r24
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__floatunsisf>:
     edc:	e8 94       	clt
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <__floatsisf+0x12>

00000ee0 <__floatsisf>:
     ee0:	97 fb       	bst	r25, 7
     ee2:	3e f4       	brtc	.+14     	; 0xef2 <__floatsisf+0x12>
     ee4:	90 95       	com	r25
     ee6:	80 95       	com	r24
     ee8:	70 95       	com	r23
     eea:	61 95       	neg	r22
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	99 23       	and	r25, r25
     ef4:	a9 f0       	breq	.+42     	; 0xf20 <__floatsisf+0x40>
     ef6:	f9 2f       	mov	r31, r25
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	bb 27       	eor	r27, r27
     efc:	93 95       	inc	r25
     efe:	f6 95       	lsr	r31
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f1 11       	cpse	r31, r1
     f0a:	f8 cf       	rjmp	.-16     	; 0xefc <__floatsisf+0x1c>
     f0c:	fa f4       	brpl	.+62     	; 0xf4c <__floatsisf+0x6c>
     f0e:	bb 0f       	add	r27, r27
     f10:	11 f4       	brne	.+4      	; 0xf16 <__floatsisf+0x36>
     f12:	60 ff       	sbrs	r22, 0
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <__floatsisf+0x6c>
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	16 c0       	rjmp	.+44     	; 0xf4c <__floatsisf+0x6c>
     f20:	88 23       	and	r24, r24
     f22:	11 f0       	breq	.+4      	; 0xf28 <__floatsisf+0x48>
     f24:	96 e9       	ldi	r25, 0x96	; 150
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <__floatsisf+0x6a>
     f28:	77 23       	and	r23, r23
     f2a:	21 f0       	breq	.+8      	; 0xf34 <__floatsisf+0x54>
     f2c:	9e e8       	ldi	r25, 0x8E	; 142
     f2e:	87 2f       	mov	r24, r23
     f30:	76 2f       	mov	r23, r22
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <__floatsisf+0x5e>
     f34:	66 23       	and	r22, r22
     f36:	71 f0       	breq	.+28     	; 0xf54 <__floatsisf+0x74>
     f38:	96 e8       	ldi	r25, 0x86	; 134
     f3a:	86 2f       	mov	r24, r22
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	2a f0       	brmi	.+10     	; 0xf4c <__floatsisf+0x6c>
     f42:	9a 95       	dec	r25
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	da f7       	brpl	.-10     	; 0xf42 <__floatsisf+0x62>
     f4c:	88 0f       	add	r24, r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <__fp_cmp>:
     f56:	99 0f       	add	r25, r25
     f58:	00 08       	sbc	r0, r0
     f5a:	55 0f       	add	r21, r21
     f5c:	aa 0b       	sbc	r26, r26
     f5e:	e0 e8       	ldi	r30, 0x80	; 128
     f60:	fe ef       	ldi	r31, 0xFE	; 254
     f62:	16 16       	cp	r1, r22
     f64:	17 06       	cpc	r1, r23
     f66:	e8 07       	cpc	r30, r24
     f68:	f9 07       	cpc	r31, r25
     f6a:	c0 f0       	brcs	.+48     	; 0xf9c <__fp_cmp+0x46>
     f6c:	12 16       	cp	r1, r18
     f6e:	13 06       	cpc	r1, r19
     f70:	e4 07       	cpc	r30, r20
     f72:	f5 07       	cpc	r31, r21
     f74:	98 f0       	brcs	.+38     	; 0xf9c <__fp_cmp+0x46>
     f76:	62 1b       	sub	r22, r18
     f78:	73 0b       	sbc	r23, r19
     f7a:	84 0b       	sbc	r24, r20
     f7c:	95 0b       	sbc	r25, r21
     f7e:	39 f4       	brne	.+14     	; 0xf8e <__fp_cmp+0x38>
     f80:	0a 26       	eor	r0, r26
     f82:	61 f0       	breq	.+24     	; 0xf9c <__fp_cmp+0x46>
     f84:	23 2b       	or	r18, r19
     f86:	24 2b       	or	r18, r20
     f88:	25 2b       	or	r18, r21
     f8a:	21 f4       	brne	.+8      	; 0xf94 <__fp_cmp+0x3e>
     f8c:	08 95       	ret
     f8e:	0a 26       	eor	r0, r26
     f90:	09 f4       	brne	.+2      	; 0xf94 <__fp_cmp+0x3e>
     f92:	a1 40       	sbci	r26, 0x01	; 1
     f94:	a6 95       	lsr	r26
     f96:	8f ef       	ldi	r24, 0xFF	; 255
     f98:	81 1d       	adc	r24, r1
     f9a:	81 1d       	adc	r24, r1
     f9c:	08 95       	ret

00000f9e <__fp_inf>:
     f9e:	97 f9       	bld	r25, 7
     fa0:	9f 67       	ori	r25, 0x7F	; 127
     fa2:	80 e8       	ldi	r24, 0x80	; 128
     fa4:	70 e0       	ldi	r23, 0x00	; 0
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	08 95       	ret

00000faa <__fp_nan>:
     faa:	9f ef       	ldi	r25, 0xFF	; 255
     fac:	80 ec       	ldi	r24, 0xC0	; 192
     fae:	08 95       	ret

00000fb0 <__fp_pscA>:
     fb0:	00 24       	eor	r0, r0
     fb2:	0a 94       	dec	r0
     fb4:	16 16       	cp	r1, r22
     fb6:	17 06       	cpc	r1, r23
     fb8:	18 06       	cpc	r1, r24
     fba:	09 06       	cpc	r0, r25
     fbc:	08 95       	ret

00000fbe <__fp_pscB>:
     fbe:	00 24       	eor	r0, r0
     fc0:	0a 94       	dec	r0
     fc2:	12 16       	cp	r1, r18
     fc4:	13 06       	cpc	r1, r19
     fc6:	14 06       	cpc	r1, r20
     fc8:	05 06       	cpc	r0, r21
     fca:	08 95       	ret

00000fcc <__fp_round>:
     fcc:	09 2e       	mov	r0, r25
     fce:	03 94       	inc	r0
     fd0:	00 0c       	add	r0, r0
     fd2:	11 f4       	brne	.+4      	; 0xfd8 <__fp_round+0xc>
     fd4:	88 23       	and	r24, r24
     fd6:	52 f0       	brmi	.+20     	; 0xfec <__fp_round+0x20>
     fd8:	bb 0f       	add	r27, r27
     fda:	40 f4       	brcc	.+16     	; 0xfec <__fp_round+0x20>
     fdc:	bf 2b       	or	r27, r31
     fde:	11 f4       	brne	.+4      	; 0xfe4 <__fp_round+0x18>
     fe0:	60 ff       	sbrs	r22, 0
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__fp_round+0x20>
     fe4:	6f 5f       	subi	r22, 0xFF	; 255
     fe6:	7f 4f       	sbci	r23, 0xFF	; 255
     fe8:	8f 4f       	sbci	r24, 0xFF	; 255
     fea:	9f 4f       	sbci	r25, 0xFF	; 255
     fec:	08 95       	ret

00000fee <__fp_split3>:
     fee:	57 fd       	sbrc	r21, 7
     ff0:	90 58       	subi	r25, 0x80	; 128
     ff2:	44 0f       	add	r20, r20
     ff4:	55 1f       	adc	r21, r21
     ff6:	59 f0       	breq	.+22     	; 0x100e <__fp_splitA+0x10>
     ff8:	5f 3f       	cpi	r21, 0xFF	; 255
     ffa:	71 f0       	breq	.+28     	; 0x1018 <__fp_splitA+0x1a>
     ffc:	47 95       	ror	r20

00000ffe <__fp_splitA>:
     ffe:	88 0f       	add	r24, r24
    1000:	97 fb       	bst	r25, 7
    1002:	99 1f       	adc	r25, r25
    1004:	61 f0       	breq	.+24     	; 0x101e <__fp_splitA+0x20>
    1006:	9f 3f       	cpi	r25, 0xFF	; 255
    1008:	79 f0       	breq	.+30     	; 0x1028 <__fp_splitA+0x2a>
    100a:	87 95       	ror	r24
    100c:	08 95       	ret
    100e:	12 16       	cp	r1, r18
    1010:	13 06       	cpc	r1, r19
    1012:	14 06       	cpc	r1, r20
    1014:	55 1f       	adc	r21, r21
    1016:	f2 cf       	rjmp	.-28     	; 0xffc <__fp_split3+0xe>
    1018:	46 95       	lsr	r20
    101a:	f1 df       	rcall	.-30     	; 0xffe <__fp_splitA>
    101c:	08 c0       	rjmp	.+16     	; 0x102e <__fp_splitA+0x30>
    101e:	16 16       	cp	r1, r22
    1020:	17 06       	cpc	r1, r23
    1022:	18 06       	cpc	r1, r24
    1024:	99 1f       	adc	r25, r25
    1026:	f1 cf       	rjmp	.-30     	; 0x100a <__fp_splitA+0xc>
    1028:	86 95       	lsr	r24
    102a:	71 05       	cpc	r23, r1
    102c:	61 05       	cpc	r22, r1
    102e:	08 94       	sec
    1030:	08 95       	ret

00001032 <__fp_zero>:
    1032:	e8 94       	clt

00001034 <__fp_szero>:
    1034:	bb 27       	eor	r27, r27
    1036:	66 27       	eor	r22, r22
    1038:	77 27       	eor	r23, r23
    103a:	cb 01       	movw	r24, r22
    103c:	97 f9       	bld	r25, 7
    103e:	08 95       	ret

00001040 <__gesf2>:
    1040:	8a df       	rcall	.-236    	; 0xf56 <__fp_cmp>
    1042:	08 f4       	brcc	.+2      	; 0x1046 <__gesf2+0x6>
    1044:	8f ef       	ldi	r24, 0xFF	; 255
    1046:	08 95       	ret

00001048 <__mulsf3>:
    1048:	0b d0       	rcall	.+22     	; 0x1060 <__mulsf3x>
    104a:	c0 cf       	rjmp	.-128    	; 0xfcc <__fp_round>
    104c:	b1 df       	rcall	.-158    	; 0xfb0 <__fp_pscA>
    104e:	28 f0       	brcs	.+10     	; 0x105a <__mulsf3+0x12>
    1050:	b6 df       	rcall	.-148    	; 0xfbe <__fp_pscB>
    1052:	18 f0       	brcs	.+6      	; 0x105a <__mulsf3+0x12>
    1054:	95 23       	and	r25, r21
    1056:	09 f0       	breq	.+2      	; 0x105a <__mulsf3+0x12>
    1058:	a2 cf       	rjmp	.-188    	; 0xf9e <__fp_inf>
    105a:	a7 cf       	rjmp	.-178    	; 0xfaa <__fp_nan>
    105c:	11 24       	eor	r1, r1
    105e:	ea cf       	rjmp	.-44     	; 0x1034 <__fp_szero>

00001060 <__mulsf3x>:
    1060:	c6 df       	rcall	.-116    	; 0xfee <__fp_split3>
    1062:	a0 f3       	brcs	.-24     	; 0x104c <__mulsf3+0x4>

00001064 <__mulsf3_pse>:
    1064:	95 9f       	mul	r25, r21
    1066:	d1 f3       	breq	.-12     	; 0x105c <__mulsf3+0x14>
    1068:	95 0f       	add	r25, r21
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	55 1f       	adc	r21, r21
    106e:	62 9f       	mul	r22, r18
    1070:	f0 01       	movw	r30, r0
    1072:	72 9f       	mul	r23, r18
    1074:	bb 27       	eor	r27, r27
    1076:	f0 0d       	add	r31, r0
    1078:	b1 1d       	adc	r27, r1
    107a:	63 9f       	mul	r22, r19
    107c:	aa 27       	eor	r26, r26
    107e:	f0 0d       	add	r31, r0
    1080:	b1 1d       	adc	r27, r1
    1082:	aa 1f       	adc	r26, r26
    1084:	64 9f       	mul	r22, r20
    1086:	66 27       	eor	r22, r22
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	66 1f       	adc	r22, r22
    108e:	82 9f       	mul	r24, r18
    1090:	22 27       	eor	r18, r18
    1092:	b0 0d       	add	r27, r0
    1094:	a1 1d       	adc	r26, r1
    1096:	62 1f       	adc	r22, r18
    1098:	73 9f       	mul	r23, r19
    109a:	b0 0d       	add	r27, r0
    109c:	a1 1d       	adc	r26, r1
    109e:	62 1f       	adc	r22, r18
    10a0:	83 9f       	mul	r24, r19
    10a2:	a0 0d       	add	r26, r0
    10a4:	61 1d       	adc	r22, r1
    10a6:	22 1f       	adc	r18, r18
    10a8:	74 9f       	mul	r23, r20
    10aa:	33 27       	eor	r19, r19
    10ac:	a0 0d       	add	r26, r0
    10ae:	61 1d       	adc	r22, r1
    10b0:	23 1f       	adc	r18, r19
    10b2:	84 9f       	mul	r24, r20
    10b4:	60 0d       	add	r22, r0
    10b6:	21 1d       	adc	r18, r1
    10b8:	82 2f       	mov	r24, r18
    10ba:	76 2f       	mov	r23, r22
    10bc:	6a 2f       	mov	r22, r26
    10be:	11 24       	eor	r1, r1
    10c0:	9f 57       	subi	r25, 0x7F	; 127
    10c2:	50 40       	sbci	r21, 0x00	; 0
    10c4:	8a f0       	brmi	.+34     	; 0x10e8 <__mulsf3_pse+0x84>
    10c6:	e1 f0       	breq	.+56     	; 0x1100 <__mulsf3_pse+0x9c>
    10c8:	88 23       	and	r24, r24
    10ca:	4a f0       	brmi	.+18     	; 0x10de <__mulsf3_pse+0x7a>
    10cc:	ee 0f       	add	r30, r30
    10ce:	ff 1f       	adc	r31, r31
    10d0:	bb 1f       	adc	r27, r27
    10d2:	66 1f       	adc	r22, r22
    10d4:	77 1f       	adc	r23, r23
    10d6:	88 1f       	adc	r24, r24
    10d8:	91 50       	subi	r25, 0x01	; 1
    10da:	50 40       	sbci	r21, 0x00	; 0
    10dc:	a9 f7       	brne	.-22     	; 0x10c8 <__mulsf3_pse+0x64>
    10de:	9e 3f       	cpi	r25, 0xFE	; 254
    10e0:	51 05       	cpc	r21, r1
    10e2:	70 f0       	brcs	.+28     	; 0x1100 <__mulsf3_pse+0x9c>
    10e4:	5c cf       	rjmp	.-328    	; 0xf9e <__fp_inf>
    10e6:	a6 cf       	rjmp	.-180    	; 0x1034 <__fp_szero>
    10e8:	5f 3f       	cpi	r21, 0xFF	; 255
    10ea:	ec f3       	brlt	.-6      	; 0x10e6 <__mulsf3_pse+0x82>
    10ec:	98 3e       	cpi	r25, 0xE8	; 232
    10ee:	dc f3       	brlt	.-10     	; 0x10e6 <__mulsf3_pse+0x82>
    10f0:	86 95       	lsr	r24
    10f2:	77 95       	ror	r23
    10f4:	67 95       	ror	r22
    10f6:	b7 95       	ror	r27
    10f8:	f7 95       	ror	r31
    10fa:	e7 95       	ror	r30
    10fc:	9f 5f       	subi	r25, 0xFF	; 255
    10fe:	c1 f7       	brne	.-16     	; 0x10f0 <__mulsf3_pse+0x8c>
    1100:	fe 2b       	or	r31, r30
    1102:	88 0f       	add	r24, r24
    1104:	91 1d       	adc	r25, r1
    1106:	96 95       	lsr	r25
    1108:	87 95       	ror	r24
    110a:	97 f9       	bld	r25, 7
    110c:	08 95       	ret

0000110e <__udivmodhi4>:
    110e:	aa 1b       	sub	r26, r26
    1110:	bb 1b       	sub	r27, r27
    1112:	51 e1       	ldi	r21, 0x11	; 17
    1114:	07 c0       	rjmp	.+14     	; 0x1124 <__udivmodhi4_ep>

00001116 <__udivmodhi4_loop>:
    1116:	aa 1f       	adc	r26, r26
    1118:	bb 1f       	adc	r27, r27
    111a:	a6 17       	cp	r26, r22
    111c:	b7 07       	cpc	r27, r23
    111e:	10 f0       	brcs	.+4      	; 0x1124 <__udivmodhi4_ep>
    1120:	a6 1b       	sub	r26, r22
    1122:	b7 0b       	sbc	r27, r23

00001124 <__udivmodhi4_ep>:
    1124:	88 1f       	adc	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	5a 95       	dec	r21
    112a:	a9 f7       	brne	.-22     	; 0x1116 <__udivmodhi4_loop>
    112c:	80 95       	com	r24
    112e:	90 95       	com	r25
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	08 95       	ret

00001136 <__divmodhi4>:
    1136:	97 fb       	bst	r25, 7
    1138:	07 2e       	mov	r0, r23
    113a:	16 f4       	brtc	.+4      	; 0x1140 <__divmodhi4+0xa>
    113c:	00 94       	com	r0
    113e:	06 d0       	rcall	.+12     	; 0x114c <__divmodhi4_neg1>
    1140:	77 fd       	sbrc	r23, 7
    1142:	08 d0       	rcall	.+16     	; 0x1154 <__divmodhi4_neg2>
    1144:	e4 df       	rcall	.-56     	; 0x110e <__udivmodhi4>
    1146:	07 fc       	sbrc	r0, 7
    1148:	05 d0       	rcall	.+10     	; 0x1154 <__divmodhi4_neg2>
    114a:	3e f4       	brtc	.+14     	; 0x115a <__divmodhi4_exit>

0000114c <__divmodhi4_neg1>:
    114c:	90 95       	com	r25
    114e:	81 95       	neg	r24
    1150:	9f 4f       	sbci	r25, 0xFF	; 255
    1152:	08 95       	ret

00001154 <__divmodhi4_neg2>:
    1154:	70 95       	com	r23
    1156:	61 95       	neg	r22
    1158:	7f 4f       	sbci	r23, 0xFF	; 255

0000115a <__divmodhi4_exit>:
    115a:	08 95       	ret

0000115c <__tablejump2__>:
    115c:	ee 0f       	add	r30, r30
    115e:	ff 1f       	adc	r31, r31

00001160 <__tablejump__>:
    1160:	05 90       	lpm	r0, Z+
    1162:	f4 91       	lpm	r31, Z
    1164:	e0 2d       	mov	r30, r0
    1166:	19 94       	eijmp

00001168 <fdevopen>:
    1168:	0f 93       	push	r16
    116a:	1f 93       	push	r17
    116c:	cf 93       	push	r28
    116e:	df 93       	push	r29
    1170:	ec 01       	movw	r28, r24
    1172:	8b 01       	movw	r16, r22
    1174:	00 97       	sbiw	r24, 0x00	; 0
    1176:	31 f4       	brne	.+12     	; 0x1184 <fdevopen+0x1c>
    1178:	61 15       	cp	r22, r1
    117a:	71 05       	cpc	r23, r1
    117c:	19 f4       	brne	.+6      	; 0x1184 <fdevopen+0x1c>
    117e:	80 e0       	ldi	r24, 0x00	; 0
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	37 c0       	rjmp	.+110    	; 0x11f2 <fdevopen+0x8a>
    1184:	6e e0       	ldi	r22, 0x0E	; 14
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	63 d2       	rcall	.+1222   	; 0x1654 <calloc>
    118e:	fc 01       	movw	r30, r24
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	a9 f3       	breq	.-22     	; 0x117e <fdevopen+0x16>
    1194:	80 e8       	ldi	r24, 0x80	; 128
    1196:	83 83       	std	Z+3, r24	; 0x03
    1198:	01 15       	cp	r16, r1
    119a:	11 05       	cpc	r17, r1
    119c:	71 f0       	breq	.+28     	; 0x11ba <fdevopen+0x52>
    119e:	13 87       	std	Z+11, r17	; 0x0b
    11a0:	02 87       	std	Z+10, r16	; 0x0a
    11a2:	81 e8       	ldi	r24, 0x81	; 129
    11a4:	83 83       	std	Z+3, r24	; 0x03
    11a6:	80 91 0a 03 	lds	r24, 0x030A
    11aa:	90 91 0b 03 	lds	r25, 0x030B
    11ae:	89 2b       	or	r24, r25
    11b0:	21 f4       	brne	.+8      	; 0x11ba <fdevopen+0x52>
    11b2:	f0 93 0b 03 	sts	0x030B, r31
    11b6:	e0 93 0a 03 	sts	0x030A, r30
    11ba:	20 97       	sbiw	r28, 0x00	; 0
    11bc:	c9 f0       	breq	.+50     	; 0x11f0 <fdevopen+0x88>
    11be:	d1 87       	std	Z+9, r29	; 0x09
    11c0:	c0 87       	std	Z+8, r28	; 0x08
    11c2:	83 81       	ldd	r24, Z+3	; 0x03
    11c4:	82 60       	ori	r24, 0x02	; 2
    11c6:	83 83       	std	Z+3, r24	; 0x03
    11c8:	80 91 0c 03 	lds	r24, 0x030C
    11cc:	90 91 0d 03 	lds	r25, 0x030D
    11d0:	89 2b       	or	r24, r25
    11d2:	71 f4       	brne	.+28     	; 0x11f0 <fdevopen+0x88>
    11d4:	f0 93 0d 03 	sts	0x030D, r31
    11d8:	e0 93 0c 03 	sts	0x030C, r30
    11dc:	80 91 0e 03 	lds	r24, 0x030E
    11e0:	90 91 0f 03 	lds	r25, 0x030F
    11e4:	89 2b       	or	r24, r25
    11e6:	21 f4       	brne	.+8      	; 0x11f0 <fdevopen+0x88>
    11e8:	f0 93 0f 03 	sts	0x030F, r31
    11ec:	e0 93 0e 03 	sts	0x030E, r30
    11f0:	cf 01       	movw	r24, r30
    11f2:	df 91       	pop	r29
    11f4:	cf 91       	pop	r28
    11f6:	1f 91       	pop	r17
    11f8:	0f 91       	pop	r16
    11fa:	08 95       	ret

000011fc <printf>:
    11fc:	cf 93       	push	r28
    11fe:	df 93       	push	r29
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	fe 01       	movw	r30, r28
    1206:	36 96       	adiw	r30, 0x06	; 6
    1208:	61 91       	ld	r22, Z+
    120a:	71 91       	ld	r23, Z+
    120c:	af 01       	movw	r20, r30
    120e:	80 91 0c 03 	lds	r24, 0x030C
    1212:	90 91 0d 03 	lds	r25, 0x030D
    1216:	30 d0       	rcall	.+96     	; 0x1278 <vfprintf>
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	08 95       	ret

0000121e <puts>:
    121e:	0f 93       	push	r16
    1220:	1f 93       	push	r17
    1222:	cf 93       	push	r28
    1224:	df 93       	push	r29
    1226:	e0 91 0c 03 	lds	r30, 0x030C
    122a:	f0 91 0d 03 	lds	r31, 0x030D
    122e:	23 81       	ldd	r18, Z+3	; 0x03
    1230:	21 ff       	sbrs	r18, 1
    1232:	1b c0       	rjmp	.+54     	; 0x126a <puts+0x4c>
    1234:	ec 01       	movw	r28, r24
    1236:	00 e0       	ldi	r16, 0x00	; 0
    1238:	10 e0       	ldi	r17, 0x00	; 0
    123a:	89 91       	ld	r24, Y+
    123c:	60 91 0c 03 	lds	r22, 0x030C
    1240:	70 91 0d 03 	lds	r23, 0x030D
    1244:	db 01       	movw	r26, r22
    1246:	18 96       	adiw	r26, 0x08	; 8
    1248:	ed 91       	ld	r30, X+
    124a:	fc 91       	ld	r31, X
    124c:	19 97       	sbiw	r26, 0x09	; 9
    124e:	88 23       	and	r24, r24
    1250:	31 f0       	breq	.+12     	; 0x125e <puts+0x40>
    1252:	19 95       	eicall
    1254:	89 2b       	or	r24, r25
    1256:	89 f3       	breq	.-30     	; 0x123a <puts+0x1c>
    1258:	0f ef       	ldi	r16, 0xFF	; 255
    125a:	1f ef       	ldi	r17, 0xFF	; 255
    125c:	ee cf       	rjmp	.-36     	; 0x123a <puts+0x1c>
    125e:	8a e0       	ldi	r24, 0x0A	; 10
    1260:	19 95       	eicall
    1262:	89 2b       	or	r24, r25
    1264:	11 f4       	brne	.+4      	; 0x126a <puts+0x4c>
    1266:	c8 01       	movw	r24, r16
    1268:	02 c0       	rjmp	.+4      	; 0x126e <puts+0x50>
    126a:	8f ef       	ldi	r24, 0xFF	; 255
    126c:	9f ef       	ldi	r25, 0xFF	; 255
    126e:	df 91       	pop	r29
    1270:	cf 91       	pop	r28
    1272:	1f 91       	pop	r17
    1274:	0f 91       	pop	r16
    1276:	08 95       	ret

00001278 <vfprintf>:
    1278:	2f 92       	push	r2
    127a:	3f 92       	push	r3
    127c:	4f 92       	push	r4
    127e:	5f 92       	push	r5
    1280:	6f 92       	push	r6
    1282:	7f 92       	push	r7
    1284:	8f 92       	push	r8
    1286:	9f 92       	push	r9
    1288:	af 92       	push	r10
    128a:	bf 92       	push	r11
    128c:	cf 92       	push	r12
    128e:	df 92       	push	r13
    1290:	ef 92       	push	r14
    1292:	ff 92       	push	r15
    1294:	0f 93       	push	r16
    1296:	1f 93       	push	r17
    1298:	cf 93       	push	r28
    129a:	df 93       	push	r29
    129c:	cd b7       	in	r28, 0x3d	; 61
    129e:	de b7       	in	r29, 0x3e	; 62
    12a0:	2c 97       	sbiw	r28, 0x0c	; 12
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	de bf       	out	0x3e, r29	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	cd bf       	out	0x3d, r28	; 61
    12ac:	7c 01       	movw	r14, r24
    12ae:	6b 01       	movw	r12, r22
    12b0:	8a 01       	movw	r16, r20
    12b2:	fc 01       	movw	r30, r24
    12b4:	17 82       	std	Z+7, r1	; 0x07
    12b6:	16 82       	std	Z+6, r1	; 0x06
    12b8:	83 81       	ldd	r24, Z+3	; 0x03
    12ba:	81 ff       	sbrs	r24, 1
    12bc:	b0 c1       	rjmp	.+864    	; 0x161e <vfprintf+0x3a6>
    12be:	ce 01       	movw	r24, r28
    12c0:	01 96       	adiw	r24, 0x01	; 1
    12c2:	4c 01       	movw	r8, r24
    12c4:	f7 01       	movw	r30, r14
    12c6:	93 81       	ldd	r25, Z+3	; 0x03
    12c8:	f6 01       	movw	r30, r12
    12ca:	93 fd       	sbrc	r25, 3
    12cc:	85 91       	lpm	r24, Z+
    12ce:	93 ff       	sbrs	r25, 3
    12d0:	81 91       	ld	r24, Z+
    12d2:	6f 01       	movw	r12, r30
    12d4:	88 23       	and	r24, r24
    12d6:	09 f4       	brne	.+2      	; 0x12da <vfprintf+0x62>
    12d8:	9e c1       	rjmp	.+828    	; 0x1616 <vfprintf+0x39e>
    12da:	85 32       	cpi	r24, 0x25	; 37
    12dc:	39 f4       	brne	.+14     	; 0x12ec <vfprintf+0x74>
    12de:	93 fd       	sbrc	r25, 3
    12e0:	85 91       	lpm	r24, Z+
    12e2:	93 ff       	sbrs	r25, 3
    12e4:	81 91       	ld	r24, Z+
    12e6:	6f 01       	movw	r12, r30
    12e8:	85 32       	cpi	r24, 0x25	; 37
    12ea:	21 f4       	brne	.+8      	; 0x12f4 <vfprintf+0x7c>
    12ec:	b7 01       	movw	r22, r14
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	0f d3       	rcall	.+1566   	; 0x1910 <fputc>
    12f2:	e8 cf       	rjmp	.-48     	; 0x12c4 <vfprintf+0x4c>
    12f4:	51 2c       	mov	r5, r1
    12f6:	31 2c       	mov	r3, r1
    12f8:	20 e0       	ldi	r18, 0x00	; 0
    12fa:	20 32       	cpi	r18, 0x20	; 32
    12fc:	a0 f4       	brcc	.+40     	; 0x1326 <vfprintf+0xae>
    12fe:	8b 32       	cpi	r24, 0x2B	; 43
    1300:	69 f0       	breq	.+26     	; 0x131c <vfprintf+0xa4>
    1302:	30 f4       	brcc	.+12     	; 0x1310 <vfprintf+0x98>
    1304:	80 32       	cpi	r24, 0x20	; 32
    1306:	59 f0       	breq	.+22     	; 0x131e <vfprintf+0xa6>
    1308:	83 32       	cpi	r24, 0x23	; 35
    130a:	69 f4       	brne	.+26     	; 0x1326 <vfprintf+0xae>
    130c:	20 61       	ori	r18, 0x10	; 16
    130e:	2c c0       	rjmp	.+88     	; 0x1368 <vfprintf+0xf0>
    1310:	8d 32       	cpi	r24, 0x2D	; 45
    1312:	39 f0       	breq	.+14     	; 0x1322 <vfprintf+0xaa>
    1314:	80 33       	cpi	r24, 0x30	; 48
    1316:	39 f4       	brne	.+14     	; 0x1326 <vfprintf+0xae>
    1318:	21 60       	ori	r18, 0x01	; 1
    131a:	26 c0       	rjmp	.+76     	; 0x1368 <vfprintf+0xf0>
    131c:	22 60       	ori	r18, 0x02	; 2
    131e:	24 60       	ori	r18, 0x04	; 4
    1320:	23 c0       	rjmp	.+70     	; 0x1368 <vfprintf+0xf0>
    1322:	28 60       	ori	r18, 0x08	; 8
    1324:	21 c0       	rjmp	.+66     	; 0x1368 <vfprintf+0xf0>
    1326:	27 fd       	sbrc	r18, 7
    1328:	27 c0       	rjmp	.+78     	; 0x1378 <vfprintf+0x100>
    132a:	30 ed       	ldi	r19, 0xD0	; 208
    132c:	38 0f       	add	r19, r24
    132e:	3a 30       	cpi	r19, 0x0A	; 10
    1330:	78 f4       	brcc	.+30     	; 0x1350 <vfprintf+0xd8>
    1332:	26 ff       	sbrs	r18, 6
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <vfprintf+0xca>
    1336:	fa e0       	ldi	r31, 0x0A	; 10
    1338:	5f 9e       	mul	r5, r31
    133a:	30 0d       	add	r19, r0
    133c:	11 24       	eor	r1, r1
    133e:	53 2e       	mov	r5, r19
    1340:	13 c0       	rjmp	.+38     	; 0x1368 <vfprintf+0xf0>
    1342:	8a e0       	ldi	r24, 0x0A	; 10
    1344:	38 9e       	mul	r3, r24
    1346:	30 0d       	add	r19, r0
    1348:	11 24       	eor	r1, r1
    134a:	33 2e       	mov	r3, r19
    134c:	20 62       	ori	r18, 0x20	; 32
    134e:	0c c0       	rjmp	.+24     	; 0x1368 <vfprintf+0xf0>
    1350:	8e 32       	cpi	r24, 0x2E	; 46
    1352:	21 f4       	brne	.+8      	; 0x135c <vfprintf+0xe4>
    1354:	26 fd       	sbrc	r18, 6
    1356:	5f c1       	rjmp	.+702    	; 0x1616 <vfprintf+0x39e>
    1358:	20 64       	ori	r18, 0x40	; 64
    135a:	06 c0       	rjmp	.+12     	; 0x1368 <vfprintf+0xf0>
    135c:	8c 36       	cpi	r24, 0x6C	; 108
    135e:	11 f4       	brne	.+4      	; 0x1364 <vfprintf+0xec>
    1360:	20 68       	ori	r18, 0x80	; 128
    1362:	02 c0       	rjmp	.+4      	; 0x1368 <vfprintf+0xf0>
    1364:	88 36       	cpi	r24, 0x68	; 104
    1366:	41 f4       	brne	.+16     	; 0x1378 <vfprintf+0x100>
    1368:	f6 01       	movw	r30, r12
    136a:	93 fd       	sbrc	r25, 3
    136c:	85 91       	lpm	r24, Z+
    136e:	93 ff       	sbrs	r25, 3
    1370:	81 91       	ld	r24, Z+
    1372:	6f 01       	movw	r12, r30
    1374:	81 11       	cpse	r24, r1
    1376:	c1 cf       	rjmp	.-126    	; 0x12fa <vfprintf+0x82>
    1378:	98 2f       	mov	r25, r24
    137a:	9f 7d       	andi	r25, 0xDF	; 223
    137c:	95 54       	subi	r25, 0x45	; 69
    137e:	93 30       	cpi	r25, 0x03	; 3
    1380:	28 f4       	brcc	.+10     	; 0x138c <vfprintf+0x114>
    1382:	0c 5f       	subi	r16, 0xFC	; 252
    1384:	1f 4f       	sbci	r17, 0xFF	; 255
    1386:	ff e3       	ldi	r31, 0x3F	; 63
    1388:	f9 83       	std	Y+1, r31	; 0x01
    138a:	0d c0       	rjmp	.+26     	; 0x13a6 <vfprintf+0x12e>
    138c:	83 36       	cpi	r24, 0x63	; 99
    138e:	31 f0       	breq	.+12     	; 0x139c <vfprintf+0x124>
    1390:	83 37       	cpi	r24, 0x73	; 115
    1392:	71 f0       	breq	.+28     	; 0x13b0 <vfprintf+0x138>
    1394:	83 35       	cpi	r24, 0x53	; 83
    1396:	09 f0       	breq	.+2      	; 0x139a <vfprintf+0x122>
    1398:	57 c0       	rjmp	.+174    	; 0x1448 <vfprintf+0x1d0>
    139a:	21 c0       	rjmp	.+66     	; 0x13de <vfprintf+0x166>
    139c:	f8 01       	movw	r30, r16
    139e:	80 81       	ld	r24, Z
    13a0:	89 83       	std	Y+1, r24	; 0x01
    13a2:	0e 5f       	subi	r16, 0xFE	; 254
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	44 24       	eor	r4, r4
    13a8:	43 94       	inc	r4
    13aa:	51 2c       	mov	r5, r1
    13ac:	54 01       	movw	r10, r8
    13ae:	14 c0       	rjmp	.+40     	; 0x13d8 <vfprintf+0x160>
    13b0:	38 01       	movw	r6, r16
    13b2:	f2 e0       	ldi	r31, 0x02	; 2
    13b4:	6f 0e       	add	r6, r31
    13b6:	71 1c       	adc	r7, r1
    13b8:	f8 01       	movw	r30, r16
    13ba:	a0 80       	ld	r10, Z
    13bc:	b1 80       	ldd	r11, Z+1	; 0x01
    13be:	26 ff       	sbrs	r18, 6
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <vfprintf+0x150>
    13c2:	65 2d       	mov	r22, r5
    13c4:	70 e0       	ldi	r23, 0x00	; 0
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <vfprintf+0x154>
    13c8:	6f ef       	ldi	r22, 0xFF	; 255
    13ca:	7f ef       	ldi	r23, 0xFF	; 255
    13cc:	c5 01       	movw	r24, r10
    13ce:	2c 87       	std	Y+12, r18	; 0x0c
    13d0:	94 d2       	rcall	.+1320   	; 0x18fa <strnlen>
    13d2:	2c 01       	movw	r4, r24
    13d4:	83 01       	movw	r16, r6
    13d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    13d8:	2f 77       	andi	r18, 0x7F	; 127
    13da:	22 2e       	mov	r2, r18
    13dc:	16 c0       	rjmp	.+44     	; 0x140a <vfprintf+0x192>
    13de:	38 01       	movw	r6, r16
    13e0:	f2 e0       	ldi	r31, 0x02	; 2
    13e2:	6f 0e       	add	r6, r31
    13e4:	71 1c       	adc	r7, r1
    13e6:	f8 01       	movw	r30, r16
    13e8:	a0 80       	ld	r10, Z
    13ea:	b1 80       	ldd	r11, Z+1	; 0x01
    13ec:	26 ff       	sbrs	r18, 6
    13ee:	03 c0       	rjmp	.+6      	; 0x13f6 <vfprintf+0x17e>
    13f0:	65 2d       	mov	r22, r5
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <vfprintf+0x182>
    13f6:	6f ef       	ldi	r22, 0xFF	; 255
    13f8:	7f ef       	ldi	r23, 0xFF	; 255
    13fa:	c5 01       	movw	r24, r10
    13fc:	2c 87       	std	Y+12, r18	; 0x0c
    13fe:	6b d2       	rcall	.+1238   	; 0x18d6 <strnlen_P>
    1400:	2c 01       	movw	r4, r24
    1402:	2c 85       	ldd	r18, Y+12	; 0x0c
    1404:	20 68       	ori	r18, 0x80	; 128
    1406:	22 2e       	mov	r2, r18
    1408:	83 01       	movw	r16, r6
    140a:	23 fc       	sbrc	r2, 3
    140c:	19 c0       	rjmp	.+50     	; 0x1440 <vfprintf+0x1c8>
    140e:	83 2d       	mov	r24, r3
    1410:	90 e0       	ldi	r25, 0x00	; 0
    1412:	48 16       	cp	r4, r24
    1414:	59 06       	cpc	r5, r25
    1416:	a0 f4       	brcc	.+40     	; 0x1440 <vfprintf+0x1c8>
    1418:	b7 01       	movw	r22, r14
    141a:	80 e2       	ldi	r24, 0x20	; 32
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	78 d2       	rcall	.+1264   	; 0x1910 <fputc>
    1420:	3a 94       	dec	r3
    1422:	f5 cf       	rjmp	.-22     	; 0x140e <vfprintf+0x196>
    1424:	f5 01       	movw	r30, r10
    1426:	27 fc       	sbrc	r2, 7
    1428:	85 91       	lpm	r24, Z+
    142a:	27 fe       	sbrs	r2, 7
    142c:	81 91       	ld	r24, Z+
    142e:	5f 01       	movw	r10, r30
    1430:	b7 01       	movw	r22, r14
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	6d d2       	rcall	.+1242   	; 0x1910 <fputc>
    1436:	31 10       	cpse	r3, r1
    1438:	3a 94       	dec	r3
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	4f 1a       	sub	r4, r31
    143e:	51 08       	sbc	r5, r1
    1440:	41 14       	cp	r4, r1
    1442:	51 04       	cpc	r5, r1
    1444:	79 f7       	brne	.-34     	; 0x1424 <vfprintf+0x1ac>
    1446:	de c0       	rjmp	.+444    	; 0x1604 <vfprintf+0x38c>
    1448:	84 36       	cpi	r24, 0x64	; 100
    144a:	11 f0       	breq	.+4      	; 0x1450 <vfprintf+0x1d8>
    144c:	89 36       	cpi	r24, 0x69	; 105
    144e:	31 f5       	brne	.+76     	; 0x149c <vfprintf+0x224>
    1450:	f8 01       	movw	r30, r16
    1452:	27 ff       	sbrs	r18, 7
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <vfprintf+0x1ec>
    1456:	60 81       	ld	r22, Z
    1458:	71 81       	ldd	r23, Z+1	; 0x01
    145a:	82 81       	ldd	r24, Z+2	; 0x02
    145c:	93 81       	ldd	r25, Z+3	; 0x03
    145e:	0c 5f       	subi	r16, 0xFC	; 252
    1460:	1f 4f       	sbci	r17, 0xFF	; 255
    1462:	08 c0       	rjmp	.+16     	; 0x1474 <vfprintf+0x1fc>
    1464:	60 81       	ld	r22, Z
    1466:	71 81       	ldd	r23, Z+1	; 0x01
    1468:	88 27       	eor	r24, r24
    146a:	77 fd       	sbrc	r23, 7
    146c:	80 95       	com	r24
    146e:	98 2f       	mov	r25, r24
    1470:	0e 5f       	subi	r16, 0xFE	; 254
    1472:	1f 4f       	sbci	r17, 0xFF	; 255
    1474:	2f 76       	andi	r18, 0x6F	; 111
    1476:	b2 2e       	mov	r11, r18
    1478:	97 ff       	sbrs	r25, 7
    147a:	09 c0       	rjmp	.+18     	; 0x148e <vfprintf+0x216>
    147c:	90 95       	com	r25
    147e:	80 95       	com	r24
    1480:	70 95       	com	r23
    1482:	61 95       	neg	r22
    1484:	7f 4f       	sbci	r23, 0xFF	; 255
    1486:	8f 4f       	sbci	r24, 0xFF	; 255
    1488:	9f 4f       	sbci	r25, 0xFF	; 255
    148a:	20 68       	ori	r18, 0x80	; 128
    148c:	b2 2e       	mov	r11, r18
    148e:	2a e0       	ldi	r18, 0x0A	; 10
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	a4 01       	movw	r20, r8
    1494:	6f d2       	rcall	.+1246   	; 0x1974 <__ultoa_invert>
    1496:	a8 2e       	mov	r10, r24
    1498:	a8 18       	sub	r10, r8
    149a:	43 c0       	rjmp	.+134    	; 0x1522 <vfprintf+0x2aa>
    149c:	85 37       	cpi	r24, 0x75	; 117
    149e:	29 f4       	brne	.+10     	; 0x14aa <vfprintf+0x232>
    14a0:	2f 7e       	andi	r18, 0xEF	; 239
    14a2:	b2 2e       	mov	r11, r18
    14a4:	2a e0       	ldi	r18, 0x0A	; 10
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	25 c0       	rjmp	.+74     	; 0x14f4 <vfprintf+0x27c>
    14aa:	f2 2f       	mov	r31, r18
    14ac:	f9 7f       	andi	r31, 0xF9	; 249
    14ae:	bf 2e       	mov	r11, r31
    14b0:	8f 36       	cpi	r24, 0x6F	; 111
    14b2:	c1 f0       	breq	.+48     	; 0x14e4 <vfprintf+0x26c>
    14b4:	18 f4       	brcc	.+6      	; 0x14bc <vfprintf+0x244>
    14b6:	88 35       	cpi	r24, 0x58	; 88
    14b8:	79 f0       	breq	.+30     	; 0x14d8 <vfprintf+0x260>
    14ba:	ad c0       	rjmp	.+346    	; 0x1616 <vfprintf+0x39e>
    14bc:	80 37       	cpi	r24, 0x70	; 112
    14be:	19 f0       	breq	.+6      	; 0x14c6 <vfprintf+0x24e>
    14c0:	88 37       	cpi	r24, 0x78	; 120
    14c2:	21 f0       	breq	.+8      	; 0x14cc <vfprintf+0x254>
    14c4:	a8 c0       	rjmp	.+336    	; 0x1616 <vfprintf+0x39e>
    14c6:	2f 2f       	mov	r18, r31
    14c8:	20 61       	ori	r18, 0x10	; 16
    14ca:	b2 2e       	mov	r11, r18
    14cc:	b4 fe       	sbrs	r11, 4
    14ce:	0d c0       	rjmp	.+26     	; 0x14ea <vfprintf+0x272>
    14d0:	8b 2d       	mov	r24, r11
    14d2:	84 60       	ori	r24, 0x04	; 4
    14d4:	b8 2e       	mov	r11, r24
    14d6:	09 c0       	rjmp	.+18     	; 0x14ea <vfprintf+0x272>
    14d8:	24 ff       	sbrs	r18, 4
    14da:	0a c0       	rjmp	.+20     	; 0x14f0 <vfprintf+0x278>
    14dc:	9f 2f       	mov	r25, r31
    14de:	96 60       	ori	r25, 0x06	; 6
    14e0:	b9 2e       	mov	r11, r25
    14e2:	06 c0       	rjmp	.+12     	; 0x14f0 <vfprintf+0x278>
    14e4:	28 e0       	ldi	r18, 0x08	; 8
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	05 c0       	rjmp	.+10     	; 0x14f4 <vfprintf+0x27c>
    14ea:	20 e1       	ldi	r18, 0x10	; 16
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <vfprintf+0x27c>
    14f0:	20 e1       	ldi	r18, 0x10	; 16
    14f2:	32 e0       	ldi	r19, 0x02	; 2
    14f4:	f8 01       	movw	r30, r16
    14f6:	b7 fe       	sbrs	r11, 7
    14f8:	07 c0       	rjmp	.+14     	; 0x1508 <vfprintf+0x290>
    14fa:	60 81       	ld	r22, Z
    14fc:	71 81       	ldd	r23, Z+1	; 0x01
    14fe:	82 81       	ldd	r24, Z+2	; 0x02
    1500:	93 81       	ldd	r25, Z+3	; 0x03
    1502:	0c 5f       	subi	r16, 0xFC	; 252
    1504:	1f 4f       	sbci	r17, 0xFF	; 255
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <vfprintf+0x29c>
    1508:	60 81       	ld	r22, Z
    150a:	71 81       	ldd	r23, Z+1	; 0x01
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	0e 5f       	subi	r16, 0xFE	; 254
    1512:	1f 4f       	sbci	r17, 0xFF	; 255
    1514:	a4 01       	movw	r20, r8
    1516:	2e d2       	rcall	.+1116   	; 0x1974 <__ultoa_invert>
    1518:	a8 2e       	mov	r10, r24
    151a:	a8 18       	sub	r10, r8
    151c:	fb 2d       	mov	r31, r11
    151e:	ff 77       	andi	r31, 0x7F	; 127
    1520:	bf 2e       	mov	r11, r31
    1522:	b6 fe       	sbrs	r11, 6
    1524:	0b c0       	rjmp	.+22     	; 0x153c <vfprintf+0x2c4>
    1526:	2b 2d       	mov	r18, r11
    1528:	2e 7f       	andi	r18, 0xFE	; 254
    152a:	a5 14       	cp	r10, r5
    152c:	50 f4       	brcc	.+20     	; 0x1542 <vfprintf+0x2ca>
    152e:	b4 fe       	sbrs	r11, 4
    1530:	0a c0       	rjmp	.+20     	; 0x1546 <vfprintf+0x2ce>
    1532:	b2 fc       	sbrc	r11, 2
    1534:	08 c0       	rjmp	.+16     	; 0x1546 <vfprintf+0x2ce>
    1536:	2b 2d       	mov	r18, r11
    1538:	2e 7e       	andi	r18, 0xEE	; 238
    153a:	05 c0       	rjmp	.+10     	; 0x1546 <vfprintf+0x2ce>
    153c:	7a 2c       	mov	r7, r10
    153e:	2b 2d       	mov	r18, r11
    1540:	03 c0       	rjmp	.+6      	; 0x1548 <vfprintf+0x2d0>
    1542:	7a 2c       	mov	r7, r10
    1544:	01 c0       	rjmp	.+2      	; 0x1548 <vfprintf+0x2d0>
    1546:	75 2c       	mov	r7, r5
    1548:	24 ff       	sbrs	r18, 4
    154a:	0d c0       	rjmp	.+26     	; 0x1566 <vfprintf+0x2ee>
    154c:	fe 01       	movw	r30, r28
    154e:	ea 0d       	add	r30, r10
    1550:	f1 1d       	adc	r31, r1
    1552:	80 81       	ld	r24, Z
    1554:	80 33       	cpi	r24, 0x30	; 48
    1556:	11 f4       	brne	.+4      	; 0x155c <vfprintf+0x2e4>
    1558:	29 7e       	andi	r18, 0xE9	; 233
    155a:	09 c0       	rjmp	.+18     	; 0x156e <vfprintf+0x2f6>
    155c:	22 ff       	sbrs	r18, 2
    155e:	06 c0       	rjmp	.+12     	; 0x156c <vfprintf+0x2f4>
    1560:	73 94       	inc	r7
    1562:	73 94       	inc	r7
    1564:	04 c0       	rjmp	.+8      	; 0x156e <vfprintf+0x2f6>
    1566:	82 2f       	mov	r24, r18
    1568:	86 78       	andi	r24, 0x86	; 134
    156a:	09 f0       	breq	.+2      	; 0x156e <vfprintf+0x2f6>
    156c:	73 94       	inc	r7
    156e:	23 fd       	sbrc	r18, 3
    1570:	12 c0       	rjmp	.+36     	; 0x1596 <vfprintf+0x31e>
    1572:	20 ff       	sbrs	r18, 0
    1574:	06 c0       	rjmp	.+12     	; 0x1582 <vfprintf+0x30a>
    1576:	5a 2c       	mov	r5, r10
    1578:	73 14       	cp	r7, r3
    157a:	18 f4       	brcc	.+6      	; 0x1582 <vfprintf+0x30a>
    157c:	53 0c       	add	r5, r3
    157e:	57 18       	sub	r5, r7
    1580:	73 2c       	mov	r7, r3
    1582:	73 14       	cp	r7, r3
    1584:	60 f4       	brcc	.+24     	; 0x159e <vfprintf+0x326>
    1586:	b7 01       	movw	r22, r14
    1588:	80 e2       	ldi	r24, 0x20	; 32
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	2c 87       	std	Y+12, r18	; 0x0c
    158e:	c0 d1       	rcall	.+896    	; 0x1910 <fputc>
    1590:	73 94       	inc	r7
    1592:	2c 85       	ldd	r18, Y+12	; 0x0c
    1594:	f6 cf       	rjmp	.-20     	; 0x1582 <vfprintf+0x30a>
    1596:	73 14       	cp	r7, r3
    1598:	10 f4       	brcc	.+4      	; 0x159e <vfprintf+0x326>
    159a:	37 18       	sub	r3, r7
    159c:	01 c0       	rjmp	.+2      	; 0x15a0 <vfprintf+0x328>
    159e:	31 2c       	mov	r3, r1
    15a0:	24 ff       	sbrs	r18, 4
    15a2:	11 c0       	rjmp	.+34     	; 0x15c6 <vfprintf+0x34e>
    15a4:	b7 01       	movw	r22, r14
    15a6:	80 e3       	ldi	r24, 0x30	; 48
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	2c 87       	std	Y+12, r18	; 0x0c
    15ac:	b1 d1       	rcall	.+866    	; 0x1910 <fputc>
    15ae:	2c 85       	ldd	r18, Y+12	; 0x0c
    15b0:	22 ff       	sbrs	r18, 2
    15b2:	16 c0       	rjmp	.+44     	; 0x15e0 <vfprintf+0x368>
    15b4:	21 ff       	sbrs	r18, 1
    15b6:	03 c0       	rjmp	.+6      	; 0x15be <vfprintf+0x346>
    15b8:	88 e5       	ldi	r24, 0x58	; 88
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <vfprintf+0x34a>
    15be:	88 e7       	ldi	r24, 0x78	; 120
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	b7 01       	movw	r22, r14
    15c4:	0c c0       	rjmp	.+24     	; 0x15de <vfprintf+0x366>
    15c6:	82 2f       	mov	r24, r18
    15c8:	86 78       	andi	r24, 0x86	; 134
    15ca:	51 f0       	breq	.+20     	; 0x15e0 <vfprintf+0x368>
    15cc:	21 fd       	sbrc	r18, 1
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <vfprintf+0x35c>
    15d0:	80 e2       	ldi	r24, 0x20	; 32
    15d2:	01 c0       	rjmp	.+2      	; 0x15d6 <vfprintf+0x35e>
    15d4:	8b e2       	ldi	r24, 0x2B	; 43
    15d6:	27 fd       	sbrc	r18, 7
    15d8:	8d e2       	ldi	r24, 0x2D	; 45
    15da:	b7 01       	movw	r22, r14
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	98 d1       	rcall	.+816    	; 0x1910 <fputc>
    15e0:	a5 14       	cp	r10, r5
    15e2:	30 f4       	brcc	.+12     	; 0x15f0 <vfprintf+0x378>
    15e4:	b7 01       	movw	r22, r14
    15e6:	80 e3       	ldi	r24, 0x30	; 48
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	92 d1       	rcall	.+804    	; 0x1910 <fputc>
    15ec:	5a 94       	dec	r5
    15ee:	f8 cf       	rjmp	.-16     	; 0x15e0 <vfprintf+0x368>
    15f0:	aa 94       	dec	r10
    15f2:	f4 01       	movw	r30, r8
    15f4:	ea 0d       	add	r30, r10
    15f6:	f1 1d       	adc	r31, r1
    15f8:	80 81       	ld	r24, Z
    15fa:	b7 01       	movw	r22, r14
    15fc:	90 e0       	ldi	r25, 0x00	; 0
    15fe:	88 d1       	rcall	.+784    	; 0x1910 <fputc>
    1600:	a1 10       	cpse	r10, r1
    1602:	f6 cf       	rjmp	.-20     	; 0x15f0 <vfprintf+0x378>
    1604:	33 20       	and	r3, r3
    1606:	09 f4       	brne	.+2      	; 0x160a <vfprintf+0x392>
    1608:	5d ce       	rjmp	.-838    	; 0x12c4 <vfprintf+0x4c>
    160a:	b7 01       	movw	r22, r14
    160c:	80 e2       	ldi	r24, 0x20	; 32
    160e:	90 e0       	ldi	r25, 0x00	; 0
    1610:	7f d1       	rcall	.+766    	; 0x1910 <fputc>
    1612:	3a 94       	dec	r3
    1614:	f7 cf       	rjmp	.-18     	; 0x1604 <vfprintf+0x38c>
    1616:	f7 01       	movw	r30, r14
    1618:	86 81       	ldd	r24, Z+6	; 0x06
    161a:	97 81       	ldd	r25, Z+7	; 0x07
    161c:	02 c0       	rjmp	.+4      	; 0x1622 <vfprintf+0x3aa>
    161e:	8f ef       	ldi	r24, 0xFF	; 255
    1620:	9f ef       	ldi	r25, 0xFF	; 255
    1622:	2c 96       	adiw	r28, 0x0c	; 12
    1624:	0f b6       	in	r0, 0x3f	; 63
    1626:	f8 94       	cli
    1628:	de bf       	out	0x3e, r29	; 62
    162a:	0f be       	out	0x3f, r0	; 63
    162c:	cd bf       	out	0x3d, r28	; 61
    162e:	df 91       	pop	r29
    1630:	cf 91       	pop	r28
    1632:	1f 91       	pop	r17
    1634:	0f 91       	pop	r16
    1636:	ff 90       	pop	r15
    1638:	ef 90       	pop	r14
    163a:	df 90       	pop	r13
    163c:	cf 90       	pop	r12
    163e:	bf 90       	pop	r11
    1640:	af 90       	pop	r10
    1642:	9f 90       	pop	r9
    1644:	8f 90       	pop	r8
    1646:	7f 90       	pop	r7
    1648:	6f 90       	pop	r6
    164a:	5f 90       	pop	r5
    164c:	4f 90       	pop	r4
    164e:	3f 90       	pop	r3
    1650:	2f 90       	pop	r2
    1652:	08 95       	ret

00001654 <calloc>:
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	86 9f       	mul	r24, r22
    165e:	80 01       	movw	r16, r0
    1660:	87 9f       	mul	r24, r23
    1662:	10 0d       	add	r17, r0
    1664:	96 9f       	mul	r25, r22
    1666:	10 0d       	add	r17, r0
    1668:	11 24       	eor	r1, r1
    166a:	c8 01       	movw	r24, r16
    166c:	0d d0       	rcall	.+26     	; 0x1688 <malloc>
    166e:	ec 01       	movw	r28, r24
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	21 f0       	breq	.+8      	; 0x167c <calloc+0x28>
    1674:	a8 01       	movw	r20, r16
    1676:	60 e0       	ldi	r22, 0x00	; 0
    1678:	70 e0       	ldi	r23, 0x00	; 0
    167a:	38 d1       	rcall	.+624    	; 0x18ec <memset>
    167c:	ce 01       	movw	r24, r28
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <malloc>:
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	82 30       	cpi	r24, 0x02	; 2
    168e:	91 05       	cpc	r25, r1
    1690:	10 f4       	brcc	.+4      	; 0x1696 <malloc+0xe>
    1692:	82 e0       	ldi	r24, 0x02	; 2
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	e0 91 12 03 	lds	r30, 0x0312
    169a:	f0 91 13 03 	lds	r31, 0x0313
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	a0 e0       	ldi	r26, 0x00	; 0
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	30 97       	sbiw	r30, 0x00	; 0
    16a8:	39 f1       	breq	.+78     	; 0x16f8 <malloc+0x70>
    16aa:	40 81       	ld	r20, Z
    16ac:	51 81       	ldd	r21, Z+1	; 0x01
    16ae:	48 17       	cp	r20, r24
    16b0:	59 07       	cpc	r21, r25
    16b2:	b8 f0       	brcs	.+46     	; 0x16e2 <malloc+0x5a>
    16b4:	48 17       	cp	r20, r24
    16b6:	59 07       	cpc	r21, r25
    16b8:	71 f4       	brne	.+28     	; 0x16d6 <malloc+0x4e>
    16ba:	82 81       	ldd	r24, Z+2	; 0x02
    16bc:	93 81       	ldd	r25, Z+3	; 0x03
    16be:	10 97       	sbiw	r26, 0x00	; 0
    16c0:	29 f0       	breq	.+10     	; 0x16cc <malloc+0x44>
    16c2:	13 96       	adiw	r26, 0x03	; 3
    16c4:	9c 93       	st	X, r25
    16c6:	8e 93       	st	-X, r24
    16c8:	12 97       	sbiw	r26, 0x02	; 2
    16ca:	2c c0       	rjmp	.+88     	; 0x1724 <malloc+0x9c>
    16cc:	90 93 13 03 	sts	0x0313, r25
    16d0:	80 93 12 03 	sts	0x0312, r24
    16d4:	27 c0       	rjmp	.+78     	; 0x1724 <malloc+0x9c>
    16d6:	21 15       	cp	r18, r1
    16d8:	31 05       	cpc	r19, r1
    16da:	31 f0       	breq	.+12     	; 0x16e8 <malloc+0x60>
    16dc:	42 17       	cp	r20, r18
    16de:	53 07       	cpc	r21, r19
    16e0:	18 f0       	brcs	.+6      	; 0x16e8 <malloc+0x60>
    16e2:	a9 01       	movw	r20, r18
    16e4:	db 01       	movw	r26, r22
    16e6:	01 c0       	rjmp	.+2      	; 0x16ea <malloc+0x62>
    16e8:	ef 01       	movw	r28, r30
    16ea:	9a 01       	movw	r18, r20
    16ec:	bd 01       	movw	r22, r26
    16ee:	df 01       	movw	r26, r30
    16f0:	02 80       	ldd	r0, Z+2	; 0x02
    16f2:	f3 81       	ldd	r31, Z+3	; 0x03
    16f4:	e0 2d       	mov	r30, r0
    16f6:	d7 cf       	rjmp	.-82     	; 0x16a6 <malloc+0x1e>
    16f8:	21 15       	cp	r18, r1
    16fa:	31 05       	cpc	r19, r1
    16fc:	f9 f0       	breq	.+62     	; 0x173c <malloc+0xb4>
    16fe:	28 1b       	sub	r18, r24
    1700:	39 0b       	sbc	r19, r25
    1702:	24 30       	cpi	r18, 0x04	; 4
    1704:	31 05       	cpc	r19, r1
    1706:	80 f4       	brcc	.+32     	; 0x1728 <malloc+0xa0>
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	61 15       	cp	r22, r1
    170e:	71 05       	cpc	r23, r1
    1710:	21 f0       	breq	.+8      	; 0x171a <malloc+0x92>
    1712:	fb 01       	movw	r30, r22
    1714:	93 83       	std	Z+3, r25	; 0x03
    1716:	82 83       	std	Z+2, r24	; 0x02
    1718:	04 c0       	rjmp	.+8      	; 0x1722 <malloc+0x9a>
    171a:	90 93 13 03 	sts	0x0313, r25
    171e:	80 93 12 03 	sts	0x0312, r24
    1722:	fe 01       	movw	r30, r28
    1724:	32 96       	adiw	r30, 0x02	; 2
    1726:	44 c0       	rjmp	.+136    	; 0x17b0 <malloc+0x128>
    1728:	fe 01       	movw	r30, r28
    172a:	e2 0f       	add	r30, r18
    172c:	f3 1f       	adc	r31, r19
    172e:	81 93       	st	Z+, r24
    1730:	91 93       	st	Z+, r25
    1732:	22 50       	subi	r18, 0x02	; 2
    1734:	31 09       	sbc	r19, r1
    1736:	39 83       	std	Y+1, r19	; 0x01
    1738:	28 83       	st	Y, r18
    173a:	3a c0       	rjmp	.+116    	; 0x17b0 <malloc+0x128>
    173c:	20 91 10 03 	lds	r18, 0x0310
    1740:	30 91 11 03 	lds	r19, 0x0311
    1744:	23 2b       	or	r18, r19
    1746:	41 f4       	brne	.+16     	; 0x1758 <malloc+0xd0>
    1748:	20 91 02 02 	lds	r18, 0x0202
    174c:	30 91 03 02 	lds	r19, 0x0203
    1750:	30 93 11 03 	sts	0x0311, r19
    1754:	20 93 10 03 	sts	0x0310, r18
    1758:	20 91 00 02 	lds	r18, 0x0200
    175c:	30 91 01 02 	lds	r19, 0x0201
    1760:	21 15       	cp	r18, r1
    1762:	31 05       	cpc	r19, r1
    1764:	41 f4       	brne	.+16     	; 0x1776 <malloc+0xee>
    1766:	2d b7       	in	r18, 0x3d	; 61
    1768:	3e b7       	in	r19, 0x3e	; 62
    176a:	40 91 04 02 	lds	r20, 0x0204
    176e:	50 91 05 02 	lds	r21, 0x0205
    1772:	24 1b       	sub	r18, r20
    1774:	35 0b       	sbc	r19, r21
    1776:	e0 91 10 03 	lds	r30, 0x0310
    177a:	f0 91 11 03 	lds	r31, 0x0311
    177e:	e2 17       	cp	r30, r18
    1780:	f3 07       	cpc	r31, r19
    1782:	a0 f4       	brcc	.+40     	; 0x17ac <malloc+0x124>
    1784:	2e 1b       	sub	r18, r30
    1786:	3f 0b       	sbc	r19, r31
    1788:	28 17       	cp	r18, r24
    178a:	39 07       	cpc	r19, r25
    178c:	78 f0       	brcs	.+30     	; 0x17ac <malloc+0x124>
    178e:	ac 01       	movw	r20, r24
    1790:	4e 5f       	subi	r20, 0xFE	; 254
    1792:	5f 4f       	sbci	r21, 0xFF	; 255
    1794:	24 17       	cp	r18, r20
    1796:	35 07       	cpc	r19, r21
    1798:	48 f0       	brcs	.+18     	; 0x17ac <malloc+0x124>
    179a:	4e 0f       	add	r20, r30
    179c:	5f 1f       	adc	r21, r31
    179e:	50 93 11 03 	sts	0x0311, r21
    17a2:	40 93 10 03 	sts	0x0310, r20
    17a6:	81 93       	st	Z+, r24
    17a8:	91 93       	st	Z+, r25
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <malloc+0x128>
    17ac:	e0 e0       	ldi	r30, 0x00	; 0
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	cf 01       	movw	r24, r30
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	08 95       	ret

000017b8 <free>:
    17b8:	cf 93       	push	r28
    17ba:	df 93       	push	r29
    17bc:	00 97       	sbiw	r24, 0x00	; 0
    17be:	09 f4       	brne	.+2      	; 0x17c2 <free+0xa>
    17c0:	87 c0       	rjmp	.+270    	; 0x18d0 <free+0x118>
    17c2:	fc 01       	movw	r30, r24
    17c4:	32 97       	sbiw	r30, 0x02	; 2
    17c6:	13 82       	std	Z+3, r1	; 0x03
    17c8:	12 82       	std	Z+2, r1	; 0x02
    17ca:	c0 91 12 03 	lds	r28, 0x0312
    17ce:	d0 91 13 03 	lds	r29, 0x0313
    17d2:	20 97       	sbiw	r28, 0x00	; 0
    17d4:	81 f4       	brne	.+32     	; 0x17f6 <free+0x3e>
    17d6:	20 81       	ld	r18, Z
    17d8:	31 81       	ldd	r19, Z+1	; 0x01
    17da:	28 0f       	add	r18, r24
    17dc:	39 1f       	adc	r19, r25
    17de:	80 91 10 03 	lds	r24, 0x0310
    17e2:	90 91 11 03 	lds	r25, 0x0311
    17e6:	82 17       	cp	r24, r18
    17e8:	93 07       	cpc	r25, r19
    17ea:	79 f5       	brne	.+94     	; 0x184a <free+0x92>
    17ec:	f0 93 11 03 	sts	0x0311, r31
    17f0:	e0 93 10 03 	sts	0x0310, r30
    17f4:	6d c0       	rjmp	.+218    	; 0x18d0 <free+0x118>
    17f6:	de 01       	movw	r26, r28
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	ae 17       	cp	r26, r30
    17fe:	bf 07       	cpc	r27, r31
    1800:	50 f4       	brcc	.+20     	; 0x1816 <free+0x5e>
    1802:	12 96       	adiw	r26, 0x02	; 2
    1804:	4d 91       	ld	r20, X+
    1806:	5c 91       	ld	r21, X
    1808:	13 97       	sbiw	r26, 0x03	; 3
    180a:	9d 01       	movw	r18, r26
    180c:	41 15       	cp	r20, r1
    180e:	51 05       	cpc	r21, r1
    1810:	09 f1       	breq	.+66     	; 0x1854 <free+0x9c>
    1812:	da 01       	movw	r26, r20
    1814:	f3 cf       	rjmp	.-26     	; 0x17fc <free+0x44>
    1816:	b3 83       	std	Z+3, r27	; 0x03
    1818:	a2 83       	std	Z+2, r26	; 0x02
    181a:	40 81       	ld	r20, Z
    181c:	51 81       	ldd	r21, Z+1	; 0x01
    181e:	84 0f       	add	r24, r20
    1820:	95 1f       	adc	r25, r21
    1822:	8a 17       	cp	r24, r26
    1824:	9b 07       	cpc	r25, r27
    1826:	71 f4       	brne	.+28     	; 0x1844 <free+0x8c>
    1828:	8d 91       	ld	r24, X+
    182a:	9c 91       	ld	r25, X
    182c:	11 97       	sbiw	r26, 0x01	; 1
    182e:	84 0f       	add	r24, r20
    1830:	95 1f       	adc	r25, r21
    1832:	02 96       	adiw	r24, 0x02	; 2
    1834:	91 83       	std	Z+1, r25	; 0x01
    1836:	80 83       	st	Z, r24
    1838:	12 96       	adiw	r26, 0x02	; 2
    183a:	8d 91       	ld	r24, X+
    183c:	9c 91       	ld	r25, X
    183e:	13 97       	sbiw	r26, 0x03	; 3
    1840:	93 83       	std	Z+3, r25	; 0x03
    1842:	82 83       	std	Z+2, r24	; 0x02
    1844:	21 15       	cp	r18, r1
    1846:	31 05       	cpc	r19, r1
    1848:	29 f4       	brne	.+10     	; 0x1854 <free+0x9c>
    184a:	f0 93 13 03 	sts	0x0313, r31
    184e:	e0 93 12 03 	sts	0x0312, r30
    1852:	3e c0       	rjmp	.+124    	; 0x18d0 <free+0x118>
    1854:	d9 01       	movw	r26, r18
    1856:	13 96       	adiw	r26, 0x03	; 3
    1858:	fc 93       	st	X, r31
    185a:	ee 93       	st	-X, r30
    185c:	12 97       	sbiw	r26, 0x02	; 2
    185e:	4d 91       	ld	r20, X+
    1860:	5d 91       	ld	r21, X+
    1862:	a4 0f       	add	r26, r20
    1864:	b5 1f       	adc	r27, r21
    1866:	ea 17       	cp	r30, r26
    1868:	fb 07       	cpc	r31, r27
    186a:	79 f4       	brne	.+30     	; 0x188a <free+0xd2>
    186c:	80 81       	ld	r24, Z
    186e:	91 81       	ldd	r25, Z+1	; 0x01
    1870:	84 0f       	add	r24, r20
    1872:	95 1f       	adc	r25, r21
    1874:	02 96       	adiw	r24, 0x02	; 2
    1876:	d9 01       	movw	r26, r18
    1878:	11 96       	adiw	r26, 0x01	; 1
    187a:	9c 93       	st	X, r25
    187c:	8e 93       	st	-X, r24
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	13 96       	adiw	r26, 0x03	; 3
    1884:	9c 93       	st	X, r25
    1886:	8e 93       	st	-X, r24
    1888:	12 97       	sbiw	r26, 0x02	; 2
    188a:	e0 e0       	ldi	r30, 0x00	; 0
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	19 f0       	breq	.+6      	; 0x189c <free+0xe4>
    1896:	fe 01       	movw	r30, r28
    1898:	ec 01       	movw	r28, r24
    189a:	f9 cf       	rjmp	.-14     	; 0x188e <free+0xd6>
    189c:	ce 01       	movw	r24, r28
    189e:	02 96       	adiw	r24, 0x02	; 2
    18a0:	28 81       	ld	r18, Y
    18a2:	39 81       	ldd	r19, Y+1	; 0x01
    18a4:	82 0f       	add	r24, r18
    18a6:	93 1f       	adc	r25, r19
    18a8:	20 91 10 03 	lds	r18, 0x0310
    18ac:	30 91 11 03 	lds	r19, 0x0311
    18b0:	28 17       	cp	r18, r24
    18b2:	39 07       	cpc	r19, r25
    18b4:	69 f4       	brne	.+26     	; 0x18d0 <free+0x118>
    18b6:	30 97       	sbiw	r30, 0x00	; 0
    18b8:	29 f4       	brne	.+10     	; 0x18c4 <free+0x10c>
    18ba:	10 92 13 03 	sts	0x0313, r1
    18be:	10 92 12 03 	sts	0x0312, r1
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <free+0x110>
    18c4:	13 82       	std	Z+3, r1	; 0x03
    18c6:	12 82       	std	Z+2, r1	; 0x02
    18c8:	d0 93 11 03 	sts	0x0311, r29
    18cc:	c0 93 10 03 	sts	0x0310, r28
    18d0:	df 91       	pop	r29
    18d2:	cf 91       	pop	r28
    18d4:	08 95       	ret

000018d6 <strnlen_P>:
    18d6:	fc 01       	movw	r30, r24
    18d8:	05 90       	lpm	r0, Z+
    18da:	61 50       	subi	r22, 0x01	; 1
    18dc:	70 40       	sbci	r23, 0x00	; 0
    18de:	01 10       	cpse	r0, r1
    18e0:	d8 f7       	brcc	.-10     	; 0x18d8 <strnlen_P+0x2>
    18e2:	80 95       	com	r24
    18e4:	90 95       	com	r25
    18e6:	8e 0f       	add	r24, r30
    18e8:	9f 1f       	adc	r25, r31
    18ea:	08 95       	ret

000018ec <memset>:
    18ec:	dc 01       	movw	r26, r24
    18ee:	01 c0       	rjmp	.+2      	; 0x18f2 <memset+0x6>
    18f0:	6d 93       	st	X+, r22
    18f2:	41 50       	subi	r20, 0x01	; 1
    18f4:	50 40       	sbci	r21, 0x00	; 0
    18f6:	e0 f7       	brcc	.-8      	; 0x18f0 <memset+0x4>
    18f8:	08 95       	ret

000018fa <strnlen>:
    18fa:	fc 01       	movw	r30, r24
    18fc:	61 50       	subi	r22, 0x01	; 1
    18fe:	70 40       	sbci	r23, 0x00	; 0
    1900:	01 90       	ld	r0, Z+
    1902:	01 10       	cpse	r0, r1
    1904:	d8 f7       	brcc	.-10     	; 0x18fc <strnlen+0x2>
    1906:	80 95       	com	r24
    1908:	90 95       	com	r25
    190a:	8e 0f       	add	r24, r30
    190c:	9f 1f       	adc	r25, r31
    190e:	08 95       	ret

00001910 <fputc>:
    1910:	0f 93       	push	r16
    1912:	1f 93       	push	r17
    1914:	cf 93       	push	r28
    1916:	df 93       	push	r29
    1918:	18 2f       	mov	r17, r24
    191a:	09 2f       	mov	r16, r25
    191c:	eb 01       	movw	r28, r22
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	81 fd       	sbrc	r24, 1
    1922:	03 c0       	rjmp	.+6      	; 0x192a <fputc+0x1a>
    1924:	8f ef       	ldi	r24, 0xFF	; 255
    1926:	9f ef       	ldi	r25, 0xFF	; 255
    1928:	20 c0       	rjmp	.+64     	; 0x196a <fputc+0x5a>
    192a:	82 ff       	sbrs	r24, 2
    192c:	10 c0       	rjmp	.+32     	; 0x194e <fputc+0x3e>
    192e:	4e 81       	ldd	r20, Y+6	; 0x06
    1930:	5f 81       	ldd	r21, Y+7	; 0x07
    1932:	2c 81       	ldd	r18, Y+4	; 0x04
    1934:	3d 81       	ldd	r19, Y+5	; 0x05
    1936:	42 17       	cp	r20, r18
    1938:	53 07       	cpc	r21, r19
    193a:	7c f4       	brge	.+30     	; 0x195a <fputc+0x4a>
    193c:	e8 81       	ld	r30, Y
    193e:	f9 81       	ldd	r31, Y+1	; 0x01
    1940:	9f 01       	movw	r18, r30
    1942:	2f 5f       	subi	r18, 0xFF	; 255
    1944:	3f 4f       	sbci	r19, 0xFF	; 255
    1946:	39 83       	std	Y+1, r19	; 0x01
    1948:	28 83       	st	Y, r18
    194a:	10 83       	st	Z, r17
    194c:	06 c0       	rjmp	.+12     	; 0x195a <fputc+0x4a>
    194e:	e8 85       	ldd	r30, Y+8	; 0x08
    1950:	f9 85       	ldd	r31, Y+9	; 0x09
    1952:	81 2f       	mov	r24, r17
    1954:	19 95       	eicall
    1956:	89 2b       	or	r24, r25
    1958:	29 f7       	brne	.-54     	; 0x1924 <fputc+0x14>
    195a:	2e 81       	ldd	r18, Y+6	; 0x06
    195c:	3f 81       	ldd	r19, Y+7	; 0x07
    195e:	2f 5f       	subi	r18, 0xFF	; 255
    1960:	3f 4f       	sbci	r19, 0xFF	; 255
    1962:	3f 83       	std	Y+7, r19	; 0x07
    1964:	2e 83       	std	Y+6, r18	; 0x06
    1966:	81 2f       	mov	r24, r17
    1968:	90 2f       	mov	r25, r16
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	08 95       	ret

00001974 <__ultoa_invert>:
    1974:	fa 01       	movw	r30, r20
    1976:	aa 27       	eor	r26, r26
    1978:	28 30       	cpi	r18, 0x08	; 8
    197a:	51 f1       	breq	.+84     	; 0x19d0 <__ultoa_invert+0x5c>
    197c:	20 31       	cpi	r18, 0x10	; 16
    197e:	81 f1       	breq	.+96     	; 0x19e0 <__ultoa_invert+0x6c>
    1980:	e8 94       	clt
    1982:	6f 93       	push	r22
    1984:	6e 7f       	andi	r22, 0xFE	; 254
    1986:	6e 5f       	subi	r22, 0xFE	; 254
    1988:	7f 4f       	sbci	r23, 0xFF	; 255
    198a:	8f 4f       	sbci	r24, 0xFF	; 255
    198c:	9f 4f       	sbci	r25, 0xFF	; 255
    198e:	af 4f       	sbci	r26, 0xFF	; 255
    1990:	b1 e0       	ldi	r27, 0x01	; 1
    1992:	3e d0       	rcall	.+124    	; 0x1a10 <__ultoa_invert+0x9c>
    1994:	b4 e0       	ldi	r27, 0x04	; 4
    1996:	3c d0       	rcall	.+120    	; 0x1a10 <__ultoa_invert+0x9c>
    1998:	67 0f       	add	r22, r23
    199a:	78 1f       	adc	r23, r24
    199c:	89 1f       	adc	r24, r25
    199e:	9a 1f       	adc	r25, r26
    19a0:	a1 1d       	adc	r26, r1
    19a2:	68 0f       	add	r22, r24
    19a4:	79 1f       	adc	r23, r25
    19a6:	8a 1f       	adc	r24, r26
    19a8:	91 1d       	adc	r25, r1
    19aa:	a1 1d       	adc	r26, r1
    19ac:	6a 0f       	add	r22, r26
    19ae:	71 1d       	adc	r23, r1
    19b0:	81 1d       	adc	r24, r1
    19b2:	91 1d       	adc	r25, r1
    19b4:	a1 1d       	adc	r26, r1
    19b6:	20 d0       	rcall	.+64     	; 0x19f8 <__ultoa_invert+0x84>
    19b8:	09 f4       	brne	.+2      	; 0x19bc <__ultoa_invert+0x48>
    19ba:	68 94       	set
    19bc:	3f 91       	pop	r19
    19be:	2a e0       	ldi	r18, 0x0A	; 10
    19c0:	26 9f       	mul	r18, r22
    19c2:	11 24       	eor	r1, r1
    19c4:	30 19       	sub	r19, r0
    19c6:	30 5d       	subi	r19, 0xD0	; 208
    19c8:	31 93       	st	Z+, r19
    19ca:	de f6       	brtc	.-74     	; 0x1982 <__ultoa_invert+0xe>
    19cc:	cf 01       	movw	r24, r30
    19ce:	08 95       	ret
    19d0:	46 2f       	mov	r20, r22
    19d2:	47 70       	andi	r20, 0x07	; 7
    19d4:	40 5d       	subi	r20, 0xD0	; 208
    19d6:	41 93       	st	Z+, r20
    19d8:	b3 e0       	ldi	r27, 0x03	; 3
    19da:	0f d0       	rcall	.+30     	; 0x19fa <__ultoa_invert+0x86>
    19dc:	c9 f7       	brne	.-14     	; 0x19d0 <__ultoa_invert+0x5c>
    19de:	f6 cf       	rjmp	.-20     	; 0x19cc <__ultoa_invert+0x58>
    19e0:	46 2f       	mov	r20, r22
    19e2:	4f 70       	andi	r20, 0x0F	; 15
    19e4:	40 5d       	subi	r20, 0xD0	; 208
    19e6:	4a 33       	cpi	r20, 0x3A	; 58
    19e8:	18 f0       	brcs	.+6      	; 0x19f0 <__ultoa_invert+0x7c>
    19ea:	49 5d       	subi	r20, 0xD9	; 217
    19ec:	31 fd       	sbrc	r19, 1
    19ee:	40 52       	subi	r20, 0x20	; 32
    19f0:	41 93       	st	Z+, r20
    19f2:	02 d0       	rcall	.+4      	; 0x19f8 <__ultoa_invert+0x84>
    19f4:	a9 f7       	brne	.-22     	; 0x19e0 <__ultoa_invert+0x6c>
    19f6:	ea cf       	rjmp	.-44     	; 0x19cc <__ultoa_invert+0x58>
    19f8:	b4 e0       	ldi	r27, 0x04	; 4
    19fa:	a6 95       	lsr	r26
    19fc:	97 95       	ror	r25
    19fe:	87 95       	ror	r24
    1a00:	77 95       	ror	r23
    1a02:	67 95       	ror	r22
    1a04:	ba 95       	dec	r27
    1a06:	c9 f7       	brne	.-14     	; 0x19fa <__ultoa_invert+0x86>
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	61 05       	cpc	r22, r1
    1a0c:	71 05       	cpc	r23, r1
    1a0e:	08 95       	ret
    1a10:	9b 01       	movw	r18, r22
    1a12:	ac 01       	movw	r20, r24
    1a14:	0a 2e       	mov	r0, r26
    1a16:	06 94       	lsr	r0
    1a18:	57 95       	ror	r21
    1a1a:	47 95       	ror	r20
    1a1c:	37 95       	ror	r19
    1a1e:	27 95       	ror	r18
    1a20:	ba 95       	dec	r27
    1a22:	c9 f7       	brne	.-14     	; 0x1a16 <__ultoa_invert+0xa2>
    1a24:	62 0f       	add	r22, r18
    1a26:	73 1f       	adc	r23, r19
    1a28:	84 1f       	adc	r24, r20
    1a2a:	95 1f       	adc	r25, r21
    1a2c:	a0 1d       	adc	r26, r0
    1a2e:	08 95       	ret

00001a30 <_exit>:
    1a30:	f8 94       	cli

00001a32 <__stop_program>:
    1a32:	ff cf       	rjmp	.-2      	; 0x1a32 <__stop_program>
