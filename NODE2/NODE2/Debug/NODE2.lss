
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013e  00800200  00001c8e  00001d22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c8e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  0080033e  0080033e  00001e60  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003d8  00000000  00000000  00001ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ebe  00000000  00000000  00002294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001491  00000000  00000000  00005152  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e7c  00000000  00000000  000065e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000009b4  00000000  00000000  00008460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000bb3  00000000  00000000  00008e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000019ce  00000000  00000000  000099c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  0000b395  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	ed c0       	rjmp	.+474    	; 0x1f0 <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	e2 c6       	rjmp	.+3524   	; 0xe62 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	49 c6       	rjmp	.+3218   	; 0xd3c <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	4c 07       	cpc	r20, r28
      e6:	9e 07       	cpc	r25, r30
      e8:	9e 07       	cpc	r25, r30
      ea:	9e 07       	cpc	r25, r30
      ec:	9e 07       	cpc	r25, r30
      ee:	9e 07       	cpc	r25, r30
      f0:	9e 07       	cpc	r25, r30
      f2:	9e 07       	cpc	r25, r30
      f4:	4c 07       	cpc	r20, r28
      f6:	9e 07       	cpc	r25, r30
      f8:	9e 07       	cpc	r25, r30
      fa:	9e 07       	cpc	r25, r30
      fc:	9e 07       	cpc	r25, r30
      fe:	9e 07       	cpc	r25, r30
     100:	9e 07       	cpc	r25, r30
     102:	9e 07       	cpc	r25, r30
     104:	4e 07       	cpc	r20, r30
     106:	9e 07       	cpc	r25, r30
     108:	9e 07       	cpc	r25, r30
     10a:	9e 07       	cpc	r25, r30
     10c:	9e 07       	cpc	r25, r30
     10e:	9e 07       	cpc	r25, r30
     110:	9e 07       	cpc	r25, r30
     112:	9e 07       	cpc	r25, r30
     114:	9e 07       	cpc	r25, r30
     116:	9e 07       	cpc	r25, r30
     118:	9e 07       	cpc	r25, r30
     11a:	9e 07       	cpc	r25, r30
     11c:	9e 07       	cpc	r25, r30
     11e:	9e 07       	cpc	r25, r30
     120:	9e 07       	cpc	r25, r30
     122:	9e 07       	cpc	r25, r30
     124:	4e 07       	cpc	r20, r30
     126:	9e 07       	cpc	r25, r30
     128:	9e 07       	cpc	r25, r30
     12a:	9e 07       	cpc	r25, r30
     12c:	9e 07       	cpc	r25, r30
     12e:	9e 07       	cpc	r25, r30
     130:	9e 07       	cpc	r25, r30
     132:	9e 07       	cpc	r25, r30
     134:	9e 07       	cpc	r25, r30
     136:	9e 07       	cpc	r25, r30
     138:	9e 07       	cpc	r25, r30
     13a:	9e 07       	cpc	r25, r30
     13c:	9e 07       	cpc	r25, r30
     13e:	9e 07       	cpc	r25, r30
     140:	9e 07       	cpc	r25, r30
     142:	9e 07       	cpc	r25, r30
     144:	9a 07       	cpc	r25, r26
     146:	9e 07       	cpc	r25, r30
     148:	9e 07       	cpc	r25, r30
     14a:	9e 07       	cpc	r25, r30
     14c:	9e 07       	cpc	r25, r30
     14e:	9e 07       	cpc	r25, r30
     150:	9e 07       	cpc	r25, r30
     152:	9e 07       	cpc	r25, r30
     154:	77 07       	cpc	r23, r23
     156:	9e 07       	cpc	r25, r30
     158:	9e 07       	cpc	r25, r30
     15a:	9e 07       	cpc	r25, r30
     15c:	9e 07       	cpc	r25, r30
     15e:	9e 07       	cpc	r25, r30
     160:	9e 07       	cpc	r25, r30
     162:	9e 07       	cpc	r25, r30
     164:	9e 07       	cpc	r25, r30
     166:	9e 07       	cpc	r25, r30
     168:	9e 07       	cpc	r25, r30
     16a:	9e 07       	cpc	r25, r30
     16c:	9e 07       	cpc	r25, r30
     16e:	9e 07       	cpc	r25, r30
     170:	9e 07       	cpc	r25, r30
     172:	9e 07       	cpc	r25, r30
     174:	6b 07       	cpc	r22, r27
     176:	9e 07       	cpc	r25, r30
     178:	9e 07       	cpc	r25, r30
     17a:	9e 07       	cpc	r25, r30
     17c:	9e 07       	cpc	r25, r30
     17e:	9e 07       	cpc	r25, r30
     180:	9e 07       	cpc	r25, r30
     182:	9e 07       	cpc	r25, r30
     184:	89 07       	cpc	r24, r25

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	ee e8       	ldi	r30, 0x8E	; 142
     19e:	fc e1       	ldi	r31, 0x1C	; 28
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ae 33       	cpi	r26, 0x3E	; 62
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	ae e3       	ldi	r26, 0x3E	; 62
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a0 3c       	cpi	r26, 0xC0	; 192
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	23 d5       	rcall	.+2630   	; 0xc08 <main>
     1c2:	0c 94 45 0e 	jmp	0x1c8a	; 0x1c8a <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <CAN_message_receive>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
     1c8:	8a e4       	ldi	r24, 0x4A	; 74
     1ca:	93 e0       	ldi	r25, 0x03	; 3
     1cc:	08 95       	ret

000001ce <CAN_construct_message>:
     1ce:	90 93 40 03 	sts	0x0340, r25
     1d2:	80 93 3f 03 	sts	0x033F, r24
     1d6:	60 93 41 03 	sts	0x0341, r22
     1da:	66 23       	and	r22, r22
     1dc:	41 f0       	breq	.+16     	; 0x1ee <CAN_construct_message+0x20>
     1de:	82 e4       	ldi	r24, 0x42	; 66
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	fc 01       	movw	r30, r24
     1e4:	11 92       	st	Z+, r1
     1e6:	2e 2f       	mov	r18, r30
     1e8:	28 1b       	sub	r18, r24
     1ea:	26 17       	cp	r18, r22
     1ec:	d8 f3       	brcs	.-10     	; 0x1e4 <CAN_construct_message+0x16>
     1ee:	08 95       	ret

000001f0 <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     1f0:	1f 92       	push	r1
     1f2:	0f 92       	push	r0
     1f4:	0f b6       	in	r0, 0x3f	; 63
     1f6:	0f 92       	push	r0
     1f8:	11 24       	eor	r1, r1
     1fa:	8f 93       	push	r24
	receive_flag = 1;
     1fc:	81 e0       	ldi	r24, 0x01	; 1
     1fe:	80 93 3e 03 	sts	0x033E, r24
}
     202:	8f 91       	pop	r24
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	//Disable global interrupt.
	cli();
     20e:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     210:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     212:	ea e6       	ldi	r30, 0x6A	; 106
     214:	f0 e0       	ldi	r31, 0x00	; 0
     216:	80 81       	ld	r24, Z
     218:	8e 7f       	andi	r24, 0xFE	; 254
     21a:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     21c:	80 81       	ld	r24, Z
     21e:	82 60       	ori	r24, 0x02	; 2
     220:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     222:	ec 9a       	sbi	0x1d, 4	; 29
		
	#endif
	//Enable global interrupt.
	sei();
     224:	78 94       	sei
     226:	08 95       	ret

00000228 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     228:	af d0       	rcall	.+350    	; 0x388 <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     22a:	68 e0       	ldi	r22, 0x08	; 8
     22c:	88 e2       	ldi	r24, 0x28	; 40
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	ce df       	rcall	.-100    	; 0x1ce <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     232:	4f ef       	ldi	r20, 0xFF	; 255
     234:	50 e0       	ldi	r21, 0x00	; 0
     236:	64 e6       	ldi	r22, 0x64	; 100
     238:	80 e6       	ldi	r24, 0x60	; 96
     23a:	8d d0       	rcall	.+282    	; 0x356 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     23c:	4f ef       	ldi	r20, 0xFF	; 255
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	64 e6       	ldi	r22, 0x64	; 100
     242:	80 e7       	ldi	r24, 0x70	; 112
     244:	88 d0       	rcall	.+272    	; 0x356 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     246:	41 e0       	ldi	r20, 0x01	; 1
     248:	50 e0       	ldi	r21, 0x00	; 0
     24a:	61 e0       	ldi	r22, 0x01	; 1
     24c:	8b e2       	ldi	r24, 0x2B	; 43
     24e:	83 d0       	rcall	.+262    	; 0x356 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
     250:	41 e0       	ldi	r20, 0x01	; 1
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	62 e0       	ldi	r22, 0x02	; 2
     256:	8b e2       	ldi	r24, 0x2B	; 43
     258:	7e d0       	rcall	.+252    	; 0x356 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     25a:	40 e0       	ldi	r20, 0x00	; 0
     25c:	50 e0       	ldi	r21, 0x00	; 0
     25e:	60 ee       	ldi	r22, 0xE0	; 224
     260:	8f e0       	ldi	r24, 0x0F	; 15
     262:	79 d0       	rcall	.+242    	; 0x356 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     264:	d4 cf       	rjmp	.-88     	; 0x20e <CAN_interrupt_setup>
     266:	08 95       	ret

00000268 <CAN_reception_complete>:

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     268:	04 c0       	rjmp	.+8      	; 0x272 <CAN_reception_complete+0xa>
		printf("CAN_reception_complete is stuck\n");
     26a:	87 e2       	ldi	r24, 0x27	; 39
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <puts>

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     272:	8c e2       	ldi	r24, 0x2C	; 44
     274:	62 d0       	rcall	.+196    	; 0x33a <MCP2515_read>
     276:	80 fd       	sbrc	r24, 0
     278:	04 c0       	rjmp	.+8      	; 0x282 <CAN_reception_complete+0x1a>
     27a:	8c e2       	ldi	r24, 0x2C	; 44
     27c:	5e d0       	rcall	.+188    	; 0x33a <MCP2515_read>
     27e:	81 ff       	sbrs	r24, 1
     280:	f4 cf       	rjmp	.-24     	; 0x26a <CAN_reception_complete+0x2>
		};
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     282:	8c e2       	ldi	r24, 0x2C	; 44
     284:	5a d0       	rcall	.+180    	; 0x33a <MCP2515_read>
     286:	80 ff       	sbrs	r24, 0
     288:	07 c0       	rjmp	.+14     	; 0x298 <CAN_reception_complete+0x30>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     28a:	40 e0       	ldi	r20, 0x00	; 0
     28c:	50 e0       	ldi	r21, 0x00	; 0
     28e:	61 e0       	ldi	r22, 0x01	; 1
     290:	8c e2       	ldi	r24, 0x2C	; 44
     292:	61 d0       	rcall	.+194    	; 0x356 <MCP2515_bit_modify>
		return 0;
     294:	80 e0       	ldi	r24, 0x00	; 0
     296:	08 95       	ret
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     298:	8c e2       	ldi	r24, 0x2C	; 44
     29a:	4f d0       	rcall	.+158    	; 0x33a <MCP2515_read>
     29c:	81 ff       	sbrs	r24, 1
     29e:	07 c0       	rjmp	.+14     	; 0x2ae <CAN_reception_complete+0x46>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     2a0:	40 e0       	ldi	r20, 0x00	; 0
     2a2:	50 e0       	ldi	r21, 0x00	; 0
     2a4:	62 e0       	ldi	r22, 0x02	; 2
     2a6:	8c e2       	ldi	r24, 0x2C	; 44
     2a8:	56 d0       	rcall	.+172    	; 0x356 <MCP2515_bit_modify>
		return 1;
     2aa:	81 e0       	ldi	r24, 0x01	; 1
     2ac:	08 95       	ret
	}
	return -1;
     2ae:	8f ef       	ldi	r24, 0xFF	; 255
}
     2b0:	08 95       	ret

000002b2 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     2b2:	1f 93       	push	r17
     2b4:	cf 93       	push	r28
     2b6:	df 93       	push	r29
	if(receive_flag){
     2b8:	80 91 3e 03 	lds	r24, 0x033E
     2bc:	88 23       	and	r24, r24
     2be:	a1 f1       	breq	.+104    	; 0x328 <CAN_data_receive+0x76>
		receive_flag = 0;
     2c0:	10 92 3e 03 	sts	0x033E, r1
		uint8_t n = CAN_reception_complete();
     2c4:	d1 df       	rcall	.-94     	; 0x268 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     2c6:	18 2f       	mov	r17, r24
     2c8:	12 95       	swap	r17
     2ca:	10 7f       	andi	r17, 0xF0	; 240
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     2cc:	81 e6       	ldi	r24, 0x61	; 97
     2ce:	81 0f       	add	r24, r17
     2d0:	34 d0       	rcall	.+104    	; 0x33a <MCP2515_read>
     2d2:	ec 01       	movw	r28, r24
     2d4:	82 e6       	ldi	r24, 0x62	; 98
     2d6:	81 0f       	add	r24, r17
     2d8:	30 d0       	rcall	.+96     	; 0x33a <MCP2515_read>
uint8_t CAN_data_receive(void) {
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     2da:	82 95       	swap	r24
     2dc:	86 95       	lsr	r24
     2de:	87 70       	andi	r24, 0x07	; 7
     2e0:	dd 27       	eor	r29, r29
     2e2:	cc 0f       	add	r28, r28
     2e4:	dd 1f       	adc	r29, r29
     2e6:	cc 0f       	add	r28, r28
     2e8:	dd 1f       	adc	r29, r29
     2ea:	cc 0f       	add	r28, r28
     2ec:	dd 1f       	adc	r29, r29
     2ee:	c8 2b       	or	r28, r24
     2f0:	d0 93 4b 03 	sts	0x034B, r29
     2f4:	c0 93 4a 03 	sts	0x034A, r28
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     2f8:	85 e6       	ldi	r24, 0x65	; 101
     2fa:	81 0f       	add	r24, r17
     2fc:	1e d0       	rcall	.+60     	; 0x33a <MCP2515_read>
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     2fe:	8f 70       	andi	r24, 0x0F	; 15
     300:	80 93 4c 03 	sts	0x034C, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     304:	88 23       	and	r24, r24
     306:	91 f0       	breq	.+36     	; 0x32c <CAN_data_receive+0x7a>
     308:	10 e0       	ldi	r17, 0x00	; 0
     30a:	cc e4       	ldi	r28, 0x4C	; 76
     30c:	d3 e0       	ldi	r29, 0x03	; 3
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     30e:	86 e6       	ldi	r24, 0x66	; 102
     310:	81 0f       	add	r24, r17
     312:	13 d0       	rcall	.+38     	; 0x33a <MCP2515_read>
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     314:	e1 2f       	mov	r30, r17
     316:	f0 e0       	ldi	r31, 0x00	; 0
     318:	e6 5b       	subi	r30, 0xB6	; 182
     31a:	fc 4f       	sbci	r31, 0xFC	; 252
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     31c:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     31e:	1f 5f       	subi	r17, 0xFF	; 255
     320:	88 81       	ld	r24, Y
     322:	18 17       	cp	r17, r24
     324:	a0 f3       	brcs	.-24     	; 0x30e <CAN_data_receive+0x5c>
     326:	04 c0       	rjmp	.+8      	; 0x330 <CAN_data_receive+0x7e>
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
     328:	80 e0       	ldi	r24, 0x00	; 0
     32a:	03 c0       	rjmp	.+6      	; 0x332 <CAN_data_receive+0x80>
		}
		#if UART_ENABLE
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
     32c:	81 e0       	ldi	r24, 0x01	; 1
     32e:	01 c0       	rjmp	.+2      	; 0x332 <CAN_data_receive+0x80>
     330:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     332:	df 91       	pop	r29
     334:	cf 91       	pop	r28
     336:	1f 91       	pop	r17
     338:	08 95       	ret

0000033a <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     33a:	cf 93       	push	r28
     33c:	c8 2f       	mov	r28, r24
     33e:	33 d0       	rcall	.+102    	; 0x3a6 <SPI_select>
     340:	83 e0       	ldi	r24, 0x03	; 3
     342:	25 d0       	rcall	.+74     	; 0x38e <SPI_send>
     344:	8c 2f       	mov	r24, r28
     346:	23 d0       	rcall	.+70     	; 0x38e <SPI_send>
     348:	27 d0       	rcall	.+78     	; 0x398 <SPI_receive>
     34a:	c8 2f       	mov	r28, r24
     34c:	2e d0       	rcall	.+92     	; 0x3aa <SPI_deselect>
     34e:	8c 2f       	mov	r24, r28
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	cf 91       	pop	r28
     354:	08 95       	ret

00000356 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	18 2f       	mov	r17, r24
     35e:	d6 2f       	mov	r29, r22
     360:	c4 2f       	mov	r28, r20
	SPI_select();
     362:	21 d0       	rcall	.+66     	; 0x3a6 <SPI_select>
	SPI_send(MCP_BITMOD);
     364:	85 e0       	ldi	r24, 0x05	; 5
     366:	13 d0       	rcall	.+38     	; 0x38e <SPI_send>
	SPI_send(adr);
     368:	81 2f       	mov	r24, r17
     36a:	11 d0       	rcall	.+34     	; 0x38e <SPI_send>
	SPI_send(mask);
     36c:	8d 2f       	mov	r24, r29
     36e:	0f d0       	rcall	.+30     	; 0x38e <SPI_send>
	SPI_send(data);
     370:	8c 2f       	mov	r24, r28
     372:	0d d0       	rcall	.+26     	; 0x38e <SPI_send>
	SPI_deselect();
     374:	1a d0       	rcall	.+52     	; 0x3aa <SPI_deselect>
}
     376:	df 91       	pop	r29
     378:	cf 91       	pop	r28
     37a:	1f 91       	pop	r17
     37c:	08 95       	ret

0000037e <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     37e:	13 d0       	rcall	.+38     	; 0x3a6 <SPI_select>
	SPI_send(MCP_RESET);
     380:	80 ec       	ldi	r24, 0xC0	; 192
     382:	05 d0       	rcall	.+10     	; 0x38e <SPI_send>
	SPI_deselect();
     384:	12 c0       	rjmp	.+36     	; 0x3aa <SPI_deselect>
     386:	08 95       	ret

00000388 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     388:	12 d0       	rcall	.+36     	; 0x3ae <SPI_initialize>
	MCP2515_reset();
     38a:	f9 cf       	rjmp	.-14     	; 0x37e <MCP2515_reset>
     38c:	08 95       	ret

0000038e <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     38e:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     390:	0d b4       	in	r0, 0x2d	; 45
     392:	07 fe       	sbrs	r0, 7
     394:	fd cf       	rjmp	.-6      	; 0x390 <SPI_send+0x2>

}
     396:	08 95       	ret

00000398 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	f9 df       	rcall	.-14     	; 0x38e <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     39c:	0d b4       	in	r0, 0x2d	; 45
     39e:	07 fe       	sbrs	r0, 7
     3a0:	fd cf       	rjmp	.-6      	; 0x39c <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     3a2:	8e b5       	in	r24, 0x2e	; 46
}
     3a4:	08 95       	ret

000003a6 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     3a6:	2f 98       	cbi	0x05, 7	; 5
     3a8:	08 95       	ret

000003aa <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     3aa:	2f 9a       	sbi	0x05, 7	; 5
     3ac:	08 95       	ret

000003ae <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     3ae:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     3b0:	8c b5       	in	r24, 0x2c	; 44
     3b2:	81 60       	ori	r24, 0x01	; 1
     3b4:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     3b6:	84 b1       	in	r24, 0x04	; 4
     3b8:	86 68       	ori	r24, 0x86	; 134
     3ba:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     3bc:	8c b5       	in	r24, 0x2c	; 44
     3be:	80 65       	ori	r24, 0x50	; 80
     3c0:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     3c2:	f3 cf       	rjmp	.-26     	; 0x3aa <SPI_deselect>
     3c4:	08 95       	ret

000003c6 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     3c6:	e0 ec       	ldi	r30, 0xC0	; 192
     3c8:	f0 e0       	ldi	r31, 0x00	; 0
     3ca:	90 81       	ld	r25, Z
     3cc:	95 ff       	sbrs	r25, 5
     3ce:	fd cf       	rjmp	.-6      	; 0x3ca <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     3d0:	80 93 c6 00 	sts	0x00C6, r24
     3d4:	08 95       	ret

000003d6 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     3d6:	e0 ec       	ldi	r30, 0xC0	; 192
     3d8:	f0 e0       	ldi	r31, 0x00	; 0
     3da:	80 81       	ld	r24, Z
     3dc:	88 23       	and	r24, r24
     3de:	ec f7       	brge	.-6      	; 0x3da <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     3e0:	80 91 c6 00 	lds	r24, 0x00C6
}
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	08 95       	ret

000003e8 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     3e8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     3ec:	87 e6       	ldi	r24, 0x67	; 103
     3ee:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     3f2:	88 e1       	ldi	r24, 0x18	; 24
     3f4:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     3f8:	8e e0       	ldi	r24, 0x0E	; 14
     3fa:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     3fe:	6b ee       	ldi	r22, 0xEB	; 235
     400:	71 e0       	ldi	r23, 0x01	; 1
     402:	83 ee       	ldi	r24, 0xE3	; 227
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	dd c7       	rjmp	.+4026   	; 0x13c2 <fdevopen>
     408:	08 95       	ret

0000040a <game_init>:

uint16_t game_update;
uint16_t game_score_delay;
uint8_t joystick_sensitivity;
	
void game_init(uint8_t params[CAN_GAME_PARAMS_LENGTH]){
     40a:	fc 01       	movw	r30, r24
	
	solenoid_charge = 0;
     40c:	10 92 70 03 	sts	0x0370, r1
	joystick_x = 0;
     410:	10 92 6f 03 	sts	0x036F, r1
     414:	10 92 6e 03 	sts	0x036E, r1
	joystick_y	= 0;
     418:	10 92 62 03 	sts	0x0362, r1
     41c:	10 92 61 03 	sts	0x0361, r1
	joystick_button = 0;
     420:	10 92 60 03 	sts	0x0360, r1
	button_l = 0;
     424:	10 92 6d 03 	sts	0x036D, r1
	button_r = 0;
     428:	10 92 6a 03 	sts	0x036A, r1
	slider_l = 0;
     42c:	10 92 69 03 	sts	0x0369, r1
	slider_r = 0;
     430:	10 92 68 03 	sts	0x0368, r1
	pos_ref = 0;
     434:	10 92 67 03 	sts	0x0367, r1
     438:	10 92 66 03 	sts	0x0366, r1
	
	joystick_min = (int8_t) params[0];
     43c:	20 81       	ld	r18, Z
     43e:	20 93 73 03 	sts	0x0373, r18
	joystick_max = (int8_t) params[1];
     442:	31 81       	ldd	r19, Z+1	; 0x01
     444:	30 93 65 03 	sts	0x0365, r19
	joystick_sensitivity = (uint8_t)(params[2] <<8)|params[3];
     448:	63 81       	ldd	r22, Z+3	; 0x03
     44a:	60 93 64 03 	sts	0x0364, r22
	//joystick_sensitivity = params[2];
	slider_min   = (int8_t) params[4];
     44e:	44 81       	ldd	r20, Z+4	; 0x04
     450:	40 93 6c 03 	sts	0x036C, r20
	slider_max   = (int8_t) params[5];
     454:	55 81       	ldd	r21, Z+5	; 0x05
     456:	50 93 6b 03 	sts	0x036B, r21
	controller_type   = (uint8_t) params[6];
     45a:	86 81       	ldd	r24, Z+6	; 0x06
     45c:	80 93 63 03 	sts	0x0363, r24
	
	printf("Game parameters: %i\t%i\t%i\t%i\t%i\t%i\n",joystick_min, joystick_max, joystick_sensitivity, slider_min, slider_max, controller_type);
     460:	1f 92       	push	r1
     462:	8f 93       	push	r24
     464:	85 2f       	mov	r24, r21
     466:	99 27       	eor	r25, r25
     468:	87 fd       	sbrc	r24, 7
     46a:	90 95       	com	r25
     46c:	9f 93       	push	r25
     46e:	5f 93       	push	r21
     470:	84 2f       	mov	r24, r20
     472:	99 27       	eor	r25, r25
     474:	87 fd       	sbrc	r24, 7
     476:	90 95       	com	r25
     478:	9f 93       	push	r25
     47a:	4f 93       	push	r20
     47c:	1f 92       	push	r1
     47e:	6f 93       	push	r22
     480:	83 2f       	mov	r24, r19
     482:	99 27       	eor	r25, r25
     484:	87 fd       	sbrc	r24, 7
     486:	90 95       	com	r25
     488:	9f 93       	push	r25
     48a:	3f 93       	push	r19
     48c:	82 2f       	mov	r24, r18
     48e:	99 27       	eor	r25, r25
     490:	87 fd       	sbrc	r24, 7
     492:	90 95       	com	r25
     494:	9f 93       	push	r25
     496:	2f 93       	push	r18
     498:	87 e4       	ldi	r24, 0x47	; 71
     49a:	92 e0       	ldi	r25, 0x02	; 2
     49c:	9f 93       	push	r25
     49e:	8f 93       	push	r24
     4a0:	da d7       	rcall	.+4020   	; 0x1456 <printf>
	game_update = timestamp(0);
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	95 d4       	rcall	.+2346   	; 0xdd2 <timestamp>
     4a8:	90 93 5f 03 	sts	0x035F, r25
     4ac:	80 93 5e 03 	sts	0x035E, r24
     4b0:	8d b7       	in	r24, 0x3d	; 61
     4b2:	9e b7       	in	r25, 0x3e	; 62
     4b4:	0e 96       	adiw	r24, 0x0e	; 14
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	f8 94       	cli
     4ba:	9e bf       	out	0x3e, r25	; 62
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	8d bf       	out	0x3d, r24	; 61
     4c0:	08 95       	ret

000004c2 <game_score_ball>:
}



void game_score_ball(void){
	if ((PIND & (1<<PIND2)) == 0 && game_score_delay < timestamp(0)){
     4c2:	4a 99       	sbic	0x09, 2	; 9
     4c4:	1d c0       	rjmp	.+58     	; 0x500 <game_score_ball+0x3e>
     4c6:	80 e0       	ldi	r24, 0x00	; 0
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	83 d4       	rcall	.+2310   	; 0xdd2 <timestamp>
     4cc:	20 91 74 03 	lds	r18, 0x0374
     4d0:	30 91 75 03 	lds	r19, 0x0375
     4d4:	28 17       	cp	r18, r24
     4d6:	39 07       	cpc	r19, r25
     4d8:	98 f4       	brcc	.+38     	; 0x500 <game_score_ball+0x3e>
		printf("SCORE\n");
     4da:	8b e6       	ldi	r24, 0x6B	; 107
     4dc:	92 e0       	ldi	r25, 0x02	; 2
     4de:	cc d7       	rcall	.+3992   	; 0x1478 <puts>
		score_count += 10;
     4e0:	80 91 71 03 	lds	r24, 0x0371
     4e4:	90 91 72 03 	lds	r25, 0x0372
     4e8:	0a 96       	adiw	r24, 0x0a	; 10
     4ea:	90 93 72 03 	sts	0x0372, r25
     4ee:	80 93 71 03 	sts	0x0371, r24
		game_score_delay = timestamp(1000);//must wait a second before another goal is possible
     4f2:	88 ee       	ldi	r24, 0xE8	; 232
     4f4:	93 e0       	ldi	r25, 0x03	; 3
     4f6:	6d d4       	rcall	.+2266   	; 0xdd2 <timestamp>
     4f8:	90 93 75 03 	sts	0x0375, r25
     4fc:	80 93 74 03 	sts	0x0374, r24
     500:	08 95       	ret

00000502 <game_play>:
	
	printf("Game parameters: %i\t%i\t%i\t%i\t%i\t%i\n",joystick_min, joystick_max, joystick_sensitivity, slider_min, slider_max, controller_type);
	game_update = timestamp(0);
}

uint16_t game_play(void){
     502:	8f 92       	push	r8
     504:	9f 92       	push	r9
     506:	af 92       	push	r10
     508:	bf 92       	push	r11
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	1f 93       	push	r17
     514:	cf 93       	push	r28
     516:	df 93       	push	r29
	score_count = 0;
     518:	10 92 72 03 	sts	0x0372, r1
     51c:	10 92 71 03 	sts	0x0371, r1
	uint8_t game_on = 1;
	
	uint8_t IR_max;
	IR_max = read_adc();
     520:	bd d0       	rcall	.+378    	; 0x69c <read_adc>
// 		}	
		if(controller_type == CONTROLLER_TYPE_SLIDER){ //if we are using the slider //CHANBEDGODKSFGSDHGOLJHSDLGKJHSDLKJGHLIJ CHANGE THIS
			pos_ref = 90* slider_r;
			//pos_ref = 5000;
		}else if(controller_type == CONTROLLER_TYPE_JOYSTICK_ONLY){ //if we are using the slider //CHANBEDGODKSFGSDHGOLJHSDLGKJHSDLKJGHLIJ CHANGE THIS
			pos_ref = 90* slider_r;
     522:	1a e5       	ldi	r17, 0x5A	; 90
		}

		

		// When joystick button is pressed, keep motor position constant and use joystick to control servo.
		servo_set(joystick_x);
     524:	ce e6       	ldi	r28, 0x6E	; 110
     526:	d3 e0       	ldi	r29, 0x03	; 3
     528:	4c 01       	movw	r8, r24
     52a:	99 24       	eor	r9, r9
			solenoid_fire();
		}
		
		//printf("IR: %i\n", read_adc());
		// Check if IR-beam is interrupted.
		if(read_adc() < IR_interrupt_factor*IR_max){
     52c:	aa 24       	eor	r10, r10
     52e:	97 fc       	sbrc	r9, 7
     530:	a0 94       	com	r10
     532:	ba 2c       	mov	r11, r10
	uint8_t IR_max;
	IR_max = read_adc();
	
	while(game_on){
		// Get input values
		if(CAN_data_receive()){
     534:	be de       	rcall	.-644    	; 0x2b2 <CAN_data_receive>
     536:	88 23       	and	r24, r24
     538:	99 f1       	breq	.+102    	; 0x5a0 <game_play+0x9e>
			//data = CAN_message_receive()->data;
			//id   = CAN_message_receive()->id;
			if(CAN_message_receive()->id == CAN_GAME_CONTROL_ID){
     53a:	46 de       	rcall	.-884    	; 0x1c8 <CAN_message_receive>
     53c:	fc 01       	movw	r30, r24
     53e:	80 81       	ld	r24, Z
     540:	91 81       	ldd	r25, Z+1	; 0x01
     542:	44 97       	sbiw	r24, 0x14	; 20
     544:	69 f5       	brne	.+90     	; 0x5a0 <game_play+0x9e>
				joystick_x		= (int8_t) CAN_message_receive()->data[0];
     546:	40 de       	rcall	.-896    	; 0x1c8 <CAN_message_receive>
     548:	fc 01       	movw	r30, r24
     54a:	83 81       	ldd	r24, Z+3	; 0x03
     54c:	99 27       	eor	r25, r25
     54e:	87 fd       	sbrc	r24, 7
     550:	90 95       	com	r25
     552:	90 93 6f 03 	sts	0x036F, r25
     556:	80 93 6e 03 	sts	0x036E, r24
				joystick_y		= (int8_t) CAN_message_receive()->data[1];
     55a:	36 de       	rcall	.-916    	; 0x1c8 <CAN_message_receive>
     55c:	fc 01       	movw	r30, r24
     55e:	84 81       	ldd	r24, Z+4	; 0x04
     560:	99 27       	eor	r25, r25
     562:	87 fd       	sbrc	r24, 7
     564:	90 95       	com	r25
     566:	90 93 62 03 	sts	0x0362, r25
     56a:	80 93 61 03 	sts	0x0361, r24
				joystick_button = (int8_t) CAN_message_receive()->data[2];
     56e:	2c de       	rcall	.-936    	; 0x1c8 <CAN_message_receive>
     570:	fc 01       	movw	r30, r24
     572:	85 81       	ldd	r24, Z+5	; 0x05
     574:	80 93 60 03 	sts	0x0360, r24
				button_l		= (int8_t) CAN_message_receive()->data[3];
     578:	27 de       	rcall	.-946    	; 0x1c8 <CAN_message_receive>
     57a:	fc 01       	movw	r30, r24
     57c:	86 81       	ldd	r24, Z+6	; 0x06
     57e:	80 93 6d 03 	sts	0x036D, r24
				button_r		= (int8_t) CAN_message_receive()->data[4];
     582:	22 de       	rcall	.-956    	; 0x1c8 <CAN_message_receive>
     584:	fc 01       	movw	r30, r24
     586:	87 81       	ldd	r24, Z+7	; 0x07
     588:	80 93 6a 03 	sts	0x036A, r24
				slider_l		= (int8_t) CAN_message_receive()->data[5];
     58c:	1d de       	rcall	.-966    	; 0x1c8 <CAN_message_receive>
     58e:	fc 01       	movw	r30, r24
     590:	80 85       	ldd	r24, Z+8	; 0x08
     592:	80 93 69 03 	sts	0x0369, r24
				slider_r		= (int8_t) CAN_message_receive()->data[6];
     596:	18 de       	rcall	.-976    	; 0x1c8 <CAN_message_receive>
     598:	fc 01       	movw	r30, r24
     59a:	81 85       	ldd	r24, Z+9	; 0x09
     59c:	80 93 68 03 	sts	0x0368, r24
// 			game_update = timestamp(40);
// 
// 			// Get desired motor position
// 			
// 		}	
		if(controller_type == CONTROLLER_TYPE_SLIDER){ //if we are using the slider //CHANBEDGODKSFGSDHGOLJHSDLGKJHSDLKJGHLIJ CHANGE THIS
     5a0:	80 91 63 03 	lds	r24, 0x0363
     5a4:	81 30       	cpi	r24, 0x01	; 1
     5a6:	51 f4       	brne	.+20     	; 0x5bc <game_play+0xba>
			pos_ref = 90* slider_r;
     5a8:	20 91 68 03 	lds	r18, 0x0368
     5ac:	21 03       	mulsu	r18, r17
     5ae:	c0 01       	movw	r24, r0
     5b0:	11 24       	eor	r1, r1
     5b2:	90 93 67 03 	sts	0x0367, r25
     5b6:	80 93 66 03 	sts	0x0366, r24
     5ba:	0b c0       	rjmp	.+22     	; 0x5d2 <game_play+0xd0>
			//pos_ref = 5000;
		}else if(controller_type == CONTROLLER_TYPE_JOYSTICK_ONLY){ //if we are using the slider //CHANBEDGODKSFGSDHGOLJHSDLGKJHSDLKJGHLIJ CHANGE THIS
     5bc:	81 11       	cpse	r24, r1
     5be:	09 c0       	rjmp	.+18     	; 0x5d2 <game_play+0xd0>
			pos_ref = 90* slider_r;
     5c0:	20 91 68 03 	lds	r18, 0x0368
     5c4:	21 03       	mulsu	r18, r17
     5c6:	c0 01       	movw	r24, r0
     5c8:	11 24       	eor	r1, r1
     5ca:	90 93 67 03 	sts	0x0367, r25
     5ce:	80 93 66 03 	sts	0x0366, r24
		}

		

		// When joystick button is pressed, keep motor position constant and use joystick to control servo.
		servo_set(joystick_x);
     5d2:	88 81       	ld	r24, Y
     5d4:	a5 d2       	rcall	.+1354   	; 0xb20 <servo_set>
 		
		// Shoot on button release of joystick-button.
			
		
		if(button_r){//if(~joystick_button && solenoid_charge){
     5d6:	80 91 6a 03 	lds	r24, 0x036A
     5da:	81 11       	cpse	r24, r1
			solenoid_fire();
     5dc:	6c d3       	rcall	.+1752   	; 0xcb6 <solenoid_fire>
		}
		
		//printf("IR: %i\n", read_adc());
		// Check if IR-beam is interrupted.
		if(read_adc() < IR_interrupt_factor*IR_max){
     5de:	5e d0       	rcall	.+188    	; 0x69c <read_adc>
     5e0:	bc 01       	movw	r22, r24
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	c2 d5       	rcall	.+2948   	; 0x116c <__floatunsisf>
     5e8:	6b 01       	movw	r12, r22
     5ea:	7c 01       	movw	r14, r24
     5ec:	c5 01       	movw	r24, r10
     5ee:	b4 01       	movw	r22, r8
     5f0:	bf d5       	rcall	.+2942   	; 0x1170 <__floatsisf>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e4       	ldi	r20, 0x40	; 64
     5f8:	5f e3       	ldi	r21, 0x3F	; 63
     5fa:	6e d6       	rcall	.+3292   	; 0x12d8 <__mulsf3>
     5fc:	9b 01       	movw	r18, r22
     5fe:	ac 01       	movw	r20, r24
     600:	c7 01       	movw	r24, r14
     602:	b6 01       	movw	r22, r12
     604:	16 d5       	rcall	.+2604   	; 0x1032 <__cmpsf2>
     606:	88 23       	and	r24, r24
     608:	94 f4       	brge	.+36     	; 0x62e <game_play+0x12c>
			printf("You lost!");
     60a:	81 e7       	ldi	r24, 0x71	; 113
     60c:	92 e0       	ldi	r25, 0x02	; 2
     60e:	9f 93       	push	r25
     610:	8f 93       	push	r24
     612:	21 d7       	rcall	.+3650   	; 0x1456 <printf>
			game_on = 0;
		}
		// Update position.
		pi_controller_update(pos_ref);
     614:	80 91 66 03 	lds	r24, 0x0366
     618:	90 91 67 03 	lds	r25, 0x0367
     61c:	5f d1       	rcall	.+702    	; 0x8dc <pi_controller_update>
		game_score_ball();
     61e:	51 df       	rcall	.-350    	; 0x4c2 <game_score_ball>
	}
	return score_count;
     620:	80 91 71 03 	lds	r24, 0x0371
     624:	90 91 72 03 	lds	r25, 0x0372
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	07 c0       	rjmp	.+14     	; 0x63c <game_play+0x13a>
		if(read_adc() < IR_interrupt_factor*IR_max){
			printf("You lost!");
			game_on = 0;
		}
		// Update position.
		pi_controller_update(pos_ref);
     62e:	80 91 66 03 	lds	r24, 0x0366
     632:	90 91 67 03 	lds	r25, 0x0367
     636:	52 d1       	rcall	.+676    	; 0x8dc <pi_controller_update>
		game_score_ball();
     638:	44 df       	rcall	.-376    	; 0x4c2 <game_score_ball>
     63a:	7c cf       	rjmp	.-264    	; 0x534 <game_play+0x32>
	}
	return score_count;
}
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	ff 90       	pop	r15
     644:	ef 90       	pop	r14
     646:	df 90       	pop	r13
     648:	cf 90       	pop	r12
     64a:	bf 90       	pop	r11
     64c:	af 90       	pop	r10
     64e:	9f 90       	pop	r9
     650:	8f 90       	pop	r8
     652:	08 95       	ret

00000654 <IR_init>:
     654:	cf 93       	push	r28
     656:	df 93       	push	r29
     658:	80 98       	cbi	0x10, 0	; 16
     65a:	ea e7       	ldi	r30, 0x7A	; 122
     65c:	f0 e0       	ldi	r31, 0x00	; 0
     65e:	80 81       	ld	r24, Z
     660:	87 60       	ori	r24, 0x07	; 7
     662:	80 83       	st	Z, r24
     664:	ac e7       	ldi	r26, 0x7C	; 124
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	80 e4       	ldi	r24, 0x40	; 64
     66a:	8c 93       	st	X, r24
     66c:	8c 91       	ld	r24, X
     66e:	8c 93       	st	X, r24
     670:	cb e7       	ldi	r28, 0x7B	; 123
     672:	d0 e0       	ldi	r29, 0x00	; 0
     674:	88 81       	ld	r24, Y
     676:	87 7f       	andi	r24, 0xF7	; 247
     678:	88 83       	st	Y, r24
     67a:	80 81       	ld	r24, Z
     67c:	80 62       	ori	r24, 0x20	; 32
     67e:	80 83       	st	Z, r24
     680:	87 e0       	ldi	r24, 0x07	; 7
     682:	88 83       	st	Y, r24
     684:	8c 91       	ld	r24, X
     686:	80 62       	ori	r24, 0x20	; 32
     688:	8c 93       	st	X, r24
     68a:	80 81       	ld	r24, Z
     68c:	80 68       	ori	r24, 0x80	; 128
     68e:	80 83       	st	Z, r24
     690:	80 81       	ld	r24, Z
     692:	80 64       	ori	r24, 0x40	; 64
     694:	80 83       	st	Z, r24
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <read_adc>:
     69c:	ea e7       	ldi	r30, 0x7A	; 122
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	80 81       	ld	r24, Z
     6a2:	80 64       	ori	r24, 0x40	; 64
     6a4:	80 83       	st	Z, r24
     6a6:	80 81       	ld	r24, Z
     6a8:	86 fd       	sbrc	r24, 6
     6aa:	fd cf       	rjmp	.-6      	; 0x6a6 <read_adc+0xa>
     6ac:	80 91 79 00 	lds	r24, 0x0079
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	08 95       	ret

000006b4 <motor_set_motor_speed>:
}


int16_t motor_get_speed_max(void){
	return motor_speed_max;
}
     6b4:	cf 93       	push	r28
     6b6:	df 93       	push	r29
     6b8:	00 d0       	rcall	.+0      	; 0x6ba <motor_set_motor_speed+0x6>
     6ba:	cd b7       	in	r28, 0x3d	; 61
     6bc:	de b7       	in	r29, 0x3e	; 62
     6be:	90 e5       	ldi	r25, 0x50	; 80
     6c0:	99 83       	std	Y+1, r25	; 0x01
     6c2:	1a 82       	std	Y+2, r1	; 0x02
     6c4:	8b 83       	std	Y+3, r24	; 0x03
     6c6:	63 e0       	ldi	r22, 0x03	; 3
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	ce 01       	movw	r24, r28
     6cc:	01 96       	adiw	r24, 0x01	; 1
     6ce:	a7 d3       	rcall	.+1870   	; 0xe1e <TWI_Start_Transceiver_With_Data>
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <motor_set_direction>:
     6dc:	8f 3f       	cpi	r24, 0xFF	; 255
     6de:	41 f0       	breq	.+16     	; 0x6f0 <motor_set_direction+0x14>
     6e0:	81 30       	cpi	r24, 0x01	; 1
     6e2:	59 f4       	brne	.+22     	; 0x6fa <motor_set_direction+0x1e>
     6e4:	e2 e0       	ldi	r30, 0x02	; 2
     6e6:	f1 e0       	ldi	r31, 0x01	; 1
     6e8:	80 81       	ld	r24, Z
     6ea:	8d 7f       	andi	r24, 0xFD	; 253
     6ec:	80 83       	st	Z, r24
     6ee:	08 95       	ret
     6f0:	e2 e0       	ldi	r30, 0x02	; 2
     6f2:	f1 e0       	ldi	r31, 0x01	; 1
     6f4:	80 81       	ld	r24, Z
     6f6:	82 60       	ori	r24, 0x02	; 2
     6f8:	80 83       	st	Z, r24
     6fa:	08 95       	ret

000006fc <encoder_reset>:
     6fc:	e2 e0       	ldi	r30, 0x02	; 2
     6fe:	f1 e0       	ldi	r31, 0x01	; 1
     700:	80 81       	ld	r24, Z
     702:	8f 7b       	andi	r24, 0xBF	; 191
     704:	80 83       	st	Z, r24
     706:	8a e6       	ldi	r24, 0x6A	; 106
     708:	8a 95       	dec	r24
     70a:	f1 f7       	brne	.-4      	; 0x708 <encoder_reset+0xc>
     70c:	00 c0       	rjmp	.+0      	; 0x70e <encoder_reset+0x12>
     70e:	80 81       	ld	r24, Z
     710:	80 64       	ori	r24, 0x40	; 64
     712:	80 83       	st	Z, r24
     714:	08 95       	ret

00000716 <encoder_read>:
     716:	e2 e0       	ldi	r30, 0x02	; 2
     718:	f1 e0       	ldi	r31, 0x01	; 1
     71a:	80 81       	ld	r24, Z
     71c:	88 60       	ori	r24, 0x08	; 8
     71e:	80 83       	st	Z, r24
     720:	80 81       	ld	r24, Z
     722:	8f 7d       	andi	r24, 0xDF	; 223
     724:	80 83       	st	Z, r24
     726:	80 81       	ld	r24, Z
     728:	87 7f       	andi	r24, 0xF7	; 247
     72a:	80 83       	st	Z, r24
     72c:	8a e6       	ldi	r24, 0x6A	; 106
     72e:	8a 95       	dec	r24
     730:	f1 f7       	brne	.-4      	; 0x72e <encoder_read+0x18>
     732:	00 c0       	rjmp	.+0      	; 0x734 <encoder_read+0x1e>
     734:	20 91 06 01 	lds	r18, 0x0106
     738:	80 81       	ld	r24, Z
     73a:	88 60       	ori	r24, 0x08	; 8
     73c:	80 83       	st	Z, r24
     73e:	8a e6       	ldi	r24, 0x6A	; 106
     740:	8a 95       	dec	r24
     742:	f1 f7       	brne	.-4      	; 0x740 <encoder_read+0x2a>
     744:	00 c0       	rjmp	.+0      	; 0x746 <encoder_read+0x30>
     746:	80 91 06 01 	lds	r24, 0x0106
     74a:	90 81       	ld	r25, Z
     74c:	90 62       	ori	r25, 0x20	; 32
     74e:	90 83       	st	Z, r25
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	92 2b       	or	r25, r18
     754:	08 95       	ret

00000756 <motor_goto_end>:


int16_t pos;
int16_t old_pos;

int16_t motor_goto_end(uint8_t motor_speed, int8_t direction){
     756:	1f 93       	push	r17
     758:	cf 93       	push	r28
     75a:	df 93       	push	r29
     75c:	c8 2f       	mov	r28, r24
     75e:	86 2f       	mov	r24, r22
	motor_set_direction(direction);
     760:	bd df       	rcall	.-134    	; 0x6dc <motor_set_direction>
	motor_set_motor_speed(motor_speed);
     762:	8c 2f       	mov	r24, r28
     764:	a7 df       	rcall	.-178    	; 0x6b4 <motor_set_motor_speed>
	pos = encoder_read();
     766:	d7 df       	rcall	.-82     	; 0x716 <encoder_read>
     768:	90 93 7e 03 	sts	0x037E, r25
     76c:	80 93 7d 03 	sts	0x037D, r24
	uint8_t time_counter = 0;
     770:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encoder_val = 0;
	
	while(time_counter < 2*TIMER_FREQ){
		encoder_val = encoder_read();
     772:	d1 df       	rcall	.-94     	; 0x716 <encoder_read>
     774:	ec 01       	movw	r28, r24
		time_counter += timer_check_flag();
     776:	23 d3       	rcall	.+1606   	; 0xdbe <timer_check_flag>
     778:	18 0f       	add	r17, r24
		if(encoder_val != pos){
     77a:	20 91 7d 03 	lds	r18, 0x037D
     77e:	30 91 7e 03 	lds	r19, 0x037E
     782:	c2 17       	cp	r28, r18
     784:	d3 07       	cpc	r29, r19
     786:	21 f0       	breq	.+8      	; 0x790 <motor_goto_end+0x3a>
			pos = encoder_val;
     788:	d0 93 7e 03 	sts	0x037E, r29
     78c:	c0 93 7d 03 	sts	0x037D, r28
	motor_set_motor_speed(motor_speed);
	pos = encoder_read();
	uint8_t time_counter = 0;
	int16_t encoder_val = 0;
	
	while(time_counter < 2*TIMER_FREQ){
     790:	14 36       	cpi	r17, 0x64	; 100
     792:	78 f3       	brcs	.-34     	; 0x772 <motor_goto_end+0x1c>
		time_counter += timer_check_flag();
		if(encoder_val != pos){
			pos = encoder_val;
		}	
	}
	motor_set_motor_speed(0);
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	8e df       	rcall	.-228    	; 0x6b4 <motor_set_motor_speed>
	return pos;
}
     798:	80 91 7d 03 	lds	r24, 0x037D
     79c:	90 91 7e 03 	lds	r25, 0x037E
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	1f 91       	pop	r17
     7a6:	08 95       	ret

000007a8 <motor_calibrate>:
uint8_t motor_speed_min;
uint8_t motor_speed_max;

#define MIN_VELOCITY 10

float  motor_calibrate(uint8_t motor_speed){
     7a8:	cf 93       	push	r28
     7aa:	c8 2f       	mov	r28, r24
	//Move sledge all the way to the right.
	motor_goto_end(motor_speed,-MOTOR_POLARITY);
     7ac:	6f ef       	ldi	r22, 0xFF	; 255
     7ae:	d3 df       	rcall	.-90     	; 0x756 <motor_goto_end>
	encoder_reset();
     7b0:	a5 df       	rcall	.-182    	; 0x6fc <encoder_reset>
	pos_max = motor_goto_end(motor_speed,MOTOR_POLARITY);
     7b2:	61 e0       	ldi	r22, 0x01	; 1
     7b4:	8c 2f       	mov	r24, r28
     7b6:	cf df       	rcall	.-98     	; 0x756 <motor_goto_end>
     7b8:	90 93 80 03 	sts	0x0380, r25
     7bc:	80 93 7f 03 	sts	0x037F, r24
	motor_goto_end(motor_speed,-MOTOR_POLARITY);
     7c0:	6f ef       	ldi	r22, 0xFF	; 255
     7c2:	8c 2f       	mov	r24, r28
     7c4:	c8 df       	rcall	.-112    	; 0x756 <motor_goto_end>
	
	
	printf("E_min:%i\tE_Max: %i\n",pos_min, pos_max);
     7c6:	80 91 80 03 	lds	r24, 0x0380
     7ca:	8f 93       	push	r24
     7cc:	80 91 7f 03 	lds	r24, 0x037F
     7d0:	8f 93       	push	r24
     7d2:	80 91 56 03 	lds	r24, 0x0356
     7d6:	8f 93       	push	r24
     7d8:	80 91 55 03 	lds	r24, 0x0355
     7dc:	8f 93       	push	r24
     7de:	8b e7       	ldi	r24, 0x7B	; 123
     7e0:	92 e0       	ldi	r25, 0x02	; 2
     7e2:	9f 93       	push	r25
     7e4:	8f 93       	push	r24
     7e6:	37 d6       	rcall	.+3182   	; 0x1456 <printf>
	
	return pos_max;
     7e8:	60 91 7f 03 	lds	r22, 0x037F
     7ec:	70 91 80 03 	lds	r23, 0x0380
     7f0:	88 27       	eor	r24, r24
     7f2:	77 fd       	sbrc	r23, 7
     7f4:	80 95       	com	r24
     7f6:	98 2f       	mov	r25, r24
     7f8:	bb d4       	rcall	.+2422   	; 0x1170 <__floatsisf>
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	0f 90       	pop	r0
     802:	0f 90       	pop	r0
     804:	0f 90       	pop	r0
}
     806:	cf 91       	pop	r28
     808:	08 95       	ret

0000080a <motor_init>:
#include "../../common_library/uart.h"

int16_t motor_init(void){
	
	// Make all relevant motor pins output.
	MOTOR_DDR |= (1<<OEN)|(1<<RSTN)|(1<<SEL)|(1<<EN)|(1<<DIR);
     80a:	e1 e0       	ldi	r30, 0x01	; 1
     80c:	f1 e0       	ldi	r31, 0x01	; 1
     80e:	80 81       	ld	r24, Z
     810:	8a 67       	ori	r24, 0x7A	; 122
     812:	80 83       	st	Z, r24
	
	// Make all encoder pins input.
	ENCODER_DDR = 0x00;
     814:	10 92 07 01 	sts	0x0107, r1
	
	// Enable motor.
	MOTOR_PORT |= (1<<EN);
     818:	e2 e0       	ldi	r30, 0x02	; 2
     81a:	f1 e0       	ldi	r31, 0x01	; 1
     81c:	80 81       	ld	r24, Z
     81e:	80 61       	ori	r24, 0x10	; 16
     820:	80 83       	st	Z, r24
	
	encoder_reset();
     822:	6c df       	rcall	.-296    	; 0x6fc <encoder_reset>
	motor_set_motor_speed(0);
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	46 df       	rcall	.-372    	; 0x6b4 <motor_set_motor_speed>
	int16_t pos_max = motor_calibrate(100);
     828:	84 e6       	ldi	r24, 0x64	; 100
     82a:	be df       	rcall	.-132    	; 0x7a8 <motor_calibrate>
     82c:	6e d4       	rcall	.+2268   	; 0x110a <__fixsfsi>
	return pos_max;
	
}
     82e:	cb 01       	movw	r24, r22
     830:	08 95       	ret

00000832 <pi_controller_init>:
	acc_fric = z - vel/kInv/mInv;
	int16_t friction =  acc_fric;
	return friction;	
}
void pi_controller_reset(void){
	pos_errSum = 0;
     832:	cf 92       	push	r12
     834:	df 92       	push	r13
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	1f 93       	push	r17
     83e:	69 01       	movw	r12, r18
     840:	7a 01       	movw	r14, r20
     842:	10 92 a1 03 	sts	0x03A1, r1
     846:	10 92 a0 03 	sts	0x03A0, r1
     84a:	10 92 67 03 	sts	0x0367, r1
     84e:	10 92 66 03 	sts	0x0366, r1
     852:	10 92 aa 03 	sts	0x03AA, r1
     856:	10 92 a9 03 	sts	0x03A9, r1
     85a:	57 d4       	rcall	.+2222   	; 0x110a <__fixsfsi>
     85c:	70 93 82 03 	sts	0x0382, r23
     860:	60 93 81 03 	sts	0x0381, r22
     864:	c7 01       	movw	r24, r14
     866:	b6 01       	movw	r22, r12
     868:	50 d4       	rcall	.+2208   	; 0x110a <__fixsfsi>
     86a:	70 93 9f 03 	sts	0x039F, r23
     86e:	60 93 9e 03 	sts	0x039E, r22
     872:	10 93 94 03 	sts	0x0394, r17
     876:	00 93 93 03 	sts	0x0393, r16
     87a:	c8 01       	movw	r24, r16
     87c:	32 d2       	rcall	.+1124   	; 0xce2 <initialize_timer>
     87e:	c5 df       	rcall	.-118    	; 0x80a <motor_init>
     880:	80 93 7f 03 	sts	0x037F, r24
     884:	90 93 80 03 	sts	0x0380, r25
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	87 eb       	ldi	r24, 0xB7	; 183
     88e:	92 e0       	ldi	r25, 0x02	; 2
     890:	9f 93       	push	r25
     892:	8f 93       	push	r24
     894:	e0 d5       	rcall	.+3008   	; 0x1456 <printf>
     896:	10 92 8a 03 	sts	0x038A, r1
     89a:	10 92 89 03 	sts	0x0389, r1
     89e:	10 92 92 03 	sts	0x0392, r1
     8a2:	10 92 91 03 	sts	0x0391, r1
     8a6:	10 92 88 03 	sts	0x0388, r1
     8aa:	10 92 87 03 	sts	0x0387, r1
     8ae:	10 92 90 03 	sts	0x0390, r1
     8b2:	10 92 8f 03 	sts	0x038F, r1
     8b6:	0f 90       	pop	r0
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	1f 91       	pop	r17
     8c0:	0f 91       	pop	r16
     8c2:	ff 90       	pop	r15
     8c4:	ef 90       	pop	r14
     8c6:	df 90       	pop	r13
     8c8:	cf 90       	pop	r12
     8ca:	08 95       	ret

000008cc <set_speed>:
}

void set_speed(uint8_t input_speed){
	if (input_speed > 2)
     8cc:	83 30       	cpi	r24, 0x03	; 3
     8ce:	18 f0       	brcs	.+6      	; 0x8d6 <set_speed+0xa>
	{
		motor_set_motor_speed(MOTOR_DEADBAND + input_speed);
     8d0:	82 5d       	subi	r24, 0xD2	; 210
     8d2:	f0 ce       	rjmp	.-544    	; 0x6b4 <motor_set_motor_speed>
     8d4:	08 95       	ret
	}else{
		motor_set_motor_speed(0);
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	ed ce       	rjmp	.-550    	; 0x6b4 <motor_set_motor_speed>
     8da:	08 95       	ret

000008dc <pi_controller_update>:
	
	

}

void pi_controller_update(int16_t pos_ref){
     8dc:	cf 92       	push	r12
     8de:	df 92       	push	r13
     8e0:	ef 92       	push	r14
     8e2:	ff 92       	push	r15
     8e4:	0f 93       	push	r16
     8e6:	1f 93       	push	r17
     8e8:	8c 01       	movw	r16, r24
	//pos_ref = 5000;
	if(timer_check_flag()){
     8ea:	69 d2       	rcall	.+1234   	; 0xdbe <timer_check_flag>
     8ec:	88 23       	and	r24, r24
     8ee:	09 f4       	brne	.+2      	; 0x8f2 <pi_controller_update+0x16>
     8f0:	05 c1       	rjmp	.+522    	; 0xafc <pi_controller_update+0x220>
		
		//Measured position
		pos_meas = encoder_read();
     8f2:	11 df       	rcall	.-478    	; 0x716 <encoder_read>
     8f4:	90 93 96 03 	sts	0x0396, r25
     8f8:	80 93 95 03 	sts	0x0395, r24
		
		pos_err = pos_ref - pos_meas;
     8fc:	98 01       	movw	r18, r16
     8fe:	28 1b       	sub	r18, r24
     900:	39 0b       	sbc	r19, r25
     902:	c9 01       	movw	r24, r18
     904:	30 93 a3 03 	sts	0x03A3, r19
     908:	20 93 a2 03 	sts	0x03A2, r18
		pos_errSum  += pos_err;
     90c:	e0 91 a0 03 	lds	r30, 0x03A0
     910:	f0 91 a1 03 	lds	r31, 0x03A1
     914:	e2 0f       	add	r30, r18
     916:	f3 1f       	adc	r31, r19
		
		if(pos_err > MAX_ERROR){
     918:	a9 01       	movw	r20, r18
     91a:	66 27       	eor	r22, r22
     91c:	57 fd       	sbrc	r21, 7
     91e:	60 95       	com	r22
     920:	76 2f       	mov	r23, r22
     922:	00 91 0a 02 	lds	r16, 0x020A
     926:	10 91 0b 02 	lds	r17, 0x020B
     92a:	20 91 0c 02 	lds	r18, 0x020C
     92e:	30 91 0d 02 	lds	r19, 0x020D
     932:	04 17       	cp	r16, r20
     934:	15 07       	cpc	r17, r21
     936:	26 07       	cpc	r18, r22
     938:	37 07       	cpc	r19, r23
     93a:	3c f4       	brge	.+14     	; 0x94a <pi_controller_update+0x6e>
			p_term = MAX_INT;
     93c:	2f ef       	ldi	r18, 0xFF	; 255
     93e:	3f e7       	ldi	r19, 0x7F	; 127
     940:	30 93 98 03 	sts	0x0398, r19
     944:	20 93 97 03 	sts	0x0397, r18
     948:	23 c0       	rjmp	.+70     	; 0x990 <pi_controller_update+0xb4>
		}else if(pos_err < -MAX_ERROR){
     94a:	30 95       	com	r19
     94c:	20 95       	com	r18
     94e:	10 95       	com	r17
     950:	01 95       	neg	r16
     952:	1f 4f       	sbci	r17, 0xFF	; 255
     954:	2f 4f       	sbci	r18, 0xFF	; 255
     956:	3f 4f       	sbci	r19, 0xFF	; 255
     958:	40 17       	cp	r20, r16
     95a:	51 07       	cpc	r21, r17
     95c:	62 07       	cpc	r22, r18
     95e:	73 07       	cpc	r23, r19
     960:	3c f4       	brge	.+14     	; 0x970 <pi_controller_update+0x94>
			p_term = -MAX_INT;
     962:	21 e0       	ldi	r18, 0x01	; 1
     964:	30 e8       	ldi	r19, 0x80	; 128
     966:	30 93 98 03 	sts	0x0398, r19
     96a:	20 93 97 03 	sts	0x0397, r18
     96e:	10 c0       	rjmp	.+32     	; 0x990 <pi_controller_update+0xb4>
		}else{
			p_term = pos_err * KP;
     970:	9c 01       	movw	r18, r24
     972:	22 0f       	add	r18, r18
     974:	33 1f       	adc	r19, r19
     976:	22 0f       	add	r18, r18
     978:	33 1f       	adc	r19, r19
     97a:	22 0f       	add	r18, r18
     97c:	33 1f       	adc	r19, r19
     97e:	ac 01       	movw	r20, r24
     980:	44 0f       	add	r20, r20
     982:	55 1f       	adc	r21, r21
     984:	24 0f       	add	r18, r20
     986:	35 1f       	adc	r19, r21
     988:	30 93 98 03 	sts	0x0398, r19
     98c:	20 93 97 03 	sts	0x0397, r18
		}
		
		// Calculate i-term and limit integral runaway
		temp = pos_err + pos_errSum;
     990:	8e 0f       	add	r24, r30
     992:	9f 1f       	adc	r25, r31
     994:	ac 01       	movw	r20, r24
     996:	66 27       	eor	r22, r22
     998:	57 fd       	sbrc	r21, 7
     99a:	60 95       	com	r22
     99c:	76 2f       	mov	r23, r22
     99e:	40 93 83 03 	sts	0x0383, r20
     9a2:	50 93 84 03 	sts	0x0384, r21
     9a6:	60 93 85 03 	sts	0x0385, r22
     9aa:	70 93 86 03 	sts	0x0386, r23
		if(temp > MAX_ERROR_SUM){
     9ae:	00 91 06 02 	lds	r16, 0x0206
     9b2:	10 91 07 02 	lds	r17, 0x0207
     9b6:	20 91 08 02 	lds	r18, 0x0208
     9ba:	30 91 09 02 	lds	r19, 0x0209
     9be:	04 17       	cp	r16, r20
     9c0:	15 07       	cpc	r17, r21
     9c2:	26 07       	cpc	r18, r22
     9c4:	37 07       	cpc	r19, r23
     9c6:	8c f4       	brge	.+34     	; 0x9ea <pi_controller_update+0x10e>
			i_term = MAX_I_TERM;
     9c8:	8f ef       	ldi	r24, 0xFF	; 255
     9ca:	9f ef       	ldi	r25, 0xFF	; 255
     9cc:	af ef       	ldi	r26, 0xFF	; 255
     9ce:	bf e3       	ldi	r27, 0x3F	; 63
     9d0:	80 93 99 03 	sts	0x0399, r24
     9d4:	90 93 9a 03 	sts	0x039A, r25
     9d8:	a0 93 9b 03 	sts	0x039B, r26
     9dc:	b0 93 9c 03 	sts	0x039C, r27
			pos_errSum = MAX_ERROR_SUM;
     9e0:	10 93 a1 03 	sts	0x03A1, r17
     9e4:	00 93 a0 03 	sts	0x03A0, r16
     9e8:	32 c0       	rjmp	.+100    	; 0xa4e <pi_controller_update+0x172>
		}else if(temp < -MAX_ERROR_SUM){
     9ea:	cc 24       	eor	r12, r12
     9ec:	dd 24       	eor	r13, r13
     9ee:	76 01       	movw	r14, r12
     9f0:	c0 1a       	sub	r12, r16
     9f2:	d1 0a       	sbc	r13, r17
     9f4:	e2 0a       	sbc	r14, r18
     9f6:	f3 0a       	sbc	r15, r19
     9f8:	4c 15       	cp	r20, r12
     9fa:	5d 05       	cpc	r21, r13
     9fc:	6e 05       	cpc	r22, r14
     9fe:	7f 05       	cpc	r23, r15
     a00:	a4 f4       	brge	.+40     	; 0xa2a <pi_controller_update+0x14e>
			i_term = -MAX_I_TERM;
     a02:	81 e0       	ldi	r24, 0x01	; 1
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	a0 e0       	ldi	r26, 0x00	; 0
     a08:	b0 ec       	ldi	r27, 0xC0	; 192
     a0a:	80 93 99 03 	sts	0x0399, r24
     a0e:	90 93 9a 03 	sts	0x039A, r25
     a12:	a0 93 9b 03 	sts	0x039B, r26
     a16:	b0 93 9c 03 	sts	0x039C, r27
			pos_errSum = -MAX_ERROR_SUM;
     a1a:	11 95       	neg	r17
     a1c:	01 95       	neg	r16
     a1e:	11 09       	sbc	r17, r1
     a20:	10 93 a1 03 	sts	0x03A1, r17
     a24:	00 93 a0 03 	sts	0x03A0, r16
     a28:	12 c0       	rjmp	.+36     	; 0xa4e <pi_controller_update+0x172>
		}else{
			pos_errSum = temp;
     a2a:	90 93 a1 03 	sts	0x03A1, r25
     a2e:	80 93 a0 03 	sts	0x03A0, r24
			i_term = KI *pos_errSum;
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	aa 27       	eor	r26, r26
     a38:	97 fd       	sbrc	r25, 7
     a3a:	a0 95       	com	r26
     a3c:	ba 2f       	mov	r27, r26
     a3e:	80 93 99 03 	sts	0x0399, r24
     a42:	90 93 9a 03 	sts	0x039A, r25
     a46:	a0 93 9b 03 	sts	0x039B, r26
     a4a:	b0 93 9c 03 	sts	0x039C, r27
		}
		
		
		u = (p_term + i_term) / SCALING_FACTOR;
		u = (p_term ) / SCALING_FACTOR;
     a4e:	20 91 97 03 	lds	r18, 0x0397
     a52:	30 91 98 03 	lds	r19, 0x0398
     a56:	33 23       	and	r19, r19
     a58:	14 f4       	brge	.+4      	; 0xa5e <pi_controller_update+0x182>
     a5a:	21 58       	subi	r18, 0x81	; 129
     a5c:	3f 4f       	sbci	r19, 0xFF	; 255
     a5e:	22 0f       	add	r18, r18
     a60:	23 2f       	mov	r18, r19
     a62:	22 1f       	adc	r18, r18
     a64:	33 0b       	sbc	r19, r19
     a66:	30 93 aa 03 	sts	0x03AA, r19
     a6a:	20 93 a9 03 	sts	0x03A9, r18
		if(u > MAX_INT){
			u = MAX_INT;
		}else if(ret < - MAX_INT){
     a6e:	80 91 a4 03 	lds	r24, 0x03A4
     a72:	90 91 a5 03 	lds	r25, 0x03A5
     a76:	a0 91 a6 03 	lds	r26, 0x03A6
     a7a:	b0 91 a7 03 	lds	r27, 0x03A7
     a7e:	81 30       	cpi	r24, 0x01	; 1
     a80:	90 48       	sbci	r25, 0x80	; 128
     a82:	af 4f       	sbci	r26, 0xFF	; 255
     a84:	bf 4f       	sbci	r27, 0xFF	; 255
     a86:	3c f4       	brge	.+14     	; 0xa96 <pi_controller_update+0x1ba>
			u = -MAX_INT;
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	90 e8       	ldi	r25, 0x80	; 128
     a8c:	90 93 aa 03 	sts	0x03AA, r25
     a90:	80 93 a9 03 	sts	0x03A9, r24
     a94:	08 c0       	rjmp	.+16     	; 0xaa6 <pi_controller_update+0x1ca>
		//printf("g: %i\tu: %i\tpos_err:\t%i\terrSum:\t%i\n", motor_get_velocity(), u, pos_err, pos_errSum);
		
		int8_t offset = 40;
		int8_t maxSpeed = 50;
		int8_t errorWindow = 50;
		if (u > 0)
     a96:	12 16       	cp	r1, r18
     a98:	13 06       	cpc	r1, r19
     a9a:	1c f4       	brge	.+6      	; 0xaa2 <pi_controller_update+0x1c6>
		{
			motor_set_direction(MOTOR_POLARITY);
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	1e de       	rcall	.-964    	; 0x6dc <motor_set_direction>
     aa0:	0f c0       	rjmp	.+30     	; 0xac0 <pi_controller_update+0x1e4>
		}else if(u < 0){
     aa2:	33 23       	and	r19, r19
     aa4:	6c f4       	brge	.+26     	; 0xac0 <pi_controller_update+0x1e4>
			motor_set_direction(-MOTOR_POLARITY);
     aa6:	8f ef       	ldi	r24, 0xFF	; 255
     aa8:	19 de       	rcall	.-974    	; 0x6dc <motor_set_direction>
			u*=-1;
     aaa:	80 91 a9 03 	lds	r24, 0x03A9
     aae:	90 91 aa 03 	lds	r25, 0x03AA
     ab2:	91 95       	neg	r25
     ab4:	81 95       	neg	r24
     ab6:	91 09       	sbc	r25, r1
     ab8:	90 93 aa 03 	sts	0x03AA, r25
     abc:	80 93 a9 03 	sts	0x03A9, r24
		//int16_t friction = estimate_friction(u, motor_get_velocity());
		//printf("Friction: %i\n", friction);
		//u += friction;
		
		
		if(u > maxSpeed){
     ac0:	80 91 a9 03 	lds	r24, 0x03A9
     ac4:	90 91 aa 03 	lds	r25, 0x03AA
     ac8:	c3 97       	sbiw	r24, 0x33	; 51
     aca:	34 f0       	brlt	.+12     	; 0xad8 <pi_controller_update+0x1fc>
			u = maxSpeed;
     acc:	82 e3       	ldi	r24, 0x32	; 50
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	90 93 aa 03 	sts	0x03AA, r25
     ad4:	80 93 a9 03 	sts	0x03A9, r24
	
		//------------------------------
		
		
		
		if(pos_err > -errorWindow && pos_err < errorWindow){
     ad8:	80 91 a2 03 	lds	r24, 0x03A2
     adc:	90 91 a3 03 	lds	r25, 0x03A3
     ae0:	c1 96       	adiw	r24, 0x31	; 49
     ae2:	83 36       	cpi	r24, 0x63	; 99
     ae4:	91 05       	cpc	r25, r1
     ae6:	38 f4       	brcc	.+14     	; 0xaf6 <pi_controller_update+0x21a>
	acc_fric = z - vel/kInv/mInv;
	int16_t friction =  acc_fric;
	return friction;	
}
void pi_controller_reset(void){
	pos_errSum = 0;
     ae8:	10 92 a1 03 	sts	0x03A1, r1
     aec:	10 92 a0 03 	sts	0x03A0, r1
		
		
		
		if(pos_err > -errorWindow && pos_err < errorWindow){
			pi_controller_reset();
			motor_set_motor_speed(0);
     af0:	80 e0       	ldi	r24, 0x00	; 0
     af2:	e0 dd       	rcall	.-1088   	; 0x6b4 <motor_set_motor_speed>
     af4:	03 c0       	rjmp	.+6      	; 0xafc <pi_controller_update+0x220>
		}else{
			set_speed(u);
     af6:	80 91 a9 03 	lds	r24, 0x03A9
     afa:	e8 de       	rcall	.-560    	; 0x8cc <set_speed>
		motor_set_motor_speed(0);
	}*/
	
	//motor_set_motor_speed((int16_t)u);
	
}
     afc:	1f 91       	pop	r17
     afe:	0f 91       	pop	r16
     b00:	ff 90       	pop	r15
     b02:	ef 90       	pop	r14
     b04:	df 90       	pop	r13
     b06:	cf 90       	pop	r12
     b08:	08 95       	ret

00000b0a <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(PWM_PERIOD);
     b0a:	60 e0       	ldi	r22, 0x00	; 0
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	80 ea       	ldi	r24, 0xA0	; 160
     b10:	91 e4       	ldi	r25, 0x41	; 65
     b12:	96 d0       	rcall	.+300    	; 0xc40 <pwm_init>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
			pwm_set_pulse_width(pulse_width);
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	80 ec       	ldi	r24, 0xC0	; 192
     b1a:	9f e3       	ldi	r25, 0x3F	; 63
     b1c:	7b c0       	rjmp	.+246    	; 0xc14 <pwm_set_pulse_width>
     b1e:	08 95       	ret

00000b20 <servo_set>:
void servo_init(void){
	pwm_init(PWM_PERIOD);
	servo_set(0);
}

int servo_set(int8_t value){
     b20:	cf 92       	push	r12
     b22:	df 92       	push	r13
     b24:	ef 92       	push	r14
     b26:	ff 92       	push	r15
     b28:	68 2f       	mov	r22, r24
	// Check if control-input is within allowed range.
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
     b2a:	84 e6       	ldi	r24, 0x64	; 100
     b2c:	86 0f       	add	r24, r22
     b2e:	89 3c       	cpi	r24, 0xC9	; 201
     b30:	a0 f5       	brcc	.+104    	; 0xb9a <servo_set+0x7a>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
     b32:	77 27       	eor	r23, r23
     b34:	67 fd       	sbrc	r22, 7
     b36:	70 95       	com	r23
     b38:	87 2f       	mov	r24, r23
     b3a:	97 2f       	mov	r25, r23
     b3c:	19 d3       	rcall	.+1586   	; 0x1170 <__floatsisf>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	60 e0       	ldi	r22, 0x00	; 0
     b44:	70 e0       	ldi	r23, 0x00	; 0
     b46:	88 ec       	ldi	r24, 0xC8	; 200
     b48:	92 e4       	ldi	r25, 0x42	; 66
     b4a:	0e d2       	rcall	.+1052   	; 0xf68 <__subsf3>
     b4c:	20 e0       	ldi	r18, 0x00	; 0
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	48 e4       	ldi	r20, 0x48	; 72
     b52:	53 e4       	ldi	r21, 0x43	; 67
     b54:	72 d2       	rcall	.+1252   	; 0x103a <__divsf3>
     b56:	29 e9       	ldi	r18, 0x99	; 153
     b58:	39 e9       	ldi	r19, 0x99	; 153
     b5a:	49 e9       	ldi	r20, 0x99	; 153
     b5c:	5f e3       	ldi	r21, 0x3F	; 63
     b5e:	bc d3       	rcall	.+1912   	; 0x12d8 <__mulsf3>
     b60:	26 e6       	ldi	r18, 0x66	; 102
     b62:	36 e6       	ldi	r19, 0x66	; 102
     b64:	46 e6       	ldi	r20, 0x66	; 102
     b66:	5f e3       	ldi	r21, 0x3F	; 63
     b68:	00 d2       	rcall	.+1024   	; 0xf6a <__addsf3>
     b6a:	6b 01       	movw	r12, r22
     b6c:	7c 01       	movw	r14, r24
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
     b6e:	26 e6       	ldi	r18, 0x66	; 102
     b70:	36 e6       	ldi	r19, 0x66	; 102
     b72:	46 e6       	ldi	r20, 0x66	; 102
     b74:	5f e3       	ldi	r21, 0x3F	; 63
     b76:	ac d3       	rcall	.+1880   	; 0x12d0 <__gesf2>
     b78:	88 23       	and	r24, r24
     b7a:	94 f0       	brlt	.+36     	; 0xba0 <servo_set+0x80>
     b7c:	26 e6       	ldi	r18, 0x66	; 102
     b7e:	36 e6       	ldi	r19, 0x66	; 102
     b80:	46 e0       	ldi	r20, 0x06	; 6
     b82:	50 e4       	ldi	r21, 0x40	; 64
     b84:	c7 01       	movw	r24, r14
     b86:	b6 01       	movw	r22, r12
     b88:	54 d2       	rcall	.+1192   	; 0x1032 <__cmpsf2>
     b8a:	18 16       	cp	r1, r24
     b8c:	64 f0       	brlt	.+24     	; 0xba6 <servo_set+0x86>
			pwm_set_pulse_width(pulse_width);
     b8e:	c7 01       	movw	r24, r14
     b90:	b6 01       	movw	r22, r12
     b92:	40 d0       	rcall	.+128    	; 0xc14 <pwm_set_pulse_width>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	08 c0       	rjmp	.+16     	; 0xbaa <servo_set+0x8a>
		}else{
			return 0;
		}
	}else{
		return -1;
     b9a:	8f ef       	ldi	r24, 0xFF	; 255
     b9c:	9f ef       	ldi	r25, 0xFF	; 255
     b9e:	05 c0       	rjmp	.+10     	; 0xbaa <servo_set+0x8a>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
		}else{
			return 0;
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <servo_set+0x8a>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		return -1;
	}
     baa:	ff 90       	pop	r15
     bac:	ef 90       	pop	r14
     bae:	df 90       	pop	r13
     bb0:	cf 90       	pop	r12
     bb2:	08 95       	ret

00000bb4 <init_all>:
	}

	return 0;
}

void init_all(void){
     bb4:	0f 93       	push	r16
     bb6:	1f 93       	push	r17
	
	cli();
     bb8:	f8 94       	cli
	init_UART();
     bba:	16 dc       	rcall	.-2004   	; 0x3e8 <init_UART>
	CAN_initialize();
     bbc:	35 db       	rcall	.-2454   	; 0x228 <CAN_initialize>
	printf("CAN initialized\n");
     bbe:	84 ec       	ldi	r24, 0xC4	; 196
     bc0:	92 e0       	ldi	r25, 0x02	; 2
     bc2:	5a d4       	rcall	.+2228   	; 0x1478 <puts>
	TWI_Master_Initialise();
     bc4:	22 d1       	rcall	.+580    	; 0xe0a <TWI_Master_Initialise>
	printf("TWI initialized\n");
     bc6:	84 ed       	ldi	r24, 0xD4	; 212
     bc8:	92 e0       	ldi	r25, 0x02	; 2
     bca:	56 d4       	rcall	.+2220   	; 0x1478 <puts>
	//Motor is being initialized by PI-Controller.
	//motor_init();
	//motor_calibrate(100);
	//printf("Motor initialized\n");
	servo_init();
     bcc:	9e df       	rcall	.-196    	; 0xb0a <servo_init>
	printf("Servo initialized\n");
     bce:	84 ee       	ldi	r24, 0xE4	; 228
     bd0:	92 e0       	ldi	r25, 0x02	; 2
     bd2:	52 d4       	rcall	.+2212   	; 0x1478 <puts>
	IR_init();
     bd4:	3f dd       	rcall	.-1410   	; 0x654 <IR_init>
	printf("IR initialized\n");
     bd6:	86 ef       	ldi	r24, 0xF6	; 246
     bd8:	92 e0       	ldi	r25, 0x02	; 2
     bda:	4e d4       	rcall	.+2204   	; 0x1478 <puts>
	//printf("solenoid\n");
	solenoid_init();
     bdc:	4d d0       	rcall	.+154    	; 0xc78 <solenoid_init>
	initialize_timer(TIMER_FREQ);
     bde:	82 e3       	ldi	r24, 0x32	; 50
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	7f d0       	rcall	.+254    	; 0xce2 <initialize_timer>
	//printf("Solenoid initialized\n");
	pi_controller_init(0.00004,1,TIMER_FREQ);
     be4:	02 e3       	ldi	r16, 0x32	; 50
     be6:	10 e0       	ldi	r17, 0x00	; 0
     be8:	20 e0       	ldi	r18, 0x00	; 0
     bea:	30 e0       	ldi	r19, 0x00	; 0
     bec:	40 e8       	ldi	r20, 0x80	; 128
     bee:	5f e3       	ldi	r21, 0x3F	; 63
     bf0:	6c ea       	ldi	r22, 0xAC	; 172
     bf2:	75 ec       	ldi	r23, 0xC5	; 197
     bf4:	87 e2       	ldi	r24, 0x27	; 39
     bf6:	98 e3       	ldi	r25, 0x38	; 56
     bf8:	1c de       	rcall	.-968    	; 0x832 <pi_controller_init>
	//pi_controller_init(1,1,TIMER_FREQ);
	printf("PI_Controller initialized.\n");
     bfa:	85 e0       	ldi	r24, 0x05	; 5
     bfc:	93 e0       	ldi	r25, 0x03	; 3
     bfe:	3c d4       	rcall	.+2168   	; 0x1478 <puts>
	#if UART_ENABLE
		init_UART();
		printf("Program initialized\n");
	#endif
	sei();
     c00:	78 94       	sei
}
     c02:	1f 91       	pop	r17
     c04:	0f 91       	pop	r16
     c06:	08 95       	ret

00000c08 <main>:

int main(void){
	

	
	init_all();
     c08:	d5 df       	rcall	.-86     	; 0xbb4 <init_all>
	
	while(1){
		game_init(1);
     c0a:	81 e0       	ldi	r24, 0x01	; 1
     c0c:	90 e0       	ldi	r25, 0x00	; 0
     c0e:	fd db       	rcall	.-2054   	; 0x40a <game_init>
		game_play();
     c10:	78 dc       	rcall	.-1808   	; 0x502 <game_play>
     c12:	fb cf       	rjmp	.-10     	; 0xc0a <main+0x2>

00000c14 <pwm_set_pulse_width>:
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	PWM_OCRnA = (int)(SCALAR_IN_MS * val);
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	4a e7       	ldi	r20, 0x7A	; 122
     c1a:	51 e4       	ldi	r21, 0x41	; 65
     c1c:	5d d3       	rcall	.+1722   	; 0x12d8 <__mulsf3>
     c1e:	75 d2       	rcall	.+1258   	; 0x110a <__fixsfsi>
     c20:	70 93 99 00 	sts	0x0099, r23
     c24:	60 93 98 00 	sts	0x0098, r22
     c28:	08 95       	ret

00000c2a <pwm_set_period>:
}

void pwm_set_period(double period){
	PWM_ICRn = (int)(SCALAR_IN_MS * period);
     c2a:	20 e0       	ldi	r18, 0x00	; 0
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	4a e7       	ldi	r20, 0x7A	; 122
     c30:	51 e4       	ldi	r21, 0x41	; 65
     c32:	52 d3       	rcall	.+1700   	; 0x12d8 <__mulsf3>
     c34:	6a d2       	rcall	.+1236   	; 0x110a <__fixsfsi>
     c36:	70 93 97 00 	sts	0x0097, r23
     c3a:	60 93 96 00 	sts	0x0096, r22
     c3e:	08 95       	ret

00000c40 <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	PWM_DDR |= (1 << PWM_PIN);
     c40:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	PWM_TCCRnA &= ~(1<<WGM30);
     c42:	e0 e9       	ldi	r30, 0x90	; 144
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	20 81       	ld	r18, Z
     c48:	2e 7f       	andi	r18, 0xFE	; 254
     c4a:	20 83       	st	Z, r18
	PWM_TCCRnA |= (1<<WGM31);
     c4c:	20 81       	ld	r18, Z
     c4e:	22 60       	ori	r18, 0x02	; 2
     c50:	20 83       	st	Z, r18
	PWM_TCCRnB |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
     c52:	a1 e9       	ldi	r26, 0x91	; 145
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	2c 91       	ld	r18, X
     c58:	28 61       	ori	r18, 0x18	; 24
     c5a:	2c 93       	st	X, r18
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	PWM_TCCRnA |= (1<<COM3A1);
     c5c:	20 81       	ld	r18, Z
     c5e:	20 68       	ori	r18, 0x80	; 128
     c60:	20 83       	st	Z, r18
	PWM_TCCRnA &= ~(1<<COM3A0);
     c62:	20 81       	ld	r18, Z
     c64:	2f 7b       	andi	r18, 0xBF	; 191
     c66:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	PWM_TCCRnB |= (1<<CS32) | (1<<CS30);
     c68:	2c 91       	ld	r18, X
     c6a:	25 60       	ori	r18, 0x05	; 5
     c6c:	2c 93       	st	X, r18
	PWM_TCCRnB &= ~(1<<CS31);
     c6e:	2c 91       	ld	r18, X
     c70:	2d 7f       	andi	r18, 0xFD	; 253
     c72:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
     c74:	da cf       	rjmp	.-76     	; 0xc2a <pwm_set_period>
     c76:	08 95       	ret

00000c78 <solenoid_init>:
#include "timer.h"

uint16_t solenoid_loaded;

void solenoid_init(void){
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     c78:	27 9a       	sbi	0x04, 7	; 4
	solenoid_loaded = 0;
     c7a:	10 92 ac 03 	sts	0x03AC, r1
     c7e:	10 92 ab 03 	sts	0x03AB, r1
     c82:	08 95       	ret

00000c84 <solenoid_disable>:
}

void solenoid_disable(void){
	SOLENOID_PORT |= (1<< SOLENOID_PIN);
     c84:	2f 9a       	sbi	0x05, 7	; 5
     c86:	08 95       	ret

00000c88 <solenoid_enable>:
}

void solenoid_enable(void){
	SOLENOID_PORT &= ~(1<< SOLENOID_PIN);
     c88:	2f 98       	cbi	0x05, 7	; 5
     c8a:	08 95       	ret

00000c8c <solenoid_reloaded>:
		solenoid_loaded = timestamp(SOLENOID_REALOAD);
	}
}

uint8_t solenoid_reloaded(void){
	if (check_timestamp(solenoid_loaded))
     c8c:	80 91 ab 03 	lds	r24, 0x03AB
     c90:	90 91 ac 03 	lds	r25, 0x03AC
     c94:	ab d0       	rcall	.+342    	; 0xdec <check_timestamp>
     c96:	88 23       	and	r24, r24
     c98:	49 f0       	breq	.+18     	; 0xcac <solenoid_reloaded+0x20>
	{
		printf("SHOOTING!!!!!!!!!!!!!!");
     c9a:	80 e2       	ldi	r24, 0x20	; 32
     c9c:	93 e0       	ldi	r25, 0x03	; 3
     c9e:	9f 93       	push	r25
     ca0:	8f 93       	push	r24
     ca2:	d9 d3       	rcall	.+1970   	; 0x1456 <printf>
		return 1;
     ca4:	0f 90       	pop	r0
     ca6:	0f 90       	pop	r0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	08 95       	ret
	}
	
	printf("RELOAD\n");
     cac:	87 e3       	ldi	r24, 0x37	; 55
     cae:	93 e0       	ldi	r25, 0x03	; 3
     cb0:	e3 d3       	rcall	.+1990   	; 0x1478 <puts>
	return 0;
     cb2:	80 e0       	ldi	r24, 0x00	; 0
}
     cb4:	08 95       	ret

00000cb6 <solenoid_fire>:
void solenoid_enable(void){
	SOLENOID_PORT &= ~(1<< SOLENOID_PIN);
}

void solenoid_fire(void){
	if (solenoid_reloaded())
     cb6:	ea df       	rcall	.-44     	; 0xc8c <solenoid_reloaded>
     cb8:	88 23       	and	r24, r24
     cba:	91 f0       	breq	.+36     	; 0xce0 <solenoid_fire+0x2a>
	{
		solenoid_enable();
     cbc:	e5 df       	rcall	.-54     	; 0xc88 <solenoid_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     cbe:	2f ef       	ldi	r18, 0xFF	; 255
     cc0:	89 ef       	ldi	r24, 0xF9	; 249
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	21 50       	subi	r18, 0x01	; 1
     cc6:	80 40       	sbci	r24, 0x00	; 0
     cc8:	90 40       	sbci	r25, 0x00	; 0
     cca:	e1 f7       	brne	.-8      	; 0xcc4 <solenoid_fire+0xe>
     ccc:	00 c0       	rjmp	.+0      	; 0xcce <solenoid_fire+0x18>
     cce:	00 00       	nop
		
		_delay_ms(20);
		solenoid_disable();
     cd0:	d9 df       	rcall	.-78     	; 0xc84 <solenoid_disable>
		solenoid_loaded = timestamp(SOLENOID_REALOAD);
     cd2:	84 ef       	ldi	r24, 0xF4	; 244
     cd4:	91 e0       	ldi	r25, 0x01	; 1
     cd6:	7d d0       	rcall	.+250    	; 0xdd2 <timestamp>
     cd8:	90 93 ac 03 	sts	0x03AC, r25
     cdc:	80 93 ab 03 	sts	0x03AB, r24
     ce0:	08 95       	ret

00000ce2 <initialize_timer>:
uint64_t n_period;

void initialize_timer(uint16_t timer_freq){
	
	//Enable interrupt. When timer is the same as OCR4A it sends an interrupt.
	TIMSK4 |= (1<<OCIE4A);
     ce2:	e2 e7       	ldi	r30, 0x72	; 114
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	80 81       	ld	r24, Z
     ce8:	82 60       	ori	r24, 0x02	; 2
     cea:	80 83       	st	Z, r24
	
	// Reset timer.
	TCNT4 = 0x0000;
     cec:	10 92 a5 00 	sts	0x00A5, r1
     cf0:	10 92 a4 00 	sts	0x00A4, r1
	
	// Use CTC mode.
	TCCR4B |= (1<<WGM42);
     cf4:	e1 ea       	ldi	r30, 0xA1	; 161
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	80 81       	ld	r24, Z
     cfa:	88 60       	ori	r24, 0x08	; 8
     cfc:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
     cfe:	80 81       	ld	r24, Z
     d00:	8f 7e       	andi	r24, 0xEF	; 239
     d02:	80 83       	st	Z, r24
	#elif TIMER_PRESCALER == 64
	TCCR4B |= (1<<CS41)|(1<<CS40);
	#elif TIMER_PRESCALER == 256
	TCCR4B |= (1<<CS42);
	#elif TIMER_PRESCALER == 1024
	TCCR4B |= (1<<CS42)|(1<<CS40);
     d04:	80 81       	ld	r24, Z
     d06:	85 60       	ori	r24, 0x05	; 5
     d08:	80 83       	st	Z, r24
	#endif

	// Set counter limit.
	OCR4A = (F_CPU/(TIMER_PRESCALER))/TIMER_FREQ - 1;
     d0a:	87 e3       	ldi	r24, 0x37	; 55
     d0c:	91 e0       	ldi	r25, 0x01	; 1
     d0e:	90 93 a9 00 	sts	0x00A9, r25
     d12:	80 93 a8 00 	sts	0x00A8, r24
	update_flag = 0;
     d16:	10 92 ad 03 	sts	0x03AD, r1
	n_period = 0;
     d1a:	10 92 ae 03 	sts	0x03AE, r1
     d1e:	10 92 af 03 	sts	0x03AF, r1
     d22:	10 92 b0 03 	sts	0x03B0, r1
     d26:	10 92 b1 03 	sts	0x03B1, r1
     d2a:	10 92 b2 03 	sts	0x03B2, r1
     d2e:	10 92 b3 03 	sts	0x03B3, r1
     d32:	10 92 b4 03 	sts	0x03B4, r1
     d36:	10 92 b5 03 	sts	0x03B5, r1
     d3a:	08 95       	ret

00000d3c <__vector_42>:
}

ISR(TIMER4_COMPA_vect){//interrupt when Timer_0 is done, resets itself
     d3c:	1f 92       	push	r1
     d3e:	0f 92       	push	r0
     d40:	0f b6       	in	r0, 0x3f	; 63
     d42:	0f 92       	push	r0
     d44:	11 24       	eor	r1, r1
     d46:	2f 93       	push	r18
     d48:	3f 93       	push	r19
     d4a:	4f 93       	push	r20
     d4c:	5f 93       	push	r21
     d4e:	6f 93       	push	r22
     d50:	7f 93       	push	r23
     d52:	8f 93       	push	r24
     d54:	9f 93       	push	r25
     d56:	af 93       	push	r26
	update_flag = 1;
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	80 93 ad 03 	sts	0x03AD, r24
	n_period++;
     d5e:	20 91 ae 03 	lds	r18, 0x03AE
     d62:	30 91 af 03 	lds	r19, 0x03AF
     d66:	40 91 b0 03 	lds	r20, 0x03B0
     d6a:	50 91 b1 03 	lds	r21, 0x03B1
     d6e:	60 91 b2 03 	lds	r22, 0x03B2
     d72:	70 91 b3 03 	lds	r23, 0x03B3
     d76:	80 91 b4 03 	lds	r24, 0x03B4
     d7a:	90 91 b5 03 	lds	r25, 0x03B5
     d7e:	a1 e0       	ldi	r26, 0x01	; 1
     d80:	14 d3       	rcall	.+1576   	; 0x13aa <__adddi3_s8>
     d82:	20 93 ae 03 	sts	0x03AE, r18
     d86:	30 93 af 03 	sts	0x03AF, r19
     d8a:	40 93 b0 03 	sts	0x03B0, r20
     d8e:	50 93 b1 03 	sts	0x03B1, r21
     d92:	60 93 b2 03 	sts	0x03B2, r22
     d96:	70 93 b3 03 	sts	0x03B3, r23
     d9a:	80 93 b4 03 	sts	0x03B4, r24
     d9e:	90 93 b5 03 	sts	0x03B5, r25
	//printf("INT");
	//TIFR4 &= ~(1<<OCF1A);
}
     da2:	af 91       	pop	r26
     da4:	9f 91       	pop	r25
     da6:	8f 91       	pop	r24
     da8:	7f 91       	pop	r23
     daa:	6f 91       	pop	r22
     dac:	5f 91       	pop	r21
     dae:	4f 91       	pop	r20
     db0:	3f 91       	pop	r19
     db2:	2f 91       	pop	r18
     db4:	0f 90       	pop	r0
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	0f 90       	pop	r0
     dba:	1f 90       	pop	r1
     dbc:	18 95       	reti

00000dbe <timer_check_flag>:

uint8_t timer_check_flag(void){
	if (update_flag)
     dbe:	80 91 ad 03 	lds	r24, 0x03AD
     dc2:	88 23       	and	r24, r24
     dc4:	21 f0       	breq	.+8      	; 0xdce <timer_check_flag+0x10>
	{
		update_flag = 0;
     dc6:	10 92 ad 03 	sts	0x03AD, r1
		return 1;
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	08 95       	ret
	}
	return 0;
     dce:	80 e0       	ldi	r24, 0x00	; 0
}
     dd0:	08 95       	ret

00000dd2 <timestamp>:

uint16_t timestamp(uint16_t wait_ms){
	return (n_period * (1000 / TIMER_FREQ) + wait_ms);
     dd2:	40 91 ae 03 	lds	r20, 0x03AE
     dd6:	50 91 af 03 	lds	r21, 0x03AF
     dda:	64 e1       	ldi	r22, 0x14	; 20
     ddc:	64 9f       	mul	r22, r20
     dde:	90 01       	movw	r18, r0
     de0:	65 9f       	mul	r22, r21
     de2:	30 0d       	add	r19, r0
     de4:	11 24       	eor	r1, r1
}
     de6:	82 0f       	add	r24, r18
     de8:	93 1f       	adc	r25, r19
     dea:	08 95       	ret

00000dec <check_timestamp>:

uint8_t check_timestamp(uint16_t stamp){
     dec:	cf 93       	push	r28
     dee:	df 93       	push	r29
     df0:	ec 01       	movw	r28, r24
	if (timestamp(0) >= stamp)
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	ed df       	rcall	.-38     	; 0xdd2 <timestamp>
     df8:	21 e0       	ldi	r18, 0x01	; 1
     dfa:	8c 17       	cp	r24, r28
     dfc:	9d 07       	cpc	r25, r29
     dfe:	08 f4       	brcc	.+2      	; 0xe02 <check_timestamp+0x16>
     e00:	20 e0       	ldi	r18, 0x00	; 0
	{
		return 1;
	}
	return 0;
}
     e02:	82 2f       	mov	r24, r18
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	08 95       	ret

00000e0a <TWI_Master_Initialise>:
     e0a:	8c e0       	ldi	r24, 0x0C	; 12
     e0c:	80 93 b8 00 	sts	0x00B8, r24
     e10:	8f ef       	ldi	r24, 0xFF	; 255
     e12:	80 93 bb 00 	sts	0x00BB, r24
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	80 93 bc 00 	sts	0x00BC, r24
     e1c:	08 95       	ret

00000e1e <TWI_Start_Transceiver_With_Data>:
     e1e:	ec eb       	ldi	r30, 0xBC	; 188
     e20:	f0 e0       	ldi	r31, 0x00	; 0
     e22:	20 81       	ld	r18, Z
     e24:	20 fd       	sbrc	r18, 0
     e26:	fd cf       	rjmp	.-6      	; 0xe22 <TWI_Start_Transceiver_With_Data+0x4>
     e28:	60 93 59 03 	sts	0x0359, r22
     e2c:	fc 01       	movw	r30, r24
     e2e:	20 81       	ld	r18, Z
     e30:	20 93 5a 03 	sts	0x035A, r18
     e34:	20 fd       	sbrc	r18, 0
     e36:	0c c0       	rjmp	.+24     	; 0xe50 <TWI_Start_Transceiver_With_Data+0x32>
     e38:	62 30       	cpi	r22, 0x02	; 2
     e3a:	50 f0       	brcs	.+20     	; 0xe50 <TWI_Start_Transceiver_With_Data+0x32>
     e3c:	dc 01       	movw	r26, r24
     e3e:	11 96       	adiw	r26, 0x01	; 1
     e40:	eb e5       	ldi	r30, 0x5B	; 91
     e42:	f3 e0       	ldi	r31, 0x03	; 3
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	9d 91       	ld	r25, X+
     e48:	91 93       	st	Z+, r25
     e4a:	8f 5f       	subi	r24, 0xFF	; 255
     e4c:	86 13       	cpse	r24, r22
     e4e:	fb cf       	rjmp	.-10     	; 0xe46 <TWI_Start_Transceiver_With_Data+0x28>
     e50:	10 92 58 03 	sts	0x0358, r1
     e54:	88 ef       	ldi	r24, 0xF8	; 248
     e56:	80 93 0e 02 	sts	0x020E, r24
     e5a:	85 ea       	ldi	r24, 0xA5	; 165
     e5c:	80 93 bc 00 	sts	0x00BC, r24
     e60:	08 95       	ret

00000e62 <__vector_39>:
     e62:	1f 92       	push	r1
     e64:	0f 92       	push	r0
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	0f 92       	push	r0
     e6a:	11 24       	eor	r1, r1
     e6c:	0b b6       	in	r0, 0x3b	; 59
     e6e:	0f 92       	push	r0
     e70:	2f 93       	push	r18
     e72:	3f 93       	push	r19
     e74:	8f 93       	push	r24
     e76:	9f 93       	push	r25
     e78:	af 93       	push	r26
     e7a:	bf 93       	push	r27
     e7c:	ef 93       	push	r30
     e7e:	ff 93       	push	r31
     e80:	80 91 b9 00 	lds	r24, 0x00B9
     e84:	90 e0       	ldi	r25, 0x00	; 0
     e86:	fc 01       	movw	r30, r24
     e88:	38 97       	sbiw	r30, 0x08	; 8
     e8a:	e1 35       	cpi	r30, 0x51	; 81
     e8c:	f1 05       	cpc	r31, r1
     e8e:	08 f0       	brcs	.+2      	; 0xe92 <__vector_39+0x30>
     e90:	55 c0       	rjmp	.+170    	; 0xf3c <__vector_39+0xda>
     e92:	ee 58       	subi	r30, 0x8E	; 142
     e94:	ff 4f       	sbci	r31, 0xFF	; 255
     e96:	83 c2       	rjmp	.+1286   	; 0x139e <__tablejump2__>
     e98:	10 92 57 03 	sts	0x0357, r1
     e9c:	e0 91 57 03 	lds	r30, 0x0357
     ea0:	80 91 59 03 	lds	r24, 0x0359
     ea4:	e8 17       	cp	r30, r24
     ea6:	70 f4       	brcc	.+28     	; 0xec4 <__vector_39+0x62>
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	8e 0f       	add	r24, r30
     eac:	80 93 57 03 	sts	0x0357, r24
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	e6 5a       	subi	r30, 0xA6	; 166
     eb4:	fc 4f       	sbci	r31, 0xFC	; 252
     eb6:	80 81       	ld	r24, Z
     eb8:	80 93 bb 00 	sts	0x00BB, r24
     ebc:	85 e8       	ldi	r24, 0x85	; 133
     ebe:	80 93 bc 00 	sts	0x00BC, r24
     ec2:	43 c0       	rjmp	.+134    	; 0xf4a <__vector_39+0xe8>
     ec4:	80 91 58 03 	lds	r24, 0x0358
     ec8:	81 60       	ori	r24, 0x01	; 1
     eca:	80 93 58 03 	sts	0x0358, r24
     ece:	84 e9       	ldi	r24, 0x94	; 148
     ed0:	80 93 bc 00 	sts	0x00BC, r24
     ed4:	3a c0       	rjmp	.+116    	; 0xf4a <__vector_39+0xe8>
     ed6:	e0 91 57 03 	lds	r30, 0x0357
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	8e 0f       	add	r24, r30
     ede:	80 93 57 03 	sts	0x0357, r24
     ee2:	80 91 bb 00 	lds	r24, 0x00BB
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	e6 5a       	subi	r30, 0xA6	; 166
     eea:	fc 4f       	sbci	r31, 0xFC	; 252
     eec:	80 83       	st	Z, r24
     eee:	20 91 57 03 	lds	r18, 0x0357
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	80 91 59 03 	lds	r24, 0x0359
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	24 f4       	brge	.+8      	; 0xf0a <__vector_39+0xa8>
     f02:	85 ec       	ldi	r24, 0xC5	; 197
     f04:	80 93 bc 00 	sts	0x00BC, r24
     f08:	20 c0       	rjmp	.+64     	; 0xf4a <__vector_39+0xe8>
     f0a:	85 e8       	ldi	r24, 0x85	; 133
     f0c:	80 93 bc 00 	sts	0x00BC, r24
     f10:	1c c0       	rjmp	.+56     	; 0xf4a <__vector_39+0xe8>
     f12:	80 91 bb 00 	lds	r24, 0x00BB
     f16:	e0 91 57 03 	lds	r30, 0x0357
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	e6 5a       	subi	r30, 0xA6	; 166
     f1e:	fc 4f       	sbci	r31, 0xFC	; 252
     f20:	80 83       	st	Z, r24
     f22:	80 91 58 03 	lds	r24, 0x0358
     f26:	81 60       	ori	r24, 0x01	; 1
     f28:	80 93 58 03 	sts	0x0358, r24
     f2c:	84 e9       	ldi	r24, 0x94	; 148
     f2e:	80 93 bc 00 	sts	0x00BC, r24
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <__vector_39+0xe8>
     f34:	85 ea       	ldi	r24, 0xA5	; 165
     f36:	80 93 bc 00 	sts	0x00BC, r24
     f3a:	07 c0       	rjmp	.+14     	; 0xf4a <__vector_39+0xe8>
     f3c:	80 91 b9 00 	lds	r24, 0x00B9
     f40:	80 93 0e 02 	sts	0x020E, r24
     f44:	84 e0       	ldi	r24, 0x04	; 4
     f46:	80 93 bc 00 	sts	0x00BC, r24
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	3f 91       	pop	r19
     f58:	2f 91       	pop	r18
     f5a:	0f 90       	pop	r0
     f5c:	0b be       	out	0x3b, r0	; 59
     f5e:	0f 90       	pop	r0
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	0f 90       	pop	r0
     f64:	1f 90       	pop	r1
     f66:	18 95       	reti

00000f68 <__subsf3>:
     f68:	50 58       	subi	r21, 0x80	; 128

00000f6a <__addsf3>:
     f6a:	bb 27       	eor	r27, r27
     f6c:	aa 27       	eor	r26, r26
     f6e:	0e d0       	rcall	.+28     	; 0xf8c <__addsf3x>
     f70:	75 c1       	rjmp	.+746    	; 0x125c <__fp_round>
     f72:	66 d1       	rcall	.+716    	; 0x1240 <__fp_pscA>
     f74:	30 f0       	brcs	.+12     	; 0xf82 <__addsf3+0x18>
     f76:	6b d1       	rcall	.+726    	; 0x124e <__fp_pscB>
     f78:	20 f0       	brcs	.+8      	; 0xf82 <__addsf3+0x18>
     f7a:	31 f4       	brne	.+12     	; 0xf88 <__addsf3+0x1e>
     f7c:	9f 3f       	cpi	r25, 0xFF	; 255
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__addsf3+0x1a>
     f80:	1e f4       	brtc	.+6      	; 0xf88 <__addsf3+0x1e>
     f82:	5b c1       	rjmp	.+694    	; 0x123a <__fp_nan>
     f84:	0e f4       	brtc	.+2      	; 0xf88 <__addsf3+0x1e>
     f86:	e0 95       	com	r30
     f88:	e7 fb       	bst	r30, 7
     f8a:	51 c1       	rjmp	.+674    	; 0x122e <__fp_inf>

00000f8c <__addsf3x>:
     f8c:	e9 2f       	mov	r30, r25
     f8e:	77 d1       	rcall	.+750    	; 0x127e <__fp_split3>
     f90:	80 f3       	brcs	.-32     	; 0xf72 <__addsf3+0x8>
     f92:	ba 17       	cp	r27, r26
     f94:	62 07       	cpc	r22, r18
     f96:	73 07       	cpc	r23, r19
     f98:	84 07       	cpc	r24, r20
     f9a:	95 07       	cpc	r25, r21
     f9c:	18 f0       	brcs	.+6      	; 0xfa4 <__addsf3x+0x18>
     f9e:	71 f4       	brne	.+28     	; 0xfbc <__addsf3x+0x30>
     fa0:	9e f5       	brtc	.+102    	; 0x1008 <__addsf3x+0x7c>
     fa2:	8f c1       	rjmp	.+798    	; 0x12c2 <__fp_zero>
     fa4:	0e f4       	brtc	.+2      	; 0xfa8 <__addsf3x+0x1c>
     fa6:	e0 95       	com	r30
     fa8:	0b 2e       	mov	r0, r27
     faa:	ba 2f       	mov	r27, r26
     fac:	a0 2d       	mov	r26, r0
     fae:	0b 01       	movw	r0, r22
     fb0:	b9 01       	movw	r22, r18
     fb2:	90 01       	movw	r18, r0
     fb4:	0c 01       	movw	r0, r24
     fb6:	ca 01       	movw	r24, r20
     fb8:	a0 01       	movw	r20, r0
     fba:	11 24       	eor	r1, r1
     fbc:	ff 27       	eor	r31, r31
     fbe:	59 1b       	sub	r21, r25
     fc0:	99 f0       	breq	.+38     	; 0xfe8 <__addsf3x+0x5c>
     fc2:	59 3f       	cpi	r21, 0xF9	; 249
     fc4:	50 f4       	brcc	.+20     	; 0xfda <__addsf3x+0x4e>
     fc6:	50 3e       	cpi	r21, 0xE0	; 224
     fc8:	68 f1       	brcs	.+90     	; 0x1024 <__addsf3x+0x98>
     fca:	1a 16       	cp	r1, r26
     fcc:	f0 40       	sbci	r31, 0x00	; 0
     fce:	a2 2f       	mov	r26, r18
     fd0:	23 2f       	mov	r18, r19
     fd2:	34 2f       	mov	r19, r20
     fd4:	44 27       	eor	r20, r20
     fd6:	58 5f       	subi	r21, 0xF8	; 248
     fd8:	f3 cf       	rjmp	.-26     	; 0xfc0 <__addsf3x+0x34>
     fda:	46 95       	lsr	r20
     fdc:	37 95       	ror	r19
     fde:	27 95       	ror	r18
     fe0:	a7 95       	ror	r26
     fe2:	f0 40       	sbci	r31, 0x00	; 0
     fe4:	53 95       	inc	r21
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__addsf3x+0x4e>
     fe8:	7e f4       	brtc	.+30     	; 0x1008 <__addsf3x+0x7c>
     fea:	1f 16       	cp	r1, r31
     fec:	ba 0b       	sbc	r27, r26
     fee:	62 0b       	sbc	r22, r18
     ff0:	73 0b       	sbc	r23, r19
     ff2:	84 0b       	sbc	r24, r20
     ff4:	ba f0       	brmi	.+46     	; 0x1024 <__addsf3x+0x98>
     ff6:	91 50       	subi	r25, 0x01	; 1
     ff8:	a1 f0       	breq	.+40     	; 0x1022 <__addsf3x+0x96>
     ffa:	ff 0f       	add	r31, r31
     ffc:	bb 1f       	adc	r27, r27
     ffe:	66 1f       	adc	r22, r22
    1000:	77 1f       	adc	r23, r23
    1002:	88 1f       	adc	r24, r24
    1004:	c2 f7       	brpl	.-16     	; 0xff6 <__addsf3x+0x6a>
    1006:	0e c0       	rjmp	.+28     	; 0x1024 <__addsf3x+0x98>
    1008:	ba 0f       	add	r27, r26
    100a:	62 1f       	adc	r22, r18
    100c:	73 1f       	adc	r23, r19
    100e:	84 1f       	adc	r24, r20
    1010:	48 f4       	brcc	.+18     	; 0x1024 <__addsf3x+0x98>
    1012:	87 95       	ror	r24
    1014:	77 95       	ror	r23
    1016:	67 95       	ror	r22
    1018:	b7 95       	ror	r27
    101a:	f7 95       	ror	r31
    101c:	9e 3f       	cpi	r25, 0xFE	; 254
    101e:	08 f0       	brcs	.+2      	; 0x1022 <__addsf3x+0x96>
    1020:	b3 cf       	rjmp	.-154    	; 0xf88 <__addsf3+0x1e>
    1022:	93 95       	inc	r25
    1024:	88 0f       	add	r24, r24
    1026:	08 f0       	brcs	.+2      	; 0x102a <__addsf3x+0x9e>
    1028:	99 27       	eor	r25, r25
    102a:	ee 0f       	add	r30, r30
    102c:	97 95       	ror	r25
    102e:	87 95       	ror	r24
    1030:	08 95       	ret

00001032 <__cmpsf2>:
    1032:	d9 d0       	rcall	.+434    	; 0x11e6 <__fp_cmp>
    1034:	08 f4       	brcc	.+2      	; 0x1038 <__cmpsf2+0x6>
    1036:	81 e0       	ldi	r24, 0x01	; 1
    1038:	08 95       	ret

0000103a <__divsf3>:
    103a:	0c d0       	rcall	.+24     	; 0x1054 <__divsf3x>
    103c:	0f c1       	rjmp	.+542    	; 0x125c <__fp_round>
    103e:	07 d1       	rcall	.+526    	; 0x124e <__fp_pscB>
    1040:	40 f0       	brcs	.+16     	; 0x1052 <__divsf3+0x18>
    1042:	fe d0       	rcall	.+508    	; 0x1240 <__fp_pscA>
    1044:	30 f0       	brcs	.+12     	; 0x1052 <__divsf3+0x18>
    1046:	21 f4       	brne	.+8      	; 0x1050 <__divsf3+0x16>
    1048:	5f 3f       	cpi	r21, 0xFF	; 255
    104a:	19 f0       	breq	.+6      	; 0x1052 <__divsf3+0x18>
    104c:	f0 c0       	rjmp	.+480    	; 0x122e <__fp_inf>
    104e:	51 11       	cpse	r21, r1
    1050:	39 c1       	rjmp	.+626    	; 0x12c4 <__fp_szero>
    1052:	f3 c0       	rjmp	.+486    	; 0x123a <__fp_nan>

00001054 <__divsf3x>:
    1054:	14 d1       	rcall	.+552    	; 0x127e <__fp_split3>
    1056:	98 f3       	brcs	.-26     	; 0x103e <__divsf3+0x4>

00001058 <__divsf3_pse>:
    1058:	99 23       	and	r25, r25
    105a:	c9 f3       	breq	.-14     	; 0x104e <__divsf3+0x14>
    105c:	55 23       	and	r21, r21
    105e:	b1 f3       	breq	.-20     	; 0x104c <__divsf3+0x12>
    1060:	95 1b       	sub	r25, r21
    1062:	55 0b       	sbc	r21, r21
    1064:	bb 27       	eor	r27, r27
    1066:	aa 27       	eor	r26, r26
    1068:	62 17       	cp	r22, r18
    106a:	73 07       	cpc	r23, r19
    106c:	84 07       	cpc	r24, r20
    106e:	38 f0       	brcs	.+14     	; 0x107e <__divsf3_pse+0x26>
    1070:	9f 5f       	subi	r25, 0xFF	; 255
    1072:	5f 4f       	sbci	r21, 0xFF	; 255
    1074:	22 0f       	add	r18, r18
    1076:	33 1f       	adc	r19, r19
    1078:	44 1f       	adc	r20, r20
    107a:	aa 1f       	adc	r26, r26
    107c:	a9 f3       	breq	.-22     	; 0x1068 <__divsf3_pse+0x10>
    107e:	33 d0       	rcall	.+102    	; 0x10e6 <__divsf3_pse+0x8e>
    1080:	0e 2e       	mov	r0, r30
    1082:	3a f0       	brmi	.+14     	; 0x1092 <__divsf3_pse+0x3a>
    1084:	e0 e8       	ldi	r30, 0x80	; 128
    1086:	30 d0       	rcall	.+96     	; 0x10e8 <__divsf3_pse+0x90>
    1088:	91 50       	subi	r25, 0x01	; 1
    108a:	50 40       	sbci	r21, 0x00	; 0
    108c:	e6 95       	lsr	r30
    108e:	00 1c       	adc	r0, r0
    1090:	ca f7       	brpl	.-14     	; 0x1084 <__divsf3_pse+0x2c>
    1092:	29 d0       	rcall	.+82     	; 0x10e6 <__divsf3_pse+0x8e>
    1094:	fe 2f       	mov	r31, r30
    1096:	27 d0       	rcall	.+78     	; 0x10e6 <__divsf3_pse+0x8e>
    1098:	66 0f       	add	r22, r22
    109a:	77 1f       	adc	r23, r23
    109c:	88 1f       	adc	r24, r24
    109e:	bb 1f       	adc	r27, r27
    10a0:	26 17       	cp	r18, r22
    10a2:	37 07       	cpc	r19, r23
    10a4:	48 07       	cpc	r20, r24
    10a6:	ab 07       	cpc	r26, r27
    10a8:	b0 e8       	ldi	r27, 0x80	; 128
    10aa:	09 f0       	breq	.+2      	; 0x10ae <__divsf3_pse+0x56>
    10ac:	bb 0b       	sbc	r27, r27
    10ae:	80 2d       	mov	r24, r0
    10b0:	bf 01       	movw	r22, r30
    10b2:	ff 27       	eor	r31, r31
    10b4:	93 58       	subi	r25, 0x83	; 131
    10b6:	5f 4f       	sbci	r21, 0xFF	; 255
    10b8:	2a f0       	brmi	.+10     	; 0x10c4 <__divsf3_pse+0x6c>
    10ba:	9e 3f       	cpi	r25, 0xFE	; 254
    10bc:	51 05       	cpc	r21, r1
    10be:	68 f0       	brcs	.+26     	; 0x10da <__divsf3_pse+0x82>
    10c0:	b6 c0       	rjmp	.+364    	; 0x122e <__fp_inf>
    10c2:	00 c1       	rjmp	.+512    	; 0x12c4 <__fp_szero>
    10c4:	5f 3f       	cpi	r21, 0xFF	; 255
    10c6:	ec f3       	brlt	.-6      	; 0x10c2 <__divsf3_pse+0x6a>
    10c8:	98 3e       	cpi	r25, 0xE8	; 232
    10ca:	dc f3       	brlt	.-10     	; 0x10c2 <__divsf3_pse+0x6a>
    10cc:	86 95       	lsr	r24
    10ce:	77 95       	ror	r23
    10d0:	67 95       	ror	r22
    10d2:	b7 95       	ror	r27
    10d4:	f7 95       	ror	r31
    10d6:	9f 5f       	subi	r25, 0xFF	; 255
    10d8:	c9 f7       	brne	.-14     	; 0x10cc <__divsf3_pse+0x74>
    10da:	88 0f       	add	r24, r24
    10dc:	91 1d       	adc	r25, r1
    10de:	96 95       	lsr	r25
    10e0:	87 95       	ror	r24
    10e2:	97 f9       	bld	r25, 7
    10e4:	08 95       	ret
    10e6:	e1 e0       	ldi	r30, 0x01	; 1
    10e8:	66 0f       	add	r22, r22
    10ea:	77 1f       	adc	r23, r23
    10ec:	88 1f       	adc	r24, r24
    10ee:	bb 1f       	adc	r27, r27
    10f0:	62 17       	cp	r22, r18
    10f2:	73 07       	cpc	r23, r19
    10f4:	84 07       	cpc	r24, r20
    10f6:	ba 07       	cpc	r27, r26
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__divsf3_pse+0xaa>
    10fa:	62 1b       	sub	r22, r18
    10fc:	73 0b       	sbc	r23, r19
    10fe:	84 0b       	sbc	r24, r20
    1100:	ba 0b       	sbc	r27, r26
    1102:	ee 1f       	adc	r30, r30
    1104:	88 f7       	brcc	.-30     	; 0x10e8 <__divsf3_pse+0x90>
    1106:	e0 95       	com	r30
    1108:	08 95       	ret

0000110a <__fixsfsi>:
    110a:	04 d0       	rcall	.+8      	; 0x1114 <__fixunssfsi>
    110c:	68 94       	set
    110e:	b1 11       	cpse	r27, r1
    1110:	d9 c0       	rjmp	.+434    	; 0x12c4 <__fp_szero>
    1112:	08 95       	ret

00001114 <__fixunssfsi>:
    1114:	bc d0       	rcall	.+376    	; 0x128e <__fp_splitA>
    1116:	88 f0       	brcs	.+34     	; 0x113a <__fixunssfsi+0x26>
    1118:	9f 57       	subi	r25, 0x7F	; 127
    111a:	90 f0       	brcs	.+36     	; 0x1140 <__fixunssfsi+0x2c>
    111c:	b9 2f       	mov	r27, r25
    111e:	99 27       	eor	r25, r25
    1120:	b7 51       	subi	r27, 0x17	; 23
    1122:	a0 f0       	brcs	.+40     	; 0x114c <__fixunssfsi+0x38>
    1124:	d1 f0       	breq	.+52     	; 0x115a <__fixunssfsi+0x46>
    1126:	66 0f       	add	r22, r22
    1128:	77 1f       	adc	r23, r23
    112a:	88 1f       	adc	r24, r24
    112c:	99 1f       	adc	r25, r25
    112e:	1a f0       	brmi	.+6      	; 0x1136 <__fixunssfsi+0x22>
    1130:	ba 95       	dec	r27
    1132:	c9 f7       	brne	.-14     	; 0x1126 <__fixunssfsi+0x12>
    1134:	12 c0       	rjmp	.+36     	; 0x115a <__fixunssfsi+0x46>
    1136:	b1 30       	cpi	r27, 0x01	; 1
    1138:	81 f0       	breq	.+32     	; 0x115a <__fixunssfsi+0x46>
    113a:	c3 d0       	rcall	.+390    	; 0x12c2 <__fp_zero>
    113c:	b1 e0       	ldi	r27, 0x01	; 1
    113e:	08 95       	ret
    1140:	c0 c0       	rjmp	.+384    	; 0x12c2 <__fp_zero>
    1142:	67 2f       	mov	r22, r23
    1144:	78 2f       	mov	r23, r24
    1146:	88 27       	eor	r24, r24
    1148:	b8 5f       	subi	r27, 0xF8	; 248
    114a:	39 f0       	breq	.+14     	; 0x115a <__fixunssfsi+0x46>
    114c:	b9 3f       	cpi	r27, 0xF9	; 249
    114e:	cc f3       	brlt	.-14     	; 0x1142 <__fixunssfsi+0x2e>
    1150:	86 95       	lsr	r24
    1152:	77 95       	ror	r23
    1154:	67 95       	ror	r22
    1156:	b3 95       	inc	r27
    1158:	d9 f7       	brne	.-10     	; 0x1150 <__fixunssfsi+0x3c>
    115a:	3e f4       	brtc	.+14     	; 0x116a <__fixunssfsi+0x56>
    115c:	90 95       	com	r25
    115e:	80 95       	com	r24
    1160:	70 95       	com	r23
    1162:	61 95       	neg	r22
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	08 95       	ret

0000116c <__floatunsisf>:
    116c:	e8 94       	clt
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <__floatsisf+0x12>

00001170 <__floatsisf>:
    1170:	97 fb       	bst	r25, 7
    1172:	3e f4       	brtc	.+14     	; 0x1182 <__floatsisf+0x12>
    1174:	90 95       	com	r25
    1176:	80 95       	com	r24
    1178:	70 95       	com	r23
    117a:	61 95       	neg	r22
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	99 23       	and	r25, r25
    1184:	a9 f0       	breq	.+42     	; 0x11b0 <__floatsisf+0x40>
    1186:	f9 2f       	mov	r31, r25
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	bb 27       	eor	r27, r27
    118c:	93 95       	inc	r25
    118e:	f6 95       	lsr	r31
    1190:	87 95       	ror	r24
    1192:	77 95       	ror	r23
    1194:	67 95       	ror	r22
    1196:	b7 95       	ror	r27
    1198:	f1 11       	cpse	r31, r1
    119a:	f8 cf       	rjmp	.-16     	; 0x118c <__floatsisf+0x1c>
    119c:	fa f4       	brpl	.+62     	; 0x11dc <__floatsisf+0x6c>
    119e:	bb 0f       	add	r27, r27
    11a0:	11 f4       	brne	.+4      	; 0x11a6 <__floatsisf+0x36>
    11a2:	60 ff       	sbrs	r22, 0
    11a4:	1b c0       	rjmp	.+54     	; 0x11dc <__floatsisf+0x6c>
    11a6:	6f 5f       	subi	r22, 0xFF	; 255
    11a8:	7f 4f       	sbci	r23, 0xFF	; 255
    11aa:	8f 4f       	sbci	r24, 0xFF	; 255
    11ac:	9f 4f       	sbci	r25, 0xFF	; 255
    11ae:	16 c0       	rjmp	.+44     	; 0x11dc <__floatsisf+0x6c>
    11b0:	88 23       	and	r24, r24
    11b2:	11 f0       	breq	.+4      	; 0x11b8 <__floatsisf+0x48>
    11b4:	96 e9       	ldi	r25, 0x96	; 150
    11b6:	11 c0       	rjmp	.+34     	; 0x11da <__floatsisf+0x6a>
    11b8:	77 23       	and	r23, r23
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <__floatsisf+0x54>
    11bc:	9e e8       	ldi	r25, 0x8E	; 142
    11be:	87 2f       	mov	r24, r23
    11c0:	76 2f       	mov	r23, r22
    11c2:	05 c0       	rjmp	.+10     	; 0x11ce <__floatsisf+0x5e>
    11c4:	66 23       	and	r22, r22
    11c6:	71 f0       	breq	.+28     	; 0x11e4 <__floatsisf+0x74>
    11c8:	96 e8       	ldi	r25, 0x86	; 134
    11ca:	86 2f       	mov	r24, r22
    11cc:	70 e0       	ldi	r23, 0x00	; 0
    11ce:	60 e0       	ldi	r22, 0x00	; 0
    11d0:	2a f0       	brmi	.+10     	; 0x11dc <__floatsisf+0x6c>
    11d2:	9a 95       	dec	r25
    11d4:	66 0f       	add	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	da f7       	brpl	.-10     	; 0x11d2 <__floatsisf+0x62>
    11dc:	88 0f       	add	r24, r24
    11de:	96 95       	lsr	r25
    11e0:	87 95       	ror	r24
    11e2:	97 f9       	bld	r25, 7
    11e4:	08 95       	ret

000011e6 <__fp_cmp>:
    11e6:	99 0f       	add	r25, r25
    11e8:	00 08       	sbc	r0, r0
    11ea:	55 0f       	add	r21, r21
    11ec:	aa 0b       	sbc	r26, r26
    11ee:	e0 e8       	ldi	r30, 0x80	; 128
    11f0:	fe ef       	ldi	r31, 0xFE	; 254
    11f2:	16 16       	cp	r1, r22
    11f4:	17 06       	cpc	r1, r23
    11f6:	e8 07       	cpc	r30, r24
    11f8:	f9 07       	cpc	r31, r25
    11fa:	c0 f0       	brcs	.+48     	; 0x122c <__fp_cmp+0x46>
    11fc:	12 16       	cp	r1, r18
    11fe:	13 06       	cpc	r1, r19
    1200:	e4 07       	cpc	r30, r20
    1202:	f5 07       	cpc	r31, r21
    1204:	98 f0       	brcs	.+38     	; 0x122c <__fp_cmp+0x46>
    1206:	62 1b       	sub	r22, r18
    1208:	73 0b       	sbc	r23, r19
    120a:	84 0b       	sbc	r24, r20
    120c:	95 0b       	sbc	r25, r21
    120e:	39 f4       	brne	.+14     	; 0x121e <__fp_cmp+0x38>
    1210:	0a 26       	eor	r0, r26
    1212:	61 f0       	breq	.+24     	; 0x122c <__fp_cmp+0x46>
    1214:	23 2b       	or	r18, r19
    1216:	24 2b       	or	r18, r20
    1218:	25 2b       	or	r18, r21
    121a:	21 f4       	brne	.+8      	; 0x1224 <__fp_cmp+0x3e>
    121c:	08 95       	ret
    121e:	0a 26       	eor	r0, r26
    1220:	09 f4       	brne	.+2      	; 0x1224 <__fp_cmp+0x3e>
    1222:	a1 40       	sbci	r26, 0x01	; 1
    1224:	a6 95       	lsr	r26
    1226:	8f ef       	ldi	r24, 0xFF	; 255
    1228:	81 1d       	adc	r24, r1
    122a:	81 1d       	adc	r24, r1
    122c:	08 95       	ret

0000122e <__fp_inf>:
    122e:	97 f9       	bld	r25, 7
    1230:	9f 67       	ori	r25, 0x7F	; 127
    1232:	80 e8       	ldi	r24, 0x80	; 128
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	60 e0       	ldi	r22, 0x00	; 0
    1238:	08 95       	ret

0000123a <__fp_nan>:
    123a:	9f ef       	ldi	r25, 0xFF	; 255
    123c:	80 ec       	ldi	r24, 0xC0	; 192
    123e:	08 95       	ret

00001240 <__fp_pscA>:
    1240:	00 24       	eor	r0, r0
    1242:	0a 94       	dec	r0
    1244:	16 16       	cp	r1, r22
    1246:	17 06       	cpc	r1, r23
    1248:	18 06       	cpc	r1, r24
    124a:	09 06       	cpc	r0, r25
    124c:	08 95       	ret

0000124e <__fp_pscB>:
    124e:	00 24       	eor	r0, r0
    1250:	0a 94       	dec	r0
    1252:	12 16       	cp	r1, r18
    1254:	13 06       	cpc	r1, r19
    1256:	14 06       	cpc	r1, r20
    1258:	05 06       	cpc	r0, r21
    125a:	08 95       	ret

0000125c <__fp_round>:
    125c:	09 2e       	mov	r0, r25
    125e:	03 94       	inc	r0
    1260:	00 0c       	add	r0, r0
    1262:	11 f4       	brne	.+4      	; 0x1268 <__fp_round+0xc>
    1264:	88 23       	and	r24, r24
    1266:	52 f0       	brmi	.+20     	; 0x127c <__fp_round+0x20>
    1268:	bb 0f       	add	r27, r27
    126a:	40 f4       	brcc	.+16     	; 0x127c <__fp_round+0x20>
    126c:	bf 2b       	or	r27, r31
    126e:	11 f4       	brne	.+4      	; 0x1274 <__fp_round+0x18>
    1270:	60 ff       	sbrs	r22, 0
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__fp_round+0x20>
    1274:	6f 5f       	subi	r22, 0xFF	; 255
    1276:	7f 4f       	sbci	r23, 0xFF	; 255
    1278:	8f 4f       	sbci	r24, 0xFF	; 255
    127a:	9f 4f       	sbci	r25, 0xFF	; 255
    127c:	08 95       	ret

0000127e <__fp_split3>:
    127e:	57 fd       	sbrc	r21, 7
    1280:	90 58       	subi	r25, 0x80	; 128
    1282:	44 0f       	add	r20, r20
    1284:	55 1f       	adc	r21, r21
    1286:	59 f0       	breq	.+22     	; 0x129e <__fp_splitA+0x10>
    1288:	5f 3f       	cpi	r21, 0xFF	; 255
    128a:	71 f0       	breq	.+28     	; 0x12a8 <__fp_splitA+0x1a>
    128c:	47 95       	ror	r20

0000128e <__fp_splitA>:
    128e:	88 0f       	add	r24, r24
    1290:	97 fb       	bst	r25, 7
    1292:	99 1f       	adc	r25, r25
    1294:	61 f0       	breq	.+24     	; 0x12ae <__fp_splitA+0x20>
    1296:	9f 3f       	cpi	r25, 0xFF	; 255
    1298:	79 f0       	breq	.+30     	; 0x12b8 <__fp_splitA+0x2a>
    129a:	87 95       	ror	r24
    129c:	08 95       	ret
    129e:	12 16       	cp	r1, r18
    12a0:	13 06       	cpc	r1, r19
    12a2:	14 06       	cpc	r1, r20
    12a4:	55 1f       	adc	r21, r21
    12a6:	f2 cf       	rjmp	.-28     	; 0x128c <__fp_split3+0xe>
    12a8:	46 95       	lsr	r20
    12aa:	f1 df       	rcall	.-30     	; 0x128e <__fp_splitA>
    12ac:	08 c0       	rjmp	.+16     	; 0x12be <__fp_splitA+0x30>
    12ae:	16 16       	cp	r1, r22
    12b0:	17 06       	cpc	r1, r23
    12b2:	18 06       	cpc	r1, r24
    12b4:	99 1f       	adc	r25, r25
    12b6:	f1 cf       	rjmp	.-30     	; 0x129a <__fp_splitA+0xc>
    12b8:	86 95       	lsr	r24
    12ba:	71 05       	cpc	r23, r1
    12bc:	61 05       	cpc	r22, r1
    12be:	08 94       	sec
    12c0:	08 95       	ret

000012c2 <__fp_zero>:
    12c2:	e8 94       	clt

000012c4 <__fp_szero>:
    12c4:	bb 27       	eor	r27, r27
    12c6:	66 27       	eor	r22, r22
    12c8:	77 27       	eor	r23, r23
    12ca:	cb 01       	movw	r24, r22
    12cc:	97 f9       	bld	r25, 7
    12ce:	08 95       	ret

000012d0 <__gesf2>:
    12d0:	8a df       	rcall	.-236    	; 0x11e6 <__fp_cmp>
    12d2:	08 f4       	brcc	.+2      	; 0x12d6 <__gesf2+0x6>
    12d4:	8f ef       	ldi	r24, 0xFF	; 255
    12d6:	08 95       	ret

000012d8 <__mulsf3>:
    12d8:	0b d0       	rcall	.+22     	; 0x12f0 <__mulsf3x>
    12da:	c0 cf       	rjmp	.-128    	; 0x125c <__fp_round>
    12dc:	b1 df       	rcall	.-158    	; 0x1240 <__fp_pscA>
    12de:	28 f0       	brcs	.+10     	; 0x12ea <__mulsf3+0x12>
    12e0:	b6 df       	rcall	.-148    	; 0x124e <__fp_pscB>
    12e2:	18 f0       	brcs	.+6      	; 0x12ea <__mulsf3+0x12>
    12e4:	95 23       	and	r25, r21
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__mulsf3+0x12>
    12e8:	a2 cf       	rjmp	.-188    	; 0x122e <__fp_inf>
    12ea:	a7 cf       	rjmp	.-178    	; 0x123a <__fp_nan>
    12ec:	11 24       	eor	r1, r1
    12ee:	ea cf       	rjmp	.-44     	; 0x12c4 <__fp_szero>

000012f0 <__mulsf3x>:
    12f0:	c6 df       	rcall	.-116    	; 0x127e <__fp_split3>
    12f2:	a0 f3       	brcs	.-24     	; 0x12dc <__mulsf3+0x4>

000012f4 <__mulsf3_pse>:
    12f4:	95 9f       	mul	r25, r21
    12f6:	d1 f3       	breq	.-12     	; 0x12ec <__mulsf3+0x14>
    12f8:	95 0f       	add	r25, r21
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	55 1f       	adc	r21, r21
    12fe:	62 9f       	mul	r22, r18
    1300:	f0 01       	movw	r30, r0
    1302:	72 9f       	mul	r23, r18
    1304:	bb 27       	eor	r27, r27
    1306:	f0 0d       	add	r31, r0
    1308:	b1 1d       	adc	r27, r1
    130a:	63 9f       	mul	r22, r19
    130c:	aa 27       	eor	r26, r26
    130e:	f0 0d       	add	r31, r0
    1310:	b1 1d       	adc	r27, r1
    1312:	aa 1f       	adc	r26, r26
    1314:	64 9f       	mul	r22, r20
    1316:	66 27       	eor	r22, r22
    1318:	b0 0d       	add	r27, r0
    131a:	a1 1d       	adc	r26, r1
    131c:	66 1f       	adc	r22, r22
    131e:	82 9f       	mul	r24, r18
    1320:	22 27       	eor	r18, r18
    1322:	b0 0d       	add	r27, r0
    1324:	a1 1d       	adc	r26, r1
    1326:	62 1f       	adc	r22, r18
    1328:	73 9f       	mul	r23, r19
    132a:	b0 0d       	add	r27, r0
    132c:	a1 1d       	adc	r26, r1
    132e:	62 1f       	adc	r22, r18
    1330:	83 9f       	mul	r24, r19
    1332:	a0 0d       	add	r26, r0
    1334:	61 1d       	adc	r22, r1
    1336:	22 1f       	adc	r18, r18
    1338:	74 9f       	mul	r23, r20
    133a:	33 27       	eor	r19, r19
    133c:	a0 0d       	add	r26, r0
    133e:	61 1d       	adc	r22, r1
    1340:	23 1f       	adc	r18, r19
    1342:	84 9f       	mul	r24, r20
    1344:	60 0d       	add	r22, r0
    1346:	21 1d       	adc	r18, r1
    1348:	82 2f       	mov	r24, r18
    134a:	76 2f       	mov	r23, r22
    134c:	6a 2f       	mov	r22, r26
    134e:	11 24       	eor	r1, r1
    1350:	9f 57       	subi	r25, 0x7F	; 127
    1352:	50 40       	sbci	r21, 0x00	; 0
    1354:	8a f0       	brmi	.+34     	; 0x1378 <__mulsf3_pse+0x84>
    1356:	e1 f0       	breq	.+56     	; 0x1390 <__mulsf3_pse+0x9c>
    1358:	88 23       	and	r24, r24
    135a:	4a f0       	brmi	.+18     	; 0x136e <__mulsf3_pse+0x7a>
    135c:	ee 0f       	add	r30, r30
    135e:	ff 1f       	adc	r31, r31
    1360:	bb 1f       	adc	r27, r27
    1362:	66 1f       	adc	r22, r22
    1364:	77 1f       	adc	r23, r23
    1366:	88 1f       	adc	r24, r24
    1368:	91 50       	subi	r25, 0x01	; 1
    136a:	50 40       	sbci	r21, 0x00	; 0
    136c:	a9 f7       	brne	.-22     	; 0x1358 <__mulsf3_pse+0x64>
    136e:	9e 3f       	cpi	r25, 0xFE	; 254
    1370:	51 05       	cpc	r21, r1
    1372:	70 f0       	brcs	.+28     	; 0x1390 <__mulsf3_pse+0x9c>
    1374:	5c cf       	rjmp	.-328    	; 0x122e <__fp_inf>
    1376:	a6 cf       	rjmp	.-180    	; 0x12c4 <__fp_szero>
    1378:	5f 3f       	cpi	r21, 0xFF	; 255
    137a:	ec f3       	brlt	.-6      	; 0x1376 <__mulsf3_pse+0x82>
    137c:	98 3e       	cpi	r25, 0xE8	; 232
    137e:	dc f3       	brlt	.-10     	; 0x1376 <__mulsf3_pse+0x82>
    1380:	86 95       	lsr	r24
    1382:	77 95       	ror	r23
    1384:	67 95       	ror	r22
    1386:	b7 95       	ror	r27
    1388:	f7 95       	ror	r31
    138a:	e7 95       	ror	r30
    138c:	9f 5f       	subi	r25, 0xFF	; 255
    138e:	c1 f7       	brne	.-16     	; 0x1380 <__mulsf3_pse+0x8c>
    1390:	fe 2b       	or	r31, r30
    1392:	88 0f       	add	r24, r24
    1394:	91 1d       	adc	r25, r1
    1396:	96 95       	lsr	r25
    1398:	87 95       	ror	r24
    139a:	97 f9       	bld	r25, 7
    139c:	08 95       	ret

0000139e <__tablejump2__>:
    139e:	ee 0f       	add	r30, r30
    13a0:	ff 1f       	adc	r31, r31

000013a2 <__tablejump__>:
    13a2:	05 90       	lpm	r0, Z+
    13a4:	f4 91       	lpm	r31, Z
    13a6:	e0 2d       	mov	r30, r0
    13a8:	19 94       	eijmp

000013aa <__adddi3_s8>:
    13aa:	00 24       	eor	r0, r0
    13ac:	a7 fd       	sbrc	r26, 7
    13ae:	00 94       	com	r0
    13b0:	2a 0f       	add	r18, r26
    13b2:	30 1d       	adc	r19, r0
    13b4:	40 1d       	adc	r20, r0
    13b6:	50 1d       	adc	r21, r0
    13b8:	60 1d       	adc	r22, r0
    13ba:	70 1d       	adc	r23, r0
    13bc:	80 1d       	adc	r24, r0
    13be:	90 1d       	adc	r25, r0
    13c0:	08 95       	ret

000013c2 <fdevopen>:
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	ec 01       	movw	r28, r24
    13cc:	8b 01       	movw	r16, r22
    13ce:	00 97       	sbiw	r24, 0x00	; 0
    13d0:	31 f4       	brne	.+12     	; 0x13de <fdevopen+0x1c>
    13d2:	61 15       	cp	r22, r1
    13d4:	71 05       	cpc	r23, r1
    13d6:	19 f4       	brne	.+6      	; 0x13de <fdevopen+0x1c>
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	37 c0       	rjmp	.+110    	; 0x144c <fdevopen+0x8a>
    13de:	6e e0       	ldi	r22, 0x0E	; 14
    13e0:	70 e0       	ldi	r23, 0x00	; 0
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	63 d2       	rcall	.+1222   	; 0x18ae <calloc>
    13e8:	fc 01       	movw	r30, r24
    13ea:	00 97       	sbiw	r24, 0x00	; 0
    13ec:	a9 f3       	breq	.-22     	; 0x13d8 <fdevopen+0x16>
    13ee:	80 e8       	ldi	r24, 0x80	; 128
    13f0:	83 83       	std	Z+3, r24	; 0x03
    13f2:	01 15       	cp	r16, r1
    13f4:	11 05       	cpc	r17, r1
    13f6:	71 f0       	breq	.+28     	; 0x1414 <fdevopen+0x52>
    13f8:	13 87       	std	Z+11, r17	; 0x0b
    13fa:	02 87       	std	Z+10, r16	; 0x0a
    13fc:	81 e8       	ldi	r24, 0x81	; 129
    13fe:	83 83       	std	Z+3, r24	; 0x03
    1400:	80 91 b6 03 	lds	r24, 0x03B6
    1404:	90 91 b7 03 	lds	r25, 0x03B7
    1408:	89 2b       	or	r24, r25
    140a:	21 f4       	brne	.+8      	; 0x1414 <fdevopen+0x52>
    140c:	f0 93 b7 03 	sts	0x03B7, r31
    1410:	e0 93 b6 03 	sts	0x03B6, r30
    1414:	20 97       	sbiw	r28, 0x00	; 0
    1416:	c9 f0       	breq	.+50     	; 0x144a <fdevopen+0x88>
    1418:	d1 87       	std	Z+9, r29	; 0x09
    141a:	c0 87       	std	Z+8, r28	; 0x08
    141c:	83 81       	ldd	r24, Z+3	; 0x03
    141e:	82 60       	ori	r24, 0x02	; 2
    1420:	83 83       	std	Z+3, r24	; 0x03
    1422:	80 91 b8 03 	lds	r24, 0x03B8
    1426:	90 91 b9 03 	lds	r25, 0x03B9
    142a:	89 2b       	or	r24, r25
    142c:	71 f4       	brne	.+28     	; 0x144a <fdevopen+0x88>
    142e:	f0 93 b9 03 	sts	0x03B9, r31
    1432:	e0 93 b8 03 	sts	0x03B8, r30
    1436:	80 91 ba 03 	lds	r24, 0x03BA
    143a:	90 91 bb 03 	lds	r25, 0x03BB
    143e:	89 2b       	or	r24, r25
    1440:	21 f4       	brne	.+8      	; 0x144a <fdevopen+0x88>
    1442:	f0 93 bb 03 	sts	0x03BB, r31
    1446:	e0 93 ba 03 	sts	0x03BA, r30
    144a:	cf 01       	movw	r24, r30
    144c:	df 91       	pop	r29
    144e:	cf 91       	pop	r28
    1450:	1f 91       	pop	r17
    1452:	0f 91       	pop	r16
    1454:	08 95       	ret

00001456 <printf>:
    1456:	cf 93       	push	r28
    1458:	df 93       	push	r29
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	fe 01       	movw	r30, r28
    1460:	36 96       	adiw	r30, 0x06	; 6
    1462:	61 91       	ld	r22, Z+
    1464:	71 91       	ld	r23, Z+
    1466:	af 01       	movw	r20, r30
    1468:	80 91 b8 03 	lds	r24, 0x03B8
    146c:	90 91 b9 03 	lds	r25, 0x03B9
    1470:	30 d0       	rcall	.+96     	; 0x14d2 <vfprintf>
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <puts>:
    1478:	0f 93       	push	r16
    147a:	1f 93       	push	r17
    147c:	cf 93       	push	r28
    147e:	df 93       	push	r29
    1480:	e0 91 b8 03 	lds	r30, 0x03B8
    1484:	f0 91 b9 03 	lds	r31, 0x03B9
    1488:	23 81       	ldd	r18, Z+3	; 0x03
    148a:	21 ff       	sbrs	r18, 1
    148c:	1b c0       	rjmp	.+54     	; 0x14c4 <puts+0x4c>
    148e:	ec 01       	movw	r28, r24
    1490:	00 e0       	ldi	r16, 0x00	; 0
    1492:	10 e0       	ldi	r17, 0x00	; 0
    1494:	89 91       	ld	r24, Y+
    1496:	60 91 b8 03 	lds	r22, 0x03B8
    149a:	70 91 b9 03 	lds	r23, 0x03B9
    149e:	db 01       	movw	r26, r22
    14a0:	18 96       	adiw	r26, 0x08	; 8
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	19 97       	sbiw	r26, 0x09	; 9
    14a8:	88 23       	and	r24, r24
    14aa:	31 f0       	breq	.+12     	; 0x14b8 <puts+0x40>
    14ac:	19 95       	eicall
    14ae:	89 2b       	or	r24, r25
    14b0:	89 f3       	breq	.-30     	; 0x1494 <puts+0x1c>
    14b2:	0f ef       	ldi	r16, 0xFF	; 255
    14b4:	1f ef       	ldi	r17, 0xFF	; 255
    14b6:	ee cf       	rjmp	.-36     	; 0x1494 <puts+0x1c>
    14b8:	8a e0       	ldi	r24, 0x0A	; 10
    14ba:	19 95       	eicall
    14bc:	89 2b       	or	r24, r25
    14be:	11 f4       	brne	.+4      	; 0x14c4 <puts+0x4c>
    14c0:	c8 01       	movw	r24, r16
    14c2:	02 c0       	rjmp	.+4      	; 0x14c8 <puts+0x50>
    14c4:	8f ef       	ldi	r24, 0xFF	; 255
    14c6:	9f ef       	ldi	r25, 0xFF	; 255
    14c8:	df 91       	pop	r29
    14ca:	cf 91       	pop	r28
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <vfprintf>:
    14d2:	2f 92       	push	r2
    14d4:	3f 92       	push	r3
    14d6:	4f 92       	push	r4
    14d8:	5f 92       	push	r5
    14da:	6f 92       	push	r6
    14dc:	7f 92       	push	r7
    14de:	8f 92       	push	r8
    14e0:	9f 92       	push	r9
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2c 97       	sbiw	r28, 0x0c	; 12
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	7c 01       	movw	r14, r24
    1508:	6b 01       	movw	r12, r22
    150a:	8a 01       	movw	r16, r20
    150c:	fc 01       	movw	r30, r24
    150e:	17 82       	std	Z+7, r1	; 0x07
    1510:	16 82       	std	Z+6, r1	; 0x06
    1512:	83 81       	ldd	r24, Z+3	; 0x03
    1514:	81 ff       	sbrs	r24, 1
    1516:	b0 c1       	rjmp	.+864    	; 0x1878 <vfprintf+0x3a6>
    1518:	ce 01       	movw	r24, r28
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	4c 01       	movw	r8, r24
    151e:	f7 01       	movw	r30, r14
    1520:	93 81       	ldd	r25, Z+3	; 0x03
    1522:	f6 01       	movw	r30, r12
    1524:	93 fd       	sbrc	r25, 3
    1526:	85 91       	lpm	r24, Z+
    1528:	93 ff       	sbrs	r25, 3
    152a:	81 91       	ld	r24, Z+
    152c:	6f 01       	movw	r12, r30
    152e:	88 23       	and	r24, r24
    1530:	09 f4       	brne	.+2      	; 0x1534 <vfprintf+0x62>
    1532:	9e c1       	rjmp	.+828    	; 0x1870 <vfprintf+0x39e>
    1534:	85 32       	cpi	r24, 0x25	; 37
    1536:	39 f4       	brne	.+14     	; 0x1546 <vfprintf+0x74>
    1538:	93 fd       	sbrc	r25, 3
    153a:	85 91       	lpm	r24, Z+
    153c:	93 ff       	sbrs	r25, 3
    153e:	81 91       	ld	r24, Z+
    1540:	6f 01       	movw	r12, r30
    1542:	85 32       	cpi	r24, 0x25	; 37
    1544:	21 f4       	brne	.+8      	; 0x154e <vfprintf+0x7c>
    1546:	b7 01       	movw	r22, r14
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	0f d3       	rcall	.+1566   	; 0x1b6a <fputc>
    154c:	e8 cf       	rjmp	.-48     	; 0x151e <vfprintf+0x4c>
    154e:	51 2c       	mov	r5, r1
    1550:	31 2c       	mov	r3, r1
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	20 32       	cpi	r18, 0x20	; 32
    1556:	a0 f4       	brcc	.+40     	; 0x1580 <vfprintf+0xae>
    1558:	8b 32       	cpi	r24, 0x2B	; 43
    155a:	69 f0       	breq	.+26     	; 0x1576 <vfprintf+0xa4>
    155c:	30 f4       	brcc	.+12     	; 0x156a <vfprintf+0x98>
    155e:	80 32       	cpi	r24, 0x20	; 32
    1560:	59 f0       	breq	.+22     	; 0x1578 <vfprintf+0xa6>
    1562:	83 32       	cpi	r24, 0x23	; 35
    1564:	69 f4       	brne	.+26     	; 0x1580 <vfprintf+0xae>
    1566:	20 61       	ori	r18, 0x10	; 16
    1568:	2c c0       	rjmp	.+88     	; 0x15c2 <vfprintf+0xf0>
    156a:	8d 32       	cpi	r24, 0x2D	; 45
    156c:	39 f0       	breq	.+14     	; 0x157c <vfprintf+0xaa>
    156e:	80 33       	cpi	r24, 0x30	; 48
    1570:	39 f4       	brne	.+14     	; 0x1580 <vfprintf+0xae>
    1572:	21 60       	ori	r18, 0x01	; 1
    1574:	26 c0       	rjmp	.+76     	; 0x15c2 <vfprintf+0xf0>
    1576:	22 60       	ori	r18, 0x02	; 2
    1578:	24 60       	ori	r18, 0x04	; 4
    157a:	23 c0       	rjmp	.+70     	; 0x15c2 <vfprintf+0xf0>
    157c:	28 60       	ori	r18, 0x08	; 8
    157e:	21 c0       	rjmp	.+66     	; 0x15c2 <vfprintf+0xf0>
    1580:	27 fd       	sbrc	r18, 7
    1582:	27 c0       	rjmp	.+78     	; 0x15d2 <vfprintf+0x100>
    1584:	30 ed       	ldi	r19, 0xD0	; 208
    1586:	38 0f       	add	r19, r24
    1588:	3a 30       	cpi	r19, 0x0A	; 10
    158a:	78 f4       	brcc	.+30     	; 0x15aa <vfprintf+0xd8>
    158c:	26 ff       	sbrs	r18, 6
    158e:	06 c0       	rjmp	.+12     	; 0x159c <vfprintf+0xca>
    1590:	fa e0       	ldi	r31, 0x0A	; 10
    1592:	5f 9e       	mul	r5, r31
    1594:	30 0d       	add	r19, r0
    1596:	11 24       	eor	r1, r1
    1598:	53 2e       	mov	r5, r19
    159a:	13 c0       	rjmp	.+38     	; 0x15c2 <vfprintf+0xf0>
    159c:	8a e0       	ldi	r24, 0x0A	; 10
    159e:	38 9e       	mul	r3, r24
    15a0:	30 0d       	add	r19, r0
    15a2:	11 24       	eor	r1, r1
    15a4:	33 2e       	mov	r3, r19
    15a6:	20 62       	ori	r18, 0x20	; 32
    15a8:	0c c0       	rjmp	.+24     	; 0x15c2 <vfprintf+0xf0>
    15aa:	8e 32       	cpi	r24, 0x2E	; 46
    15ac:	21 f4       	brne	.+8      	; 0x15b6 <vfprintf+0xe4>
    15ae:	26 fd       	sbrc	r18, 6
    15b0:	5f c1       	rjmp	.+702    	; 0x1870 <vfprintf+0x39e>
    15b2:	20 64       	ori	r18, 0x40	; 64
    15b4:	06 c0       	rjmp	.+12     	; 0x15c2 <vfprintf+0xf0>
    15b6:	8c 36       	cpi	r24, 0x6C	; 108
    15b8:	11 f4       	brne	.+4      	; 0x15be <vfprintf+0xec>
    15ba:	20 68       	ori	r18, 0x80	; 128
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <vfprintf+0xf0>
    15be:	88 36       	cpi	r24, 0x68	; 104
    15c0:	41 f4       	brne	.+16     	; 0x15d2 <vfprintf+0x100>
    15c2:	f6 01       	movw	r30, r12
    15c4:	93 fd       	sbrc	r25, 3
    15c6:	85 91       	lpm	r24, Z+
    15c8:	93 ff       	sbrs	r25, 3
    15ca:	81 91       	ld	r24, Z+
    15cc:	6f 01       	movw	r12, r30
    15ce:	81 11       	cpse	r24, r1
    15d0:	c1 cf       	rjmp	.-126    	; 0x1554 <vfprintf+0x82>
    15d2:	98 2f       	mov	r25, r24
    15d4:	9f 7d       	andi	r25, 0xDF	; 223
    15d6:	95 54       	subi	r25, 0x45	; 69
    15d8:	93 30       	cpi	r25, 0x03	; 3
    15da:	28 f4       	brcc	.+10     	; 0x15e6 <vfprintf+0x114>
    15dc:	0c 5f       	subi	r16, 0xFC	; 252
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	ff e3       	ldi	r31, 0x3F	; 63
    15e2:	f9 83       	std	Y+1, r31	; 0x01
    15e4:	0d c0       	rjmp	.+26     	; 0x1600 <vfprintf+0x12e>
    15e6:	83 36       	cpi	r24, 0x63	; 99
    15e8:	31 f0       	breq	.+12     	; 0x15f6 <vfprintf+0x124>
    15ea:	83 37       	cpi	r24, 0x73	; 115
    15ec:	71 f0       	breq	.+28     	; 0x160a <vfprintf+0x138>
    15ee:	83 35       	cpi	r24, 0x53	; 83
    15f0:	09 f0       	breq	.+2      	; 0x15f4 <vfprintf+0x122>
    15f2:	57 c0       	rjmp	.+174    	; 0x16a2 <vfprintf+0x1d0>
    15f4:	21 c0       	rjmp	.+66     	; 0x1638 <vfprintf+0x166>
    15f6:	f8 01       	movw	r30, r16
    15f8:	80 81       	ld	r24, Z
    15fa:	89 83       	std	Y+1, r24	; 0x01
    15fc:	0e 5f       	subi	r16, 0xFE	; 254
    15fe:	1f 4f       	sbci	r17, 0xFF	; 255
    1600:	44 24       	eor	r4, r4
    1602:	43 94       	inc	r4
    1604:	51 2c       	mov	r5, r1
    1606:	54 01       	movw	r10, r8
    1608:	14 c0       	rjmp	.+40     	; 0x1632 <vfprintf+0x160>
    160a:	38 01       	movw	r6, r16
    160c:	f2 e0       	ldi	r31, 0x02	; 2
    160e:	6f 0e       	add	r6, r31
    1610:	71 1c       	adc	r7, r1
    1612:	f8 01       	movw	r30, r16
    1614:	a0 80       	ld	r10, Z
    1616:	b1 80       	ldd	r11, Z+1	; 0x01
    1618:	26 ff       	sbrs	r18, 6
    161a:	03 c0       	rjmp	.+6      	; 0x1622 <vfprintf+0x150>
    161c:	65 2d       	mov	r22, r5
    161e:	70 e0       	ldi	r23, 0x00	; 0
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <vfprintf+0x154>
    1622:	6f ef       	ldi	r22, 0xFF	; 255
    1624:	7f ef       	ldi	r23, 0xFF	; 255
    1626:	c5 01       	movw	r24, r10
    1628:	2c 87       	std	Y+12, r18	; 0x0c
    162a:	94 d2       	rcall	.+1320   	; 0x1b54 <strnlen>
    162c:	2c 01       	movw	r4, r24
    162e:	83 01       	movw	r16, r6
    1630:	2c 85       	ldd	r18, Y+12	; 0x0c
    1632:	2f 77       	andi	r18, 0x7F	; 127
    1634:	22 2e       	mov	r2, r18
    1636:	16 c0       	rjmp	.+44     	; 0x1664 <vfprintf+0x192>
    1638:	38 01       	movw	r6, r16
    163a:	f2 e0       	ldi	r31, 0x02	; 2
    163c:	6f 0e       	add	r6, r31
    163e:	71 1c       	adc	r7, r1
    1640:	f8 01       	movw	r30, r16
    1642:	a0 80       	ld	r10, Z
    1644:	b1 80       	ldd	r11, Z+1	; 0x01
    1646:	26 ff       	sbrs	r18, 6
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <vfprintf+0x17e>
    164a:	65 2d       	mov	r22, r5
    164c:	70 e0       	ldi	r23, 0x00	; 0
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <vfprintf+0x182>
    1650:	6f ef       	ldi	r22, 0xFF	; 255
    1652:	7f ef       	ldi	r23, 0xFF	; 255
    1654:	c5 01       	movw	r24, r10
    1656:	2c 87       	std	Y+12, r18	; 0x0c
    1658:	6b d2       	rcall	.+1238   	; 0x1b30 <strnlen_P>
    165a:	2c 01       	movw	r4, r24
    165c:	2c 85       	ldd	r18, Y+12	; 0x0c
    165e:	20 68       	ori	r18, 0x80	; 128
    1660:	22 2e       	mov	r2, r18
    1662:	83 01       	movw	r16, r6
    1664:	23 fc       	sbrc	r2, 3
    1666:	19 c0       	rjmp	.+50     	; 0x169a <vfprintf+0x1c8>
    1668:	83 2d       	mov	r24, r3
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	48 16       	cp	r4, r24
    166e:	59 06       	cpc	r5, r25
    1670:	a0 f4       	brcc	.+40     	; 0x169a <vfprintf+0x1c8>
    1672:	b7 01       	movw	r22, r14
    1674:	80 e2       	ldi	r24, 0x20	; 32
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	78 d2       	rcall	.+1264   	; 0x1b6a <fputc>
    167a:	3a 94       	dec	r3
    167c:	f5 cf       	rjmp	.-22     	; 0x1668 <vfprintf+0x196>
    167e:	f5 01       	movw	r30, r10
    1680:	27 fc       	sbrc	r2, 7
    1682:	85 91       	lpm	r24, Z+
    1684:	27 fe       	sbrs	r2, 7
    1686:	81 91       	ld	r24, Z+
    1688:	5f 01       	movw	r10, r30
    168a:	b7 01       	movw	r22, r14
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	6d d2       	rcall	.+1242   	; 0x1b6a <fputc>
    1690:	31 10       	cpse	r3, r1
    1692:	3a 94       	dec	r3
    1694:	f1 e0       	ldi	r31, 0x01	; 1
    1696:	4f 1a       	sub	r4, r31
    1698:	51 08       	sbc	r5, r1
    169a:	41 14       	cp	r4, r1
    169c:	51 04       	cpc	r5, r1
    169e:	79 f7       	brne	.-34     	; 0x167e <vfprintf+0x1ac>
    16a0:	de c0       	rjmp	.+444    	; 0x185e <vfprintf+0x38c>
    16a2:	84 36       	cpi	r24, 0x64	; 100
    16a4:	11 f0       	breq	.+4      	; 0x16aa <vfprintf+0x1d8>
    16a6:	89 36       	cpi	r24, 0x69	; 105
    16a8:	31 f5       	brne	.+76     	; 0x16f6 <vfprintf+0x224>
    16aa:	f8 01       	movw	r30, r16
    16ac:	27 ff       	sbrs	r18, 7
    16ae:	07 c0       	rjmp	.+14     	; 0x16be <vfprintf+0x1ec>
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
    16b4:	82 81       	ldd	r24, Z+2	; 0x02
    16b6:	93 81       	ldd	r25, Z+3	; 0x03
    16b8:	0c 5f       	subi	r16, 0xFC	; 252
    16ba:	1f 4f       	sbci	r17, 0xFF	; 255
    16bc:	08 c0       	rjmp	.+16     	; 0x16ce <vfprintf+0x1fc>
    16be:	60 81       	ld	r22, Z
    16c0:	71 81       	ldd	r23, Z+1	; 0x01
    16c2:	88 27       	eor	r24, r24
    16c4:	77 fd       	sbrc	r23, 7
    16c6:	80 95       	com	r24
    16c8:	98 2f       	mov	r25, r24
    16ca:	0e 5f       	subi	r16, 0xFE	; 254
    16cc:	1f 4f       	sbci	r17, 0xFF	; 255
    16ce:	2f 76       	andi	r18, 0x6F	; 111
    16d0:	b2 2e       	mov	r11, r18
    16d2:	97 ff       	sbrs	r25, 7
    16d4:	09 c0       	rjmp	.+18     	; 0x16e8 <vfprintf+0x216>
    16d6:	90 95       	com	r25
    16d8:	80 95       	com	r24
    16da:	70 95       	com	r23
    16dc:	61 95       	neg	r22
    16de:	7f 4f       	sbci	r23, 0xFF	; 255
    16e0:	8f 4f       	sbci	r24, 0xFF	; 255
    16e2:	9f 4f       	sbci	r25, 0xFF	; 255
    16e4:	20 68       	ori	r18, 0x80	; 128
    16e6:	b2 2e       	mov	r11, r18
    16e8:	2a e0       	ldi	r18, 0x0A	; 10
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	a4 01       	movw	r20, r8
    16ee:	6f d2       	rcall	.+1246   	; 0x1bce <__ultoa_invert>
    16f0:	a8 2e       	mov	r10, r24
    16f2:	a8 18       	sub	r10, r8
    16f4:	43 c0       	rjmp	.+134    	; 0x177c <vfprintf+0x2aa>
    16f6:	85 37       	cpi	r24, 0x75	; 117
    16f8:	29 f4       	brne	.+10     	; 0x1704 <vfprintf+0x232>
    16fa:	2f 7e       	andi	r18, 0xEF	; 239
    16fc:	b2 2e       	mov	r11, r18
    16fe:	2a e0       	ldi	r18, 0x0A	; 10
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	25 c0       	rjmp	.+74     	; 0x174e <vfprintf+0x27c>
    1704:	f2 2f       	mov	r31, r18
    1706:	f9 7f       	andi	r31, 0xF9	; 249
    1708:	bf 2e       	mov	r11, r31
    170a:	8f 36       	cpi	r24, 0x6F	; 111
    170c:	c1 f0       	breq	.+48     	; 0x173e <vfprintf+0x26c>
    170e:	18 f4       	brcc	.+6      	; 0x1716 <vfprintf+0x244>
    1710:	88 35       	cpi	r24, 0x58	; 88
    1712:	79 f0       	breq	.+30     	; 0x1732 <vfprintf+0x260>
    1714:	ad c0       	rjmp	.+346    	; 0x1870 <vfprintf+0x39e>
    1716:	80 37       	cpi	r24, 0x70	; 112
    1718:	19 f0       	breq	.+6      	; 0x1720 <vfprintf+0x24e>
    171a:	88 37       	cpi	r24, 0x78	; 120
    171c:	21 f0       	breq	.+8      	; 0x1726 <vfprintf+0x254>
    171e:	a8 c0       	rjmp	.+336    	; 0x1870 <vfprintf+0x39e>
    1720:	2f 2f       	mov	r18, r31
    1722:	20 61       	ori	r18, 0x10	; 16
    1724:	b2 2e       	mov	r11, r18
    1726:	b4 fe       	sbrs	r11, 4
    1728:	0d c0       	rjmp	.+26     	; 0x1744 <vfprintf+0x272>
    172a:	8b 2d       	mov	r24, r11
    172c:	84 60       	ori	r24, 0x04	; 4
    172e:	b8 2e       	mov	r11, r24
    1730:	09 c0       	rjmp	.+18     	; 0x1744 <vfprintf+0x272>
    1732:	24 ff       	sbrs	r18, 4
    1734:	0a c0       	rjmp	.+20     	; 0x174a <vfprintf+0x278>
    1736:	9f 2f       	mov	r25, r31
    1738:	96 60       	ori	r25, 0x06	; 6
    173a:	b9 2e       	mov	r11, r25
    173c:	06 c0       	rjmp	.+12     	; 0x174a <vfprintf+0x278>
    173e:	28 e0       	ldi	r18, 0x08	; 8
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	05 c0       	rjmp	.+10     	; 0x174e <vfprintf+0x27c>
    1744:	20 e1       	ldi	r18, 0x10	; 16
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	02 c0       	rjmp	.+4      	; 0x174e <vfprintf+0x27c>
    174a:	20 e1       	ldi	r18, 0x10	; 16
    174c:	32 e0       	ldi	r19, 0x02	; 2
    174e:	f8 01       	movw	r30, r16
    1750:	b7 fe       	sbrs	r11, 7
    1752:	07 c0       	rjmp	.+14     	; 0x1762 <vfprintf+0x290>
    1754:	60 81       	ld	r22, Z
    1756:	71 81       	ldd	r23, Z+1	; 0x01
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	0c 5f       	subi	r16, 0xFC	; 252
    175e:	1f 4f       	sbci	r17, 0xFF	; 255
    1760:	06 c0       	rjmp	.+12     	; 0x176e <vfprintf+0x29c>
    1762:	60 81       	ld	r22, Z
    1764:	71 81       	ldd	r23, Z+1	; 0x01
    1766:	80 e0       	ldi	r24, 0x00	; 0
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	0e 5f       	subi	r16, 0xFE	; 254
    176c:	1f 4f       	sbci	r17, 0xFF	; 255
    176e:	a4 01       	movw	r20, r8
    1770:	2e d2       	rcall	.+1116   	; 0x1bce <__ultoa_invert>
    1772:	a8 2e       	mov	r10, r24
    1774:	a8 18       	sub	r10, r8
    1776:	fb 2d       	mov	r31, r11
    1778:	ff 77       	andi	r31, 0x7F	; 127
    177a:	bf 2e       	mov	r11, r31
    177c:	b6 fe       	sbrs	r11, 6
    177e:	0b c0       	rjmp	.+22     	; 0x1796 <vfprintf+0x2c4>
    1780:	2b 2d       	mov	r18, r11
    1782:	2e 7f       	andi	r18, 0xFE	; 254
    1784:	a5 14       	cp	r10, r5
    1786:	50 f4       	brcc	.+20     	; 0x179c <vfprintf+0x2ca>
    1788:	b4 fe       	sbrs	r11, 4
    178a:	0a c0       	rjmp	.+20     	; 0x17a0 <vfprintf+0x2ce>
    178c:	b2 fc       	sbrc	r11, 2
    178e:	08 c0       	rjmp	.+16     	; 0x17a0 <vfprintf+0x2ce>
    1790:	2b 2d       	mov	r18, r11
    1792:	2e 7e       	andi	r18, 0xEE	; 238
    1794:	05 c0       	rjmp	.+10     	; 0x17a0 <vfprintf+0x2ce>
    1796:	7a 2c       	mov	r7, r10
    1798:	2b 2d       	mov	r18, r11
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <vfprintf+0x2d0>
    179c:	7a 2c       	mov	r7, r10
    179e:	01 c0       	rjmp	.+2      	; 0x17a2 <vfprintf+0x2d0>
    17a0:	75 2c       	mov	r7, r5
    17a2:	24 ff       	sbrs	r18, 4
    17a4:	0d c0       	rjmp	.+26     	; 0x17c0 <vfprintf+0x2ee>
    17a6:	fe 01       	movw	r30, r28
    17a8:	ea 0d       	add	r30, r10
    17aa:	f1 1d       	adc	r31, r1
    17ac:	80 81       	ld	r24, Z
    17ae:	80 33       	cpi	r24, 0x30	; 48
    17b0:	11 f4       	brne	.+4      	; 0x17b6 <vfprintf+0x2e4>
    17b2:	29 7e       	andi	r18, 0xE9	; 233
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <vfprintf+0x2f6>
    17b6:	22 ff       	sbrs	r18, 2
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <vfprintf+0x2f4>
    17ba:	73 94       	inc	r7
    17bc:	73 94       	inc	r7
    17be:	04 c0       	rjmp	.+8      	; 0x17c8 <vfprintf+0x2f6>
    17c0:	82 2f       	mov	r24, r18
    17c2:	86 78       	andi	r24, 0x86	; 134
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <vfprintf+0x2f6>
    17c6:	73 94       	inc	r7
    17c8:	23 fd       	sbrc	r18, 3
    17ca:	12 c0       	rjmp	.+36     	; 0x17f0 <vfprintf+0x31e>
    17cc:	20 ff       	sbrs	r18, 0
    17ce:	06 c0       	rjmp	.+12     	; 0x17dc <vfprintf+0x30a>
    17d0:	5a 2c       	mov	r5, r10
    17d2:	73 14       	cp	r7, r3
    17d4:	18 f4       	brcc	.+6      	; 0x17dc <vfprintf+0x30a>
    17d6:	53 0c       	add	r5, r3
    17d8:	57 18       	sub	r5, r7
    17da:	73 2c       	mov	r7, r3
    17dc:	73 14       	cp	r7, r3
    17de:	60 f4       	brcc	.+24     	; 0x17f8 <vfprintf+0x326>
    17e0:	b7 01       	movw	r22, r14
    17e2:	80 e2       	ldi	r24, 0x20	; 32
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	2c 87       	std	Y+12, r18	; 0x0c
    17e8:	c0 d1       	rcall	.+896    	; 0x1b6a <fputc>
    17ea:	73 94       	inc	r7
    17ec:	2c 85       	ldd	r18, Y+12	; 0x0c
    17ee:	f6 cf       	rjmp	.-20     	; 0x17dc <vfprintf+0x30a>
    17f0:	73 14       	cp	r7, r3
    17f2:	10 f4       	brcc	.+4      	; 0x17f8 <vfprintf+0x326>
    17f4:	37 18       	sub	r3, r7
    17f6:	01 c0       	rjmp	.+2      	; 0x17fa <vfprintf+0x328>
    17f8:	31 2c       	mov	r3, r1
    17fa:	24 ff       	sbrs	r18, 4
    17fc:	11 c0       	rjmp	.+34     	; 0x1820 <vfprintf+0x34e>
    17fe:	b7 01       	movw	r22, r14
    1800:	80 e3       	ldi	r24, 0x30	; 48
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	2c 87       	std	Y+12, r18	; 0x0c
    1806:	b1 d1       	rcall	.+866    	; 0x1b6a <fputc>
    1808:	2c 85       	ldd	r18, Y+12	; 0x0c
    180a:	22 ff       	sbrs	r18, 2
    180c:	16 c0       	rjmp	.+44     	; 0x183a <vfprintf+0x368>
    180e:	21 ff       	sbrs	r18, 1
    1810:	03 c0       	rjmp	.+6      	; 0x1818 <vfprintf+0x346>
    1812:	88 e5       	ldi	r24, 0x58	; 88
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	02 c0       	rjmp	.+4      	; 0x181c <vfprintf+0x34a>
    1818:	88 e7       	ldi	r24, 0x78	; 120
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	b7 01       	movw	r22, r14
    181e:	0c c0       	rjmp	.+24     	; 0x1838 <vfprintf+0x366>
    1820:	82 2f       	mov	r24, r18
    1822:	86 78       	andi	r24, 0x86	; 134
    1824:	51 f0       	breq	.+20     	; 0x183a <vfprintf+0x368>
    1826:	21 fd       	sbrc	r18, 1
    1828:	02 c0       	rjmp	.+4      	; 0x182e <vfprintf+0x35c>
    182a:	80 e2       	ldi	r24, 0x20	; 32
    182c:	01 c0       	rjmp	.+2      	; 0x1830 <vfprintf+0x35e>
    182e:	8b e2       	ldi	r24, 0x2B	; 43
    1830:	27 fd       	sbrc	r18, 7
    1832:	8d e2       	ldi	r24, 0x2D	; 45
    1834:	b7 01       	movw	r22, r14
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	98 d1       	rcall	.+816    	; 0x1b6a <fputc>
    183a:	a5 14       	cp	r10, r5
    183c:	30 f4       	brcc	.+12     	; 0x184a <vfprintf+0x378>
    183e:	b7 01       	movw	r22, r14
    1840:	80 e3       	ldi	r24, 0x30	; 48
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	92 d1       	rcall	.+804    	; 0x1b6a <fputc>
    1846:	5a 94       	dec	r5
    1848:	f8 cf       	rjmp	.-16     	; 0x183a <vfprintf+0x368>
    184a:	aa 94       	dec	r10
    184c:	f4 01       	movw	r30, r8
    184e:	ea 0d       	add	r30, r10
    1850:	f1 1d       	adc	r31, r1
    1852:	80 81       	ld	r24, Z
    1854:	b7 01       	movw	r22, r14
    1856:	90 e0       	ldi	r25, 0x00	; 0
    1858:	88 d1       	rcall	.+784    	; 0x1b6a <fputc>
    185a:	a1 10       	cpse	r10, r1
    185c:	f6 cf       	rjmp	.-20     	; 0x184a <vfprintf+0x378>
    185e:	33 20       	and	r3, r3
    1860:	09 f4       	brne	.+2      	; 0x1864 <vfprintf+0x392>
    1862:	5d ce       	rjmp	.-838    	; 0x151e <vfprintf+0x4c>
    1864:	b7 01       	movw	r22, r14
    1866:	80 e2       	ldi	r24, 0x20	; 32
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	7f d1       	rcall	.+766    	; 0x1b6a <fputc>
    186c:	3a 94       	dec	r3
    186e:	f7 cf       	rjmp	.-18     	; 0x185e <vfprintf+0x38c>
    1870:	f7 01       	movw	r30, r14
    1872:	86 81       	ldd	r24, Z+6	; 0x06
    1874:	97 81       	ldd	r25, Z+7	; 0x07
    1876:	02 c0       	rjmp	.+4      	; 0x187c <vfprintf+0x3aa>
    1878:	8f ef       	ldi	r24, 0xFF	; 255
    187a:	9f ef       	ldi	r25, 0xFF	; 255
    187c:	2c 96       	adiw	r28, 0x0c	; 12
    187e:	0f b6       	in	r0, 0x3f	; 63
    1880:	f8 94       	cli
    1882:	de bf       	out	0x3e, r29	; 62
    1884:	0f be       	out	0x3f, r0	; 63
    1886:	cd bf       	out	0x3d, r28	; 61
    1888:	df 91       	pop	r29
    188a:	cf 91       	pop	r28
    188c:	1f 91       	pop	r17
    188e:	0f 91       	pop	r16
    1890:	ff 90       	pop	r15
    1892:	ef 90       	pop	r14
    1894:	df 90       	pop	r13
    1896:	cf 90       	pop	r12
    1898:	bf 90       	pop	r11
    189a:	af 90       	pop	r10
    189c:	9f 90       	pop	r9
    189e:	8f 90       	pop	r8
    18a0:	7f 90       	pop	r7
    18a2:	6f 90       	pop	r6
    18a4:	5f 90       	pop	r5
    18a6:	4f 90       	pop	r4
    18a8:	3f 90       	pop	r3
    18aa:	2f 90       	pop	r2
    18ac:	08 95       	ret

000018ae <calloc>:
    18ae:	0f 93       	push	r16
    18b0:	1f 93       	push	r17
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	86 9f       	mul	r24, r22
    18b8:	80 01       	movw	r16, r0
    18ba:	87 9f       	mul	r24, r23
    18bc:	10 0d       	add	r17, r0
    18be:	96 9f       	mul	r25, r22
    18c0:	10 0d       	add	r17, r0
    18c2:	11 24       	eor	r1, r1
    18c4:	c8 01       	movw	r24, r16
    18c6:	0d d0       	rcall	.+26     	; 0x18e2 <malloc>
    18c8:	ec 01       	movw	r28, r24
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	21 f0       	breq	.+8      	; 0x18d6 <calloc+0x28>
    18ce:	a8 01       	movw	r20, r16
    18d0:	60 e0       	ldi	r22, 0x00	; 0
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	38 d1       	rcall	.+624    	; 0x1b46 <memset>
    18d6:	ce 01       	movw	r24, r28
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	1f 91       	pop	r17
    18de:	0f 91       	pop	r16
    18e0:	08 95       	ret

000018e2 <malloc>:
    18e2:	cf 93       	push	r28
    18e4:	df 93       	push	r29
    18e6:	82 30       	cpi	r24, 0x02	; 2
    18e8:	91 05       	cpc	r25, r1
    18ea:	10 f4       	brcc	.+4      	; 0x18f0 <malloc+0xe>
    18ec:	82 e0       	ldi	r24, 0x02	; 2
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	e0 91 be 03 	lds	r30, 0x03BE
    18f4:	f0 91 bf 03 	lds	r31, 0x03BF
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	a0 e0       	ldi	r26, 0x00	; 0
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	30 97       	sbiw	r30, 0x00	; 0
    1902:	39 f1       	breq	.+78     	; 0x1952 <malloc+0x70>
    1904:	40 81       	ld	r20, Z
    1906:	51 81       	ldd	r21, Z+1	; 0x01
    1908:	48 17       	cp	r20, r24
    190a:	59 07       	cpc	r21, r25
    190c:	b8 f0       	brcs	.+46     	; 0x193c <malloc+0x5a>
    190e:	48 17       	cp	r20, r24
    1910:	59 07       	cpc	r21, r25
    1912:	71 f4       	brne	.+28     	; 0x1930 <malloc+0x4e>
    1914:	82 81       	ldd	r24, Z+2	; 0x02
    1916:	93 81       	ldd	r25, Z+3	; 0x03
    1918:	10 97       	sbiw	r26, 0x00	; 0
    191a:	29 f0       	breq	.+10     	; 0x1926 <malloc+0x44>
    191c:	13 96       	adiw	r26, 0x03	; 3
    191e:	9c 93       	st	X, r25
    1920:	8e 93       	st	-X, r24
    1922:	12 97       	sbiw	r26, 0x02	; 2
    1924:	2c c0       	rjmp	.+88     	; 0x197e <malloc+0x9c>
    1926:	90 93 bf 03 	sts	0x03BF, r25
    192a:	80 93 be 03 	sts	0x03BE, r24
    192e:	27 c0       	rjmp	.+78     	; 0x197e <malloc+0x9c>
    1930:	21 15       	cp	r18, r1
    1932:	31 05       	cpc	r19, r1
    1934:	31 f0       	breq	.+12     	; 0x1942 <malloc+0x60>
    1936:	42 17       	cp	r20, r18
    1938:	53 07       	cpc	r21, r19
    193a:	18 f0       	brcs	.+6      	; 0x1942 <malloc+0x60>
    193c:	a9 01       	movw	r20, r18
    193e:	db 01       	movw	r26, r22
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <malloc+0x62>
    1942:	ef 01       	movw	r28, r30
    1944:	9a 01       	movw	r18, r20
    1946:	bd 01       	movw	r22, r26
    1948:	df 01       	movw	r26, r30
    194a:	02 80       	ldd	r0, Z+2	; 0x02
    194c:	f3 81       	ldd	r31, Z+3	; 0x03
    194e:	e0 2d       	mov	r30, r0
    1950:	d7 cf       	rjmp	.-82     	; 0x1900 <malloc+0x1e>
    1952:	21 15       	cp	r18, r1
    1954:	31 05       	cpc	r19, r1
    1956:	f9 f0       	breq	.+62     	; 0x1996 <malloc+0xb4>
    1958:	28 1b       	sub	r18, r24
    195a:	39 0b       	sbc	r19, r25
    195c:	24 30       	cpi	r18, 0x04	; 4
    195e:	31 05       	cpc	r19, r1
    1960:	80 f4       	brcc	.+32     	; 0x1982 <malloc+0xa0>
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	61 15       	cp	r22, r1
    1968:	71 05       	cpc	r23, r1
    196a:	21 f0       	breq	.+8      	; 0x1974 <malloc+0x92>
    196c:	fb 01       	movw	r30, r22
    196e:	93 83       	std	Z+3, r25	; 0x03
    1970:	82 83       	std	Z+2, r24	; 0x02
    1972:	04 c0       	rjmp	.+8      	; 0x197c <malloc+0x9a>
    1974:	90 93 bf 03 	sts	0x03BF, r25
    1978:	80 93 be 03 	sts	0x03BE, r24
    197c:	fe 01       	movw	r30, r28
    197e:	32 96       	adiw	r30, 0x02	; 2
    1980:	44 c0       	rjmp	.+136    	; 0x1a0a <malloc+0x128>
    1982:	fe 01       	movw	r30, r28
    1984:	e2 0f       	add	r30, r18
    1986:	f3 1f       	adc	r31, r19
    1988:	81 93       	st	Z+, r24
    198a:	91 93       	st	Z+, r25
    198c:	22 50       	subi	r18, 0x02	; 2
    198e:	31 09       	sbc	r19, r1
    1990:	39 83       	std	Y+1, r19	; 0x01
    1992:	28 83       	st	Y, r18
    1994:	3a c0       	rjmp	.+116    	; 0x1a0a <malloc+0x128>
    1996:	20 91 bc 03 	lds	r18, 0x03BC
    199a:	30 91 bd 03 	lds	r19, 0x03BD
    199e:	23 2b       	or	r18, r19
    19a0:	41 f4       	brne	.+16     	; 0x19b2 <malloc+0xd0>
    19a2:	20 91 02 02 	lds	r18, 0x0202
    19a6:	30 91 03 02 	lds	r19, 0x0203
    19aa:	30 93 bd 03 	sts	0x03BD, r19
    19ae:	20 93 bc 03 	sts	0x03BC, r18
    19b2:	20 91 00 02 	lds	r18, 0x0200
    19b6:	30 91 01 02 	lds	r19, 0x0201
    19ba:	21 15       	cp	r18, r1
    19bc:	31 05       	cpc	r19, r1
    19be:	41 f4       	brne	.+16     	; 0x19d0 <malloc+0xee>
    19c0:	2d b7       	in	r18, 0x3d	; 61
    19c2:	3e b7       	in	r19, 0x3e	; 62
    19c4:	40 91 04 02 	lds	r20, 0x0204
    19c8:	50 91 05 02 	lds	r21, 0x0205
    19cc:	24 1b       	sub	r18, r20
    19ce:	35 0b       	sbc	r19, r21
    19d0:	e0 91 bc 03 	lds	r30, 0x03BC
    19d4:	f0 91 bd 03 	lds	r31, 0x03BD
    19d8:	e2 17       	cp	r30, r18
    19da:	f3 07       	cpc	r31, r19
    19dc:	a0 f4       	brcc	.+40     	; 0x1a06 <malloc+0x124>
    19de:	2e 1b       	sub	r18, r30
    19e0:	3f 0b       	sbc	r19, r31
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	78 f0       	brcs	.+30     	; 0x1a06 <malloc+0x124>
    19e8:	ac 01       	movw	r20, r24
    19ea:	4e 5f       	subi	r20, 0xFE	; 254
    19ec:	5f 4f       	sbci	r21, 0xFF	; 255
    19ee:	24 17       	cp	r18, r20
    19f0:	35 07       	cpc	r19, r21
    19f2:	48 f0       	brcs	.+18     	; 0x1a06 <malloc+0x124>
    19f4:	4e 0f       	add	r20, r30
    19f6:	5f 1f       	adc	r21, r31
    19f8:	50 93 bd 03 	sts	0x03BD, r21
    19fc:	40 93 bc 03 	sts	0x03BC, r20
    1a00:	81 93       	st	Z+, r24
    1a02:	91 93       	st	Z+, r25
    1a04:	02 c0       	rjmp	.+4      	; 0x1a0a <malloc+0x128>
    1a06:	e0 e0       	ldi	r30, 0x00	; 0
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	cf 01       	movw	r24, r30
    1a0c:	df 91       	pop	r29
    1a0e:	cf 91       	pop	r28
    1a10:	08 95       	ret

00001a12 <free>:
    1a12:	cf 93       	push	r28
    1a14:	df 93       	push	r29
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	09 f4       	brne	.+2      	; 0x1a1c <free+0xa>
    1a1a:	87 c0       	rjmp	.+270    	; 0x1b2a <free+0x118>
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	32 97       	sbiw	r30, 0x02	; 2
    1a20:	13 82       	std	Z+3, r1	; 0x03
    1a22:	12 82       	std	Z+2, r1	; 0x02
    1a24:	c0 91 be 03 	lds	r28, 0x03BE
    1a28:	d0 91 bf 03 	lds	r29, 0x03BF
    1a2c:	20 97       	sbiw	r28, 0x00	; 0
    1a2e:	81 f4       	brne	.+32     	; 0x1a50 <free+0x3e>
    1a30:	20 81       	ld	r18, Z
    1a32:	31 81       	ldd	r19, Z+1	; 0x01
    1a34:	28 0f       	add	r18, r24
    1a36:	39 1f       	adc	r19, r25
    1a38:	80 91 bc 03 	lds	r24, 0x03BC
    1a3c:	90 91 bd 03 	lds	r25, 0x03BD
    1a40:	82 17       	cp	r24, r18
    1a42:	93 07       	cpc	r25, r19
    1a44:	79 f5       	brne	.+94     	; 0x1aa4 <free+0x92>
    1a46:	f0 93 bd 03 	sts	0x03BD, r31
    1a4a:	e0 93 bc 03 	sts	0x03BC, r30
    1a4e:	6d c0       	rjmp	.+218    	; 0x1b2a <free+0x118>
    1a50:	de 01       	movw	r26, r28
    1a52:	20 e0       	ldi	r18, 0x00	; 0
    1a54:	30 e0       	ldi	r19, 0x00	; 0
    1a56:	ae 17       	cp	r26, r30
    1a58:	bf 07       	cpc	r27, r31
    1a5a:	50 f4       	brcc	.+20     	; 0x1a70 <free+0x5e>
    1a5c:	12 96       	adiw	r26, 0x02	; 2
    1a5e:	4d 91       	ld	r20, X+
    1a60:	5c 91       	ld	r21, X
    1a62:	13 97       	sbiw	r26, 0x03	; 3
    1a64:	9d 01       	movw	r18, r26
    1a66:	41 15       	cp	r20, r1
    1a68:	51 05       	cpc	r21, r1
    1a6a:	09 f1       	breq	.+66     	; 0x1aae <free+0x9c>
    1a6c:	da 01       	movw	r26, r20
    1a6e:	f3 cf       	rjmp	.-26     	; 0x1a56 <free+0x44>
    1a70:	b3 83       	std	Z+3, r27	; 0x03
    1a72:	a2 83       	std	Z+2, r26	; 0x02
    1a74:	40 81       	ld	r20, Z
    1a76:	51 81       	ldd	r21, Z+1	; 0x01
    1a78:	84 0f       	add	r24, r20
    1a7a:	95 1f       	adc	r25, r21
    1a7c:	8a 17       	cp	r24, r26
    1a7e:	9b 07       	cpc	r25, r27
    1a80:	71 f4       	brne	.+28     	; 0x1a9e <free+0x8c>
    1a82:	8d 91       	ld	r24, X+
    1a84:	9c 91       	ld	r25, X
    1a86:	11 97       	sbiw	r26, 0x01	; 1
    1a88:	84 0f       	add	r24, r20
    1a8a:	95 1f       	adc	r25, r21
    1a8c:	02 96       	adiw	r24, 0x02	; 2
    1a8e:	91 83       	std	Z+1, r25	; 0x01
    1a90:	80 83       	st	Z, r24
    1a92:	12 96       	adiw	r26, 0x02	; 2
    1a94:	8d 91       	ld	r24, X+
    1a96:	9c 91       	ld	r25, X
    1a98:	13 97       	sbiw	r26, 0x03	; 3
    1a9a:	93 83       	std	Z+3, r25	; 0x03
    1a9c:	82 83       	std	Z+2, r24	; 0x02
    1a9e:	21 15       	cp	r18, r1
    1aa0:	31 05       	cpc	r19, r1
    1aa2:	29 f4       	brne	.+10     	; 0x1aae <free+0x9c>
    1aa4:	f0 93 bf 03 	sts	0x03BF, r31
    1aa8:	e0 93 be 03 	sts	0x03BE, r30
    1aac:	3e c0       	rjmp	.+124    	; 0x1b2a <free+0x118>
    1aae:	d9 01       	movw	r26, r18
    1ab0:	13 96       	adiw	r26, 0x03	; 3
    1ab2:	fc 93       	st	X, r31
    1ab4:	ee 93       	st	-X, r30
    1ab6:	12 97       	sbiw	r26, 0x02	; 2
    1ab8:	4d 91       	ld	r20, X+
    1aba:	5d 91       	ld	r21, X+
    1abc:	a4 0f       	add	r26, r20
    1abe:	b5 1f       	adc	r27, r21
    1ac0:	ea 17       	cp	r30, r26
    1ac2:	fb 07       	cpc	r31, r27
    1ac4:	79 f4       	brne	.+30     	; 0x1ae4 <free+0xd2>
    1ac6:	80 81       	ld	r24, Z
    1ac8:	91 81       	ldd	r25, Z+1	; 0x01
    1aca:	84 0f       	add	r24, r20
    1acc:	95 1f       	adc	r25, r21
    1ace:	02 96       	adiw	r24, 0x02	; 2
    1ad0:	d9 01       	movw	r26, r18
    1ad2:	11 96       	adiw	r26, 0x01	; 1
    1ad4:	9c 93       	st	X, r25
    1ad6:	8e 93       	st	-X, r24
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	13 96       	adiw	r26, 0x03	; 3
    1ade:	9c 93       	st	X, r25
    1ae0:	8e 93       	st	-X, r24
    1ae2:	12 97       	sbiw	r26, 0x02	; 2
    1ae4:	e0 e0       	ldi	r30, 0x00	; 0
    1ae6:	f0 e0       	ldi	r31, 0x00	; 0
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	9b 81       	ldd	r25, Y+3	; 0x03
    1aec:	00 97       	sbiw	r24, 0x00	; 0
    1aee:	19 f0       	breq	.+6      	; 0x1af6 <free+0xe4>
    1af0:	fe 01       	movw	r30, r28
    1af2:	ec 01       	movw	r28, r24
    1af4:	f9 cf       	rjmp	.-14     	; 0x1ae8 <free+0xd6>
    1af6:	ce 01       	movw	r24, r28
    1af8:	02 96       	adiw	r24, 0x02	; 2
    1afa:	28 81       	ld	r18, Y
    1afc:	39 81       	ldd	r19, Y+1	; 0x01
    1afe:	82 0f       	add	r24, r18
    1b00:	93 1f       	adc	r25, r19
    1b02:	20 91 bc 03 	lds	r18, 0x03BC
    1b06:	30 91 bd 03 	lds	r19, 0x03BD
    1b0a:	28 17       	cp	r18, r24
    1b0c:	39 07       	cpc	r19, r25
    1b0e:	69 f4       	brne	.+26     	; 0x1b2a <free+0x118>
    1b10:	30 97       	sbiw	r30, 0x00	; 0
    1b12:	29 f4       	brne	.+10     	; 0x1b1e <free+0x10c>
    1b14:	10 92 bf 03 	sts	0x03BF, r1
    1b18:	10 92 be 03 	sts	0x03BE, r1
    1b1c:	02 c0       	rjmp	.+4      	; 0x1b22 <free+0x110>
    1b1e:	13 82       	std	Z+3, r1	; 0x03
    1b20:	12 82       	std	Z+2, r1	; 0x02
    1b22:	d0 93 bd 03 	sts	0x03BD, r29
    1b26:	c0 93 bc 03 	sts	0x03BC, r28
    1b2a:	df 91       	pop	r29
    1b2c:	cf 91       	pop	r28
    1b2e:	08 95       	ret

00001b30 <strnlen_P>:
    1b30:	fc 01       	movw	r30, r24
    1b32:	05 90       	lpm	r0, Z+
    1b34:	61 50       	subi	r22, 0x01	; 1
    1b36:	70 40       	sbci	r23, 0x00	; 0
    1b38:	01 10       	cpse	r0, r1
    1b3a:	d8 f7       	brcc	.-10     	; 0x1b32 <strnlen_P+0x2>
    1b3c:	80 95       	com	r24
    1b3e:	90 95       	com	r25
    1b40:	8e 0f       	add	r24, r30
    1b42:	9f 1f       	adc	r25, r31
    1b44:	08 95       	ret

00001b46 <memset>:
    1b46:	dc 01       	movw	r26, r24
    1b48:	01 c0       	rjmp	.+2      	; 0x1b4c <memset+0x6>
    1b4a:	6d 93       	st	X+, r22
    1b4c:	41 50       	subi	r20, 0x01	; 1
    1b4e:	50 40       	sbci	r21, 0x00	; 0
    1b50:	e0 f7       	brcc	.-8      	; 0x1b4a <memset+0x4>
    1b52:	08 95       	ret

00001b54 <strnlen>:
    1b54:	fc 01       	movw	r30, r24
    1b56:	61 50       	subi	r22, 0x01	; 1
    1b58:	70 40       	sbci	r23, 0x00	; 0
    1b5a:	01 90       	ld	r0, Z+
    1b5c:	01 10       	cpse	r0, r1
    1b5e:	d8 f7       	brcc	.-10     	; 0x1b56 <strnlen+0x2>
    1b60:	80 95       	com	r24
    1b62:	90 95       	com	r25
    1b64:	8e 0f       	add	r24, r30
    1b66:	9f 1f       	adc	r25, r31
    1b68:	08 95       	ret

00001b6a <fputc>:
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	18 2f       	mov	r17, r24
    1b74:	09 2f       	mov	r16, r25
    1b76:	eb 01       	movw	r28, r22
    1b78:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7a:	81 fd       	sbrc	r24, 1
    1b7c:	03 c0       	rjmp	.+6      	; 0x1b84 <fputc+0x1a>
    1b7e:	8f ef       	ldi	r24, 0xFF	; 255
    1b80:	9f ef       	ldi	r25, 0xFF	; 255
    1b82:	20 c0       	rjmp	.+64     	; 0x1bc4 <fputc+0x5a>
    1b84:	82 ff       	sbrs	r24, 2
    1b86:	10 c0       	rjmp	.+32     	; 0x1ba8 <fputc+0x3e>
    1b88:	4e 81       	ldd	r20, Y+6	; 0x06
    1b8a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b8c:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8e:	3d 81       	ldd	r19, Y+5	; 0x05
    1b90:	42 17       	cp	r20, r18
    1b92:	53 07       	cpc	r21, r19
    1b94:	7c f4       	brge	.+30     	; 0x1bb4 <fputc+0x4a>
    1b96:	e8 81       	ld	r30, Y
    1b98:	f9 81       	ldd	r31, Y+1	; 0x01
    1b9a:	9f 01       	movw	r18, r30
    1b9c:	2f 5f       	subi	r18, 0xFF	; 255
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	39 83       	std	Y+1, r19	; 0x01
    1ba2:	28 83       	st	Y, r18
    1ba4:	10 83       	st	Z, r17
    1ba6:	06 c0       	rjmp	.+12     	; 0x1bb4 <fputc+0x4a>
    1ba8:	e8 85       	ldd	r30, Y+8	; 0x08
    1baa:	f9 85       	ldd	r31, Y+9	; 0x09
    1bac:	81 2f       	mov	r24, r17
    1bae:	19 95       	eicall
    1bb0:	89 2b       	or	r24, r25
    1bb2:	29 f7       	brne	.-54     	; 0x1b7e <fputc+0x14>
    1bb4:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb6:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb8:	2f 5f       	subi	r18, 0xFF	; 255
    1bba:	3f 4f       	sbci	r19, 0xFF	; 255
    1bbc:	3f 83       	std	Y+7, r19	; 0x07
    1bbe:	2e 83       	std	Y+6, r18	; 0x06
    1bc0:	81 2f       	mov	r24, r17
    1bc2:	90 2f       	mov	r25, r16
    1bc4:	df 91       	pop	r29
    1bc6:	cf 91       	pop	r28
    1bc8:	1f 91       	pop	r17
    1bca:	0f 91       	pop	r16
    1bcc:	08 95       	ret

00001bce <__ultoa_invert>:
    1bce:	fa 01       	movw	r30, r20
    1bd0:	aa 27       	eor	r26, r26
    1bd2:	28 30       	cpi	r18, 0x08	; 8
    1bd4:	51 f1       	breq	.+84     	; 0x1c2a <__ultoa_invert+0x5c>
    1bd6:	20 31       	cpi	r18, 0x10	; 16
    1bd8:	81 f1       	breq	.+96     	; 0x1c3a <__ultoa_invert+0x6c>
    1bda:	e8 94       	clt
    1bdc:	6f 93       	push	r22
    1bde:	6e 7f       	andi	r22, 0xFE	; 254
    1be0:	6e 5f       	subi	r22, 0xFE	; 254
    1be2:	7f 4f       	sbci	r23, 0xFF	; 255
    1be4:	8f 4f       	sbci	r24, 0xFF	; 255
    1be6:	9f 4f       	sbci	r25, 0xFF	; 255
    1be8:	af 4f       	sbci	r26, 0xFF	; 255
    1bea:	b1 e0       	ldi	r27, 0x01	; 1
    1bec:	3e d0       	rcall	.+124    	; 0x1c6a <__ultoa_invert+0x9c>
    1bee:	b4 e0       	ldi	r27, 0x04	; 4
    1bf0:	3c d0       	rcall	.+120    	; 0x1c6a <__ultoa_invert+0x9c>
    1bf2:	67 0f       	add	r22, r23
    1bf4:	78 1f       	adc	r23, r24
    1bf6:	89 1f       	adc	r24, r25
    1bf8:	9a 1f       	adc	r25, r26
    1bfa:	a1 1d       	adc	r26, r1
    1bfc:	68 0f       	add	r22, r24
    1bfe:	79 1f       	adc	r23, r25
    1c00:	8a 1f       	adc	r24, r26
    1c02:	91 1d       	adc	r25, r1
    1c04:	a1 1d       	adc	r26, r1
    1c06:	6a 0f       	add	r22, r26
    1c08:	71 1d       	adc	r23, r1
    1c0a:	81 1d       	adc	r24, r1
    1c0c:	91 1d       	adc	r25, r1
    1c0e:	a1 1d       	adc	r26, r1
    1c10:	20 d0       	rcall	.+64     	; 0x1c52 <__ultoa_invert+0x84>
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <__ultoa_invert+0x48>
    1c14:	68 94       	set
    1c16:	3f 91       	pop	r19
    1c18:	2a e0       	ldi	r18, 0x0A	; 10
    1c1a:	26 9f       	mul	r18, r22
    1c1c:	11 24       	eor	r1, r1
    1c1e:	30 19       	sub	r19, r0
    1c20:	30 5d       	subi	r19, 0xD0	; 208
    1c22:	31 93       	st	Z+, r19
    1c24:	de f6       	brtc	.-74     	; 0x1bdc <__ultoa_invert+0xe>
    1c26:	cf 01       	movw	r24, r30
    1c28:	08 95       	ret
    1c2a:	46 2f       	mov	r20, r22
    1c2c:	47 70       	andi	r20, 0x07	; 7
    1c2e:	40 5d       	subi	r20, 0xD0	; 208
    1c30:	41 93       	st	Z+, r20
    1c32:	b3 e0       	ldi	r27, 0x03	; 3
    1c34:	0f d0       	rcall	.+30     	; 0x1c54 <__ultoa_invert+0x86>
    1c36:	c9 f7       	brne	.-14     	; 0x1c2a <__ultoa_invert+0x5c>
    1c38:	f6 cf       	rjmp	.-20     	; 0x1c26 <__ultoa_invert+0x58>
    1c3a:	46 2f       	mov	r20, r22
    1c3c:	4f 70       	andi	r20, 0x0F	; 15
    1c3e:	40 5d       	subi	r20, 0xD0	; 208
    1c40:	4a 33       	cpi	r20, 0x3A	; 58
    1c42:	18 f0       	brcs	.+6      	; 0x1c4a <__ultoa_invert+0x7c>
    1c44:	49 5d       	subi	r20, 0xD9	; 217
    1c46:	31 fd       	sbrc	r19, 1
    1c48:	40 52       	subi	r20, 0x20	; 32
    1c4a:	41 93       	st	Z+, r20
    1c4c:	02 d0       	rcall	.+4      	; 0x1c52 <__ultoa_invert+0x84>
    1c4e:	a9 f7       	brne	.-22     	; 0x1c3a <__ultoa_invert+0x6c>
    1c50:	ea cf       	rjmp	.-44     	; 0x1c26 <__ultoa_invert+0x58>
    1c52:	b4 e0       	ldi	r27, 0x04	; 4
    1c54:	a6 95       	lsr	r26
    1c56:	97 95       	ror	r25
    1c58:	87 95       	ror	r24
    1c5a:	77 95       	ror	r23
    1c5c:	67 95       	ror	r22
    1c5e:	ba 95       	dec	r27
    1c60:	c9 f7       	brne	.-14     	; 0x1c54 <__ultoa_invert+0x86>
    1c62:	00 97       	sbiw	r24, 0x00	; 0
    1c64:	61 05       	cpc	r22, r1
    1c66:	71 05       	cpc	r23, r1
    1c68:	08 95       	ret
    1c6a:	9b 01       	movw	r18, r22
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	0a 2e       	mov	r0, r26
    1c70:	06 94       	lsr	r0
    1c72:	57 95       	ror	r21
    1c74:	47 95       	ror	r20
    1c76:	37 95       	ror	r19
    1c78:	27 95       	ror	r18
    1c7a:	ba 95       	dec	r27
    1c7c:	c9 f7       	brne	.-14     	; 0x1c70 <__ultoa_invert+0xa2>
    1c7e:	62 0f       	add	r22, r18
    1c80:	73 1f       	adc	r23, r19
    1c82:	84 1f       	adc	r24, r20
    1c84:	95 1f       	adc	r25, r21
    1c86:	a0 1d       	adc	r26, r0
    1c88:	08 95       	ret

00001c8a <_exit>:
    1c8a:	f8 94       	cli

00001c8c <__stop_program>:
    1c8c:	ff cf       	rjmp	.-2      	; 0x1c8c <__stop_program>
