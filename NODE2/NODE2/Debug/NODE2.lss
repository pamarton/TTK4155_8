
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800200  00001cb0  00001d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000071  0080032e  0080032e  00001e72  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001e72  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000003b0  00000000  00000000  00001ece  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002ad0  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012f4  00000000  00000000  00004d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001c41  00000000  00000000  00006042  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000978  00000000  00000000  00007c84  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000aa8  00000000  00000000  000085fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000018c6  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000300  00000000  00000000  0000a96a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	43 c1       	rjmp	.+646    	; 0x29c <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c6       	rjmp	.+3480   	; 0xe36 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	33 c6       	rjmp	.+3174   	; 0xd10 <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	36 07       	cpc	r19, r22
      e6:	88 07       	cpc	r24, r24
      e8:	88 07       	cpc	r24, r24
      ea:	88 07       	cpc	r24, r24
      ec:	88 07       	cpc	r24, r24
      ee:	88 07       	cpc	r24, r24
      f0:	88 07       	cpc	r24, r24
      f2:	88 07       	cpc	r24, r24
      f4:	36 07       	cpc	r19, r22
      f6:	88 07       	cpc	r24, r24
      f8:	88 07       	cpc	r24, r24
      fa:	88 07       	cpc	r24, r24
      fc:	88 07       	cpc	r24, r24
      fe:	88 07       	cpc	r24, r24
     100:	88 07       	cpc	r24, r24
     102:	88 07       	cpc	r24, r24
     104:	38 07       	cpc	r19, r24
     106:	88 07       	cpc	r24, r24
     108:	88 07       	cpc	r24, r24
     10a:	88 07       	cpc	r24, r24
     10c:	88 07       	cpc	r24, r24
     10e:	88 07       	cpc	r24, r24
     110:	88 07       	cpc	r24, r24
     112:	88 07       	cpc	r24, r24
     114:	88 07       	cpc	r24, r24
     116:	88 07       	cpc	r24, r24
     118:	88 07       	cpc	r24, r24
     11a:	88 07       	cpc	r24, r24
     11c:	88 07       	cpc	r24, r24
     11e:	88 07       	cpc	r24, r24
     120:	88 07       	cpc	r24, r24
     122:	88 07       	cpc	r24, r24
     124:	38 07       	cpc	r19, r24
     126:	88 07       	cpc	r24, r24
     128:	88 07       	cpc	r24, r24
     12a:	88 07       	cpc	r24, r24
     12c:	88 07       	cpc	r24, r24
     12e:	88 07       	cpc	r24, r24
     130:	88 07       	cpc	r24, r24
     132:	88 07       	cpc	r24, r24
     134:	88 07       	cpc	r24, r24
     136:	88 07       	cpc	r24, r24
     138:	88 07       	cpc	r24, r24
     13a:	88 07       	cpc	r24, r24
     13c:	88 07       	cpc	r24, r24
     13e:	88 07       	cpc	r24, r24
     140:	88 07       	cpc	r24, r24
     142:	88 07       	cpc	r24, r24
     144:	84 07       	cpc	r24, r20
     146:	88 07       	cpc	r24, r24
     148:	88 07       	cpc	r24, r24
     14a:	88 07       	cpc	r24, r24
     14c:	88 07       	cpc	r24, r24
     14e:	88 07       	cpc	r24, r24
     150:	88 07       	cpc	r24, r24
     152:	88 07       	cpc	r24, r24
     154:	61 07       	cpc	r22, r17
     156:	88 07       	cpc	r24, r24
     158:	88 07       	cpc	r24, r24
     15a:	88 07       	cpc	r24, r24
     15c:	88 07       	cpc	r24, r24
     15e:	88 07       	cpc	r24, r24
     160:	88 07       	cpc	r24, r24
     162:	88 07       	cpc	r24, r24
     164:	88 07       	cpc	r24, r24
     166:	88 07       	cpc	r24, r24
     168:	88 07       	cpc	r24, r24
     16a:	88 07       	cpc	r24, r24
     16c:	88 07       	cpc	r24, r24
     16e:	88 07       	cpc	r24, r24
     170:	88 07       	cpc	r24, r24
     172:	88 07       	cpc	r24, r24
     174:	55 07       	cpc	r21, r21
     176:	88 07       	cpc	r24, r24
     178:	88 07       	cpc	r24, r24
     17a:	88 07       	cpc	r24, r24
     17c:	88 07       	cpc	r24, r24
     17e:	88 07       	cpc	r24, r24
     180:	88 07       	cpc	r24, r24
     182:	88 07       	cpc	r24, r24
     184:	73 07       	cpc	r23, r19

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	13 e0       	ldi	r17, 0x03	; 3
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e0 eb       	ldi	r30, 0xB0	; 176
     19e:	fc e1       	ldi	r31, 0x1C	; 28
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	ae 32       	cpi	r26, 0x2E	; 46
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	ae e2       	ldi	r26, 0x2E	; 46
     1b4:	b3 e0       	ldi	r27, 0x03	; 3
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	af 39       	cpi	r26, 0x9F	; 159
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	f3 d4       	rcall	.+2534   	; 0xba8 <main>
     1c2:	0c 94 56 0e 	jmp	0x1cac	; 0x1cac <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <CAN_message_receive>:
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}
     1c8:	8a e3       	ldi	r24, 0x3A	; 58
     1ca:	93 e0       	ldi	r25, 0x03	; 3
     1cc:	08 95       	ret

000001ce <CAN_construct_message>:
     1ce:	90 93 30 03 	sts	0x0330, r25
     1d2:	80 93 2f 03 	sts	0x032F, r24
     1d6:	60 93 31 03 	sts	0x0331, r22
     1da:	66 23       	and	r22, r22
     1dc:	41 f0       	breq	.+16     	; 0x1ee <CAN_construct_message+0x20>
     1de:	82 e3       	ldi	r24, 0x32	; 50
     1e0:	93 e0       	ldi	r25, 0x03	; 3
     1e2:	fc 01       	movw	r30, r24
     1e4:	11 92       	st	Z+, r1
     1e6:	2e 2f       	mov	r18, r30
     1e8:	28 1b       	sub	r18, r24
     1ea:	26 17       	cp	r18, r22
     1ec:	d8 f3       	brcs	.-10     	; 0x1e4 <CAN_construct_message+0x16>
     1ee:	08 95       	ret

000001f0 <CAN_print>:
		return 1;
	}
	return 0;
}

void CAN_print(CAN_message_t message){
     1f0:	cf 92       	push	r12
     1f2:	df 92       	push	r13
     1f4:	ef 92       	push	r14
     1f6:	ff 92       	push	r15
     1f8:	0f 93       	push	r16
     1fa:	1f 93       	push	r17
     1fc:	cf 93       	push	r28
     1fe:	df 93       	push	r29
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	2b 97       	sbiw	r28, 0x0b	; 11
     206:	0f b6       	in	r0, 0x3f	; 63
     208:	f8 94       	cli
     20a:	de bf       	out	0x3e, r29	; 62
     20c:	0f be       	out	0x3f, r0	; 63
     20e:	cd bf       	out	0x3d, r28	; 61
     210:	e9 82       	std	Y+1, r14	; 0x01
     212:	fa 82       	std	Y+2, r15	; 0x02
     214:	c0 2e       	mov	r12, r16
     216:	0b 83       	std	Y+3, r16	; 0x03
     218:	1c 83       	std	Y+4, r17	; 0x04
     21a:	2d 83       	std	Y+5, r18	; 0x05
     21c:	3e 83       	std	Y+6, r19	; 0x06
     21e:	4f 83       	std	Y+7, r20	; 0x07
     220:	58 87       	std	Y+8, r21	; 0x08
     222:	69 87       	std	Y+9, r22	; 0x09
     224:	7a 87       	std	Y+10, r23	; 0x0a
     226:	8b 87       	std	Y+11, r24	; 0x0b
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
     228:	1f 92       	push	r1
     22a:	0f 93       	push	r16
     22c:	8a 81       	ldd	r24, Y+2	; 0x02
     22e:	8f 93       	push	r24
     230:	89 81       	ldd	r24, Y+1	; 0x01
     232:	8f 93       	push	r24
     234:	87 e0       	ldi	r24, 0x07	; 7
     236:	92 e0       	ldi	r25, 0x02	; 2
     238:	9f 93       	push	r25
     23a:	8f 93       	push	r24
     23c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <printf>
	for(uint8_t i = 0; i < message.length; i++){
     240:	0f 90       	pop	r0
     242:	0f 90       	pop	r0
     244:	0f 90       	pop	r0
     246:	0f 90       	pop	r0
     248:	0f 90       	pop	r0
     24a:	0f 90       	pop	r0
     24c:	00 23       	and	r16, r16
     24e:	b9 f0       	breq	.+46     	; 0x27e <CAN_print+0x8e>
     250:	7e 01       	movw	r14, r28
     252:	84 e0       	ldi	r24, 0x04	; 4
     254:	e8 0e       	add	r14, r24
     256:	f1 1c       	adc	r15, r1
     258:	d1 2c       	mov	r13, r1
		printf("%i\t",message.data[i]);
     25a:	0b e1       	ldi	r16, 0x1B	; 27
     25c:	12 e0       	ldi	r17, 0x02	; 2
     25e:	f7 01       	movw	r30, r14
     260:	81 91       	ld	r24, Z+
     262:	7f 01       	movw	r14, r30
     264:	1f 92       	push	r1
     266:	8f 93       	push	r24
     268:	1f 93       	push	r17
     26a:	0f 93       	push	r16
     26c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <printf>
	return 0;
}

void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
     270:	d3 94       	inc	r13
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	0f 90       	pop	r0
     27a:	dc 10       	cpse	r13, r12
     27c:	f0 cf       	rjmp	.-32     	; 0x25e <CAN_print+0x6e>
		printf("%i\t",message.data[i]);
	}
}
     27e:	2b 96       	adiw	r28, 0x0b	; 11
     280:	0f b6       	in	r0, 0x3f	; 63
     282:	f8 94       	cli
     284:	de bf       	out	0x3e, r29	; 62
     286:	0f be       	out	0x3f, r0	; 63
     288:	cd bf       	out	0x3d, r28	; 61
     28a:	df 91       	pop	r29
     28c:	cf 91       	pop	r28
     28e:	1f 91       	pop	r17
     290:	0f 91       	pop	r16
     292:	ff 90       	pop	r15
     294:	ef 90       	pop	r14
     296:	df 90       	pop	r13
     298:	cf 90       	pop	r12
     29a:	08 95       	ret

0000029c <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     29c:	1f 92       	push	r1
     29e:	0f 92       	push	r0
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	0f 92       	push	r0
     2a4:	11 24       	eor	r1, r1
     2a6:	8f 93       	push	r24
	receive_flag = 1;
     2a8:	81 e0       	ldi	r24, 0x01	; 1
     2aa:	80 93 2e 03 	sts	0x032E, r24
}
     2ae:	8f 91       	pop	r24
     2b0:	0f 90       	pop	r0
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	0f 90       	pop	r0
     2b6:	1f 90       	pop	r1
     2b8:	18 95       	reti

000002ba <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
     2ba:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     2bc:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     2be:	ea e6       	ldi	r30, 0x6A	; 106
     2c0:	f0 e0       	ldi	r31, 0x00	; 0
     2c2:	80 81       	ld	r24, Z
     2c4:	8e 7f       	andi	r24, 0xFE	; 254
     2c6:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     2c8:	80 81       	ld	r24, Z
     2ca:	82 60       	ori	r24, 0x02	; 2
     2cc:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     2ce:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
	#endif
	sei();
     2d0:	78 94       	sei
     2d2:	08 95       	ret

000002d4 <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     2d4:	5f d1       	rcall	.+702    	; 0x594 <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     2d6:	68 e0       	ldi	r22, 0x08	; 8
     2d8:	88 e2       	ldi	r24, 0x28	; 40
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	78 df       	rcall	.-272    	; 0x1ce <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     2de:	4f ef       	ldi	r20, 0xFF	; 255
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	64 e6       	ldi	r22, 0x64	; 100
     2e4:	80 e6       	ldi	r24, 0x60	; 96
     2e6:	3d d1       	rcall	.+634    	; 0x562 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     2e8:	4f ef       	ldi	r20, 0xFF	; 255
     2ea:	50 e0       	ldi	r21, 0x00	; 0
     2ec:	64 e6       	ldi	r22, 0x64	; 100
     2ee:	80 e7       	ldi	r24, 0x70	; 112
     2f0:	38 d1       	rcall	.+624    	; 0x562 <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     2f2:	41 e0       	ldi	r20, 0x01	; 1
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	61 e0       	ldi	r22, 0x01	; 1
     2f8:	8b e2       	ldi	r24, 0x2B	; 43
     2fa:	33 d1       	rcall	.+614    	; 0x562 <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
     2fc:	41 e0       	ldi	r20, 0x01	; 1
     2fe:	50 e0       	ldi	r21, 0x00	; 0
     300:	62 e0       	ldi	r22, 0x02	; 2
     302:	8b e2       	ldi	r24, 0x2B	; 43
     304:	2e d1       	rcall	.+604    	; 0x562 <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	60 ee       	ldi	r22, 0xE0	; 224
     30c:	8f e0       	ldi	r24, 0x0F	; 15
     30e:	29 d1       	rcall	.+594    	; 0x562 <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     310:	d4 cf       	rjmp	.-88     	; 0x2ba <CAN_interrupt_setup>
     312:	08 95       	ret

00000314 <CAN_reception_complete>:

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     314:	04 c0       	rjmp	.+8      	; 0x31e <CAN_reception_complete+0xa>
		printf("CAN_reception_complete is stuck\n");
     316:	8f e1       	ldi	r24, 0x1F	; 31
     318:	92 e0       	ldi	r25, 0x02	; 2
     31a:	0e 94 4d 0a 	call	0x149a	; 0x149a <puts>

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     31e:	8c e2       	ldi	r24, 0x2C	; 44
     320:	02 d1       	rcall	.+516    	; 0x526 <MCP2515_read>
     322:	80 fd       	sbrc	r24, 0
     324:	04 c0       	rjmp	.+8      	; 0x32e <CAN_reception_complete+0x1a>
     326:	8c e2       	ldi	r24, 0x2C	; 44
     328:	fe d0       	rcall	.+508    	; 0x526 <MCP2515_read>
     32a:	81 ff       	sbrs	r24, 1
     32c:	f4 cf       	rjmp	.-24     	; 0x316 <CAN_reception_complete+0x2>
		};
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     32e:	8c e2       	ldi	r24, 0x2C	; 44
     330:	fa d0       	rcall	.+500    	; 0x526 <MCP2515_read>
     332:	80 ff       	sbrs	r24, 0
     334:	07 c0       	rjmp	.+14     	; 0x344 <CAN_reception_complete+0x30>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	50 e0       	ldi	r21, 0x00	; 0
     33a:	61 e0       	ldi	r22, 0x01	; 1
     33c:	8c e2       	ldi	r24, 0x2C	; 44
     33e:	11 d1       	rcall	.+546    	; 0x562 <MCP2515_bit_modify>
		return 0;
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	08 95       	ret
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     344:	8c e2       	ldi	r24, 0x2C	; 44
     346:	ef d0       	rcall	.+478    	; 0x526 <MCP2515_read>
     348:	81 ff       	sbrs	r24, 1
     34a:	07 c0       	rjmp	.+14     	; 0x35a <CAN_reception_complete+0x46>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     34c:	40 e0       	ldi	r20, 0x00	; 0
     34e:	50 e0       	ldi	r21, 0x00	; 0
     350:	62 e0       	ldi	r22, 0x02	; 2
     352:	8c e2       	ldi	r24, 0x2C	; 44
     354:	06 d1       	rcall	.+524    	; 0x562 <MCP2515_bit_modify>
		return 1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	08 95       	ret
	}
	return -1;
     35a:	8f ef       	ldi	r24, 0xFF	; 255
}
     35c:	08 95       	ret

0000035e <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     35e:	ef 92       	push	r14
     360:	ff 92       	push	r15
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
	if(receive_flag){
     36a:	80 91 2e 03 	lds	r24, 0x032E
     36e:	88 23       	and	r24, r24
     370:	09 f4       	brne	.+2      	; 0x374 <CAN_data_receive+0x16>
     372:	54 c0       	rjmp	.+168    	; 0x41c <CAN_data_receive+0xbe>
		receive_flag = 0;
     374:	10 92 2e 03 	sts	0x032E, r1
		uint8_t n = CAN_reception_complete();
     378:	cd df       	rcall	.-102    	; 0x314 <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     37a:	18 2f       	mov	r17, r24
     37c:	12 95       	swap	r17
     37e:	10 7f       	andi	r17, 0xF0	; 240
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     380:	81 e6       	ldi	r24, 0x61	; 97
     382:	81 0f       	add	r24, r17
     384:	d0 d0       	rcall	.+416    	; 0x526 <MCP2515_read>
     386:	ec 01       	movw	r28, r24
     388:	82 e6       	ldi	r24, 0x62	; 98
     38a:	81 0f       	add	r24, r17
     38c:	cc d0       	rcall	.+408    	; 0x526 <MCP2515_read>
uint8_t CAN_data_receive(void) {
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     38e:	82 95       	swap	r24
     390:	86 95       	lsr	r24
     392:	87 70       	andi	r24, 0x07	; 7
     394:	dd 27       	eor	r29, r29
     396:	cc 0f       	add	r28, r28
     398:	dd 1f       	adc	r29, r29
     39a:	cc 0f       	add	r28, r28
     39c:	dd 1f       	adc	r29, r29
     39e:	cc 0f       	add	r28, r28
     3a0:	dd 1f       	adc	r29, r29
     3a2:	c8 2b       	or	r28, r24
     3a4:	d0 93 3b 03 	sts	0x033B, r29
     3a8:	c0 93 3a 03 	sts	0x033A, r28
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     3ac:	85 e6       	ldi	r24, 0x65	; 101
     3ae:	81 0f       	add	r24, r17
     3b0:	ba d0       	rcall	.+372    	; 0x526 <MCP2515_read>
	if(receive_flag){
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     3b2:	8f 70       	andi	r24, 0x0F	; 15
     3b4:	80 93 3c 03 	sts	0x033C, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     3b8:	88 23       	and	r24, r24
     3ba:	79 f0       	breq	.+30     	; 0x3da <CAN_data_receive+0x7c>
     3bc:	10 e0       	ldi	r17, 0x00	; 0
     3be:	cc e3       	ldi	r28, 0x3C	; 60
     3c0:	d3 e0       	ldi	r29, 0x03	; 3
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     3c2:	86 e6       	ldi	r24, 0x66	; 102
     3c4:	81 0f       	add	r24, r17
     3c6:	af d0       	rcall	.+350    	; 0x526 <MCP2515_read>
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     3c8:	e1 2f       	mov	r30, r17
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	e6 5c       	subi	r30, 0xC6	; 198
     3ce:	fc 4f       	sbci	r31, 0xFC	; 252
		CAN_print(CAN_send_buffer);
	#endif
}

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
     3d0:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b00000111 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     3d2:	1f 5f       	subi	r17, 0xFF	; 255
     3d4:	88 81       	ld	r24, Y
     3d6:	18 17       	cp	r17, r24
     3d8:	a0 f3       	brcs	.-24     	; 0x3c2 <CAN_data_receive+0x64>
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
			}
		}
		#if 1//UART_ENABLE
			printf("\nRECIVED MESSAGE:");
     3da:	8f e3       	ldi	r24, 0x3F	; 63
     3dc:	92 e0       	ldi	r25, 0x02	; 2
     3de:	9f 93       	push	r25
     3e0:	8f 93       	push	r24
     3e2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <printf>
			CAN_print(CAN_receive_buffer);
     3e6:	e0 90 3a 03 	lds	r14, 0x033A
     3ea:	f0 90 3b 03 	lds	r15, 0x033B
     3ee:	00 91 3c 03 	lds	r16, 0x033C
     3f2:	10 91 3d 03 	lds	r17, 0x033D
     3f6:	20 91 3e 03 	lds	r18, 0x033E
     3fa:	30 91 3f 03 	lds	r19, 0x033F
     3fe:	40 91 40 03 	lds	r20, 0x0340
     402:	50 91 41 03 	lds	r21, 0x0341
     406:	60 91 42 03 	lds	r22, 0x0342
     40a:	70 91 43 03 	lds	r23, 0x0343
     40e:	80 91 44 03 	lds	r24, 0x0344
     412:	ee de       	rcall	.-548    	; 0x1f0 <CAN_print>
		#endif
		return 1;
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	01 c0       	rjmp	.+2      	; 0x41e <CAN_data_receive+0xc0>
	}
	return 0;
     41c:	80 e0       	ldi	r24, 0x00	; 0
}
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	ff 90       	pop	r15
     428:	ef 90       	pop	r14
     42a:	08 95       	ret

0000042c <CAN_transmission_complete>:
		return 1;
	}
	return -1;
}

uint8_t CAN_transmission_complete(uint8_t buffer){
     42c:	cf 93       	push	r28
     42e:	df 93       	push	r29
	while(!(MCP2515_read(MCP_CANINTF) & (MCP_TX0IF << buffer)));
     430:	c4 e0       	ldi	r28, 0x04	; 4
     432:	d0 e0       	ldi	r29, 0x00	; 0
     434:	02 c0       	rjmp	.+4      	; 0x43a <CAN_transmission_complete+0xe>
     436:	cc 0f       	add	r28, r28
     438:	dd 1f       	adc	r29, r29
     43a:	8a 95       	dec	r24
     43c:	e2 f7       	brpl	.-8      	; 0x436 <CAN_transmission_complete+0xa>
     43e:	8c e2       	ldi	r24, 0x2C	; 44
     440:	72 d0       	rcall	.+228    	; 0x526 <MCP2515_read>
     442:	8c 23       	and	r24, r28
     444:	9d 23       	and	r25, r29
     446:	89 2b       	or	r24, r25
     448:	d1 f3       	breq	.-12     	; 0x43e <CAN_transmission_complete+0x12>
	return 1;
}
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	08 95       	ret

00000452 <CAN_send_byte>:
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
}

void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	06 2f       	mov	r16, r22
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
     460:	f6 2e       	mov	r15, r22
     462:	ff 0c       	add	r15, r15
     464:	ff 0c       	add	r15, r15
     466:	ff 0c       	add	r15, r15
     468:	ff 0c       	add	r15, r15
     46a:	28 81       	ld	r18, Y
     46c:	39 81       	ldd	r19, Y+1	; 0x01
     46e:	b9 01       	movw	r22, r18
     470:	75 95       	asr	r23
     472:	67 95       	ror	r22
     474:	75 95       	asr	r23
     476:	67 95       	ror	r22
     478:	75 95       	asr	r23
     47a:	67 95       	ror	r22
     47c:	81 e3       	ldi	r24, 0x31	; 49
     47e:	8f 0d       	add	r24, r15
     480:	43 d0       	rcall	.+134    	; 0x508 <MCP2515_write>
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
     482:	28 81       	ld	r18, Y
     484:	39 81       	ldd	r19, Y+1	; 0x01
     486:	b9 01       	movw	r22, r18
     488:	66 0f       	add	r22, r22
     48a:	77 1f       	adc	r23, r23
     48c:	62 95       	swap	r22
     48e:	72 95       	swap	r23
     490:	70 7f       	andi	r23, 0xF0	; 240
     492:	76 27       	eor	r23, r22
     494:	60 7f       	andi	r22, 0xF0	; 240
     496:	76 27       	eor	r23, r22
     498:	82 e3       	ldi	r24, 0x32	; 50
     49a:	8f 0d       	add	r24, r15
     49c:	35 d0       	rcall	.+106    	; 0x508 <MCP2515_write>
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
     49e:	6a 81       	ldd	r22, Y+2	; 0x02
     4a0:	6f 70       	andi	r22, 0x0F	; 15
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	85 e3       	ldi	r24, 0x35	; 53
     4a6:	8f 0d       	add	r24, r15
     4a8:	2f d0       	rcall	.+94     	; 0x508 <MCP2515_write>
		
	for (uint8_t i = 0; i < message->length;i++){
     4aa:	8a 81       	ldd	r24, Y+2	; 0x02
     4ac:	88 23       	and	r24, r24
     4ae:	79 f0       	breq	.+30     	; 0x4ce <CAN_send_byte+0x7c>
     4b0:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
     4b2:	86 e3       	ldi	r24, 0x36	; 54
     4b4:	f8 0e       	add	r15, r24
     4b6:	fe 01       	movw	r30, r28
     4b8:	e1 0f       	add	r30, r17
     4ba:	f1 1d       	adc	r31, r1
     4bc:	63 81       	ldd	r22, Z+3	; 0x03
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	8f 2d       	mov	r24, r15
     4c2:	81 0f       	add	r24, r17
     4c4:	21 d0       	rcall	.+66     	; 0x508 <MCP2515_write>
void CAN_send_byte(CAN_message_t* message,uint8_t TXn){
	MCP2515_write(MCP_TXBnSIDH+TXn*0x10,message->id>>3);		//8 most significant bits of the message ID
	MCP2515_write(MCP_TXBnSIDL+TXn*0x10,message->id<<5);		//3 least significant bits of the message ID
	MCP2515_write(MCP_TXBnDLC+TXn*0x10,(0b00001111)&(message->length));		//Message length
		
	for (uint8_t i = 0; i < message->length;i++){
     4c6:	1f 5f       	subi	r17, 0xFF	; 255
     4c8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ca:	18 17       	cp	r17, r24
     4cc:	a0 f3       	brcs	.-24     	; 0x4b6 <CAN_send_byte+0x64>
		MCP2515_write(MCP_TXBnD0+TXn*0x10+i,message->data[i]);	//Message data
	}

	//MCP2515_request_to_send(MCP_MERRF+(1<<n));
	MCP2515_request_to_send(TXn);
     4ce:	80 2f       	mov	r24, r16
     4d0:	38 d0       	rcall	.+112    	; 0x542 <MCP2515_request_to_send>
	CAN_transmission_complete(TXn);
     4d2:	80 2f       	mov	r24, r16
     4d4:	ab df       	rcall	.-170    	; 0x42c <CAN_transmission_complete>
	#if UART_ENABLE
		printf("\nSENT MESSAGE:");
		CAN_print(CAN_send_buffer);
	#endif
}
     4d6:	df 91       	pop	r29
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	ff 90       	pop	r15
     4e0:	08 95       	ret

000004e2 <CAN_message_send>:
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     4e2:	20 91 31 03 	lds	r18, 0x0331
     4e6:	22 23       	and	r18, r18
     4e8:	59 f0       	breq	.+22     	; 0x500 <CAN_message_send+0x1e>
     4ea:	38 2f       	mov	r19, r24
     4ec:	a2 e3       	ldi	r26, 0x32	; 50
     4ee:	b3 e0       	ldi	r27, 0x03	; 3
     4f0:	e8 2f       	mov	r30, r24
     4f2:	f9 2f       	mov	r31, r25
		CAN_send_buffer.data[i] = data[i];
     4f4:	81 91       	ld	r24, Z+
     4f6:	8d 93       	st	X+, r24
     4f8:	8e 2f       	mov	r24, r30
     4fa:	83 1b       	sub	r24, r19
	}
}

	//array of int8_t as input (we chose int8_t over uint8_t so that we can send negative values
void CAN_message_send(uint8_t *data,uint8_t TXn){
	for(uint8_t i = 0; i < CAN_send_buffer.length; i++){
     4fc:	82 17       	cp	r24, r18
     4fe:	d0 f3       	brcs	.-12     	; 0x4f4 <CAN_message_send+0x12>
		CAN_send_buffer.data[i] = data[i];
	}
	CAN_send_byte(&CAN_send_buffer,TXn);
     500:	8f e2       	ldi	r24, 0x2F	; 47
     502:	93 e0       	ldi	r25, 0x03	; 3
     504:	a6 cf       	rjmp	.-180    	; 0x452 <CAN_send_byte>
     506:	08 95       	ret

00000508 <MCP2515_write>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	d8 2f       	mov	r29, r24
     50e:	c6 2f       	mov	r28, r22
     510:	50 d0       	rcall	.+160    	; 0x5b2 <SPI_select>
     512:	82 e0       	ldi	r24, 0x02	; 2
     514:	42 d0       	rcall	.+132    	; 0x59a <SPI_send>
     516:	8d 2f       	mov	r24, r29
     518:	40 d0       	rcall	.+128    	; 0x59a <SPI_send>
     51a:	8c 2f       	mov	r24, r28
     51c:	3e d0       	rcall	.+124    	; 0x59a <SPI_send>
     51e:	4b d0       	rcall	.+150    	; 0x5b6 <SPI_deselect>
     520:	df 91       	pop	r29
     522:	cf 91       	pop	r28
     524:	08 95       	ret

00000526 <MCP2515_read>:
     526:	cf 93       	push	r28
     528:	c8 2f       	mov	r28, r24
     52a:	43 d0       	rcall	.+134    	; 0x5b2 <SPI_select>
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	35 d0       	rcall	.+106    	; 0x59a <SPI_send>
     530:	8c 2f       	mov	r24, r28
     532:	33 d0       	rcall	.+102    	; 0x59a <SPI_send>
     534:	37 d0       	rcall	.+110    	; 0x5a4 <SPI_receive>
     536:	c8 2f       	mov	r28, r24
     538:	3e d0       	rcall	.+124    	; 0x5b6 <SPI_deselect>
     53a:	8c 2f       	mov	r24, r28
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	cf 91       	pop	r28
     540:	08 95       	ret

00000542 <MCP2515_request_to_send>:
     542:	cf 93       	push	r28
     544:	c8 2f       	mov	r28, r24
     546:	35 d0       	rcall	.+106    	; 0x5b2 <SPI_select>
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	30 e0       	ldi	r19, 0x00	; 0
     54c:	c9 01       	movw	r24, r18
     54e:	02 c0       	rjmp	.+4      	; 0x554 <MCP2515_request_to_send+0x12>
     550:	88 0f       	add	r24, r24
     552:	99 1f       	adc	r25, r25
     554:	ca 95       	dec	r28
     556:	e2 f7       	brpl	.-8      	; 0x550 <MCP2515_request_to_send+0xe>
     558:	80 68       	ori	r24, 0x80	; 128
     55a:	1f d0       	rcall	.+62     	; 0x59a <SPI_send>
     55c:	2c d0       	rcall	.+88     	; 0x5b6 <SPI_deselect>
     55e:	cf 91       	pop	r28
     560:	08 95       	ret

00000562 <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	18 2f       	mov	r17, r24
     56a:	d6 2f       	mov	r29, r22
     56c:	c4 2f       	mov	r28, r20
	SPI_select();
     56e:	21 d0       	rcall	.+66     	; 0x5b2 <SPI_select>
	SPI_send(MCP_BITMOD);
     570:	85 e0       	ldi	r24, 0x05	; 5
     572:	13 d0       	rcall	.+38     	; 0x59a <SPI_send>
	SPI_send(adr);
     574:	81 2f       	mov	r24, r17
     576:	11 d0       	rcall	.+34     	; 0x59a <SPI_send>
	SPI_send(mask);
     578:	8d 2f       	mov	r24, r29
     57a:	0f d0       	rcall	.+30     	; 0x59a <SPI_send>
	SPI_send(data);
     57c:	8c 2f       	mov	r24, r28
     57e:	0d d0       	rcall	.+26     	; 0x59a <SPI_send>
	SPI_deselect();
     580:	1a d0       	rcall	.+52     	; 0x5b6 <SPI_deselect>
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	1f 91       	pop	r17
     588:	08 95       	ret

0000058a <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     58a:	13 d0       	rcall	.+38     	; 0x5b2 <SPI_select>
	SPI_send(MCP_RESET);
     58c:	80 ec       	ldi	r24, 0xC0	; 192
     58e:	05 d0       	rcall	.+10     	; 0x59a <SPI_send>
	SPI_deselect();
     590:	12 c0       	rjmp	.+36     	; 0x5b6 <SPI_deselect>
     592:	08 95       	ret

00000594 <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     594:	12 d0       	rcall	.+36     	; 0x5ba <SPI_initialize>
	MCP2515_reset();
     596:	f9 cf       	rjmp	.-14     	; 0x58a <MCP2515_reset>
     598:	08 95       	ret

0000059a <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     59a:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     59c:	0d b4       	in	r0, 0x2d	; 45
     59e:	07 fe       	sbrs	r0, 7
     5a0:	fd cf       	rjmp	.-6      	; 0x59c <SPI_send+0x2>

}
     5a2:	08 95       	ret

000005a4 <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	f9 df       	rcall	.-14     	; 0x59a <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     5a8:	0d b4       	in	r0, 0x2d	; 45
     5aa:	07 fe       	sbrs	r0, 7
     5ac:	fd cf       	rjmp	.-6      	; 0x5a8 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     5ae:	8e b5       	in	r24, 0x2e	; 46
}
     5b0:	08 95       	ret

000005b2 <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     5b2:	2f 98       	cbi	0x05, 7	; 5
     5b4:	08 95       	ret

000005b6 <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     5b6:	2f 9a       	sbi	0x05, 7	; 5
     5b8:	08 95       	ret

000005ba <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     5ba:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     5bc:	8c b5       	in	r24, 0x2c	; 44
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     5c2:	84 b1       	in	r24, 0x04	; 4
     5c4:	86 68       	ori	r24, 0x86	; 134
     5c6:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     5c8:	8c b5       	in	r24, 0x2c	; 44
     5ca:	80 65       	ori	r24, 0x50	; 80
     5cc:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     5ce:	f3 cf       	rjmp	.-26     	; 0x5b6 <SPI_deselect>
     5d0:	08 95       	ret

000005d2 <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     5d2:	e0 ec       	ldi	r30, 0xC0	; 192
     5d4:	f0 e0       	ldi	r31, 0x00	; 0
     5d6:	90 81       	ld	r25, Z
     5d8:	95 ff       	sbrs	r25, 5
     5da:	fd cf       	rjmp	.-6      	; 0x5d6 <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     5dc:	80 93 c6 00 	sts	0x00C6, r24
     5e0:	08 95       	ret

000005e2 <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     5e2:	e0 ec       	ldi	r30, 0xC0	; 192
     5e4:	f0 e0       	ldi	r31, 0x00	; 0
     5e6:	80 81       	ld	r24, Z
     5e8:	88 23       	and	r24, r24
     5ea:	ec f7       	brge	.-6      	; 0x5e6 <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     5ec:	80 91 c6 00 	lds	r24, 0x00C6
}
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	08 95       	ret

000005f4 <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     5f4:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     5f8:	87 e6       	ldi	r24, 0x67	; 103
     5fa:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     5fe:	88 e1       	ldi	r24, 0x18	; 24
     600:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     604:	8e e0       	ldi	r24, 0x0E	; 14
     606:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     60a:	61 ef       	ldi	r22, 0xF1	; 241
     60c:	72 e0       	ldi	r23, 0x02	; 2
     60e:	89 ee       	ldi	r24, 0xE9	; 233
     610:	92 e0       	ldi	r25, 0x02	; 2
     612:	e8 c6       	rjmp	.+3536   	; 0x13e4 <fdevopen>
     614:	08 95       	ret

00000616 <game_init>:
int8_t slider_r;


uint8_t joystick_sensitivity;
	
void game_init(uint8_t params[CAN_GAME_PARAMS_LENGTH]){
     616:	fc 01       	movw	r30, r24
	
	solenoid_charge = 0;
     618:	10 92 5e 03 	sts	0x035E, r1
	joystick_x = 0;
     61c:	10 92 5d 03 	sts	0x035D, r1
     620:	10 92 5c 03 	sts	0x035C, r1
	joystick_y	= 0;
     624:	10 92 4e 03 	sts	0x034E, r1
     628:	10 92 4d 03 	sts	0x034D, r1
	joystick_button = 0;
     62c:	10 92 4c 03 	sts	0x034C, r1
	button_l = 0;
     630:	10 92 5b 03 	sts	0x035B, r1
	button_r = 0;
     634:	10 92 58 03 	sts	0x0358, r1
	slider_l = 0;
     638:	10 92 57 03 	sts	0x0357, r1
	slider_r = 0;
     63c:	10 92 56 03 	sts	0x0356, r1
	rel_pos_ref = 0;
     640:	10 92 4f 03 	sts	0x034F, r1
     644:	10 92 50 03 	sts	0x0350, r1
     648:	10 92 51 03 	sts	0x0351, r1
     64c:	10 92 52 03 	sts	0x0352, r1
	
	joystick_min = (int8_t) params[0];
     650:	20 81       	ld	r18, Z
     652:	20 93 61 03 	sts	0x0361, r18
	joystick_max = (int8_t) params[1];
     656:	31 81       	ldd	r19, Z+1	; 0x01
     658:	30 93 55 03 	sts	0x0355, r19
	joystick_sensitivity = (uint8_t)(params[2] <<8)|params[3];
     65c:	63 81       	ldd	r22, Z+3	; 0x03
     65e:	60 93 54 03 	sts	0x0354, r22
	//joystick_sensitivity = params[2];
	slider_min   = (int8_t) params[4];
     662:	44 81       	ldd	r20, Z+4	; 0x04
     664:	40 93 5a 03 	sts	0x035A, r20
	slider_max   = (int8_t) params[5];
     668:	55 81       	ldd	r21, Z+5	; 0x05
     66a:	50 93 59 03 	sts	0x0359, r21
	controller_type   = (uint8_t) params[6];
     66e:	86 81       	ldd	r24, Z+6	; 0x06
     670:	80 93 53 03 	sts	0x0353, r24
	
	printf("Game parameters: %i\t%i\t%i\t%i\t%i\t%i\n",joystick_min, joystick_max, joystick_sensitivity, slider_min, slider_max, controller_type);
     674:	1f 92       	push	r1
     676:	8f 93       	push	r24
     678:	85 2f       	mov	r24, r21
     67a:	99 27       	eor	r25, r25
     67c:	87 fd       	sbrc	r24, 7
     67e:	90 95       	com	r25
     680:	9f 93       	push	r25
     682:	5f 93       	push	r21
     684:	84 2f       	mov	r24, r20
     686:	99 27       	eor	r25, r25
     688:	87 fd       	sbrc	r24, 7
     68a:	90 95       	com	r25
     68c:	9f 93       	push	r25
     68e:	4f 93       	push	r20
     690:	1f 92       	push	r1
     692:	6f 93       	push	r22
     694:	83 2f       	mov	r24, r19
     696:	99 27       	eor	r25, r25
     698:	87 fd       	sbrc	r24, 7
     69a:	90 95       	com	r25
     69c:	9f 93       	push	r25
     69e:	3f 93       	push	r19
     6a0:	82 2f       	mov	r24, r18
     6a2:	99 27       	eor	r25, r25
     6a4:	87 fd       	sbrc	r24, 7
     6a6:	90 95       	com	r25
     6a8:	9f 93       	push	r25
     6aa:	2f 93       	push	r18
     6ac:	81 e5       	ldi	r24, 0x51	; 81
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	9f 93       	push	r25
     6b2:	8f 93       	push	r24
     6b4:	e1 d6       	rcall	.+3522   	; 0x1478 <printf>
     6b6:	8d b7       	in	r24, 0x3d	; 61
     6b8:	9e b7       	in	r25, 0x3e	; 62
     6ba:	0e 96       	adiw	r24, 0x0e	; 14
     6bc:	0f b6       	in	r0, 0x3f	; 63
     6be:	f8 94       	cli
     6c0:	9e bf       	out	0x3e, r25	; 62
     6c2:	0f be       	out	0x3f, r0	; 63
     6c4:	8d bf       	out	0x3d, r24	; 61
     6c6:	08 95       	ret

000006c8 <game_play>:
}

uint16_t game_play(void){
     6c8:	8f 92       	push	r8
     6ca:	9f 92       	push	r9
     6cc:	af 92       	push	r10
     6ce:	bf 92       	push	r11
     6d0:	cf 92       	push	r12
     6d2:	df 92       	push	r13
     6d4:	ef 92       	push	r14
     6d6:	ff 92       	push	r15
     6d8:	cf 93       	push	r28
     6da:	df 93       	push	r29
	score_count = 0;
     6dc:	10 92 60 03 	sts	0x0360, r1
     6e0:	10 92 5f 03 	sts	0x035F, r1
	uint8_t game_on = 1;
	
	float IR_max = read_adc();
     6e4:	2e d1       	rcall	.+604    	; 0x942 <read_adc>
     6e6:	bc 01       	movw	r22, r24
     6e8:	88 27       	eor	r24, r24
     6ea:	77 fd       	sbrc	r23, 7
     6ec:	80 95       	com	r24
     6ee:	98 2f       	mov	r25, r24
     6f0:	29 d5       	rcall	.+2642   	; 0x1144 <__floatsisf>
     6f2:	4b 01       	movw	r8, r22
     6f4:	5c 01       	movw	r10, r24
				button_l		= (int8_t) CAN_message_receive()->data[3];
				button_r		= (int8_t) CAN_message_receive()->data[4];
				slider_l		= (int8_t) CAN_message_receive()->data[5];
				slider_r		= (int8_t) CAN_message_receive()->data[6];
				
				printf("Game input: \t%i\t%i\t%i\t%i\t%i\t%i\t%i\n",joystick_x, joystick_y, joystick_button, button_l, button_r, slider_l, slider_r);
     6f6:	c5 e7       	ldi	r28, 0x75	; 117
     6f8:	d2 e0       	ldi	r29, 0x02	; 2
	
	float IR_max = read_adc();
	
	while(game_on){
		// Get input values
		if(CAN_data_receive()){
     6fa:	31 de       	rcall	.-926    	; 0x35e <CAN_data_receive>
     6fc:	88 23       	and	r24, r24
     6fe:	09 f4       	brne	.+2      	; 0x702 <game_play+0x3a>
     700:	65 c0       	rjmp	.+202    	; 0x7cc <game_play+0x104>
			//data = CAN_message_receive()->data;
			//id   = CAN_message_receive()->id;
			if(CAN_message_receive()->id == CAN_GAME_CONTROL_ID){
     702:	62 dd       	rcall	.-1340   	; 0x1c8 <CAN_message_receive>
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	91 81       	ldd	r25, Z+1	; 0x01
     70a:	44 97       	sbiw	r24, 0x14	; 20
     70c:	09 f0       	breq	.+2      	; 0x710 <game_play+0x48>
     70e:	5e c0       	rjmp	.+188    	; 0x7cc <game_play+0x104>
				joystick_x		= (int8_t) CAN_message_receive()->data[0];
     710:	5b dd       	rcall	.-1354   	; 0x1c8 <CAN_message_receive>
     712:	fc 01       	movw	r30, r24
     714:	83 81       	ldd	r24, Z+3	; 0x03
     716:	99 27       	eor	r25, r25
     718:	87 fd       	sbrc	r24, 7
     71a:	90 95       	com	r25
     71c:	90 93 5d 03 	sts	0x035D, r25
     720:	80 93 5c 03 	sts	0x035C, r24
				joystick_y		= (int8_t) CAN_message_receive()->data[1];
     724:	51 dd       	rcall	.-1374   	; 0x1c8 <CAN_message_receive>
     726:	fc 01       	movw	r30, r24
     728:	84 81       	ldd	r24, Z+4	; 0x04
     72a:	99 27       	eor	r25, r25
     72c:	87 fd       	sbrc	r24, 7
     72e:	90 95       	com	r25
     730:	90 93 4e 03 	sts	0x034E, r25
     734:	80 93 4d 03 	sts	0x034D, r24
				joystick_button = (int8_t) CAN_message_receive()->data[2];
     738:	47 dd       	rcall	.-1394   	; 0x1c8 <CAN_message_receive>
     73a:	fc 01       	movw	r30, r24
     73c:	85 81       	ldd	r24, Z+5	; 0x05
     73e:	80 93 4c 03 	sts	0x034C, r24
				button_l		= (int8_t) CAN_message_receive()->data[3];
     742:	42 dd       	rcall	.-1404   	; 0x1c8 <CAN_message_receive>
     744:	fc 01       	movw	r30, r24
     746:	86 81       	ldd	r24, Z+6	; 0x06
     748:	80 93 5b 03 	sts	0x035B, r24
				button_r		= (int8_t) CAN_message_receive()->data[4];
     74c:	3d dd       	rcall	.-1414   	; 0x1c8 <CAN_message_receive>
     74e:	fc 01       	movw	r30, r24
     750:	87 81       	ldd	r24, Z+7	; 0x07
     752:	80 93 58 03 	sts	0x0358, r24
				slider_l		= (int8_t) CAN_message_receive()->data[5];
     756:	38 dd       	rcall	.-1424   	; 0x1c8 <CAN_message_receive>
     758:	fc 01       	movw	r30, r24
     75a:	80 85       	ldd	r24, Z+8	; 0x08
     75c:	80 93 57 03 	sts	0x0357, r24
				slider_r		= (int8_t) CAN_message_receive()->data[6];
     760:	33 dd       	rcall	.-1434   	; 0x1c8 <CAN_message_receive>
     762:	fc 01       	movw	r30, r24
     764:	21 85       	ldd	r18, Z+9	; 0x09
     766:	20 93 56 03 	sts	0x0356, r18
				
				printf("Game input: \t%i\t%i\t%i\t%i\t%i\t%i\t%i\n",joystick_x, joystick_y, joystick_button, button_l, button_r, slider_l, slider_r);
     76a:	82 2f       	mov	r24, r18
     76c:	99 27       	eor	r25, r25
     76e:	87 fd       	sbrc	r24, 7
     770:	90 95       	com	r25
     772:	9f 93       	push	r25
     774:	2f 93       	push	r18
     776:	20 91 57 03 	lds	r18, 0x0357
     77a:	82 2f       	mov	r24, r18
     77c:	99 27       	eor	r25, r25
     77e:	87 fd       	sbrc	r24, 7
     780:	90 95       	com	r25
     782:	9f 93       	push	r25
     784:	2f 93       	push	r18
     786:	80 91 58 03 	lds	r24, 0x0358
     78a:	1f 92       	push	r1
     78c:	8f 93       	push	r24
     78e:	80 91 5b 03 	lds	r24, 0x035B
     792:	1f 92       	push	r1
     794:	8f 93       	push	r24
     796:	80 91 4c 03 	lds	r24, 0x034C
     79a:	1f 92       	push	r1
     79c:	8f 93       	push	r24
     79e:	80 91 4e 03 	lds	r24, 0x034E
     7a2:	8f 93       	push	r24
     7a4:	80 91 4d 03 	lds	r24, 0x034D
     7a8:	8f 93       	push	r24
     7aa:	80 91 5d 03 	lds	r24, 0x035D
     7ae:	8f 93       	push	r24
     7b0:	80 91 5c 03 	lds	r24, 0x035C
     7b4:	8f 93       	push	r24
     7b6:	df 93       	push	r29
     7b8:	cf 93       	push	r28
     7ba:	5e d6       	rcall	.+3260   	; 0x1478 <printf>
     7bc:	ed b7       	in	r30, 0x3d	; 61
     7be:	fe b7       	in	r31, 0x3e	; 62
     7c0:	70 96       	adiw	r30, 0x10	; 16
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	f8 94       	cli
     7c6:	fe bf       	out	0x3e, r31	; 62
     7c8:	0f be       	out	0x3f, r0	; 63
     7ca:	ed bf       	out	0x3d, r30	; 61
			}
		}

		// Get desired motor position
		if(controller_type == CONTROLLER_TYPE_JOYSTICK_ONLY && ~joystick_button){ //use joystick to increment position
     7cc:	80 91 53 03 	lds	r24, 0x0353
     7d0:	81 11       	cpse	r24, r1
     7d2:	2b c0       	rjmp	.+86     	; 0x82a <game_play+0x162>
			rel_pos_ref += joystick_sensitivity * (joystick_x / joystick_max);
     7d4:	20 91 54 03 	lds	r18, 0x0354
     7d8:	60 91 55 03 	lds	r22, 0x0355
     7dc:	77 27       	eor	r23, r23
     7de:	67 fd       	sbrc	r22, 7
     7e0:	70 95       	com	r23
     7e2:	80 91 5c 03 	lds	r24, 0x035C
     7e6:	90 91 5d 03 	lds	r25, 0x035D
     7ea:	d7 d5       	rcall	.+2990   	; 0x139a <__divmodhi4>
     7ec:	cb 01       	movw	r24, r22
     7ee:	28 9f       	mul	r18, r24
     7f0:	b0 01       	movw	r22, r0
     7f2:	29 9f       	mul	r18, r25
     7f4:	70 0d       	add	r23, r0
     7f6:	11 24       	eor	r1, r1
     7f8:	88 27       	eor	r24, r24
     7fa:	77 fd       	sbrc	r23, 7
     7fc:	80 95       	com	r24
     7fe:	98 2f       	mov	r25, r24
     800:	a1 d4       	rcall	.+2370   	; 0x1144 <__floatsisf>
     802:	9b 01       	movw	r18, r22
     804:	ac 01       	movw	r20, r24
     806:	60 91 4f 03 	lds	r22, 0x034F
     80a:	70 91 50 03 	lds	r23, 0x0350
     80e:	80 91 51 03 	lds	r24, 0x0351
     812:	90 91 52 03 	lds	r25, 0x0352
     816:	93 d3       	rcall	.+1830   	; 0xf3e <__addsf3>
     818:	60 93 4f 03 	sts	0x034F, r22
     81c:	70 93 50 03 	sts	0x0350, r23
     820:	80 93 51 03 	sts	0x0351, r24
     824:	90 93 52 03 	sts	0x0352, r25
     828:	22 c0       	rjmp	.+68     	; 0x86e <game_play+0x1a6>
		}else{ // use slider to use absolute position
			rel_pos_ref = slider_min + slider_pos*(slider_max - slider_min);
     82a:	60 91 5a 03 	lds	r22, 0x035A
     82e:	77 27       	eor	r23, r23
     830:	67 fd       	sbrc	r22, 7
     832:	70 95       	com	r23
     834:	40 91 62 03 	lds	r20, 0x0362
     838:	20 91 59 03 	lds	r18, 0x0359
     83c:	33 27       	eor	r19, r19
     83e:	27 fd       	sbrc	r18, 7
     840:	30 95       	com	r19
     842:	26 1b       	sub	r18, r22
     844:	37 0b       	sbc	r19, r23
     846:	42 9f       	mul	r20, r18
     848:	c0 01       	movw	r24, r0
     84a:	43 9f       	mul	r20, r19
     84c:	90 0d       	add	r25, r0
     84e:	11 24       	eor	r1, r1
     850:	68 0f       	add	r22, r24
     852:	79 1f       	adc	r23, r25
     854:	88 27       	eor	r24, r24
     856:	77 fd       	sbrc	r23, 7
     858:	80 95       	com	r24
     85a:	98 2f       	mov	r25, r24
     85c:	73 d4       	rcall	.+2278   	; 0x1144 <__floatsisf>
     85e:	60 93 4f 03 	sts	0x034F, r22
     862:	70 93 50 03 	sts	0x0350, r23
     866:	80 93 51 03 	sts	0x0351, r24
     86a:	90 93 52 03 	sts	0x0352, r25
		}
		
		// Update position.
		pi_controller_update(rel_pos_ref);
     86e:	60 91 4f 03 	lds	r22, 0x034F
     872:	70 91 50 03 	lds	r23, 0x0350
     876:	80 91 51 03 	lds	r24, 0x0351
     87a:	90 91 52 03 	lds	r25, 0x0352
     87e:	a1 d0       	rcall	.+322    	; 0x9c2 <pi_controller_update>

		// When joystick button is pressed, keep motor position constant and use joystick to control servo.
		if(joystick_button){
     880:	80 91 4c 03 	lds	r24, 0x034C
     884:	88 23       	and	r24, r24
     886:	51 f0       	breq	.+20     	; 0x89c <game_play+0x1d4>
			servo_set(joystick_x);
     888:	80 91 5c 03 	lds	r24, 0x035C
     88c:	90 91 5d 03 	lds	r25, 0x035D
     890:	26 d1       	rcall	.+588    	; 0xade <servo_set>
			joystick_button = 0;//solenoid_charge = 1;
     892:	10 92 4c 03 	sts	0x034C, r1
			printf("RELOADING!\n");
     896:	88 e9       	ldi	r24, 0x98	; 152
     898:	92 e0       	ldi	r25, 0x02	; 2
     89a:	ff d5       	rcall	.+3070   	; 0x149a <puts>
		}
		
		// Shoot on button release of joystick-button.
		if(button_r){//if(~joystick_button && solenoid_charge){
     89c:	80 91 58 03 	lds	r24, 0x0358
     8a0:	88 23       	and	r24, r24
     8a2:	21 f0       	breq	.+8      	; 0x8ac <game_play+0x1e4>
			solenoid_fire();
     8a4:	f2 d1       	rcall	.+996    	; 0xc8a <solenoid_fire>
			printf("FIRE!\n");
     8a6:	83 ea       	ldi	r24, 0xA3	; 163
     8a8:	92 e0       	ldi	r25, 0x02	; 2
     8aa:	f7 d5       	rcall	.+3054   	; 0x149a <puts>
		}
		
		
		// Check if IR-beam is interrupted.
		if(read_adc() < IR_interrupt_factor*IR_max){
     8ac:	4a d0       	rcall	.+148    	; 0x942 <read_adc>
     8ae:	bc 01       	movw	r22, r24
     8b0:	88 27       	eor	r24, r24
     8b2:	77 fd       	sbrc	r23, 7
     8b4:	80 95       	com	r24
     8b6:	98 2f       	mov	r25, r24
     8b8:	45 d4       	rcall	.+2186   	; 0x1144 <__floatsisf>
     8ba:	6b 01       	movw	r12, r22
     8bc:	7c 01       	movw	r14, r24
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	30 e0       	ldi	r19, 0x00	; 0
     8c2:	40 e4       	ldi	r20, 0x40	; 64
     8c4:	5f e3       	ldi	r21, 0x3F	; 63
     8c6:	c5 01       	movw	r24, r10
     8c8:	b4 01       	movw	r22, r8
     8ca:	f0 d4       	rcall	.+2528   	; 0x12ac <__mulsf3>
     8cc:	9b 01       	movw	r18, r22
     8ce:	ac 01       	movw	r20, r24
     8d0:	c7 01       	movw	r24, r14
     8d2:	b6 01       	movw	r22, r12
     8d4:	98 d3       	rcall	.+1840   	; 0x1006 <__cmpsf2>
     8d6:	88 23       	and	r24, r24
     8d8:	0c f0       	brlt	.+2      	; 0x8dc <game_play+0x214>
     8da:	0f cf       	rjmp	.-482    	; 0x6fa <game_play+0x32>
			game_on = 0;
		}
	}
	return score_count;
     8dc:	80 91 5f 03 	lds	r24, 0x035F
     8e0:	90 91 60 03 	lds	r25, 0x0360
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	ff 90       	pop	r15
     8ea:	ef 90       	pop	r14
     8ec:	df 90       	pop	r13
     8ee:	cf 90       	pop	r12
     8f0:	bf 90       	pop	r11
     8f2:	af 90       	pop	r10
     8f4:	9f 90       	pop	r9
     8f6:	8f 90       	pop	r8
     8f8:	08 95       	ret

000008fa <IR_init>:
#include "IRsensor.h"


//int input_val;

void IR_init(void){	
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
	
	//Enable input at port F0
	DDRF &= ~(1 << PF0);
     8fe:	80 98       	cbi	0x10, 0	; 16

	//Left adjusting (the 10-bit result) instead of right adjusting.
	//ADMUX |= (1<<ADLAR);
	
	// Set ADC prescaler to 128 -> 125kHz sample rate @ 16MHz.
	ADCSRA |= (1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);		
     900:	ea e7       	ldi	r30, 0x7A	; 122
     902:	f0 e0       	ldi	r31, 0x00	; 0
     904:	80 81       	ld	r24, Z
     906:	87 60       	ori	r24, 0x07	; 7
     908:	80 83       	st	Z, r24
	
	//Turning on internal voltage reference.
	ADMUX = (1<<REFS0);//|(1<<REFS1);
     90a:	ac e7       	ldi	r26, 0x7C	; 124
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	80 e4       	ldi	r24, 0x40	; 64
     910:	8c 93       	st	X, r24
	
	//Use ADC0 -> Mux5:0 = 00000
	ADMUX &= ~((1<<MUX4)&(1<<MUX3)&(1<<MUX2)&(1<<MUX1)&(1<<MUX0));
     912:	8c 91       	ld	r24, X
     914:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<MUX5);
     916:	cb e7       	ldi	r28, 0x7B	; 123
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	88 81       	ld	r24, Y
     91c:	87 7f       	andi	r24, 0xF7	; 247
     91e:	88 83       	st	Y, r24
	
	// ADC Auto Triger Engable.
	ADCSRA |= (1<<ADATE);
     920:	80 81       	ld	r24, Z
     922:	80 62       	ori	r24, 0x20	; 32
     924:	80 83       	st	Z, r24
	
	//Use Free-running mode.
	ADCSRB = (1<<ADTS2)|(1<<ADTS1)|(1<<ADTS0);
     926:	87 e0       	ldi	r24, 0x07	; 7
     928:	88 83       	st	Y, r24
	
	//Use 8-bit resolution, all data is stored in ADCH.
	ADMUX |= (1<<ADLAR);
     92a:	8c 91       	ld	r24, X
     92c:	80 62       	ori	r24, 0x20	; 32
     92e:	8c 93       	st	X, r24
	
	//Enabling ADC. ADC Result will be presented in ADC Data Registers ADCH & ADCL.
	ADCSRA |= (1<<ADEN);
     930:	80 81       	ld	r24, Z
     932:	80 68       	ori	r24, 0x80	; 128
     934:	80 83       	st	Z, r24
	
	// Start A2D conversion.
	ADCSRA |= (1<<ADSC);            
     936:	80 81       	ld	r24, Z
     938:	80 64       	ori	r24, 0x40	; 64
     93a:	80 83       	st	Z, r24
	
	
	

}
     93c:	df 91       	pop	r29
     93e:	cf 91       	pop	r28
     940:	08 95       	ret

00000942 <read_adc>:
uint16_t read_adc(void)
{
	//ADMUX = (0);
	//ADCSRA &= ~(1<<ADEN);			//Disabling ADC -> restarting the prescaler
	//ADCSRA |= (1<<ADEN);			//Enabling the ADC
	ADCSRA |= (1<<ADSC);            //start conversion
     942:	ea e7       	ldi	r30, 0x7A	; 122
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	80 81       	ld	r24, Z
     948:	80 64       	ori	r24, 0x40	; 64
     94a:	80 83       	st	Z, r24

		
	while(ADCSRA & (1<<ADSC));                        //Wait for conversion to be done.
     94c:	80 81       	ld	r24, Z
     94e:	86 fd       	sbrc	r24, 6
     950:	fd cf       	rjmp	.-6      	; 0x94c <read_adc+0xa>
	//read ADC somewhere

	//printf("%i", ADCH); 
	//return 0;   
		                                    //return the ADC conversion result from the ADC Result Registers (ADCL, ADCH)
	return ADCH;
     952:	80 91 79 00 	lds	r24, 0x0079
}
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	08 95       	ret

0000095a <motor_set_motor_speed>:

//Toggle RSTN to reset encoder.
void encoder_reset(void){
	MOTOR_PORT &= ~(1<<RSTN);
	_delay_us(20);
	MOTOR_PORT |= (1<<RSTN);
     95a:	cf 93       	push	r28
     95c:	df 93       	push	r29
     95e:	00 d0       	rcall	.+0      	; 0x960 <motor_set_motor_speed+0x6>
     960:	cd b7       	in	r28, 0x3d	; 61
     962:	de b7       	in	r29, 0x3e	; 62
     964:	90 e5       	ldi	r25, 0x50	; 80
     966:	99 83       	std	Y+1, r25	; 0x01
     968:	1a 82       	std	Y+2, r1	; 0x02
     96a:	8b 83       	std	Y+3, r24	; 0x03
     96c:	63 e0       	ldi	r22, 0x03	; 3
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	ce 01       	movw	r24, r28
     972:	01 96       	adiw	r24, 0x01	; 1
     974:	3e d2       	rcall	.+1148   	; 0xdf2 <TWI_Start_Transceiver_With_Data>
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	df 91       	pop	r29
     97e:	cf 91       	pop	r28
     980:	08 95       	ret

00000982 <encoder_read>:
}

// Encoder read procedure (compare motorbox.pdf page 5)
int16_t encoder_read(void){
	MOTOR_PORT |= (1<<SEL);
     982:	e2 e0       	ldi	r30, 0x02	; 2
     984:	f1 e0       	ldi	r31, 0x01	; 1
     986:	80 81       	ld	r24, Z
     988:	88 60       	ori	r24, 0x08	; 8
     98a:	80 83       	st	Z, r24
	MOTOR_PORT &= ~(1<<OEN);
     98c:	80 81       	ld	r24, Z
     98e:	8f 7d       	andi	r24, 0xDF	; 223
     990:	80 83       	st	Z, r24
	
	// Read MSB.
	MOTOR_PORT &= ~(1<<SEL);
     992:	80 81       	ld	r24, Z
     994:	87 7f       	andi	r24, 0xF7	; 247
     996:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     998:	8a e6       	ldi	r24, 0x6A	; 106
     99a:	8a 95       	dec	r24
     99c:	f1 f7       	brne	.-4      	; 0x99a <encoder_read+0x18>
     99e:	00 c0       	rjmp	.+0      	; 0x9a0 <encoder_read+0x1e>
	_delay_us(20);
	uint8_t msb = ENCODER_PIN;
     9a0:	20 91 06 01 	lds	r18, 0x0106
	
	// Read LSB
	MOTOR_PORT |= (1<<SEL);
     9a4:	80 81       	ld	r24, Z
     9a6:	88 60       	ori	r24, 0x08	; 8
     9a8:	80 83       	st	Z, r24
     9aa:	8a e6       	ldi	r24, 0x6A	; 106
     9ac:	8a 95       	dec	r24
     9ae:	f1 f7       	brne	.-4      	; 0x9ac <encoder_read+0x2a>
     9b0:	00 c0       	rjmp	.+0      	; 0x9b2 <encoder_read+0x30>
	_delay_us(20);
	uint8_t lsb = ENCODER_PIN;
     9b2:	80 91 06 01 	lds	r24, 0x0106

	// Disable output of encoder
	MOTOR_PORT |= (1<<OEN);
     9b6:	90 81       	ld	r25, Z
     9b8:	90 62       	ori	r25, 0x20	; 32
     9ba:	90 83       	st	Z, r25
}



int16_t twos_compliment_decode(uint8_t msb, uint8_t lsb){
	return (int16_t)((msb<<8)|lsb);
     9bc:	90 e0       	ldi	r25, 0x00	; 0
	
	#endif
	//printf("%i %i\n",msb,lsb);
	//printf("\nENC %i\n",twos_compliment_decode(msb,lsb));
	return twos_compliment_decode(msb,lsb);
}
     9be:	92 2b       	or	r25, r18
     9c0:	08 95       	ret

000009c2 <pi_controller_update>:
	
	initialize_timer(T_Update_init);
	pos_max = motor_init();
}

void pi_controller_update(float rel_pos_ref){
     9c2:	8f 92       	push	r8
     9c4:	9f 92       	push	r9
     9c6:	af 92       	push	r10
     9c8:	bf 92       	push	r11
     9ca:	cf 92       	push	r12
     9cc:	df 92       	push	r13
     9ce:	ef 92       	push	r14
     9d0:	ff 92       	push	r15
     9d2:	6b 01       	movw	r12, r22
     9d4:	7c 01       	movw	r14, r24
	
	pos_ref = rel_pos_ref * pos_max;
     9d6:	60 91 6b 03 	lds	r22, 0x036B
     9da:	70 91 6c 03 	lds	r23, 0x036C
     9de:	88 27       	eor	r24, r24
     9e0:	77 fd       	sbrc	r23, 7
     9e2:	80 95       	com	r24
     9e4:	98 2f       	mov	r25, r24
     9e6:	ae d3       	rcall	.+1884   	; 0x1144 <__floatsisf>
     9e8:	a7 01       	movw	r20, r14
     9ea:	96 01       	movw	r18, r12
     9ec:	5f d4       	rcall	.+2238   	; 0x12ac <__mulsf3>
     9ee:	7c d3       	rcall	.+1784   	; 0x10e8 <__fixunssfsi>
     9f0:	60 93 71 03 	sts	0x0371, r22
	if(timer_check_flag()){
     9f4:	ce d1       	rcall	.+924    	; 0xd92 <timer_check_flag>
     9f6:	88 23       	and	r24, r24
     9f8:	09 f4       	brne	.+2      	; 0x9fc <pi_controller_update+0x3a>
     9fa:	52 c0       	rjmp	.+164    	; 0xaa0 <pi_controller_update+0xde>
		pos_meas = encoder_read();
     9fc:	c2 df       	rcall	.-124    	; 0x982 <encoder_read>
     9fe:	90 93 77 03 	sts	0x0377, r25
     a02:	80 93 76 03 	sts	0x0376, r24
		pos_err = pos_ref - pos_meas;
     a06:	60 91 71 03 	lds	r22, 0x0371
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	68 1b       	sub	r22, r24
     a0e:	79 0b       	sbc	r23, r25
     a10:	70 93 81 03 	sts	0x0381, r23
     a14:	60 93 80 03 	sts	0x0380, r22
		pos_errSum  += pos_err;
     a18:	88 27       	eor	r24, r24
     a1a:	77 fd       	sbrc	r23, 7
     a1c:	80 95       	com	r24
     a1e:	98 2f       	mov	r25, r24
     a20:	91 d3       	rcall	.+1826   	; 0x1144 <__floatsisf>
     a22:	4b 01       	movw	r8, r22
     a24:	5c 01       	movw	r10, r24
     a26:	20 91 7c 03 	lds	r18, 0x037C
     a2a:	30 91 7d 03 	lds	r19, 0x037D
     a2e:	40 91 7e 03 	lds	r20, 0x037E
     a32:	50 91 7f 03 	lds	r21, 0x037F
     a36:	83 d2       	rcall	.+1286   	; 0xf3e <__addsf3>
     a38:	6b 01       	movw	r12, r22
     a3a:	7c 01       	movw	r14, r24
     a3c:	60 93 7c 03 	sts	0x037C, r22
     a40:	70 93 7d 03 	sts	0x037D, r23
     a44:	80 93 7e 03 	sts	0x037E, r24
     a48:	90 93 7f 03 	sts	0x037F, r25
		u = Kp*pos_err + Ki*pos_errSum/TIMER_FREQ;
     a4c:	20 91 78 03 	lds	r18, 0x0378
     a50:	30 91 79 03 	lds	r19, 0x0379
     a54:	40 91 7a 03 	lds	r20, 0x037A
     a58:	50 91 7b 03 	lds	r21, 0x037B
     a5c:	c5 01       	movw	r24, r10
     a5e:	b4 01       	movw	r22, r8
     a60:	25 d4       	rcall	.+2122   	; 0x12ac <__mulsf3>
     a62:	4b 01       	movw	r8, r22
     a64:	5c 01       	movw	r10, r24
     a66:	20 91 6d 03 	lds	r18, 0x036D
     a6a:	30 91 6e 03 	lds	r19, 0x036E
     a6e:	40 91 6f 03 	lds	r20, 0x036F
     a72:	50 91 70 03 	lds	r21, 0x0370
     a76:	c7 01       	movw	r24, r14
     a78:	b6 01       	movw	r22, r12
     a7a:	18 d4       	rcall	.+2096   	; 0x12ac <__mulsf3>
     a7c:	20 e0       	ldi	r18, 0x00	; 0
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	48 e4       	ldi	r20, 0x48	; 72
     a82:	52 e4       	ldi	r21, 0x42	; 66
     a84:	c4 d2       	rcall	.+1416   	; 0x100e <__divsf3>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	c5 01       	movw	r24, r10
     a8c:	b4 01       	movw	r22, r8
     a8e:	57 d2       	rcall	.+1198   	; 0xf3e <__addsf3>
     a90:	60 93 86 03 	sts	0x0386, r22
     a94:	70 93 87 03 	sts	0x0387, r23
     a98:	80 93 88 03 	sts	0x0388, r24
     a9c:	90 93 89 03 	sts	0x0389, r25
	}
	motor_set_motor_speed((int16_t)u);
     aa0:	60 91 86 03 	lds	r22, 0x0386
     aa4:	70 91 87 03 	lds	r23, 0x0387
     aa8:	80 91 88 03 	lds	r24, 0x0388
     aac:	90 91 89 03 	lds	r25, 0x0389
     ab0:	16 d3       	rcall	.+1580   	; 0x10de <__fixsfsi>
     ab2:	86 2f       	mov	r24, r22
     ab4:	52 df       	rcall	.-348    	; 0x95a <motor_set_motor_speed>
}
     ab6:	ff 90       	pop	r15
     ab8:	ef 90       	pop	r14
     aba:	df 90       	pop	r13
     abc:	cf 90       	pop	r12
     abe:	bf 90       	pop	r11
     ac0:	af 90       	pop	r10
     ac2:	9f 90       	pop	r9
     ac4:	8f 90       	pop	r8
     ac6:	08 95       	ret

00000ac8 <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(PWM_PERIOD);
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 ea       	ldi	r24, 0xA0	; 160
     ace:	91 e4       	ldi	r25, 0x41	; 65
     ad0:	ab d0       	rcall	.+342    	; 0xc28 <pwm_init>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
			pwm_set_pulse_width(pulse_width);
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	80 ec       	ldi	r24, 0xC0	; 192
     ad8:	9f e3       	ldi	r25, 0x3F	; 63
     ada:	90 c0       	rjmp	.+288    	; 0xbfc <pwm_set_pulse_width>
     adc:	08 95       	ret

00000ade <servo_set>:
void servo_init(void){
	pwm_init(PWM_PERIOD);
	servo_set(0);
}

int servo_set(int8_t value){
     ade:	cf 92       	push	r12
     ae0:	df 92       	push	r13
     ae2:	ef 92       	push	r14
     ae4:	ff 92       	push	r15
     ae6:	68 2f       	mov	r22, r24
	// Check if control-input is within allowed range.
	if(value >= CONTROL_INPUT_MIN && value <= CONTROL_INPUT_MAX){
     ae8:	84 e6       	ldi	r24, 0x64	; 100
     aea:	86 0f       	add	r24, r22
     aec:	89 3c       	cpi	r24, 0xC9	; 201
     aee:	a0 f5       	brcc	.+104    	; 0xb58 <servo_set+0x7a>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
     af0:	77 27       	eor	r23, r23
     af2:	67 fd       	sbrc	r22, 7
     af4:	70 95       	com	r23
     af6:	87 2f       	mov	r24, r23
     af8:	97 2f       	mov	r25, r23
     afa:	24 d3       	rcall	.+1608   	; 0x1144 <__floatsisf>
     afc:	9b 01       	movw	r18, r22
     afe:	ac 01       	movw	r20, r24
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	88 ec       	ldi	r24, 0xC8	; 200
     b06:	92 e4       	ldi	r25, 0x42	; 66
     b08:	19 d2       	rcall	.+1074   	; 0xf3c <__subsf3>
     b0a:	20 e0       	ldi	r18, 0x00	; 0
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	48 e4       	ldi	r20, 0x48	; 72
     b10:	53 e4       	ldi	r21, 0x43	; 67
     b12:	7d d2       	rcall	.+1274   	; 0x100e <__divsf3>
     b14:	29 e9       	ldi	r18, 0x99	; 153
     b16:	39 e9       	ldi	r19, 0x99	; 153
     b18:	49 e9       	ldi	r20, 0x99	; 153
     b1a:	5f e3       	ldi	r21, 0x3F	; 63
     b1c:	c7 d3       	rcall	.+1934   	; 0x12ac <__mulsf3>
     b1e:	26 e6       	ldi	r18, 0x66	; 102
     b20:	36 e6       	ldi	r19, 0x66	; 102
     b22:	46 e6       	ldi	r20, 0x66	; 102
     b24:	5f e3       	ldi	r21, 0x3F	; 63
     b26:	0b d2       	rcall	.+1046   	; 0xf3e <__addsf3>
     b28:	6b 01       	movw	r12, r22
     b2a:	7c 01       	movw	r14, r24
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
     b2c:	26 e6       	ldi	r18, 0x66	; 102
     b2e:	36 e6       	ldi	r19, 0x66	; 102
     b30:	46 e6       	ldi	r20, 0x66	; 102
     b32:	5f e3       	ldi	r21, 0x3F	; 63
     b34:	b7 d3       	rcall	.+1902   	; 0x12a4 <__gesf2>
     b36:	88 23       	and	r24, r24
     b38:	94 f0       	brlt	.+36     	; 0xb5e <servo_set+0x80>
     b3a:	26 e6       	ldi	r18, 0x66	; 102
     b3c:	36 e6       	ldi	r19, 0x66	; 102
     b3e:	46 e0       	ldi	r20, 0x06	; 6
     b40:	50 e4       	ldi	r21, 0x40	; 64
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	5f d2       	rcall	.+1214   	; 0x1006 <__cmpsf2>
     b48:	18 16       	cp	r1, r24
     b4a:	64 f0       	brlt	.+24     	; 0xb64 <servo_set+0x86>
			pwm_set_pulse_width(pulse_width);
     b4c:	c7 01       	movw	r24, r14
     b4e:	b6 01       	movw	r22, r12
     b50:	55 d0       	rcall	.+170    	; 0xbfc <pwm_set_pulse_width>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
     b52:	81 e0       	ldi	r24, 0x01	; 1
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	08 c0       	rjmp	.+16     	; 0xb68 <servo_set+0x8a>
		}else{
			return 0;
		}
	}else{
		return -1;
     b58:	8f ef       	ldi	r24, 0xFF	; 255
     b5a:	9f ef       	ldi	r25, 0xFF	; 255
     b5c:	05 c0       	rjmp	.+10     	; 0xb68 <servo_set+0x8a>
			#if UART_ENABLE
				printf("%i",(int)(100*pulse_width));
			#endif
			return 1;
		}else{
			return 0;
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	02 c0       	rjmp	.+4      	; 0xb68 <servo_set+0x8a>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	90 e0       	ldi	r25, 0x00	; 0
		}
	}else{
		return -1;
	}
     b68:	ff 90       	pop	r15
     b6a:	ef 90       	pop	r14
     b6c:	df 90       	pop	r13
     b6e:	cf 90       	pop	r12
     b70:	08 95       	ret

00000b72 <init_all>:
	return 0;
}

void init_all(void){
	
	cli();
     b72:	f8 94       	cli
	init_UART();
     b74:	3f dd       	rcall	.-1410   	; 0x5f4 <init_UART>
	
	CAN_initialize();
     b76:	ae db       	rcall	.-2212   	; 0x2d4 <CAN_initialize>
	printf("CAN initialized\n");
     b78:	89 ea       	ldi	r24, 0xA9	; 169
     b7a:	92 e0       	ldi	r25, 0x02	; 2
     b7c:	8e d4       	rcall	.+2332   	; 0x149a <puts>
	TWI_Master_Initialise();
     b7e:	2f d1       	rcall	.+606    	; 0xdde <TWI_Master_Initialise>
	printf("TWI initialized\n");
     b80:	89 eb       	ldi	r24, 0xB9	; 185
     b82:	92 e0       	ldi	r25, 0x02	; 2
     b84:	8a d4       	rcall	.+2324   	; 0x149a <puts>
	//Motor is being initialized by PI-Controller.
	//motor_init();
	//motor_calibrate(100);
	//printf("Motor initialized\n");
	servo_init();
     b86:	a0 df       	rcall	.-192    	; 0xac8 <servo_init>
	printf("Servo initialized\n");
     b88:	89 ec       	ldi	r24, 0xC9	; 201
     b8a:	92 e0       	ldi	r25, 0x02	; 2
     b8c:	86 d4       	rcall	.+2316   	; 0x149a <puts>
	IR_init();
     b8e:	b5 de       	rcall	.-662    	; 0x8fa <IR_init>
	printf("IR initialized\n");
     b90:	8b ed       	ldi	r24, 0xDB	; 219
     b92:	92 e0       	ldi	r25, 0x02	; 2
     b94:	82 d4       	rcall	.+2308   	; 0x149a <puts>
	//printf("solenoid\n");
	solenoid_init();
     b96:	64 d0       	rcall	.+200    	; 0xc60 <solenoid_init>
	printf("Solenoid initialized\n");
     b98:	8a ee       	ldi	r24, 0xEA	; 234
     b9a:	92 e0       	ldi	r25, 0x02	; 2
     b9c:	7e d4       	rcall	.+2300   	; 0x149a <puts>
	//pi_controller_init(0.1,1,T_UPDATE);
	//pi_controller_init(5,1,T_UPDATE);
	printf("PI_Controller initialized.\n");
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	92 e0       	ldi	r25, 0x02	; 2
     ba2:	7b d4       	rcall	.+2294   	; 0x149a <puts>
	#if UART_ENABLE
		init_UART();
		printf("Program initialized\n");
	#endif
	sei();
     ba4:	78 94       	sei
     ba6:	08 95       	ret

00000ba8 <main>:
void init_all(void);
#include	"../../common_library/uart.h"//REMOVE ME
#include	"pi_controller.h"
#include	"solenoid.h"

int main(void){
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	1f 92       	push	r1
     bae:	1f 92       	push	r1
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
	
	init_all();
     bb4:	de df       	rcall	.-68     	; 0xb72 <init_all>
	
	initialize_timer(50);
     bb6:	82 e3       	ldi	r24, 0x32	; 50
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	7d d0       	rcall	.+250    	; 0xcb6 <initialize_timer>
		printf("IR: %i\n", read_adc());
	}
	*/

	while(1){
		if(CAN_data_receive()){
     bbc:	d0 db       	rcall	.-2144   	; 0x35e <CAN_data_receive>
     bbe:	88 23       	and	r24, r24
     bc0:	e9 f3       	breq	.-6      	; 0xbbc <main+0x14>
			if(CAN_message_receive()->id == CAN_GAME_PARAMS_ID){
     bc2:	02 db       	rcall	.-2556   	; 0x1c8 <CAN_message_receive>
     bc4:	fc 01       	movw	r30, r24
     bc6:	80 81       	ld	r24, Z
     bc8:	91 81       	ldd	r25, Z+1	; 0x01
     bca:	0a 97       	sbiw	r24, 0x0a	; 10
     bcc:	31 f4       	brne	.+12     	; 0xbda <main+0x32>
				game_init(CAN_message_receive()->data);
     bce:	fc da       	rcall	.-2568   	; 0x1c8 <CAN_message_receive>
     bd0:	03 96       	adiw	r24, 0x03	; 3
     bd2:	21 dd       	rcall	.-1470   	; 0x616 <game_init>
				printf("Game initialized...\n");
     bd4:	8a e1       	ldi	r24, 0x1A	; 26
     bd6:	93 e0       	ldi	r25, 0x03	; 3
     bd8:	60 d4       	rcall	.+2240   	; 0x149a <puts>
			}
			
			if(CAN_message_receive()->id == CAN_GAME_CONTROL_ID){
     bda:	f6 da       	rcall	.-2580   	; 0x1c8 <CAN_message_receive>
     bdc:	fc 01       	movw	r30, r24
     bde:	80 81       	ld	r24, Z
     be0:	91 81       	ldd	r25, Z+1	; 0x01
     be2:	44 97       	sbiw	r24, 0x14	; 20
     be4:	59 f7       	brne	.-42     	; 0xbbc <main+0x14>
				uint8_t score[CAN_GAME_SCORE_LENGTH];
				score[0] = game_play();
     be6:	70 dd       	rcall	.-1312   	; 0x6c8 <game_play>
     be8:	89 83       	std	Y+1, r24	; 0x01
				//Send score to Node1
				CAN_construct_message(CAN_GAME_SCORE_ID, CAN_GAME_SCORE_LENGTH);
     bea:	62 e0       	ldi	r22, 0x02	; 2
     bec:	8e e1       	ldi	r24, 0x1E	; 30
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	ee da       	rcall	.-2596   	; 0x1ce <CAN_construct_message>
				CAN_message_send(score,0);
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	ce 01       	movw	r24, r28
     bf6:	01 96       	adiw	r24, 0x01	; 1
     bf8:	74 dc       	rcall	.-1816   	; 0x4e2 <CAN_message_send>
     bfa:	e0 cf       	rjmp	.-64     	; 0xbbc <main+0x14>

00000bfc <pwm_set_pulse_width>:
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	PWM_OCRnA = (int)(SCALAR_IN_MS * val);
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	4a e7       	ldi	r20, 0x7A	; 122
     c02:	51 e4       	ldi	r21, 0x41	; 65
     c04:	53 d3       	rcall	.+1702   	; 0x12ac <__mulsf3>
     c06:	6b d2       	rcall	.+1238   	; 0x10de <__fixsfsi>
     c08:	70 93 99 00 	sts	0x0099, r23
     c0c:	60 93 98 00 	sts	0x0098, r22
     c10:	08 95       	ret

00000c12 <pwm_set_period>:
}

void pwm_set_period(double period){
	PWM_ICRn = (int)(SCALAR_IN_MS * period);
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	4a e7       	ldi	r20, 0x7A	; 122
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	48 d3       	rcall	.+1680   	; 0x12ac <__mulsf3>
     c1c:	60 d2       	rcall	.+1216   	; 0x10de <__fixsfsi>
     c1e:	70 93 97 00 	sts	0x0097, r23
     c22:	60 93 96 00 	sts	0x0096, r22
     c26:	08 95       	ret

00000c28 <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	PWM_DDR |= (1 << PWM_PIN);
     c28:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	PWM_TCCRnA &= ~(1<<WGM30);
     c2a:	e0 e9       	ldi	r30, 0x90	; 144
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	20 81       	ld	r18, Z
     c30:	2e 7f       	andi	r18, 0xFE	; 254
     c32:	20 83       	st	Z, r18
	PWM_TCCRnA |= (1<<WGM31);
     c34:	20 81       	ld	r18, Z
     c36:	22 60       	ori	r18, 0x02	; 2
     c38:	20 83       	st	Z, r18
	PWM_TCCRnB |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
     c3a:	a1 e9       	ldi	r26, 0x91	; 145
     c3c:	b0 e0       	ldi	r27, 0x00	; 0
     c3e:	2c 91       	ld	r18, X
     c40:	28 61       	ori	r18, 0x18	; 24
     c42:	2c 93       	st	X, r18
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	PWM_TCCRnA |= (1<<COM3A1);
     c44:	20 81       	ld	r18, Z
     c46:	20 68       	ori	r18, 0x80	; 128
     c48:	20 83       	st	Z, r18
	PWM_TCCRnA &= ~(1<<COM3A0);
     c4a:	20 81       	ld	r18, Z
     c4c:	2f 7b       	andi	r18, 0xBF	; 191
     c4e:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	PWM_TCCRnB |= (1<<CS32) | (1<<CS30);
     c50:	2c 91       	ld	r18, X
     c52:	25 60       	ori	r18, 0x05	; 5
     c54:	2c 93       	st	X, r18
	PWM_TCCRnB &= ~(1<<CS31);
     c56:	2c 91       	ld	r18, X
     c58:	2d 7f       	andi	r18, 0xFD	; 253
     c5a:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
     c5c:	da cf       	rjmp	.-76     	; 0xc12 <pwm_set_period>
     c5e:	08 95       	ret

00000c60 <solenoid_init>:
#include "timer.h"

uint16_t solenoid_loaded;

void solenoid_init(void){
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     c60:	27 9a       	sbi	0x04, 7	; 4
	solenoid_loaded = 0;
     c62:	10 92 8b 03 	sts	0x038B, r1
     c66:	10 92 8a 03 	sts	0x038A, r1
     c6a:	08 95       	ret

00000c6c <solenoid_disable>:
}

void solenoid_disable(void){
	SOLENOID_PORT |= (1<< SOLENOID_PIN);
     c6c:	2f 9a       	sbi	0x05, 7	; 5
     c6e:	08 95       	ret

00000c70 <solenoid_enable>:
}

void solenoid_enable(void){
	SOLENOID_PORT &= ~(1<< SOLENOID_PIN);
     c70:	2f 98       	cbi	0x05, 7	; 5
     c72:	08 95       	ret

00000c74 <solenoid_reloaded>:
		solenoid_loaded = timestamp(SOLENOID_REALOAD);
	}
}

uint8_t solenoid_reloaded(void){
	if (check_timestamp(solenoid_loaded))
     c74:	80 91 8a 03 	lds	r24, 0x038A
     c78:	90 91 8b 03 	lds	r25, 0x038B
     c7c:	a1 d0       	rcall	.+322    	; 0xdc0 <check_timestamp>
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	81 11       	cpse	r24, r1
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <solenoid_reloaded+0x12>
     c84:	90 e0       	ldi	r25, 0x00	; 0
	{
		return 1;
	}
	return 0;
}
     c86:	89 2f       	mov	r24, r25
     c88:	08 95       	ret

00000c8a <solenoid_fire>:
void solenoid_enable(void){
	SOLENOID_PORT &= ~(1<< SOLENOID_PIN);
}

void solenoid_fire(void){
	if (solenoid_reloaded())
     c8a:	f4 df       	rcall	.-24     	; 0xc74 <solenoid_reloaded>
     c8c:	88 23       	and	r24, r24
     c8e:	91 f0       	breq	.+36     	; 0xcb4 <solenoid_fire+0x2a>
	{
		solenoid_enable();
     c90:	ef df       	rcall	.-34     	; 0xc70 <solenoid_enable>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c92:	2f ef       	ldi	r18, 0xFF	; 255
     c94:	89 ef       	ldi	r24, 0xF9	; 249
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	21 50       	subi	r18, 0x01	; 1
     c9a:	80 40       	sbci	r24, 0x00	; 0
     c9c:	90 40       	sbci	r25, 0x00	; 0
     c9e:	e1 f7       	brne	.-8      	; 0xc98 <solenoid_fire+0xe>
     ca0:	00 c0       	rjmp	.+0      	; 0xca2 <solenoid_fire+0x18>
     ca2:	00 00       	nop
		_delay_ms(20);
		solenoid_disable();
     ca4:	e3 df       	rcall	.-58     	; 0xc6c <solenoid_disable>
		solenoid_loaded = timestamp(SOLENOID_REALOAD);
     ca6:	84 ef       	ldi	r24, 0xF4	; 244
     ca8:	91 e0       	ldi	r25, 0x01	; 1
     caa:	7d d0       	rcall	.+250    	; 0xda6 <timestamp>
     cac:	90 93 8b 03 	sts	0x038B, r25
     cb0:	80 93 8a 03 	sts	0x038A, r24
     cb4:	08 95       	ret

00000cb6 <initialize_timer>:
uint64_t n_period;

void initialize_timer(uint16_t timer_freq){
	
	//Enable interrupt. When timer is the same as OCR4A it sends an interrupt.
	TIMSK4 |= (1<<OCIE4A);
     cb6:	e2 e7       	ldi	r30, 0x72	; 114
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	82 60       	ori	r24, 0x02	; 2
     cbe:	80 83       	st	Z, r24
	
	// Reset timer.
	TCNT4 = 0x0000;
     cc0:	10 92 a5 00 	sts	0x00A5, r1
     cc4:	10 92 a4 00 	sts	0x00A4, r1
	
	// Use CTC mode.
	TCCR4B |= (1<<WGM42);
     cc8:	e1 ea       	ldi	r30, 0xA1	; 161
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	88 60       	ori	r24, 0x08	; 8
     cd0:	80 83       	st	Z, r24
	TCCR4B &= ~(1<<WGM43);
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7e       	andi	r24, 0xEF	; 239
     cd6:	80 83       	st	Z, r24
	#elif TIMER_PRESCALER == 64
	TCCR4B |= (1<<CS41)|(1<<CS40);
	#elif TIMER_PRESCALER == 256
	TCCR4B |= (1<<CS42);
	#elif TIMER_PRESCALER == 1024
	TCCR4B |= (1<<CS42)|(1<<CS40);
     cd8:	80 81       	ld	r24, Z
     cda:	85 60       	ori	r24, 0x05	; 5
     cdc:	80 83       	st	Z, r24
	#endif

	// Set counter limit.
	OCR4A = (F_CPU/(TIMER_PRESCALER))/TIMER_FREQ - 1;
     cde:	87 e3       	ldi	r24, 0x37	; 55
     ce0:	91 e0       	ldi	r25, 0x01	; 1
     ce2:	90 93 a9 00 	sts	0x00A9, r25
     ce6:	80 93 a8 00 	sts	0x00A8, r24
	update_flag = 0;
     cea:	10 92 8c 03 	sts	0x038C, r1
	n_period = 0;
     cee:	10 92 8d 03 	sts	0x038D, r1
     cf2:	10 92 8e 03 	sts	0x038E, r1
     cf6:	10 92 8f 03 	sts	0x038F, r1
     cfa:	10 92 90 03 	sts	0x0390, r1
     cfe:	10 92 91 03 	sts	0x0391, r1
     d02:	10 92 92 03 	sts	0x0392, r1
     d06:	10 92 93 03 	sts	0x0393, r1
     d0a:	10 92 94 03 	sts	0x0394, r1
     d0e:	08 95       	ret

00000d10 <__vector_42>:
}

ISR(TIMER4_COMPA_vect){//interrupt when Timer_0 is done, resets itself
     d10:	1f 92       	push	r1
     d12:	0f 92       	push	r0
     d14:	0f b6       	in	r0, 0x3f	; 63
     d16:	0f 92       	push	r0
     d18:	11 24       	eor	r1, r1
     d1a:	2f 93       	push	r18
     d1c:	3f 93       	push	r19
     d1e:	4f 93       	push	r20
     d20:	5f 93       	push	r21
     d22:	6f 93       	push	r22
     d24:	7f 93       	push	r23
     d26:	8f 93       	push	r24
     d28:	9f 93       	push	r25
     d2a:	af 93       	push	r26
	update_flag = 1;
     d2c:	81 e0       	ldi	r24, 0x01	; 1
     d2e:	80 93 8c 03 	sts	0x038C, r24
	n_period++;
     d32:	20 91 8d 03 	lds	r18, 0x038D
     d36:	30 91 8e 03 	lds	r19, 0x038E
     d3a:	40 91 8f 03 	lds	r20, 0x038F
     d3e:	50 91 90 03 	lds	r21, 0x0390
     d42:	60 91 91 03 	lds	r22, 0x0391
     d46:	70 91 92 03 	lds	r23, 0x0392
     d4a:	80 91 93 03 	lds	r24, 0x0393
     d4e:	90 91 94 03 	lds	r25, 0x0394
     d52:	a1 e0       	ldi	r26, 0x01	; 1
     d54:	3b d3       	rcall	.+1654   	; 0x13cc <__adddi3_s8>
     d56:	20 93 8d 03 	sts	0x038D, r18
     d5a:	30 93 8e 03 	sts	0x038E, r19
     d5e:	40 93 8f 03 	sts	0x038F, r20
     d62:	50 93 90 03 	sts	0x0390, r21
     d66:	60 93 91 03 	sts	0x0391, r22
     d6a:	70 93 92 03 	sts	0x0392, r23
     d6e:	80 93 93 03 	sts	0x0393, r24
     d72:	90 93 94 03 	sts	0x0394, r25
	//printf("INT");
	//TIFR4 &= ~(1<<OCF1A);
}
     d76:	af 91       	pop	r26
     d78:	9f 91       	pop	r25
     d7a:	8f 91       	pop	r24
     d7c:	7f 91       	pop	r23
     d7e:	6f 91       	pop	r22
     d80:	5f 91       	pop	r21
     d82:	4f 91       	pop	r20
     d84:	3f 91       	pop	r19
     d86:	2f 91       	pop	r18
     d88:	0f 90       	pop	r0
     d8a:	0f be       	out	0x3f, r0	; 63
     d8c:	0f 90       	pop	r0
     d8e:	1f 90       	pop	r1
     d90:	18 95       	reti

00000d92 <timer_check_flag>:

uint8_t timer_check_flag(void){
	if (update_flag)
     d92:	80 91 8c 03 	lds	r24, 0x038C
     d96:	88 23       	and	r24, r24
     d98:	21 f0       	breq	.+8      	; 0xda2 <timer_check_flag+0x10>
	{
		update_flag = 0;
     d9a:	10 92 8c 03 	sts	0x038C, r1
		return 1;
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	08 95       	ret
	}
	return 0;
     da2:	80 e0       	ldi	r24, 0x00	; 0
}
     da4:	08 95       	ret

00000da6 <timestamp>:

uint16_t timestamp(uint16_t wait_ms){
	return (n_period * (1000 / TIMER_FREQ) + wait_ms);
     da6:	40 91 8d 03 	lds	r20, 0x038D
     daa:	50 91 8e 03 	lds	r21, 0x038E
     dae:	64 e1       	ldi	r22, 0x14	; 20
     db0:	64 9f       	mul	r22, r20
     db2:	90 01       	movw	r18, r0
     db4:	65 9f       	mul	r22, r21
     db6:	30 0d       	add	r19, r0
     db8:	11 24       	eor	r1, r1
}
     dba:	82 0f       	add	r24, r18
     dbc:	93 1f       	adc	r25, r19
     dbe:	08 95       	ret

00000dc0 <check_timestamp>:

uint8_t check_timestamp(uint16_t stamp){
     dc0:	cf 93       	push	r28
     dc2:	df 93       	push	r29
     dc4:	ec 01       	movw	r28, r24
	if (timestamp(0) >= stamp)
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	ed df       	rcall	.-38     	; 0xda6 <timestamp>
     dcc:	21 e0       	ldi	r18, 0x01	; 1
     dce:	8c 17       	cp	r24, r28
     dd0:	9d 07       	cpc	r25, r29
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <check_timestamp+0x16>
     dd4:	20 e0       	ldi	r18, 0x00	; 0
	{
		return 1;
	}
	return 0;
}
     dd6:	82 2f       	mov	r24, r18
     dd8:	df 91       	pop	r29
     dda:	cf 91       	pop	r28
     ddc:	08 95       	ret

00000dde <TWI_Master_Initialise>:
     dde:	8c e0       	ldi	r24, 0x0C	; 12
     de0:	80 93 b8 00 	sts	0x00B8, r24
     de4:	8f ef       	ldi	r24, 0xFF	; 255
     de6:	80 93 bb 00 	sts	0x00BB, r24
     dea:	84 e0       	ldi	r24, 0x04	; 4
     dec:	80 93 bc 00 	sts	0x00BC, r24
     df0:	08 95       	ret

00000df2 <TWI_Start_Transceiver_With_Data>:
     df2:	ec eb       	ldi	r30, 0xBC	; 188
     df4:	f0 e0       	ldi	r31, 0x00	; 0
     df6:	20 81       	ld	r18, Z
     df8:	20 fd       	sbrc	r18, 0
     dfa:	fd cf       	rjmp	.-6      	; 0xdf6 <TWI_Start_Transceiver_With_Data+0x4>
     dfc:	60 93 47 03 	sts	0x0347, r22
     e00:	fc 01       	movw	r30, r24
     e02:	20 81       	ld	r18, Z
     e04:	20 93 48 03 	sts	0x0348, r18
     e08:	20 fd       	sbrc	r18, 0
     e0a:	0c c0       	rjmp	.+24     	; 0xe24 <TWI_Start_Transceiver_With_Data+0x32>
     e0c:	62 30       	cpi	r22, 0x02	; 2
     e0e:	50 f0       	brcs	.+20     	; 0xe24 <TWI_Start_Transceiver_With_Data+0x32>
     e10:	dc 01       	movw	r26, r24
     e12:	11 96       	adiw	r26, 0x01	; 1
     e14:	e9 e4       	ldi	r30, 0x49	; 73
     e16:	f3 e0       	ldi	r31, 0x03	; 3
     e18:	81 e0       	ldi	r24, 0x01	; 1
     e1a:	9d 91       	ld	r25, X+
     e1c:	91 93       	st	Z+, r25
     e1e:	8f 5f       	subi	r24, 0xFF	; 255
     e20:	86 13       	cpse	r24, r22
     e22:	fb cf       	rjmp	.-10     	; 0xe1a <TWI_Start_Transceiver_With_Data+0x28>
     e24:	10 92 46 03 	sts	0x0346, r1
     e28:	88 ef       	ldi	r24, 0xF8	; 248
     e2a:	80 93 06 02 	sts	0x0206, r24
     e2e:	85 ea       	ldi	r24, 0xA5	; 165
     e30:	80 93 bc 00 	sts	0x00BC, r24
     e34:	08 95       	ret

00000e36 <__vector_39>:
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	0b b6       	in	r0, 0x3b	; 59
     e42:	0f 92       	push	r0
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	8f 93       	push	r24
     e4a:	9f 93       	push	r25
     e4c:	af 93       	push	r26
     e4e:	bf 93       	push	r27
     e50:	ef 93       	push	r30
     e52:	ff 93       	push	r31
     e54:	80 91 b9 00 	lds	r24, 0x00B9
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	fc 01       	movw	r30, r24
     e5c:	38 97       	sbiw	r30, 0x08	; 8
     e5e:	e1 35       	cpi	r30, 0x51	; 81
     e60:	f1 05       	cpc	r31, r1
     e62:	08 f0       	brcs	.+2      	; 0xe66 <__vector_39+0x30>
     e64:	55 c0       	rjmp	.+170    	; 0xf10 <__vector_39+0xda>
     e66:	ee 58       	subi	r30, 0x8E	; 142
     e68:	ff 4f       	sbci	r31, 0xFF	; 255
     e6a:	aa c2       	rjmp	.+1364   	; 0x13c0 <__tablejump2__>
     e6c:	10 92 45 03 	sts	0x0345, r1
     e70:	e0 91 45 03 	lds	r30, 0x0345
     e74:	80 91 47 03 	lds	r24, 0x0347
     e78:	e8 17       	cp	r30, r24
     e7a:	70 f4       	brcc	.+28     	; 0xe98 <__vector_39+0x62>
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	8e 0f       	add	r24, r30
     e80:	80 93 45 03 	sts	0x0345, r24
     e84:	f0 e0       	ldi	r31, 0x00	; 0
     e86:	e8 5b       	subi	r30, 0xB8	; 184
     e88:	fc 4f       	sbci	r31, 0xFC	; 252
     e8a:	80 81       	ld	r24, Z
     e8c:	80 93 bb 00 	sts	0x00BB, r24
     e90:	85 e8       	ldi	r24, 0x85	; 133
     e92:	80 93 bc 00 	sts	0x00BC, r24
     e96:	43 c0       	rjmp	.+134    	; 0xf1e <__vector_39+0xe8>
     e98:	80 91 46 03 	lds	r24, 0x0346
     e9c:	81 60       	ori	r24, 0x01	; 1
     e9e:	80 93 46 03 	sts	0x0346, r24
     ea2:	84 e9       	ldi	r24, 0x94	; 148
     ea4:	80 93 bc 00 	sts	0x00BC, r24
     ea8:	3a c0       	rjmp	.+116    	; 0xf1e <__vector_39+0xe8>
     eaa:	e0 91 45 03 	lds	r30, 0x0345
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	8e 0f       	add	r24, r30
     eb2:	80 93 45 03 	sts	0x0345, r24
     eb6:	80 91 bb 00 	lds	r24, 0x00BB
     eba:	f0 e0       	ldi	r31, 0x00	; 0
     ebc:	e8 5b       	subi	r30, 0xB8	; 184
     ebe:	fc 4f       	sbci	r31, 0xFC	; 252
     ec0:	80 83       	st	Z, r24
     ec2:	20 91 45 03 	lds	r18, 0x0345
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	80 91 47 03 	lds	r24, 0x0347
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	28 17       	cp	r18, r24
     ed2:	39 07       	cpc	r19, r25
     ed4:	24 f4       	brge	.+8      	; 0xede <__vector_39+0xa8>
     ed6:	85 ec       	ldi	r24, 0xC5	; 197
     ed8:	80 93 bc 00 	sts	0x00BC, r24
     edc:	20 c0       	rjmp	.+64     	; 0xf1e <__vector_39+0xe8>
     ede:	85 e8       	ldi	r24, 0x85	; 133
     ee0:	80 93 bc 00 	sts	0x00BC, r24
     ee4:	1c c0       	rjmp	.+56     	; 0xf1e <__vector_39+0xe8>
     ee6:	80 91 bb 00 	lds	r24, 0x00BB
     eea:	e0 91 45 03 	lds	r30, 0x0345
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	e8 5b       	subi	r30, 0xB8	; 184
     ef2:	fc 4f       	sbci	r31, 0xFC	; 252
     ef4:	80 83       	st	Z, r24
     ef6:	80 91 46 03 	lds	r24, 0x0346
     efa:	81 60       	ori	r24, 0x01	; 1
     efc:	80 93 46 03 	sts	0x0346, r24
     f00:	84 e9       	ldi	r24, 0x94	; 148
     f02:	80 93 bc 00 	sts	0x00BC, r24
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <__vector_39+0xe8>
     f08:	85 ea       	ldi	r24, 0xA5	; 165
     f0a:	80 93 bc 00 	sts	0x00BC, r24
     f0e:	07 c0       	rjmp	.+14     	; 0xf1e <__vector_39+0xe8>
     f10:	80 91 b9 00 	lds	r24, 0x00B9
     f14:	80 93 06 02 	sts	0x0206, r24
     f18:	84 e0       	ldi	r24, 0x04	; 4
     f1a:	80 93 bc 00 	sts	0x00BC, r24
     f1e:	ff 91       	pop	r31
     f20:	ef 91       	pop	r30
     f22:	bf 91       	pop	r27
     f24:	af 91       	pop	r26
     f26:	9f 91       	pop	r25
     f28:	8f 91       	pop	r24
     f2a:	3f 91       	pop	r19
     f2c:	2f 91       	pop	r18
     f2e:	0f 90       	pop	r0
     f30:	0b be       	out	0x3b, r0	; 59
     f32:	0f 90       	pop	r0
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	0f 90       	pop	r0
     f38:	1f 90       	pop	r1
     f3a:	18 95       	reti

00000f3c <__subsf3>:
     f3c:	50 58       	subi	r21, 0x80	; 128

00000f3e <__addsf3>:
     f3e:	bb 27       	eor	r27, r27
     f40:	aa 27       	eor	r26, r26
     f42:	0e d0       	rcall	.+28     	; 0xf60 <__addsf3x>
     f44:	75 c1       	rjmp	.+746    	; 0x1230 <__fp_round>
     f46:	66 d1       	rcall	.+716    	; 0x1214 <__fp_pscA>
     f48:	30 f0       	brcs	.+12     	; 0xf56 <__addsf3+0x18>
     f4a:	6b d1       	rcall	.+726    	; 0x1222 <__fp_pscB>
     f4c:	20 f0       	brcs	.+8      	; 0xf56 <__addsf3+0x18>
     f4e:	31 f4       	brne	.+12     	; 0xf5c <__addsf3+0x1e>
     f50:	9f 3f       	cpi	r25, 0xFF	; 255
     f52:	11 f4       	brne	.+4      	; 0xf58 <__addsf3+0x1a>
     f54:	1e f4       	brtc	.+6      	; 0xf5c <__addsf3+0x1e>
     f56:	5b c1       	rjmp	.+694    	; 0x120e <__fp_nan>
     f58:	0e f4       	brtc	.+2      	; 0xf5c <__addsf3+0x1e>
     f5a:	e0 95       	com	r30
     f5c:	e7 fb       	bst	r30, 7
     f5e:	51 c1       	rjmp	.+674    	; 0x1202 <__fp_inf>

00000f60 <__addsf3x>:
     f60:	e9 2f       	mov	r30, r25
     f62:	77 d1       	rcall	.+750    	; 0x1252 <__fp_split3>
     f64:	80 f3       	brcs	.-32     	; 0xf46 <__addsf3+0x8>
     f66:	ba 17       	cp	r27, r26
     f68:	62 07       	cpc	r22, r18
     f6a:	73 07       	cpc	r23, r19
     f6c:	84 07       	cpc	r24, r20
     f6e:	95 07       	cpc	r25, r21
     f70:	18 f0       	brcs	.+6      	; 0xf78 <__addsf3x+0x18>
     f72:	71 f4       	brne	.+28     	; 0xf90 <__addsf3x+0x30>
     f74:	9e f5       	brtc	.+102    	; 0xfdc <__addsf3x+0x7c>
     f76:	8f c1       	rjmp	.+798    	; 0x1296 <__fp_zero>
     f78:	0e f4       	brtc	.+2      	; 0xf7c <__addsf3x+0x1c>
     f7a:	e0 95       	com	r30
     f7c:	0b 2e       	mov	r0, r27
     f7e:	ba 2f       	mov	r27, r26
     f80:	a0 2d       	mov	r26, r0
     f82:	0b 01       	movw	r0, r22
     f84:	b9 01       	movw	r22, r18
     f86:	90 01       	movw	r18, r0
     f88:	0c 01       	movw	r0, r24
     f8a:	ca 01       	movw	r24, r20
     f8c:	a0 01       	movw	r20, r0
     f8e:	11 24       	eor	r1, r1
     f90:	ff 27       	eor	r31, r31
     f92:	59 1b       	sub	r21, r25
     f94:	99 f0       	breq	.+38     	; 0xfbc <__addsf3x+0x5c>
     f96:	59 3f       	cpi	r21, 0xF9	; 249
     f98:	50 f4       	brcc	.+20     	; 0xfae <__addsf3x+0x4e>
     f9a:	50 3e       	cpi	r21, 0xE0	; 224
     f9c:	68 f1       	brcs	.+90     	; 0xff8 <__addsf3x+0x98>
     f9e:	1a 16       	cp	r1, r26
     fa0:	f0 40       	sbci	r31, 0x00	; 0
     fa2:	a2 2f       	mov	r26, r18
     fa4:	23 2f       	mov	r18, r19
     fa6:	34 2f       	mov	r19, r20
     fa8:	44 27       	eor	r20, r20
     faa:	58 5f       	subi	r21, 0xF8	; 248
     fac:	f3 cf       	rjmp	.-26     	; 0xf94 <__addsf3x+0x34>
     fae:	46 95       	lsr	r20
     fb0:	37 95       	ror	r19
     fb2:	27 95       	ror	r18
     fb4:	a7 95       	ror	r26
     fb6:	f0 40       	sbci	r31, 0x00	; 0
     fb8:	53 95       	inc	r21
     fba:	c9 f7       	brne	.-14     	; 0xfae <__addsf3x+0x4e>
     fbc:	7e f4       	brtc	.+30     	; 0xfdc <__addsf3x+0x7c>
     fbe:	1f 16       	cp	r1, r31
     fc0:	ba 0b       	sbc	r27, r26
     fc2:	62 0b       	sbc	r22, r18
     fc4:	73 0b       	sbc	r23, r19
     fc6:	84 0b       	sbc	r24, r20
     fc8:	ba f0       	brmi	.+46     	; 0xff8 <__addsf3x+0x98>
     fca:	91 50       	subi	r25, 0x01	; 1
     fcc:	a1 f0       	breq	.+40     	; 0xff6 <__addsf3x+0x96>
     fce:	ff 0f       	add	r31, r31
     fd0:	bb 1f       	adc	r27, r27
     fd2:	66 1f       	adc	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	88 1f       	adc	r24, r24
     fd8:	c2 f7       	brpl	.-16     	; 0xfca <__addsf3x+0x6a>
     fda:	0e c0       	rjmp	.+28     	; 0xff8 <__addsf3x+0x98>
     fdc:	ba 0f       	add	r27, r26
     fde:	62 1f       	adc	r22, r18
     fe0:	73 1f       	adc	r23, r19
     fe2:	84 1f       	adc	r24, r20
     fe4:	48 f4       	brcc	.+18     	; 0xff8 <__addsf3x+0x98>
     fe6:	87 95       	ror	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	b7 95       	ror	r27
     fee:	f7 95       	ror	r31
     ff0:	9e 3f       	cpi	r25, 0xFE	; 254
     ff2:	08 f0       	brcs	.+2      	; 0xff6 <__addsf3x+0x96>
     ff4:	b3 cf       	rjmp	.-154    	; 0xf5c <__addsf3+0x1e>
     ff6:	93 95       	inc	r25
     ff8:	88 0f       	add	r24, r24
     ffa:	08 f0       	brcs	.+2      	; 0xffe <__addsf3x+0x9e>
     ffc:	99 27       	eor	r25, r25
     ffe:	ee 0f       	add	r30, r30
    1000:	97 95       	ror	r25
    1002:	87 95       	ror	r24
    1004:	08 95       	ret

00001006 <__cmpsf2>:
    1006:	d9 d0       	rcall	.+434    	; 0x11ba <__fp_cmp>
    1008:	08 f4       	brcc	.+2      	; 0x100c <__cmpsf2+0x6>
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	08 95       	ret

0000100e <__divsf3>:
    100e:	0c d0       	rcall	.+24     	; 0x1028 <__divsf3x>
    1010:	0f c1       	rjmp	.+542    	; 0x1230 <__fp_round>
    1012:	07 d1       	rcall	.+526    	; 0x1222 <__fp_pscB>
    1014:	40 f0       	brcs	.+16     	; 0x1026 <__divsf3+0x18>
    1016:	fe d0       	rcall	.+508    	; 0x1214 <__fp_pscA>
    1018:	30 f0       	brcs	.+12     	; 0x1026 <__divsf3+0x18>
    101a:	21 f4       	brne	.+8      	; 0x1024 <__divsf3+0x16>
    101c:	5f 3f       	cpi	r21, 0xFF	; 255
    101e:	19 f0       	breq	.+6      	; 0x1026 <__divsf3+0x18>
    1020:	f0 c0       	rjmp	.+480    	; 0x1202 <__fp_inf>
    1022:	51 11       	cpse	r21, r1
    1024:	39 c1       	rjmp	.+626    	; 0x1298 <__fp_szero>
    1026:	f3 c0       	rjmp	.+486    	; 0x120e <__fp_nan>

00001028 <__divsf3x>:
    1028:	14 d1       	rcall	.+552    	; 0x1252 <__fp_split3>
    102a:	98 f3       	brcs	.-26     	; 0x1012 <__divsf3+0x4>

0000102c <__divsf3_pse>:
    102c:	99 23       	and	r25, r25
    102e:	c9 f3       	breq	.-14     	; 0x1022 <__divsf3+0x14>
    1030:	55 23       	and	r21, r21
    1032:	b1 f3       	breq	.-20     	; 0x1020 <__divsf3+0x12>
    1034:	95 1b       	sub	r25, r21
    1036:	55 0b       	sbc	r21, r21
    1038:	bb 27       	eor	r27, r27
    103a:	aa 27       	eor	r26, r26
    103c:	62 17       	cp	r22, r18
    103e:	73 07       	cpc	r23, r19
    1040:	84 07       	cpc	r24, r20
    1042:	38 f0       	brcs	.+14     	; 0x1052 <__divsf3_pse+0x26>
    1044:	9f 5f       	subi	r25, 0xFF	; 255
    1046:	5f 4f       	sbci	r21, 0xFF	; 255
    1048:	22 0f       	add	r18, r18
    104a:	33 1f       	adc	r19, r19
    104c:	44 1f       	adc	r20, r20
    104e:	aa 1f       	adc	r26, r26
    1050:	a9 f3       	breq	.-22     	; 0x103c <__divsf3_pse+0x10>
    1052:	33 d0       	rcall	.+102    	; 0x10ba <__divsf3_pse+0x8e>
    1054:	0e 2e       	mov	r0, r30
    1056:	3a f0       	brmi	.+14     	; 0x1066 <__divsf3_pse+0x3a>
    1058:	e0 e8       	ldi	r30, 0x80	; 128
    105a:	30 d0       	rcall	.+96     	; 0x10bc <__divsf3_pse+0x90>
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	50 40       	sbci	r21, 0x00	; 0
    1060:	e6 95       	lsr	r30
    1062:	00 1c       	adc	r0, r0
    1064:	ca f7       	brpl	.-14     	; 0x1058 <__divsf3_pse+0x2c>
    1066:	29 d0       	rcall	.+82     	; 0x10ba <__divsf3_pse+0x8e>
    1068:	fe 2f       	mov	r31, r30
    106a:	27 d0       	rcall	.+78     	; 0x10ba <__divsf3_pse+0x8e>
    106c:	66 0f       	add	r22, r22
    106e:	77 1f       	adc	r23, r23
    1070:	88 1f       	adc	r24, r24
    1072:	bb 1f       	adc	r27, r27
    1074:	26 17       	cp	r18, r22
    1076:	37 07       	cpc	r19, r23
    1078:	48 07       	cpc	r20, r24
    107a:	ab 07       	cpc	r26, r27
    107c:	b0 e8       	ldi	r27, 0x80	; 128
    107e:	09 f0       	breq	.+2      	; 0x1082 <__divsf3_pse+0x56>
    1080:	bb 0b       	sbc	r27, r27
    1082:	80 2d       	mov	r24, r0
    1084:	bf 01       	movw	r22, r30
    1086:	ff 27       	eor	r31, r31
    1088:	93 58       	subi	r25, 0x83	; 131
    108a:	5f 4f       	sbci	r21, 0xFF	; 255
    108c:	2a f0       	brmi	.+10     	; 0x1098 <__divsf3_pse+0x6c>
    108e:	9e 3f       	cpi	r25, 0xFE	; 254
    1090:	51 05       	cpc	r21, r1
    1092:	68 f0       	brcs	.+26     	; 0x10ae <__divsf3_pse+0x82>
    1094:	b6 c0       	rjmp	.+364    	; 0x1202 <__fp_inf>
    1096:	00 c1       	rjmp	.+512    	; 0x1298 <__fp_szero>
    1098:	5f 3f       	cpi	r21, 0xFF	; 255
    109a:	ec f3       	brlt	.-6      	; 0x1096 <__divsf3_pse+0x6a>
    109c:	98 3e       	cpi	r25, 0xE8	; 232
    109e:	dc f3       	brlt	.-10     	; 0x1096 <__divsf3_pse+0x6a>
    10a0:	86 95       	lsr	r24
    10a2:	77 95       	ror	r23
    10a4:	67 95       	ror	r22
    10a6:	b7 95       	ror	r27
    10a8:	f7 95       	ror	r31
    10aa:	9f 5f       	subi	r25, 0xFF	; 255
    10ac:	c9 f7       	brne	.-14     	; 0x10a0 <__divsf3_pse+0x74>
    10ae:	88 0f       	add	r24, r24
    10b0:	91 1d       	adc	r25, r1
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret
    10ba:	e1 e0       	ldi	r30, 0x01	; 1
    10bc:	66 0f       	add	r22, r22
    10be:	77 1f       	adc	r23, r23
    10c0:	88 1f       	adc	r24, r24
    10c2:	bb 1f       	adc	r27, r27
    10c4:	62 17       	cp	r22, r18
    10c6:	73 07       	cpc	r23, r19
    10c8:	84 07       	cpc	r24, r20
    10ca:	ba 07       	cpc	r27, r26
    10cc:	20 f0       	brcs	.+8      	; 0x10d6 <__divsf3_pse+0xaa>
    10ce:	62 1b       	sub	r22, r18
    10d0:	73 0b       	sbc	r23, r19
    10d2:	84 0b       	sbc	r24, r20
    10d4:	ba 0b       	sbc	r27, r26
    10d6:	ee 1f       	adc	r30, r30
    10d8:	88 f7       	brcc	.-30     	; 0x10bc <__divsf3_pse+0x90>
    10da:	e0 95       	com	r30
    10dc:	08 95       	ret

000010de <__fixsfsi>:
    10de:	04 d0       	rcall	.+8      	; 0x10e8 <__fixunssfsi>
    10e0:	68 94       	set
    10e2:	b1 11       	cpse	r27, r1
    10e4:	d9 c0       	rjmp	.+434    	; 0x1298 <__fp_szero>
    10e6:	08 95       	ret

000010e8 <__fixunssfsi>:
    10e8:	bc d0       	rcall	.+376    	; 0x1262 <__fp_splitA>
    10ea:	88 f0       	brcs	.+34     	; 0x110e <__fixunssfsi+0x26>
    10ec:	9f 57       	subi	r25, 0x7F	; 127
    10ee:	90 f0       	brcs	.+36     	; 0x1114 <__fixunssfsi+0x2c>
    10f0:	b9 2f       	mov	r27, r25
    10f2:	99 27       	eor	r25, r25
    10f4:	b7 51       	subi	r27, 0x17	; 23
    10f6:	a0 f0       	brcs	.+40     	; 0x1120 <__fixunssfsi+0x38>
    10f8:	d1 f0       	breq	.+52     	; 0x112e <__fixunssfsi+0x46>
    10fa:	66 0f       	add	r22, r22
    10fc:	77 1f       	adc	r23, r23
    10fe:	88 1f       	adc	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	1a f0       	brmi	.+6      	; 0x110a <__fixunssfsi+0x22>
    1104:	ba 95       	dec	r27
    1106:	c9 f7       	brne	.-14     	; 0x10fa <__fixunssfsi+0x12>
    1108:	12 c0       	rjmp	.+36     	; 0x112e <__fixunssfsi+0x46>
    110a:	b1 30       	cpi	r27, 0x01	; 1
    110c:	81 f0       	breq	.+32     	; 0x112e <__fixunssfsi+0x46>
    110e:	c3 d0       	rcall	.+390    	; 0x1296 <__fp_zero>
    1110:	b1 e0       	ldi	r27, 0x01	; 1
    1112:	08 95       	ret
    1114:	c0 c0       	rjmp	.+384    	; 0x1296 <__fp_zero>
    1116:	67 2f       	mov	r22, r23
    1118:	78 2f       	mov	r23, r24
    111a:	88 27       	eor	r24, r24
    111c:	b8 5f       	subi	r27, 0xF8	; 248
    111e:	39 f0       	breq	.+14     	; 0x112e <__fixunssfsi+0x46>
    1120:	b9 3f       	cpi	r27, 0xF9	; 249
    1122:	cc f3       	brlt	.-14     	; 0x1116 <__fixunssfsi+0x2e>
    1124:	86 95       	lsr	r24
    1126:	77 95       	ror	r23
    1128:	67 95       	ror	r22
    112a:	b3 95       	inc	r27
    112c:	d9 f7       	brne	.-10     	; 0x1124 <__fixunssfsi+0x3c>
    112e:	3e f4       	brtc	.+14     	; 0x113e <__fixunssfsi+0x56>
    1130:	90 95       	com	r25
    1132:	80 95       	com	r24
    1134:	70 95       	com	r23
    1136:	61 95       	neg	r22
    1138:	7f 4f       	sbci	r23, 0xFF	; 255
    113a:	8f 4f       	sbci	r24, 0xFF	; 255
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	08 95       	ret

00001140 <__floatunsisf>:
    1140:	e8 94       	clt
    1142:	09 c0       	rjmp	.+18     	; 0x1156 <__floatsisf+0x12>

00001144 <__floatsisf>:
    1144:	97 fb       	bst	r25, 7
    1146:	3e f4       	brtc	.+14     	; 0x1156 <__floatsisf+0x12>
    1148:	90 95       	com	r25
    114a:	80 95       	com	r24
    114c:	70 95       	com	r23
    114e:	61 95       	neg	r22
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	99 23       	and	r25, r25
    1158:	a9 f0       	breq	.+42     	; 0x1184 <__floatsisf+0x40>
    115a:	f9 2f       	mov	r31, r25
    115c:	96 e9       	ldi	r25, 0x96	; 150
    115e:	bb 27       	eor	r27, r27
    1160:	93 95       	inc	r25
    1162:	f6 95       	lsr	r31
    1164:	87 95       	ror	r24
    1166:	77 95       	ror	r23
    1168:	67 95       	ror	r22
    116a:	b7 95       	ror	r27
    116c:	f1 11       	cpse	r31, r1
    116e:	f8 cf       	rjmp	.-16     	; 0x1160 <__floatsisf+0x1c>
    1170:	fa f4       	brpl	.+62     	; 0x11b0 <__floatsisf+0x6c>
    1172:	bb 0f       	add	r27, r27
    1174:	11 f4       	brne	.+4      	; 0x117a <__floatsisf+0x36>
    1176:	60 ff       	sbrs	r22, 0
    1178:	1b c0       	rjmp	.+54     	; 0x11b0 <__floatsisf+0x6c>
    117a:	6f 5f       	subi	r22, 0xFF	; 255
    117c:	7f 4f       	sbci	r23, 0xFF	; 255
    117e:	8f 4f       	sbci	r24, 0xFF	; 255
    1180:	9f 4f       	sbci	r25, 0xFF	; 255
    1182:	16 c0       	rjmp	.+44     	; 0x11b0 <__floatsisf+0x6c>
    1184:	88 23       	and	r24, r24
    1186:	11 f0       	breq	.+4      	; 0x118c <__floatsisf+0x48>
    1188:	96 e9       	ldi	r25, 0x96	; 150
    118a:	11 c0       	rjmp	.+34     	; 0x11ae <__floatsisf+0x6a>
    118c:	77 23       	and	r23, r23
    118e:	21 f0       	breq	.+8      	; 0x1198 <__floatsisf+0x54>
    1190:	9e e8       	ldi	r25, 0x8E	; 142
    1192:	87 2f       	mov	r24, r23
    1194:	76 2f       	mov	r23, r22
    1196:	05 c0       	rjmp	.+10     	; 0x11a2 <__floatsisf+0x5e>
    1198:	66 23       	and	r22, r22
    119a:	71 f0       	breq	.+28     	; 0x11b8 <__floatsisf+0x74>
    119c:	96 e8       	ldi	r25, 0x86	; 134
    119e:	86 2f       	mov	r24, r22
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	60 e0       	ldi	r22, 0x00	; 0
    11a4:	2a f0       	brmi	.+10     	; 0x11b0 <__floatsisf+0x6c>
    11a6:	9a 95       	dec	r25
    11a8:	66 0f       	add	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	da f7       	brpl	.-10     	; 0x11a6 <__floatsisf+0x62>
    11b0:	88 0f       	add	r24, r24
    11b2:	96 95       	lsr	r25
    11b4:	87 95       	ror	r24
    11b6:	97 f9       	bld	r25, 7
    11b8:	08 95       	ret

000011ba <__fp_cmp>:
    11ba:	99 0f       	add	r25, r25
    11bc:	00 08       	sbc	r0, r0
    11be:	55 0f       	add	r21, r21
    11c0:	aa 0b       	sbc	r26, r26
    11c2:	e0 e8       	ldi	r30, 0x80	; 128
    11c4:	fe ef       	ldi	r31, 0xFE	; 254
    11c6:	16 16       	cp	r1, r22
    11c8:	17 06       	cpc	r1, r23
    11ca:	e8 07       	cpc	r30, r24
    11cc:	f9 07       	cpc	r31, r25
    11ce:	c0 f0       	brcs	.+48     	; 0x1200 <__fp_cmp+0x46>
    11d0:	12 16       	cp	r1, r18
    11d2:	13 06       	cpc	r1, r19
    11d4:	e4 07       	cpc	r30, r20
    11d6:	f5 07       	cpc	r31, r21
    11d8:	98 f0       	brcs	.+38     	; 0x1200 <__fp_cmp+0x46>
    11da:	62 1b       	sub	r22, r18
    11dc:	73 0b       	sbc	r23, r19
    11de:	84 0b       	sbc	r24, r20
    11e0:	95 0b       	sbc	r25, r21
    11e2:	39 f4       	brne	.+14     	; 0x11f2 <__fp_cmp+0x38>
    11e4:	0a 26       	eor	r0, r26
    11e6:	61 f0       	breq	.+24     	; 0x1200 <__fp_cmp+0x46>
    11e8:	23 2b       	or	r18, r19
    11ea:	24 2b       	or	r18, r20
    11ec:	25 2b       	or	r18, r21
    11ee:	21 f4       	brne	.+8      	; 0x11f8 <__fp_cmp+0x3e>
    11f0:	08 95       	ret
    11f2:	0a 26       	eor	r0, r26
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <__fp_cmp+0x3e>
    11f6:	a1 40       	sbci	r26, 0x01	; 1
    11f8:	a6 95       	lsr	r26
    11fa:	8f ef       	ldi	r24, 0xFF	; 255
    11fc:	81 1d       	adc	r24, r1
    11fe:	81 1d       	adc	r24, r1
    1200:	08 95       	ret

00001202 <__fp_inf>:
    1202:	97 f9       	bld	r25, 7
    1204:	9f 67       	ori	r25, 0x7F	; 127
    1206:	80 e8       	ldi	r24, 0x80	; 128
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	08 95       	ret

0000120e <__fp_nan>:
    120e:	9f ef       	ldi	r25, 0xFF	; 255
    1210:	80 ec       	ldi	r24, 0xC0	; 192
    1212:	08 95       	ret

00001214 <__fp_pscA>:
    1214:	00 24       	eor	r0, r0
    1216:	0a 94       	dec	r0
    1218:	16 16       	cp	r1, r22
    121a:	17 06       	cpc	r1, r23
    121c:	18 06       	cpc	r1, r24
    121e:	09 06       	cpc	r0, r25
    1220:	08 95       	ret

00001222 <__fp_pscB>:
    1222:	00 24       	eor	r0, r0
    1224:	0a 94       	dec	r0
    1226:	12 16       	cp	r1, r18
    1228:	13 06       	cpc	r1, r19
    122a:	14 06       	cpc	r1, r20
    122c:	05 06       	cpc	r0, r21
    122e:	08 95       	ret

00001230 <__fp_round>:
    1230:	09 2e       	mov	r0, r25
    1232:	03 94       	inc	r0
    1234:	00 0c       	add	r0, r0
    1236:	11 f4       	brne	.+4      	; 0x123c <__fp_round+0xc>
    1238:	88 23       	and	r24, r24
    123a:	52 f0       	brmi	.+20     	; 0x1250 <__fp_round+0x20>
    123c:	bb 0f       	add	r27, r27
    123e:	40 f4       	brcc	.+16     	; 0x1250 <__fp_round+0x20>
    1240:	bf 2b       	or	r27, r31
    1242:	11 f4       	brne	.+4      	; 0x1248 <__fp_round+0x18>
    1244:	60 ff       	sbrs	r22, 0
    1246:	04 c0       	rjmp	.+8      	; 0x1250 <__fp_round+0x20>
    1248:	6f 5f       	subi	r22, 0xFF	; 255
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	8f 4f       	sbci	r24, 0xFF	; 255
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	08 95       	ret

00001252 <__fp_split3>:
    1252:	57 fd       	sbrc	r21, 7
    1254:	90 58       	subi	r25, 0x80	; 128
    1256:	44 0f       	add	r20, r20
    1258:	55 1f       	adc	r21, r21
    125a:	59 f0       	breq	.+22     	; 0x1272 <__fp_splitA+0x10>
    125c:	5f 3f       	cpi	r21, 0xFF	; 255
    125e:	71 f0       	breq	.+28     	; 0x127c <__fp_splitA+0x1a>
    1260:	47 95       	ror	r20

00001262 <__fp_splitA>:
    1262:	88 0f       	add	r24, r24
    1264:	97 fb       	bst	r25, 7
    1266:	99 1f       	adc	r25, r25
    1268:	61 f0       	breq	.+24     	; 0x1282 <__fp_splitA+0x20>
    126a:	9f 3f       	cpi	r25, 0xFF	; 255
    126c:	79 f0       	breq	.+30     	; 0x128c <__fp_splitA+0x2a>
    126e:	87 95       	ror	r24
    1270:	08 95       	ret
    1272:	12 16       	cp	r1, r18
    1274:	13 06       	cpc	r1, r19
    1276:	14 06       	cpc	r1, r20
    1278:	55 1f       	adc	r21, r21
    127a:	f2 cf       	rjmp	.-28     	; 0x1260 <__fp_split3+0xe>
    127c:	46 95       	lsr	r20
    127e:	f1 df       	rcall	.-30     	; 0x1262 <__fp_splitA>
    1280:	08 c0       	rjmp	.+16     	; 0x1292 <__fp_splitA+0x30>
    1282:	16 16       	cp	r1, r22
    1284:	17 06       	cpc	r1, r23
    1286:	18 06       	cpc	r1, r24
    1288:	99 1f       	adc	r25, r25
    128a:	f1 cf       	rjmp	.-30     	; 0x126e <__fp_splitA+0xc>
    128c:	86 95       	lsr	r24
    128e:	71 05       	cpc	r23, r1
    1290:	61 05       	cpc	r22, r1
    1292:	08 94       	sec
    1294:	08 95       	ret

00001296 <__fp_zero>:
    1296:	e8 94       	clt

00001298 <__fp_szero>:
    1298:	bb 27       	eor	r27, r27
    129a:	66 27       	eor	r22, r22
    129c:	77 27       	eor	r23, r23
    129e:	cb 01       	movw	r24, r22
    12a0:	97 f9       	bld	r25, 7
    12a2:	08 95       	ret

000012a4 <__gesf2>:
    12a4:	8a df       	rcall	.-236    	; 0x11ba <__fp_cmp>
    12a6:	08 f4       	brcc	.+2      	; 0x12aa <__gesf2+0x6>
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	08 95       	ret

000012ac <__mulsf3>:
    12ac:	0b d0       	rcall	.+22     	; 0x12c4 <__mulsf3x>
    12ae:	c0 cf       	rjmp	.-128    	; 0x1230 <__fp_round>
    12b0:	b1 df       	rcall	.-158    	; 0x1214 <__fp_pscA>
    12b2:	28 f0       	brcs	.+10     	; 0x12be <__mulsf3+0x12>
    12b4:	b6 df       	rcall	.-148    	; 0x1222 <__fp_pscB>
    12b6:	18 f0       	brcs	.+6      	; 0x12be <__mulsf3+0x12>
    12b8:	95 23       	and	r25, r21
    12ba:	09 f0       	breq	.+2      	; 0x12be <__mulsf3+0x12>
    12bc:	a2 cf       	rjmp	.-188    	; 0x1202 <__fp_inf>
    12be:	a7 cf       	rjmp	.-178    	; 0x120e <__fp_nan>
    12c0:	11 24       	eor	r1, r1
    12c2:	ea cf       	rjmp	.-44     	; 0x1298 <__fp_szero>

000012c4 <__mulsf3x>:
    12c4:	c6 df       	rcall	.-116    	; 0x1252 <__fp_split3>
    12c6:	a0 f3       	brcs	.-24     	; 0x12b0 <__mulsf3+0x4>

000012c8 <__mulsf3_pse>:
    12c8:	95 9f       	mul	r25, r21
    12ca:	d1 f3       	breq	.-12     	; 0x12c0 <__mulsf3+0x14>
    12cc:	95 0f       	add	r25, r21
    12ce:	50 e0       	ldi	r21, 0x00	; 0
    12d0:	55 1f       	adc	r21, r21
    12d2:	62 9f       	mul	r22, r18
    12d4:	f0 01       	movw	r30, r0
    12d6:	72 9f       	mul	r23, r18
    12d8:	bb 27       	eor	r27, r27
    12da:	f0 0d       	add	r31, r0
    12dc:	b1 1d       	adc	r27, r1
    12de:	63 9f       	mul	r22, r19
    12e0:	aa 27       	eor	r26, r26
    12e2:	f0 0d       	add	r31, r0
    12e4:	b1 1d       	adc	r27, r1
    12e6:	aa 1f       	adc	r26, r26
    12e8:	64 9f       	mul	r22, r20
    12ea:	66 27       	eor	r22, r22
    12ec:	b0 0d       	add	r27, r0
    12ee:	a1 1d       	adc	r26, r1
    12f0:	66 1f       	adc	r22, r22
    12f2:	82 9f       	mul	r24, r18
    12f4:	22 27       	eor	r18, r18
    12f6:	b0 0d       	add	r27, r0
    12f8:	a1 1d       	adc	r26, r1
    12fa:	62 1f       	adc	r22, r18
    12fc:	73 9f       	mul	r23, r19
    12fe:	b0 0d       	add	r27, r0
    1300:	a1 1d       	adc	r26, r1
    1302:	62 1f       	adc	r22, r18
    1304:	83 9f       	mul	r24, r19
    1306:	a0 0d       	add	r26, r0
    1308:	61 1d       	adc	r22, r1
    130a:	22 1f       	adc	r18, r18
    130c:	74 9f       	mul	r23, r20
    130e:	33 27       	eor	r19, r19
    1310:	a0 0d       	add	r26, r0
    1312:	61 1d       	adc	r22, r1
    1314:	23 1f       	adc	r18, r19
    1316:	84 9f       	mul	r24, r20
    1318:	60 0d       	add	r22, r0
    131a:	21 1d       	adc	r18, r1
    131c:	82 2f       	mov	r24, r18
    131e:	76 2f       	mov	r23, r22
    1320:	6a 2f       	mov	r22, r26
    1322:	11 24       	eor	r1, r1
    1324:	9f 57       	subi	r25, 0x7F	; 127
    1326:	50 40       	sbci	r21, 0x00	; 0
    1328:	8a f0       	brmi	.+34     	; 0x134c <__mulsf3_pse+0x84>
    132a:	e1 f0       	breq	.+56     	; 0x1364 <__mulsf3_pse+0x9c>
    132c:	88 23       	and	r24, r24
    132e:	4a f0       	brmi	.+18     	; 0x1342 <__mulsf3_pse+0x7a>
    1330:	ee 0f       	add	r30, r30
    1332:	ff 1f       	adc	r31, r31
    1334:	bb 1f       	adc	r27, r27
    1336:	66 1f       	adc	r22, r22
    1338:	77 1f       	adc	r23, r23
    133a:	88 1f       	adc	r24, r24
    133c:	91 50       	subi	r25, 0x01	; 1
    133e:	50 40       	sbci	r21, 0x00	; 0
    1340:	a9 f7       	brne	.-22     	; 0x132c <__mulsf3_pse+0x64>
    1342:	9e 3f       	cpi	r25, 0xFE	; 254
    1344:	51 05       	cpc	r21, r1
    1346:	70 f0       	brcs	.+28     	; 0x1364 <__mulsf3_pse+0x9c>
    1348:	5c cf       	rjmp	.-328    	; 0x1202 <__fp_inf>
    134a:	a6 cf       	rjmp	.-180    	; 0x1298 <__fp_szero>
    134c:	5f 3f       	cpi	r21, 0xFF	; 255
    134e:	ec f3       	brlt	.-6      	; 0x134a <__mulsf3_pse+0x82>
    1350:	98 3e       	cpi	r25, 0xE8	; 232
    1352:	dc f3       	brlt	.-10     	; 0x134a <__mulsf3_pse+0x82>
    1354:	86 95       	lsr	r24
    1356:	77 95       	ror	r23
    1358:	67 95       	ror	r22
    135a:	b7 95       	ror	r27
    135c:	f7 95       	ror	r31
    135e:	e7 95       	ror	r30
    1360:	9f 5f       	subi	r25, 0xFF	; 255
    1362:	c1 f7       	brne	.-16     	; 0x1354 <__mulsf3_pse+0x8c>
    1364:	fe 2b       	or	r31, r30
    1366:	88 0f       	add	r24, r24
    1368:	91 1d       	adc	r25, r1
    136a:	96 95       	lsr	r25
    136c:	87 95       	ror	r24
    136e:	97 f9       	bld	r25, 7
    1370:	08 95       	ret

00001372 <__udivmodhi4>:
    1372:	aa 1b       	sub	r26, r26
    1374:	bb 1b       	sub	r27, r27
    1376:	51 e1       	ldi	r21, 0x11	; 17
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <__udivmodhi4_ep>

0000137a <__udivmodhi4_loop>:
    137a:	aa 1f       	adc	r26, r26
    137c:	bb 1f       	adc	r27, r27
    137e:	a6 17       	cp	r26, r22
    1380:	b7 07       	cpc	r27, r23
    1382:	10 f0       	brcs	.+4      	; 0x1388 <__udivmodhi4_ep>
    1384:	a6 1b       	sub	r26, r22
    1386:	b7 0b       	sbc	r27, r23

00001388 <__udivmodhi4_ep>:
    1388:	88 1f       	adc	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	5a 95       	dec	r21
    138e:	a9 f7       	brne	.-22     	; 0x137a <__udivmodhi4_loop>
    1390:	80 95       	com	r24
    1392:	90 95       	com	r25
    1394:	bc 01       	movw	r22, r24
    1396:	cd 01       	movw	r24, r26
    1398:	08 95       	ret

0000139a <__divmodhi4>:
    139a:	97 fb       	bst	r25, 7
    139c:	07 2e       	mov	r0, r23
    139e:	16 f4       	brtc	.+4      	; 0x13a4 <__divmodhi4+0xa>
    13a0:	00 94       	com	r0
    13a2:	06 d0       	rcall	.+12     	; 0x13b0 <__divmodhi4_neg1>
    13a4:	77 fd       	sbrc	r23, 7
    13a6:	08 d0       	rcall	.+16     	; 0x13b8 <__divmodhi4_neg2>
    13a8:	e4 df       	rcall	.-56     	; 0x1372 <__udivmodhi4>
    13aa:	07 fc       	sbrc	r0, 7
    13ac:	05 d0       	rcall	.+10     	; 0x13b8 <__divmodhi4_neg2>
    13ae:	3e f4       	brtc	.+14     	; 0x13be <__divmodhi4_exit>

000013b0 <__divmodhi4_neg1>:
    13b0:	90 95       	com	r25
    13b2:	81 95       	neg	r24
    13b4:	9f 4f       	sbci	r25, 0xFF	; 255
    13b6:	08 95       	ret

000013b8 <__divmodhi4_neg2>:
    13b8:	70 95       	com	r23
    13ba:	61 95       	neg	r22
    13bc:	7f 4f       	sbci	r23, 0xFF	; 255

000013be <__divmodhi4_exit>:
    13be:	08 95       	ret

000013c0 <__tablejump2__>:
    13c0:	ee 0f       	add	r30, r30
    13c2:	ff 1f       	adc	r31, r31

000013c4 <__tablejump__>:
    13c4:	05 90       	lpm	r0, Z+
    13c6:	f4 91       	lpm	r31, Z
    13c8:	e0 2d       	mov	r30, r0
    13ca:	19 94       	eijmp

000013cc <__adddi3_s8>:
    13cc:	00 24       	eor	r0, r0
    13ce:	a7 fd       	sbrc	r26, 7
    13d0:	00 94       	com	r0
    13d2:	2a 0f       	add	r18, r26
    13d4:	30 1d       	adc	r19, r0
    13d6:	40 1d       	adc	r20, r0
    13d8:	50 1d       	adc	r21, r0
    13da:	60 1d       	adc	r22, r0
    13dc:	70 1d       	adc	r23, r0
    13de:	80 1d       	adc	r24, r0
    13e0:	90 1d       	adc	r25, r0
    13e2:	08 95       	ret

000013e4 <fdevopen>:
    13e4:	0f 93       	push	r16
    13e6:	1f 93       	push	r17
    13e8:	cf 93       	push	r28
    13ea:	df 93       	push	r29
    13ec:	ec 01       	movw	r28, r24
    13ee:	8b 01       	movw	r16, r22
    13f0:	00 97       	sbiw	r24, 0x00	; 0
    13f2:	31 f4       	brne	.+12     	; 0x1400 <fdevopen+0x1c>
    13f4:	61 15       	cp	r22, r1
    13f6:	71 05       	cpc	r23, r1
    13f8:	19 f4       	brne	.+6      	; 0x1400 <fdevopen+0x1c>
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	37 c0       	rjmp	.+110    	; 0x146e <fdevopen+0x8a>
    1400:	6e e0       	ldi	r22, 0x0E	; 14
    1402:	70 e0       	ldi	r23, 0x00	; 0
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	63 d2       	rcall	.+1222   	; 0x18d0 <calloc>
    140a:	fc 01       	movw	r30, r24
    140c:	00 97       	sbiw	r24, 0x00	; 0
    140e:	a9 f3       	breq	.-22     	; 0x13fa <fdevopen+0x16>
    1410:	80 e8       	ldi	r24, 0x80	; 128
    1412:	83 83       	std	Z+3, r24	; 0x03
    1414:	01 15       	cp	r16, r1
    1416:	11 05       	cpc	r17, r1
    1418:	71 f0       	breq	.+28     	; 0x1436 <fdevopen+0x52>
    141a:	13 87       	std	Z+11, r17	; 0x0b
    141c:	02 87       	std	Z+10, r16	; 0x0a
    141e:	81 e8       	ldi	r24, 0x81	; 129
    1420:	83 83       	std	Z+3, r24	; 0x03
    1422:	80 91 95 03 	lds	r24, 0x0395
    1426:	90 91 96 03 	lds	r25, 0x0396
    142a:	89 2b       	or	r24, r25
    142c:	21 f4       	brne	.+8      	; 0x1436 <fdevopen+0x52>
    142e:	f0 93 96 03 	sts	0x0396, r31
    1432:	e0 93 95 03 	sts	0x0395, r30
    1436:	20 97       	sbiw	r28, 0x00	; 0
    1438:	c9 f0       	breq	.+50     	; 0x146c <fdevopen+0x88>
    143a:	d1 87       	std	Z+9, r29	; 0x09
    143c:	c0 87       	std	Z+8, r28	; 0x08
    143e:	83 81       	ldd	r24, Z+3	; 0x03
    1440:	82 60       	ori	r24, 0x02	; 2
    1442:	83 83       	std	Z+3, r24	; 0x03
    1444:	80 91 97 03 	lds	r24, 0x0397
    1448:	90 91 98 03 	lds	r25, 0x0398
    144c:	89 2b       	or	r24, r25
    144e:	71 f4       	brne	.+28     	; 0x146c <fdevopen+0x88>
    1450:	f0 93 98 03 	sts	0x0398, r31
    1454:	e0 93 97 03 	sts	0x0397, r30
    1458:	80 91 99 03 	lds	r24, 0x0399
    145c:	90 91 9a 03 	lds	r25, 0x039A
    1460:	89 2b       	or	r24, r25
    1462:	21 f4       	brne	.+8      	; 0x146c <fdevopen+0x88>
    1464:	f0 93 9a 03 	sts	0x039A, r31
    1468:	e0 93 99 03 	sts	0x0399, r30
    146c:	cf 01       	movw	r24, r30
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	08 95       	ret

00001478 <printf>:
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62
    1480:	fe 01       	movw	r30, r28
    1482:	36 96       	adiw	r30, 0x06	; 6
    1484:	61 91       	ld	r22, Z+
    1486:	71 91       	ld	r23, Z+
    1488:	af 01       	movw	r20, r30
    148a:	80 91 97 03 	lds	r24, 0x0397
    148e:	90 91 98 03 	lds	r25, 0x0398
    1492:	30 d0       	rcall	.+96     	; 0x14f4 <vfprintf>
    1494:	df 91       	pop	r29
    1496:	cf 91       	pop	r28
    1498:	08 95       	ret

0000149a <puts>:
    149a:	0f 93       	push	r16
    149c:	1f 93       	push	r17
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	e0 91 97 03 	lds	r30, 0x0397
    14a6:	f0 91 98 03 	lds	r31, 0x0398
    14aa:	23 81       	ldd	r18, Z+3	; 0x03
    14ac:	21 ff       	sbrs	r18, 1
    14ae:	1b c0       	rjmp	.+54     	; 0x14e6 <puts+0x4c>
    14b0:	ec 01       	movw	r28, r24
    14b2:	00 e0       	ldi	r16, 0x00	; 0
    14b4:	10 e0       	ldi	r17, 0x00	; 0
    14b6:	89 91       	ld	r24, Y+
    14b8:	60 91 97 03 	lds	r22, 0x0397
    14bc:	70 91 98 03 	lds	r23, 0x0398
    14c0:	db 01       	movw	r26, r22
    14c2:	18 96       	adiw	r26, 0x08	; 8
    14c4:	ed 91       	ld	r30, X+
    14c6:	fc 91       	ld	r31, X
    14c8:	19 97       	sbiw	r26, 0x09	; 9
    14ca:	88 23       	and	r24, r24
    14cc:	31 f0       	breq	.+12     	; 0x14da <puts+0x40>
    14ce:	19 95       	eicall
    14d0:	89 2b       	or	r24, r25
    14d2:	89 f3       	breq	.-30     	; 0x14b6 <puts+0x1c>
    14d4:	0f ef       	ldi	r16, 0xFF	; 255
    14d6:	1f ef       	ldi	r17, 0xFF	; 255
    14d8:	ee cf       	rjmp	.-36     	; 0x14b6 <puts+0x1c>
    14da:	8a e0       	ldi	r24, 0x0A	; 10
    14dc:	19 95       	eicall
    14de:	89 2b       	or	r24, r25
    14e0:	11 f4       	brne	.+4      	; 0x14e6 <puts+0x4c>
    14e2:	c8 01       	movw	r24, r16
    14e4:	02 c0       	rjmp	.+4      	; 0x14ea <puts+0x50>
    14e6:	8f ef       	ldi	r24, 0xFF	; 255
    14e8:	9f ef       	ldi	r25, 0xFF	; 255
    14ea:	df 91       	pop	r29
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <vfprintf>:
    14f4:	2f 92       	push	r2
    14f6:	3f 92       	push	r3
    14f8:	4f 92       	push	r4
    14fa:	5f 92       	push	r5
    14fc:	6f 92       	push	r6
    14fe:	7f 92       	push	r7
    1500:	8f 92       	push	r8
    1502:	9f 92       	push	r9
    1504:	af 92       	push	r10
    1506:	bf 92       	push	r11
    1508:	cf 92       	push	r12
    150a:	df 92       	push	r13
    150c:	ef 92       	push	r14
    150e:	ff 92       	push	r15
    1510:	0f 93       	push	r16
    1512:	1f 93       	push	r17
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	cd b7       	in	r28, 0x3d	; 61
    151a:	de b7       	in	r29, 0x3e	; 62
    151c:	2c 97       	sbiw	r28, 0x0c	; 12
    151e:	0f b6       	in	r0, 0x3f	; 63
    1520:	f8 94       	cli
    1522:	de bf       	out	0x3e, r29	; 62
    1524:	0f be       	out	0x3f, r0	; 63
    1526:	cd bf       	out	0x3d, r28	; 61
    1528:	7c 01       	movw	r14, r24
    152a:	6b 01       	movw	r12, r22
    152c:	8a 01       	movw	r16, r20
    152e:	fc 01       	movw	r30, r24
    1530:	17 82       	std	Z+7, r1	; 0x07
    1532:	16 82       	std	Z+6, r1	; 0x06
    1534:	83 81       	ldd	r24, Z+3	; 0x03
    1536:	81 ff       	sbrs	r24, 1
    1538:	b0 c1       	rjmp	.+864    	; 0x189a <vfprintf+0x3a6>
    153a:	ce 01       	movw	r24, r28
    153c:	01 96       	adiw	r24, 0x01	; 1
    153e:	4c 01       	movw	r8, r24
    1540:	f7 01       	movw	r30, r14
    1542:	93 81       	ldd	r25, Z+3	; 0x03
    1544:	f6 01       	movw	r30, r12
    1546:	93 fd       	sbrc	r25, 3
    1548:	85 91       	lpm	r24, Z+
    154a:	93 ff       	sbrs	r25, 3
    154c:	81 91       	ld	r24, Z+
    154e:	6f 01       	movw	r12, r30
    1550:	88 23       	and	r24, r24
    1552:	09 f4       	brne	.+2      	; 0x1556 <vfprintf+0x62>
    1554:	9e c1       	rjmp	.+828    	; 0x1892 <vfprintf+0x39e>
    1556:	85 32       	cpi	r24, 0x25	; 37
    1558:	39 f4       	brne	.+14     	; 0x1568 <vfprintf+0x74>
    155a:	93 fd       	sbrc	r25, 3
    155c:	85 91       	lpm	r24, Z+
    155e:	93 ff       	sbrs	r25, 3
    1560:	81 91       	ld	r24, Z+
    1562:	6f 01       	movw	r12, r30
    1564:	85 32       	cpi	r24, 0x25	; 37
    1566:	21 f4       	brne	.+8      	; 0x1570 <vfprintf+0x7c>
    1568:	b7 01       	movw	r22, r14
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	0f d3       	rcall	.+1566   	; 0x1b8c <fputc>
    156e:	e8 cf       	rjmp	.-48     	; 0x1540 <vfprintf+0x4c>
    1570:	51 2c       	mov	r5, r1
    1572:	31 2c       	mov	r3, r1
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	20 32       	cpi	r18, 0x20	; 32
    1578:	a0 f4       	brcc	.+40     	; 0x15a2 <vfprintf+0xae>
    157a:	8b 32       	cpi	r24, 0x2B	; 43
    157c:	69 f0       	breq	.+26     	; 0x1598 <vfprintf+0xa4>
    157e:	30 f4       	brcc	.+12     	; 0x158c <vfprintf+0x98>
    1580:	80 32       	cpi	r24, 0x20	; 32
    1582:	59 f0       	breq	.+22     	; 0x159a <vfprintf+0xa6>
    1584:	83 32       	cpi	r24, 0x23	; 35
    1586:	69 f4       	brne	.+26     	; 0x15a2 <vfprintf+0xae>
    1588:	20 61       	ori	r18, 0x10	; 16
    158a:	2c c0       	rjmp	.+88     	; 0x15e4 <vfprintf+0xf0>
    158c:	8d 32       	cpi	r24, 0x2D	; 45
    158e:	39 f0       	breq	.+14     	; 0x159e <vfprintf+0xaa>
    1590:	80 33       	cpi	r24, 0x30	; 48
    1592:	39 f4       	brne	.+14     	; 0x15a2 <vfprintf+0xae>
    1594:	21 60       	ori	r18, 0x01	; 1
    1596:	26 c0       	rjmp	.+76     	; 0x15e4 <vfprintf+0xf0>
    1598:	22 60       	ori	r18, 0x02	; 2
    159a:	24 60       	ori	r18, 0x04	; 4
    159c:	23 c0       	rjmp	.+70     	; 0x15e4 <vfprintf+0xf0>
    159e:	28 60       	ori	r18, 0x08	; 8
    15a0:	21 c0       	rjmp	.+66     	; 0x15e4 <vfprintf+0xf0>
    15a2:	27 fd       	sbrc	r18, 7
    15a4:	27 c0       	rjmp	.+78     	; 0x15f4 <vfprintf+0x100>
    15a6:	30 ed       	ldi	r19, 0xD0	; 208
    15a8:	38 0f       	add	r19, r24
    15aa:	3a 30       	cpi	r19, 0x0A	; 10
    15ac:	78 f4       	brcc	.+30     	; 0x15cc <vfprintf+0xd8>
    15ae:	26 ff       	sbrs	r18, 6
    15b0:	06 c0       	rjmp	.+12     	; 0x15be <vfprintf+0xca>
    15b2:	fa e0       	ldi	r31, 0x0A	; 10
    15b4:	5f 9e       	mul	r5, r31
    15b6:	30 0d       	add	r19, r0
    15b8:	11 24       	eor	r1, r1
    15ba:	53 2e       	mov	r5, r19
    15bc:	13 c0       	rjmp	.+38     	; 0x15e4 <vfprintf+0xf0>
    15be:	8a e0       	ldi	r24, 0x0A	; 10
    15c0:	38 9e       	mul	r3, r24
    15c2:	30 0d       	add	r19, r0
    15c4:	11 24       	eor	r1, r1
    15c6:	33 2e       	mov	r3, r19
    15c8:	20 62       	ori	r18, 0x20	; 32
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <vfprintf+0xf0>
    15cc:	8e 32       	cpi	r24, 0x2E	; 46
    15ce:	21 f4       	brne	.+8      	; 0x15d8 <vfprintf+0xe4>
    15d0:	26 fd       	sbrc	r18, 6
    15d2:	5f c1       	rjmp	.+702    	; 0x1892 <vfprintf+0x39e>
    15d4:	20 64       	ori	r18, 0x40	; 64
    15d6:	06 c0       	rjmp	.+12     	; 0x15e4 <vfprintf+0xf0>
    15d8:	8c 36       	cpi	r24, 0x6C	; 108
    15da:	11 f4       	brne	.+4      	; 0x15e0 <vfprintf+0xec>
    15dc:	20 68       	ori	r18, 0x80	; 128
    15de:	02 c0       	rjmp	.+4      	; 0x15e4 <vfprintf+0xf0>
    15e0:	88 36       	cpi	r24, 0x68	; 104
    15e2:	41 f4       	brne	.+16     	; 0x15f4 <vfprintf+0x100>
    15e4:	f6 01       	movw	r30, r12
    15e6:	93 fd       	sbrc	r25, 3
    15e8:	85 91       	lpm	r24, Z+
    15ea:	93 ff       	sbrs	r25, 3
    15ec:	81 91       	ld	r24, Z+
    15ee:	6f 01       	movw	r12, r30
    15f0:	81 11       	cpse	r24, r1
    15f2:	c1 cf       	rjmp	.-126    	; 0x1576 <vfprintf+0x82>
    15f4:	98 2f       	mov	r25, r24
    15f6:	9f 7d       	andi	r25, 0xDF	; 223
    15f8:	95 54       	subi	r25, 0x45	; 69
    15fa:	93 30       	cpi	r25, 0x03	; 3
    15fc:	28 f4       	brcc	.+10     	; 0x1608 <vfprintf+0x114>
    15fe:	0c 5f       	subi	r16, 0xFC	; 252
    1600:	1f 4f       	sbci	r17, 0xFF	; 255
    1602:	ff e3       	ldi	r31, 0x3F	; 63
    1604:	f9 83       	std	Y+1, r31	; 0x01
    1606:	0d c0       	rjmp	.+26     	; 0x1622 <vfprintf+0x12e>
    1608:	83 36       	cpi	r24, 0x63	; 99
    160a:	31 f0       	breq	.+12     	; 0x1618 <vfprintf+0x124>
    160c:	83 37       	cpi	r24, 0x73	; 115
    160e:	71 f0       	breq	.+28     	; 0x162c <vfprintf+0x138>
    1610:	83 35       	cpi	r24, 0x53	; 83
    1612:	09 f0       	breq	.+2      	; 0x1616 <vfprintf+0x122>
    1614:	57 c0       	rjmp	.+174    	; 0x16c4 <vfprintf+0x1d0>
    1616:	21 c0       	rjmp	.+66     	; 0x165a <vfprintf+0x166>
    1618:	f8 01       	movw	r30, r16
    161a:	80 81       	ld	r24, Z
    161c:	89 83       	std	Y+1, r24	; 0x01
    161e:	0e 5f       	subi	r16, 0xFE	; 254
    1620:	1f 4f       	sbci	r17, 0xFF	; 255
    1622:	44 24       	eor	r4, r4
    1624:	43 94       	inc	r4
    1626:	51 2c       	mov	r5, r1
    1628:	54 01       	movw	r10, r8
    162a:	14 c0       	rjmp	.+40     	; 0x1654 <vfprintf+0x160>
    162c:	38 01       	movw	r6, r16
    162e:	f2 e0       	ldi	r31, 0x02	; 2
    1630:	6f 0e       	add	r6, r31
    1632:	71 1c       	adc	r7, r1
    1634:	f8 01       	movw	r30, r16
    1636:	a0 80       	ld	r10, Z
    1638:	b1 80       	ldd	r11, Z+1	; 0x01
    163a:	26 ff       	sbrs	r18, 6
    163c:	03 c0       	rjmp	.+6      	; 0x1644 <vfprintf+0x150>
    163e:	65 2d       	mov	r22, r5
    1640:	70 e0       	ldi	r23, 0x00	; 0
    1642:	02 c0       	rjmp	.+4      	; 0x1648 <vfprintf+0x154>
    1644:	6f ef       	ldi	r22, 0xFF	; 255
    1646:	7f ef       	ldi	r23, 0xFF	; 255
    1648:	c5 01       	movw	r24, r10
    164a:	2c 87       	std	Y+12, r18	; 0x0c
    164c:	94 d2       	rcall	.+1320   	; 0x1b76 <strnlen>
    164e:	2c 01       	movw	r4, r24
    1650:	83 01       	movw	r16, r6
    1652:	2c 85       	ldd	r18, Y+12	; 0x0c
    1654:	2f 77       	andi	r18, 0x7F	; 127
    1656:	22 2e       	mov	r2, r18
    1658:	16 c0       	rjmp	.+44     	; 0x1686 <vfprintf+0x192>
    165a:	38 01       	movw	r6, r16
    165c:	f2 e0       	ldi	r31, 0x02	; 2
    165e:	6f 0e       	add	r6, r31
    1660:	71 1c       	adc	r7, r1
    1662:	f8 01       	movw	r30, r16
    1664:	a0 80       	ld	r10, Z
    1666:	b1 80       	ldd	r11, Z+1	; 0x01
    1668:	26 ff       	sbrs	r18, 6
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <vfprintf+0x17e>
    166c:	65 2d       	mov	r22, r5
    166e:	70 e0       	ldi	r23, 0x00	; 0
    1670:	02 c0       	rjmp	.+4      	; 0x1676 <vfprintf+0x182>
    1672:	6f ef       	ldi	r22, 0xFF	; 255
    1674:	7f ef       	ldi	r23, 0xFF	; 255
    1676:	c5 01       	movw	r24, r10
    1678:	2c 87       	std	Y+12, r18	; 0x0c
    167a:	6b d2       	rcall	.+1238   	; 0x1b52 <strnlen_P>
    167c:	2c 01       	movw	r4, r24
    167e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1680:	20 68       	ori	r18, 0x80	; 128
    1682:	22 2e       	mov	r2, r18
    1684:	83 01       	movw	r16, r6
    1686:	23 fc       	sbrc	r2, 3
    1688:	19 c0       	rjmp	.+50     	; 0x16bc <vfprintf+0x1c8>
    168a:	83 2d       	mov	r24, r3
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	48 16       	cp	r4, r24
    1690:	59 06       	cpc	r5, r25
    1692:	a0 f4       	brcc	.+40     	; 0x16bc <vfprintf+0x1c8>
    1694:	b7 01       	movw	r22, r14
    1696:	80 e2       	ldi	r24, 0x20	; 32
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	78 d2       	rcall	.+1264   	; 0x1b8c <fputc>
    169c:	3a 94       	dec	r3
    169e:	f5 cf       	rjmp	.-22     	; 0x168a <vfprintf+0x196>
    16a0:	f5 01       	movw	r30, r10
    16a2:	27 fc       	sbrc	r2, 7
    16a4:	85 91       	lpm	r24, Z+
    16a6:	27 fe       	sbrs	r2, 7
    16a8:	81 91       	ld	r24, Z+
    16aa:	5f 01       	movw	r10, r30
    16ac:	b7 01       	movw	r22, r14
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	6d d2       	rcall	.+1242   	; 0x1b8c <fputc>
    16b2:	31 10       	cpse	r3, r1
    16b4:	3a 94       	dec	r3
    16b6:	f1 e0       	ldi	r31, 0x01	; 1
    16b8:	4f 1a       	sub	r4, r31
    16ba:	51 08       	sbc	r5, r1
    16bc:	41 14       	cp	r4, r1
    16be:	51 04       	cpc	r5, r1
    16c0:	79 f7       	brne	.-34     	; 0x16a0 <vfprintf+0x1ac>
    16c2:	de c0       	rjmp	.+444    	; 0x1880 <vfprintf+0x38c>
    16c4:	84 36       	cpi	r24, 0x64	; 100
    16c6:	11 f0       	breq	.+4      	; 0x16cc <vfprintf+0x1d8>
    16c8:	89 36       	cpi	r24, 0x69	; 105
    16ca:	31 f5       	brne	.+76     	; 0x1718 <vfprintf+0x224>
    16cc:	f8 01       	movw	r30, r16
    16ce:	27 ff       	sbrs	r18, 7
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <vfprintf+0x1ec>
    16d2:	60 81       	ld	r22, Z
    16d4:	71 81       	ldd	r23, Z+1	; 0x01
    16d6:	82 81       	ldd	r24, Z+2	; 0x02
    16d8:	93 81       	ldd	r25, Z+3	; 0x03
    16da:	0c 5f       	subi	r16, 0xFC	; 252
    16dc:	1f 4f       	sbci	r17, 0xFF	; 255
    16de:	08 c0       	rjmp	.+16     	; 0x16f0 <vfprintf+0x1fc>
    16e0:	60 81       	ld	r22, Z
    16e2:	71 81       	ldd	r23, Z+1	; 0x01
    16e4:	88 27       	eor	r24, r24
    16e6:	77 fd       	sbrc	r23, 7
    16e8:	80 95       	com	r24
    16ea:	98 2f       	mov	r25, r24
    16ec:	0e 5f       	subi	r16, 0xFE	; 254
    16ee:	1f 4f       	sbci	r17, 0xFF	; 255
    16f0:	2f 76       	andi	r18, 0x6F	; 111
    16f2:	b2 2e       	mov	r11, r18
    16f4:	97 ff       	sbrs	r25, 7
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <vfprintf+0x216>
    16f8:	90 95       	com	r25
    16fa:	80 95       	com	r24
    16fc:	70 95       	com	r23
    16fe:	61 95       	neg	r22
    1700:	7f 4f       	sbci	r23, 0xFF	; 255
    1702:	8f 4f       	sbci	r24, 0xFF	; 255
    1704:	9f 4f       	sbci	r25, 0xFF	; 255
    1706:	20 68       	ori	r18, 0x80	; 128
    1708:	b2 2e       	mov	r11, r18
    170a:	2a e0       	ldi	r18, 0x0A	; 10
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	a4 01       	movw	r20, r8
    1710:	6f d2       	rcall	.+1246   	; 0x1bf0 <__ultoa_invert>
    1712:	a8 2e       	mov	r10, r24
    1714:	a8 18       	sub	r10, r8
    1716:	43 c0       	rjmp	.+134    	; 0x179e <vfprintf+0x2aa>
    1718:	85 37       	cpi	r24, 0x75	; 117
    171a:	29 f4       	brne	.+10     	; 0x1726 <vfprintf+0x232>
    171c:	2f 7e       	andi	r18, 0xEF	; 239
    171e:	b2 2e       	mov	r11, r18
    1720:	2a e0       	ldi	r18, 0x0A	; 10
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	25 c0       	rjmp	.+74     	; 0x1770 <vfprintf+0x27c>
    1726:	f2 2f       	mov	r31, r18
    1728:	f9 7f       	andi	r31, 0xF9	; 249
    172a:	bf 2e       	mov	r11, r31
    172c:	8f 36       	cpi	r24, 0x6F	; 111
    172e:	c1 f0       	breq	.+48     	; 0x1760 <vfprintf+0x26c>
    1730:	18 f4       	brcc	.+6      	; 0x1738 <vfprintf+0x244>
    1732:	88 35       	cpi	r24, 0x58	; 88
    1734:	79 f0       	breq	.+30     	; 0x1754 <vfprintf+0x260>
    1736:	ad c0       	rjmp	.+346    	; 0x1892 <vfprintf+0x39e>
    1738:	80 37       	cpi	r24, 0x70	; 112
    173a:	19 f0       	breq	.+6      	; 0x1742 <vfprintf+0x24e>
    173c:	88 37       	cpi	r24, 0x78	; 120
    173e:	21 f0       	breq	.+8      	; 0x1748 <vfprintf+0x254>
    1740:	a8 c0       	rjmp	.+336    	; 0x1892 <vfprintf+0x39e>
    1742:	2f 2f       	mov	r18, r31
    1744:	20 61       	ori	r18, 0x10	; 16
    1746:	b2 2e       	mov	r11, r18
    1748:	b4 fe       	sbrs	r11, 4
    174a:	0d c0       	rjmp	.+26     	; 0x1766 <vfprintf+0x272>
    174c:	8b 2d       	mov	r24, r11
    174e:	84 60       	ori	r24, 0x04	; 4
    1750:	b8 2e       	mov	r11, r24
    1752:	09 c0       	rjmp	.+18     	; 0x1766 <vfprintf+0x272>
    1754:	24 ff       	sbrs	r18, 4
    1756:	0a c0       	rjmp	.+20     	; 0x176c <vfprintf+0x278>
    1758:	9f 2f       	mov	r25, r31
    175a:	96 60       	ori	r25, 0x06	; 6
    175c:	b9 2e       	mov	r11, r25
    175e:	06 c0       	rjmp	.+12     	; 0x176c <vfprintf+0x278>
    1760:	28 e0       	ldi	r18, 0x08	; 8
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	05 c0       	rjmp	.+10     	; 0x1770 <vfprintf+0x27c>
    1766:	20 e1       	ldi	r18, 0x10	; 16
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <vfprintf+0x27c>
    176c:	20 e1       	ldi	r18, 0x10	; 16
    176e:	32 e0       	ldi	r19, 0x02	; 2
    1770:	f8 01       	movw	r30, r16
    1772:	b7 fe       	sbrs	r11, 7
    1774:	07 c0       	rjmp	.+14     	; 0x1784 <vfprintf+0x290>
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	0c 5f       	subi	r16, 0xFC	; 252
    1780:	1f 4f       	sbci	r17, 0xFF	; 255
    1782:	06 c0       	rjmp	.+12     	; 0x1790 <vfprintf+0x29c>
    1784:	60 81       	ld	r22, Z
    1786:	71 81       	ldd	r23, Z+1	; 0x01
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 5f       	subi	r16, 0xFE	; 254
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	a4 01       	movw	r20, r8
    1792:	2e d2       	rcall	.+1116   	; 0x1bf0 <__ultoa_invert>
    1794:	a8 2e       	mov	r10, r24
    1796:	a8 18       	sub	r10, r8
    1798:	fb 2d       	mov	r31, r11
    179a:	ff 77       	andi	r31, 0x7F	; 127
    179c:	bf 2e       	mov	r11, r31
    179e:	b6 fe       	sbrs	r11, 6
    17a0:	0b c0       	rjmp	.+22     	; 0x17b8 <vfprintf+0x2c4>
    17a2:	2b 2d       	mov	r18, r11
    17a4:	2e 7f       	andi	r18, 0xFE	; 254
    17a6:	a5 14       	cp	r10, r5
    17a8:	50 f4       	brcc	.+20     	; 0x17be <vfprintf+0x2ca>
    17aa:	b4 fe       	sbrs	r11, 4
    17ac:	0a c0       	rjmp	.+20     	; 0x17c2 <vfprintf+0x2ce>
    17ae:	b2 fc       	sbrc	r11, 2
    17b0:	08 c0       	rjmp	.+16     	; 0x17c2 <vfprintf+0x2ce>
    17b2:	2b 2d       	mov	r18, r11
    17b4:	2e 7e       	andi	r18, 0xEE	; 238
    17b6:	05 c0       	rjmp	.+10     	; 0x17c2 <vfprintf+0x2ce>
    17b8:	7a 2c       	mov	r7, r10
    17ba:	2b 2d       	mov	r18, r11
    17bc:	03 c0       	rjmp	.+6      	; 0x17c4 <vfprintf+0x2d0>
    17be:	7a 2c       	mov	r7, r10
    17c0:	01 c0       	rjmp	.+2      	; 0x17c4 <vfprintf+0x2d0>
    17c2:	75 2c       	mov	r7, r5
    17c4:	24 ff       	sbrs	r18, 4
    17c6:	0d c0       	rjmp	.+26     	; 0x17e2 <vfprintf+0x2ee>
    17c8:	fe 01       	movw	r30, r28
    17ca:	ea 0d       	add	r30, r10
    17cc:	f1 1d       	adc	r31, r1
    17ce:	80 81       	ld	r24, Z
    17d0:	80 33       	cpi	r24, 0x30	; 48
    17d2:	11 f4       	brne	.+4      	; 0x17d8 <vfprintf+0x2e4>
    17d4:	29 7e       	andi	r18, 0xE9	; 233
    17d6:	09 c0       	rjmp	.+18     	; 0x17ea <vfprintf+0x2f6>
    17d8:	22 ff       	sbrs	r18, 2
    17da:	06 c0       	rjmp	.+12     	; 0x17e8 <vfprintf+0x2f4>
    17dc:	73 94       	inc	r7
    17de:	73 94       	inc	r7
    17e0:	04 c0       	rjmp	.+8      	; 0x17ea <vfprintf+0x2f6>
    17e2:	82 2f       	mov	r24, r18
    17e4:	86 78       	andi	r24, 0x86	; 134
    17e6:	09 f0       	breq	.+2      	; 0x17ea <vfprintf+0x2f6>
    17e8:	73 94       	inc	r7
    17ea:	23 fd       	sbrc	r18, 3
    17ec:	12 c0       	rjmp	.+36     	; 0x1812 <vfprintf+0x31e>
    17ee:	20 ff       	sbrs	r18, 0
    17f0:	06 c0       	rjmp	.+12     	; 0x17fe <vfprintf+0x30a>
    17f2:	5a 2c       	mov	r5, r10
    17f4:	73 14       	cp	r7, r3
    17f6:	18 f4       	brcc	.+6      	; 0x17fe <vfprintf+0x30a>
    17f8:	53 0c       	add	r5, r3
    17fa:	57 18       	sub	r5, r7
    17fc:	73 2c       	mov	r7, r3
    17fe:	73 14       	cp	r7, r3
    1800:	60 f4       	brcc	.+24     	; 0x181a <vfprintf+0x326>
    1802:	b7 01       	movw	r22, r14
    1804:	80 e2       	ldi	r24, 0x20	; 32
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2c 87       	std	Y+12, r18	; 0x0c
    180a:	c0 d1       	rcall	.+896    	; 0x1b8c <fputc>
    180c:	73 94       	inc	r7
    180e:	2c 85       	ldd	r18, Y+12	; 0x0c
    1810:	f6 cf       	rjmp	.-20     	; 0x17fe <vfprintf+0x30a>
    1812:	73 14       	cp	r7, r3
    1814:	10 f4       	brcc	.+4      	; 0x181a <vfprintf+0x326>
    1816:	37 18       	sub	r3, r7
    1818:	01 c0       	rjmp	.+2      	; 0x181c <vfprintf+0x328>
    181a:	31 2c       	mov	r3, r1
    181c:	24 ff       	sbrs	r18, 4
    181e:	11 c0       	rjmp	.+34     	; 0x1842 <vfprintf+0x34e>
    1820:	b7 01       	movw	r22, r14
    1822:	80 e3       	ldi	r24, 0x30	; 48
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	2c 87       	std	Y+12, r18	; 0x0c
    1828:	b1 d1       	rcall	.+866    	; 0x1b8c <fputc>
    182a:	2c 85       	ldd	r18, Y+12	; 0x0c
    182c:	22 ff       	sbrs	r18, 2
    182e:	16 c0       	rjmp	.+44     	; 0x185c <vfprintf+0x368>
    1830:	21 ff       	sbrs	r18, 1
    1832:	03 c0       	rjmp	.+6      	; 0x183a <vfprintf+0x346>
    1834:	88 e5       	ldi	r24, 0x58	; 88
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 c0       	rjmp	.+4      	; 0x183e <vfprintf+0x34a>
    183a:	88 e7       	ldi	r24, 0x78	; 120
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	b7 01       	movw	r22, r14
    1840:	0c c0       	rjmp	.+24     	; 0x185a <vfprintf+0x366>
    1842:	82 2f       	mov	r24, r18
    1844:	86 78       	andi	r24, 0x86	; 134
    1846:	51 f0       	breq	.+20     	; 0x185c <vfprintf+0x368>
    1848:	21 fd       	sbrc	r18, 1
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <vfprintf+0x35c>
    184c:	80 e2       	ldi	r24, 0x20	; 32
    184e:	01 c0       	rjmp	.+2      	; 0x1852 <vfprintf+0x35e>
    1850:	8b e2       	ldi	r24, 0x2B	; 43
    1852:	27 fd       	sbrc	r18, 7
    1854:	8d e2       	ldi	r24, 0x2D	; 45
    1856:	b7 01       	movw	r22, r14
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	98 d1       	rcall	.+816    	; 0x1b8c <fputc>
    185c:	a5 14       	cp	r10, r5
    185e:	30 f4       	brcc	.+12     	; 0x186c <vfprintf+0x378>
    1860:	b7 01       	movw	r22, r14
    1862:	80 e3       	ldi	r24, 0x30	; 48
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	92 d1       	rcall	.+804    	; 0x1b8c <fputc>
    1868:	5a 94       	dec	r5
    186a:	f8 cf       	rjmp	.-16     	; 0x185c <vfprintf+0x368>
    186c:	aa 94       	dec	r10
    186e:	f4 01       	movw	r30, r8
    1870:	ea 0d       	add	r30, r10
    1872:	f1 1d       	adc	r31, r1
    1874:	80 81       	ld	r24, Z
    1876:	b7 01       	movw	r22, r14
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	88 d1       	rcall	.+784    	; 0x1b8c <fputc>
    187c:	a1 10       	cpse	r10, r1
    187e:	f6 cf       	rjmp	.-20     	; 0x186c <vfprintf+0x378>
    1880:	33 20       	and	r3, r3
    1882:	09 f4       	brne	.+2      	; 0x1886 <vfprintf+0x392>
    1884:	5d ce       	rjmp	.-838    	; 0x1540 <vfprintf+0x4c>
    1886:	b7 01       	movw	r22, r14
    1888:	80 e2       	ldi	r24, 0x20	; 32
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	7f d1       	rcall	.+766    	; 0x1b8c <fputc>
    188e:	3a 94       	dec	r3
    1890:	f7 cf       	rjmp	.-18     	; 0x1880 <vfprintf+0x38c>
    1892:	f7 01       	movw	r30, r14
    1894:	86 81       	ldd	r24, Z+6	; 0x06
    1896:	97 81       	ldd	r25, Z+7	; 0x07
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x3aa>
    189a:	8f ef       	ldi	r24, 0xFF	; 255
    189c:	9f ef       	ldi	r25, 0xFF	; 255
    189e:	2c 96       	adiw	r28, 0x0c	; 12
    18a0:	0f b6       	in	r0, 0x3f	; 63
    18a2:	f8 94       	cli
    18a4:	de bf       	out	0x3e, r29	; 62
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	cd bf       	out	0x3d, r28	; 61
    18aa:	df 91       	pop	r29
    18ac:	cf 91       	pop	r28
    18ae:	1f 91       	pop	r17
    18b0:	0f 91       	pop	r16
    18b2:	ff 90       	pop	r15
    18b4:	ef 90       	pop	r14
    18b6:	df 90       	pop	r13
    18b8:	cf 90       	pop	r12
    18ba:	bf 90       	pop	r11
    18bc:	af 90       	pop	r10
    18be:	9f 90       	pop	r9
    18c0:	8f 90       	pop	r8
    18c2:	7f 90       	pop	r7
    18c4:	6f 90       	pop	r6
    18c6:	5f 90       	pop	r5
    18c8:	4f 90       	pop	r4
    18ca:	3f 90       	pop	r3
    18cc:	2f 90       	pop	r2
    18ce:	08 95       	ret

000018d0 <calloc>:
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	86 9f       	mul	r24, r22
    18da:	80 01       	movw	r16, r0
    18dc:	87 9f       	mul	r24, r23
    18de:	10 0d       	add	r17, r0
    18e0:	96 9f       	mul	r25, r22
    18e2:	10 0d       	add	r17, r0
    18e4:	11 24       	eor	r1, r1
    18e6:	c8 01       	movw	r24, r16
    18e8:	0d d0       	rcall	.+26     	; 0x1904 <malloc>
    18ea:	ec 01       	movw	r28, r24
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	21 f0       	breq	.+8      	; 0x18f8 <calloc+0x28>
    18f0:	a8 01       	movw	r20, r16
    18f2:	60 e0       	ldi	r22, 0x00	; 0
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	38 d1       	rcall	.+624    	; 0x1b68 <memset>
    18f8:	ce 01       	movw	r24, r28
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	08 95       	ret

00001904 <malloc>:
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	82 30       	cpi	r24, 0x02	; 2
    190a:	91 05       	cpc	r25, r1
    190c:	10 f4       	brcc	.+4      	; 0x1912 <malloc+0xe>
    190e:	82 e0       	ldi	r24, 0x02	; 2
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	e0 91 9d 03 	lds	r30, 0x039D
    1916:	f0 91 9e 03 	lds	r31, 0x039E
    191a:	20 e0       	ldi	r18, 0x00	; 0
    191c:	30 e0       	ldi	r19, 0x00	; 0
    191e:	a0 e0       	ldi	r26, 0x00	; 0
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	30 97       	sbiw	r30, 0x00	; 0
    1924:	39 f1       	breq	.+78     	; 0x1974 <malloc+0x70>
    1926:	40 81       	ld	r20, Z
    1928:	51 81       	ldd	r21, Z+1	; 0x01
    192a:	48 17       	cp	r20, r24
    192c:	59 07       	cpc	r21, r25
    192e:	b8 f0       	brcs	.+46     	; 0x195e <malloc+0x5a>
    1930:	48 17       	cp	r20, r24
    1932:	59 07       	cpc	r21, r25
    1934:	71 f4       	brne	.+28     	; 0x1952 <malloc+0x4e>
    1936:	82 81       	ldd	r24, Z+2	; 0x02
    1938:	93 81       	ldd	r25, Z+3	; 0x03
    193a:	10 97       	sbiw	r26, 0x00	; 0
    193c:	29 f0       	breq	.+10     	; 0x1948 <malloc+0x44>
    193e:	13 96       	adiw	r26, 0x03	; 3
    1940:	9c 93       	st	X, r25
    1942:	8e 93       	st	-X, r24
    1944:	12 97       	sbiw	r26, 0x02	; 2
    1946:	2c c0       	rjmp	.+88     	; 0x19a0 <malloc+0x9c>
    1948:	90 93 9e 03 	sts	0x039E, r25
    194c:	80 93 9d 03 	sts	0x039D, r24
    1950:	27 c0       	rjmp	.+78     	; 0x19a0 <malloc+0x9c>
    1952:	21 15       	cp	r18, r1
    1954:	31 05       	cpc	r19, r1
    1956:	31 f0       	breq	.+12     	; 0x1964 <malloc+0x60>
    1958:	42 17       	cp	r20, r18
    195a:	53 07       	cpc	r21, r19
    195c:	18 f0       	brcs	.+6      	; 0x1964 <malloc+0x60>
    195e:	a9 01       	movw	r20, r18
    1960:	db 01       	movw	r26, r22
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <malloc+0x62>
    1964:	ef 01       	movw	r28, r30
    1966:	9a 01       	movw	r18, r20
    1968:	bd 01       	movw	r22, r26
    196a:	df 01       	movw	r26, r30
    196c:	02 80       	ldd	r0, Z+2	; 0x02
    196e:	f3 81       	ldd	r31, Z+3	; 0x03
    1970:	e0 2d       	mov	r30, r0
    1972:	d7 cf       	rjmp	.-82     	; 0x1922 <malloc+0x1e>
    1974:	21 15       	cp	r18, r1
    1976:	31 05       	cpc	r19, r1
    1978:	f9 f0       	breq	.+62     	; 0x19b8 <malloc+0xb4>
    197a:	28 1b       	sub	r18, r24
    197c:	39 0b       	sbc	r19, r25
    197e:	24 30       	cpi	r18, 0x04	; 4
    1980:	31 05       	cpc	r19, r1
    1982:	80 f4       	brcc	.+32     	; 0x19a4 <malloc+0xa0>
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	9b 81       	ldd	r25, Y+3	; 0x03
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	21 f0       	breq	.+8      	; 0x1996 <malloc+0x92>
    198e:	fb 01       	movw	r30, r22
    1990:	93 83       	std	Z+3, r25	; 0x03
    1992:	82 83       	std	Z+2, r24	; 0x02
    1994:	04 c0       	rjmp	.+8      	; 0x199e <malloc+0x9a>
    1996:	90 93 9e 03 	sts	0x039E, r25
    199a:	80 93 9d 03 	sts	0x039D, r24
    199e:	fe 01       	movw	r30, r28
    19a0:	32 96       	adiw	r30, 0x02	; 2
    19a2:	44 c0       	rjmp	.+136    	; 0x1a2c <malloc+0x128>
    19a4:	fe 01       	movw	r30, r28
    19a6:	e2 0f       	add	r30, r18
    19a8:	f3 1f       	adc	r31, r19
    19aa:	81 93       	st	Z+, r24
    19ac:	91 93       	st	Z+, r25
    19ae:	22 50       	subi	r18, 0x02	; 2
    19b0:	31 09       	sbc	r19, r1
    19b2:	39 83       	std	Y+1, r19	; 0x01
    19b4:	28 83       	st	Y, r18
    19b6:	3a c0       	rjmp	.+116    	; 0x1a2c <malloc+0x128>
    19b8:	20 91 9b 03 	lds	r18, 0x039B
    19bc:	30 91 9c 03 	lds	r19, 0x039C
    19c0:	23 2b       	or	r18, r19
    19c2:	41 f4       	brne	.+16     	; 0x19d4 <malloc+0xd0>
    19c4:	20 91 02 02 	lds	r18, 0x0202
    19c8:	30 91 03 02 	lds	r19, 0x0203
    19cc:	30 93 9c 03 	sts	0x039C, r19
    19d0:	20 93 9b 03 	sts	0x039B, r18
    19d4:	20 91 00 02 	lds	r18, 0x0200
    19d8:	30 91 01 02 	lds	r19, 0x0201
    19dc:	21 15       	cp	r18, r1
    19de:	31 05       	cpc	r19, r1
    19e0:	41 f4       	brne	.+16     	; 0x19f2 <malloc+0xee>
    19e2:	2d b7       	in	r18, 0x3d	; 61
    19e4:	3e b7       	in	r19, 0x3e	; 62
    19e6:	40 91 04 02 	lds	r20, 0x0204
    19ea:	50 91 05 02 	lds	r21, 0x0205
    19ee:	24 1b       	sub	r18, r20
    19f0:	35 0b       	sbc	r19, r21
    19f2:	e0 91 9b 03 	lds	r30, 0x039B
    19f6:	f0 91 9c 03 	lds	r31, 0x039C
    19fa:	e2 17       	cp	r30, r18
    19fc:	f3 07       	cpc	r31, r19
    19fe:	a0 f4       	brcc	.+40     	; 0x1a28 <malloc+0x124>
    1a00:	2e 1b       	sub	r18, r30
    1a02:	3f 0b       	sbc	r19, r31
    1a04:	28 17       	cp	r18, r24
    1a06:	39 07       	cpc	r19, r25
    1a08:	78 f0       	brcs	.+30     	; 0x1a28 <malloc+0x124>
    1a0a:	ac 01       	movw	r20, r24
    1a0c:	4e 5f       	subi	r20, 0xFE	; 254
    1a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a10:	24 17       	cp	r18, r20
    1a12:	35 07       	cpc	r19, r21
    1a14:	48 f0       	brcs	.+18     	; 0x1a28 <malloc+0x124>
    1a16:	4e 0f       	add	r20, r30
    1a18:	5f 1f       	adc	r21, r31
    1a1a:	50 93 9c 03 	sts	0x039C, r21
    1a1e:	40 93 9b 03 	sts	0x039B, r20
    1a22:	81 93       	st	Z+, r24
    1a24:	91 93       	st	Z+, r25
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <malloc+0x128>
    1a28:	e0 e0       	ldi	r30, 0x00	; 0
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	cf 01       	movw	r24, r30
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	08 95       	ret

00001a34 <free>:
    1a34:	cf 93       	push	r28
    1a36:	df 93       	push	r29
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <free+0xa>
    1a3c:	87 c0       	rjmp	.+270    	; 0x1b4c <free+0x118>
    1a3e:	fc 01       	movw	r30, r24
    1a40:	32 97       	sbiw	r30, 0x02	; 2
    1a42:	13 82       	std	Z+3, r1	; 0x03
    1a44:	12 82       	std	Z+2, r1	; 0x02
    1a46:	c0 91 9d 03 	lds	r28, 0x039D
    1a4a:	d0 91 9e 03 	lds	r29, 0x039E
    1a4e:	20 97       	sbiw	r28, 0x00	; 0
    1a50:	81 f4       	brne	.+32     	; 0x1a72 <free+0x3e>
    1a52:	20 81       	ld	r18, Z
    1a54:	31 81       	ldd	r19, Z+1	; 0x01
    1a56:	28 0f       	add	r18, r24
    1a58:	39 1f       	adc	r19, r25
    1a5a:	80 91 9b 03 	lds	r24, 0x039B
    1a5e:	90 91 9c 03 	lds	r25, 0x039C
    1a62:	82 17       	cp	r24, r18
    1a64:	93 07       	cpc	r25, r19
    1a66:	79 f5       	brne	.+94     	; 0x1ac6 <free+0x92>
    1a68:	f0 93 9c 03 	sts	0x039C, r31
    1a6c:	e0 93 9b 03 	sts	0x039B, r30
    1a70:	6d c0       	rjmp	.+218    	; 0x1b4c <free+0x118>
    1a72:	de 01       	movw	r26, r28
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	ae 17       	cp	r26, r30
    1a7a:	bf 07       	cpc	r27, r31
    1a7c:	50 f4       	brcc	.+20     	; 0x1a92 <free+0x5e>
    1a7e:	12 96       	adiw	r26, 0x02	; 2
    1a80:	4d 91       	ld	r20, X+
    1a82:	5c 91       	ld	r21, X
    1a84:	13 97       	sbiw	r26, 0x03	; 3
    1a86:	9d 01       	movw	r18, r26
    1a88:	41 15       	cp	r20, r1
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	09 f1       	breq	.+66     	; 0x1ad0 <free+0x9c>
    1a8e:	da 01       	movw	r26, r20
    1a90:	f3 cf       	rjmp	.-26     	; 0x1a78 <free+0x44>
    1a92:	b3 83       	std	Z+3, r27	; 0x03
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	40 81       	ld	r20, Z
    1a98:	51 81       	ldd	r21, Z+1	; 0x01
    1a9a:	84 0f       	add	r24, r20
    1a9c:	95 1f       	adc	r25, r21
    1a9e:	8a 17       	cp	r24, r26
    1aa0:	9b 07       	cpc	r25, r27
    1aa2:	71 f4       	brne	.+28     	; 0x1ac0 <free+0x8c>
    1aa4:	8d 91       	ld	r24, X+
    1aa6:	9c 91       	ld	r25, X
    1aa8:	11 97       	sbiw	r26, 0x01	; 1
    1aaa:	84 0f       	add	r24, r20
    1aac:	95 1f       	adc	r25, r21
    1aae:	02 96       	adiw	r24, 0x02	; 2
    1ab0:	91 83       	std	Z+1, r25	; 0x01
    1ab2:	80 83       	st	Z, r24
    1ab4:	12 96       	adiw	r26, 0x02	; 2
    1ab6:	8d 91       	ld	r24, X+
    1ab8:	9c 91       	ld	r25, X
    1aba:	13 97       	sbiw	r26, 0x03	; 3
    1abc:	93 83       	std	Z+3, r25	; 0x03
    1abe:	82 83       	std	Z+2, r24	; 0x02
    1ac0:	21 15       	cp	r18, r1
    1ac2:	31 05       	cpc	r19, r1
    1ac4:	29 f4       	brne	.+10     	; 0x1ad0 <free+0x9c>
    1ac6:	f0 93 9e 03 	sts	0x039E, r31
    1aca:	e0 93 9d 03 	sts	0x039D, r30
    1ace:	3e c0       	rjmp	.+124    	; 0x1b4c <free+0x118>
    1ad0:	d9 01       	movw	r26, r18
    1ad2:	13 96       	adiw	r26, 0x03	; 3
    1ad4:	fc 93       	st	X, r31
    1ad6:	ee 93       	st	-X, r30
    1ad8:	12 97       	sbiw	r26, 0x02	; 2
    1ada:	4d 91       	ld	r20, X+
    1adc:	5d 91       	ld	r21, X+
    1ade:	a4 0f       	add	r26, r20
    1ae0:	b5 1f       	adc	r27, r21
    1ae2:	ea 17       	cp	r30, r26
    1ae4:	fb 07       	cpc	r31, r27
    1ae6:	79 f4       	brne	.+30     	; 0x1b06 <free+0xd2>
    1ae8:	80 81       	ld	r24, Z
    1aea:	91 81       	ldd	r25, Z+1	; 0x01
    1aec:	84 0f       	add	r24, r20
    1aee:	95 1f       	adc	r25, r21
    1af0:	02 96       	adiw	r24, 0x02	; 2
    1af2:	d9 01       	movw	r26, r18
    1af4:	11 96       	adiw	r26, 0x01	; 1
    1af6:	9c 93       	st	X, r25
    1af8:	8e 93       	st	-X, r24
    1afa:	82 81       	ldd	r24, Z+2	; 0x02
    1afc:	93 81       	ldd	r25, Z+3	; 0x03
    1afe:	13 96       	adiw	r26, 0x03	; 3
    1b00:	9c 93       	st	X, r25
    1b02:	8e 93       	st	-X, r24
    1b04:	12 97       	sbiw	r26, 0x02	; 2
    1b06:	e0 e0       	ldi	r30, 0x00	; 0
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b0e:	00 97       	sbiw	r24, 0x00	; 0
    1b10:	19 f0       	breq	.+6      	; 0x1b18 <free+0xe4>
    1b12:	fe 01       	movw	r30, r28
    1b14:	ec 01       	movw	r28, r24
    1b16:	f9 cf       	rjmp	.-14     	; 0x1b0a <free+0xd6>
    1b18:	ce 01       	movw	r24, r28
    1b1a:	02 96       	adiw	r24, 0x02	; 2
    1b1c:	28 81       	ld	r18, Y
    1b1e:	39 81       	ldd	r19, Y+1	; 0x01
    1b20:	82 0f       	add	r24, r18
    1b22:	93 1f       	adc	r25, r19
    1b24:	20 91 9b 03 	lds	r18, 0x039B
    1b28:	30 91 9c 03 	lds	r19, 0x039C
    1b2c:	28 17       	cp	r18, r24
    1b2e:	39 07       	cpc	r19, r25
    1b30:	69 f4       	brne	.+26     	; 0x1b4c <free+0x118>
    1b32:	30 97       	sbiw	r30, 0x00	; 0
    1b34:	29 f4       	brne	.+10     	; 0x1b40 <free+0x10c>
    1b36:	10 92 9e 03 	sts	0x039E, r1
    1b3a:	10 92 9d 03 	sts	0x039D, r1
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <free+0x110>
    1b40:	13 82       	std	Z+3, r1	; 0x03
    1b42:	12 82       	std	Z+2, r1	; 0x02
    1b44:	d0 93 9c 03 	sts	0x039C, r29
    1b48:	c0 93 9b 03 	sts	0x039B, r28
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	08 95       	ret

00001b52 <strnlen_P>:
    1b52:	fc 01       	movw	r30, r24
    1b54:	05 90       	lpm	r0, Z+
    1b56:	61 50       	subi	r22, 0x01	; 1
    1b58:	70 40       	sbci	r23, 0x00	; 0
    1b5a:	01 10       	cpse	r0, r1
    1b5c:	d8 f7       	brcc	.-10     	; 0x1b54 <strnlen_P+0x2>
    1b5e:	80 95       	com	r24
    1b60:	90 95       	com	r25
    1b62:	8e 0f       	add	r24, r30
    1b64:	9f 1f       	adc	r25, r31
    1b66:	08 95       	ret

00001b68 <memset>:
    1b68:	dc 01       	movw	r26, r24
    1b6a:	01 c0       	rjmp	.+2      	; 0x1b6e <memset+0x6>
    1b6c:	6d 93       	st	X+, r22
    1b6e:	41 50       	subi	r20, 0x01	; 1
    1b70:	50 40       	sbci	r21, 0x00	; 0
    1b72:	e0 f7       	brcc	.-8      	; 0x1b6c <memset+0x4>
    1b74:	08 95       	ret

00001b76 <strnlen>:
    1b76:	fc 01       	movw	r30, r24
    1b78:	61 50       	subi	r22, 0x01	; 1
    1b7a:	70 40       	sbci	r23, 0x00	; 0
    1b7c:	01 90       	ld	r0, Z+
    1b7e:	01 10       	cpse	r0, r1
    1b80:	d8 f7       	brcc	.-10     	; 0x1b78 <strnlen+0x2>
    1b82:	80 95       	com	r24
    1b84:	90 95       	com	r25
    1b86:	8e 0f       	add	r24, r30
    1b88:	9f 1f       	adc	r25, r31
    1b8a:	08 95       	ret

00001b8c <fputc>:
    1b8c:	0f 93       	push	r16
    1b8e:	1f 93       	push	r17
    1b90:	cf 93       	push	r28
    1b92:	df 93       	push	r29
    1b94:	18 2f       	mov	r17, r24
    1b96:	09 2f       	mov	r16, r25
    1b98:	eb 01       	movw	r28, r22
    1b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9c:	81 fd       	sbrc	r24, 1
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <fputc+0x1a>
    1ba0:	8f ef       	ldi	r24, 0xFF	; 255
    1ba2:	9f ef       	ldi	r25, 0xFF	; 255
    1ba4:	20 c0       	rjmp	.+64     	; 0x1be6 <fputc+0x5a>
    1ba6:	82 ff       	sbrs	r24, 2
    1ba8:	10 c0       	rjmp	.+32     	; 0x1bca <fputc+0x3e>
    1baa:	4e 81       	ldd	r20, Y+6	; 0x06
    1bac:	5f 81       	ldd	r21, Y+7	; 0x07
    1bae:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb0:	3d 81       	ldd	r19, Y+5	; 0x05
    1bb2:	42 17       	cp	r20, r18
    1bb4:	53 07       	cpc	r21, r19
    1bb6:	7c f4       	brge	.+30     	; 0x1bd6 <fputc+0x4a>
    1bb8:	e8 81       	ld	r30, Y
    1bba:	f9 81       	ldd	r31, Y+1	; 0x01
    1bbc:	9f 01       	movw	r18, r30
    1bbe:	2f 5f       	subi	r18, 0xFF	; 255
    1bc0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bc2:	39 83       	std	Y+1, r19	; 0x01
    1bc4:	28 83       	st	Y, r18
    1bc6:	10 83       	st	Z, r17
    1bc8:	06 c0       	rjmp	.+12     	; 0x1bd6 <fputc+0x4a>
    1bca:	e8 85       	ldd	r30, Y+8	; 0x08
    1bcc:	f9 85       	ldd	r31, Y+9	; 0x09
    1bce:	81 2f       	mov	r24, r17
    1bd0:	19 95       	eicall
    1bd2:	89 2b       	or	r24, r25
    1bd4:	29 f7       	brne	.-54     	; 0x1ba0 <fputc+0x14>
    1bd6:	2e 81       	ldd	r18, Y+6	; 0x06
    1bd8:	3f 81       	ldd	r19, Y+7	; 0x07
    1bda:	2f 5f       	subi	r18, 0xFF	; 255
    1bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bde:	3f 83       	std	Y+7, r19	; 0x07
    1be0:	2e 83       	std	Y+6, r18	; 0x06
    1be2:	81 2f       	mov	r24, r17
    1be4:	90 2f       	mov	r25, r16
    1be6:	df 91       	pop	r29
    1be8:	cf 91       	pop	r28
    1bea:	1f 91       	pop	r17
    1bec:	0f 91       	pop	r16
    1bee:	08 95       	ret

00001bf0 <__ultoa_invert>:
    1bf0:	fa 01       	movw	r30, r20
    1bf2:	aa 27       	eor	r26, r26
    1bf4:	28 30       	cpi	r18, 0x08	; 8
    1bf6:	51 f1       	breq	.+84     	; 0x1c4c <__ultoa_invert+0x5c>
    1bf8:	20 31       	cpi	r18, 0x10	; 16
    1bfa:	81 f1       	breq	.+96     	; 0x1c5c <__ultoa_invert+0x6c>
    1bfc:	e8 94       	clt
    1bfe:	6f 93       	push	r22
    1c00:	6e 7f       	andi	r22, 0xFE	; 254
    1c02:	6e 5f       	subi	r22, 0xFE	; 254
    1c04:	7f 4f       	sbci	r23, 0xFF	; 255
    1c06:	8f 4f       	sbci	r24, 0xFF	; 255
    1c08:	9f 4f       	sbci	r25, 0xFF	; 255
    1c0a:	af 4f       	sbci	r26, 0xFF	; 255
    1c0c:	b1 e0       	ldi	r27, 0x01	; 1
    1c0e:	3e d0       	rcall	.+124    	; 0x1c8c <__ultoa_invert+0x9c>
    1c10:	b4 e0       	ldi	r27, 0x04	; 4
    1c12:	3c d0       	rcall	.+120    	; 0x1c8c <__ultoa_invert+0x9c>
    1c14:	67 0f       	add	r22, r23
    1c16:	78 1f       	adc	r23, r24
    1c18:	89 1f       	adc	r24, r25
    1c1a:	9a 1f       	adc	r25, r26
    1c1c:	a1 1d       	adc	r26, r1
    1c1e:	68 0f       	add	r22, r24
    1c20:	79 1f       	adc	r23, r25
    1c22:	8a 1f       	adc	r24, r26
    1c24:	91 1d       	adc	r25, r1
    1c26:	a1 1d       	adc	r26, r1
    1c28:	6a 0f       	add	r22, r26
    1c2a:	71 1d       	adc	r23, r1
    1c2c:	81 1d       	adc	r24, r1
    1c2e:	91 1d       	adc	r25, r1
    1c30:	a1 1d       	adc	r26, r1
    1c32:	20 d0       	rcall	.+64     	; 0x1c74 <__ultoa_invert+0x84>
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <__ultoa_invert+0x48>
    1c36:	68 94       	set
    1c38:	3f 91       	pop	r19
    1c3a:	2a e0       	ldi	r18, 0x0A	; 10
    1c3c:	26 9f       	mul	r18, r22
    1c3e:	11 24       	eor	r1, r1
    1c40:	30 19       	sub	r19, r0
    1c42:	30 5d       	subi	r19, 0xD0	; 208
    1c44:	31 93       	st	Z+, r19
    1c46:	de f6       	brtc	.-74     	; 0x1bfe <__ultoa_invert+0xe>
    1c48:	cf 01       	movw	r24, r30
    1c4a:	08 95       	ret
    1c4c:	46 2f       	mov	r20, r22
    1c4e:	47 70       	andi	r20, 0x07	; 7
    1c50:	40 5d       	subi	r20, 0xD0	; 208
    1c52:	41 93       	st	Z+, r20
    1c54:	b3 e0       	ldi	r27, 0x03	; 3
    1c56:	0f d0       	rcall	.+30     	; 0x1c76 <__ultoa_invert+0x86>
    1c58:	c9 f7       	brne	.-14     	; 0x1c4c <__ultoa_invert+0x5c>
    1c5a:	f6 cf       	rjmp	.-20     	; 0x1c48 <__ultoa_invert+0x58>
    1c5c:	46 2f       	mov	r20, r22
    1c5e:	4f 70       	andi	r20, 0x0F	; 15
    1c60:	40 5d       	subi	r20, 0xD0	; 208
    1c62:	4a 33       	cpi	r20, 0x3A	; 58
    1c64:	18 f0       	brcs	.+6      	; 0x1c6c <__ultoa_invert+0x7c>
    1c66:	49 5d       	subi	r20, 0xD9	; 217
    1c68:	31 fd       	sbrc	r19, 1
    1c6a:	40 52       	subi	r20, 0x20	; 32
    1c6c:	41 93       	st	Z+, r20
    1c6e:	02 d0       	rcall	.+4      	; 0x1c74 <__ultoa_invert+0x84>
    1c70:	a9 f7       	brne	.-22     	; 0x1c5c <__ultoa_invert+0x6c>
    1c72:	ea cf       	rjmp	.-44     	; 0x1c48 <__ultoa_invert+0x58>
    1c74:	b4 e0       	ldi	r27, 0x04	; 4
    1c76:	a6 95       	lsr	r26
    1c78:	97 95       	ror	r25
    1c7a:	87 95       	ror	r24
    1c7c:	77 95       	ror	r23
    1c7e:	67 95       	ror	r22
    1c80:	ba 95       	dec	r27
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__ultoa_invert+0x86>
    1c84:	00 97       	sbiw	r24, 0x00	; 0
    1c86:	61 05       	cpc	r22, r1
    1c88:	71 05       	cpc	r23, r1
    1c8a:	08 95       	ret
    1c8c:	9b 01       	movw	r18, r22
    1c8e:	ac 01       	movw	r20, r24
    1c90:	0a 2e       	mov	r0, r26
    1c92:	06 94       	lsr	r0
    1c94:	57 95       	ror	r21
    1c96:	47 95       	ror	r20
    1c98:	37 95       	ror	r19
    1c9a:	27 95       	ror	r18
    1c9c:	ba 95       	dec	r27
    1c9e:	c9 f7       	brne	.-14     	; 0x1c92 <__ultoa_invert+0xa2>
    1ca0:	62 0f       	add	r22, r18
    1ca2:	73 1f       	adc	r23, r19
    1ca4:	84 1f       	adc	r24, r20
    1ca6:	95 1f       	adc	r25, r21
    1ca8:	a0 1d       	adc	r26, r0
    1caa:	08 95       	ret

00001cac <_exit>:
    1cac:	f8 94       	cli

00001cae <__stop_program>:
    1cae:	ff cf       	rjmp	.-2      	; 0x1cae <__stop_program>
