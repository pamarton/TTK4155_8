
NODE2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f8  00800200  00001bb2  00001c46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001bb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  008002f8  008002f8  00001d3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d3e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000370  00000000  00000000  00001d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000261d  00000000  00000000  0000210a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000010b5  00000000  00000000  00004727  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000196a  00000000  00000000  000057dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000085c  00000000  00000000  00007148  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000971  00000000  00000000  000079a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000148f  00000000  00000000  00008315  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d0  00000000  00000000  000097a4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	c2 c0       	rjmp	.+388    	; 0x186 <__ctors_end>
       2:	00 00       	nop
       4:	e0 c0       	rjmp	.+448    	; 0x1c6 <__bad_interrupt>
       6:	00 00       	nop
       8:	de c0       	rjmp	.+444    	; 0x1c6 <__bad_interrupt>
       a:	00 00       	nop
       c:	dc c0       	rjmp	.+440    	; 0x1c6 <__bad_interrupt>
       e:	00 00       	nop
      10:	da c0       	rjmp	.+436    	; 0x1c6 <__bad_interrupt>
      12:	00 00       	nop
      14:	ef c0       	rjmp	.+478    	; 0x1f4 <__vector_5>
      16:	00 00       	nop
      18:	d6 c0       	rjmp	.+428    	; 0x1c6 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d4 c0       	rjmp	.+424    	; 0x1c6 <__bad_interrupt>
      1e:	00 00       	nop
      20:	d2 c0       	rjmp	.+420    	; 0x1c6 <__bad_interrupt>
      22:	00 00       	nop
      24:	d0 c0       	rjmp	.+416    	; 0x1c6 <__bad_interrupt>
      26:	00 00       	nop
      28:	ce c0       	rjmp	.+412    	; 0x1c6 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	cc c0       	rjmp	.+408    	; 0x1c6 <__bad_interrupt>
      2e:	00 00       	nop
      30:	ca c0       	rjmp	.+404    	; 0x1c6 <__bad_interrupt>
      32:	00 00       	nop
      34:	c8 c0       	rjmp	.+400    	; 0x1c6 <__bad_interrupt>
      36:	00 00       	nop
      38:	c6 c0       	rjmp	.+396    	; 0x1c6 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c4 c0       	rjmp	.+392    	; 0x1c6 <__bad_interrupt>
      3e:	00 00       	nop
      40:	c2 c0       	rjmp	.+388    	; 0x1c6 <__bad_interrupt>
      42:	00 00       	nop
      44:	c0 c0       	rjmp	.+384    	; 0x1c6 <__bad_interrupt>
      46:	00 00       	nop
      48:	be c0       	rjmp	.+380    	; 0x1c6 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	bc c0       	rjmp	.+376    	; 0x1c6 <__bad_interrupt>
      4e:	00 00       	nop
      50:	ba c0       	rjmp	.+372    	; 0x1c6 <__bad_interrupt>
      52:	00 00       	nop
      54:	b8 c0       	rjmp	.+368    	; 0x1c6 <__bad_interrupt>
      56:	00 00       	nop
      58:	b6 c0       	rjmp	.+364    	; 0x1c6 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	b4 c0       	rjmp	.+360    	; 0x1c6 <__bad_interrupt>
      5e:	00 00       	nop
      60:	b2 c0       	rjmp	.+356    	; 0x1c6 <__bad_interrupt>
      62:	00 00       	nop
      64:	b0 c0       	rjmp	.+352    	; 0x1c6 <__bad_interrupt>
      66:	00 00       	nop
      68:	ae c0       	rjmp	.+348    	; 0x1c6 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	ac c0       	rjmp	.+344    	; 0x1c6 <__bad_interrupt>
      6e:	00 00       	nop
      70:	aa c0       	rjmp	.+340    	; 0x1c6 <__bad_interrupt>
      72:	00 00       	nop
      74:	a8 c0       	rjmp	.+336    	; 0x1c6 <__bad_interrupt>
      76:	00 00       	nop
      78:	a6 c0       	rjmp	.+332    	; 0x1c6 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a4 c0       	rjmp	.+328    	; 0x1c6 <__bad_interrupt>
      7e:	00 00       	nop
      80:	a2 c0       	rjmp	.+324    	; 0x1c6 <__bad_interrupt>
      82:	00 00       	nop
      84:	a0 c0       	rjmp	.+320    	; 0x1c6 <__bad_interrupt>
      86:	00 00       	nop
      88:	9e c0       	rjmp	.+316    	; 0x1c6 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	9c c0       	rjmp	.+312    	; 0x1c6 <__bad_interrupt>
      8e:	00 00       	nop
      90:	9a c0       	rjmp	.+308    	; 0x1c6 <__bad_interrupt>
      92:	00 00       	nop
      94:	98 c0       	rjmp	.+304    	; 0x1c6 <__bad_interrupt>
      96:	00 00       	nop
      98:	96 c0       	rjmp	.+300    	; 0x1c6 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	59 c6       	rjmp	.+3250   	; 0xd50 <__vector_39>
      9e:	00 00       	nop
      a0:	92 c0       	rjmp	.+292    	; 0x1c6 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	90 c0       	rjmp	.+288    	; 0x1c6 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0e c6       	rjmp	.+3100   	; 0xcc6 <__vector_42>
      aa:	00 00       	nop
      ac:	8c c0       	rjmp	.+280    	; 0x1c6 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	8a c0       	rjmp	.+276    	; 0x1c6 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	88 c0       	rjmp	.+272    	; 0x1c6 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	86 c0       	rjmp	.+268    	; 0x1c6 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	84 c0       	rjmp	.+264    	; 0x1c6 <__bad_interrupt>
      be:	00 00       	nop
      c0:	82 c0       	rjmp	.+260    	; 0x1c6 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	80 c0       	rjmp	.+256    	; 0x1c6 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	7e c0       	rjmp	.+252    	; 0x1c6 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	7c c0       	rjmp	.+248    	; 0x1c6 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	7a c0       	rjmp	.+244    	; 0x1c6 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	78 c0       	rjmp	.+240    	; 0x1c6 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	76 c0       	rjmp	.+236    	; 0x1c6 <__bad_interrupt>
      da:	00 00       	nop
      dc:	74 c0       	rjmp	.+232    	; 0x1c6 <__bad_interrupt>
      de:	00 00       	nop
      e0:	72 c0       	rjmp	.+228    	; 0x1c6 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c3 06       	cpc	r12, r19
      e6:	15 07       	cpc	r17, r21
      e8:	15 07       	cpc	r17, r21
      ea:	15 07       	cpc	r17, r21
      ec:	15 07       	cpc	r17, r21
      ee:	15 07       	cpc	r17, r21
      f0:	15 07       	cpc	r17, r21
      f2:	15 07       	cpc	r17, r21
      f4:	c3 06       	cpc	r12, r19
      f6:	15 07       	cpc	r17, r21
      f8:	15 07       	cpc	r17, r21
      fa:	15 07       	cpc	r17, r21
      fc:	15 07       	cpc	r17, r21
      fe:	15 07       	cpc	r17, r21
     100:	15 07       	cpc	r17, r21
     102:	15 07       	cpc	r17, r21
     104:	c5 06       	cpc	r12, r21
     106:	15 07       	cpc	r17, r21
     108:	15 07       	cpc	r17, r21
     10a:	15 07       	cpc	r17, r21
     10c:	15 07       	cpc	r17, r21
     10e:	15 07       	cpc	r17, r21
     110:	15 07       	cpc	r17, r21
     112:	15 07       	cpc	r17, r21
     114:	15 07       	cpc	r17, r21
     116:	15 07       	cpc	r17, r21
     118:	15 07       	cpc	r17, r21
     11a:	15 07       	cpc	r17, r21
     11c:	15 07       	cpc	r17, r21
     11e:	15 07       	cpc	r17, r21
     120:	15 07       	cpc	r17, r21
     122:	15 07       	cpc	r17, r21
     124:	c5 06       	cpc	r12, r21
     126:	15 07       	cpc	r17, r21
     128:	15 07       	cpc	r17, r21
     12a:	15 07       	cpc	r17, r21
     12c:	15 07       	cpc	r17, r21
     12e:	15 07       	cpc	r17, r21
     130:	15 07       	cpc	r17, r21
     132:	15 07       	cpc	r17, r21
     134:	15 07       	cpc	r17, r21
     136:	15 07       	cpc	r17, r21
     138:	15 07       	cpc	r17, r21
     13a:	15 07       	cpc	r17, r21
     13c:	15 07       	cpc	r17, r21
     13e:	15 07       	cpc	r17, r21
     140:	15 07       	cpc	r17, r21
     142:	15 07       	cpc	r17, r21
     144:	11 07       	cpc	r17, r17
     146:	15 07       	cpc	r17, r21
     148:	15 07       	cpc	r17, r21
     14a:	15 07       	cpc	r17, r21
     14c:	15 07       	cpc	r17, r21
     14e:	15 07       	cpc	r17, r21
     150:	15 07       	cpc	r17, r21
     152:	15 07       	cpc	r17, r21
     154:	ee 06       	cpc	r14, r30
     156:	15 07       	cpc	r17, r21
     158:	15 07       	cpc	r17, r21
     15a:	15 07       	cpc	r17, r21
     15c:	15 07       	cpc	r17, r21
     15e:	15 07       	cpc	r17, r21
     160:	15 07       	cpc	r17, r21
     162:	15 07       	cpc	r17, r21
     164:	15 07       	cpc	r17, r21
     166:	15 07       	cpc	r17, r21
     168:	15 07       	cpc	r17, r21
     16a:	15 07       	cpc	r17, r21
     16c:	15 07       	cpc	r17, r21
     16e:	15 07       	cpc	r17, r21
     170:	15 07       	cpc	r17, r21
     172:	15 07       	cpc	r17, r21
     174:	e2 06       	cpc	r14, r18
     176:	15 07       	cpc	r17, r21
     178:	15 07       	cpc	r17, r21
     17a:	15 07       	cpc	r17, r21
     17c:	15 07       	cpc	r17, r21
     17e:	15 07       	cpc	r17, r21
     180:	15 07       	cpc	r17, r21
     182:	15 07       	cpc	r17, r21
     184:	00 07       	cpc	r16, r16

00000186 <__ctors_end>:
     186:	11 24       	eor	r1, r1
     188:	1f be       	out	0x3f, r1	; 63
     18a:	cf ef       	ldi	r28, 0xFF	; 255
     18c:	d1 e2       	ldi	r29, 0x21	; 33
     18e:	de bf       	out	0x3e, r29	; 62
     190:	cd bf       	out	0x3d, r28	; 61
     192:	00 e0       	ldi	r16, 0x00	; 0
     194:	0c bf       	out	0x3c, r16	; 60

00000196 <__do_copy_data>:
     196:	12 e0       	ldi	r17, 0x02	; 2
     198:	a0 e0       	ldi	r26, 0x00	; 0
     19a:	b2 e0       	ldi	r27, 0x02	; 2
     19c:	e2 eb       	ldi	r30, 0xB2	; 178
     19e:	fb e1       	ldi	r31, 0x1B	; 27
     1a0:	00 e0       	ldi	r16, 0x00	; 0
     1a2:	0b bf       	out	0x3b, r16	; 59
     1a4:	02 c0       	rjmp	.+4      	; 0x1aa <__do_copy_data+0x14>
     1a6:	07 90       	elpm	r0, Z+
     1a8:	0d 92       	st	X+, r0
     1aa:	a8 3f       	cpi	r26, 0xF8	; 248
     1ac:	b1 07       	cpc	r27, r17
     1ae:	d9 f7       	brne	.-10     	; 0x1a6 <__do_copy_data+0x10>

000001b0 <__do_clear_bss>:
     1b0:	23 e0       	ldi	r18, 0x03	; 3
     1b2:	a8 ef       	ldi	r26, 0xF8	; 248
     1b4:	b2 e0       	ldi	r27, 0x02	; 2
     1b6:	01 c0       	rjmp	.+2      	; 0x1ba <.do_clear_bss_start>

000001b8 <.do_clear_bss_loop>:
     1b8:	1d 92       	st	X+, r1

000001ba <.do_clear_bss_start>:
     1ba:	a6 34       	cpi	r26, 0x46	; 70
     1bc:	b2 07       	cpc	r27, r18
     1be:	e1 f7       	brne	.-8      	; 0x1b8 <.do_clear_bss_loop>
     1c0:	1f d5       	rcall	.+2622   	; 0xc00 <main>
     1c2:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <_exit>

000001c6 <__bad_interrupt>:
     1c6:	1c cf       	rjmp	.-456    	; 0x0 <__vectors>

000001c8 <CAN_message_receive>:
void CAN_print(CAN_message_t message){
	printf("\nID %i\tL: %i\tDATA:\n",message.id,message.length);
	for(uint8_t i = 0; i < message.length; i++){
		printf("%i\t",message.data[i]);
	}
}
     1c8:	84 e0       	ldi	r24, 0x04	; 4
     1ca:	93 e0       	ldi	r25, 0x03	; 3
     1cc:	08 95       	ret

000001ce <CAN_construct_message>:
     1ce:	90 93 fa 02 	sts	0x02FA, r25
     1d2:	80 93 f9 02 	sts	0x02F9, r24
     1d6:	60 93 fb 02 	sts	0x02FB, r22
     1da:	66 23       	and	r22, r22
     1dc:	41 f0       	breq	.+16     	; 0x1ee <CAN_construct_message+0x20>
     1de:	8c ef       	ldi	r24, 0xFC	; 252
     1e0:	92 e0       	ldi	r25, 0x02	; 2
     1e2:	fc 01       	movw	r30, r24
     1e4:	11 92       	st	Z+, r1
     1e6:	2e 2f       	mov	r18, r30
     1e8:	28 1b       	sub	r18, r24
     1ea:	26 17       	cp	r18, r22
     1ec:	d8 f3       	brcs	.-10     	; 0x1e4 <CAN_construct_message+0x16>
     1ee:	08 95       	ret

000001f0 <CAN_read>:
     1f0:	9e c0       	rjmp	.+316    	; 0x32e <MCP2515_read>
     1f2:	08 95       	ret

000001f4 <__vector_5>:
#if NODE == 1
ISR(INT2_vect){//interrupt incoming message
	receive_flag = 1;
}
#elif NODE == 2
ISR(INT4_vect){//interrupt incoming message
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	8f 93       	push	r24
	receive_flag = 1;
     200:	81 e0       	ldi	r24, 0x01	; 1
     202:	80 93 f8 02 	sts	0x02F8, r24
}
     206:	8f 91       	pop	r24
     208:	0f 90       	pop	r0
     20a:	0f be       	out	0x3f, r0	; 63
     20c:	0f 90       	pop	r0
     20e:	1f 90       	pop	r1
     210:	18 95       	reti

00000212 <CAN_interrupt_setup>:
#endif

	
void CAN_interrupt_setup(void){
	cli();
     212:	f8 94       	cli
		
		//General Interrupt Control Register port int2 defined as on?
		GICR |= (1<<INT2);
	#elif NODE == 2
		// Use PE4 as external interrupt pin
		DDRE &= ~(1<<PINE4);
     214:	6c 98       	cbi	0x0d, 4	; 13
	
		// Trigger interrupt on r edge (Compare sec 15.2.2 of Atmega2560 data sheet).
		EICRB &= ~(1<<ISC40);	//x0
     216:	ea e6       	ldi	r30, 0x6A	; 106
     218:	f0 e0       	ldi	r31, 0x00	; 0
     21a:	80 81       	ld	r24, Z
     21c:	8e 7f       	andi	r24, 0xFE	; 254
     21e:	80 83       	st	Z, r24
		EICRB |= (1<<ISC41);	//1x
     220:	80 81       	ld	r24, Z
     222:	82 60       	ori	r24, 0x02	; 2
     224:	80 83       	st	Z, r24
	
		// Enable INT4 (Compare sec 15.2.3 of Atmega2560 data sheet).
		EIMSK |= (1<<INT4);
     226:	ec 9a       	sbi	0x1d, 4	; 29

		//Enable global interrupt.
	#endif
	sei();
     228:	78 94       	sei
     22a:	08 95       	ret

0000022c <CAN_initialize>:
static CAN_message_t CAN_send_buffer;
uint8_t receive_flag = 0;

void CAN_initialize(void){

	MCP2515_initialize();
     22c:	a7 d0       	rcall	.+334    	; 0x37c <MCP2515_initialize>

	// Initialize empty message for transmission
	CAN_construct_message(CAN_ID,CAN_MESSAGE_LENGTH);
     22e:	68 e0       	ldi	r22, 0x08	; 8
     230:	88 e2       	ldi	r24, 0x28	; 40
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	cc df       	rcall	.-104    	; 0x1ce <CAN_construct_message>
	
	// Turn mask/filters off; receive any message AND Enable Rollover
	MCP2515_bit_modify(MCP_RXB0CTRL,0b01100100,0xFF);
     236:	4f ef       	ldi	r20, 0xFF	; 255
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	64 e6       	ldi	r22, 0x64	; 100
     23c:	80 e6       	ldi	r24, 0x60	; 96
     23e:	85 d0       	rcall	.+266    	; 0x34a <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_RXB1CTRL,0b01100100,0xFF);
     240:	4f ef       	ldi	r20, 0xFF	; 255
     242:	50 e0       	ldi	r21, 0x00	; 0
     244:	64 e6       	ldi	r22, 0x64	; 100
     246:	80 e7       	ldi	r24, 0x70	; 112
     248:	80 d0       	rcall	.+256    	; 0x34a <MCP2515_bit_modify>
	
	// RX0IE Receive Buffer 0 FUll Interrupt Enable bit
	MCP2515_bit_modify(MCP_CANINTE,0x01,1);
     24a:	41 e0       	ldi	r20, 0x01	; 1
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	8b e2       	ldi	r24, 0x2B	; 43
     252:	7b d0       	rcall	.+246    	; 0x34a <MCP2515_bit_modify>
	MCP2515_bit_modify(MCP_CANINTE,0x02,1);
     254:	41 e0       	ldi	r20, 0x01	; 1
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	62 e0       	ldi	r22, 0x02	; 2
     25a:	8b e2       	ldi	r24, 0x2B	; 43
     25c:	76 d0       	rcall	.+236    	; 0x34a <MCP2515_bit_modify>
	
	//set CAN mode
	MCP2515_bit_modify(MCP_CANCTRL, MODE_MASK, MODE_NORMAL); 
     25e:	40 e0       	ldi	r20, 0x00	; 0
     260:	50 e0       	ldi	r21, 0x00	; 0
     262:	60 ee       	ldi	r22, 0xE0	; 224
     264:	8f e0       	ldi	r24, 0x0F	; 15
     266:	71 d0       	rcall	.+226    	; 0x34a <MCP2515_bit_modify>
	
	// Set up interrupts.
	CAN_interrupt_setup();
     268:	d4 cf       	rjmp	.-88     	; 0x212 <CAN_interrupt_setup>
     26a:	08 95       	ret

0000026c <CAN_reception_complete>:

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     26c:	04 c0       	rjmp	.+8      	; 0x276 <CAN_reception_complete+0xa>
		printf("CAN_reception_complete is stuck\n");
     26e:	8f e1       	ldi	r24, 0x1F	; 31
     270:	92 e0       	ldi	r25, 0x02	; 2
     272:	0e 94 ce 09 	call	0x139c	; 0x139c <puts>

int8_t CAN_reception_complete(void){
	//printf("MCP_CANINTF = %i",MCP2515_read(MCP_CANINTF));
	
	// Wait for data to be loaded into either receive buffer.
	while(!((MCP2515_read(MCP_CANINTF) & MCP_RX0IF) || (MCP2515_read(MCP_CANINTF) & MCP_RX1IF))){
     276:	8c e2       	ldi	r24, 0x2C	; 44
     278:	5a d0       	rcall	.+180    	; 0x32e <MCP2515_read>
     27a:	80 fd       	sbrc	r24, 0
     27c:	04 c0       	rjmp	.+8      	; 0x286 <CAN_reception_complete+0x1a>
     27e:	8c e2       	ldi	r24, 0x2C	; 44
     280:	56 d0       	rcall	.+172    	; 0x32e <MCP2515_read>
     282:	81 ff       	sbrs	r24, 1
     284:	f4 cf       	rjmp	.-24     	; 0x26e <CAN_reception_complete+0x2>
		};
	
	
	
	// Check which buffer contains the message and clear interrupt flag.
	if(MCP2515_read(MCP_CANINTF) & MCP_RX0IF){
     286:	8c e2       	ldi	r24, 0x2C	; 44
     288:	52 d0       	rcall	.+164    	; 0x32e <MCP2515_read>
     28a:	80 ff       	sbrs	r24, 0
     28c:	07 c0       	rjmp	.+14     	; 0x29c <CAN_reception_complete+0x30>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX0IF,0);
     28e:	40 e0       	ldi	r20, 0x00	; 0
     290:	50 e0       	ldi	r21, 0x00	; 0
     292:	61 e0       	ldi	r22, 0x01	; 1
     294:	8c e2       	ldi	r24, 0x2C	; 44
     296:	59 d0       	rcall	.+178    	; 0x34a <MCP2515_bit_modify>
		return 0;
     298:	80 e0       	ldi	r24, 0x00	; 0
     29a:	08 95       	ret
	}
	if(MCP2515_read(MCP_CANINTF) & MCP_RX1IF){
     29c:	8c e2       	ldi	r24, 0x2C	; 44
     29e:	47 d0       	rcall	.+142    	; 0x32e <MCP2515_read>
     2a0:	81 ff       	sbrs	r24, 1
     2a2:	07 c0       	rjmp	.+14     	; 0x2b2 <CAN_reception_complete+0x46>
		MCP2515_bit_modify(MCP_CANINTF,MCP_RX1IF,0);
     2a4:	40 e0       	ldi	r20, 0x00	; 0
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	62 e0       	ldi	r22, 0x02	; 2
     2aa:	8c e2       	ldi	r24, 0x2C	; 44
     2ac:	4e d0       	rcall	.+156    	; 0x34a <MCP2515_bit_modify>
		return 1;
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	08 95       	ret
	}
	return -1;
     2b2:	8f ef       	ldi	r24, 0xFF	; 255
}
     2b4:	08 95       	ret

000002b6 <CAN_data_receive>:

uint8_t CAN_read(uint8_t adr){
	return MCP2515_read(adr);
}

uint8_t CAN_data_receive(void) {
     2b6:	1f 93       	push	r17
     2b8:	cf 93       	push	r28
     2ba:	df 93       	push	r29
	if(receive_flag){
     2bc:	80 91 f8 02 	lds	r24, 0x02F8
     2c0:	88 23       	and	r24, r24
     2c2:	61 f1       	breq	.+88     	; 0x31c <CAN_data_receive+0x66>
		receive_flag = 0;
     2c4:	10 92 f8 02 	sts	0x02F8, r1
		uint8_t n = CAN_reception_complete();
     2c8:	d1 df       	rcall	.-94     	; 0x26c <CAN_reception_complete>
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
     2ca:	c8 2f       	mov	r28, r24
     2cc:	c2 95       	swap	r28
     2ce:	c0 7f       	andi	r28, 0xF0	; 240
     2d0:	82 e6       	ldi	r24, 0x62	; 98
     2d2:	8c 0f       	add	r24, r28
     2d4:	8d df       	rcall	.-230    	; 0x1f0 <CAN_read>
     2d6:	81 e6       	ldi	r24, 0x61	; 97
     2d8:	8c 0f       	add	r24, r28
     2da:	8a df       	rcall	.-236    	; 0x1f0 <CAN_read>
     2dc:	28 e0       	ldi	r18, 0x08	; 8
     2de:	82 9f       	mul	r24, r18
     2e0:	c0 01       	movw	r24, r0
     2e2:	11 24       	eor	r1, r1
     2e4:	90 93 05 03 	sts	0x0305, r25
     2e8:	80 93 04 03 	sts	0x0304, r24
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
     2ec:	85 e6       	ldi	r24, 0x65	; 101
     2ee:	8c 0f       	add	r24, r28
     2f0:	7f df       	rcall	.-258    	; 0x1f0 <CAN_read>
     2f2:	8f 70       	andi	r24, 0x0F	; 15
     2f4:	80 93 06 03 	sts	0x0306, r24
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     2f8:	88 23       	and	r24, r24
     2fa:	91 f0       	breq	.+36     	; 0x320 <CAN_data_receive+0x6a>
     2fc:	10 e0       	ldi	r17, 0x00	; 0
     2fe:	c6 e0       	ldi	r28, 0x06	; 6
     300:	d3 e0       	ldi	r29, 0x03	; 3
				CAN_receive_buffer.data[m] =  CAN_read(RXBnDM + m);
     302:	86 e6       	ldi	r24, 0x66	; 102
     304:	81 0f       	add	r24, r17
     306:	74 df       	rcall	.-280    	; 0x1f0 <CAN_read>
     308:	e1 2f       	mov	r30, r17
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ec 5f       	subi	r30, 0xFC	; 252
     30e:	fc 4f       	sbci	r31, 0xFC	; 252
     310:	83 83       	std	Z+3, r24	; 0x03
		receive_flag = 0;
		uint8_t n = CAN_reception_complete();
		if (n >= 0){
			CAN_receive_buffer.id = ((CAN_read(RXBnSIDH + n*0x10)<<3)|(0b11100000 & (CAN_read(RXBnSIDL + n*0x10))>>5));
			CAN_receive_buffer.length = (CAN_read(RXBnDLC + n*0x10) & 0b00001111);
			for (uint8_t m = 0; m < CAN_receive_buffer.length; m++){
     312:	1f 5f       	subi	r17, 0xFF	; 255
     314:	88 81       	ld	r24, Y
     316:	18 17       	cp	r17, r24
     318:	a0 f3       	brcs	.-24     	; 0x302 <CAN_data_receive+0x4c>
     31a:	04 c0       	rjmp	.+8      	; 0x324 <CAN_data_receive+0x6e>
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
	}
	return 0;
     31c:	80 e0       	ldi	r24, 0x00	; 0
     31e:	03 c0       	rjmp	.+6      	; 0x326 <CAN_data_receive+0x70>
		}
		#if UART_ENABLE
			printf("\nRECIVED MESSAGE:");
			CAN_print(CAN_receive_buffer);
		#endif
		return 1;
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	01 c0       	rjmp	.+2      	; 0x326 <CAN_data_receive+0x70>
     324:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	1f 91       	pop	r17
     32c:	08 95       	ret

0000032e <MCP2515_read>:
	SPI_select();
	SPI_send(MCP_READ_STATUS);
	uint8_t recieved_status = SPI_receive();
	SPI_deselect();
	return recieved_status;
}
     32e:	cf 93       	push	r28
     330:	c8 2f       	mov	r28, r24
     332:	33 d0       	rcall	.+102    	; 0x39a <SPI_select>
     334:	83 e0       	ldi	r24, 0x03	; 3
     336:	25 d0       	rcall	.+74     	; 0x382 <SPI_send>
     338:	8c 2f       	mov	r24, r28
     33a:	23 d0       	rcall	.+70     	; 0x382 <SPI_send>
     33c:	27 d0       	rcall	.+78     	; 0x38c <SPI_receive>
     33e:	c8 2f       	mov	r28, r24
     340:	2e d0       	rcall	.+92     	; 0x39e <SPI_deselect>
     342:	8c 2f       	mov	r24, r28
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	cf 91       	pop	r28
     348:	08 95       	ret

0000034a <MCP2515_bit_modify>:

void MCP2515_bit_modify(uint8_t adr, uint8_t mask, int data){
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	18 2f       	mov	r17, r24
     352:	d6 2f       	mov	r29, r22
     354:	c4 2f       	mov	r28, r20
	SPI_select();
     356:	21 d0       	rcall	.+66     	; 0x39a <SPI_select>
	SPI_send(MCP_BITMOD);
     358:	85 e0       	ldi	r24, 0x05	; 5
     35a:	13 d0       	rcall	.+38     	; 0x382 <SPI_send>
	SPI_send(adr);
     35c:	81 2f       	mov	r24, r17
     35e:	11 d0       	rcall	.+34     	; 0x382 <SPI_send>
	SPI_send(mask);
     360:	8d 2f       	mov	r24, r29
     362:	0f d0       	rcall	.+30     	; 0x382 <SPI_send>
	SPI_send(data);
     364:	8c 2f       	mov	r24, r28
     366:	0d d0       	rcall	.+26     	; 0x382 <SPI_send>
	SPI_deselect();
     368:	1a d0       	rcall	.+52     	; 0x39e <SPI_deselect>
}
     36a:	df 91       	pop	r29
     36c:	cf 91       	pop	r28
     36e:	1f 91       	pop	r17
     370:	08 95       	ret

00000372 <MCP2515_reset>:

void MCP2515_reset(void){
	#if UART_ENABLE
		printf("Resetting MCP2515\n");
	#endif
	SPI_select();
     372:	13 d0       	rcall	.+38     	; 0x39a <SPI_select>
	SPI_send(MCP_RESET);
     374:	80 ec       	ldi	r24, 0xC0	; 192
     376:	05 d0       	rcall	.+10     	; 0x382 <SPI_send>
	SPI_deselect();
     378:	12 c0       	rjmp	.+36     	; 0x39e <SPI_deselect>
     37a:	08 95       	ret

0000037c <MCP2515_initialize>:

#include "MCP2515_driver.h"
#include "SPI.h"

void MCP2515_initialize(void){
	SPI_initialize();
     37c:	12 d0       	rcall	.+36     	; 0x3a2 <SPI_initialize>
	MCP2515_reset();
     37e:	f9 cf       	rjmp	.-14     	; 0x372 <MCP2515_reset>
     380:	08 95       	ret

00000382 <SPI_send>:


void SPI_send(uint8_t data) {
	
	// Start the transmission
	SPDR = data;
     382:	8e bd       	out	0x2e, r24	; 46
	// Wait for transmission complete (checks if the register is empty)
	while(!(SPSR & (1<<SPIF)));
     384:	0d b4       	in	r0, 0x2d	; 45
     386:	07 fe       	sbrs	r0, 7
     388:	fd cf       	rjmp	.-6      	; 0x384 <SPI_send+0x2>

}
     38a:	08 95       	ret

0000038c <SPI_receive>:


uint8_t SPI_receive(void){
	
	// Send dummy data to receive from slave
	SPI_send(0);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	f9 df       	rcall	.-14     	; 0x382 <SPI_send>
	
	// Wait for reception complete
	while(!(SPSR & (1<<SPIF)));
     390:	0d b4       	in	r0, 0x2d	; 45
     392:	07 fe       	sbrs	r0, 7
     394:	fd cf       	rjmp	.-6      	; 0x390 <SPI_receive+0x4>

	// Return Data Register
	return SPDR;
     396:	8e b5       	in	r24, 0x2e	; 46
}
     398:	08 95       	ret

0000039a <SPI_select>:

void SPI_select(void){
	PORTB &= ~(1 << SPI_SS);
     39a:	2f 98       	cbi	0x05, 7	; 5
     39c:	08 95       	ret

0000039e <SPI_deselect>:
}

void SPI_deselect(void){
	PORTB |= (1 << SPI_SS);
     39e:	2f 9a       	sbi	0x05, 7	; 5
     3a0:	08 95       	ret

000003a2 <SPI_initialize>:
void SPI_initialize(void){
	//IF DO SOMETHING! 
	#if NODE == 1
		DDRB &= ~(1 << SPI_MISO);
	#elif NODE == 2
		DDRB |= (1<<PB0);
     3a2:	20 9a       	sbi	0x04, 0	; 4
		SPCR |= (1<<SPR0);
     3a4:	8c b5       	in	r24, 0x2c	; 44
     3a6:	81 60       	ori	r24, 0x01	; 1
     3a8:	8c bd       	out	0x2c, r24	; 44
	#endif
	
	/* Set MOSI and SCK output, all others input */
	DDRB |= (1<<SPI_MOSI)|(1<<SPI_SCK)|(1<<SPI_SS); //PB0 is not connected, but has to be set to output in order for SPI-comm to work
     3aa:	84 b1       	in	r24, 0x04	; 4
     3ac:	86 68       	ori	r24, 0x86	; 134
     3ae:	84 b9       	out	0x04, r24	; 4
	/* Enable SPI, Master, set clock rate fck/16 */
	SPCR |= (1<<SPE)|(1<<MSTR);
     3b0:	8c b5       	in	r24, 0x2c	; 44
     3b2:	80 65       	ori	r24, 0x50	; 80
     3b4:	8c bd       	out	0x2c, r24	; 44
		
	SPI_deselect();
     3b6:	f3 cf       	rjmp	.-26     	; 0x39e <SPI_deselect>
     3b8:	08 95       	ret

000003ba <send_UART>:

#include "uart.h"

void send_UART(char letter){
	//send UART melding
	while( !(UCSR0A & (1<<UDRE0)) );				/* UCSR0A = USART 0 Control and Status Register A, UDRE0 = UCSR0A bit definitions (5), wait for data to be transmitted (checks if the register is empty) */
     3ba:	e0 ec       	ldi	r30, 0xC0	; 192
     3bc:	f0 e0       	ldi	r31, 0x00	; 0
     3be:	90 81       	ld	r25, Z
     3c0:	95 ff       	sbrs	r25, 5
     3c2:	fd cf       	rjmp	.-6      	; 0x3be <send_UART+0x4>
	UDR0 = letter;									/* UDR0 = USART 0 Data Register */
     3c4:	80 93 c6 00 	sts	0x00C6, r24
     3c8:	08 95       	ret

000003ca <recieve_UART>:



unsigned int recieve_UART(void){
	
	while (!(UCSR0A & (1 << RXC0)));				/* UCSR0A = USART 0 Control and Status Register A, RXC0 = UCSR0A bit definition (7) , waiting for data to be transmitted (checks if the register is empty) */
     3ca:	e0 ec       	ldi	r30, 0xC0	; 192
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	88 23       	and	r24, r24
     3d2:	ec f7       	brge	.-6      	; 0x3ce <recieve_UART+0x4>

	return UDR0;									/* UDR0 = USART 0 Data Register */
     3d4:	80 91 c6 00 	lds	r24, 0x00C6
}
     3d8:	90 e0       	ldi	r25, 0x00	; 0
     3da:	08 95       	ret

000003dc <init_UART>:


void init_UART(){
	
	/* Set baud rate */
	UBRR0H = (unsigned char)(UBRR>>8);
     3dc:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = (unsigned char)UBRR;
     3e0:	87 e6       	ldi	r24, 0x67	; 103
     3e2:	80 93 c4 00 	sts	0x00C4, r24
	/* Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     3e6:	88 e1       	ldi	r24, 0x18	; 24
     3e8:	80 93 c1 00 	sts	0x00C1, r24
	/* Set frame format: 8data, 2stop bit */
	if(NODE == 2){
		UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     3ec:	8e e0       	ldi	r24, 0x0E	; 14
     3ee:	80 93 c2 00 	sts	0x00C2, r24
	}

	
	fdevopen((int(*)(char, struct __file*))&send_UART, (int(*)(struct __file*))&recieve_UART);			//overrides printf("string");
     3f2:	65 ee       	ldi	r22, 0xE5	; 229
     3f4:	71 e0       	ldi	r23, 0x01	; 1
     3f6:	8d ed       	ldi	r24, 0xDD	; 221
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	75 c7       	rjmp	.+3818   	; 0x12e6 <fdevopen>
     3fc:	08 95       	ret

000003fe <IR_init>:
     3fe:	cf 93       	push	r28
     400:	df 93       	push	r29
     402:	80 98       	cbi	0x10, 0	; 16
     404:	ea e7       	ldi	r30, 0x7A	; 122
     406:	f0 e0       	ldi	r31, 0x00	; 0
     408:	80 81       	ld	r24, Z
     40a:	87 60       	ori	r24, 0x07	; 7
     40c:	80 83       	st	Z, r24
     40e:	ac e7       	ldi	r26, 0x7C	; 124
     410:	b0 e0       	ldi	r27, 0x00	; 0
     412:	80 e4       	ldi	r24, 0x40	; 64
     414:	8c 93       	st	X, r24
     416:	8c 91       	ld	r24, X
     418:	8c 93       	st	X, r24
     41a:	cb e7       	ldi	r28, 0x7B	; 123
     41c:	d0 e0       	ldi	r29, 0x00	; 0
     41e:	88 81       	ld	r24, Y
     420:	87 7f       	andi	r24, 0xF7	; 247
     422:	88 83       	st	Y, r24
     424:	80 81       	ld	r24, Z
     426:	80 62       	ori	r24, 0x20	; 32
     428:	80 83       	st	Z, r24
     42a:	87 e0       	ldi	r24, 0x07	; 7
     42c:	88 83       	st	Y, r24
     42e:	8c 91       	ld	r24, X
     430:	80 62       	ori	r24, 0x20	; 32
     432:	8c 93       	st	X, r24
     434:	80 81       	ld	r24, Z
     436:	80 68       	ori	r24, 0x80	; 128
     438:	80 83       	st	Z, r24
     43a:	80 81       	ld	r24, Z
     43c:	80 64       	ori	r24, 0x40	; 64
     43e:	80 83       	st	Z, r24
     440:	df 91       	pop	r29
     442:	cf 91       	pop	r28
     444:	08 95       	ret

00000446 <motor_set_motor_speed>:
}


int16_t motor_get_speed_max(void){
	return motor_speed_max;
}
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	00 d0       	rcall	.+0      	; 0x44c <motor_set_motor_speed+0x6>
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
     450:	90 e5       	ldi	r25, 0x50	; 80
     452:	99 83       	std	Y+1, r25	; 0x01
     454:	1a 82       	std	Y+2, r1	; 0x02
     456:	8b 83       	std	Y+3, r24	; 0x03
     458:	63 e0       	ldi	r22, 0x03	; 3
     45a:	70 e0       	ldi	r23, 0x00	; 0
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	55 d4       	rcall	.+2218   	; 0xd0c <TWI_Start_Transceiver_With_Data>
     462:	0f 90       	pop	r0
     464:	0f 90       	pop	r0
     466:	0f 90       	pop	r0
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <motor_set_direction>:
     46e:	8f 3f       	cpi	r24, 0xFF	; 255
     470:	41 f0       	breq	.+16     	; 0x482 <motor_set_direction+0x14>
     472:	81 30       	cpi	r24, 0x01	; 1
     474:	59 f4       	brne	.+22     	; 0x48c <motor_set_direction+0x1e>
     476:	e2 e0       	ldi	r30, 0x02	; 2
     478:	f1 e0       	ldi	r31, 0x01	; 1
     47a:	80 81       	ld	r24, Z
     47c:	8d 7f       	andi	r24, 0xFD	; 253
     47e:	80 83       	st	Z, r24
     480:	08 95       	ret
     482:	e2 e0       	ldi	r30, 0x02	; 2
     484:	f1 e0       	ldi	r31, 0x01	; 1
     486:	80 81       	ld	r24, Z
     488:	82 60       	ori	r24, 0x02	; 2
     48a:	80 83       	st	Z, r24
     48c:	08 95       	ret

0000048e <encoder_reset>:
     48e:	e2 e0       	ldi	r30, 0x02	; 2
     490:	f1 e0       	ldi	r31, 0x01	; 1
     492:	80 81       	ld	r24, Z
     494:	8f 7b       	andi	r24, 0xBF	; 191
     496:	80 83       	st	Z, r24
     498:	8a e6       	ldi	r24, 0x6A	; 106
     49a:	8a 95       	dec	r24
     49c:	f1 f7       	brne	.-4      	; 0x49a <encoder_reset+0xc>
     49e:	00 c0       	rjmp	.+0      	; 0x4a0 <encoder_reset+0x12>
     4a0:	80 81       	ld	r24, Z
     4a2:	80 64       	ori	r24, 0x40	; 64
     4a4:	80 83       	st	Z, r24
     4a6:	08 95       	ret

000004a8 <encoder_read>:
     4a8:	e2 e0       	ldi	r30, 0x02	; 2
     4aa:	f1 e0       	ldi	r31, 0x01	; 1
     4ac:	80 81       	ld	r24, Z
     4ae:	88 60       	ori	r24, 0x08	; 8
     4b0:	80 83       	st	Z, r24
     4b2:	80 81       	ld	r24, Z
     4b4:	8f 7d       	andi	r24, 0xDF	; 223
     4b6:	80 83       	st	Z, r24
     4b8:	80 81       	ld	r24, Z
     4ba:	87 7f       	andi	r24, 0xF7	; 247
     4bc:	80 83       	st	Z, r24
     4be:	8a e6       	ldi	r24, 0x6A	; 106
     4c0:	8a 95       	dec	r24
     4c2:	f1 f7       	brne	.-4      	; 0x4c0 <encoder_read+0x18>
     4c4:	00 c0       	rjmp	.+0      	; 0x4c6 <encoder_read+0x1e>
     4c6:	20 91 06 01 	lds	r18, 0x0106
     4ca:	80 81       	ld	r24, Z
     4cc:	88 60       	ori	r24, 0x08	; 8
     4ce:	80 83       	st	Z, r24
     4d0:	8a e6       	ldi	r24, 0x6A	; 106
     4d2:	8a 95       	dec	r24
     4d4:	f1 f7       	brne	.-4      	; 0x4d2 <encoder_read+0x2a>
     4d6:	00 c0       	rjmp	.+0      	; 0x4d8 <encoder_read+0x30>
     4d8:	80 91 06 01 	lds	r24, 0x0106
     4dc:	90 81       	ld	r25, Z
     4de:	90 62       	ori	r25, 0x20	; 32
     4e0:	90 83       	st	Z, r25
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	92 2b       	or	r25, r18
     4e6:	08 95       	ret

000004e8 <motor_get_speed_range>:
     4e8:	80 91 1a 03 	lds	r24, 0x031A
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	20 91 1b 03 	lds	r18, 0x031B
     4f2:	82 1b       	sub	r24, r18
     4f4:	91 09       	sbc	r25, r1
     4f6:	08 95       	ret

000004f8 <motor_get_speed_min>:
     4f8:	80 91 1b 03 	lds	r24, 0x031B
     4fc:	90 e0       	ldi	r25, 0x00	; 0
     4fe:	08 95       	ret

00000500 <motor_goto_end>:


int16_t pos;
int16_t old_pos;

int16_t motor_goto_end(uint8_t motor_speed, int8_t direction){
     500:	1f 93       	push	r17
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	c8 2f       	mov	r28, r24
     508:	86 2f       	mov	r24, r22
	motor_set_direction(direction);
     50a:	b1 df       	rcall	.-158    	; 0x46e <motor_set_direction>
	motor_set_motor_speed(motor_speed);
     50c:	8c 2f       	mov	r24, r28
     50e:	9b df       	rcall	.-202    	; 0x446 <motor_set_motor_speed>
	pos = encoder_read();
     510:	cb df       	rcall	.-106    	; 0x4a8 <encoder_read>
     512:	90 93 1f 03 	sts	0x031F, r25
     516:	80 93 1e 03 	sts	0x031E, r24
	uint8_t time_counter = 0;
     51a:	10 e0       	ldi	r17, 0x00	; 0
	int16_t encoder_val = 0;
	
	while(time_counter < 2/T_UPDATE){
		encoder_val = encoder_read();
     51c:	c5 df       	rcall	.-118    	; 0x4a8 <encoder_read>
     51e:	ec 01       	movw	r28, r24
		time_counter += timer_check_flag();
     520:	e1 d3       	rcall	.+1986   	; 0xce4 <timer_check_flag>
     522:	18 0f       	add	r17, r24
		if(encoder_val != pos){
     524:	20 91 1e 03 	lds	r18, 0x031E
     528:	30 91 1f 03 	lds	r19, 0x031F
     52c:	c2 17       	cp	r28, r18
     52e:	d3 07       	cpc	r29, r19
     530:	21 f0       	breq	.+8      	; 0x53a <motor_goto_end+0x3a>
			pos = encoder_val;
     532:	d0 93 1f 03 	sts	0x031F, r29
     536:	c0 93 1e 03 	sts	0x031E, r28
	motor_set_motor_speed(motor_speed);
	pos = encoder_read();
	uint8_t time_counter = 0;
	int16_t encoder_val = 0;
	
	while(time_counter < 2/T_UPDATE){
     53a:	61 2f       	mov	r22, r17
     53c:	70 e0       	ldi	r23, 0x00	; 0
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	8d d5       	rcall	.+2842   	; 0x105e <__floatsisf>
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	48 ec       	ldi	r20, 0xC8	; 200
     54a:	52 e4       	ldi	r21, 0x42	; 66
     54c:	e9 d4       	rcall	.+2514   	; 0xf20 <__cmpsf2>
     54e:	88 23       	and	r24, r24
     550:	2c f3       	brlt	.-54     	; 0x51c <motor_goto_end+0x1c>
		time_counter += timer_check_flag();
		if(encoder_val != pos){
			pos = encoder_val;
		}	
	}
	motor_set_motor_speed(0);
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	78 df       	rcall	.-272    	; 0x446 <motor_set_motor_speed>
	return pos;
}
     556:	80 91 1e 03 	lds	r24, 0x031E
     55a:	90 91 1f 03 	lds	r25, 0x031F
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	1f 91       	pop	r17
     564:	08 95       	ret

00000566 <motor_get_position>:

int16_t motor_get_position(void){
	old_pos = pos;
     566:	80 91 1e 03 	lds	r24, 0x031E
     56a:	90 91 1f 03 	lds	r25, 0x031F
     56e:	90 93 1d 03 	sts	0x031D, r25
     572:	80 93 1c 03 	sts	0x031C, r24
	pos = encoder_read(); 
     576:	98 df       	rcall	.-208    	; 0x4a8 <encoder_read>
     578:	90 93 1f 03 	sts	0x031F, r25
     57c:	80 93 1e 03 	sts	0x031E, r24
	return pos;
}
     580:	08 95       	ret

00000582 <motor_get_velocity>:

int16_t motor_get_velocity(void){
	motor_get_position();
     582:	f1 df       	rcall	.-30     	; 0x566 <motor_get_position>
	return (pos - old_pos);
     584:	80 91 1e 03 	lds	r24, 0x031E
     588:	90 91 1f 03 	lds	r25, 0x031F
     58c:	20 91 1c 03 	lds	r18, 0x031C
     590:	30 91 1d 03 	lds	r19, 0x031D
}
     594:	82 1b       	sub	r24, r18
     596:	93 0b       	sbc	r25, r19
     598:	08 95       	ret

0000059a <motor_calibrate_max_velocity>:

uint8_t motor_calibrate_max_velocity(uint8_t max_motor_speed, int8_t direction){
     59a:	cf 92       	push	r12
     59c:	df 92       	push	r13
     59e:	ef 92       	push	r14
     5a0:	ff 92       	push	r15
     5a2:	0f 93       	push	r16
     5a4:	1f 93       	push	r17
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	c8 2f       	mov	r28, r24
     5ac:	86 2f       	mov	r24, r22
	motor_set_direction(direction);
     5ae:	5f df       	rcall	.-322    	; 0x46e <motor_set_direction>
	motor_set_motor_speed(max_motor_speed);
     5b0:	8c 2f       	mov	r24, r28
     5b2:	49 df       	rcall	.-366    	; 0x446 <motor_set_motor_speed>
	uint16_t time_counter = 0;
	
	while(pos > (pos_max-pos_min)*0.8){
     5b4:	60 91 1e 03 	lds	r22, 0x031E
     5b8:	70 91 1f 03 	lds	r23, 0x031F
     5bc:	88 27       	eor	r24, r24
     5be:	77 fd       	sbrc	r23, 7
     5c0:	80 95       	com	r24
     5c2:	98 2f       	mov	r25, r24
     5c4:	4c d5       	rcall	.+2712   	; 0x105e <__floatsisf>
     5c6:	6b 01       	movw	r12, r22
     5c8:	7c 01       	movw	r14, r24
     5ca:	60 91 20 03 	lds	r22, 0x0320
     5ce:	70 91 21 03 	lds	r23, 0x0321
     5d2:	80 91 0f 03 	lds	r24, 0x030F
     5d6:	90 91 10 03 	lds	r25, 0x0310
     5da:	68 1b       	sub	r22, r24
     5dc:	79 0b       	sbc	r23, r25
     5de:	88 27       	eor	r24, r24
     5e0:	77 fd       	sbrc	r23, 7
     5e2:	80 95       	com	r24
     5e4:	98 2f       	mov	r25, r24
     5e6:	3b d5       	rcall	.+2678   	; 0x105e <__floatsisf>
     5e8:	2d ec       	ldi	r18, 0xCD	; 205
     5ea:	3c ec       	ldi	r19, 0xCC	; 204
     5ec:	4c e4       	ldi	r20, 0x4C	; 76
     5ee:	5f e3       	ldi	r21, 0x3F	; 63
     5f0:	ea d5       	rcall	.+3028   	; 0x11c6 <__mulsf3>
     5f2:	9b 01       	movw	r18, r22
     5f4:	ac 01       	movw	r20, r24
     5f6:	c7 01       	movw	r24, r14
     5f8:	b6 01       	movw	r22, r12
     5fa:	e1 d5       	rcall	.+3010   	; 0x11be <__gesf2>
     5fc:	18 16       	cp	r1, r24
     5fe:	3c f5       	brge	.+78     	; 0x64e <motor_calibrate_max_velocity+0xb4>
		motor_get_position();
     600:	b2 df       	rcall	.-156    	; 0x566 <motor_get_position>
uint8_t motor_calibrate_max_velocity(uint8_t max_motor_speed, int8_t direction){
	motor_set_direction(direction);
	motor_set_motor_speed(max_motor_speed);
	uint16_t time_counter = 0;
	
	while(pos > (pos_max-pos_min)*0.8){
     602:	60 91 1e 03 	lds	r22, 0x031E
     606:	70 91 1f 03 	lds	r23, 0x031F
     60a:	88 27       	eor	r24, r24
     60c:	77 fd       	sbrc	r23, 7
     60e:	80 95       	com	r24
     610:	98 2f       	mov	r25, r24
     612:	25 d5       	rcall	.+2634   	; 0x105e <__floatsisf>
     614:	6b 01       	movw	r12, r22
     616:	7c 01       	movw	r14, r24
     618:	60 91 20 03 	lds	r22, 0x0320
     61c:	70 91 21 03 	lds	r23, 0x0321
     620:	80 91 0f 03 	lds	r24, 0x030F
     624:	90 91 10 03 	lds	r25, 0x0310
     628:	68 1b       	sub	r22, r24
     62a:	79 0b       	sbc	r23, r25
     62c:	88 27       	eor	r24, r24
     62e:	77 fd       	sbrc	r23, 7
     630:	80 95       	com	r24
     632:	98 2f       	mov	r25, r24
     634:	14 d5       	rcall	.+2600   	; 0x105e <__floatsisf>
     636:	2d ec       	ldi	r18, 0xCD	; 205
     638:	3c ec       	ldi	r19, 0xCC	; 204
     63a:	4c e4       	ldi	r20, 0x4C	; 76
     63c:	5f e3       	ldi	r21, 0x3F	; 63
     63e:	c3 d5       	rcall	.+2950   	; 0x11c6 <__mulsf3>
     640:	9b 01       	movw	r18, r22
     642:	ac 01       	movw	r20, r24
     644:	c7 01       	movw	r24, r14
     646:	b6 01       	movw	r22, r12
     648:	ba d5       	rcall	.+2932   	; 0x11be <__gesf2>
     64a:	18 16       	cp	r1, r24
     64c:	cc f2       	brlt	.-78     	; 0x600 <motor_calibrate_max_velocity+0x66>
		motor_get_position();
	}
	
	while(pos >= (pos_max-pos_min)*0.2){
     64e:	60 91 1e 03 	lds	r22, 0x031E
     652:	70 91 1f 03 	lds	r23, 0x031F
     656:	88 27       	eor	r24, r24
     658:	77 fd       	sbrc	r23, 7
     65a:	80 95       	com	r24
     65c:	98 2f       	mov	r25, r24
     65e:	ff d4       	rcall	.+2558   	; 0x105e <__floatsisf>
     660:	6b 01       	movw	r12, r22
     662:	7c 01       	movw	r14, r24
     664:	60 91 20 03 	lds	r22, 0x0320
     668:	70 91 21 03 	lds	r23, 0x0321
     66c:	80 91 0f 03 	lds	r24, 0x030F
     670:	90 91 10 03 	lds	r25, 0x0310
     674:	68 1b       	sub	r22, r24
     676:	79 0b       	sbc	r23, r25
     678:	88 27       	eor	r24, r24
     67a:	77 fd       	sbrc	r23, 7
     67c:	80 95       	com	r24
     67e:	98 2f       	mov	r25, r24
     680:	ee d4       	rcall	.+2524   	; 0x105e <__floatsisf>
     682:	2d ec       	ldi	r18, 0xCD	; 205
     684:	3c ec       	ldi	r19, 0xCC	; 204
     686:	4c e4       	ldi	r20, 0x4C	; 76
     688:	5e e3       	ldi	r21, 0x3E	; 62
     68a:	9d d5       	rcall	.+2874   	; 0x11c6 <__mulsf3>
     68c:	9b 01       	movw	r18, r22
     68e:	ac 01       	movw	r20, r24
     690:	c7 01       	movw	r24, r14
     692:	b6 01       	movw	r22, r12
     694:	94 d5       	rcall	.+2856   	; 0x11be <__gesf2>
     696:	88 23       	and	r24, r24
     698:	6c f1       	brlt	.+90     	; 0x6f4 <motor_calibrate_max_velocity+0x15a>
     69a:	c0 e0       	ldi	r28, 0x00	; 0
     69c:	d0 e0       	ldi	r29, 0x00	; 0
		motor_get_position();
     69e:	63 df       	rcall	.-314    	; 0x566 <motor_get_position>
		time_counter += timer_check_flag();
     6a0:	21 d3       	rcall	.+1602   	; 0xce4 <timer_check_flag>
     6a2:	c8 0f       	add	r28, r24
     6a4:	d1 1d       	adc	r29, r1
	
	while(pos > (pos_max-pos_min)*0.8){
		motor_get_position();
	}
	
	while(pos >= (pos_max-pos_min)*0.2){
     6a6:	60 91 1e 03 	lds	r22, 0x031E
     6aa:	70 91 1f 03 	lds	r23, 0x031F
     6ae:	88 27       	eor	r24, r24
     6b0:	77 fd       	sbrc	r23, 7
     6b2:	80 95       	com	r24
     6b4:	98 2f       	mov	r25, r24
     6b6:	d3 d4       	rcall	.+2470   	; 0x105e <__floatsisf>
     6b8:	6b 01       	movw	r12, r22
     6ba:	7c 01       	movw	r14, r24
     6bc:	60 91 20 03 	lds	r22, 0x0320
     6c0:	70 91 21 03 	lds	r23, 0x0321
     6c4:	80 91 0f 03 	lds	r24, 0x030F
     6c8:	90 91 10 03 	lds	r25, 0x0310
     6cc:	68 1b       	sub	r22, r24
     6ce:	79 0b       	sbc	r23, r25
     6d0:	88 27       	eor	r24, r24
     6d2:	77 fd       	sbrc	r23, 7
     6d4:	80 95       	com	r24
     6d6:	98 2f       	mov	r25, r24
     6d8:	c2 d4       	rcall	.+2436   	; 0x105e <__floatsisf>
     6da:	2d ec       	ldi	r18, 0xCD	; 205
     6dc:	3c ec       	ldi	r19, 0xCC	; 204
     6de:	4c e4       	ldi	r20, 0x4C	; 76
     6e0:	5e e3       	ldi	r21, 0x3E	; 62
     6e2:	71 d5       	rcall	.+2786   	; 0x11c6 <__mulsf3>
     6e4:	9b 01       	movw	r18, r22
     6e6:	ac 01       	movw	r20, r24
     6e8:	c7 01       	movw	r24, r14
     6ea:	b6 01       	movw	r22, r12
     6ec:	68 d5       	rcall	.+2768   	; 0x11be <__gesf2>
     6ee:	88 23       	and	r24, r24
     6f0:	b4 f6       	brge	.-84     	; 0x69e <motor_calibrate_max_velocity+0x104>
     6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <motor_calibrate_max_velocity+0x15e>
     6f4:	c0 e0       	ldi	r28, 0x00	; 0
     6f6:	d0 e0       	ldi	r29, 0x00	; 0
		motor_get_position();
		time_counter += timer_check_flag();
	}
	
	while(pos > (pos_max-pos_min)*0.1){
     6f8:	60 91 1e 03 	lds	r22, 0x031E
     6fc:	70 91 1f 03 	lds	r23, 0x031F
     700:	88 27       	eor	r24, r24
     702:	77 fd       	sbrc	r23, 7
     704:	80 95       	com	r24
     706:	98 2f       	mov	r25, r24
     708:	aa d4       	rcall	.+2388   	; 0x105e <__floatsisf>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
     70e:	60 91 20 03 	lds	r22, 0x0320
     712:	70 91 21 03 	lds	r23, 0x0321
     716:	80 91 0f 03 	lds	r24, 0x030F
     71a:	90 91 10 03 	lds	r25, 0x0310
     71e:	68 1b       	sub	r22, r24
     720:	79 0b       	sbc	r23, r25
     722:	88 27       	eor	r24, r24
     724:	77 fd       	sbrc	r23, 7
     726:	80 95       	com	r24
     728:	98 2f       	mov	r25, r24
     72a:	99 d4       	rcall	.+2354   	; 0x105e <__floatsisf>
     72c:	2d ec       	ldi	r18, 0xCD	; 205
     72e:	3c ec       	ldi	r19, 0xCC	; 204
     730:	4c ec       	ldi	r20, 0xCC	; 204
     732:	5d e3       	ldi	r21, 0x3D	; 61
     734:	48 d5       	rcall	.+2704   	; 0x11c6 <__mulsf3>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c7 01       	movw	r24, r14
     73c:	b6 01       	movw	r22, r12
     73e:	3f d5       	rcall	.+2686   	; 0x11be <__gesf2>
     740:	18 16       	cp	r1, r24
     742:	3c f5       	brge	.+78     	; 0x792 <motor_calibrate_max_velocity+0x1f8>
		motor_get_position();
     744:	10 df       	rcall	.-480    	; 0x566 <motor_get_position>
	while(pos >= (pos_max-pos_min)*0.2){
		motor_get_position();
		time_counter += timer_check_flag();
	}
	
	while(pos > (pos_max-pos_min)*0.1){
     746:	60 91 1e 03 	lds	r22, 0x031E
     74a:	70 91 1f 03 	lds	r23, 0x031F
     74e:	88 27       	eor	r24, r24
     750:	77 fd       	sbrc	r23, 7
     752:	80 95       	com	r24
     754:	98 2f       	mov	r25, r24
     756:	83 d4       	rcall	.+2310   	; 0x105e <__floatsisf>
     758:	6b 01       	movw	r12, r22
     75a:	7c 01       	movw	r14, r24
     75c:	60 91 20 03 	lds	r22, 0x0320
     760:	70 91 21 03 	lds	r23, 0x0321
     764:	80 91 0f 03 	lds	r24, 0x030F
     768:	90 91 10 03 	lds	r25, 0x0310
     76c:	68 1b       	sub	r22, r24
     76e:	79 0b       	sbc	r23, r25
     770:	88 27       	eor	r24, r24
     772:	77 fd       	sbrc	r23, 7
     774:	80 95       	com	r24
     776:	98 2f       	mov	r25, r24
     778:	72 d4       	rcall	.+2276   	; 0x105e <__floatsisf>
     77a:	2d ec       	ldi	r18, 0xCD	; 205
     77c:	3c ec       	ldi	r19, 0xCC	; 204
     77e:	4c ec       	ldi	r20, 0xCC	; 204
     780:	5d e3       	ldi	r21, 0x3D	; 61
     782:	21 d5       	rcall	.+2626   	; 0x11c6 <__mulsf3>
     784:	9b 01       	movw	r18, r22
     786:	ac 01       	movw	r20, r24
     788:	c7 01       	movw	r24, r14
     78a:	b6 01       	movw	r22, r12
     78c:	18 d5       	rcall	.+2608   	; 0x11be <__gesf2>
     78e:	18 16       	cp	r1, r24
     790:	cc f2       	brlt	.-78     	; 0x744 <motor_calibrate_max_velocity+0x1aa>
		motor_get_position();
	}
	motor_set_motor_speed(0);
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	58 de       	rcall	.-848    	; 0x446 <motor_set_motor_speed>
	printf("p %i \t t %i \t v %i \n", (((pos_max-pos_min)/10)*6),(time_counter),((((pos_max-pos_min)/10)*6)/time_counter));
     796:	80 91 20 03 	lds	r24, 0x0320
     79a:	90 91 21 03 	lds	r25, 0x0321
     79e:	20 91 0f 03 	lds	r18, 0x030F
     7a2:	30 91 10 03 	lds	r19, 0x0310
     7a6:	82 1b       	sub	r24, r18
     7a8:	93 0b       	sbc	r25, r19
     7aa:	0a e0       	ldi	r16, 0x0A	; 10
     7ac:	10 e0       	ldi	r17, 0x00	; 0
     7ae:	b8 01       	movw	r22, r16
     7b0:	81 d5       	rcall	.+2818   	; 0x12b4 <__divmodhi4>
     7b2:	9b 01       	movw	r18, r22
     7b4:	22 0f       	add	r18, r18
     7b6:	33 1f       	adc	r19, r19
     7b8:	62 0f       	add	r22, r18
     7ba:	73 1f       	adc	r23, r19
     7bc:	9b 01       	movw	r18, r22
     7be:	22 0f       	add	r18, r18
     7c0:	33 1f       	adc	r19, r19
     7c2:	c9 01       	movw	r24, r18
     7c4:	be 01       	movw	r22, r28
     7c6:	62 d5       	rcall	.+2756   	; 0x128c <__udivmodhi4>
     7c8:	7f 93       	push	r23
     7ca:	6f 93       	push	r22
     7cc:	df 93       	push	r29
     7ce:	cf 93       	push	r28
     7d0:	3f 93       	push	r19
     7d2:	2f 93       	push	r18
     7d4:	8f e3       	ldi	r24, 0x3F	; 63
     7d6:	92 e0       	ldi	r25, 0x02	; 2
     7d8:	9f 93       	push	r25
     7da:	8f 93       	push	r24
     7dc:	ce d5       	rcall	.+2972   	; 0x137a <printf>
	
	return ((((pos_max-pos_min)/10)*6)/time_counter);
     7de:	80 91 20 03 	lds	r24, 0x0320
     7e2:	90 91 21 03 	lds	r25, 0x0321
     7e6:	20 91 0f 03 	lds	r18, 0x030F
     7ea:	30 91 10 03 	lds	r19, 0x0310
     7ee:	82 1b       	sub	r24, r18
     7f0:	93 0b       	sbc	r25, r19
     7f2:	b8 01       	movw	r22, r16
     7f4:	5f d5       	rcall	.+2750   	; 0x12b4 <__divmodhi4>
     7f6:	cb 01       	movw	r24, r22
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	68 0f       	add	r22, r24
     7fe:	79 1f       	adc	r23, r25
     800:	cb 01       	movw	r24, r22
     802:	88 0f       	add	r24, r24
     804:	99 1f       	adc	r25, r25
     806:	be 01       	movw	r22, r28
     808:	41 d5       	rcall	.+2690   	; 0x128c <__udivmodhi4>
     80a:	86 2f       	mov	r24, r22
     80c:	2d b7       	in	r18, 0x3d	; 61
     80e:	3e b7       	in	r19, 0x3e	; 62
     810:	28 5f       	subi	r18, 0xF8	; 248
     812:	3f 4f       	sbci	r19, 0xFF	; 255
     814:	0f b6       	in	r0, 0x3f	; 63
     816:	f8 94       	cli
     818:	3e bf       	out	0x3e, r19	; 62
     81a:	0f be       	out	0x3f, r0	; 63
     81c:	2d bf       	out	0x3d, r18	; 61
}
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	1f 91       	pop	r17
     824:	0f 91       	pop	r16
     826:	ff 90       	pop	r15
     828:	ef 90       	pop	r14
     82a:	df 90       	pop	r13
     82c:	cf 90       	pop	r12
     82e:	08 95       	ret

00000830 <motor_calibrate_min_motor_speed>:





uint8_t motor_calibrate_min_motor_speed(int8_t direction){
     830:	ef 92       	push	r14
     832:	ff 92       	push	r15
     834:	0f 93       	push	r16
     836:	1f 93       	push	r17
     838:	cf 93       	push	r28
     83a:	df 93       	push	r29
     83c:	c8 2f       	mov	r28, r24
	uint16_t motor_speed = 0;
	uint8_t time_counter = 0;
	motor_set_motor_speed(0);
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	02 de       	rcall	.-1020   	; 0x446 <motor_set_motor_speed>
	motor_set_direction(direction);
     842:	8c 2f       	mov	r24, r28
     844:	14 de       	rcall	.-984    	; 0x46e <motor_set_direction>
	int16_t t_vel = motor_get_velocity();
     846:	9d de       	rcall	.-710    	; 0x582 <motor_get_velocity>
     848:	8c 01       	movw	r16, r24
	printf("s %i,\tv %i,\n",motor_speed,t_vel);
     84a:	1f 93       	push	r17
     84c:	8f 93       	push	r24
     84e:	1f 92       	push	r1
     850:	1f 92       	push	r1
     852:	2a e5       	ldi	r18, 0x5A	; 90
     854:	32 e0       	ldi	r19, 0x02	; 2
     856:	3f 93       	push	r19
     858:	2f 93       	push	r18
     85a:	8f d5       	rcall	.+2846   	; 0x137a <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     85c:	2f ef       	ldi	r18, 0xFF	; 255
     85e:	83 ed       	ldi	r24, 0xD3	; 211
     860:	90 e3       	ldi	r25, 0x30	; 48
     862:	21 50       	subi	r18, 0x01	; 1
     864:	80 40       	sbci	r24, 0x00	; 0
     866:	90 40       	sbci	r25, 0x00	; 0
     868:	e1 f7       	brne	.-8      	; 0x862 <motor_calibrate_min_motor_speed+0x32>
     86a:	00 c0       	rjmp	.+0      	; 0x86c <motor_calibrate_min_motor_speed+0x3c>
     86c:	00 00       	nop
	_delay_ms(1000);
	motor_get_velocity();
     86e:	89 de       	rcall	.-750    	; 0x582 <motor_get_velocity>
     870:	2f ef       	ldi	r18, 0xFF	; 255
     872:	83 ed       	ldi	r24, 0xD3	; 211
     874:	90 e3       	ldi	r25, 0x30	; 48
     876:	21 50       	subi	r18, 0x01	; 1
     878:	80 40       	sbci	r24, 0x00	; 0
     87a:	90 40       	sbci	r25, 0x00	; 0
     87c:	e1 f7       	brne	.-8      	; 0x876 <motor_calibrate_min_motor_speed+0x46>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <motor_calibrate_min_motor_speed+0x50>
     880:	00 00       	nop
	_delay_ms(1000);
	
	if (direction == MOTOR_POLARITY)
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	0f 90       	pop	r0
     88a:	0f 90       	pop	r0
     88c:	0f 90       	pop	r0
     88e:	c1 30       	cpi	r28, 0x01	; 1
     890:	f1 f4       	brne	.+60     	; 0x8ce <motor_calibrate_min_motor_speed+0x9e>
     892:	c0 e0       	ldi	r28, 0x00	; 0
     894:	d0 e0       	ldi	r29, 0x00	; 0
	{
		do{
			t_vel = motor_get_velocity();
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     896:	0f 2e       	mov	r0, r31
     898:	fa e5       	ldi	r31, 0x5A	; 90
     89a:	ef 2e       	mov	r14, r31
     89c:	f2 e0       	ldi	r31, 0x02	; 2
     89e:	ff 2e       	mov	r15, r31
     8a0:	f0 2d       	mov	r31, r0
	_delay_ms(1000);
	
	if (direction == MOTOR_POLARITY)
	{
		do{
			t_vel = motor_get_velocity();
     8a2:	6f de       	rcall	.-802    	; 0x582 <motor_get_velocity>
     8a4:	8c 01       	movw	r16, r24
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     8a6:	1f 93       	push	r17
     8a8:	8f 93       	push	r24
     8aa:	df 93       	push	r29
     8ac:	cf 93       	push	r28
     8ae:	ff 92       	push	r15
     8b0:	ef 92       	push	r14
     8b2:	63 d5       	rcall	.+2758   	; 0x137a <printf>
			motor_set_motor_speed(motor_speed);
     8b4:	8c 2f       	mov	r24, r28
     8b6:	c7 dd       	rcall	.-1138   	; 0x446 <motor_set_motor_speed>
			motor_speed++;
     8b8:	21 96       	adiw	r28, 0x01	; 1
		}while (t_vel < MIN_VELOCITY);
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	0f 90       	pop	r0
     8c4:	0f 90       	pop	r0
     8c6:	0a 30       	cpi	r16, 0x0A	; 10
     8c8:	11 05       	cpc	r17, r1
     8ca:	5c f3       	brlt	.-42     	; 0x8a2 <motor_calibrate_min_motor_speed+0x72>
     8cc:	23 c0       	rjmp	.+70     	; 0x914 <motor_calibrate_min_motor_speed+0xe4>
	}
	
	if (direction == -MOTOR_POLARITY){
     8ce:	cf 3f       	cpi	r28, 0xFF	; 255
     8d0:	f9 f4       	brne	.+62     	; 0x910 <motor_calibrate_min_motor_speed+0xe0>




uint8_t motor_calibrate_min_motor_speed(int8_t direction){
	uint16_t motor_speed = 0;
     8d2:	c0 e0       	ldi	r28, 0x00	; 0
     8d4:	d0 e0       	ldi	r29, 0x00	; 0
	}
	
	if (direction == -MOTOR_POLARITY){
		do{
			t_vel = motor_get_velocity();
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     8d6:	0f 2e       	mov	r0, r31
     8d8:	fa e5       	ldi	r31, 0x5A	; 90
     8da:	ef 2e       	mov	r14, r31
     8dc:	f2 e0       	ldi	r31, 0x02	; 2
     8de:	ff 2e       	mov	r15, r31
     8e0:	f0 2d       	mov	r31, r0
		}while (t_vel < MIN_VELOCITY);
	}
	
	if (direction == -MOTOR_POLARITY){
		do{
			t_vel = motor_get_velocity();
     8e2:	4f de       	rcall	.-866    	; 0x582 <motor_get_velocity>
     8e4:	8c 01       	movw	r16, r24
			printf("s %i,\tv %i,\n",motor_speed,t_vel);
     8e6:	1f 93       	push	r17
     8e8:	8f 93       	push	r24
     8ea:	df 93       	push	r29
     8ec:	cf 93       	push	r28
     8ee:	ff 92       	push	r15
     8f0:	ef 92       	push	r14
     8f2:	43 d5       	rcall	.+2694   	; 0x137a <printf>
			motor_set_motor_speed(motor_speed);
     8f4:	8c 2f       	mov	r24, r28
     8f6:	a7 dd       	rcall	.-1202   	; 0x446 <motor_set_motor_speed>
			motor_speed++;
     8f8:	21 96       	adiw	r28, 0x01	; 1
		}while (t_vel > -MIN_VELOCITY);
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	07 3f       	cpi	r16, 0xF7	; 247
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	18 07       	cpc	r17, r24
     90c:	54 f7       	brge	.-44     	; 0x8e2 <motor_calibrate_min_motor_speed+0xb2>
     90e:	02 c0       	rjmp	.+4      	; 0x914 <motor_calibrate_min_motor_speed+0xe4>




uint8_t motor_calibrate_min_motor_speed(int8_t direction){
	uint16_t motor_speed = 0;
     910:	c0 e0       	ldi	r28, 0x00	; 0
     912:	d0 e0       	ldi	r29, 0x00	; 0
     914:	9f ef       	ldi	r25, 0xFF	; 255
     916:	23 ed       	ldi	r18, 0xD3	; 211
     918:	80 e3       	ldi	r24, 0x30	; 48
     91a:	91 50       	subi	r25, 0x01	; 1
     91c:	20 40       	sbci	r18, 0x00	; 0
     91e:	80 40       	sbci	r24, 0x00	; 0
     920:	e1 f7       	brne	.-8      	; 0x91a <motor_calibrate_min_motor_speed+0xea>
     922:	00 c0       	rjmp	.+0      	; 0x924 <motor_calibrate_min_motor_speed+0xf4>
     924:	00 00       	nop
		}while (t_vel > -MIN_VELOCITY);
	}
	
	_delay_ms(1000);
		
	motor_set_motor_speed(0);
     926:	80 e0       	ldi	r24, 0x00	; 0
     928:	8e dd       	rcall	.-1252   	; 0x446 <motor_set_motor_speed>
	
	
	
	printf("FINAL\ts %i,\tv %i,\n",motor_speed,t_vel);
     92a:	1f 93       	push	r17
     92c:	0f 93       	push	r16
     92e:	df 93       	push	r29
     930:	cf 93       	push	r28
     932:	84 e5       	ldi	r24, 0x54	; 84
     934:	92 e0       	ldi	r25, 0x02	; 2
     936:	9f 93       	push	r25
     938:	8f 93       	push	r24
     93a:	1f d5       	rcall	.+2622   	; 0x137a <printf>
	return motor_speed;
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
}
     948:	8c 2f       	mov	r24, r28
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	08 95       	ret

00000958 <motor_calibrate>:
uint8_t motor_speed_min;
uint8_t motor_speed_max;

#define MIN_VELOCITY 10

float  motor_calibrate(uint8_t motor_speed){
     958:	cf 93       	push	r28
     95a:	c8 2f       	mov	r28, r24
	//Move sledge all the way to the right.
	motor_goto_end(motor_speed,-MOTOR_POLARITY);
     95c:	6f ef       	ldi	r22, 0xFF	; 255
     95e:	d0 dd       	rcall	.-1120   	; 0x500 <motor_goto_end>
	encoder_reset();
     960:	96 dd       	rcall	.-1236   	; 0x48e <encoder_reset>
	pos_max = motor_goto_end(motor_speed,MOTOR_POLARITY);
     962:	61 e0       	ldi	r22, 0x01	; 1
     964:	8c 2f       	mov	r24, r28
     966:	cc dd       	rcall	.-1128   	; 0x500 <motor_goto_end>
     968:	80 93 20 03 	sts	0x0320, r24
     96c:	90 93 21 03 	sts	0x0321, r25
	
	//end_pos1 = motor_goto_end(motor_speed,-MOTOR_POLARITY);
	printf("E_min:%i\tE_Max: %i\n",pos_min, pos_max);
     970:	9f 93       	push	r25
     972:	8f 93       	push	r24
     974:	80 91 10 03 	lds	r24, 0x0310
     978:	8f 93       	push	r24
     97a:	80 91 0f 03 	lds	r24, 0x030F
     97e:	8f 93       	push	r24
     980:	27 e6       	ldi	r18, 0x67	; 103
     982:	32 e0       	ldi	r19, 0x02	; 2
     984:	3f 93       	push	r19
     986:	2f 93       	push	r18
     988:	f8 d4       	rcall	.+2544   	; 0x137a <printf>
	
	//Move sledge back and measure motor_speed.
	
	
	motor_speed_max = motor_speed;
     98a:	c0 93 1a 03 	sts	0x031A, r28
	
	vel_max = motor_calibrate_max_velocity(motor_speed,-MOTOR_POLARITY);
     98e:	6f ef       	ldi	r22, 0xFF	; 255
     990:	8c 2f       	mov	r24, r28
     992:	03 de       	rcall	.-1018   	; 0x59a <motor_calibrate_max_velocity>
     994:	90 e0       	ldi	r25, 0x00	; 0
     996:	90 93 19 03 	sts	0x0319, r25
     99a:	80 93 18 03 	sts	0x0318, r24
	motor_speed_min = motor_calibrate_min_motor_speed(MOTOR_POLARITY);
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	47 df       	rcall	.-370    	; 0x830 <motor_calibrate_min_motor_speed>
     9a2:	80 93 1b 03 	sts	0x031B, r24
	motor_goto_end(motor_speed_min,MOTOR_POLARITY);
     9a6:	61 e0       	ldi	r22, 0x01	; 1
     9a8:	ab dd       	rcall	.-1194   	; 0x500 <motor_goto_end>
	uint8_t temp_motor_speed_min = motor_calibrate_min_motor_speed(-MOTOR_POLARITY);
     9aa:	8f ef       	ldi	r24, 0xFF	; 255
     9ac:	41 df       	rcall	.-382    	; 0x830 <motor_calibrate_min_motor_speed>
	if(temp_motor_speed_min > motor_speed_min){
     9ae:	0f 90       	pop	r0
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	90 91 1b 03 	lds	r25, 0x031B
     9be:	98 17       	cp	r25, r24
     9c0:	10 f4       	brcc	.+4      	; 0x9c6 <motor_calibrate+0x6e>
		motor_speed_min = temp_motor_speed_min;
     9c2:	80 93 1b 03 	sts	0x031B, r24
	}
	
	//float sMotor = vel_max /(motor_speed_max - motor_speed_min);
	return 1;
}
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	80 e8       	ldi	r24, 0x80	; 128
     9cc:	9f e3       	ldi	r25, 0x3F	; 63
     9ce:	cf 91       	pop	r28
     9d0:	08 95       	ret

000009d2 <motor_init>:
#include "../../common_library/uart.h"

void motor_init(void){
	
	// Make all relevant motor pins output.
	MOTOR_DDR |= (1<<OEN)|(1<<RSTN)|(1<<SEL)|(1<<EN)|(1<<DIR);
     9d2:	e1 e0       	ldi	r30, 0x01	; 1
     9d4:	f1 e0       	ldi	r31, 0x01	; 1
     9d6:	80 81       	ld	r24, Z
     9d8:	8a 67       	ori	r24, 0x7A	; 122
     9da:	80 83       	st	Z, r24
	
	// Make all encoder pins input.
	ENCODER_DDR = 0x00;
     9dc:	10 92 07 01 	sts	0x0107, r1
	
	// Enable motor.
	MOTOR_PORT |= (1<<EN);
     9e0:	e2 e0       	ldi	r30, 0x02	; 2
     9e2:	f1 e0       	ldi	r31, 0x01	; 1
     9e4:	80 81       	ld	r24, Z
     9e6:	80 61       	ori	r24, 0x10	; 16
     9e8:	80 83       	st	Z, r24
	
	encoder_reset();
     9ea:	51 dd       	rcall	.-1374   	; 0x48e <encoder_reset>
	
	motor_calibrate(150);
     9ec:	86 e9       	ldi	r24, 0x96	; 150
     9ee:	b4 cf       	rjmp	.-152    	; 0x958 <motor_calibrate>
     9f0:	08 95       	ret

000009f2 <pi_controller_init>:
float u;
uint8_t vel_ref;

float sMotor;

void pi_controller_init(float Ki_init, float Kp_init, float T_Update_init){
     9f2:	ef 92       	push	r14
     9f4:	ff 92       	push	r15
     9f6:	0f 93       	push	r16
     9f8:	1f 93       	push	r17
	errorSum = 0;
     9fa:	10 92 2a 03 	sts	0x032A, r1
     9fe:	10 92 2b 03 	sts	0x032B, r1
     a02:	10 92 2c 03 	sts	0x032C, r1
     a06:	10 92 2d 03 	sts	0x032D, r1
	vel_ref = 0;
     a0a:	10 92 2e 03 	sts	0x032E, r1
	u = 0;
     a0e:	10 92 37 03 	sts	0x0337, r1
     a12:	10 92 38 03 	sts	0x0338, r1
     a16:	10 92 39 03 	sts	0x0339, r1
     a1a:	10 92 3a 03 	sts	0x033A, r1
	Ki = Ki_init;
     a1e:	60 93 22 03 	sts	0x0322, r22
     a22:	70 93 23 03 	sts	0x0323, r23
     a26:	80 93 24 03 	sts	0x0324, r24
     a2a:	90 93 25 03 	sts	0x0325, r25
	Kp = Kp_init;
     a2e:	20 93 2f 03 	sts	0x032F, r18
     a32:	30 93 30 03 	sts	0x0330, r19
     a36:	40 93 31 03 	sts	0x0331, r20
     a3a:	50 93 32 03 	sts	0x0332, r21
	
	initialize_timer(T_Update_init);
     a3e:	c8 01       	movw	r24, r16
     a40:	b7 01       	movw	r22, r14
     a42:	1b d1       	rcall	.+566    	; 0xc7a <initialize_timer>
	motor_init();
     a44:	c6 df       	rcall	.-116    	; 0x9d2 <motor_init>
}
     a46:	1f 91       	pop	r17
     a48:	0f 91       	pop	r16
     a4a:	ff 90       	pop	r15
     a4c:	ef 90       	pop	r14
     a4e:	08 95       	ret

00000a50 <pi_controller_update_reference>:
#define CONTROLER_INPUT_MAX 100
#define CONTROLER_INPUT_MIN 10

void pi_controller_update_reference(int8_t controller_input){
     a50:	8f 92       	push	r8
     a52:	9f 92       	push	r9
     a54:	af 92       	push	r10
     a56:	bf 92       	push	r11
     a58:	cf 92       	push	r12
     a5a:	df 92       	push	r13
     a5c:	ef 92       	push	r14
     a5e:	ff 92       	push	r15
     a60:	1f 93       	push	r17
     a62:	cf 93       	push	r28
     a64:	df 93       	push	r29
     a66:	18 2f       	mov	r17, r24
	if (controller_input == 0)
     a68:	81 11       	cpse	r24, r1
     a6a:	05 c0       	rjmp	.+10     	; 0xa76 <pi_controller_update_reference+0x26>
	{
		motor_set_direction(0);
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	ff dc       	rcall	.-1538   	; 0x46e <motor_set_direction>
		vel_ref = 0;
     a70:	10 92 2e 03 	sts	0x032E, r1
     a74:	67 c0       	rjmp	.+206    	; 0xb44 <pi_controller_update_reference+0xf4>
	}else if (controller_input < 0)
     a76:	88 23       	and	r24, r24
     a78:	a4 f5       	brge	.+104    	; 0xae2 <pi_controller_update_reference+0x92>
	{
		motor_set_direction(-MOTOR_POLARITY);
     a7a:	8f ef       	ldi	r24, 0xFF	; 255
     a7c:	f8 dc       	rcall	.-1552   	; 0x46e <motor_set_direction>
		vel_ref = motor_get_speed_min()+((float)-controller_input/(CONTROLER_INPUT_MAX-CONTROLER_INPUT_MIN))* (float)motor_get_speed_range();
     a7e:	3c dd       	rcall	.-1416   	; 0x4f8 <motor_get_speed_min>
     a80:	7c 01       	movw	r14, r24
     a82:	32 dd       	rcall	.-1436   	; 0x4e8 <motor_get_speed_range>
     a84:	ec 01       	movw	r28, r24
     a86:	b7 01       	movw	r22, r14
     a88:	88 27       	eor	r24, r24
     a8a:	77 fd       	sbrc	r23, 7
     a8c:	80 95       	com	r24
     a8e:	98 2f       	mov	r25, r24
     a90:	e6 d2       	rcall	.+1484   	; 0x105e <__floatsisf>
     a92:	6b 01       	movw	r12, r22
     a94:	7c 01       	movw	r14, r24
     a96:	81 2f       	mov	r24, r17
     a98:	99 27       	eor	r25, r25
     a9a:	81 95       	neg	r24
     a9c:	0c f4       	brge	.+2      	; 0xaa0 <pi_controller_update_reference+0x50>
     a9e:	90 95       	com	r25
     aa0:	bc 01       	movw	r22, r24
     aa2:	88 27       	eor	r24, r24
     aa4:	77 fd       	sbrc	r23, 7
     aa6:	80 95       	com	r24
     aa8:	98 2f       	mov	r25, r24
     aaa:	d9 d2       	rcall	.+1458   	; 0x105e <__floatsisf>
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	44 eb       	ldi	r20, 0xB4	; 180
     ab2:	52 e4       	ldi	r21, 0x42	; 66
     ab4:	39 d2       	rcall	.+1138   	; 0xf28 <__divsf3>
     ab6:	4b 01       	movw	r8, r22
     ab8:	5c 01       	movw	r10, r24
     aba:	be 01       	movw	r22, r28
     abc:	88 27       	eor	r24, r24
     abe:	77 fd       	sbrc	r23, 7
     ac0:	80 95       	com	r24
     ac2:	98 2f       	mov	r25, r24
     ac4:	cc d2       	rcall	.+1432   	; 0x105e <__floatsisf>
     ac6:	9b 01       	movw	r18, r22
     ac8:	ac 01       	movw	r20, r24
     aca:	c5 01       	movw	r24, r10
     acc:	b4 01       	movw	r22, r8
     ace:	7b d3       	rcall	.+1782   	; 0x11c6 <__mulsf3>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 01       	movw	r22, r12
     ad8:	bf d1       	rcall	.+894    	; 0xe58 <__addsf3>
     ada:	93 d2       	rcall	.+1318   	; 0x1002 <__fixunssfsi>
     adc:	60 93 2e 03 	sts	0x032E, r22
     ae0:	31 c0       	rjmp	.+98     	; 0xb44 <pi_controller_update_reference+0xf4>
	}else if(controller_input > 0){
     ae2:	18 16       	cp	r1, r24
     ae4:	7c f5       	brge	.+94     	; 0xb44 <pi_controller_update_reference+0xf4>
		motor_set_direction(MOTOR_POLARITY);
     ae6:	81 e0       	ldi	r24, 0x01	; 1
     ae8:	c2 dc       	rcall	.-1660   	; 0x46e <motor_set_direction>
		vel_ref = motor_get_speed_min()+((float)controller_input/(CONTROLER_INPUT_MAX-CONTROLER_INPUT_MIN))* (float)motor_get_speed_range();;
     aea:	06 dd       	rcall	.-1524   	; 0x4f8 <motor_get_speed_min>
     aec:	7c 01       	movw	r14, r24
     aee:	fc dc       	rcall	.-1544   	; 0x4e8 <motor_get_speed_range>
     af0:	ec 01       	movw	r28, r24
     af2:	b7 01       	movw	r22, r14
     af4:	88 27       	eor	r24, r24
     af6:	77 fd       	sbrc	r23, 7
     af8:	80 95       	com	r24
     afa:	98 2f       	mov	r25, r24
     afc:	b0 d2       	rcall	.+1376   	; 0x105e <__floatsisf>
     afe:	6b 01       	movw	r12, r22
     b00:	7c 01       	movw	r14, r24
     b02:	61 2f       	mov	r22, r17
     b04:	77 27       	eor	r23, r23
     b06:	67 fd       	sbrc	r22, 7
     b08:	70 95       	com	r23
     b0a:	87 2f       	mov	r24, r23
     b0c:	97 2f       	mov	r25, r23
     b0e:	a7 d2       	rcall	.+1358   	; 0x105e <__floatsisf>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	44 eb       	ldi	r20, 0xB4	; 180
     b16:	52 e4       	ldi	r21, 0x42	; 66
     b18:	07 d2       	rcall	.+1038   	; 0xf28 <__divsf3>
     b1a:	4b 01       	movw	r8, r22
     b1c:	5c 01       	movw	r10, r24
     b1e:	be 01       	movw	r22, r28
     b20:	88 27       	eor	r24, r24
     b22:	77 fd       	sbrc	r23, 7
     b24:	80 95       	com	r24
     b26:	98 2f       	mov	r25, r24
     b28:	9a d2       	rcall	.+1332   	; 0x105e <__floatsisf>
     b2a:	9b 01       	movw	r18, r22
     b2c:	ac 01       	movw	r20, r24
     b2e:	c5 01       	movw	r24, r10
     b30:	b4 01       	movw	r22, r8
     b32:	49 d3       	rcall	.+1682   	; 0x11c6 <__mulsf3>
     b34:	9b 01       	movw	r18, r22
     b36:	ac 01       	movw	r20, r24
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	8d d1       	rcall	.+794    	; 0xe58 <__addsf3>
     b3e:	61 d2       	rcall	.+1218   	; 0x1002 <__fixunssfsi>
     b40:	60 93 2e 03 	sts	0x032E, r22
		//vel_ref = motor_get_speed_min()+(-(float)controller_input/(90) )* (float)motor_get_speed_range();
	}
	printf("C_I %i\t%i\n",controller_input,(int)vel_ref);
     b44:	80 91 2e 03 	lds	r24, 0x032E
     b48:	1f 92       	push	r1
     b4a:	8f 93       	push	r24
     b4c:	81 2f       	mov	r24, r17
     b4e:	99 27       	eor	r25, r25
     b50:	87 fd       	sbrc	r24, 7
     b52:	90 95       	com	r25
     b54:	9f 93       	push	r25
     b56:	1f 93       	push	r17
     b58:	8b e7       	ldi	r24, 0x7B	; 123
     b5a:	92 e0       	ldi	r25, 0x02	; 2
     b5c:	9f 93       	push	r25
     b5e:	8f 93       	push	r24
     b60:	0c d4       	rcall	.+2072   	; 0x137a <printf>
     b62:	0f 90       	pop	r0
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
}
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	ff 90       	pop	r15
     b76:	ef 90       	pop	r14
     b78:	df 90       	pop	r13
     b7a:	cf 90       	pop	r12
     b7c:	bf 90       	pop	r11
     b7e:	af 90       	pop	r10
     b80:	9f 90       	pop	r9
     b82:	8f 90       	pop	r8
     b84:	08 95       	ret

00000b86 <servo_init>:
 *  Author: pamarton
 */ 
#include "servo_driver.h"

void servo_init(void){
	pwm_init(PWM_PERIOD);
     b86:	60 e0       	ldi	r22, 0x00	; 0
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 ea       	ldi	r24, 0xA0	; 160
     b8c:	91 e4       	ldi	r25, 0x41	; 65
     b8e:	57 d0       	rcall	.+174    	; 0xc3e <pwm_init>
		//Map control-input to range pulse-width.
		double pulse_width = (PULSE_WIDTH_MIN + (PULSE_WIDTH_MAX - PULSE_WIDTH_MIN) * ((CONTROL_INPUT_MAX - (double)value)/(CONTROL_INPUT_MAX - CONTROL_INPUT_MIN)));
		
		// Keep pulse-width within tolerable range.
		if(pulse_width >= PULSE_WIDTH_MIN && pulse_width <= PULSE_WIDTH_MAX){
			pwm_set_pulse_width(pulse_width);
     b90:	60 e0       	ldi	r22, 0x00	; 0
     b92:	70 e0       	ldi	r23, 0x00	; 0
     b94:	80 ec       	ldi	r24, 0xC0	; 192
     b96:	9f e3       	ldi	r25, 0x3F	; 63
     b98:	3c c0       	rjmp	.+120    	; 0xc12 <pwm_set_pulse_width>
     b9a:	08 95       	ret

00000b9c <init_all>:
		
	}
    return 0;
}

void init_all(void){
     b9c:	ef 92       	push	r14
     b9e:	ff 92       	push	r15
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
	
	cli();
     ba4:	f8 94       	cli
	init_UART();
     ba6:	1a dc       	rcall	.-1996   	; 0x3dc <init_UART>
	
	CAN_initialize();
     ba8:	41 db       	rcall	.-2430   	; 0x22c <CAN_initialize>
	printf("CAN initialized\n");
     baa:	86 e8       	ldi	r24, 0x86	; 134
     bac:	92 e0       	ldi	r25, 0x02	; 2
     bae:	f6 d3       	rcall	.+2028   	; 0x139c <puts>
	TWI_Master_Initialise();
     bb0:	a3 d0       	rcall	.+326    	; 0xcf8 <TWI_Master_Initialise>
	printf("TWI initialized\n");
     bb2:	86 e9       	ldi	r24, 0x96	; 150
     bb4:	92 e0       	ldi	r25, 0x02	; 2
     bb6:	f2 d3       	rcall	.+2020   	; 0x139c <puts>
	//Motor is being initialized by PI-Controller.
	//motor_init();
	//motor_calibrate(100);
	//printf("Motor initialized\n");
	servo_init();
     bb8:	e6 df       	rcall	.-52     	; 0xb86 <servo_init>
	printf("Servo initialized\n");
     bba:	86 ea       	ldi	r24, 0xA6	; 166
     bbc:	92 e0       	ldi	r25, 0x02	; 2
     bbe:	ee d3       	rcall	.+2012   	; 0x139c <puts>
	IR_init();
     bc0:	1e dc       	rcall	.-1988   	; 0x3fe <IR_init>
	printf("IR initialized\n");
     bc2:	88 eb       	ldi	r24, 0xB8	; 184
     bc4:	92 e0       	ldi	r25, 0x02	; 2
     bc6:	ea d3       	rcall	.+2004   	; 0x139c <puts>
	//printf("solenoid\n");
	solenoid_init();
     bc8:	56 d0       	rcall	.+172    	; 0xc76 <solenoid_init>
	printf("Solenoid initialized\n");
     bca:	87 ec       	ldi	r24, 0xC7	; 199
     bcc:	92 e0       	ldi	r25, 0x02	; 2
     bce:	e6 d3       	rcall	.+1996   	; 0x139c <puts>
	pi_controller_init(0.1,1,T_UPDATE);
     bd0:	1a e0       	ldi	r17, 0x0A	; 10
     bd2:	e1 2e       	mov	r14, r17
     bd4:	17 ed       	ldi	r17, 0xD7	; 215
     bd6:	f1 2e       	mov	r15, r17
     bd8:	03 ea       	ldi	r16, 0xA3	; 163
     bda:	1c e3       	ldi	r17, 0x3C	; 60
     bdc:	20 e0       	ldi	r18, 0x00	; 0
     bde:	30 e0       	ldi	r19, 0x00	; 0
     be0:	40 e8       	ldi	r20, 0x80	; 128
     be2:	5f e3       	ldi	r21, 0x3F	; 63
     be4:	6d ec       	ldi	r22, 0xCD	; 205
     be6:	7c ec       	ldi	r23, 0xCC	; 204
     be8:	8c ec       	ldi	r24, 0xCC	; 204
     bea:	9d e3       	ldi	r25, 0x3D	; 61
     bec:	02 df       	rcall	.-508    	; 0x9f2 <pi_controller_init>
	printf("PI_Controller initialized.\n");
     bee:	8c ed       	ldi	r24, 0xDC	; 220
     bf0:	92 e0       	ldi	r25, 0x02	; 2
     bf2:	d4 d3       	rcall	.+1960   	; 0x139c <puts>
	//pi_controller_init(5,1,T_UPDATE);
	#if UART_ENABLE
		init_UART();
		printf("Program initialized\n");
	#endif
	sei();
     bf4:	78 94       	sei
}
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	08 95       	ret

00000c00 <main>:
#include	"pi_controller.h"
#include	"solenoid.h"

int main(void){
	
	init_all();
     c00:	cd df       	rcall	.-102    	; 0xb9c <init_all>
	
	
	
	int8_t direction = 0.1;
	while(1){
		if(CAN_data_receive()){
     c02:	59 db       	rcall	.-2382   	; 0x2b6 <CAN_data_receive>
     c04:	88 23       	and	r24, r24
     c06:	e9 f3       	breq	.-6      	; 0xc02 <main+0x2>
			pi_controller_update_reference(CAN_message_receive()->data[0]);
     c08:	df da       	rcall	.-2626   	; 0x1c8 <CAN_message_receive>
     c0a:	fc 01       	movw	r30, r24
     c0c:	83 81       	ldd	r24, Z+3	; 0x03
     c0e:	20 df       	rcall	.-448    	; 0xa50 <pi_controller_update_reference>
     c10:	f8 cf       	rjmp	.-16     	; 0xc02 <main+0x2>

00000c12 <pwm_set_pulse_width>:
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
}

void pwm_set_pulse_width(double val){	//vel is given in nano-seconds
	PWM_OCRnA = (int)(SCALAR_IN_MS * val);
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	4a e7       	ldi	r20, 0x7A	; 122
     c18:	51 e4       	ldi	r21, 0x41	; 65
     c1a:	d5 d2       	rcall	.+1450   	; 0x11c6 <__mulsf3>
     c1c:	ed d1       	rcall	.+986    	; 0xff8 <__fixsfsi>
     c1e:	70 93 99 00 	sts	0x0099, r23
     c22:	60 93 98 00 	sts	0x0098, r22
     c26:	08 95       	ret

00000c28 <pwm_set_period>:
}

void pwm_set_period(double period){
	PWM_ICRn = (int)(SCALAR_IN_MS * period);
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	4a e7       	ldi	r20, 0x7A	; 122
     c2e:	51 e4       	ldi	r21, 0x41	; 65
     c30:	ca d2       	rcall	.+1428   	; 0x11c6 <__mulsf3>
     c32:	e2 d1       	rcall	.+964    	; 0xff8 <__fixsfsi>
     c34:	70 93 97 00 	sts	0x0097, r23
     c38:	60 93 96 00 	sts	0x0096, r22
     c3c:	08 95       	ret

00000c3e <pwm_init>:
#include "../../common_library/uart.h"
uint8_t FLAG_refresh_screen;

void pwm_init(double period){	//	Function for initilization of the timers. Period is given in ms
	//Enable output at port E3
	PWM_DDR |= (1 << PWM_PIN);
     c3e:	6b 9a       	sbi	0x0d, 3	; 13
	
	// Use Fast-pwm/mode 14. Compare Table 17.2 on page 145 of the Arduino2560 datasheet. Using  OC3A.
	PWM_TCCRnA &= ~(1<<WGM30);
     c40:	e0 e9       	ldi	r30, 0x90	; 144
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	20 81       	ld	r18, Z
     c46:	2e 7f       	andi	r18, 0xFE	; 254
     c48:	20 83       	st	Z, r18
	PWM_TCCRnA |= (1<<WGM31);
     c4a:	20 81       	ld	r18, Z
     c4c:	22 60       	ori	r18, 0x02	; 2
     c4e:	20 83       	st	Z, r18
	PWM_TCCRnB |= (1<<WGM33)|(1<<WGM32); //		WGM01: set mode to CTC (reset timer on OCR0)     CS0n:set prescaler (to 1024)
     c50:	a1 e9       	ldi	r26, 0x91	; 145
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	2c 91       	ld	r18, X
     c56:	28 61       	ori	r18, 0x18	; 24
     c58:	2c 93       	st	X, r18
	
	//Set COM3A_1:0 to 10 to use non-inverted pwm.
	PWM_TCCRnA |= (1<<COM3A1);
     c5a:	20 81       	ld	r18, Z
     c5c:	20 68       	ori	r18, 0x80	; 128
     c5e:	20 83       	st	Z, r18
	PWM_TCCRnA &= ~(1<<COM3A0);
     c60:	20 81       	ld	r18, Z
     c62:	2f 7b       	andi	r18, 0xBF	; 191
     c64:	20 83       	st	Z, r18

	// Set prescaler. Compare Table17-6. Clock Select Bit Description.
	PWM_TCCRnB |= (1<<CS32) | (1<<CS30);
     c66:	2c 91       	ld	r18, X
     c68:	25 60       	ori	r18, 0x05	; 5
     c6a:	2c 93       	st	X, r18
	PWM_TCCRnB &= ~(1<<CS31);
     c6c:	2c 91       	ld	r18, X
     c6e:	2d 7f       	andi	r18, 0xFD	; 253
     c70:	2c 93       	st	X, r18
	
	// Define TOP. Compare Table 17.2.
	pwm_set_period(period);
     c72:	da cf       	rjmp	.-76     	; 0xc28 <pwm_set_period>
     c74:	08 95       	ret

00000c76 <solenoid_init>:

#include "solenoid.h"


void solenoid_init(void){
	SOLENOID_DDR |= (1 << SOLENOID_PIN);
     c76:	27 9a       	sbi	0x04, 7	; 4
     c78:	08 95       	ret

00000c7a <initialize_timer>:
uint8_t update_flag;

void initialize_timer(float T_Update){
	
	//Enable interrupt. When timer is the same as OCR4A it sends an interrupt.
	TIMSK4 |= (1<<OCIE4A);
     c7a:	e2 e7       	ldi	r30, 0x72	; 114
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	20 81       	ld	r18, Z
     c80:	22 60       	ori	r18, 0x02	; 2
     c82:	20 83       	st	Z, r18
	
	// Reset timer.
	TCNT4 = 0x0000;
     c84:	10 92 a5 00 	sts	0x00A5, r1
     c88:	10 92 a4 00 	sts	0x00A4, r1
	
	// Use CTC mode.
	TCCR4B |= (1<<WGM42);
     c8c:	e1 ea       	ldi	r30, 0xA1	; 161
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	20 81       	ld	r18, Z
     c92:	28 60       	ori	r18, 0x08	; 8
     c94:	20 83       	st	Z, r18
	TCCR4B &= ~(1<<WGM43);
     c96:	20 81       	ld	r18, Z
     c98:	2f 7e       	andi	r18, 0xEF	; 239
     c9a:	20 83       	st	Z, r18
	#elif TIMER_PRESCALER == 64
	TCCR4B |= (1<<CS41)|(1<<CS40);
	#elif TIMER_PRESCALER == 256
	TCCR4B |= (1<<CS42);
	#elif TIMER_PRESCALER == 1024
	TCCR4B |= (1<<CS42)|(1<<CS40);
     c9c:	20 81       	ld	r18, Z
     c9e:	25 60       	ori	r18, 0x05	; 5
     ca0:	20 83       	st	Z, r18
	#endif
	
	
	
	// Set counter limit.
	OCR4A = (F_CPU/(TIMER_PRESCALER))*T_Update - 1;
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	34 e2       	ldi	r19, 0x24	; 36
     ca6:	44 e7       	ldi	r20, 0x74	; 116
     ca8:	56 e4       	ldi	r21, 0x46	; 70
     caa:	8d d2       	rcall	.+1306   	; 0x11c6 <__mulsf3>
     cac:	20 e0       	ldi	r18, 0x00	; 0
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	40 e8       	ldi	r20, 0x80	; 128
     cb2:	5f e3       	ldi	r21, 0x3F	; 63
     cb4:	d0 d0       	rcall	.+416    	; 0xe56 <__subsf3>
     cb6:	a5 d1       	rcall	.+842    	; 0x1002 <__fixunssfsi>
     cb8:	70 93 a9 00 	sts	0x00A9, r23
     cbc:	60 93 a8 00 	sts	0x00A8, r22
	update_flag = 0;
     cc0:	10 92 3b 03 	sts	0x033B, r1
     cc4:	08 95       	ret

00000cc6 <__vector_42>:
}

ISR(TIMER4_COMPA_vect){//interrupt when Timer_0 is done, resets itself
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	8f 93       	push	r24
	update_flag = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 3b 03 	sts	0x033B, r24
	//printf("INT");
	//TIFR4 &= ~(1<<OCF1A);
}
     cd8:	8f 91       	pop	r24
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	0f 90       	pop	r0
     ce0:	1f 90       	pop	r1
     ce2:	18 95       	reti

00000ce4 <timer_check_flag>:

uint8_t timer_check_flag(void){
	if (update_flag)
     ce4:	80 91 3b 03 	lds	r24, 0x033B
     ce8:	88 23       	and	r24, r24
     cea:	21 f0       	breq	.+8      	; 0xcf4 <timer_check_flag+0x10>
	{
		update_flag = 0;
     cec:	10 92 3b 03 	sts	0x033B, r1
		return 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	08 95       	ret
	}
	return 0;
     cf4:	80 e0       	ldi	r24, 0x00	; 0
}
     cf6:	08 95       	ret

00000cf8 <TWI_Master_Initialise>:
     cf8:	8c e0       	ldi	r24, 0x0C	; 12
     cfa:	80 93 b8 00 	sts	0x00B8, r24
     cfe:	8f ef       	ldi	r24, 0xFF	; 255
     d00:	80 93 bb 00 	sts	0x00BB, r24
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	80 93 bc 00 	sts	0x00BC, r24
     d0a:	08 95       	ret

00000d0c <TWI_Start_Transceiver_With_Data>:
     d0c:	ec eb       	ldi	r30, 0xBC	; 188
     d0e:	f0 e0       	ldi	r31, 0x00	; 0
     d10:	20 81       	ld	r18, Z
     d12:	20 fd       	sbrc	r18, 0
     d14:	fd cf       	rjmp	.-6      	; 0xd10 <TWI_Start_Transceiver_With_Data+0x4>
     d16:	60 93 13 03 	sts	0x0313, r22
     d1a:	fc 01       	movw	r30, r24
     d1c:	20 81       	ld	r18, Z
     d1e:	20 93 14 03 	sts	0x0314, r18
     d22:	20 fd       	sbrc	r18, 0
     d24:	0c c0       	rjmp	.+24     	; 0xd3e <TWI_Start_Transceiver_With_Data+0x32>
     d26:	62 30       	cpi	r22, 0x02	; 2
     d28:	50 f0       	brcs	.+20     	; 0xd3e <TWI_Start_Transceiver_With_Data+0x32>
     d2a:	dc 01       	movw	r26, r24
     d2c:	11 96       	adiw	r26, 0x01	; 1
     d2e:	e5 e1       	ldi	r30, 0x15	; 21
     d30:	f3 e0       	ldi	r31, 0x03	; 3
     d32:	81 e0       	ldi	r24, 0x01	; 1
     d34:	9d 91       	ld	r25, X+
     d36:	91 93       	st	Z+, r25
     d38:	8f 5f       	subi	r24, 0xFF	; 255
     d3a:	86 13       	cpse	r24, r22
     d3c:	fb cf       	rjmp	.-10     	; 0xd34 <TWI_Start_Transceiver_With_Data+0x28>
     d3e:	10 92 12 03 	sts	0x0312, r1
     d42:	88 ef       	ldi	r24, 0xF8	; 248
     d44:	80 93 06 02 	sts	0x0206, r24
     d48:	85 ea       	ldi	r24, 0xA5	; 165
     d4a:	80 93 bc 00 	sts	0x00BC, r24
     d4e:	08 95       	ret

00000d50 <__vector_39>:
     d50:	1f 92       	push	r1
     d52:	0f 92       	push	r0
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	0f 92       	push	r0
     d58:	11 24       	eor	r1, r1
     d5a:	0b b6       	in	r0, 0x3b	; 59
     d5c:	0f 92       	push	r0
     d5e:	2f 93       	push	r18
     d60:	3f 93       	push	r19
     d62:	8f 93       	push	r24
     d64:	9f 93       	push	r25
     d66:	af 93       	push	r26
     d68:	bf 93       	push	r27
     d6a:	ef 93       	push	r30
     d6c:	ff 93       	push	r31
     d6e:	80 91 b9 00 	lds	r24, 0x00B9
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	fc 01       	movw	r30, r24
     d76:	38 97       	sbiw	r30, 0x08	; 8
     d78:	e1 35       	cpi	r30, 0x51	; 81
     d7a:	f1 05       	cpc	r31, r1
     d7c:	08 f0       	brcs	.+2      	; 0xd80 <__vector_39+0x30>
     d7e:	55 c0       	rjmp	.+170    	; 0xe2a <__vector_39+0xda>
     d80:	ee 58       	subi	r30, 0x8E	; 142
     d82:	ff 4f       	sbci	r31, 0xFF	; 255
     d84:	aa c2       	rjmp	.+1364   	; 0x12da <__tablejump2__>
     d86:	10 92 11 03 	sts	0x0311, r1
     d8a:	e0 91 11 03 	lds	r30, 0x0311
     d8e:	80 91 13 03 	lds	r24, 0x0313
     d92:	e8 17       	cp	r30, r24
     d94:	70 f4       	brcc	.+28     	; 0xdb2 <__vector_39+0x62>
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	8e 0f       	add	r24, r30
     d9a:	80 93 11 03 	sts	0x0311, r24
     d9e:	f0 e0       	ldi	r31, 0x00	; 0
     da0:	ec 5e       	subi	r30, 0xEC	; 236
     da2:	fc 4f       	sbci	r31, 0xFC	; 252
     da4:	80 81       	ld	r24, Z
     da6:	80 93 bb 00 	sts	0x00BB, r24
     daa:	85 e8       	ldi	r24, 0x85	; 133
     dac:	80 93 bc 00 	sts	0x00BC, r24
     db0:	43 c0       	rjmp	.+134    	; 0xe38 <__vector_39+0xe8>
     db2:	80 91 12 03 	lds	r24, 0x0312
     db6:	81 60       	ori	r24, 0x01	; 1
     db8:	80 93 12 03 	sts	0x0312, r24
     dbc:	84 e9       	ldi	r24, 0x94	; 148
     dbe:	80 93 bc 00 	sts	0x00BC, r24
     dc2:	3a c0       	rjmp	.+116    	; 0xe38 <__vector_39+0xe8>
     dc4:	e0 91 11 03 	lds	r30, 0x0311
     dc8:	81 e0       	ldi	r24, 0x01	; 1
     dca:	8e 0f       	add	r24, r30
     dcc:	80 93 11 03 	sts	0x0311, r24
     dd0:	80 91 bb 00 	lds	r24, 0x00BB
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	ec 5e       	subi	r30, 0xEC	; 236
     dd8:	fc 4f       	sbci	r31, 0xFC	; 252
     dda:	80 83       	st	Z, r24
     ddc:	20 91 11 03 	lds	r18, 0x0311
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	80 91 13 03 	lds	r24, 0x0313
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	01 97       	sbiw	r24, 0x01	; 1
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	24 f4       	brge	.+8      	; 0xdf8 <__vector_39+0xa8>
     df0:	85 ec       	ldi	r24, 0xC5	; 197
     df2:	80 93 bc 00 	sts	0x00BC, r24
     df6:	20 c0       	rjmp	.+64     	; 0xe38 <__vector_39+0xe8>
     df8:	85 e8       	ldi	r24, 0x85	; 133
     dfa:	80 93 bc 00 	sts	0x00BC, r24
     dfe:	1c c0       	rjmp	.+56     	; 0xe38 <__vector_39+0xe8>
     e00:	80 91 bb 00 	lds	r24, 0x00BB
     e04:	e0 91 11 03 	lds	r30, 0x0311
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	ec 5e       	subi	r30, 0xEC	; 236
     e0c:	fc 4f       	sbci	r31, 0xFC	; 252
     e0e:	80 83       	st	Z, r24
     e10:	80 91 12 03 	lds	r24, 0x0312
     e14:	81 60       	ori	r24, 0x01	; 1
     e16:	80 93 12 03 	sts	0x0312, r24
     e1a:	84 e9       	ldi	r24, 0x94	; 148
     e1c:	80 93 bc 00 	sts	0x00BC, r24
     e20:	0b c0       	rjmp	.+22     	; 0xe38 <__vector_39+0xe8>
     e22:	85 ea       	ldi	r24, 0xA5	; 165
     e24:	80 93 bc 00 	sts	0x00BC, r24
     e28:	07 c0       	rjmp	.+14     	; 0xe38 <__vector_39+0xe8>
     e2a:	80 91 b9 00 	lds	r24, 0x00B9
     e2e:	80 93 06 02 	sts	0x0206, r24
     e32:	84 e0       	ldi	r24, 0x04	; 4
     e34:	80 93 bc 00 	sts	0x00BC, r24
     e38:	ff 91       	pop	r31
     e3a:	ef 91       	pop	r30
     e3c:	bf 91       	pop	r27
     e3e:	af 91       	pop	r26
     e40:	9f 91       	pop	r25
     e42:	8f 91       	pop	r24
     e44:	3f 91       	pop	r19
     e46:	2f 91       	pop	r18
     e48:	0f 90       	pop	r0
     e4a:	0b be       	out	0x3b, r0	; 59
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__subsf3>:
     e56:	50 58       	subi	r21, 0x80	; 128

00000e58 <__addsf3>:
     e58:	bb 27       	eor	r27, r27
     e5a:	aa 27       	eor	r26, r26
     e5c:	0e d0       	rcall	.+28     	; 0xe7a <__addsf3x>
     e5e:	75 c1       	rjmp	.+746    	; 0x114a <__fp_round>
     e60:	66 d1       	rcall	.+716    	; 0x112e <__fp_pscA>
     e62:	30 f0       	brcs	.+12     	; 0xe70 <__addsf3+0x18>
     e64:	6b d1       	rcall	.+726    	; 0x113c <__fp_pscB>
     e66:	20 f0       	brcs	.+8      	; 0xe70 <__addsf3+0x18>
     e68:	31 f4       	brne	.+12     	; 0xe76 <__addsf3+0x1e>
     e6a:	9f 3f       	cpi	r25, 0xFF	; 255
     e6c:	11 f4       	brne	.+4      	; 0xe72 <__addsf3+0x1a>
     e6e:	1e f4       	brtc	.+6      	; 0xe76 <__addsf3+0x1e>
     e70:	5b c1       	rjmp	.+694    	; 0x1128 <__fp_nan>
     e72:	0e f4       	brtc	.+2      	; 0xe76 <__addsf3+0x1e>
     e74:	e0 95       	com	r30
     e76:	e7 fb       	bst	r30, 7
     e78:	51 c1       	rjmp	.+674    	; 0x111c <__fp_inf>

00000e7a <__addsf3x>:
     e7a:	e9 2f       	mov	r30, r25
     e7c:	77 d1       	rcall	.+750    	; 0x116c <__fp_split3>
     e7e:	80 f3       	brcs	.-32     	; 0xe60 <__addsf3+0x8>
     e80:	ba 17       	cp	r27, r26
     e82:	62 07       	cpc	r22, r18
     e84:	73 07       	cpc	r23, r19
     e86:	84 07       	cpc	r24, r20
     e88:	95 07       	cpc	r25, r21
     e8a:	18 f0       	brcs	.+6      	; 0xe92 <__addsf3x+0x18>
     e8c:	71 f4       	brne	.+28     	; 0xeaa <__addsf3x+0x30>
     e8e:	9e f5       	brtc	.+102    	; 0xef6 <__addsf3x+0x7c>
     e90:	8f c1       	rjmp	.+798    	; 0x11b0 <__fp_zero>
     e92:	0e f4       	brtc	.+2      	; 0xe96 <__addsf3x+0x1c>
     e94:	e0 95       	com	r30
     e96:	0b 2e       	mov	r0, r27
     e98:	ba 2f       	mov	r27, r26
     e9a:	a0 2d       	mov	r26, r0
     e9c:	0b 01       	movw	r0, r22
     e9e:	b9 01       	movw	r22, r18
     ea0:	90 01       	movw	r18, r0
     ea2:	0c 01       	movw	r0, r24
     ea4:	ca 01       	movw	r24, r20
     ea6:	a0 01       	movw	r20, r0
     ea8:	11 24       	eor	r1, r1
     eaa:	ff 27       	eor	r31, r31
     eac:	59 1b       	sub	r21, r25
     eae:	99 f0       	breq	.+38     	; 0xed6 <__addsf3x+0x5c>
     eb0:	59 3f       	cpi	r21, 0xF9	; 249
     eb2:	50 f4       	brcc	.+20     	; 0xec8 <__addsf3x+0x4e>
     eb4:	50 3e       	cpi	r21, 0xE0	; 224
     eb6:	68 f1       	brcs	.+90     	; 0xf12 <__addsf3x+0x98>
     eb8:	1a 16       	cp	r1, r26
     eba:	f0 40       	sbci	r31, 0x00	; 0
     ebc:	a2 2f       	mov	r26, r18
     ebe:	23 2f       	mov	r18, r19
     ec0:	34 2f       	mov	r19, r20
     ec2:	44 27       	eor	r20, r20
     ec4:	58 5f       	subi	r21, 0xF8	; 248
     ec6:	f3 cf       	rjmp	.-26     	; 0xeae <__addsf3x+0x34>
     ec8:	46 95       	lsr	r20
     eca:	37 95       	ror	r19
     ecc:	27 95       	ror	r18
     ece:	a7 95       	ror	r26
     ed0:	f0 40       	sbci	r31, 0x00	; 0
     ed2:	53 95       	inc	r21
     ed4:	c9 f7       	brne	.-14     	; 0xec8 <__addsf3x+0x4e>
     ed6:	7e f4       	brtc	.+30     	; 0xef6 <__addsf3x+0x7c>
     ed8:	1f 16       	cp	r1, r31
     eda:	ba 0b       	sbc	r27, r26
     edc:	62 0b       	sbc	r22, r18
     ede:	73 0b       	sbc	r23, r19
     ee0:	84 0b       	sbc	r24, r20
     ee2:	ba f0       	brmi	.+46     	; 0xf12 <__addsf3x+0x98>
     ee4:	91 50       	subi	r25, 0x01	; 1
     ee6:	a1 f0       	breq	.+40     	; 0xf10 <__addsf3x+0x96>
     ee8:	ff 0f       	add	r31, r31
     eea:	bb 1f       	adc	r27, r27
     eec:	66 1f       	adc	r22, r22
     eee:	77 1f       	adc	r23, r23
     ef0:	88 1f       	adc	r24, r24
     ef2:	c2 f7       	brpl	.-16     	; 0xee4 <__addsf3x+0x6a>
     ef4:	0e c0       	rjmp	.+28     	; 0xf12 <__addsf3x+0x98>
     ef6:	ba 0f       	add	r27, r26
     ef8:	62 1f       	adc	r22, r18
     efa:	73 1f       	adc	r23, r19
     efc:	84 1f       	adc	r24, r20
     efe:	48 f4       	brcc	.+18     	; 0xf12 <__addsf3x+0x98>
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f7 95       	ror	r31
     f0a:	9e 3f       	cpi	r25, 0xFE	; 254
     f0c:	08 f0       	brcs	.+2      	; 0xf10 <__addsf3x+0x96>
     f0e:	b3 cf       	rjmp	.-154    	; 0xe76 <__addsf3+0x1e>
     f10:	93 95       	inc	r25
     f12:	88 0f       	add	r24, r24
     f14:	08 f0       	brcs	.+2      	; 0xf18 <__addsf3x+0x9e>
     f16:	99 27       	eor	r25, r25
     f18:	ee 0f       	add	r30, r30
     f1a:	97 95       	ror	r25
     f1c:	87 95       	ror	r24
     f1e:	08 95       	ret

00000f20 <__cmpsf2>:
     f20:	d9 d0       	rcall	.+434    	; 0x10d4 <__fp_cmp>
     f22:	08 f4       	brcc	.+2      	; 0xf26 <__cmpsf2+0x6>
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	08 95       	ret

00000f28 <__divsf3>:
     f28:	0c d0       	rcall	.+24     	; 0xf42 <__divsf3x>
     f2a:	0f c1       	rjmp	.+542    	; 0x114a <__fp_round>
     f2c:	07 d1       	rcall	.+526    	; 0x113c <__fp_pscB>
     f2e:	40 f0       	brcs	.+16     	; 0xf40 <__divsf3+0x18>
     f30:	fe d0       	rcall	.+508    	; 0x112e <__fp_pscA>
     f32:	30 f0       	brcs	.+12     	; 0xf40 <__divsf3+0x18>
     f34:	21 f4       	brne	.+8      	; 0xf3e <__divsf3+0x16>
     f36:	5f 3f       	cpi	r21, 0xFF	; 255
     f38:	19 f0       	breq	.+6      	; 0xf40 <__divsf3+0x18>
     f3a:	f0 c0       	rjmp	.+480    	; 0x111c <__fp_inf>
     f3c:	51 11       	cpse	r21, r1
     f3e:	39 c1       	rjmp	.+626    	; 0x11b2 <__fp_szero>
     f40:	f3 c0       	rjmp	.+486    	; 0x1128 <__fp_nan>

00000f42 <__divsf3x>:
     f42:	14 d1       	rcall	.+552    	; 0x116c <__fp_split3>
     f44:	98 f3       	brcs	.-26     	; 0xf2c <__divsf3+0x4>

00000f46 <__divsf3_pse>:
     f46:	99 23       	and	r25, r25
     f48:	c9 f3       	breq	.-14     	; 0xf3c <__divsf3+0x14>
     f4a:	55 23       	and	r21, r21
     f4c:	b1 f3       	breq	.-20     	; 0xf3a <__divsf3+0x12>
     f4e:	95 1b       	sub	r25, r21
     f50:	55 0b       	sbc	r21, r21
     f52:	bb 27       	eor	r27, r27
     f54:	aa 27       	eor	r26, r26
     f56:	62 17       	cp	r22, r18
     f58:	73 07       	cpc	r23, r19
     f5a:	84 07       	cpc	r24, r20
     f5c:	38 f0       	brcs	.+14     	; 0xf6c <__divsf3_pse+0x26>
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	5f 4f       	sbci	r21, 0xFF	; 255
     f62:	22 0f       	add	r18, r18
     f64:	33 1f       	adc	r19, r19
     f66:	44 1f       	adc	r20, r20
     f68:	aa 1f       	adc	r26, r26
     f6a:	a9 f3       	breq	.-22     	; 0xf56 <__divsf3_pse+0x10>
     f6c:	33 d0       	rcall	.+102    	; 0xfd4 <__divsf3_pse+0x8e>
     f6e:	0e 2e       	mov	r0, r30
     f70:	3a f0       	brmi	.+14     	; 0xf80 <__divsf3_pse+0x3a>
     f72:	e0 e8       	ldi	r30, 0x80	; 128
     f74:	30 d0       	rcall	.+96     	; 0xfd6 <__divsf3_pse+0x90>
     f76:	91 50       	subi	r25, 0x01	; 1
     f78:	50 40       	sbci	r21, 0x00	; 0
     f7a:	e6 95       	lsr	r30
     f7c:	00 1c       	adc	r0, r0
     f7e:	ca f7       	brpl	.-14     	; 0xf72 <__divsf3_pse+0x2c>
     f80:	29 d0       	rcall	.+82     	; 0xfd4 <__divsf3_pse+0x8e>
     f82:	fe 2f       	mov	r31, r30
     f84:	27 d0       	rcall	.+78     	; 0xfd4 <__divsf3_pse+0x8e>
     f86:	66 0f       	add	r22, r22
     f88:	77 1f       	adc	r23, r23
     f8a:	88 1f       	adc	r24, r24
     f8c:	bb 1f       	adc	r27, r27
     f8e:	26 17       	cp	r18, r22
     f90:	37 07       	cpc	r19, r23
     f92:	48 07       	cpc	r20, r24
     f94:	ab 07       	cpc	r26, r27
     f96:	b0 e8       	ldi	r27, 0x80	; 128
     f98:	09 f0       	breq	.+2      	; 0xf9c <__divsf3_pse+0x56>
     f9a:	bb 0b       	sbc	r27, r27
     f9c:	80 2d       	mov	r24, r0
     f9e:	bf 01       	movw	r22, r30
     fa0:	ff 27       	eor	r31, r31
     fa2:	93 58       	subi	r25, 0x83	; 131
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	2a f0       	brmi	.+10     	; 0xfb2 <__divsf3_pse+0x6c>
     fa8:	9e 3f       	cpi	r25, 0xFE	; 254
     faa:	51 05       	cpc	r21, r1
     fac:	68 f0       	brcs	.+26     	; 0xfc8 <__divsf3_pse+0x82>
     fae:	b6 c0       	rjmp	.+364    	; 0x111c <__fp_inf>
     fb0:	00 c1       	rjmp	.+512    	; 0x11b2 <__fp_szero>
     fb2:	5f 3f       	cpi	r21, 0xFF	; 255
     fb4:	ec f3       	brlt	.-6      	; 0xfb0 <__divsf3_pse+0x6a>
     fb6:	98 3e       	cpi	r25, 0xE8	; 232
     fb8:	dc f3       	brlt	.-10     	; 0xfb0 <__divsf3_pse+0x6a>
     fba:	86 95       	lsr	r24
     fbc:	77 95       	ror	r23
     fbe:	67 95       	ror	r22
     fc0:	b7 95       	ror	r27
     fc2:	f7 95       	ror	r31
     fc4:	9f 5f       	subi	r25, 0xFF	; 255
     fc6:	c9 f7       	brne	.-14     	; 0xfba <__divsf3_pse+0x74>
     fc8:	88 0f       	add	r24, r24
     fca:	91 1d       	adc	r25, r1
     fcc:	96 95       	lsr	r25
     fce:	87 95       	ror	r24
     fd0:	97 f9       	bld	r25, 7
     fd2:	08 95       	ret
     fd4:	e1 e0       	ldi	r30, 0x01	; 1
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	bb 1f       	adc	r27, r27
     fde:	62 17       	cp	r22, r18
     fe0:	73 07       	cpc	r23, r19
     fe2:	84 07       	cpc	r24, r20
     fe4:	ba 07       	cpc	r27, r26
     fe6:	20 f0       	brcs	.+8      	; 0xff0 <__divsf3_pse+0xaa>
     fe8:	62 1b       	sub	r22, r18
     fea:	73 0b       	sbc	r23, r19
     fec:	84 0b       	sbc	r24, r20
     fee:	ba 0b       	sbc	r27, r26
     ff0:	ee 1f       	adc	r30, r30
     ff2:	88 f7       	brcc	.-30     	; 0xfd6 <__divsf3_pse+0x90>
     ff4:	e0 95       	com	r30
     ff6:	08 95       	ret

00000ff8 <__fixsfsi>:
     ff8:	04 d0       	rcall	.+8      	; 0x1002 <__fixunssfsi>
     ffa:	68 94       	set
     ffc:	b1 11       	cpse	r27, r1
     ffe:	d9 c0       	rjmp	.+434    	; 0x11b2 <__fp_szero>
    1000:	08 95       	ret

00001002 <__fixunssfsi>:
    1002:	bc d0       	rcall	.+376    	; 0x117c <__fp_splitA>
    1004:	88 f0       	brcs	.+34     	; 0x1028 <__fixunssfsi+0x26>
    1006:	9f 57       	subi	r25, 0x7F	; 127
    1008:	90 f0       	brcs	.+36     	; 0x102e <__fixunssfsi+0x2c>
    100a:	b9 2f       	mov	r27, r25
    100c:	99 27       	eor	r25, r25
    100e:	b7 51       	subi	r27, 0x17	; 23
    1010:	a0 f0       	brcs	.+40     	; 0x103a <__fixunssfsi+0x38>
    1012:	d1 f0       	breq	.+52     	; 0x1048 <__fixunssfsi+0x46>
    1014:	66 0f       	add	r22, r22
    1016:	77 1f       	adc	r23, r23
    1018:	88 1f       	adc	r24, r24
    101a:	99 1f       	adc	r25, r25
    101c:	1a f0       	brmi	.+6      	; 0x1024 <__fixunssfsi+0x22>
    101e:	ba 95       	dec	r27
    1020:	c9 f7       	brne	.-14     	; 0x1014 <__fixunssfsi+0x12>
    1022:	12 c0       	rjmp	.+36     	; 0x1048 <__fixunssfsi+0x46>
    1024:	b1 30       	cpi	r27, 0x01	; 1
    1026:	81 f0       	breq	.+32     	; 0x1048 <__fixunssfsi+0x46>
    1028:	c3 d0       	rcall	.+390    	; 0x11b0 <__fp_zero>
    102a:	b1 e0       	ldi	r27, 0x01	; 1
    102c:	08 95       	ret
    102e:	c0 c0       	rjmp	.+384    	; 0x11b0 <__fp_zero>
    1030:	67 2f       	mov	r22, r23
    1032:	78 2f       	mov	r23, r24
    1034:	88 27       	eor	r24, r24
    1036:	b8 5f       	subi	r27, 0xF8	; 248
    1038:	39 f0       	breq	.+14     	; 0x1048 <__fixunssfsi+0x46>
    103a:	b9 3f       	cpi	r27, 0xF9	; 249
    103c:	cc f3       	brlt	.-14     	; 0x1030 <__fixunssfsi+0x2e>
    103e:	86 95       	lsr	r24
    1040:	77 95       	ror	r23
    1042:	67 95       	ror	r22
    1044:	b3 95       	inc	r27
    1046:	d9 f7       	brne	.-10     	; 0x103e <__fixunssfsi+0x3c>
    1048:	3e f4       	brtc	.+14     	; 0x1058 <__fixunssfsi+0x56>
    104a:	90 95       	com	r25
    104c:	80 95       	com	r24
    104e:	70 95       	com	r23
    1050:	61 95       	neg	r22
    1052:	7f 4f       	sbci	r23, 0xFF	; 255
    1054:	8f 4f       	sbci	r24, 0xFF	; 255
    1056:	9f 4f       	sbci	r25, 0xFF	; 255
    1058:	08 95       	ret

0000105a <__floatunsisf>:
    105a:	e8 94       	clt
    105c:	09 c0       	rjmp	.+18     	; 0x1070 <__floatsisf+0x12>

0000105e <__floatsisf>:
    105e:	97 fb       	bst	r25, 7
    1060:	3e f4       	brtc	.+14     	; 0x1070 <__floatsisf+0x12>
    1062:	90 95       	com	r25
    1064:	80 95       	com	r24
    1066:	70 95       	com	r23
    1068:	61 95       	neg	r22
    106a:	7f 4f       	sbci	r23, 0xFF	; 255
    106c:	8f 4f       	sbci	r24, 0xFF	; 255
    106e:	9f 4f       	sbci	r25, 0xFF	; 255
    1070:	99 23       	and	r25, r25
    1072:	a9 f0       	breq	.+42     	; 0x109e <__floatsisf+0x40>
    1074:	f9 2f       	mov	r31, r25
    1076:	96 e9       	ldi	r25, 0x96	; 150
    1078:	bb 27       	eor	r27, r27
    107a:	93 95       	inc	r25
    107c:	f6 95       	lsr	r31
    107e:	87 95       	ror	r24
    1080:	77 95       	ror	r23
    1082:	67 95       	ror	r22
    1084:	b7 95       	ror	r27
    1086:	f1 11       	cpse	r31, r1
    1088:	f8 cf       	rjmp	.-16     	; 0x107a <__floatsisf+0x1c>
    108a:	fa f4       	brpl	.+62     	; 0x10ca <__floatsisf+0x6c>
    108c:	bb 0f       	add	r27, r27
    108e:	11 f4       	brne	.+4      	; 0x1094 <__floatsisf+0x36>
    1090:	60 ff       	sbrs	r22, 0
    1092:	1b c0       	rjmp	.+54     	; 0x10ca <__floatsisf+0x6c>
    1094:	6f 5f       	subi	r22, 0xFF	; 255
    1096:	7f 4f       	sbci	r23, 0xFF	; 255
    1098:	8f 4f       	sbci	r24, 0xFF	; 255
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	16 c0       	rjmp	.+44     	; 0x10ca <__floatsisf+0x6c>
    109e:	88 23       	and	r24, r24
    10a0:	11 f0       	breq	.+4      	; 0x10a6 <__floatsisf+0x48>
    10a2:	96 e9       	ldi	r25, 0x96	; 150
    10a4:	11 c0       	rjmp	.+34     	; 0x10c8 <__floatsisf+0x6a>
    10a6:	77 23       	and	r23, r23
    10a8:	21 f0       	breq	.+8      	; 0x10b2 <__floatsisf+0x54>
    10aa:	9e e8       	ldi	r25, 0x8E	; 142
    10ac:	87 2f       	mov	r24, r23
    10ae:	76 2f       	mov	r23, r22
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <__floatsisf+0x5e>
    10b2:	66 23       	and	r22, r22
    10b4:	71 f0       	breq	.+28     	; 0x10d2 <__floatsisf+0x74>
    10b6:	96 e8       	ldi	r25, 0x86	; 134
    10b8:	86 2f       	mov	r24, r22
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	2a f0       	brmi	.+10     	; 0x10ca <__floatsisf+0x6c>
    10c0:	9a 95       	dec	r25
    10c2:	66 0f       	add	r22, r22
    10c4:	77 1f       	adc	r23, r23
    10c6:	88 1f       	adc	r24, r24
    10c8:	da f7       	brpl	.-10     	; 0x10c0 <__floatsisf+0x62>
    10ca:	88 0f       	add	r24, r24
    10cc:	96 95       	lsr	r25
    10ce:	87 95       	ror	r24
    10d0:	97 f9       	bld	r25, 7
    10d2:	08 95       	ret

000010d4 <__fp_cmp>:
    10d4:	99 0f       	add	r25, r25
    10d6:	00 08       	sbc	r0, r0
    10d8:	55 0f       	add	r21, r21
    10da:	aa 0b       	sbc	r26, r26
    10dc:	e0 e8       	ldi	r30, 0x80	; 128
    10de:	fe ef       	ldi	r31, 0xFE	; 254
    10e0:	16 16       	cp	r1, r22
    10e2:	17 06       	cpc	r1, r23
    10e4:	e8 07       	cpc	r30, r24
    10e6:	f9 07       	cpc	r31, r25
    10e8:	c0 f0       	brcs	.+48     	; 0x111a <__fp_cmp+0x46>
    10ea:	12 16       	cp	r1, r18
    10ec:	13 06       	cpc	r1, r19
    10ee:	e4 07       	cpc	r30, r20
    10f0:	f5 07       	cpc	r31, r21
    10f2:	98 f0       	brcs	.+38     	; 0x111a <__fp_cmp+0x46>
    10f4:	62 1b       	sub	r22, r18
    10f6:	73 0b       	sbc	r23, r19
    10f8:	84 0b       	sbc	r24, r20
    10fa:	95 0b       	sbc	r25, r21
    10fc:	39 f4       	brne	.+14     	; 0x110c <__fp_cmp+0x38>
    10fe:	0a 26       	eor	r0, r26
    1100:	61 f0       	breq	.+24     	; 0x111a <__fp_cmp+0x46>
    1102:	23 2b       	or	r18, r19
    1104:	24 2b       	or	r18, r20
    1106:	25 2b       	or	r18, r21
    1108:	21 f4       	brne	.+8      	; 0x1112 <__fp_cmp+0x3e>
    110a:	08 95       	ret
    110c:	0a 26       	eor	r0, r26
    110e:	09 f4       	brne	.+2      	; 0x1112 <__fp_cmp+0x3e>
    1110:	a1 40       	sbci	r26, 0x01	; 1
    1112:	a6 95       	lsr	r26
    1114:	8f ef       	ldi	r24, 0xFF	; 255
    1116:	81 1d       	adc	r24, r1
    1118:	81 1d       	adc	r24, r1
    111a:	08 95       	ret

0000111c <__fp_inf>:
    111c:	97 f9       	bld	r25, 7
    111e:	9f 67       	ori	r25, 0x7F	; 127
    1120:	80 e8       	ldi	r24, 0x80	; 128
    1122:	70 e0       	ldi	r23, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	08 95       	ret

00001128 <__fp_nan>:
    1128:	9f ef       	ldi	r25, 0xFF	; 255
    112a:	80 ec       	ldi	r24, 0xC0	; 192
    112c:	08 95       	ret

0000112e <__fp_pscA>:
    112e:	00 24       	eor	r0, r0
    1130:	0a 94       	dec	r0
    1132:	16 16       	cp	r1, r22
    1134:	17 06       	cpc	r1, r23
    1136:	18 06       	cpc	r1, r24
    1138:	09 06       	cpc	r0, r25
    113a:	08 95       	ret

0000113c <__fp_pscB>:
    113c:	00 24       	eor	r0, r0
    113e:	0a 94       	dec	r0
    1140:	12 16       	cp	r1, r18
    1142:	13 06       	cpc	r1, r19
    1144:	14 06       	cpc	r1, r20
    1146:	05 06       	cpc	r0, r21
    1148:	08 95       	ret

0000114a <__fp_round>:
    114a:	09 2e       	mov	r0, r25
    114c:	03 94       	inc	r0
    114e:	00 0c       	add	r0, r0
    1150:	11 f4       	brne	.+4      	; 0x1156 <__fp_round+0xc>
    1152:	88 23       	and	r24, r24
    1154:	52 f0       	brmi	.+20     	; 0x116a <__fp_round+0x20>
    1156:	bb 0f       	add	r27, r27
    1158:	40 f4       	brcc	.+16     	; 0x116a <__fp_round+0x20>
    115a:	bf 2b       	or	r27, r31
    115c:	11 f4       	brne	.+4      	; 0x1162 <__fp_round+0x18>
    115e:	60 ff       	sbrs	r22, 0
    1160:	04 c0       	rjmp	.+8      	; 0x116a <__fp_round+0x20>
    1162:	6f 5f       	subi	r22, 0xFF	; 255
    1164:	7f 4f       	sbci	r23, 0xFF	; 255
    1166:	8f 4f       	sbci	r24, 0xFF	; 255
    1168:	9f 4f       	sbci	r25, 0xFF	; 255
    116a:	08 95       	ret

0000116c <__fp_split3>:
    116c:	57 fd       	sbrc	r21, 7
    116e:	90 58       	subi	r25, 0x80	; 128
    1170:	44 0f       	add	r20, r20
    1172:	55 1f       	adc	r21, r21
    1174:	59 f0       	breq	.+22     	; 0x118c <__fp_splitA+0x10>
    1176:	5f 3f       	cpi	r21, 0xFF	; 255
    1178:	71 f0       	breq	.+28     	; 0x1196 <__fp_splitA+0x1a>
    117a:	47 95       	ror	r20

0000117c <__fp_splitA>:
    117c:	88 0f       	add	r24, r24
    117e:	97 fb       	bst	r25, 7
    1180:	99 1f       	adc	r25, r25
    1182:	61 f0       	breq	.+24     	; 0x119c <__fp_splitA+0x20>
    1184:	9f 3f       	cpi	r25, 0xFF	; 255
    1186:	79 f0       	breq	.+30     	; 0x11a6 <__fp_splitA+0x2a>
    1188:	87 95       	ror	r24
    118a:	08 95       	ret
    118c:	12 16       	cp	r1, r18
    118e:	13 06       	cpc	r1, r19
    1190:	14 06       	cpc	r1, r20
    1192:	55 1f       	adc	r21, r21
    1194:	f2 cf       	rjmp	.-28     	; 0x117a <__fp_split3+0xe>
    1196:	46 95       	lsr	r20
    1198:	f1 df       	rcall	.-30     	; 0x117c <__fp_splitA>
    119a:	08 c0       	rjmp	.+16     	; 0x11ac <__fp_splitA+0x30>
    119c:	16 16       	cp	r1, r22
    119e:	17 06       	cpc	r1, r23
    11a0:	18 06       	cpc	r1, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	f1 cf       	rjmp	.-30     	; 0x1188 <__fp_splitA+0xc>
    11a6:	86 95       	lsr	r24
    11a8:	71 05       	cpc	r23, r1
    11aa:	61 05       	cpc	r22, r1
    11ac:	08 94       	sec
    11ae:	08 95       	ret

000011b0 <__fp_zero>:
    11b0:	e8 94       	clt

000011b2 <__fp_szero>:
    11b2:	bb 27       	eor	r27, r27
    11b4:	66 27       	eor	r22, r22
    11b6:	77 27       	eor	r23, r23
    11b8:	cb 01       	movw	r24, r22
    11ba:	97 f9       	bld	r25, 7
    11bc:	08 95       	ret

000011be <__gesf2>:
    11be:	8a df       	rcall	.-236    	; 0x10d4 <__fp_cmp>
    11c0:	08 f4       	brcc	.+2      	; 0x11c4 <__gesf2+0x6>
    11c2:	8f ef       	ldi	r24, 0xFF	; 255
    11c4:	08 95       	ret

000011c6 <__mulsf3>:
    11c6:	0b d0       	rcall	.+22     	; 0x11de <__mulsf3x>
    11c8:	c0 cf       	rjmp	.-128    	; 0x114a <__fp_round>
    11ca:	b1 df       	rcall	.-158    	; 0x112e <__fp_pscA>
    11cc:	28 f0       	brcs	.+10     	; 0x11d8 <__mulsf3+0x12>
    11ce:	b6 df       	rcall	.-148    	; 0x113c <__fp_pscB>
    11d0:	18 f0       	brcs	.+6      	; 0x11d8 <__mulsf3+0x12>
    11d2:	95 23       	and	r25, r21
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <__mulsf3+0x12>
    11d6:	a2 cf       	rjmp	.-188    	; 0x111c <__fp_inf>
    11d8:	a7 cf       	rjmp	.-178    	; 0x1128 <__fp_nan>
    11da:	11 24       	eor	r1, r1
    11dc:	ea cf       	rjmp	.-44     	; 0x11b2 <__fp_szero>

000011de <__mulsf3x>:
    11de:	c6 df       	rcall	.-116    	; 0x116c <__fp_split3>
    11e0:	a0 f3       	brcs	.-24     	; 0x11ca <__mulsf3+0x4>

000011e2 <__mulsf3_pse>:
    11e2:	95 9f       	mul	r25, r21
    11e4:	d1 f3       	breq	.-12     	; 0x11da <__mulsf3+0x14>
    11e6:	95 0f       	add	r25, r21
    11e8:	50 e0       	ldi	r21, 0x00	; 0
    11ea:	55 1f       	adc	r21, r21
    11ec:	62 9f       	mul	r22, r18
    11ee:	f0 01       	movw	r30, r0
    11f0:	72 9f       	mul	r23, r18
    11f2:	bb 27       	eor	r27, r27
    11f4:	f0 0d       	add	r31, r0
    11f6:	b1 1d       	adc	r27, r1
    11f8:	63 9f       	mul	r22, r19
    11fa:	aa 27       	eor	r26, r26
    11fc:	f0 0d       	add	r31, r0
    11fe:	b1 1d       	adc	r27, r1
    1200:	aa 1f       	adc	r26, r26
    1202:	64 9f       	mul	r22, r20
    1204:	66 27       	eor	r22, r22
    1206:	b0 0d       	add	r27, r0
    1208:	a1 1d       	adc	r26, r1
    120a:	66 1f       	adc	r22, r22
    120c:	82 9f       	mul	r24, r18
    120e:	22 27       	eor	r18, r18
    1210:	b0 0d       	add	r27, r0
    1212:	a1 1d       	adc	r26, r1
    1214:	62 1f       	adc	r22, r18
    1216:	73 9f       	mul	r23, r19
    1218:	b0 0d       	add	r27, r0
    121a:	a1 1d       	adc	r26, r1
    121c:	62 1f       	adc	r22, r18
    121e:	83 9f       	mul	r24, r19
    1220:	a0 0d       	add	r26, r0
    1222:	61 1d       	adc	r22, r1
    1224:	22 1f       	adc	r18, r18
    1226:	74 9f       	mul	r23, r20
    1228:	33 27       	eor	r19, r19
    122a:	a0 0d       	add	r26, r0
    122c:	61 1d       	adc	r22, r1
    122e:	23 1f       	adc	r18, r19
    1230:	84 9f       	mul	r24, r20
    1232:	60 0d       	add	r22, r0
    1234:	21 1d       	adc	r18, r1
    1236:	82 2f       	mov	r24, r18
    1238:	76 2f       	mov	r23, r22
    123a:	6a 2f       	mov	r22, r26
    123c:	11 24       	eor	r1, r1
    123e:	9f 57       	subi	r25, 0x7F	; 127
    1240:	50 40       	sbci	r21, 0x00	; 0
    1242:	8a f0       	brmi	.+34     	; 0x1266 <__mulsf3_pse+0x84>
    1244:	e1 f0       	breq	.+56     	; 0x127e <__mulsf3_pse+0x9c>
    1246:	88 23       	and	r24, r24
    1248:	4a f0       	brmi	.+18     	; 0x125c <__mulsf3_pse+0x7a>
    124a:	ee 0f       	add	r30, r30
    124c:	ff 1f       	adc	r31, r31
    124e:	bb 1f       	adc	r27, r27
    1250:	66 1f       	adc	r22, r22
    1252:	77 1f       	adc	r23, r23
    1254:	88 1f       	adc	r24, r24
    1256:	91 50       	subi	r25, 0x01	; 1
    1258:	50 40       	sbci	r21, 0x00	; 0
    125a:	a9 f7       	brne	.-22     	; 0x1246 <__mulsf3_pse+0x64>
    125c:	9e 3f       	cpi	r25, 0xFE	; 254
    125e:	51 05       	cpc	r21, r1
    1260:	70 f0       	brcs	.+28     	; 0x127e <__mulsf3_pse+0x9c>
    1262:	5c cf       	rjmp	.-328    	; 0x111c <__fp_inf>
    1264:	a6 cf       	rjmp	.-180    	; 0x11b2 <__fp_szero>
    1266:	5f 3f       	cpi	r21, 0xFF	; 255
    1268:	ec f3       	brlt	.-6      	; 0x1264 <__mulsf3_pse+0x82>
    126a:	98 3e       	cpi	r25, 0xE8	; 232
    126c:	dc f3       	brlt	.-10     	; 0x1264 <__mulsf3_pse+0x82>
    126e:	86 95       	lsr	r24
    1270:	77 95       	ror	r23
    1272:	67 95       	ror	r22
    1274:	b7 95       	ror	r27
    1276:	f7 95       	ror	r31
    1278:	e7 95       	ror	r30
    127a:	9f 5f       	subi	r25, 0xFF	; 255
    127c:	c1 f7       	brne	.-16     	; 0x126e <__mulsf3_pse+0x8c>
    127e:	fe 2b       	or	r31, r30
    1280:	88 0f       	add	r24, r24
    1282:	91 1d       	adc	r25, r1
    1284:	96 95       	lsr	r25
    1286:	87 95       	ror	r24
    1288:	97 f9       	bld	r25, 7
    128a:	08 95       	ret

0000128c <__udivmodhi4>:
    128c:	aa 1b       	sub	r26, r26
    128e:	bb 1b       	sub	r27, r27
    1290:	51 e1       	ldi	r21, 0x11	; 17
    1292:	07 c0       	rjmp	.+14     	; 0x12a2 <__udivmodhi4_ep>

00001294 <__udivmodhi4_loop>:
    1294:	aa 1f       	adc	r26, r26
    1296:	bb 1f       	adc	r27, r27
    1298:	a6 17       	cp	r26, r22
    129a:	b7 07       	cpc	r27, r23
    129c:	10 f0       	brcs	.+4      	; 0x12a2 <__udivmodhi4_ep>
    129e:	a6 1b       	sub	r26, r22
    12a0:	b7 0b       	sbc	r27, r23

000012a2 <__udivmodhi4_ep>:
    12a2:	88 1f       	adc	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	5a 95       	dec	r21
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__udivmodhi4_loop>
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	bc 01       	movw	r22, r24
    12b0:	cd 01       	movw	r24, r26
    12b2:	08 95       	ret

000012b4 <__divmodhi4>:
    12b4:	97 fb       	bst	r25, 7
    12b6:	07 2e       	mov	r0, r23
    12b8:	16 f4       	brtc	.+4      	; 0x12be <__divmodhi4+0xa>
    12ba:	00 94       	com	r0
    12bc:	06 d0       	rcall	.+12     	; 0x12ca <__divmodhi4_neg1>
    12be:	77 fd       	sbrc	r23, 7
    12c0:	08 d0       	rcall	.+16     	; 0x12d2 <__divmodhi4_neg2>
    12c2:	e4 df       	rcall	.-56     	; 0x128c <__udivmodhi4>
    12c4:	07 fc       	sbrc	r0, 7
    12c6:	05 d0       	rcall	.+10     	; 0x12d2 <__divmodhi4_neg2>
    12c8:	3e f4       	brtc	.+14     	; 0x12d8 <__divmodhi4_exit>

000012ca <__divmodhi4_neg1>:
    12ca:	90 95       	com	r25
    12cc:	81 95       	neg	r24
    12ce:	9f 4f       	sbci	r25, 0xFF	; 255
    12d0:	08 95       	ret

000012d2 <__divmodhi4_neg2>:
    12d2:	70 95       	com	r23
    12d4:	61 95       	neg	r22
    12d6:	7f 4f       	sbci	r23, 0xFF	; 255

000012d8 <__divmodhi4_exit>:
    12d8:	08 95       	ret

000012da <__tablejump2__>:
    12da:	ee 0f       	add	r30, r30
    12dc:	ff 1f       	adc	r31, r31

000012de <__tablejump__>:
    12de:	05 90       	lpm	r0, Z+
    12e0:	f4 91       	lpm	r31, Z
    12e2:	e0 2d       	mov	r30, r0
    12e4:	19 94       	eijmp

000012e6 <fdevopen>:
    12e6:	0f 93       	push	r16
    12e8:	1f 93       	push	r17
    12ea:	cf 93       	push	r28
    12ec:	df 93       	push	r29
    12ee:	ec 01       	movw	r28, r24
    12f0:	8b 01       	movw	r16, r22
    12f2:	00 97       	sbiw	r24, 0x00	; 0
    12f4:	31 f4       	brne	.+12     	; 0x1302 <fdevopen+0x1c>
    12f6:	61 15       	cp	r22, r1
    12f8:	71 05       	cpc	r23, r1
    12fa:	19 f4       	brne	.+6      	; 0x1302 <fdevopen+0x1c>
    12fc:	80 e0       	ldi	r24, 0x00	; 0
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	37 c0       	rjmp	.+110    	; 0x1370 <fdevopen+0x8a>
    1302:	6e e0       	ldi	r22, 0x0E	; 14
    1304:	70 e0       	ldi	r23, 0x00	; 0
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	63 d2       	rcall	.+1222   	; 0x17d2 <calloc>
    130c:	fc 01       	movw	r30, r24
    130e:	00 97       	sbiw	r24, 0x00	; 0
    1310:	a9 f3       	breq	.-22     	; 0x12fc <fdevopen+0x16>
    1312:	80 e8       	ldi	r24, 0x80	; 128
    1314:	83 83       	std	Z+3, r24	; 0x03
    1316:	01 15       	cp	r16, r1
    1318:	11 05       	cpc	r17, r1
    131a:	71 f0       	breq	.+28     	; 0x1338 <fdevopen+0x52>
    131c:	13 87       	std	Z+11, r17	; 0x0b
    131e:	02 87       	std	Z+10, r16	; 0x0a
    1320:	81 e8       	ldi	r24, 0x81	; 129
    1322:	83 83       	std	Z+3, r24	; 0x03
    1324:	80 91 3c 03 	lds	r24, 0x033C
    1328:	90 91 3d 03 	lds	r25, 0x033D
    132c:	89 2b       	or	r24, r25
    132e:	21 f4       	brne	.+8      	; 0x1338 <fdevopen+0x52>
    1330:	f0 93 3d 03 	sts	0x033D, r31
    1334:	e0 93 3c 03 	sts	0x033C, r30
    1338:	20 97       	sbiw	r28, 0x00	; 0
    133a:	c9 f0       	breq	.+50     	; 0x136e <fdevopen+0x88>
    133c:	d1 87       	std	Z+9, r29	; 0x09
    133e:	c0 87       	std	Z+8, r28	; 0x08
    1340:	83 81       	ldd	r24, Z+3	; 0x03
    1342:	82 60       	ori	r24, 0x02	; 2
    1344:	83 83       	std	Z+3, r24	; 0x03
    1346:	80 91 3e 03 	lds	r24, 0x033E
    134a:	90 91 3f 03 	lds	r25, 0x033F
    134e:	89 2b       	or	r24, r25
    1350:	71 f4       	brne	.+28     	; 0x136e <fdevopen+0x88>
    1352:	f0 93 3f 03 	sts	0x033F, r31
    1356:	e0 93 3e 03 	sts	0x033E, r30
    135a:	80 91 40 03 	lds	r24, 0x0340
    135e:	90 91 41 03 	lds	r25, 0x0341
    1362:	89 2b       	or	r24, r25
    1364:	21 f4       	brne	.+8      	; 0x136e <fdevopen+0x88>
    1366:	f0 93 41 03 	sts	0x0341, r31
    136a:	e0 93 40 03 	sts	0x0340, r30
    136e:	cf 01       	movw	r24, r30
    1370:	df 91       	pop	r29
    1372:	cf 91       	pop	r28
    1374:	1f 91       	pop	r17
    1376:	0f 91       	pop	r16
    1378:	08 95       	ret

0000137a <printf>:
    137a:	cf 93       	push	r28
    137c:	df 93       	push	r29
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
    1382:	fe 01       	movw	r30, r28
    1384:	36 96       	adiw	r30, 0x06	; 6
    1386:	61 91       	ld	r22, Z+
    1388:	71 91       	ld	r23, Z+
    138a:	af 01       	movw	r20, r30
    138c:	80 91 3e 03 	lds	r24, 0x033E
    1390:	90 91 3f 03 	lds	r25, 0x033F
    1394:	30 d0       	rcall	.+96     	; 0x13f6 <vfprintf>
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <puts>:
    139c:	0f 93       	push	r16
    139e:	1f 93       	push	r17
    13a0:	cf 93       	push	r28
    13a2:	df 93       	push	r29
    13a4:	e0 91 3e 03 	lds	r30, 0x033E
    13a8:	f0 91 3f 03 	lds	r31, 0x033F
    13ac:	23 81       	ldd	r18, Z+3	; 0x03
    13ae:	21 ff       	sbrs	r18, 1
    13b0:	1b c0       	rjmp	.+54     	; 0x13e8 <puts+0x4c>
    13b2:	ec 01       	movw	r28, r24
    13b4:	00 e0       	ldi	r16, 0x00	; 0
    13b6:	10 e0       	ldi	r17, 0x00	; 0
    13b8:	89 91       	ld	r24, Y+
    13ba:	60 91 3e 03 	lds	r22, 0x033E
    13be:	70 91 3f 03 	lds	r23, 0x033F
    13c2:	db 01       	movw	r26, r22
    13c4:	18 96       	adiw	r26, 0x08	; 8
    13c6:	ed 91       	ld	r30, X+
    13c8:	fc 91       	ld	r31, X
    13ca:	19 97       	sbiw	r26, 0x09	; 9
    13cc:	88 23       	and	r24, r24
    13ce:	31 f0       	breq	.+12     	; 0x13dc <puts+0x40>
    13d0:	19 95       	eicall
    13d2:	89 2b       	or	r24, r25
    13d4:	89 f3       	breq	.-30     	; 0x13b8 <puts+0x1c>
    13d6:	0f ef       	ldi	r16, 0xFF	; 255
    13d8:	1f ef       	ldi	r17, 0xFF	; 255
    13da:	ee cf       	rjmp	.-36     	; 0x13b8 <puts+0x1c>
    13dc:	8a e0       	ldi	r24, 0x0A	; 10
    13de:	19 95       	eicall
    13e0:	89 2b       	or	r24, r25
    13e2:	11 f4       	brne	.+4      	; 0x13e8 <puts+0x4c>
    13e4:	c8 01       	movw	r24, r16
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <puts+0x50>
    13e8:	8f ef       	ldi	r24, 0xFF	; 255
    13ea:	9f ef       	ldi	r25, 0xFF	; 255
    13ec:	df 91       	pop	r29
    13ee:	cf 91       	pop	r28
    13f0:	1f 91       	pop	r17
    13f2:	0f 91       	pop	r16
    13f4:	08 95       	ret

000013f6 <vfprintf>:
    13f6:	2f 92       	push	r2
    13f8:	3f 92       	push	r3
    13fa:	4f 92       	push	r4
    13fc:	5f 92       	push	r5
    13fe:	6f 92       	push	r6
    1400:	7f 92       	push	r7
    1402:	8f 92       	push	r8
    1404:	9f 92       	push	r9
    1406:	af 92       	push	r10
    1408:	bf 92       	push	r11
    140a:	cf 92       	push	r12
    140c:	df 92       	push	r13
    140e:	ef 92       	push	r14
    1410:	ff 92       	push	r15
    1412:	0f 93       	push	r16
    1414:	1f 93       	push	r17
    1416:	cf 93       	push	r28
    1418:	df 93       	push	r29
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	2c 97       	sbiw	r28, 0x0c	; 12
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	de bf       	out	0x3e, r29	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	cd bf       	out	0x3d, r28	; 61
    142a:	7c 01       	movw	r14, r24
    142c:	6b 01       	movw	r12, r22
    142e:	8a 01       	movw	r16, r20
    1430:	fc 01       	movw	r30, r24
    1432:	17 82       	std	Z+7, r1	; 0x07
    1434:	16 82       	std	Z+6, r1	; 0x06
    1436:	83 81       	ldd	r24, Z+3	; 0x03
    1438:	81 ff       	sbrs	r24, 1
    143a:	b0 c1       	rjmp	.+864    	; 0x179c <vfprintf+0x3a6>
    143c:	ce 01       	movw	r24, r28
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	4c 01       	movw	r8, r24
    1442:	f7 01       	movw	r30, r14
    1444:	93 81       	ldd	r25, Z+3	; 0x03
    1446:	f6 01       	movw	r30, r12
    1448:	93 fd       	sbrc	r25, 3
    144a:	85 91       	lpm	r24, Z+
    144c:	93 ff       	sbrs	r25, 3
    144e:	81 91       	ld	r24, Z+
    1450:	6f 01       	movw	r12, r30
    1452:	88 23       	and	r24, r24
    1454:	09 f4       	brne	.+2      	; 0x1458 <vfprintf+0x62>
    1456:	9e c1       	rjmp	.+828    	; 0x1794 <vfprintf+0x39e>
    1458:	85 32       	cpi	r24, 0x25	; 37
    145a:	39 f4       	brne	.+14     	; 0x146a <vfprintf+0x74>
    145c:	93 fd       	sbrc	r25, 3
    145e:	85 91       	lpm	r24, Z+
    1460:	93 ff       	sbrs	r25, 3
    1462:	81 91       	ld	r24, Z+
    1464:	6f 01       	movw	r12, r30
    1466:	85 32       	cpi	r24, 0x25	; 37
    1468:	21 f4       	brne	.+8      	; 0x1472 <vfprintf+0x7c>
    146a:	b7 01       	movw	r22, r14
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0f d3       	rcall	.+1566   	; 0x1a8e <fputc>
    1470:	e8 cf       	rjmp	.-48     	; 0x1442 <vfprintf+0x4c>
    1472:	51 2c       	mov	r5, r1
    1474:	31 2c       	mov	r3, r1
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	20 32       	cpi	r18, 0x20	; 32
    147a:	a0 f4       	brcc	.+40     	; 0x14a4 <vfprintf+0xae>
    147c:	8b 32       	cpi	r24, 0x2B	; 43
    147e:	69 f0       	breq	.+26     	; 0x149a <vfprintf+0xa4>
    1480:	30 f4       	brcc	.+12     	; 0x148e <vfprintf+0x98>
    1482:	80 32       	cpi	r24, 0x20	; 32
    1484:	59 f0       	breq	.+22     	; 0x149c <vfprintf+0xa6>
    1486:	83 32       	cpi	r24, 0x23	; 35
    1488:	69 f4       	brne	.+26     	; 0x14a4 <vfprintf+0xae>
    148a:	20 61       	ori	r18, 0x10	; 16
    148c:	2c c0       	rjmp	.+88     	; 0x14e6 <vfprintf+0xf0>
    148e:	8d 32       	cpi	r24, 0x2D	; 45
    1490:	39 f0       	breq	.+14     	; 0x14a0 <vfprintf+0xaa>
    1492:	80 33       	cpi	r24, 0x30	; 48
    1494:	39 f4       	brne	.+14     	; 0x14a4 <vfprintf+0xae>
    1496:	21 60       	ori	r18, 0x01	; 1
    1498:	26 c0       	rjmp	.+76     	; 0x14e6 <vfprintf+0xf0>
    149a:	22 60       	ori	r18, 0x02	; 2
    149c:	24 60       	ori	r18, 0x04	; 4
    149e:	23 c0       	rjmp	.+70     	; 0x14e6 <vfprintf+0xf0>
    14a0:	28 60       	ori	r18, 0x08	; 8
    14a2:	21 c0       	rjmp	.+66     	; 0x14e6 <vfprintf+0xf0>
    14a4:	27 fd       	sbrc	r18, 7
    14a6:	27 c0       	rjmp	.+78     	; 0x14f6 <vfprintf+0x100>
    14a8:	30 ed       	ldi	r19, 0xD0	; 208
    14aa:	38 0f       	add	r19, r24
    14ac:	3a 30       	cpi	r19, 0x0A	; 10
    14ae:	78 f4       	brcc	.+30     	; 0x14ce <vfprintf+0xd8>
    14b0:	26 ff       	sbrs	r18, 6
    14b2:	06 c0       	rjmp	.+12     	; 0x14c0 <vfprintf+0xca>
    14b4:	fa e0       	ldi	r31, 0x0A	; 10
    14b6:	5f 9e       	mul	r5, r31
    14b8:	30 0d       	add	r19, r0
    14ba:	11 24       	eor	r1, r1
    14bc:	53 2e       	mov	r5, r19
    14be:	13 c0       	rjmp	.+38     	; 0x14e6 <vfprintf+0xf0>
    14c0:	8a e0       	ldi	r24, 0x0A	; 10
    14c2:	38 9e       	mul	r3, r24
    14c4:	30 0d       	add	r19, r0
    14c6:	11 24       	eor	r1, r1
    14c8:	33 2e       	mov	r3, r19
    14ca:	20 62       	ori	r18, 0x20	; 32
    14cc:	0c c0       	rjmp	.+24     	; 0x14e6 <vfprintf+0xf0>
    14ce:	8e 32       	cpi	r24, 0x2E	; 46
    14d0:	21 f4       	brne	.+8      	; 0x14da <vfprintf+0xe4>
    14d2:	26 fd       	sbrc	r18, 6
    14d4:	5f c1       	rjmp	.+702    	; 0x1794 <vfprintf+0x39e>
    14d6:	20 64       	ori	r18, 0x40	; 64
    14d8:	06 c0       	rjmp	.+12     	; 0x14e6 <vfprintf+0xf0>
    14da:	8c 36       	cpi	r24, 0x6C	; 108
    14dc:	11 f4       	brne	.+4      	; 0x14e2 <vfprintf+0xec>
    14de:	20 68       	ori	r18, 0x80	; 128
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <vfprintf+0xf0>
    14e2:	88 36       	cpi	r24, 0x68	; 104
    14e4:	41 f4       	brne	.+16     	; 0x14f6 <vfprintf+0x100>
    14e6:	f6 01       	movw	r30, r12
    14e8:	93 fd       	sbrc	r25, 3
    14ea:	85 91       	lpm	r24, Z+
    14ec:	93 ff       	sbrs	r25, 3
    14ee:	81 91       	ld	r24, Z+
    14f0:	6f 01       	movw	r12, r30
    14f2:	81 11       	cpse	r24, r1
    14f4:	c1 cf       	rjmp	.-126    	; 0x1478 <vfprintf+0x82>
    14f6:	98 2f       	mov	r25, r24
    14f8:	9f 7d       	andi	r25, 0xDF	; 223
    14fa:	95 54       	subi	r25, 0x45	; 69
    14fc:	93 30       	cpi	r25, 0x03	; 3
    14fe:	28 f4       	brcc	.+10     	; 0x150a <vfprintf+0x114>
    1500:	0c 5f       	subi	r16, 0xFC	; 252
    1502:	1f 4f       	sbci	r17, 0xFF	; 255
    1504:	ff e3       	ldi	r31, 0x3F	; 63
    1506:	f9 83       	std	Y+1, r31	; 0x01
    1508:	0d c0       	rjmp	.+26     	; 0x1524 <vfprintf+0x12e>
    150a:	83 36       	cpi	r24, 0x63	; 99
    150c:	31 f0       	breq	.+12     	; 0x151a <vfprintf+0x124>
    150e:	83 37       	cpi	r24, 0x73	; 115
    1510:	71 f0       	breq	.+28     	; 0x152e <vfprintf+0x138>
    1512:	83 35       	cpi	r24, 0x53	; 83
    1514:	09 f0       	breq	.+2      	; 0x1518 <vfprintf+0x122>
    1516:	57 c0       	rjmp	.+174    	; 0x15c6 <vfprintf+0x1d0>
    1518:	21 c0       	rjmp	.+66     	; 0x155c <vfprintf+0x166>
    151a:	f8 01       	movw	r30, r16
    151c:	80 81       	ld	r24, Z
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	0e 5f       	subi	r16, 0xFE	; 254
    1522:	1f 4f       	sbci	r17, 0xFF	; 255
    1524:	44 24       	eor	r4, r4
    1526:	43 94       	inc	r4
    1528:	51 2c       	mov	r5, r1
    152a:	54 01       	movw	r10, r8
    152c:	14 c0       	rjmp	.+40     	; 0x1556 <vfprintf+0x160>
    152e:	38 01       	movw	r6, r16
    1530:	f2 e0       	ldi	r31, 0x02	; 2
    1532:	6f 0e       	add	r6, r31
    1534:	71 1c       	adc	r7, r1
    1536:	f8 01       	movw	r30, r16
    1538:	a0 80       	ld	r10, Z
    153a:	b1 80       	ldd	r11, Z+1	; 0x01
    153c:	26 ff       	sbrs	r18, 6
    153e:	03 c0       	rjmp	.+6      	; 0x1546 <vfprintf+0x150>
    1540:	65 2d       	mov	r22, r5
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	02 c0       	rjmp	.+4      	; 0x154a <vfprintf+0x154>
    1546:	6f ef       	ldi	r22, 0xFF	; 255
    1548:	7f ef       	ldi	r23, 0xFF	; 255
    154a:	c5 01       	movw	r24, r10
    154c:	2c 87       	std	Y+12, r18	; 0x0c
    154e:	94 d2       	rcall	.+1320   	; 0x1a78 <strnlen>
    1550:	2c 01       	movw	r4, r24
    1552:	83 01       	movw	r16, r6
    1554:	2c 85       	ldd	r18, Y+12	; 0x0c
    1556:	2f 77       	andi	r18, 0x7F	; 127
    1558:	22 2e       	mov	r2, r18
    155a:	16 c0       	rjmp	.+44     	; 0x1588 <vfprintf+0x192>
    155c:	38 01       	movw	r6, r16
    155e:	f2 e0       	ldi	r31, 0x02	; 2
    1560:	6f 0e       	add	r6, r31
    1562:	71 1c       	adc	r7, r1
    1564:	f8 01       	movw	r30, r16
    1566:	a0 80       	ld	r10, Z
    1568:	b1 80       	ldd	r11, Z+1	; 0x01
    156a:	26 ff       	sbrs	r18, 6
    156c:	03 c0       	rjmp	.+6      	; 0x1574 <vfprintf+0x17e>
    156e:	65 2d       	mov	r22, r5
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	02 c0       	rjmp	.+4      	; 0x1578 <vfprintf+0x182>
    1574:	6f ef       	ldi	r22, 0xFF	; 255
    1576:	7f ef       	ldi	r23, 0xFF	; 255
    1578:	c5 01       	movw	r24, r10
    157a:	2c 87       	std	Y+12, r18	; 0x0c
    157c:	6b d2       	rcall	.+1238   	; 0x1a54 <strnlen_P>
    157e:	2c 01       	movw	r4, r24
    1580:	2c 85       	ldd	r18, Y+12	; 0x0c
    1582:	20 68       	ori	r18, 0x80	; 128
    1584:	22 2e       	mov	r2, r18
    1586:	83 01       	movw	r16, r6
    1588:	23 fc       	sbrc	r2, 3
    158a:	19 c0       	rjmp	.+50     	; 0x15be <vfprintf+0x1c8>
    158c:	83 2d       	mov	r24, r3
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	48 16       	cp	r4, r24
    1592:	59 06       	cpc	r5, r25
    1594:	a0 f4       	brcc	.+40     	; 0x15be <vfprintf+0x1c8>
    1596:	b7 01       	movw	r22, r14
    1598:	80 e2       	ldi	r24, 0x20	; 32
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	78 d2       	rcall	.+1264   	; 0x1a8e <fputc>
    159e:	3a 94       	dec	r3
    15a0:	f5 cf       	rjmp	.-22     	; 0x158c <vfprintf+0x196>
    15a2:	f5 01       	movw	r30, r10
    15a4:	27 fc       	sbrc	r2, 7
    15a6:	85 91       	lpm	r24, Z+
    15a8:	27 fe       	sbrs	r2, 7
    15aa:	81 91       	ld	r24, Z+
    15ac:	5f 01       	movw	r10, r30
    15ae:	b7 01       	movw	r22, r14
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	6d d2       	rcall	.+1242   	; 0x1a8e <fputc>
    15b4:	31 10       	cpse	r3, r1
    15b6:	3a 94       	dec	r3
    15b8:	f1 e0       	ldi	r31, 0x01	; 1
    15ba:	4f 1a       	sub	r4, r31
    15bc:	51 08       	sbc	r5, r1
    15be:	41 14       	cp	r4, r1
    15c0:	51 04       	cpc	r5, r1
    15c2:	79 f7       	brne	.-34     	; 0x15a2 <vfprintf+0x1ac>
    15c4:	de c0       	rjmp	.+444    	; 0x1782 <vfprintf+0x38c>
    15c6:	84 36       	cpi	r24, 0x64	; 100
    15c8:	11 f0       	breq	.+4      	; 0x15ce <vfprintf+0x1d8>
    15ca:	89 36       	cpi	r24, 0x69	; 105
    15cc:	31 f5       	brne	.+76     	; 0x161a <vfprintf+0x224>
    15ce:	f8 01       	movw	r30, r16
    15d0:	27 ff       	sbrs	r18, 7
    15d2:	07 c0       	rjmp	.+14     	; 0x15e2 <vfprintf+0x1ec>
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0c 5f       	subi	r16, 0xFC	; 252
    15de:	1f 4f       	sbci	r17, 0xFF	; 255
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <vfprintf+0x1fc>
    15e2:	60 81       	ld	r22, Z
    15e4:	71 81       	ldd	r23, Z+1	; 0x01
    15e6:	88 27       	eor	r24, r24
    15e8:	77 fd       	sbrc	r23, 7
    15ea:	80 95       	com	r24
    15ec:	98 2f       	mov	r25, r24
    15ee:	0e 5f       	subi	r16, 0xFE	; 254
    15f0:	1f 4f       	sbci	r17, 0xFF	; 255
    15f2:	2f 76       	andi	r18, 0x6F	; 111
    15f4:	b2 2e       	mov	r11, r18
    15f6:	97 ff       	sbrs	r25, 7
    15f8:	09 c0       	rjmp	.+18     	; 0x160c <vfprintf+0x216>
    15fa:	90 95       	com	r25
    15fc:	80 95       	com	r24
    15fe:	70 95       	com	r23
    1600:	61 95       	neg	r22
    1602:	7f 4f       	sbci	r23, 0xFF	; 255
    1604:	8f 4f       	sbci	r24, 0xFF	; 255
    1606:	9f 4f       	sbci	r25, 0xFF	; 255
    1608:	20 68       	ori	r18, 0x80	; 128
    160a:	b2 2e       	mov	r11, r18
    160c:	2a e0       	ldi	r18, 0x0A	; 10
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	a4 01       	movw	r20, r8
    1612:	6f d2       	rcall	.+1246   	; 0x1af2 <__ultoa_invert>
    1614:	a8 2e       	mov	r10, r24
    1616:	a8 18       	sub	r10, r8
    1618:	43 c0       	rjmp	.+134    	; 0x16a0 <vfprintf+0x2aa>
    161a:	85 37       	cpi	r24, 0x75	; 117
    161c:	29 f4       	brne	.+10     	; 0x1628 <vfprintf+0x232>
    161e:	2f 7e       	andi	r18, 0xEF	; 239
    1620:	b2 2e       	mov	r11, r18
    1622:	2a e0       	ldi	r18, 0x0A	; 10
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	25 c0       	rjmp	.+74     	; 0x1672 <vfprintf+0x27c>
    1628:	f2 2f       	mov	r31, r18
    162a:	f9 7f       	andi	r31, 0xF9	; 249
    162c:	bf 2e       	mov	r11, r31
    162e:	8f 36       	cpi	r24, 0x6F	; 111
    1630:	c1 f0       	breq	.+48     	; 0x1662 <vfprintf+0x26c>
    1632:	18 f4       	brcc	.+6      	; 0x163a <vfprintf+0x244>
    1634:	88 35       	cpi	r24, 0x58	; 88
    1636:	79 f0       	breq	.+30     	; 0x1656 <vfprintf+0x260>
    1638:	ad c0       	rjmp	.+346    	; 0x1794 <vfprintf+0x39e>
    163a:	80 37       	cpi	r24, 0x70	; 112
    163c:	19 f0       	breq	.+6      	; 0x1644 <vfprintf+0x24e>
    163e:	88 37       	cpi	r24, 0x78	; 120
    1640:	21 f0       	breq	.+8      	; 0x164a <vfprintf+0x254>
    1642:	a8 c0       	rjmp	.+336    	; 0x1794 <vfprintf+0x39e>
    1644:	2f 2f       	mov	r18, r31
    1646:	20 61       	ori	r18, 0x10	; 16
    1648:	b2 2e       	mov	r11, r18
    164a:	b4 fe       	sbrs	r11, 4
    164c:	0d c0       	rjmp	.+26     	; 0x1668 <vfprintf+0x272>
    164e:	8b 2d       	mov	r24, r11
    1650:	84 60       	ori	r24, 0x04	; 4
    1652:	b8 2e       	mov	r11, r24
    1654:	09 c0       	rjmp	.+18     	; 0x1668 <vfprintf+0x272>
    1656:	24 ff       	sbrs	r18, 4
    1658:	0a c0       	rjmp	.+20     	; 0x166e <vfprintf+0x278>
    165a:	9f 2f       	mov	r25, r31
    165c:	96 60       	ori	r25, 0x06	; 6
    165e:	b9 2e       	mov	r11, r25
    1660:	06 c0       	rjmp	.+12     	; 0x166e <vfprintf+0x278>
    1662:	28 e0       	ldi	r18, 0x08	; 8
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	05 c0       	rjmp	.+10     	; 0x1672 <vfprintf+0x27c>
    1668:	20 e1       	ldi	r18, 0x10	; 16
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <vfprintf+0x27c>
    166e:	20 e1       	ldi	r18, 0x10	; 16
    1670:	32 e0       	ldi	r19, 0x02	; 2
    1672:	f8 01       	movw	r30, r16
    1674:	b7 fe       	sbrs	r11, 7
    1676:	07 c0       	rjmp	.+14     	; 0x1686 <vfprintf+0x290>
    1678:	60 81       	ld	r22, Z
    167a:	71 81       	ldd	r23, Z+1	; 0x01
    167c:	82 81       	ldd	r24, Z+2	; 0x02
    167e:	93 81       	ldd	r25, Z+3	; 0x03
    1680:	0c 5f       	subi	r16, 0xFC	; 252
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	06 c0       	rjmp	.+12     	; 0x1692 <vfprintf+0x29c>
    1686:	60 81       	ld	r22, Z
    1688:	71 81       	ldd	r23, Z+1	; 0x01
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	0e 5f       	subi	r16, 0xFE	; 254
    1690:	1f 4f       	sbci	r17, 0xFF	; 255
    1692:	a4 01       	movw	r20, r8
    1694:	2e d2       	rcall	.+1116   	; 0x1af2 <__ultoa_invert>
    1696:	a8 2e       	mov	r10, r24
    1698:	a8 18       	sub	r10, r8
    169a:	fb 2d       	mov	r31, r11
    169c:	ff 77       	andi	r31, 0x7F	; 127
    169e:	bf 2e       	mov	r11, r31
    16a0:	b6 fe       	sbrs	r11, 6
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <vfprintf+0x2c4>
    16a4:	2b 2d       	mov	r18, r11
    16a6:	2e 7f       	andi	r18, 0xFE	; 254
    16a8:	a5 14       	cp	r10, r5
    16aa:	50 f4       	brcc	.+20     	; 0x16c0 <vfprintf+0x2ca>
    16ac:	b4 fe       	sbrs	r11, 4
    16ae:	0a c0       	rjmp	.+20     	; 0x16c4 <vfprintf+0x2ce>
    16b0:	b2 fc       	sbrc	r11, 2
    16b2:	08 c0       	rjmp	.+16     	; 0x16c4 <vfprintf+0x2ce>
    16b4:	2b 2d       	mov	r18, r11
    16b6:	2e 7e       	andi	r18, 0xEE	; 238
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <vfprintf+0x2ce>
    16ba:	7a 2c       	mov	r7, r10
    16bc:	2b 2d       	mov	r18, r11
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <vfprintf+0x2d0>
    16c0:	7a 2c       	mov	r7, r10
    16c2:	01 c0       	rjmp	.+2      	; 0x16c6 <vfprintf+0x2d0>
    16c4:	75 2c       	mov	r7, r5
    16c6:	24 ff       	sbrs	r18, 4
    16c8:	0d c0       	rjmp	.+26     	; 0x16e4 <vfprintf+0x2ee>
    16ca:	fe 01       	movw	r30, r28
    16cc:	ea 0d       	add	r30, r10
    16ce:	f1 1d       	adc	r31, r1
    16d0:	80 81       	ld	r24, Z
    16d2:	80 33       	cpi	r24, 0x30	; 48
    16d4:	11 f4       	brne	.+4      	; 0x16da <vfprintf+0x2e4>
    16d6:	29 7e       	andi	r18, 0xE9	; 233
    16d8:	09 c0       	rjmp	.+18     	; 0x16ec <vfprintf+0x2f6>
    16da:	22 ff       	sbrs	r18, 2
    16dc:	06 c0       	rjmp	.+12     	; 0x16ea <vfprintf+0x2f4>
    16de:	73 94       	inc	r7
    16e0:	73 94       	inc	r7
    16e2:	04 c0       	rjmp	.+8      	; 0x16ec <vfprintf+0x2f6>
    16e4:	82 2f       	mov	r24, r18
    16e6:	86 78       	andi	r24, 0x86	; 134
    16e8:	09 f0       	breq	.+2      	; 0x16ec <vfprintf+0x2f6>
    16ea:	73 94       	inc	r7
    16ec:	23 fd       	sbrc	r18, 3
    16ee:	12 c0       	rjmp	.+36     	; 0x1714 <vfprintf+0x31e>
    16f0:	20 ff       	sbrs	r18, 0
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <vfprintf+0x30a>
    16f4:	5a 2c       	mov	r5, r10
    16f6:	73 14       	cp	r7, r3
    16f8:	18 f4       	brcc	.+6      	; 0x1700 <vfprintf+0x30a>
    16fa:	53 0c       	add	r5, r3
    16fc:	57 18       	sub	r5, r7
    16fe:	73 2c       	mov	r7, r3
    1700:	73 14       	cp	r7, r3
    1702:	60 f4       	brcc	.+24     	; 0x171c <vfprintf+0x326>
    1704:	b7 01       	movw	r22, r14
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	2c 87       	std	Y+12, r18	; 0x0c
    170c:	c0 d1       	rcall	.+896    	; 0x1a8e <fputc>
    170e:	73 94       	inc	r7
    1710:	2c 85       	ldd	r18, Y+12	; 0x0c
    1712:	f6 cf       	rjmp	.-20     	; 0x1700 <vfprintf+0x30a>
    1714:	73 14       	cp	r7, r3
    1716:	10 f4       	brcc	.+4      	; 0x171c <vfprintf+0x326>
    1718:	37 18       	sub	r3, r7
    171a:	01 c0       	rjmp	.+2      	; 0x171e <vfprintf+0x328>
    171c:	31 2c       	mov	r3, r1
    171e:	24 ff       	sbrs	r18, 4
    1720:	11 c0       	rjmp	.+34     	; 0x1744 <vfprintf+0x34e>
    1722:	b7 01       	movw	r22, r14
    1724:	80 e3       	ldi	r24, 0x30	; 48
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	2c 87       	std	Y+12, r18	; 0x0c
    172a:	b1 d1       	rcall	.+866    	; 0x1a8e <fputc>
    172c:	2c 85       	ldd	r18, Y+12	; 0x0c
    172e:	22 ff       	sbrs	r18, 2
    1730:	16 c0       	rjmp	.+44     	; 0x175e <vfprintf+0x368>
    1732:	21 ff       	sbrs	r18, 1
    1734:	03 c0       	rjmp	.+6      	; 0x173c <vfprintf+0x346>
    1736:	88 e5       	ldi	r24, 0x58	; 88
    1738:	90 e0       	ldi	r25, 0x00	; 0
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <vfprintf+0x34a>
    173c:	88 e7       	ldi	r24, 0x78	; 120
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	b7 01       	movw	r22, r14
    1742:	0c c0       	rjmp	.+24     	; 0x175c <vfprintf+0x366>
    1744:	82 2f       	mov	r24, r18
    1746:	86 78       	andi	r24, 0x86	; 134
    1748:	51 f0       	breq	.+20     	; 0x175e <vfprintf+0x368>
    174a:	21 fd       	sbrc	r18, 1
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <vfprintf+0x35c>
    174e:	80 e2       	ldi	r24, 0x20	; 32
    1750:	01 c0       	rjmp	.+2      	; 0x1754 <vfprintf+0x35e>
    1752:	8b e2       	ldi	r24, 0x2B	; 43
    1754:	27 fd       	sbrc	r18, 7
    1756:	8d e2       	ldi	r24, 0x2D	; 45
    1758:	b7 01       	movw	r22, r14
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	98 d1       	rcall	.+816    	; 0x1a8e <fputc>
    175e:	a5 14       	cp	r10, r5
    1760:	30 f4       	brcc	.+12     	; 0x176e <vfprintf+0x378>
    1762:	b7 01       	movw	r22, r14
    1764:	80 e3       	ldi	r24, 0x30	; 48
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	92 d1       	rcall	.+804    	; 0x1a8e <fputc>
    176a:	5a 94       	dec	r5
    176c:	f8 cf       	rjmp	.-16     	; 0x175e <vfprintf+0x368>
    176e:	aa 94       	dec	r10
    1770:	f4 01       	movw	r30, r8
    1772:	ea 0d       	add	r30, r10
    1774:	f1 1d       	adc	r31, r1
    1776:	80 81       	ld	r24, Z
    1778:	b7 01       	movw	r22, r14
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	88 d1       	rcall	.+784    	; 0x1a8e <fputc>
    177e:	a1 10       	cpse	r10, r1
    1780:	f6 cf       	rjmp	.-20     	; 0x176e <vfprintf+0x378>
    1782:	33 20       	and	r3, r3
    1784:	09 f4       	brne	.+2      	; 0x1788 <vfprintf+0x392>
    1786:	5d ce       	rjmp	.-838    	; 0x1442 <vfprintf+0x4c>
    1788:	b7 01       	movw	r22, r14
    178a:	80 e2       	ldi	r24, 0x20	; 32
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	7f d1       	rcall	.+766    	; 0x1a8e <fputc>
    1790:	3a 94       	dec	r3
    1792:	f7 cf       	rjmp	.-18     	; 0x1782 <vfprintf+0x38c>
    1794:	f7 01       	movw	r30, r14
    1796:	86 81       	ldd	r24, Z+6	; 0x06
    1798:	97 81       	ldd	r25, Z+7	; 0x07
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <vfprintf+0x3aa>
    179c:	8f ef       	ldi	r24, 0xFF	; 255
    179e:	9f ef       	ldi	r25, 0xFF	; 255
    17a0:	2c 96       	adiw	r28, 0x0c	; 12
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	f8 94       	cli
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	0f be       	out	0x3f, r0	; 63
    17aa:	cd bf       	out	0x3d, r28	; 61
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	1f 91       	pop	r17
    17b2:	0f 91       	pop	r16
    17b4:	ff 90       	pop	r15
    17b6:	ef 90       	pop	r14
    17b8:	df 90       	pop	r13
    17ba:	cf 90       	pop	r12
    17bc:	bf 90       	pop	r11
    17be:	af 90       	pop	r10
    17c0:	9f 90       	pop	r9
    17c2:	8f 90       	pop	r8
    17c4:	7f 90       	pop	r7
    17c6:	6f 90       	pop	r6
    17c8:	5f 90       	pop	r5
    17ca:	4f 90       	pop	r4
    17cc:	3f 90       	pop	r3
    17ce:	2f 90       	pop	r2
    17d0:	08 95       	ret

000017d2 <calloc>:
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	86 9f       	mul	r24, r22
    17dc:	80 01       	movw	r16, r0
    17de:	87 9f       	mul	r24, r23
    17e0:	10 0d       	add	r17, r0
    17e2:	96 9f       	mul	r25, r22
    17e4:	10 0d       	add	r17, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	c8 01       	movw	r24, r16
    17ea:	0d d0       	rcall	.+26     	; 0x1806 <malloc>
    17ec:	ec 01       	movw	r28, r24
    17ee:	00 97       	sbiw	r24, 0x00	; 0
    17f0:	21 f0       	breq	.+8      	; 0x17fa <calloc+0x28>
    17f2:	a8 01       	movw	r20, r16
    17f4:	60 e0       	ldi	r22, 0x00	; 0
    17f6:	70 e0       	ldi	r23, 0x00	; 0
    17f8:	38 d1       	rcall	.+624    	; 0x1a6a <memset>
    17fa:	ce 01       	movw	r24, r28
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	08 95       	ret

00001806 <malloc>:
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	82 30       	cpi	r24, 0x02	; 2
    180c:	91 05       	cpc	r25, r1
    180e:	10 f4       	brcc	.+4      	; 0x1814 <malloc+0xe>
    1810:	82 e0       	ldi	r24, 0x02	; 2
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	e0 91 44 03 	lds	r30, 0x0344
    1818:	f0 91 45 03 	lds	r31, 0x0345
    181c:	20 e0       	ldi	r18, 0x00	; 0
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	a0 e0       	ldi	r26, 0x00	; 0
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	30 97       	sbiw	r30, 0x00	; 0
    1826:	39 f1       	breq	.+78     	; 0x1876 <malloc+0x70>
    1828:	40 81       	ld	r20, Z
    182a:	51 81       	ldd	r21, Z+1	; 0x01
    182c:	48 17       	cp	r20, r24
    182e:	59 07       	cpc	r21, r25
    1830:	b8 f0       	brcs	.+46     	; 0x1860 <malloc+0x5a>
    1832:	48 17       	cp	r20, r24
    1834:	59 07       	cpc	r21, r25
    1836:	71 f4       	brne	.+28     	; 0x1854 <malloc+0x4e>
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	10 97       	sbiw	r26, 0x00	; 0
    183e:	29 f0       	breq	.+10     	; 0x184a <malloc+0x44>
    1840:	13 96       	adiw	r26, 0x03	; 3
    1842:	9c 93       	st	X, r25
    1844:	8e 93       	st	-X, r24
    1846:	12 97       	sbiw	r26, 0x02	; 2
    1848:	2c c0       	rjmp	.+88     	; 0x18a2 <malloc+0x9c>
    184a:	90 93 45 03 	sts	0x0345, r25
    184e:	80 93 44 03 	sts	0x0344, r24
    1852:	27 c0       	rjmp	.+78     	; 0x18a2 <malloc+0x9c>
    1854:	21 15       	cp	r18, r1
    1856:	31 05       	cpc	r19, r1
    1858:	31 f0       	breq	.+12     	; 0x1866 <malloc+0x60>
    185a:	42 17       	cp	r20, r18
    185c:	53 07       	cpc	r21, r19
    185e:	18 f0       	brcs	.+6      	; 0x1866 <malloc+0x60>
    1860:	a9 01       	movw	r20, r18
    1862:	db 01       	movw	r26, r22
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <malloc+0x62>
    1866:	ef 01       	movw	r28, r30
    1868:	9a 01       	movw	r18, r20
    186a:	bd 01       	movw	r22, r26
    186c:	df 01       	movw	r26, r30
    186e:	02 80       	ldd	r0, Z+2	; 0x02
    1870:	f3 81       	ldd	r31, Z+3	; 0x03
    1872:	e0 2d       	mov	r30, r0
    1874:	d7 cf       	rjmp	.-82     	; 0x1824 <malloc+0x1e>
    1876:	21 15       	cp	r18, r1
    1878:	31 05       	cpc	r19, r1
    187a:	f9 f0       	breq	.+62     	; 0x18ba <malloc+0xb4>
    187c:	28 1b       	sub	r18, r24
    187e:	39 0b       	sbc	r19, r25
    1880:	24 30       	cpi	r18, 0x04	; 4
    1882:	31 05       	cpc	r19, r1
    1884:	80 f4       	brcc	.+32     	; 0x18a6 <malloc+0xa0>
    1886:	8a 81       	ldd	r24, Y+2	; 0x02
    1888:	9b 81       	ldd	r25, Y+3	; 0x03
    188a:	61 15       	cp	r22, r1
    188c:	71 05       	cpc	r23, r1
    188e:	21 f0       	breq	.+8      	; 0x1898 <malloc+0x92>
    1890:	fb 01       	movw	r30, r22
    1892:	93 83       	std	Z+3, r25	; 0x03
    1894:	82 83       	std	Z+2, r24	; 0x02
    1896:	04 c0       	rjmp	.+8      	; 0x18a0 <malloc+0x9a>
    1898:	90 93 45 03 	sts	0x0345, r25
    189c:	80 93 44 03 	sts	0x0344, r24
    18a0:	fe 01       	movw	r30, r28
    18a2:	32 96       	adiw	r30, 0x02	; 2
    18a4:	44 c0       	rjmp	.+136    	; 0x192e <malloc+0x128>
    18a6:	fe 01       	movw	r30, r28
    18a8:	e2 0f       	add	r30, r18
    18aa:	f3 1f       	adc	r31, r19
    18ac:	81 93       	st	Z+, r24
    18ae:	91 93       	st	Z+, r25
    18b0:	22 50       	subi	r18, 0x02	; 2
    18b2:	31 09       	sbc	r19, r1
    18b4:	39 83       	std	Y+1, r19	; 0x01
    18b6:	28 83       	st	Y, r18
    18b8:	3a c0       	rjmp	.+116    	; 0x192e <malloc+0x128>
    18ba:	20 91 42 03 	lds	r18, 0x0342
    18be:	30 91 43 03 	lds	r19, 0x0343
    18c2:	23 2b       	or	r18, r19
    18c4:	41 f4       	brne	.+16     	; 0x18d6 <malloc+0xd0>
    18c6:	20 91 02 02 	lds	r18, 0x0202
    18ca:	30 91 03 02 	lds	r19, 0x0203
    18ce:	30 93 43 03 	sts	0x0343, r19
    18d2:	20 93 42 03 	sts	0x0342, r18
    18d6:	20 91 00 02 	lds	r18, 0x0200
    18da:	30 91 01 02 	lds	r19, 0x0201
    18de:	21 15       	cp	r18, r1
    18e0:	31 05       	cpc	r19, r1
    18e2:	41 f4       	brne	.+16     	; 0x18f4 <malloc+0xee>
    18e4:	2d b7       	in	r18, 0x3d	; 61
    18e6:	3e b7       	in	r19, 0x3e	; 62
    18e8:	40 91 04 02 	lds	r20, 0x0204
    18ec:	50 91 05 02 	lds	r21, 0x0205
    18f0:	24 1b       	sub	r18, r20
    18f2:	35 0b       	sbc	r19, r21
    18f4:	e0 91 42 03 	lds	r30, 0x0342
    18f8:	f0 91 43 03 	lds	r31, 0x0343
    18fc:	e2 17       	cp	r30, r18
    18fe:	f3 07       	cpc	r31, r19
    1900:	a0 f4       	brcc	.+40     	; 0x192a <malloc+0x124>
    1902:	2e 1b       	sub	r18, r30
    1904:	3f 0b       	sbc	r19, r31
    1906:	28 17       	cp	r18, r24
    1908:	39 07       	cpc	r19, r25
    190a:	78 f0       	brcs	.+30     	; 0x192a <malloc+0x124>
    190c:	ac 01       	movw	r20, r24
    190e:	4e 5f       	subi	r20, 0xFE	; 254
    1910:	5f 4f       	sbci	r21, 0xFF	; 255
    1912:	24 17       	cp	r18, r20
    1914:	35 07       	cpc	r19, r21
    1916:	48 f0       	brcs	.+18     	; 0x192a <malloc+0x124>
    1918:	4e 0f       	add	r20, r30
    191a:	5f 1f       	adc	r21, r31
    191c:	50 93 43 03 	sts	0x0343, r21
    1920:	40 93 42 03 	sts	0x0342, r20
    1924:	81 93       	st	Z+, r24
    1926:	91 93       	st	Z+, r25
    1928:	02 c0       	rjmp	.+4      	; 0x192e <malloc+0x128>
    192a:	e0 e0       	ldi	r30, 0x00	; 0
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	cf 01       	movw	r24, r30
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <free>:
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	00 97       	sbiw	r24, 0x00	; 0
    193c:	09 f4       	brne	.+2      	; 0x1940 <free+0xa>
    193e:	87 c0       	rjmp	.+270    	; 0x1a4e <free+0x118>
    1940:	fc 01       	movw	r30, r24
    1942:	32 97       	sbiw	r30, 0x02	; 2
    1944:	13 82       	std	Z+3, r1	; 0x03
    1946:	12 82       	std	Z+2, r1	; 0x02
    1948:	c0 91 44 03 	lds	r28, 0x0344
    194c:	d0 91 45 03 	lds	r29, 0x0345
    1950:	20 97       	sbiw	r28, 0x00	; 0
    1952:	81 f4       	brne	.+32     	; 0x1974 <free+0x3e>
    1954:	20 81       	ld	r18, Z
    1956:	31 81       	ldd	r19, Z+1	; 0x01
    1958:	28 0f       	add	r18, r24
    195a:	39 1f       	adc	r19, r25
    195c:	80 91 42 03 	lds	r24, 0x0342
    1960:	90 91 43 03 	lds	r25, 0x0343
    1964:	82 17       	cp	r24, r18
    1966:	93 07       	cpc	r25, r19
    1968:	79 f5       	brne	.+94     	; 0x19c8 <free+0x92>
    196a:	f0 93 43 03 	sts	0x0343, r31
    196e:	e0 93 42 03 	sts	0x0342, r30
    1972:	6d c0       	rjmp	.+218    	; 0x1a4e <free+0x118>
    1974:	de 01       	movw	r26, r28
    1976:	20 e0       	ldi	r18, 0x00	; 0
    1978:	30 e0       	ldi	r19, 0x00	; 0
    197a:	ae 17       	cp	r26, r30
    197c:	bf 07       	cpc	r27, r31
    197e:	50 f4       	brcc	.+20     	; 0x1994 <free+0x5e>
    1980:	12 96       	adiw	r26, 0x02	; 2
    1982:	4d 91       	ld	r20, X+
    1984:	5c 91       	ld	r21, X
    1986:	13 97       	sbiw	r26, 0x03	; 3
    1988:	9d 01       	movw	r18, r26
    198a:	41 15       	cp	r20, r1
    198c:	51 05       	cpc	r21, r1
    198e:	09 f1       	breq	.+66     	; 0x19d2 <free+0x9c>
    1990:	da 01       	movw	r26, r20
    1992:	f3 cf       	rjmp	.-26     	; 0x197a <free+0x44>
    1994:	b3 83       	std	Z+3, r27	; 0x03
    1996:	a2 83       	std	Z+2, r26	; 0x02
    1998:	40 81       	ld	r20, Z
    199a:	51 81       	ldd	r21, Z+1	; 0x01
    199c:	84 0f       	add	r24, r20
    199e:	95 1f       	adc	r25, r21
    19a0:	8a 17       	cp	r24, r26
    19a2:	9b 07       	cpc	r25, r27
    19a4:	71 f4       	brne	.+28     	; 0x19c2 <free+0x8c>
    19a6:	8d 91       	ld	r24, X+
    19a8:	9c 91       	ld	r25, X
    19aa:	11 97       	sbiw	r26, 0x01	; 1
    19ac:	84 0f       	add	r24, r20
    19ae:	95 1f       	adc	r25, r21
    19b0:	02 96       	adiw	r24, 0x02	; 2
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	12 96       	adiw	r26, 0x02	; 2
    19b8:	8d 91       	ld	r24, X+
    19ba:	9c 91       	ld	r25, X
    19bc:	13 97       	sbiw	r26, 0x03	; 3
    19be:	93 83       	std	Z+3, r25	; 0x03
    19c0:	82 83       	std	Z+2, r24	; 0x02
    19c2:	21 15       	cp	r18, r1
    19c4:	31 05       	cpc	r19, r1
    19c6:	29 f4       	brne	.+10     	; 0x19d2 <free+0x9c>
    19c8:	f0 93 45 03 	sts	0x0345, r31
    19cc:	e0 93 44 03 	sts	0x0344, r30
    19d0:	3e c0       	rjmp	.+124    	; 0x1a4e <free+0x118>
    19d2:	d9 01       	movw	r26, r18
    19d4:	13 96       	adiw	r26, 0x03	; 3
    19d6:	fc 93       	st	X, r31
    19d8:	ee 93       	st	-X, r30
    19da:	12 97       	sbiw	r26, 0x02	; 2
    19dc:	4d 91       	ld	r20, X+
    19de:	5d 91       	ld	r21, X+
    19e0:	a4 0f       	add	r26, r20
    19e2:	b5 1f       	adc	r27, r21
    19e4:	ea 17       	cp	r30, r26
    19e6:	fb 07       	cpc	r31, r27
    19e8:	79 f4       	brne	.+30     	; 0x1a08 <free+0xd2>
    19ea:	80 81       	ld	r24, Z
    19ec:	91 81       	ldd	r25, Z+1	; 0x01
    19ee:	84 0f       	add	r24, r20
    19f0:	95 1f       	adc	r25, r21
    19f2:	02 96       	adiw	r24, 0x02	; 2
    19f4:	d9 01       	movw	r26, r18
    19f6:	11 96       	adiw	r26, 0x01	; 1
    19f8:	9c 93       	st	X, r25
    19fa:	8e 93       	st	-X, r24
    19fc:	82 81       	ldd	r24, Z+2	; 0x02
    19fe:	93 81       	ldd	r25, Z+3	; 0x03
    1a00:	13 96       	adiw	r26, 0x03	; 3
    1a02:	9c 93       	st	X, r25
    1a04:	8e 93       	st	-X, r24
    1a06:	12 97       	sbiw	r26, 0x02	; 2
    1a08:	e0 e0       	ldi	r30, 0x00	; 0
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    1a10:	00 97       	sbiw	r24, 0x00	; 0
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <free+0xe4>
    1a14:	fe 01       	movw	r30, r28
    1a16:	ec 01       	movw	r28, r24
    1a18:	f9 cf       	rjmp	.-14     	; 0x1a0c <free+0xd6>
    1a1a:	ce 01       	movw	r24, r28
    1a1c:	02 96       	adiw	r24, 0x02	; 2
    1a1e:	28 81       	ld	r18, Y
    1a20:	39 81       	ldd	r19, Y+1	; 0x01
    1a22:	82 0f       	add	r24, r18
    1a24:	93 1f       	adc	r25, r19
    1a26:	20 91 42 03 	lds	r18, 0x0342
    1a2a:	30 91 43 03 	lds	r19, 0x0343
    1a2e:	28 17       	cp	r18, r24
    1a30:	39 07       	cpc	r19, r25
    1a32:	69 f4       	brne	.+26     	; 0x1a4e <free+0x118>
    1a34:	30 97       	sbiw	r30, 0x00	; 0
    1a36:	29 f4       	brne	.+10     	; 0x1a42 <free+0x10c>
    1a38:	10 92 45 03 	sts	0x0345, r1
    1a3c:	10 92 44 03 	sts	0x0344, r1
    1a40:	02 c0       	rjmp	.+4      	; 0x1a46 <free+0x110>
    1a42:	13 82       	std	Z+3, r1	; 0x03
    1a44:	12 82       	std	Z+2, r1	; 0x02
    1a46:	d0 93 43 03 	sts	0x0343, r29
    1a4a:	c0 93 42 03 	sts	0x0342, r28
    1a4e:	df 91       	pop	r29
    1a50:	cf 91       	pop	r28
    1a52:	08 95       	ret

00001a54 <strnlen_P>:
    1a54:	fc 01       	movw	r30, r24
    1a56:	05 90       	lpm	r0, Z+
    1a58:	61 50       	subi	r22, 0x01	; 1
    1a5a:	70 40       	sbci	r23, 0x00	; 0
    1a5c:	01 10       	cpse	r0, r1
    1a5e:	d8 f7       	brcc	.-10     	; 0x1a56 <strnlen_P+0x2>
    1a60:	80 95       	com	r24
    1a62:	90 95       	com	r25
    1a64:	8e 0f       	add	r24, r30
    1a66:	9f 1f       	adc	r25, r31
    1a68:	08 95       	ret

00001a6a <memset>:
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	01 c0       	rjmp	.+2      	; 0x1a70 <memset+0x6>
    1a6e:	6d 93       	st	X+, r22
    1a70:	41 50       	subi	r20, 0x01	; 1
    1a72:	50 40       	sbci	r21, 0x00	; 0
    1a74:	e0 f7       	brcc	.-8      	; 0x1a6e <memset+0x4>
    1a76:	08 95       	ret

00001a78 <strnlen>:
    1a78:	fc 01       	movw	r30, r24
    1a7a:	61 50       	subi	r22, 0x01	; 1
    1a7c:	70 40       	sbci	r23, 0x00	; 0
    1a7e:	01 90       	ld	r0, Z+
    1a80:	01 10       	cpse	r0, r1
    1a82:	d8 f7       	brcc	.-10     	; 0x1a7a <strnlen+0x2>
    1a84:	80 95       	com	r24
    1a86:	90 95       	com	r25
    1a88:	8e 0f       	add	r24, r30
    1a8a:	9f 1f       	adc	r25, r31
    1a8c:	08 95       	ret

00001a8e <fputc>:
    1a8e:	0f 93       	push	r16
    1a90:	1f 93       	push	r17
    1a92:	cf 93       	push	r28
    1a94:	df 93       	push	r29
    1a96:	18 2f       	mov	r17, r24
    1a98:	09 2f       	mov	r16, r25
    1a9a:	eb 01       	movw	r28, r22
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	81 fd       	sbrc	r24, 1
    1aa0:	03 c0       	rjmp	.+6      	; 0x1aa8 <fputc+0x1a>
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f ef       	ldi	r25, 0xFF	; 255
    1aa6:	20 c0       	rjmp	.+64     	; 0x1ae8 <fputc+0x5a>
    1aa8:	82 ff       	sbrs	r24, 2
    1aaa:	10 c0       	rjmp	.+32     	; 0x1acc <fputc+0x3e>
    1aac:	4e 81       	ldd	r20, Y+6	; 0x06
    1aae:	5f 81       	ldd	r21, Y+7	; 0x07
    1ab0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ab2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ab4:	42 17       	cp	r20, r18
    1ab6:	53 07       	cpc	r21, r19
    1ab8:	7c f4       	brge	.+30     	; 0x1ad8 <fputc+0x4a>
    1aba:	e8 81       	ld	r30, Y
    1abc:	f9 81       	ldd	r31, Y+1	; 0x01
    1abe:	9f 01       	movw	r18, r30
    1ac0:	2f 5f       	subi	r18, 0xFF	; 255
    1ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac4:	39 83       	std	Y+1, r19	; 0x01
    1ac6:	28 83       	st	Y, r18
    1ac8:	10 83       	st	Z, r17
    1aca:	06 c0       	rjmp	.+12     	; 0x1ad8 <fputc+0x4a>
    1acc:	e8 85       	ldd	r30, Y+8	; 0x08
    1ace:	f9 85       	ldd	r31, Y+9	; 0x09
    1ad0:	81 2f       	mov	r24, r17
    1ad2:	19 95       	eicall
    1ad4:	89 2b       	or	r24, r25
    1ad6:	29 f7       	brne	.-54     	; 0x1aa2 <fputc+0x14>
    1ad8:	2e 81       	ldd	r18, Y+6	; 0x06
    1ada:	3f 81       	ldd	r19, Y+7	; 0x07
    1adc:	2f 5f       	subi	r18, 0xFF	; 255
    1ade:	3f 4f       	sbci	r19, 0xFF	; 255
    1ae0:	3f 83       	std	Y+7, r19	; 0x07
    1ae2:	2e 83       	std	Y+6, r18	; 0x06
    1ae4:	81 2f       	mov	r24, r17
    1ae6:	90 2f       	mov	r25, r16
    1ae8:	df 91       	pop	r29
    1aea:	cf 91       	pop	r28
    1aec:	1f 91       	pop	r17
    1aee:	0f 91       	pop	r16
    1af0:	08 95       	ret

00001af2 <__ultoa_invert>:
    1af2:	fa 01       	movw	r30, r20
    1af4:	aa 27       	eor	r26, r26
    1af6:	28 30       	cpi	r18, 0x08	; 8
    1af8:	51 f1       	breq	.+84     	; 0x1b4e <__ultoa_invert+0x5c>
    1afa:	20 31       	cpi	r18, 0x10	; 16
    1afc:	81 f1       	breq	.+96     	; 0x1b5e <__ultoa_invert+0x6c>
    1afe:	e8 94       	clt
    1b00:	6f 93       	push	r22
    1b02:	6e 7f       	andi	r22, 0xFE	; 254
    1b04:	6e 5f       	subi	r22, 0xFE	; 254
    1b06:	7f 4f       	sbci	r23, 0xFF	; 255
    1b08:	8f 4f       	sbci	r24, 0xFF	; 255
    1b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b0c:	af 4f       	sbci	r26, 0xFF	; 255
    1b0e:	b1 e0       	ldi	r27, 0x01	; 1
    1b10:	3e d0       	rcall	.+124    	; 0x1b8e <__ultoa_invert+0x9c>
    1b12:	b4 e0       	ldi	r27, 0x04	; 4
    1b14:	3c d0       	rcall	.+120    	; 0x1b8e <__ultoa_invert+0x9c>
    1b16:	67 0f       	add	r22, r23
    1b18:	78 1f       	adc	r23, r24
    1b1a:	89 1f       	adc	r24, r25
    1b1c:	9a 1f       	adc	r25, r26
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	68 0f       	add	r22, r24
    1b22:	79 1f       	adc	r23, r25
    1b24:	8a 1f       	adc	r24, r26
    1b26:	91 1d       	adc	r25, r1
    1b28:	a1 1d       	adc	r26, r1
    1b2a:	6a 0f       	add	r22, r26
    1b2c:	71 1d       	adc	r23, r1
    1b2e:	81 1d       	adc	r24, r1
    1b30:	91 1d       	adc	r25, r1
    1b32:	a1 1d       	adc	r26, r1
    1b34:	20 d0       	rcall	.+64     	; 0x1b76 <__ultoa_invert+0x84>
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <__ultoa_invert+0x48>
    1b38:	68 94       	set
    1b3a:	3f 91       	pop	r19
    1b3c:	2a e0       	ldi	r18, 0x0A	; 10
    1b3e:	26 9f       	mul	r18, r22
    1b40:	11 24       	eor	r1, r1
    1b42:	30 19       	sub	r19, r0
    1b44:	30 5d       	subi	r19, 0xD0	; 208
    1b46:	31 93       	st	Z+, r19
    1b48:	de f6       	brtc	.-74     	; 0x1b00 <__ultoa_invert+0xe>
    1b4a:	cf 01       	movw	r24, r30
    1b4c:	08 95       	ret
    1b4e:	46 2f       	mov	r20, r22
    1b50:	47 70       	andi	r20, 0x07	; 7
    1b52:	40 5d       	subi	r20, 0xD0	; 208
    1b54:	41 93       	st	Z+, r20
    1b56:	b3 e0       	ldi	r27, 0x03	; 3
    1b58:	0f d0       	rcall	.+30     	; 0x1b78 <__ultoa_invert+0x86>
    1b5a:	c9 f7       	brne	.-14     	; 0x1b4e <__ultoa_invert+0x5c>
    1b5c:	f6 cf       	rjmp	.-20     	; 0x1b4a <__ultoa_invert+0x58>
    1b5e:	46 2f       	mov	r20, r22
    1b60:	4f 70       	andi	r20, 0x0F	; 15
    1b62:	40 5d       	subi	r20, 0xD0	; 208
    1b64:	4a 33       	cpi	r20, 0x3A	; 58
    1b66:	18 f0       	brcs	.+6      	; 0x1b6e <__ultoa_invert+0x7c>
    1b68:	49 5d       	subi	r20, 0xD9	; 217
    1b6a:	31 fd       	sbrc	r19, 1
    1b6c:	40 52       	subi	r20, 0x20	; 32
    1b6e:	41 93       	st	Z+, r20
    1b70:	02 d0       	rcall	.+4      	; 0x1b76 <__ultoa_invert+0x84>
    1b72:	a9 f7       	brne	.-22     	; 0x1b5e <__ultoa_invert+0x6c>
    1b74:	ea cf       	rjmp	.-44     	; 0x1b4a <__ultoa_invert+0x58>
    1b76:	b4 e0       	ldi	r27, 0x04	; 4
    1b78:	a6 95       	lsr	r26
    1b7a:	97 95       	ror	r25
    1b7c:	87 95       	ror	r24
    1b7e:	77 95       	ror	r23
    1b80:	67 95       	ror	r22
    1b82:	ba 95       	dec	r27
    1b84:	c9 f7       	brne	.-14     	; 0x1b78 <__ultoa_invert+0x86>
    1b86:	00 97       	sbiw	r24, 0x00	; 0
    1b88:	61 05       	cpc	r22, r1
    1b8a:	71 05       	cpc	r23, r1
    1b8c:	08 95       	ret
    1b8e:	9b 01       	movw	r18, r22
    1b90:	ac 01       	movw	r20, r24
    1b92:	0a 2e       	mov	r0, r26
    1b94:	06 94       	lsr	r0
    1b96:	57 95       	ror	r21
    1b98:	47 95       	ror	r20
    1b9a:	37 95       	ror	r19
    1b9c:	27 95       	ror	r18
    1b9e:	ba 95       	dec	r27
    1ba0:	c9 f7       	brne	.-14     	; 0x1b94 <__ultoa_invert+0xa2>
    1ba2:	62 0f       	add	r22, r18
    1ba4:	73 1f       	adc	r23, r19
    1ba6:	84 1f       	adc	r24, r20
    1ba8:	95 1f       	adc	r25, r21
    1baa:	a0 1d       	adc	r26, r0
    1bac:	08 95       	ret

00001bae <_exit>:
    1bae:	f8 94       	cli

00001bb0 <__stop_program>:
    1bb0:	ff cf       	rjmp	.-2      	; 0x1bb0 <__stop_program>
